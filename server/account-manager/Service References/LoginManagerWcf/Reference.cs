//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LoginManagerWcf
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://microarea.it/LoginManager/", ConfigurationName="LoginManagerWcf.MicroareaLoginManagerSoap")]
    public interface MicroareaLoginManagerSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetConfigurationHash", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetConfigurationHashAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/UserCanAccessWebSitePrivateArea", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> UserCanAccessWebSitePrivateAreaAsync(int loginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsEasyBuilderDeveloper", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> IsEasyBuilderDeveloperAsync(string authenticationToken);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SendErrorFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<LoginManagerWcf.SendErrorFileResponse> SendErrorFileAsync(LoginManagerWcf.SendErrorFileRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DownloadPdb", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<LoginManagerWcf.DownloadPdbResponse> DownloadPdbAsync(LoginManagerWcf.DownloadPdbRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMainSerialNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetMainSerialNumberAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMLUExpiryDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetMLUExpiryDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SendBalloon", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task SendBalloonAsync(string authenticationToken, string bodyMessage, LoginManagerWcf.MessageType messageType, string[] recipients);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/AdvancedSendBalloon", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task AdvancedSendBalloonAsync(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/AdvancedSendTaggedBalloon", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task AdvancedSendTaggedBalloonAsync(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer, string tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetChannelFree", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> SetChannelFreeAsync(string authenticationToken, string[] channelCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetChannelFree", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> GetChannelFreeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetEditionType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetEditionTypeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Init", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> InitAsync(bool reboot, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsAlive", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> IsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/VerifyDBSize", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> VerifyDBSizeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMobileToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetMobileTokenAsync(string token, int loginType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/RefreshWMSSlot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> RefreshWMSSlotAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsCalAvailable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> IsCalAvailableAsync(string authenticationToken, string application, string functionality);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsValidDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<LoginManagerWcf.IsValidDateResponse> IsValidDateAsync(LoginManagerWcf.IsValidDateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/PingNeeded", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> PingNeededAsync(bool force);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetClientData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task SetClientDataAsync(LoginManagerWcf.ClientData cd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetCompanyInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> SetCompanyInfoAsync(string authToken, string aName, string aValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsActivated", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> IsActivatedAsync(string application, string functionality);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsSynchActivation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> IsSynchActivationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetModules", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string[]> GetModulesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCompanyUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string[]> GetCompanyUsersAsync(string companyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetNonNTCompanyUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string[]> GetNonNTCompanyUsersAsync(string companyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCompanyRoles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string[]> GetCompanyRolesAsync(string companyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/HasUserEBRoles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> HasUserEBRolesAsync(int companyName, int userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserRoles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string[]> GetUserRolesAsync(string companyName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/EnumAllUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string[]> EnumAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/EnumAllCompanyUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string[]> EnumAllCompanyUsersAsync(int companyId, bool onlyNonNTUsers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetRoleUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string[]> GetRoleUsersAsync(string companyName, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/EnumCompanies", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string[]> EnumCompaniesAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsIntegratedSecurityUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> IsIntegratedSecurityUserAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetLoggedUsersNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<int> GetLoggedUsersNumberAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCompanyLoggedUsersNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<int> GetCompanyLoggedUsersNumberAsync(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetLoggedUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetLoggedUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetLoggedUsersAdvanced", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetLoggedUsersAdvancedAsync(string token);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCalNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.GetCalNumberResponse> GetCalNumberAsync(LoginManagerWcf.GetCalNumberRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCalNumber2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.GetCalNumber2Response> GetCalNumber2Async(LoginManagerWcf.GetCalNumber2Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetTokenProcessType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<int> GetTokenProcessTypeAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ReloadConfiguration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task ReloadConfigurationAsync();
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ValidateUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.ValidateUserResponse> ValidateUserAsync(LoginManagerWcf.ValidateUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ConsumeMobileCal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<int> ConsumeMobileCalAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ChangePassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<int> ChangePasswordAsync(string userName, string oldPassword, string newPassword);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/LoginCompact", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.LoginCompactResponse> LoginCompactAsync(LoginManagerWcf.LoginCompactRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SSOLogOff", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task SSOLogOffAsync(string cryptedToken);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/LoginViaInfinityToken2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.LoginViaInfinityToken2Response> LoginViaInfinityToken2Async(LoginManagerWcf.LoginViaInfinityToken2Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetIToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetITokenAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ExistsSSOIDUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> ExistsSSOIDUserAsync(string cryptedToken);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.LoginResponse> LoginAsync(LoginManagerWcf.LoginRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Login2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.Login2Response> Login2Async(LoginManagerWcf.Login2Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUsagePercentageOnDBSize", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<int> GetUsagePercentageOnDBSizeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ConfirmToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> ConfirmTokenAsync(string authenticationToken, string procType);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetLoginInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.GetLoginInformationResponse> GetLoginInformationAsync(LoginManagerWcf.GetLoginInformationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/LogOff", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task LogOffAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetUserNameAsync(int loginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserDescriptionById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetUserDescriptionByIdAsync(int loginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserDescriptionByName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetUserDescriptionByNameAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserEMailByName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetUserEMailByNameAsync(string login);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsFloatingUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.IsFloatingUserResponse> IsFloatingUserAsync(LoginManagerWcf.IsFloatingUserRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsWebUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.IsWebUserResponse> IsWebUserAsync(LoginManagerWcf.IsWebUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsWinNT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> IsWinNTAsync(int loginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDbOwner", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetDbOwnerAsync(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsCompanySecured", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> IsCompanySecuredAsync(int companyId);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetAuthenticationInformations", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.GetAuthenticationInformationsResponse> GetAuthenticationInformationsAsync(LoginManagerWcf.GetAuthenticationInformationsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetAuthenticationNames", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.GetAuthenticationNamesResponse> GetAuthenticationNamesAsync(LoginManagerWcf.GetAuthenticationNamesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteAssociation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> DeleteAssociationAsync(int loginId, int companyId, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(int loginId, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteCompany", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> DeleteCompanyAsync(int companyId, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetSystemDBConnectionString", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetSystemDBConnectionStringAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDMSConnectionString", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetDMSConnectionStringAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Sql2012Allowed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> Sql2012AllowedAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDMSDatabasesInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.DmsDatabaseInfo[]> GetDMSDatabasesInfoAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDataSynchroDatabasesInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.DataSynchroDatabaseInfo[]> GetDataSynchroDatabasesInfoAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCompanyDatabasesInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.TbSenderDatabaseInfo[]> GetCompanyDatabasesInfoAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetEdition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetEditionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetConfigurationStream", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.GetConfigurationStreamResponse> GetConfigurationStreamAsync(LoginManagerWcf.GetConfigurationStreamRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCountry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetCountryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetProviderNameFromCompanyId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetProviderNameFromCompanyIdAsync(int companyId);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetInstallationVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.GetInstallationVersionResponse> GetInstallationVersionAsync(LoginManagerWcf.GetInstallationVersionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetUserInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserInfoID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetUserInfoIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/TraceAction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task TraceActionAsync(string company, string login, int type, string processName, string winUser, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/HasUserAlreadyChangedPasswordToday", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> HasUserAlreadyChangedPasswordTodayAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetBrandedApplicationTitle", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetBrandedApplicationTitleAsync(string application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMasterProductBrandedName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetMasterProductBrandedNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMasterSolutionBrandedName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetMasterSolutionBrandedNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMasterSolution", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetMasterSolutionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetBrandedProducerName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetBrandedProducerNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetBrandedProductTitle", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetBrandedProductTitleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetBrandedKey", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetBrandedKeyAsync(string source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDBNetworkType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.DBNetworkType> GetDBNetworkTypeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDatabaseType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetDatabaseTypeAsync(string providerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/CanUseNamespace", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> CanUseNamespaceAsync(string nameSpace, string authenticationToken, LoginManagerWcf.GrantType grantType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/CacheCounter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> CacheCounterAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/CacheCounterGTG", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.SerialNumberType> CacheCounterGTGAsync();
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetCurrentComponents", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.SetCurrentComponentsResponse> SetCurrentComponentsAsync(LoginManagerWcf.SetCurrentComponentsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsVirginActivation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> IsVirginActivationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/HD", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<int> HDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/StoreMLUChoice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task StoreMLUChoiceAsync(bool userChoseMluInChargeToMicroarea);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SaveLicensed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> SaveLicensedAsync(string xml, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ValidateIToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> ValidateITokenAsync(string itoken, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SaveUserInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> SaveUserInfoAsync(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteUserInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task DeleteUserInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteLicensed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task DeleteLicensedAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/PrePing", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> PrePingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Ping", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> PingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetArticlesWithNamedCal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.ModuleNameInfo[]> GetArticlesWithNamedCalAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetArticlesWithFloatingCal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.ModuleNameInfo[]> GetArticlesWithFloatingCalAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/RefreshFloatingMark", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task RefreshFloatingMarkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/RefreshSecurityStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task RefreshSecurityStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetProxySupportVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<int> GetProxySupportVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetProxySettings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.ProxySettings> GetProxySettingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetProxySettings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task SetProxySettingsAsync(LoginManagerWcf.ProxySettings proxySettings);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCompanyLanguage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.GetCompanyLanguageResponse> GetCompanyLanguageAsync(LoginManagerWcf.GetCompanyLanguageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsValidUpToDateToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> IsValidUpToDateTokenAsync(string authenticationToken, string mluexpired);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsValidToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> IsValidTokenAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ReloadUserArticleBindings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task ReloadUserArticleBindingsAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/FEUsed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> FEUsedAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Sbrill", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> SbrillAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCalType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.LoginSlotType> GetCalTypeAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsUserLoggedByName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> IsUserLoggedByNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsUserLogged", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> IsUserLoggedAsync(int loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsSecurityLightEnabled", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> IsSecurityLightEnabledAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsSecurityLightAccessAllowed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> IsSecurityLightAccessAllowedAsync(string nameSpace, string authenticationToken, bool unattended);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDBCultureLCID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<int> GetDBCultureLCIDAsync(int companyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetMessageRead", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task SetMessageReadAsync(string userName, string messageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetImmediateMessagesQueue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.Advertisement[]> GetImmediateMessagesQueueAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMessagesQueue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.Advertisement[]> GetMessagesQueueAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetOldMessages", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<LoginManagerWcf.Advertisement[]> GetOldMessagesAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteMessageFromQueue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task DeleteMessageFromQueueAsync(string messageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/PurgeMessageByTag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task PurgeMessageByTagAsync(string tag, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SendAccessMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<bool> SendAccessMailAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetAspNetUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        System.Threading.Tasks.Task<string> GetAspNetUserAsync();
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SendErrorFile", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class SendErrorFileRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string LogFile;
        
        public SendErrorFileRequest()
        {
        }
        
        public SendErrorFileRequest(string LogFile)
        {
            this.LogFile = LogFile;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SendErrorFileResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class SendErrorFileResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool SendErrorFileResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string ErrorMessage;
        
        public SendErrorFileResponse()
        {
        }
        
        public SendErrorFileResponse(bool SendErrorFileResult, string ErrorMessage)
        {
            this.SendErrorFileResult = SendErrorFileResult;
            this.ErrorMessage = ErrorMessage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadPdb", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class DownloadPdbRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string PdbFile;
        
        public DownloadPdbRequest()
        {
        }
        
        public DownloadPdbRequest(string PdbFile)
        {
            this.PdbFile = PdbFile;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadPdbResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class DownloadPdbResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool DownloadPdbResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string ErrorMessage;
        
        public DownloadPdbResponse()
        {
        }
        
        public DownloadPdbResponse(bool DownloadPdbResult, string ErrorMessage)
        {
            this.DownloadPdbResult = DownloadPdbResult;
            this.ErrorMessage = ErrorMessage;
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum MessageType
    {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        Contract = 2,
        
        /// <remarks/>
        Advrtsm = 4,
        
        /// <remarks/>
        Updates = 8,
        
        /// <remarks/>
        PostaLite = 16,
        
        /// <remarks/>
        Default = 32,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsValidDate", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class IsValidDateRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string operationDate;
        
        public IsValidDateRequest()
        {
        }
        
        public IsValidDateRequest(string operationDate)
        {
            this.operationDate = operationDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsValidDateResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class IsValidDateResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool IsValidDateResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string maxDate;
        
        public IsValidDateResponse()
        {
        }
        
        public IsValidDateResponse(bool IsValidDateResult, string maxDate)
        {
            this.IsValidDateResult = IsValidDateResult;
            this.maxDate = maxDate;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class ClientData
    {
        
        private string nameField;
        
        private string cPUField;
        
        private string resolutionsField;
        
        private string ramTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string CPU
        {
            get
            {
                return this.cPUField;
            }
            set
            {
                this.cPUField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Resolutions
        {
            get
            {
                return this.resolutionsField;
            }
            set
            {
                this.resolutionsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string RamType
        {
            get
            {
                return this.ramTypeField;
            }
            set
            {
                this.ramTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class LocalizationBag
    {
        
        private string keyField;
        
        private string productNameField;
        
        private string userEmailField;
        
        private string daysField;
        
        private long renewalPeriodTicksField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Key
        {
            get
            {
                return this.keyField;
            }
            set
            {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProductName
        {
            get
            {
                return this.productNameField;
            }
            set
            {
                this.productNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string UserEmail
        {
            get
            {
                return this.userEmailField;
            }
            set
            {
                this.userEmailField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Days
        {
            get
            {
                return this.daysField;
            }
            set
            {
                this.daysField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public long RenewalPeriodTicks
        {
            get
            {
                return this.renewalPeriodTicksField;
            }
            set
            {
                this.renewalPeriodTicksField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class AdvertisementBody
    {
        
        private string textField;
        
        private string linkField;
        
        private string htmlField;
        
        private LocalizationBag localizationBagTypedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Link
        {
            get
            {
                return this.linkField;
            }
            set
            {
                this.linkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Html
        {
            get
            {
                return this.htmlField;
            }
            set
            {
                this.htmlField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public LocalizationBag LocalizationBagTyped
        {
            get
            {
                return this.localizationBagTypedField;
            }
            set
            {
                this.localizationBagTypedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class Advertisement
    {
        
        private int autoClosingTimeField;
        
        private string idField;
        
        private bool hideDisclaimerField;
        
        private bool expireWithRestartField;
        
        private bool historicizeField;
        
        private bool immediateField;
        
        private System.DateTime expiryDateField;
        
        private MessageType typeField;
        
        private string tagField;
        
        private int severityField;
        
        private string[] recipientsField;
        
        private AdvertisementBody bodyTypedField;
        
        private System.DateTime creationDateField;
        
        private MessageSensation sensationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int AutoClosingTime
        {
            get
            {
                return this.autoClosingTimeField;
            }
            set
            {
                this.autoClosingTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool HideDisclaimer
        {
            get
            {
                return this.hideDisclaimerField;
            }
            set
            {
                this.hideDisclaimerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool ExpireWithRestart
        {
            get
            {
                return this.expireWithRestartField;
            }
            set
            {
                this.expireWithRestartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool Historicize
        {
            get
            {
                return this.historicizeField;
            }
            set
            {
                this.historicizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool Immediate
        {
            get
            {
                return this.immediateField;
            }
            set
            {
                this.immediateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public System.DateTime ExpiryDate
        {
            get
            {
                return this.expiryDateField;
            }
            set
            {
                this.expiryDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public MessageType Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string Tag
        {
            get
            {
                return this.tagField;
            }
            set
            {
                this.tagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public int Severity
        {
            get
            {
                return this.severityField;
            }
            set
            {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=10)]
        public string[] Recipients
        {
            get
            {
                return this.recipientsField;
            }
            set
            {
                this.recipientsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public AdvertisementBody BodyTyped
        {
            get
            {
                return this.bodyTypedField;
            }
            set
            {
                this.bodyTypedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public System.DateTime CreationDate
        {
            get
            {
                return this.creationDateField;
            }
            set
            {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public MessageSensation Sensation
        {
            get
            {
                return this.sensationField;
            }
            set
            {
                this.sensationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum MessageSensation
    {
        
        /// <remarks/>
        Information,
        
        /// <remarks/>
        ResultGreen,
        
        /// <remarks/>
        Warning,
        
        /// <remarks/>
        Error,
        
        /// <remarks/>
        AccessDenied,
        
        /// <remarks/>
        Help,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class FirewallCredentialsSettings
    {
        
        private bool needsCredentialsField;
        
        private string domainField;
        
        private string nameField;
        
        private string passwordField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool NeedsCredentials
        {
            get
            {
                return this.needsCredentialsField;
            }
            set
            {
                this.needsCredentialsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Domain
        {
            get
            {
                return this.domainField;
            }
            set
            {
                this.domainField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class ProxyAddress
    {
        
        private string serverField;
        
        private int portField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Server
        {
            get
            {
                return this.serverField;
            }
            set
            {
                this.serverField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Port
        {
            get
            {
                return this.portField;
            }
            set
            {
                this.portField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProxySettings))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public abstract partial class State
    {
        
        private string verField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ver
        {
            get
            {
                return this.verField;
            }
            set
            {
                this.verField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class ProxySettings : State
    {
        
        private ProxyAddress httpProxyField;
        
        private ProxyAddress ftpProxyField;
        
        private FirewallCredentialsSettings firewallCredentialsSettingsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ProxyAddress HttpProxy
        {
            get
            {
                return this.httpProxyField;
            }
            set
            {
                this.httpProxyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ProxyAddress FtpProxy
        {
            get
            {
                return this.ftpProxyField;
            }
            set
            {
                this.ftpProxyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public FirewallCredentialsSettings FirewallCredentialsSettings
        {
            get
            {
                return this.firewallCredentialsSettingsField;
            }
            set
            {
                this.firewallCredentialsSettingsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class ModuleNameInfo
    {
        
        private string nameField;
        
        private string localizedNameField;
        
        private int cALField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string LocalizedName
        {
            get
            {
                return this.localizedNameField;
            }
            set
            {
                this.localizedNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int CAL
        {
            get
            {
                return this.cALField;
            }
            set
            {
                this.cALField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class TbSenderDatabaseInfo
    {
        
        private string connectionStringField;
        
        private int companyIdField;
        
        private string usernameField;
        
        private string passwordField;
        
        private string serverNameField;
        
        private string databaseNameField;
        
        private bool winAuthenticationField;
        
        private string companyField;
        
        private bool isEnabledField;
        
        private string companyCultureField;
        
        private string companyCultureUIField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConnectionString
        {
            get
            {
                return this.connectionStringField;
            }
            set
            {
                this.connectionStringField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int CompanyId
        {
            get
            {
                return this.companyIdField;
            }
            set
            {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Username
        {
            get
            {
                return this.usernameField;
            }
            set
            {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string ServerName
        {
            get
            {
                return this.serverNameField;
            }
            set
            {
                this.serverNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string DatabaseName
        {
            get
            {
                return this.databaseNameField;
            }
            set
            {
                this.databaseNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public bool WinAuthentication
        {
            get
            {
                return this.winAuthenticationField;
            }
            set
            {
                this.winAuthenticationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string Company
        {
            get
            {
                return this.companyField;
            }
            set
            {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public bool IsEnabled
        {
            get
            {
                return this.isEnabledField;
            }
            set
            {
                this.isEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string CompanyCulture
        {
            get
            {
                return this.companyCultureField;
            }
            set
            {
                this.companyCultureField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string CompanyCultureUI
        {
            get
            {
                return this.companyCultureUIField;
            }
            set
            {
                this.companyCultureUIField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public abstract partial class IBaseSynchroProvider
    {
        
        private bool isProviderValidField;
        
        private string companyNameField;
        
        private bool isValidationEnabledField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool IsProviderValid
        {
            get
            {
                return this.isProviderValidField;
            }
            set
            {
                this.isProviderValidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string CompanyName
        {
            get
            {
                return this.companyNameField;
            }
            set
            {
                this.companyNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool IsValidationEnabled
        {
            get
            {
                return this.isValidationEnabledField;
            }
            set
            {
                this.isValidationEnabledField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class DataSynchroDatabaseInfo
    {
        
        private string companyConnectionStringField;
        
        private DBMSType companyDBMSTypeField;
        
        private string serverField;
        
        private string databaseField;
        
        private string userField;
        
        private string passwordField;
        
        private bool winAuthenticationField;
        
        private string companyNameField;
        
        private int companyIdField;
        
        private string loginNameField;
        
        private string loginPasswordField;
        
        private bool loginWindowsAuthenticationField;
        
        private int loginIdField;
        
        private bool useDBSlaveField;
        
        private string dmsConnectionStringField;
        
        private IBaseSynchroProvider[] synchroProvidersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CompanyConnectionString
        {
            get
            {
                return this.companyConnectionStringField;
            }
            set
            {
                this.companyConnectionStringField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DBMSType CompanyDBMSType
        {
            get
            {
                return this.companyDBMSTypeField;
            }
            set
            {
                this.companyDBMSTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Server
        {
            get
            {
                return this.serverField;
            }
            set
            {
                this.serverField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Database
        {
            get
            {
                return this.databaseField;
            }
            set
            {
                this.databaseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string User
        {
            get
            {
                return this.userField;
            }
            set
            {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public bool WinAuthentication
        {
            get
            {
                return this.winAuthenticationField;
            }
            set
            {
                this.winAuthenticationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string CompanyName
        {
            get
            {
                return this.companyNameField;
            }
            set
            {
                this.companyNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public int CompanyId
        {
            get
            {
                return this.companyIdField;
            }
            set
            {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string LoginName
        {
            get
            {
                return this.loginNameField;
            }
            set
            {
                this.loginNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string LoginPassword
        {
            get
            {
                return this.loginPasswordField;
            }
            set
            {
                this.loginPasswordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public bool LoginWindowsAuthentication
        {
            get
            {
                return this.loginWindowsAuthenticationField;
            }
            set
            {
                this.loginWindowsAuthenticationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public int LoginId
        {
            get
            {
                return this.loginIdField;
            }
            set
            {
                this.loginIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public bool UseDBSlave
        {
            get
            {
                return this.useDBSlaveField;
            }
            set
            {
                this.useDBSlaveField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string DmsConnectionString
        {
            get
            {
                return this.dmsConnectionStringField;
            }
            set
            {
                this.dmsConnectionStringField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=15)]
        public IBaseSynchroProvider[] SynchroProviders
        {
            get
            {
                return this.synchroProvidersField;
            }
            set
            {
                this.synchroProvidersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum DBMSType
    {
        
        /// <remarks/>
        UNKNOWN,
        
        /// <remarks/>
        SQLSERVER,
        
        /// <remarks/>
        ORACLE,
        
        /// <remarks/>
        POSTGRE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class DmsDatabaseInfo
    {
        
        private string companyConnectionStringField;
        
        private DBMSType companyDBMSTypeField;
        
        private string dMSConnectionStringField;
        
        private string serverField;
        
        private string databaseField;
        
        private string companyField;
        
        private int companyIdField;
        
        private int lCIDField;
        
        private bool isFTSEnabledField;
        
        private bool useFTSField;
        
        private bool isAlreadyAnalyzedField;
        
        private string extensionTypeCollateField;
        
        private string fulltextDocumentTypesCollateField;
        
        private bool isSOSActivatedField;
        
        private System.DateTime lastSOSUpdateDateTimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CompanyConnectionString
        {
            get
            {
                return this.companyConnectionStringField;
            }
            set
            {
                this.companyConnectionStringField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DBMSType CompanyDBMSType
        {
            get
            {
                return this.companyDBMSTypeField;
            }
            set
            {
                this.companyDBMSTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string DMSConnectionString
        {
            get
            {
                return this.dMSConnectionStringField;
            }
            set
            {
                this.dMSConnectionStringField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Server
        {
            get
            {
                return this.serverField;
            }
            set
            {
                this.serverField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Database
        {
            get
            {
                return this.databaseField;
            }
            set
            {
                this.databaseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Company
        {
            get
            {
                return this.companyField;
            }
            set
            {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int CompanyId
        {
            get
            {
                return this.companyIdField;
            }
            set
            {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public int LCID
        {
            get
            {
                return this.lCIDField;
            }
            set
            {
                this.lCIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public bool IsFTSEnabled
        {
            get
            {
                return this.isFTSEnabledField;
            }
            set
            {
                this.isFTSEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public bool UseFTS
        {
            get
            {
                return this.useFTSField;
            }
            set
            {
                this.useFTSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public bool IsAlreadyAnalyzed
        {
            get
            {
                return this.isAlreadyAnalyzedField;
            }
            set
            {
                this.isAlreadyAnalyzedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string ExtensionTypeCollate
        {
            get
            {
                return this.extensionTypeCollateField;
            }
            set
            {
                this.extensionTypeCollateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string FulltextDocumentTypesCollate
        {
            get
            {
                return this.fulltextDocumentTypesCollateField;
            }
            set
            {
                this.fulltextDocumentTypesCollateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public bool IsSOSActivated
        {
            get
            {
                return this.isSOSActivatedField;
            }
            set
            {
                this.isSOSActivatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public System.DateTime LastSOSUpdateDateTime
        {
            get
            {
                return this.lastSOSUpdateDateTimeField;
            }
            set
            {
                this.lastSOSUpdateDateTimeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCalNumber", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetCalNumberRequest
    {
        
        public GetCalNumberRequest()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCalNumberResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetCalNumberResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public int namedCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public int gdiConcurrent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public int unnamedCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public int officeCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public int tpCal;
        
        public GetCalNumberResponse()
        {
        }
        
        public GetCalNumberResponse(int namedCal, int gdiConcurrent, int unnamedCal, int officeCal, int tpCal)
        {
            this.namedCal = namedCal;
            this.gdiConcurrent = gdiConcurrent;
            this.unnamedCal = unnamedCal;
            this.officeCal = officeCal;
            this.tpCal = tpCal;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCalNumber2", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetCalNumber2Request
    {
        
        public GetCalNumber2Request()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCalNumber2Response", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetCalNumber2Response
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public int namedCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public int gdiConcurrent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public int unnamedCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public int officeCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public int tpCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=5)]
        public int wmsCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=6)]
        public int manufacturingCal;
        
        public GetCalNumber2Response()
        {
        }
        
        public GetCalNumber2Response(int namedCal, int gdiConcurrent, int unnamedCal, int officeCal, int tpCal, int wmsCal, int manufacturingCal)
        {
            this.namedCal = namedCal;
            this.gdiConcurrent = gdiConcurrent;
            this.unnamedCal = unnamedCal;
            this.officeCal = officeCal;
            this.tpCal = tpCal;
            this.wmsCal = wmsCal;
            this.manufacturingCal = manufacturingCal;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateUser", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class ValidateUserRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public bool winNtAuthentication;
        
        public ValidateUserRequest()
        {
        }
        
        public ValidateUserRequest(string userName, string password, bool winNtAuthentication)
        {
            this.userName = userName;
            this.password = password;
            this.winNtAuthentication = winNtAuthentication;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateUserResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class ValidateUserResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public int ValidateUserResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string[] userCompanies;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public int loginId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public bool userCannotChangePassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public bool userMustChangePassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=5)]
        public System.DateTime expiredDatePassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=6)]
        public bool passwordNeverExpired;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=7)]
        public bool expiredDateCannotChange;
        
        public ValidateUserResponse()
        {
        }
        
        public ValidateUserResponse(int ValidateUserResult, string[] userCompanies, int loginId, bool userCannotChangePassword, bool userMustChangePassword, System.DateTime expiredDatePassword, bool passwordNeverExpired, bool expiredDateCannotChange)
        {
            this.ValidateUserResult = ValidateUserResult;
            this.userCompanies = userCompanies;
            this.loginId = loginId;
            this.userCannotChangePassword = userCannotChangePassword;
            this.userMustChangePassword = userMustChangePassword;
            this.expiredDatePassword = expiredDatePassword;
            this.passwordNeverExpired = passwordNeverExpired;
            this.expiredDateCannotChange = expiredDateCannotChange;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LoginCompact", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class LoginCompactRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string companyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public string askingProcess;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public bool overWriteLogin;
        
        public LoginCompactRequest()
        {
        }
        
        public LoginCompactRequest(string userName, string companyName, string password, string askingProcess, bool overWriteLogin)
        {
            this.userName = userName;
            this.companyName = companyName;
            this.password = password;
            this.askingProcess = askingProcess;
            this.overWriteLogin = overWriteLogin;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LoginCompactResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class LoginCompactResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public int LoginCompactResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string companyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public string authenticationToken;
        
        public LoginCompactResponse()
        {
        }
        
        public LoginCompactResponse(int LoginCompactResult, string userName, string companyName, string authenticationToken)
        {
            this.LoginCompactResult = LoginCompactResult;
            this.userName = userName;
            this.companyName = companyName;
            this.authenticationToken = authenticationToken;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LoginViaInfinityToken2", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class LoginViaInfinityToken2Request
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string cryptedToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string username;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public string company;
        
        public LoginViaInfinityToken2Request()
        {
        }
        
        public LoginViaInfinityToken2Request(string cryptedToken, string username, string password, string company)
        {
            this.cryptedToken = cryptedToken;
            this.username = username;
            this.password = password;
            this.company = company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LoginViaInfinityToken2Response", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class LoginViaInfinityToken2Response
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public int LoginViaInfinityToken2Result;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string authenticationToken;
        
        public LoginViaInfinityToken2Response()
        {
        }
        
        public LoginViaInfinityToken2Response(int LoginViaInfinityToken2Result, string authenticationToken)
        {
            this.LoginViaInfinityToken2Result = LoginViaInfinityToken2Result;
            this.authenticationToken = authenticationToken;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Login", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class LoginRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string companyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public string askingProcess;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public bool overWriteLogin;
        
        public LoginRequest()
        {
        }
        
        public LoginRequest(string userName, string companyName, string password, string askingProcess, bool overWriteLogin)
        {
            this.userName = userName;
            this.companyName = companyName;
            this.password = password;
            this.askingProcess = askingProcess;
            this.overWriteLogin = overWriteLogin;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LoginResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class LoginResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public int LoginResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string companyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public bool admin;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public string authenticationToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=5)]
        public int companyId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=6)]
        public string dbName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=7)]
        public string dbServer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=8)]
        public int providerId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=9)]
        public bool security;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=10)]
        public bool auditing;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=11)]
        public bool useKeyedUpdate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=12)]
        public bool transactionUse;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=13)]
        public string preferredLanguage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=14)]
        public string applicationLanguage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=15)]
        public string providerName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=16)]
        public string providerDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=17)]
        public bool useConstParameter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=18)]
        public bool stripTrailingSpaces;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=19)]
        public string providerCompanyConnectionString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=20)]
        public string nonProviderCompanyConnectionString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=21)]
        public string dbUser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=22)]
        public string activationDB;
        
        public LoginResponse()
        {
        }
        
        public LoginResponse(
                    int LoginResult, 
                    string userName, 
                    string companyName, 
                    bool admin, 
                    string authenticationToken, 
                    int companyId, 
                    string dbName, 
                    string dbServer, 
                    int providerId, 
                    bool security, 
                    bool auditing, 
                    bool useKeyedUpdate, 
                    bool transactionUse, 
                    string preferredLanguage, 
                    string applicationLanguage, 
                    string providerName, 
                    string providerDescription, 
                    bool useConstParameter, 
                    bool stripTrailingSpaces, 
                    string providerCompanyConnectionString, 
                    string nonProviderCompanyConnectionString, 
                    string dbUser, 
                    string activationDB)
        {
            this.LoginResult = LoginResult;
            this.userName = userName;
            this.companyName = companyName;
            this.admin = admin;
            this.authenticationToken = authenticationToken;
            this.companyId = companyId;
            this.dbName = dbName;
            this.dbServer = dbServer;
            this.providerId = providerId;
            this.security = security;
            this.auditing = auditing;
            this.useKeyedUpdate = useKeyedUpdate;
            this.transactionUse = transactionUse;
            this.preferredLanguage = preferredLanguage;
            this.applicationLanguage = applicationLanguage;
            this.providerName = providerName;
            this.providerDescription = providerDescription;
            this.useConstParameter = useConstParameter;
            this.stripTrailingSpaces = stripTrailingSpaces;
            this.providerCompanyConnectionString = providerCompanyConnectionString;
            this.nonProviderCompanyConnectionString = nonProviderCompanyConnectionString;
            this.dbUser = dbUser;
            this.activationDB = activationDB;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Login2", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class Login2Request
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string companyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public string askingProcess;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public string macIp;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=5)]
        public bool overWriteLogin;
        
        public Login2Request()
        {
        }
        
        public Login2Request(string userName, string companyName, string password, string askingProcess, string macIp, bool overWriteLogin)
        {
            this.userName = userName;
            this.companyName = companyName;
            this.password = password;
            this.askingProcess = askingProcess;
            this.macIp = macIp;
            this.overWriteLogin = overWriteLogin;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Login2Response", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class Login2Response
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public int Login2Result;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string companyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public bool admin;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public string authenticationToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=5)]
        public int companyId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=6)]
        public string dbName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=7)]
        public string dbServer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=8)]
        public int providerId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=9)]
        public bool security;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=10)]
        public bool auditing;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=11)]
        public bool useKeyedUpdate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=12)]
        public bool transactionUse;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=13)]
        public string preferredLanguage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=14)]
        public string applicationLanguage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=15)]
        public string providerName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=16)]
        public string providerDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=17)]
        public bool useConstParameter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=18)]
        public bool stripTrailingSpaces;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=19)]
        public string providerCompanyConnectionString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=20)]
        public string nonProviderCompanyConnectionString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=21)]
        public string dbUser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=22)]
        public string activationDB;
        
        public Login2Response()
        {
        }
        
        public Login2Response(
                    int Login2Result, 
                    string userName, 
                    string companyName, 
                    bool admin, 
                    string authenticationToken, 
                    int companyId, 
                    string dbName, 
                    string dbServer, 
                    int providerId, 
                    bool security, 
                    bool auditing, 
                    bool useKeyedUpdate, 
                    bool transactionUse, 
                    string preferredLanguage, 
                    string applicationLanguage, 
                    string providerName, 
                    string providerDescription, 
                    bool useConstParameter, 
                    bool stripTrailingSpaces, 
                    string providerCompanyConnectionString, 
                    string nonProviderCompanyConnectionString, 
                    string dbUser, 
                    string activationDB)
        {
            this.Login2Result = Login2Result;
            this.userName = userName;
            this.companyName = companyName;
            this.admin = admin;
            this.authenticationToken = authenticationToken;
            this.companyId = companyId;
            this.dbName = dbName;
            this.dbServer = dbServer;
            this.providerId = providerId;
            this.security = security;
            this.auditing = auditing;
            this.useKeyedUpdate = useKeyedUpdate;
            this.transactionUse = transactionUse;
            this.preferredLanguage = preferredLanguage;
            this.applicationLanguage = applicationLanguage;
            this.providerName = providerName;
            this.providerDescription = providerDescription;
            this.useConstParameter = useConstParameter;
            this.stripTrailingSpaces = stripTrailingSpaces;
            this.providerCompanyConnectionString = providerCompanyConnectionString;
            this.nonProviderCompanyConnectionString = nonProviderCompanyConnectionString;
            this.dbUser = dbUser;
            this.activationDB = activationDB;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLoginInformation", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetLoginInformationRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string authenticationToken;
        
        public GetLoginInformationRequest()
        {
        }
        
        public GetLoginInformationRequest(string authenticationToken)
        {
            this.authenticationToken = authenticationToken;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLoginInformationResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetLoginInformationResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool GetLoginInformationResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public int loginId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public string companyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public int companyId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=5)]
        public bool admin;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=6)]
        public string dbName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=7)]
        public string dbServer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=8)]
        public int providerId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=9)]
        public bool security;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=10)]
        public bool auditing;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=11)]
        public bool useKeyedUpdate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=12)]
        public bool transactionUse;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=13)]
        public bool useUnicode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=14)]
        public string preferredLanguage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=15)]
        public string applicationLanguage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=16)]
        public string providerName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=17)]
        public string providerDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=18)]
        public bool useConstParameter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=19)]
        public bool stripTrailingSpaces;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=20)]
        public string providerCompanyConnectionString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=21)]
        public string nonProviderCompanyConnectionString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=22)]
        public string dbUser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=23)]
        public string processName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=24)]
        public string userDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=25)]
        public string email;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=26)]
        public bool easyBuilderDeveloper;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=27)]
        public bool rowSecurity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=28)]
        public bool dataSynchro;
        
        public GetLoginInformationResponse()
        {
        }
        
        public GetLoginInformationResponse(
                    bool GetLoginInformationResult, 
                    string userName, 
                    int loginId, 
                    string companyName, 
                    int companyId, 
                    bool admin, 
                    string dbName, 
                    string dbServer, 
                    int providerId, 
                    bool security, 
                    bool auditing, 
                    bool useKeyedUpdate, 
                    bool transactionUse, 
                    bool useUnicode, 
                    string preferredLanguage, 
                    string applicationLanguage, 
                    string providerName, 
                    string providerDescription, 
                    bool useConstParameter, 
                    bool stripTrailingSpaces, 
                    string providerCompanyConnectionString, 
                    string nonProviderCompanyConnectionString, 
                    string dbUser, 
                    string processName, 
                    string userDescription, 
                    string email, 
                    bool easyBuilderDeveloper, 
                    bool rowSecurity, 
                    bool dataSynchro)
        {
            this.GetLoginInformationResult = GetLoginInformationResult;
            this.userName = userName;
            this.loginId = loginId;
            this.companyName = companyName;
            this.companyId = companyId;
            this.admin = admin;
            this.dbName = dbName;
            this.dbServer = dbServer;
            this.providerId = providerId;
            this.security = security;
            this.auditing = auditing;
            this.useKeyedUpdate = useKeyedUpdate;
            this.transactionUse = transactionUse;
            this.useUnicode = useUnicode;
            this.preferredLanguage = preferredLanguage;
            this.applicationLanguage = applicationLanguage;
            this.providerName = providerName;
            this.providerDescription = providerDescription;
            this.useConstParameter = useConstParameter;
            this.stripTrailingSpaces = stripTrailingSpaces;
            this.providerCompanyConnectionString = providerCompanyConnectionString;
            this.nonProviderCompanyConnectionString = nonProviderCompanyConnectionString;
            this.dbUser = dbUser;
            this.processName = processName;
            this.userDescription = userDescription;
            this.email = email;
            this.easyBuilderDeveloper = easyBuilderDeveloper;
            this.rowSecurity = rowSecurity;
            this.dataSynchro = dataSynchro;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsFloatingUser", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class IsFloatingUserRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string loginName;
        
        public IsFloatingUserRequest()
        {
        }
        
        public IsFloatingUserRequest(string loginName)
        {
            this.loginName = loginName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsFloatingUserResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class IsFloatingUserResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool IsFloatingUserResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public bool floating;
        
        public IsFloatingUserResponse()
        {
        }
        
        public IsFloatingUserResponse(bool IsFloatingUserResult, bool floating)
        {
            this.IsFloatingUserResult = IsFloatingUserResult;
            this.floating = floating;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsWebUser", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class IsWebUserRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string loginName;
        
        public IsWebUserRequest()
        {
        }
        
        public IsWebUserRequest(string loginName)
        {
            this.loginName = loginName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsWebUserResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class IsWebUserResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool IsWebUserResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public bool web;
        
        public IsWebUserResponse()
        {
        }
        
        public IsWebUserResponse(bool IsWebUserResult, bool web)
        {
            this.IsWebUserResult = IsWebUserResult;
            this.web = web;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAuthenticationInformations", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetAuthenticationInformationsRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string authenticationToken;
        
        public GetAuthenticationInformationsRequest()
        {
        }
        
        public GetAuthenticationInformationsRequest(string authenticationToken)
        {
            this.authenticationToken = authenticationToken;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAuthenticationInformationsResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetAuthenticationInformationsResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool GetAuthenticationInformationsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public int loginId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public int companyId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public bool webLogin;
        
        public GetAuthenticationInformationsResponse()
        {
        }
        
        public GetAuthenticationInformationsResponse(bool GetAuthenticationInformationsResult, int loginId, int companyId, bool webLogin)
        {
            this.GetAuthenticationInformationsResult = GetAuthenticationInformationsResult;
            this.loginId = loginId;
            this.companyId = companyId;
            this.webLogin = webLogin;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAuthenticationNames", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetAuthenticationNamesRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string authenticationToken;
        
        public GetAuthenticationNamesRequest()
        {
        }
        
        public GetAuthenticationNamesRequest(string authenticationToken)
        {
            this.authenticationToken = authenticationToken;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAuthenticationNamesResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetAuthenticationNamesResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool GetAuthenticationNamesResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string companyName;
        
        public GetAuthenticationNamesResponse()
        {
        }
        
        public GetAuthenticationNamesResponse(bool GetAuthenticationNamesResult, string userName, string companyName)
        {
            this.GetAuthenticationNamesResult = GetAuthenticationNamesResult;
            this.userName = userName;
            this.companyName = companyName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetConfigurationStream", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetConfigurationStreamRequest
    {
        
        public GetConfigurationStreamRequest()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetConfigurationStreamResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetConfigurationStreamResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetConfigurationStreamResult;
        
        public GetConfigurationStreamResponse()
        {
        }
        
        public GetConfigurationStreamResponse(byte[] GetConfigurationStreamResult)
        {
            this.GetConfigurationStreamResult = GetConfigurationStreamResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetInstallationVersion", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetInstallationVersionRequest
    {
        
        public GetInstallationVersionRequest()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetInstallationVersionResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetInstallationVersionResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string GetInstallationVersionResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string productName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public System.DateTime buildDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public System.DateTime instDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public int build;
        
        public GetInstallationVersionResponse()
        {
        }
        
        public GetInstallationVersionResponse(string GetInstallationVersionResult, string productName, System.DateTime buildDate, System.DateTime instDate, int build)
        {
            this.GetInstallationVersionResult = GetInstallationVersionResult;
            this.productName = productName;
            this.buildDate = buildDate;
            this.instDate = instDate;
            this.build = build;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum DBNetworkType
    {
        
        /// <remarks/>
        Undefined,
        
        /// <remarks/>
        Large,
        
        /// <remarks/>
        Small,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum GrantType
    {
        
        /// <remarks/>
        Execute,
        
        /// <remarks/>
        Edit,
        
        /// <remarks/>
        New,
        
        /// <remarks/>
        Delete,
        
        /// <remarks/>
        Browse,
        
        /// <remarks/>
        CustomizeForm,
        
        /// <remarks/>
        EditQuery,
        
        /// <remarks/>
        Import,
        
        /// <remarks/>
        Export,
        
        /// <remarks/>
        SilentMode,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum SerialNumberType
    {
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        Development,
        
        /// <remarks/>
        Reseller,
        
        /// <remarks/>
        Distributor,
        
        /// <remarks/>
        Demo,
        
        /// <remarks/>
        DevelopmentIU,
        
        /// <remarks/>
        Multi,
        
        /// <remarks/>
        StandAlone,
        
        /// <remarks/>
        Backup,
        
        /// <remarks/>
        Test,
        
        /// <remarks/>
        PersonalPlusK,
        
        /// <remarks/>
        DevelopmentPlusK,
        
        /// <remarks/>
        DevelopmentPlusUser,
        
        /// <remarks/>
        PersonalPlusUser,
        
        /// <remarks/>
        UNDEFINED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum ActivationState
    {
        
        /// <remarks/>
        Demo,
        
        /// <remarks/>
        DemoWarning,
        
        /// <remarks/>
        SilentWarning,
        
        /// <remarks/>
        Warning,
        
        /// <remarks/>
        Activated,
        
        /// <remarks/>
        NoActivated,
        
        /// <remarks/>
        Disabled,
        
        /// <remarks/>
        Undefined,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetCurrentComponents", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class SetCurrentComponentsRequest
    {
        
        public SetCurrentComponentsRequest()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetCurrentComponentsResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class SetCurrentComponentsResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public LoginManagerWcf.ActivationState SetCurrentComponentsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public int dte;
        
        public SetCurrentComponentsResponse()
        {
        }
        
        public SetCurrentComponentsResponse(LoginManagerWcf.ActivationState SetCurrentComponentsResult, int dte)
        {
            this.SetCurrentComponentsResult = SetCurrentComponentsResult;
            this.dte = dte;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCompanyLanguage", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetCompanyLanguageRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public int companyID;
        
        public GetCompanyLanguageRequest()
        {
        }
        
        public GetCompanyLanguageRequest(int companyID)
        {
            this.companyID = companyID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCompanyLanguageResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetCompanyLanguageResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool GetCompanyLanguageResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string cultureUI;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string culture;
        
        public GetCompanyLanguageResponse()
        {
        }
        
        public GetCompanyLanguageResponse(bool GetCompanyLanguageResult, string cultureUI, string culture)
        {
            this.GetCompanyLanguageResult = GetCompanyLanguageResult;
            this.cultureUI = cultureUI;
            this.culture = culture;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum LoginSlotType
    {
        
        /// <remarks/>
        Invalid,
        
        /// <remarks/>
        Gdi,
        
        /// <remarks/>
        MagicDocument,
        
        /// <remarks/>
        EasyLook,
        
        /// <remarks/>
        ThirdPart,
        
        /// <remarks/>
        Mobile,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public interface MicroareaLoginManagerSoapChannel : LoginManagerWcf.MicroareaLoginManagerSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public partial class MicroareaLoginManagerSoapClient : System.ServiceModel.ClientBase<LoginManagerWcf.MicroareaLoginManagerSoap>, LoginManagerWcf.MicroareaLoginManagerSoap
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MicroareaLoginManagerSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(MicroareaLoginManagerSoapClient.GetBindingForEndpoint(endpointConfiguration), MicroareaLoginManagerSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MicroareaLoginManagerSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MicroareaLoginManagerSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MicroareaLoginManagerSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MicroareaLoginManagerSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MicroareaLoginManagerSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> GetConfigurationHashAsync()
        {
            return base.Channel.GetConfigurationHashAsync();
        }
        
        public System.Threading.Tasks.Task<bool> UserCanAccessWebSitePrivateAreaAsync(int loginId)
        {
            return base.Channel.UserCanAccessWebSitePrivateAreaAsync(loginId);
        }
        
        public System.Threading.Tasks.Task<bool> IsEasyBuilderDeveloperAsync(string authenticationToken)
        {
            return base.Channel.IsEasyBuilderDeveloperAsync(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.SendErrorFileResponse> SendErrorFileAsync(LoginManagerWcf.SendErrorFileRequest request)
        {
            return base.Channel.SendErrorFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.DownloadPdbResponse> DownloadPdbAsync(LoginManagerWcf.DownloadPdbRequest request)
        {
            return base.Channel.DownloadPdbAsync(request);
        }
        
        public System.Threading.Tasks.Task<string> GetMainSerialNumberAsync()
        {
            return base.Channel.GetMainSerialNumberAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetMLUExpiryDateAsync()
        {
            return base.Channel.GetMLUExpiryDateAsync();
        }
        
        public System.Threading.Tasks.Task SendBalloonAsync(string authenticationToken, string bodyMessage, LoginManagerWcf.MessageType messageType, string[] recipients)
        {
            return base.Channel.SendBalloonAsync(authenticationToken, bodyMessage, messageType, recipients);
        }
        
        public System.Threading.Tasks.Task AdvancedSendBalloonAsync(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer)
        {
            return base.Channel.AdvancedSendBalloonAsync(authenticationToken, bodyMessage, expiryDate, messageType, recipients, sensation, historicize, immediate, timer);
        }
        
        public System.Threading.Tasks.Task AdvancedSendTaggedBalloonAsync(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer, string tag)
        {
            return base.Channel.AdvancedSendTaggedBalloonAsync(authenticationToken, bodyMessage, expiryDate, messageType, recipients, sensation, historicize, immediate, timer, tag);
        }
        
        public System.Threading.Tasks.Task<bool> SetChannelFreeAsync(string authenticationToken, string[] channelCode)
        {
            return base.Channel.SetChannelFreeAsync(authenticationToken, channelCode);
        }
        
        public System.Threading.Tasks.Task<bool> GetChannelFreeAsync()
        {
            return base.Channel.GetChannelFreeAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetEditionTypeAsync()
        {
            return base.Channel.GetEditionTypeAsync();
        }
        
        public System.Threading.Tasks.Task<int> InitAsync(bool reboot, string authenticationToken)
        {
            return base.Channel.InitAsync(reboot, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<bool> IsAliveAsync()
        {
            return base.Channel.IsAliveAsync();
        }
        
        public System.Threading.Tasks.Task<bool> VerifyDBSizeAsync()
        {
            return base.Channel.VerifyDBSizeAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetMobileTokenAsync(string token, int loginType)
        {
            return base.Channel.GetMobileTokenAsync(token, loginType);
        }
        
        public System.Threading.Tasks.Task<bool> RefreshWMSSlotAsync(string authenticationToken)
        {
            return base.Channel.RefreshWMSSlotAsync(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<bool> IsCalAvailableAsync(string authenticationToken, string application, string functionality)
        {
            return base.Channel.IsCalAvailableAsync(authenticationToken, application, functionality);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.IsValidDateResponse> IsValidDateAsync(LoginManagerWcf.IsValidDateRequest request)
        {
            return base.Channel.IsValidDateAsync(request);
        }
        
        public System.Threading.Tasks.Task<bool> PingNeededAsync(bool force)
        {
            return base.Channel.PingNeededAsync(force);
        }
        
        public System.Threading.Tasks.Task SetClientDataAsync(LoginManagerWcf.ClientData cd)
        {
            return base.Channel.SetClientDataAsync(cd);
        }
        
        public System.Threading.Tasks.Task<bool> SetCompanyInfoAsync(string authToken, string aName, string aValue)
        {
            return base.Channel.SetCompanyInfoAsync(authToken, aName, aValue);
        }
        
        public System.Threading.Tasks.Task<bool> IsActivatedAsync(string application, string functionality)
        {
            return base.Channel.IsActivatedAsync(application, functionality);
        }
        
        public System.Threading.Tasks.Task<bool> IsSynchActivationAsync()
        {
            return base.Channel.IsSynchActivationAsync();
        }
        
        public System.Threading.Tasks.Task<string[]> GetModulesAsync()
        {
            return base.Channel.GetModulesAsync();
        }
        
        public System.Threading.Tasks.Task<string[]> GetCompanyUsersAsync(string companyName)
        {
            return base.Channel.GetCompanyUsersAsync(companyName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetNonNTCompanyUsersAsync(string companyName)
        {
            return base.Channel.GetNonNTCompanyUsersAsync(companyName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetCompanyRolesAsync(string companyName)
        {
            return base.Channel.GetCompanyRolesAsync(companyName);
        }
        
        public System.Threading.Tasks.Task<bool> HasUserEBRolesAsync(int companyName, int userName)
        {
            return base.Channel.HasUserEBRolesAsync(companyName, userName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetUserRolesAsync(string companyName, string userName)
        {
            return base.Channel.GetUserRolesAsync(companyName, userName);
        }
        
        public System.Threading.Tasks.Task<string[]> EnumAllUsersAsync()
        {
            return base.Channel.EnumAllUsersAsync();
        }
        
        public System.Threading.Tasks.Task<string[]> EnumAllCompanyUsersAsync(int companyId, bool onlyNonNTUsers)
        {
            return base.Channel.EnumAllCompanyUsersAsync(companyId, onlyNonNTUsers);
        }
        
        public System.Threading.Tasks.Task<string[]> GetRoleUsersAsync(string companyName, string roleName)
        {
            return base.Channel.GetRoleUsersAsync(companyName, roleName);
        }
        
        public System.Threading.Tasks.Task<string[]> EnumCompaniesAsync(string userName)
        {
            return base.Channel.EnumCompaniesAsync(userName);
        }
        
        public System.Threading.Tasks.Task<bool> IsIntegratedSecurityUserAsync(string userName)
        {
            return base.Channel.IsIntegratedSecurityUserAsync(userName);
        }
        
        public System.Threading.Tasks.Task<int> GetLoggedUsersNumberAsync()
        {
            return base.Channel.GetLoggedUsersNumberAsync();
        }
        
        public System.Threading.Tasks.Task<int> GetCompanyLoggedUsersNumberAsync(int companyId)
        {
            return base.Channel.GetCompanyLoggedUsersNumberAsync(companyId);
        }
        
        public System.Threading.Tasks.Task<string> GetLoggedUsersAsync()
        {
            return base.Channel.GetLoggedUsersAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetLoggedUsersAdvancedAsync(string token)
        {
            return base.Channel.GetLoggedUsersAdvancedAsync(token);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.GetCalNumberResponse> GetCalNumberAsync(LoginManagerWcf.GetCalNumberRequest request)
        {
            return base.Channel.GetCalNumberAsync(request);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.GetCalNumber2Response> GetCalNumber2Async(LoginManagerWcf.GetCalNumber2Request request)
        {
            return base.Channel.GetCalNumber2Async(request);
        }
        
        public System.Threading.Tasks.Task<int> GetTokenProcessTypeAsync(string token)
        {
            return base.Channel.GetTokenProcessTypeAsync(token);
        }
        
        public System.Threading.Tasks.Task ReloadConfigurationAsync()
        {
            return base.Channel.ReloadConfigurationAsync();
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.ValidateUserResponse> ValidateUserAsync(LoginManagerWcf.ValidateUserRequest request)
        {
            return base.Channel.ValidateUserAsync(request);
        }
        
        public System.Threading.Tasks.Task<int> ConsumeMobileCalAsync(string authenticationToken)
        {
            return base.Channel.ConsumeMobileCalAsync(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<int> ChangePasswordAsync(string userName, string oldPassword, string newPassword)
        {
            return base.Channel.ChangePasswordAsync(userName, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.LoginCompactResponse> LoginCompactAsync(LoginManagerWcf.LoginCompactRequest request)
        {
            return base.Channel.LoginCompactAsync(request);
        }
        
        public System.Threading.Tasks.Task SSOLogOffAsync(string cryptedToken)
        {
            return base.Channel.SSOLogOffAsync(cryptedToken);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.LoginViaInfinityToken2Response> LoginViaInfinityToken2Async(LoginManagerWcf.LoginViaInfinityToken2Request request)
        {
            return base.Channel.LoginViaInfinityToken2Async(request);
        }
        
        public System.Threading.Tasks.Task<string> GetITokenAsync(string authenticationToken)
        {
            return base.Channel.GetITokenAsync(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<bool> ExistsSSOIDUserAsync(string cryptedToken)
        {
            return base.Channel.ExistsSSOIDUserAsync(cryptedToken);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.LoginResponse> LoginAsync(LoginManagerWcf.LoginRequest request)
        {
            return base.Channel.LoginAsync(request);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.Login2Response> Login2Async(LoginManagerWcf.Login2Request request)
        {
            return base.Channel.Login2Async(request);
        }
        
        public System.Threading.Tasks.Task<int> GetUsagePercentageOnDBSizeAsync()
        {
            return base.Channel.GetUsagePercentageOnDBSizeAsync();
        }
        
        public System.Threading.Tasks.Task<bool> ConfirmTokenAsync(string authenticationToken, string procType)
        {
            return base.Channel.ConfirmTokenAsync(authenticationToken, procType);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.GetLoginInformationResponse> GetLoginInformationAsync(LoginManagerWcf.GetLoginInformationRequest request)
        {
            return base.Channel.GetLoginInformationAsync(request);
        }
        
        public System.Threading.Tasks.Task LogOffAsync(string authenticationToken)
        {
            return base.Channel.LogOffAsync(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> GetUserNameAsync(int loginId)
        {
            return base.Channel.GetUserNameAsync(loginId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserDescriptionByIdAsync(int loginId)
        {
            return base.Channel.GetUserDescriptionByIdAsync(loginId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserDescriptionByNameAsync(string login)
        {
            return base.Channel.GetUserDescriptionByNameAsync(login);
        }
        
        public System.Threading.Tasks.Task<string> GetUserEMailByNameAsync(string login)
        {
            return base.Channel.GetUserEMailByNameAsync(login);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.IsFloatingUserResponse> IsFloatingUserAsync(LoginManagerWcf.IsFloatingUserRequest request)
        {
            return base.Channel.IsFloatingUserAsync(request);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.IsWebUserResponse> IsWebUserAsync(LoginManagerWcf.IsWebUserRequest request)
        {
            return base.Channel.IsWebUserAsync(request);
        }
        
        public System.Threading.Tasks.Task<bool> IsWinNTAsync(int loginId)
        {
            return base.Channel.IsWinNTAsync(loginId);
        }
        
        public System.Threading.Tasks.Task<string> GetDbOwnerAsync(int companyId)
        {
            return base.Channel.GetDbOwnerAsync(companyId);
        }
        
        public System.Threading.Tasks.Task<bool> IsCompanySecuredAsync(int companyId)
        {
            return base.Channel.IsCompanySecuredAsync(companyId);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.GetAuthenticationInformationsResponse> GetAuthenticationInformationsAsync(LoginManagerWcf.GetAuthenticationInformationsRequest request)
        {
            return base.Channel.GetAuthenticationInformationsAsync(request);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.GetAuthenticationNamesResponse> GetAuthenticationNamesAsync(LoginManagerWcf.GetAuthenticationNamesRequest request)
        {
            return base.Channel.GetAuthenticationNamesAsync(request);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAssociationAsync(int loginId, int companyId, string authenticationToken)
        {
            return base.Channel.DeleteAssociationAsync(loginId, companyId, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(int loginId, string authenticationToken)
        {
            return base.Channel.DeleteUserAsync(loginId, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCompanyAsync(int companyId, string authenticationToken)
        {
            return base.Channel.DeleteCompanyAsync(companyId, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> GetSystemDBConnectionStringAsync(string authenticationToken)
        {
            return base.Channel.GetSystemDBConnectionStringAsync(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> GetDMSConnectionStringAsync(string authenticationToken)
        {
            return base.Channel.GetDMSConnectionStringAsync(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<bool> Sql2012AllowedAsync(string authToken)
        {
            return base.Channel.Sql2012AllowedAsync(authToken);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.DmsDatabaseInfo[]> GetDMSDatabasesInfoAsync(string authenticationToken)
        {
            return base.Channel.GetDMSDatabasesInfoAsync(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.DataSynchroDatabaseInfo[]> GetDataSynchroDatabasesInfoAsync(string authenticationToken)
        {
            return base.Channel.GetDataSynchroDatabasesInfoAsync(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.TbSenderDatabaseInfo[]> GetCompanyDatabasesInfoAsync(string authenticationToken)
        {
            return base.Channel.GetCompanyDatabasesInfoAsync(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> GetEditionAsync()
        {
            return base.Channel.GetEditionAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<LoginManagerWcf.GetConfigurationStreamResponse> LoginManagerWcf.MicroareaLoginManagerSoap.GetConfigurationStreamAsync(LoginManagerWcf.GetConfigurationStreamRequest request)
        {
            return base.Channel.GetConfigurationStreamAsync(request);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.GetConfigurationStreamResponse> GetConfigurationStreamAsync()
        {
            LoginManagerWcf.GetConfigurationStreamRequest inValue = new LoginManagerWcf.GetConfigurationStreamRequest();
            return ((LoginManagerWcf.MicroareaLoginManagerSoap)(this)).GetConfigurationStreamAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> GetCountryAsync()
        {
            return base.Channel.GetCountryAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetProviderNameFromCompanyIdAsync(int companyId)
        {
            return base.Channel.GetProviderNameFromCompanyIdAsync(companyId);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.GetInstallationVersionResponse> GetInstallationVersionAsync(LoginManagerWcf.GetInstallationVersionRequest request)
        {
            return base.Channel.GetInstallationVersionAsync(request);
        }
        
        public System.Threading.Tasks.Task<string> GetUserInfoAsync()
        {
            return base.Channel.GetUserInfoAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetUserInfoIDAsync()
        {
            return base.Channel.GetUserInfoIDAsync();
        }
        
        public System.Threading.Tasks.Task TraceActionAsync(string company, string login, int type, string processName, string winUser, string location)
        {
            return base.Channel.TraceActionAsync(company, login, type, processName, winUser, location);
        }
        
        public System.Threading.Tasks.Task<bool> HasUserAlreadyChangedPasswordTodayAsync(string user)
        {
            return base.Channel.HasUserAlreadyChangedPasswordTodayAsync(user);
        }
        
        public System.Threading.Tasks.Task<string> GetBrandedApplicationTitleAsync(string application)
        {
            return base.Channel.GetBrandedApplicationTitleAsync(application);
        }
        
        public System.Threading.Tasks.Task<string> GetMasterProductBrandedNameAsync()
        {
            return base.Channel.GetMasterProductBrandedNameAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetMasterSolutionBrandedNameAsync()
        {
            return base.Channel.GetMasterSolutionBrandedNameAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetMasterSolutionAsync()
        {
            return base.Channel.GetMasterSolutionAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetBrandedProducerNameAsync()
        {
            return base.Channel.GetBrandedProducerNameAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetBrandedProductTitleAsync()
        {
            return base.Channel.GetBrandedProductTitleAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetBrandedKeyAsync(string source)
        {
            return base.Channel.GetBrandedKeyAsync(source);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.DBNetworkType> GetDBNetworkTypeAsync()
        {
            return base.Channel.GetDBNetworkTypeAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetDatabaseTypeAsync(string providerName)
        {
            return base.Channel.GetDatabaseTypeAsync(providerName);
        }
        
        public System.Threading.Tasks.Task<bool> CanUseNamespaceAsync(string nameSpace, string authenticationToken, LoginManagerWcf.GrantType grantType)
        {
            return base.Channel.CanUseNamespaceAsync(nameSpace, authenticationToken, grantType);
        }
        
        public System.Threading.Tasks.Task<bool> CacheCounterAsync()
        {
            return base.Channel.CacheCounterAsync();
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.SerialNumberType> CacheCounterGTGAsync()
        {
            return base.Channel.CacheCounterGTGAsync();
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.SetCurrentComponentsResponse> SetCurrentComponentsAsync(LoginManagerWcf.SetCurrentComponentsRequest request)
        {
            return base.Channel.SetCurrentComponentsAsync(request);
        }
        
        public System.Threading.Tasks.Task<bool> IsVirginActivationAsync()
        {
            return base.Channel.IsVirginActivationAsync();
        }
        
        public System.Threading.Tasks.Task<int> HDAsync()
        {
            return base.Channel.HDAsync();
        }
        
        public System.Threading.Tasks.Task StoreMLUChoiceAsync(bool userChoseMluInChargeToMicroarea)
        {
            return base.Channel.StoreMLUChoiceAsync(userChoseMluInChargeToMicroarea);
        }
        
        public System.Threading.Tasks.Task<bool> SaveLicensedAsync(string xml, string name)
        {
            return base.Channel.SaveLicensedAsync(xml, name);
        }
        
        public System.Threading.Tasks.Task<string> ValidateITokenAsync(string itoken, string authenticationToken)
        {
            return base.Channel.ValidateITokenAsync(itoken, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<bool> SaveUserInfoAsync(string xml)
        {
            return base.Channel.SaveUserInfoAsync(xml);
        }
        
        public System.Threading.Tasks.Task DeleteUserInfoAsync()
        {
            return base.Channel.DeleteUserInfoAsync();
        }
        
        public System.Threading.Tasks.Task DeleteLicensedAsync(string name)
        {
            return base.Channel.DeleteLicensedAsync(name);
        }
        
        public System.Threading.Tasks.Task<string> PrePingAsync()
        {
            return base.Channel.PrePingAsync();
        }
        
        public System.Threading.Tasks.Task<string> PingAsync()
        {
            return base.Channel.PingAsync();
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.ModuleNameInfo[]> GetArticlesWithNamedCalAsync()
        {
            return base.Channel.GetArticlesWithNamedCalAsync();
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.ModuleNameInfo[]> GetArticlesWithFloatingCalAsync()
        {
            return base.Channel.GetArticlesWithFloatingCalAsync();
        }
        
        public System.Threading.Tasks.Task RefreshFloatingMarkAsync()
        {
            return base.Channel.RefreshFloatingMarkAsync();
        }
        
        public System.Threading.Tasks.Task RefreshSecurityStatusAsync()
        {
            return base.Channel.RefreshSecurityStatusAsync();
        }
        
        public System.Threading.Tasks.Task<int> GetProxySupportVersionAsync()
        {
            return base.Channel.GetProxySupportVersionAsync();
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.ProxySettings> GetProxySettingsAsync()
        {
            return base.Channel.GetProxySettingsAsync();
        }
        
        public System.Threading.Tasks.Task SetProxySettingsAsync(LoginManagerWcf.ProxySettings proxySettings)
        {
            return base.Channel.SetProxySettingsAsync(proxySettings);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.GetCompanyLanguageResponse> GetCompanyLanguageAsync(LoginManagerWcf.GetCompanyLanguageRequest request)
        {
            return base.Channel.GetCompanyLanguageAsync(request);
        }
        
        public System.Threading.Tasks.Task<bool> IsValidUpToDateTokenAsync(string authenticationToken, string mluexpired)
        {
            return base.Channel.IsValidUpToDateTokenAsync(authenticationToken, mluexpired);
        }
        
        public System.Threading.Tasks.Task<bool> IsValidTokenAsync(string authenticationToken)
        {
            return base.Channel.IsValidTokenAsync(authenticationToken);
        }
        
        public System.Threading.Tasks.Task ReloadUserArticleBindingsAsync(string authenticationToken)
        {
            return base.Channel.ReloadUserArticleBindingsAsync(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<bool> FEUsedAsync(string authenticationToken)
        {
            return base.Channel.FEUsedAsync(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<bool> SbrillAsync(string token)
        {
            return base.Channel.SbrillAsync(token);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.LoginSlotType> GetCalTypeAsync(string token)
        {
            return base.Channel.GetCalTypeAsync(token);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserLoggedByNameAsync(string userName)
        {
            return base.Channel.IsUserLoggedByNameAsync(userName);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserLoggedAsync(int loginID)
        {
            return base.Channel.IsUserLoggedAsync(loginID);
        }
        
        public System.Threading.Tasks.Task<bool> IsSecurityLightEnabledAsync()
        {
            return base.Channel.IsSecurityLightEnabledAsync();
        }
        
        public System.Threading.Tasks.Task<bool> IsSecurityLightAccessAllowedAsync(string nameSpace, string authenticationToken, bool unattended)
        {
            return base.Channel.IsSecurityLightAccessAllowedAsync(nameSpace, authenticationToken, unattended);
        }
        
        public System.Threading.Tasks.Task<int> GetDBCultureLCIDAsync(int companyID)
        {
            return base.Channel.GetDBCultureLCIDAsync(companyID);
        }
        
        public System.Threading.Tasks.Task SetMessageReadAsync(string userName, string messageID)
        {
            return base.Channel.SetMessageReadAsync(userName, messageID);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.Advertisement[]> GetImmediateMessagesQueueAsync(string authenticationToken)
        {
            return base.Channel.GetImmediateMessagesQueueAsync(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.Advertisement[]> GetMessagesQueueAsync(string authenticationToken)
        {
            return base.Channel.GetMessagesQueueAsync(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<LoginManagerWcf.Advertisement[]> GetOldMessagesAsync(string authenticationToken)
        {
            return base.Channel.GetOldMessagesAsync(authenticationToken);
        }
        
        public System.Threading.Tasks.Task DeleteMessageFromQueueAsync(string messageID)
        {
            return base.Channel.DeleteMessageFromQueueAsync(messageID);
        }
        
        public System.Threading.Tasks.Task PurgeMessageByTagAsync(string tag, string user)
        {
            return base.Channel.PurgeMessageByTagAsync(tag, user);
        }
        
        public System.Threading.Tasks.Task<bool> SendAccessMailAsync()
        {
            return base.Channel.SendAccessMailAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetAspNetUserAsync()
        {
            return base.Channel.GetAspNetUserAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.MicroareaLoginManagerSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.MicroareaLoginManagerSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.MicroareaLoginManagerSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost/Development/LoginManager/LoginManager.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.MicroareaLoginManagerSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost/Development/LoginManager/LoginManager.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            MicroareaLoginManagerSoap,
            
            MicroareaLoginManagerSoap12,
        }
    }
}
