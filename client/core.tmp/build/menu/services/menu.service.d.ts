import { EventEmitter, ComponentFactoryResolver } from '@angular/core';
import { Router } from '@angular/router';
import { ComponentService } from '../../core/services/component.service';
import { HttpService } from '../../core/services/http.service';
import { UtilsService } from '../../core/services/utils.service';
import { Logger } from '../../core/services/logger.service';
import { HttpMenuService } from './http-menu.service';
import { ImageService } from './image.service';
import { SettingsService } from './settings.service';
export declare class MenuService {
    private httpService;
    private httpMenuService;
    private logger;
    private utilsService;
    private imageService;
    private settingsService;
    private router;
    private componentService;
    private resolver;
    private _selectedApplication;
    private _selectedGroup;
    private _selectedMenu;
    isMenuActivated: boolean;
    applicationMenu: any;
    environmentMenu: any;
    favoritesCount: number;
    mostUsedCount: number;
    private favorites;
    private mostUsed;
    searchSources: Array<any>;
    private ifMoreAppsExist;
    showDescription: boolean;
    selectedMenu: any;
    selectedGroup: any;
    selectedApplication: any;
    selectedMenuChanged: EventEmitter<any>;
    selectedApplicationChanged: EventEmitter<any>;
    selectedGroupChanged: EventEmitter<string>;
    menuActivated: EventEmitter<any>;
    constructor(httpService: HttpService, httpMenuService: HttpMenuService, logger: Logger, utilsService: UtilsService, imageService: ImageService, settingsService: SettingsService, router: Router, componentService: ComponentService, resolver: ComponentFactoryResolver);
    initApplicationAndGroup(applications: any): void;
    setSelectedApplication(application: any): void;
    setSelectedGroup(group: any): void;
    setSelectedMenu(menu: any): void;
    getApplicationIcon(application: any): string;
    runFunction: (object: any) => void;
    clearMostUsed(): void;
    loadSearchObjects(): void;
    getSearchObjects(): void;
    findSearchesInApplication(application: any): void;
    getSearchesObjectsFromMenu(menu: any, applicationTitle: any, groupTitle: any, menuTitle: any, tileTitle: any): void;
    getSearchItemTooltip: (object: any) => string;
    containsSameSearch(array: any, obj: any): boolean;
    toggleFavorites(object: any): void;
    addToFavoritesInternal(object: any): void;
    removeFromFavoritesInternal(object: any): void;
    setFavoritesIsOpened(): void;
    rearrangePositions(): void;
    compareFavorites(a: any, b: any): 1 | 0 | -1;
    compareMostUsed(a: any, b: any): 1 | 0 | -1;
    compareTitle(a: any, b: any): 1 | 0 | -1;
    onAfterGetMenuElements(root: any): void;
    loadFavoritesAndMostUsed(): void;
    findFavoritesAndMostUsedInApplication(application: any): void;
    getFavoritesAndMostUsedObjectsFromMenu(menu: any): void;
    getFavorites(): any[];
    addToMostUsed(object: any): void;
    removeFromMostUsed: (object: any) => void;
    addToMostUsedArray(object: any): void;
    removeFromMostUsedArray(object: any): void;
    getFilteredSearch(viewValue: any, Item: any, searchInReport: any, searchInDocument: any, searchInBatch: any, startsWith: any): boolean;
    stringStartsWith(string: any, prefix: any): boolean;
    toggleDecription(): void;
    activateMenu(): void;
}
