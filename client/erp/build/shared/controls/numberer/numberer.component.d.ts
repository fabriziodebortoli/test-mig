import { ChangeDetectorRef } from '@angular/core';
import { ContextMenuItem, ControlComponent, TbComponentService, LayoutService, EventDataService, Store, FormMode } from '@taskbuilder/core';
export declare type maskParts = {
    prefix: string;
    separator: string;
    body: string;
    suffix: string;
};
export declare class NumbererComponent extends ControlComponent {
    eventData: EventDataService;
    private store;
    readonly: boolean;
    hotLink: {
        namespace: string;
        name: string;
    };
    popUpMenu: boolean;
    maxLength: number;
    slice: any;
    selector: any;
    textbox: any;
    tbEditIcon: string;
    tbExecuteIcon: string;
    icon: string;
    private tbMask;
    private useFormatMask;
    private enableCtrlInEdit;
    private paddingEnabled;
    private subscribedToSelector;
    numbererContextMenu: ContextMenuItem[];
    menuItemDisablePadding: ContextMenuItem;
    menuItemEnablePadding: ContextMenuItem;
    menuItemDoPadding: ContextMenuItem;
    mask: string;
    valueWasPadded: boolean;
    ctrlEnabled: boolean;
    enableStateInEdit: boolean;
    private currentState;
    constructor(eventData: EventDataService, layoutService: LayoutService, tbComponentService: TbComponentService, changeDetectorRef: ChangeDetectorRef, store: Store);
    ngOnInit(): void;
    onTranslationsReady(): void;
    subscribeToSelector(): void;
    onFormModeChanged(formMode: FormMode): void;
    buildContextMenu(): void;
    togglePadding(): void;
    setComponentMask(): void;
    valueToMask(value: string, tbMask: string): string;
    splitMask(tbMask: string): maskParts;
    maskToValue(tbMaskParts: maskParts, value: string): string;
    repeatChar(char: string, times: number): string;
    onKeyPress($event: any): void;
    onKeyDown($event: any): void;
    transformTypedChar(charStr: any): any;
    onBlur($event: any): void;
    doPadding(): void;
    ngOnChanges(changes: any): void;
    changeModelValue(value: string): void;
}
