//=============================================================================
// module name  : @(DBTClassName).cpp
//=============================================================================
#include "stdafx.h"

// local declarations
#include  <@(ModuleName)\@(LibrarySourceFolder)\@(DBTClassName).h>  

@(_NOEMPTYLINES:IfIsDBTRecordToEnhance(@(DeleteDuplicatedLines(@(RepeatOnDocumentsUsingDBT{@(+)
#include <@(DocumentModuleName)\@(DocumentLibrarySourceFolder)\@(DocumentClassName).h>\n@(+)
@(RepeatOnApplicationHotLinkColumns{@(IfColumnShowsHotLinkDescription{#include <@(ColumnHotLinkModuleName)\@(ColumnHotLinkLibrarySourceFolder)\@(ColumnHotLinkParentFileName).h>}), "\r\n"})\n@(+)
@(RepeatOnReferencedHotLinkIncludeFiles{@(IfColumnShowsHotLinkDescription{#include "@(RelativeFileName)"}), "\r\n"})\n@(+)
, "\r\n"})))))
//TBWIZ-INJECT{@(DBTClassName)(IncludeFiles)
//TBWIZ-INJECT}

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

@(RepeatOnForeignKeySegments{static TCHAR szParam@(ColumnName)[] = _T("@(ColumnName)");, "\r\n"})

@(IfIsDBTRecordToEnhance(@(+)
//////////////////////////////////////////////////////////////////////////////\n@(+)
//             TEnhanced@(DBTClassName)@(TableClassName)\n@(+)
//////////////////////////////////////////////////////////////////////////////\n@(+)
IMPLEMENT_DYNCREATE(TEnhanced@(DBTClassName)@(TableClassName),@(TableClassName))\n@(+)
\n@(+)
//-----------------------------------------------------------------------------\n@(+)
TEnhanced@(DBTClassName)@(TableClassName)::TEnhanced@(DBTClassName)@(TableClassName)(BOOL bCallInit)\n@(+)
	\t:\n@(+)
	\t@(TableClassName)(FALSE)\n@(+)
{\n@(+)                                             				
	\tBindRecord();\n@(+)
	\tif (bCallInit)\n@(+)
		\t\tInit();\n@(+)
}\n@(+) 
\n@(+)
//-----------------------------------------------------------------------------\n@(+)
void TEnhanced@(DBTClassName)@(TableClassName)::BindRecord ()\n@(+)
{\n@(+)
	\tBEGIN_BIND_DATA();\n@(+)
		@(DeleteDuplicatedLines(@(+)
			@(_NOEMPTYLINES:RepeatOnApplicationHotLinkColumns{@(+)
				@(IfColumnShowsHotLinkDescription{\t\t@(+)
					@(IfColumnHotLinkDescriptionIsString(LOCAL_STR(_NS_LFLD("@(ColumnHKLDescriptionColumnName)"), l_@(ColumnHKLTableName)@(ColumnHKLDescriptionColumnName), @(ColumnHKLDescriptionColumnDataLength));\n))@(+)
					@(IfColumnHotLinkDescriptionIsNotString(LOCAL_DATA(_NS_LFLD("@(ColumnHKLDescriptionColumnName)"), l_@(ColumnHKLTableName)@(ColumnHKLDescriptionColumnName));\n))@(+)
				})@(+)
			, "\r\n"})@(+)
		))@(+)
	\tEND_BIND_DATA();\n@(+)
}\n@(+)
))

//////////////////////////////////////////////////////////////////////////////
//             class @(DBTClassName) implementation
//////////////////////////////////////////////////////////////////////////////
IMPLEMENT_DYNAMIC(@(DBTClassName), DBTSlaveBuffered)

//-----------------------------------------------------------------------------	
@(DBTClassName)::@(DBTClassName)
	(
		CRuntimeClass*		pClass, 
		CAbstractFormDoc*	pDocument
	)
	:
	DBTSlaveBuffered (pClass, pDocument, _NS_DBT("@(DBTName)"), ALLOW_EMPTY_BODY, CHECK_DUPLICATE_KEY)
{
}

//-----------------------------------------------------------------------------
void @(DBTClassName)::OnDefineQuery()
{ 
	@(TableClassName)* pRecord = Get@(TableClassName)();
	
	m_pTable->SelectAll();

@(RepeatOnForeignKeySegments{\tm_pTable->AddFilterColumn(@(IfIsNotTableReferenced(pRecord->f_@(ColumnName)))@(IfIsTableReferenced(*pRecord->GetDataObjFromColumnName(_T("@(ColumnName)")))));, "\r\n"})
	
@(RepeatOnForeignKeySegments{\tm_pTable->AddParam(szParam@(ColumnName), @(IfIsNotTableReferenced(pRecord->f_@(ColumnName)))@(IfIsTableReferenced(*pRecord->GetDataObjFromColumnName(_T("@(ColumnName)")))));, "\r\n"})

@(RepeatOnPrimaryKeySegments{\tm_pTable->AddSortColumn(@(IfIsNotTableReferenced(pRecord->f_@(ColumnName)))@(IfIsTableReferenced(*pRecord->GetDataObjFromColumnName(_T("@(ColumnName)")))));, "\r\n"})
}

//-----------------------------------------------------------------------------
void @(DBTClassName)::OnPrepareQuery()
{
	@(MasterTableClassName)* pMasterRecord = GetMasterRecord();

@(RepeatOnForeignKeySegments{\tm_pTable->SetParamValue(szParam@(ColumnName), *pMasterRecord->GetDataObjFromColumnName(_T("@(RelatedColumnName)")));, "\r\n"})
}

//-----------------------------------------------------------------------------
DataObj* @(DBTClassName)::OnCheckPrimaryKey(int /*nRow*/, SqlRecord* pRecord)
{   
	ASSERT (pRecord && pRecord->IsKindOf(RUNTIME_CLASS(@(TableClassName))));
	
@(RepeatOnForeignKeySegments{\tif (@(IfIsNotTableReferenced(((@(TableClassName)*)pRecord)->f_@(ColumnName).))@(IfIsTableReferenced(((@(TableClassName)*)pRecord)->GetDataObjFromColumnName(_T("@(ColumnName)"))->))IsEmpty())\n\t{\n\t\tSetError(_TB("Empty foreign key segment."));\n\t\treturn @(IfIsNotTableReferenced(&(((@(TableClassName)*) pRecord)->f_@(ColumnName))))@(IfIsTableReferenced(((@(TableClassName)*) pRecord)->GetDataObjFromColumnName(_T("@(ColumnName)"))));\n\t}, "\r\n"})

	//TBWIZ-INJECT{@(DBTClassName)(OnCheckPrimaryKey)
	//TBWIZ-INJECT}

	return NULL;
}

//-----------------------------------------------------------------------------
void @(DBTClassName)::OnPreparePrimaryKey(int nRow, SqlRecord* pRecord)
{
	ASSERT (pRecord && pRecord->IsKindOf(RUNTIME_CLASS(@(TableClassName))));

	@(MasterTableClassName)* pMasterRecord = GetMasterRecord();

@(RepeatOnForeignKeySegments{\t@(IfIsNotTableReferenced(((@(TableClassName)*)pRecord)->f_@(ColumnName)))@(IfIsTableReferenced(*(@(ColumnDataObjClassName)*)((@(TableClassName)*)pRecord)->GetDataObjFromColumnName(_T("@(ColumnName)")))) = *(@(ColumnDataObjClassName)*)pMasterRecord->GetDataObjFromColumnName(_T("@(RelatedColumnName)"));, "\r\n"})

	//TBWIZ-INJECT{@(DBTClassName)(OnPreparePrimaryKey)
	//TBWIZ-INJECT}
}

//-----------------------------------------------------------------------------	
CString @(DBTClassName)::GetDuplicateKeyMsg(SqlRecord* pRecord)
{
	ASSERT (pRecord && pRecord->IsKindOf(RUNTIME_CLASS(@(TableClassName))));

	return cwsprintf(_TB("Duplicated Key in %s"), ((@(TableClassName)*)pRecord)->GetStaticName());
}

//-----------------------------------------------------------------------------	
DataObj* @(DBTClassName)::GetDuplicateKeyPos(SqlRecord* pRecord)
{   
	ASSERT (pRecord && pRecord->IsKindOf(RUNTIME_CLASS(@(TableClassName))));

	return 	&((@(TableClassName)*)pRecord)->f_@(FirstForeignKeySegmentName);
}

//-----------------------------------------------------------------------------
BOOL @(DBTClassName)::IsEmptyData()
{
	//TBWIZ-INJECT{@(DBTClassName)(IsEmptyData)
	//TBWIZ-INJECT}

	return FALSE;
}

//-----------------------------------------------------------------------------
void @(DBTClassName)::OnPrepareAuxColumns(SqlRecord* pRecord)
{   
@(_NOEMPTYLINES:IfIsDBTRecordToEnhance(@(RepeatOnDocumentsUsingDBT{@(+)
		\tif (pRecord && m_pDocument && m_pDocument->IsKindOf(RUNTIME_CLASS(@(DocumentClassName))))\n@(+)
		\t{\n@(+)
		@(DeleteDuplicatedLines(@(+)
			@(_NOEMPTYLINES:RepeatOnApplicationHotLinkColumns{@(+)
				@(IfColumnShowsHotLinkDescription{@(+)
					\t\t((@(DocumentClassName)*)m_pDocument)->m_pHKL@(_RB(_)DBTName)@(ColumnName)->FindRecord(@(IfIsNotTableReferenced(&((@(TableClassName)*)pRecord)->f_@(ColumnName)))@(IfIsTableReferenced(((@(TableClassName)*)pRecord)->GetDataObjFromColumnName(_T("@(ColumnName)")))));\n@(+)
					\t\t@(ColumnHKLTableClassName)* p@(ColumnHKLTableClassName)Record = ((@(DocumentClassName)*)m_pDocument)->m_pHKL@(_RB(_)DBTName)@(ColumnName)->GetRecord();\n@(+)
					\t\tif (p@(ColumnHKLTableClassName)Record)\n@(+)
					\t\t\t((TEnhanced@(DBTClassName)@(TableClassName)*)pRecord)->l_@(ColumnHKLTableName)@(ColumnHKLDescriptionColumnName) = p@(ColumnHKLTableClassName)Record->f_@(ColumnHKLDescriptionColumnName);\n@(+)
				})@(+)
			, "\r\n"})@(+)
		))@(+)
		\t}\n@(+)
, "\r\n"})))
	//TBWIZ-INJECT{@(DBTClassName)(OnPrepareAuxColumns)
	//TBWIZ-INJECT}
}

//TBWIZ-INJECT{@(DBTClassName)(AdditionalCode)
//TBWIZ-INJECT}
