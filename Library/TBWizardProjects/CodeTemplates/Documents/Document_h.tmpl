//=============================================================================
// module name  : @(DocumentClassName).h
//=============================================================================
#pragma once

@(DeleteDuplicatedLines(@(+)
@(RepeatOnDBTs{@(+)
#include <@(TableModuleName)\@(TableLibrarySourceFolder)\@(TableClassName).h>\n@(+)
#include <@(DBTModuleName)\@(DBTLibrarySourceFolder)\@(DBTClassName).h>\n@(+)
, "\r\n"})))

//TBWIZ-INJECT{@(DocumentClassName)(IncludeFiles)
//TBWIZ-INJECT}

#include "beginh.dex"

@(DeleteDuplicatedLines(@(+)
@(_NOEMPTYLINES:ActOnMaster{@(RepeatOnHotLinkColumns{class @(ColumnHKLClassName);, "\r\n"})})@(+)
@(_NOEMPTYLINES:RepeatOnTabbedPanes{@(RepeatOnHotLinkColumns{class @(ColumnHKLClassName);, "\r\n"})\n, "\r\n"})@(+)
))
///////////////////////////////////////////////////////////////////////////////
//							@(DocumentClassName)
///////////////////////////////////////////////////////////////////////////////
class TB_EXPORT @(DocumentClassName) : public CAbstractFormDoc
{ 
	DECLARE_DYNCREATE(@(DocumentClassName))

public:
	@(MasterDBTClassName)* m_p@(MasterDBTClassName);
@(RepeatOnDBTSlaves{@(+)
\t@(DBTClassName)* m_p@(DBTClassName);@(+)
, "\r\n"})
@(_NOEMPTYLINES:ActOnMaster(@(+)
	@(RepeatOnHotLinkColumns{@(+)
		\t@(ColumnHKLClassName)* m_pHKL@(ColumnName);@(+)
		@(IfColumnShowsHotLinkDescription{@(+)
			\n\t@(ColumnHKLDescriptionColumnDataObjClassName) m_@(_RB(_)DBTName)@(ColumnName)HotLinkDescription;@(+)
		})@(+)
	,"\r\n"})@(+)
))
@(_NOEMPTYLINES:RepeatOnTabbedPanes{@(+)
	@(RepeatOnHotLinkColumns{@(+)
		\t@(ColumnHKLClassName)* m_pHKL@(_RB(_)TabbedPaneName)@(ColumnName);@(+)
	,"\r\n"})@(+)
,"\r\n"})
@(_NOEMPTYLINES:RepeatOnTabbedPanes{@(IfNotDBTSlaveBuffered(@(+)
	@(RepeatOnHotLinkColumns{@(+)
		@(IfColumnShowsHotLinkDescription{@(+)
			\t@(ColumnHKLDescriptionColumnDataObjClassName) m_@(_RB(_)TabbedPaneName)@(ColumnName)HotLinkDescription;@(+)
		})@(+)
	,"\r\n"})@(+)
)),"\r\n"})

public: 
	@(DocumentClassName)(); 
	~@(DocumentClassName)();

public:
    virtual @(MasterDBTClassName)* Get@(MasterDBTClassName)() const { return m_p@(MasterDBTClassName); }
    virtual @(MasterTableClassName)* GetMasterRecord() const { return m_p@(MasterDBTClassName)->Get@(MasterTableClassName)(); }
@(RepeatOnDBTSlaves{@(+)
    \tvirtual @(TableClassName)* Get@(DBTClassName)Record() const { return m_p@(DBTClassName)->Get@(TableClassName)(); }@(+)
, "\r\n"})

public:	
	virtual BOOL OnAttachData ();
	virtual BOOL OnInitAuxData ();
	virtual BOOL OnPrepareAuxData ();

protected:	
	//{{AFX_MSG(@(DocumentClassName))
@(_NOEMPTYLINES:ActOnMaster(@(_NOEMPTYLINES:RepeatOnHotLinkColumns{@(IfColumnShowsHotLinkDescription{\t\tafx_msg void On@(DBTName)@(ColumnName)Changed();}), "\r\n"})))
@(_NOEMPTYLINES:RepeatOnTabbedPanes(@(RepeatOnHotLinkColumns{@(IfColumnShowsHotLinkDescription{\t\tafx_msg void On@(TabbedPaneName)@(ColumnName)Changed();}), "\r\n"}), "\r\n"))
	//}}AFX_MSG

	DECLARE_MESSAGE_MAP()
	
	//TBWIZ-INJECT{@(DocumentClassName)(AdditionalMembers)
	//TBWIZ-INJECT}
};
@(IfHKLDefined())
@(IfHKLDefined(/////////////////////////////////////////////////////////////////////////////))
@(IfHKLDefined(//					@(DocumentHKLClassName) class declaration))
@(IfHKLDefined(/////////////////////////////////////////////////////////////////////////////))
@(IfHKLDefined(//))
@(IfHKLDefined(class TB_EXPORT @(DocumentHKLClassName) : public HotKeyLink))
@(IfHKLDefined({))
@(IfHKLDefined(	DECLARE_DYNCREATE (@(DocumentHKLClassName))))
@(IfHKLDefined())
@(IfHKLDefined(public:))
@(IfHKLDefined(	@(DocumentHKLClassName)();))
@(IfHKLDefined())
@(IfHKLDefined(protected:))
@(IfHKLDefined(	virtual void OnDefineQuery (SelectionType nQuerySelection = DIRECT_ACCESS);))
@(IfHKLDefined(	virtual void OnPrepareQuery (DataObj*, SelectionType nQuerySelection = DIRECT_ACCESS);))
@(IfHKLDefined(	virtual DataObj* GetDataObj () const { return &GetRecord()->f_@(HKLCodeColumnName); };))
@(IfHKLDefined())
@(IfHKLDefined(public:))
@(IfHKLDefined(	// local useful function))
@(IfHKLDefined(	@(MasterTableClassName)* GetRecord () const))
@(IfHKLDefined(		{))
@(IfHKLDefined(			ASSERT(m_pRecord->IsKindOf(RUNTIME_CLASS(@(MasterTableClassName))));))
@(IfHKLDefined(			return (@(MasterTableClassName)*) m_pRecord;))
@(IfHKLDefined(		}))
@(IfHKLDefined(};))

//TBWIZ-INJECT{@(DocumentClassName)(AdditionalDeclarations)
//TBWIZ-INJECT}

#include "endh.dex"
