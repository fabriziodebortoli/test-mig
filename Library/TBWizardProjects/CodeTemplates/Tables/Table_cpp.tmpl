//=============================================================================
// module name  : @(TableName).cpp
//=============================================================================
#include "stdafx.h"  

@(IfContainsDataEnums(@(RepeatOnUsedEnumsModules{#include <@(ModuleName)\@(ModuleName)Enums.h>, "\r\n"})\n))
// Database declarations
#include <@(ModuleName)\@(LibrarySourceFolder)\@(TableClassName).h> 

//TBWIZ-INJECT{@(TableClassName)(IncludeFiles)
//TBWIZ-INJECT}

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

@(IfTRDefined(//parametri per TableReader))
@(IfTRDefined(@(RepeatOnPrimaryKeySegments{static TCHAR szParam@(ColumnName)[] = _T("Param@(ColumnName)");, "\r\n"})))
@(IfHKLDefined(//parametri per HotLink))
@(IfHKLDefined(static TCHAR szParam[] = _T("Param");))

@(RepeatOnReferencedEnums{#define E_@@(_RB(_)_NOINVCHARS:EnumName)_DEFAULT (DWORD)MAKELONG(@(EnumDefaultItemValue), @(EnumValue)), "\r\n"})
/////////////////////////////////////////////////////////////////////////////
//			class  @(TableClassName) implementation
/////////////////////////////////////////////////////////////////////////////
IMPLEMENT_DYNCREATE(@(TableClassName), SqlRecord) 

//-----------------------------------------------------------------------------
@(TableClassName)::@(TableClassName)(BOOL bCallInit /* = TRUE */)
	:
	SqlRecord (GetStaticName())@(IfContainsDataEnums(,))
@(IfContainsDataEnums(@(RepeatOnDataEnumColumns{\tf_@(ColumnName) (E_@@(_RB(_)_NOINVCHARS:EnumName)_DEFAULT), ",\r\n"})))
{
@(IfContainsUpperCaseStringColumns(@(RepeatOnUpperCaseStringColumns{\tf_@(ColumnName).SetUpperCase();, "\r\n"})\n))	BindRecord();

	if (bCallInit) 
		Init();

	//TBWIZ-INJECT{@(TableClassName)(Constructor)
	//TBWIZ-INJECT}
}

//-----------------------------------------------------------------------------
void @(TableClassName)::BindRecord()
{
	BEGIN_BIND_DATA ();
@(RepeatOnDefinedColumns{\t\tBIND_DATA	(_NS_FLD("@(ColumnName)"), f_@(ColumnName));, "\r\n"})@(IfIsTBGuidColumnToAdd(\n\t\tBIND_TB_GUID()))
	//TBWIZ-INJECT{@(TableClassName)(BindRecord)
	//TBWIZ-INJECT}
	END_BIND_DATA();
}

//-----------------------------------------------------------------------------
LPCTSTR @(TableClassName)::GetStaticName() { return _NS_TBL("@(TableName)"); }
@(IfTRDefined( ))
@(IfTRDefined(/////////////////////////////////////////////////////////////////////////////))
@(IfTRDefined(//			class  @(TableTRClassName) implementation))
@(IfTRDefined(/////////////////////////////////////////////////////////////////////////////))
@(IfTRDefined(IMPLEMENT_DYNAMIC (@(TableTRClassName), TableReader)))
@(IfTRDefined())
@(IfTRDefined(//------------------------------------------------------------------------------))
@(IfTRDefined(@(TableTRClassName)::@(TableTRClassName) (CAbstractFormDoc* pDocument /* NULL */)))
@(IfTRDefined(	:))
@(IfTRDefined(	TableReader(RUNTIME_CLASS(@(TableClassName)), pDocument)))
@(IfTRDefined({))
@(IfTRDefined(}))
@(IfTRDefined())
@(IfTRDefined(//------------------------------------------------------------------------------))
@(IfTRDefined(void @(TableTRClassName)::OnDefineQuery ()))
@(IfTRDefined({))
@(IfTRDefined(	m_pTable->SelectAll ();))
@(IfTRDefined())
@(IfTRDefined(@(RepeatOnPrimaryKeySegments{\tm_pTable->AddFilterColumn(GetRecord()->f_@(ColumnName));\n\tm_pTable->AddParam\t\t (szParam@(ColumnName), GetRecord()->f_@(ColumnName));, "\r\n"})))
@(IfTRDefined(}))
@(IfTRDefined())
@(IfTRDefined(//------------------------------------------------------------------------------))
@(IfTRDefined(void @(TableTRClassName)::OnPrepareQuery ()))
@(IfTRDefined({))
@(IfTRDefined(@(RepeatOnPrimaryKeySegments{\tm_pTable->SetParamValue(szParam@(ColumnName),m_@(ColumnName));, "\r\n"})))
@(IfTRDefined(}))
@(IfTRDefined())
@(IfTRDefined(//------------------------------------------------------------------------------))
@(IfTRDefined(BOOL @(TableTRClassName)::IsEmptyQuery()))
@(IfTRDefined({))
@(IfTRDefined(\treturn\t@(RepeatOnPrimaryKeySegments{m_@(ColumnName).IsEmpty(), " &&\r\n\t\t\t"});))
@(IfTRDefined()
@(IfTRDefined(}))
@(IfTRDefined())
@(IfTRDefined(//------------------------------------------------------------------------------))
@(IfTRDefined(TableReader::FindResult @(TableTRClassName)::FindRecord(@(RepeatOnPrimaryKeySegments{const @(ColumnDataObjClassName)& a@(ColumnName), ", "}))))
@(IfTRDefined({))
@(IfTRDefined(@(RepeatOnPrimaryKeySegments{\tm_@(ColumnName) = a@(ColumnName);, "\r\n"})))
@(IfTRDefined())
@(IfTRDefined(\treturn TableReader::FindRecord();))
@(IfTRDefined(}))
@(IfHKLDefined( ))
@(IfHKLDefined(/////////////////////////////////////////////////////////////////////////////))
@(IfHKLDefined(//			class  @(TableHKLClassName) implementation))
@(IfHKLDefined(/////////////////////////////////////////////////////////////////////////////))
@(IfHKLDefined(IMPLEMENT_DYNCREATE (@(TableHKLClassName), HotKeyLink)))
@(IfHKLDefined( ))
@(IfHKLDefined(//------------------------------------------------------------------------------))
@(IfHKLDefined(@(TableHKLClassName)::@(TableHKLClassName)() ))
@(IfHKLDefined(	: ))
@(IfHKLDefined(	HotKeyLink(RUNTIME_CLASS(@(TableClassName)), _T(""))))
@(IfHKLDefined({))
@(IfHKLDefined(	EnableAddOnFly(FALSE);))
@(IfHKLDefined(	MustExistData(TRUE);))
@(IfHKLDefined(}))
@(IfHKLDefined( ))
@(IfHKLDefined(//------------------------------------------------------------------------------))
@(IfHKLDefined(@(TableHKLClassName)::~@(TableHKLClassName)()))
@(IfHKLDefined({))
@(IfHKLDefined(}))
@(IfHKLDefined( ))
@(IfHKLDefined(//------------------------------------------------------------------------------))
@(IfHKLDefined(void @(TableHKLClassName)::OnDefineQuery (SelectionType nQuerySelection)))
@(IfHKLDefined({))
@(IfHKLDefined(	m_pTable->SelectAll();))
@(IfHKLDefined(	))
@(IfHKLDefined(	switch (nQuerySelection)))
@(IfHKLDefined(	{))
@(IfHKLDefined(		case DIRECT_ACCESS:))
@(IfHKLDefined(@(IfHKLCodeIsNotTextual(		case COMBO_ACCESS:))))
@(IfHKLDefined(@(IfHKLCodeIsNotTextual(		case UPPER_BUTTON:))))
@(IfHKLDefined(			m_pTable->AddSortColumn(GetRecord()->f_@(HKLCodeColumnName));))
@(IfHKLDefined(			m_pTable->AddFilterColumn(GetRecord()->f_@(HKLCodeColumnName));))
@(IfHKLDefined(			m_pTable->AddParam(szParam, GetRecord()->f_@(HKLCodeColumnName));))
@(IfHKLDefined(			break;))
@(IfHKLDefined())
@(IfHKLDefined(@(IfHKLCodeIsTextual(		case COMBO_ACCESS:))))
@(IfHKLDefined(@(IfHKLCodeIsTextual(		case UPPER_BUTTON:))))
@(IfHKLDefined(@(IfHKLCodeIsTextual(			m_pTable->AddSortColumn(GetRecord()->f_@(HKLCodeColumnName));))))
@(IfHKLDefined(@(IfHKLCodeIsTextual(			m_pTable->AddFilterLike(GetRecord()->f_@(HKLCodeColumnName));))))
@(IfHKLDefined(@(IfHKLCodeIsTextual(			m_pTable->AddParam(szParam, GetRecord()->f_@(HKLCodeColumnName));))))
@(IfHKLDefined(@(IfHKLCodeIsTextual(			break;))))
@(IfHKLDefined(@(IfHKLCodeIsTextual())))
@(IfHKLDefined(		case LOWER_BUTTON:))
@(IfHKLDefined(			m_pTable->AddSortColumn(GetRecord()->f_@(HKLDescriptionColumnName));))
@(IfHKLDefined(			m_pTable->AddFilterLike(GetRecord()->f_@(HKLDescriptionColumnName));))
@(IfHKLDefined(			m_pTable->AddParam(szParam, GetRecord()->f_@(HKLDescriptionColumnName));))
@(IfHKLDefined(			break;))
@(IfHKLDefined(	}))
@(IfHKLDefined(}))
@(IfHKLDefined())
@(IfHKLDefined(//------------------------------------------------------------------------------))
@(IfHKLDefined(void @(TableHKLClassName)::OnPrepareQuery (DataObj* pDataObj, SelectionType nQuerySelection)))
@(IfHKLDefined({))
@(IfHKLDefined(	ASSERT(pDataObj && pDataObj->IsKindOf(RUNTIME_CLASS(@(HKLCodeColumnDataObjClassName))));))
@(IfHKLDefined(	switch (nQuerySelection)))
@(IfHKLDefined(	{))
@(IfHKLDefined(		case DIRECT_ACCESS:))
@(IfHKLDefined(@(IfHKLCodeIsNotTextual(		case COMBO_ACCESS:))))
@(IfHKLDefined(@(IfHKLCodeIsNotTextual(		case UPPER_BUTTON:))))
@(IfHKLDefined(			m_pTable->SetParamValue(szParam, *pDataObj);))
@(IfHKLDefined(			break;))
@(IfHKLDefined())
@(IfHKLDefined(@(IfHKLCodeIsTextual(		case COMBO_ACCESS:))))
@(IfHKLDefined(@(IfHKLCodeIsTextual(		case UPPER_BUTTON:))))
@(IfHKLDefined(		case LOWER_BUTTON:))
@(IfHKLDefined(@(IfHKLCodeIsTextual(			m_pTable->SetParamLike(szParam, *pDataObj);))))
@(IfHKLDefined(@(IfHKLCodeIsNotTextual(			{))))
@(IfHKLDefined(@(IfHKLCodeIsNotTextual(				DataStr tmpDataStr(pDataObj->Str());))))
@(IfHKLDefined(@(IfHKLCodeIsNotTextual(				m_pTable->SetParamLike(szParam, tmpDataStr);))))
@(IfHKLDefined(@(IfHKLCodeIsNotTextual(			}))))
@(IfHKLDefined(			break;))
@(IfHKLDefined(	}))
@(IfHKLDefined(}))

//TBWIZ-INJECT{@(TableClassName)(AdditionalCode)
//TBWIZ-INJECT}
