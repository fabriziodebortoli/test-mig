using System;
using System.IO;
using System.Security.Cryptography;

namespace Microarea.TaskBuilderNet.Licence.Activation.Components
{
	// ========================================================================
	public class GenericMicroareaComponents
	{
		private readonly byte[] byteGenericComponentsValue =
			new byte[]{23, 156, 26, 116, 57, 194, 185, 93, 156, 14, 71, 251, 61,
							65, 43, 48, 18, 196, 73, 128, 160, 178, 160, 176, 169, 39, 145, 211, 27, 148,
							189, 202, 235, 93, 55, 89, 66, 183, 96, 5, 56, 35, 10, 36, 175, 37, 207, 35,
							92, 32, 89, 230, 86, 195, 176, 197, 110, 152, 243, 42, 168, 111, 152, 213,
							87, 6, 43, 16, 195, 0, 125, 208, 33, 92, 208, 103, 169, 112, 229, 16, 244,
							254, 2, 46, 129, 109, 48, 89, 224, 104, 235, 209, 92, 149, 240, 127, 71,
							253, 239, 50, 118, 206, 107, 182, 198, 205, 186, 113, 249, 174, 235, 69,
							229, 231, 228, 28, 81, 113, 174, 109, 93, 106, 223, 200, 6, 110, 107, 163,
							223, 185, 217, 190, 137, 163, 45, 104, 112, 242, 214, 30, 21, 26, 72, 171,
							141, 251, 89, 235, 123, 102, 100, 91, 103, 185, 141, 83, 59, 13, 8, 196,
							133, 214, 130, 190, 197, 36, 199, 43, 11, 52, 174, 21, 223, 154, 182, 230,
							39, 90, 34, 209, 203, 62, 199, 34, 18, 160, 181, 161, 199, 60, 210, 10, 40,
							249, 219, 205, 42, 217, 104, 180, 26, 125, 36, 215, 236, 233, 74, 197, 162,
							175, 93, 218, 95, 125, 169, 254, 235, 209, 69, 106, 92, 157, 207, 107, 161,
							15, 184, 239, 15, 26, 233, 250, 15, 78, 220, 162, 155, 246, 194, 77, 61, 186,
							107, 167, 181, 18, 196, 56, 184, 5, 141, 125, 29, 245, 162, 36, 187, 154, 229,
							210, 87, 149, 138, 112, 57, 177, 93, 255, 112, 50, 107, 80, 40, 209, 210, 243,
							16, 155, 184, 170, 64, 119, 25, 140, 153, 143, 102, 175, 173, 50, 204, 195,
							22, 88, 117, 173, 101, 52, 250, 141, 123, 19, 67, 62, 18, 237, 224, 60, 69,
							24, 91, 35, 105, 97, 198, 75, 130, 219, 231, 44, 143, 234, 4, 132, 30, 143,
							125, 91, 97, 38, 66, 96, 28, 68, 160, 153, 105, 171, 109, 104, 236, 165, 210,
							121, 98, 20, 168, 121, 21, 43, 184, 85, 67, 196, 76, 12, 248, 201, 16, 68, 191,
							70, 88, 167, 184, 71, 13, 237, 225, 121, 233, 192, 230, 61, 56, 38, 110, 202,
							227, 64, 146, 232, 148, 20, 215, 204, 136, 99, 144, 82, 12, 20, 52, 229, 166,
							11, 122, 198, 45, 57, 247, 83, 224, 125, 58, 30, 82, 187, 193, 192, 135, 67,
							22, 216, 136, 204, 117, 126, 7, 141, 206, 156, 243, 2, 170, 73, 108, 133, 153,
							61, 3, 44, 23, 206, 36, 110, 173, 13, 103, 8, 29, 154, 12, 46, 55, 183, 148,
							182, 41, 84, 39, 190, 42, 62, 148, 171, 135, 248, 97, 38, 71, 219, 87, 89,
							199, 233, 151, 247, 136, 32, 29, 215, 255, 65, 48, 145, 108, 158, 181, 37,
							234, 221, 252, 63, 140, 144, 23, 18, 248, 244, 253, 221, 152, 223, 185, 167,
							156, 27, 79, 0, 101, 130, 79, 200, 77, 46, 185, 121, 245, 204, 226, 47, 1,
							220, 16, 236, 224, 41, 128, 27, 105, 30, 206, 252, 34, 170, 92, 40, 30, 221,
							40, 58, 98, 187, 89, 74, 161, 53, 167, 169, 99, 166, 83, 0, 24, 181, 182, 237,
							156, 181, 148, 165, 52, 133, 188, 101, 42, 180, 71, 112, 66, 124, 81, 62, 186,
							243, 110, 196, 198, 172, 151, 236, 27, 109, 55, 48, 12, 29, 107, 178, 187, 91,
							233, 187, 61, 210, 155, 201, 184, 166, 85, 228, 215, 179, 152, 120, 10, 219, 48,
							126, 157, 98, 193, 224, 249, 237, 144, 128, 24, 20, 174, 13, 238, 213, 161, 201,
							199, 27, 92, 111, 190, 203, 131, 95, 30, 80, 78, 11, 165, 95, 127, 247, 78, 52,
							82, 128, 54, 98, 77, 36, 221, 156, 43, 152, 187, 142, 225, 189, 57, 120, 151,
							137, 149, 153, 26, 150, 68, 47, 143, 10, 77, 254, 141, 162, 21, 167, 248, 147,
							93, 228, 200, 139, 153, 1, 133, 134, 227, 30, 216, 88, 164, 195, 183, 115, 94,
							70, 241, 99, 236, 243, 167, 127, 109, 121, 204, 119, 139, 118, 227, 22, 88, 1,
							7, 241, 190, 195, 183, 149, 78, 197, 251, 188, 216, 18, 54, 97, 133, 180, 151,
							201, 30, 127, 132, 212, 122, 60, 95, 110, 193, 39, 60, 216, 60, 191, 180, 73,
							140, 188, 187, 120, 82, 182, 189, 203, 47, 76, 3, 5, 203, 35, 155, 210, 44,
							185, 84, 94, 66, 12, 30, 101, 217, 195, 169, 135, 164, 226, 118, 19, 147, 201,
							27, 181, 67, 119, 222, 234, 103, 154, 251, 199, 144, 93, 64, 80, 205, 146, 132,
							67, 91, 133, 161, 62, 227, 250, 10, 51, 113, 34, 52, 54, 40, 23, 84, 20, 163,
							107, 219, 239, 141, 74, 28, 130, 174, 198, 176, 249, 157, 110, 30, 118, 222,
							49, 182, 8, 40, 75, 176, 97, 73, 110, 34, 106, 88, 142, 103, 51, 247, 148, 158,
							90, 62, 113, 19, 12, 179, 69, 204, 9, 246, 202, 58, 245, 135, 175, 75, 84, 21,
							122, 116, 220, 21, 92, 158, 167, 106, 231, 26, 98, 14, 123, 149, 52, 141, 164,
							226, 20, 194, 119, 52, 222, 228, 84, 74, 164, 55, 154, 25, 174, 39, 117, 169,
							240, 215, 99, 219, 14, 112, 18, 191, 117, 153, 95, 144, 238, 166, 199, 183,
							251, 100, 53, 32, 218, 2, 182, 204, 26, 186, 198, 217, 7
					  };

		// --------------------------------------------------------------------
		public string GetValue
		{
			get
			{
				System.Text.ASCIIEncoding byteConverter =
					new System.Text.ASCIIEncoding();
				TripleDESCryptoServiceProvider tdes =
					new TripleDESCryptoServiceProvider();
				byte[] gen1 = new byte[]{	129, 22, 5, 195, 139, 136, 100, 255, 205, 76,
											61, 88, 101, 59, 95, 73, 109, 199, 16, 87,
											23, 77, 6, 203};
				byte[] gen2 =  new byte[]{	121, 44, 193, 234, 89, 169, 79, 130	};

				MemoryStream outputFrontEndStream = new MemoryStream();
				
				CryptoStream stream =
					new CryptoStream
					(outputFrontEndStream,
					tdes.CreateDecryptor(gen1, gen2),
					CryptoStreamMode.Write);

				stream.Write(byteGenericComponentsValue,
					0,
					byteGenericComponentsValue.Length);
				stream.Close();

				return byteConverter.GetString(outputFrontEndStream.ToArray());
			}
		}
	}
}
