using System;
using System.IO;
using System.Security.Cryptography;

namespace Microarea.TaskBuilderNet.Licence.Activation.Components
{
	// ========================================================================
	public class GenericMicroareaComponents
	{
		private readonly byte[] byteGenericComponentsValue =
			new byte[]{176, 13, 68, 113, 23, 140, 185, 231, 112, 246, 125, 213,
						186, 17, 144, 253, 127, 80, 255, 84, 221, 192, 123, 206,
						11, 193, 139, 181, 94, 89, 189, 90, 66, 192, 158, 157,
						225, 34, 7, 179, 207, 12, 160, 120, 170, 46, 177, 223,
						231, 183, 251, 10, 175, 45, 243, 201, 172, 143, 89, 74,
						137, 83, 135, 60, 218, 26, 192, 68, 153, 156, 34, 200,
						105, 26, 34, 101, 90, 98, 85, 88, 81, 20, 78, 98, 13,
						232, 187, 95, 254, 192, 54, 186, 67, 91, 89, 144, 158,
						151, 107, 242, 240, 160, 248, 250, 2, 151, 162, 79, 46,
						144, 173, 232, 236, 27, 233, 40, 11, 161, 154, 151, 250,
						93, 15, 190, 5, 46, 25, 214, 66, 192, 118, 69, 28, 8, 26,
						89, 255, 130, 30, 97, 105, 157, 252, 149, 194, 177, 93,
						60, 164, 63, 83, 178, 180, 218, 125, 157, 151, 3, 216,
						247, 25, 68, 190, 157, 159, 99, 219, 67, 237, 171, 125,
						15, 205, 151, 76, 131, 35, 120, 189, 247, 103, 7, 194,
						168, 229, 193, 180, 25, 111, 191, 152, 85, 151, 249, 223,
						143, 171, 243, 136, 114, 251, 35, 128, 139, 148, 190, 115,
						81, 24, 218, 115, 53, 113, 34, 229, 102, 175, 143, 165, 28,
						166, 210, 33, 19, 102, 46, 137, 152, 27, 226, 35, 106, 146,
						138, 59, 210, 37, 111, 165, 128, 92, 61, 90, 160, 158, 186,
						134, 22, 146, 52, 131, 192, 33, 162, 222, 206, 138, 134,
						31, 234, 148, 132, 241, 42, 149, 158, 235, 172, 135, 188,
						4, 6, 154, 80, 194, 170, 206, 212, 158, 173, 100, 129, 214,
						54, 79, 149, 8, 1, 147, 12, 70, 173, 226, 43, 236, 74, 132,
						231, 143, 140, 190, 143, 21, 93, 180, 72, 76, 4, 3, 69, 180,
						255, 53, 180, 180, 174, 194, 121, 183, 128, 116, 187, 48,
						242, 93, 70, 214, 50, 40, 107, 50, 210, 225, 50, 169, 156,
						250, 109, 199, 147, 104, 182, 49, 91, 226, 196, 143, 93, 51,
						12, 20, 141, 75, 49, 113, 17, 179, 139, 187, 113, 82, 67, 122,
						121, 110, 61, 118, 63, 113, 212, 28, 230, 184, 201, 125, 31, 5,
						158, 48, 85, 67, 185, 46, 26, 208, 87, 248, 168, 133, 52, 226,
						232, 107, 5, 89, 235, 43, 38, 20, 35, 149, 17, 83, 210, 59, 242,
						221, 232, 115, 149, 243, 154, 90, 66, 198, 38, 68, 72, 25, 70, 52,
						101, 142, 214, 92, 59, 16, 120, 168, 243, 131, 202, 176, 9, 182,
						171, 85, 3, 186, 77, 153, 142, 151, 165, 48, 191, 114, 251, 145,
						21, 70, 131, 63, 70, 32, 80, 9, 159, 210, 140, 63, 36, 237, 206,
						237, 164, 234, 133, 252, 151, 172, 52, 122, 32, 94, 32, 103, 236,
						40, 229, 230, 198, 152, 20, 198, 114, 61, 115, 118, 14, 119,
						176, 213, 242, 132, 66, 223, 33, 8, 184, 158, 47, 85, 243,
						63, 202, 187, 130, 190, 25, 110, 57, 163, 145, 36, 81, 56,
						190, 7, 178, 241, 155, 153, 46, 98, 223, 8, 60, 85, 126, 85,
						109, 50, 7, 243, 59, 179, 189, 57, 181, 107, 159, 90, 166,
						119, 160, 85, 254, 171, 33, 75, 201, 140, 113, 43, 127, 77,
						55, 110, 123, 215, 123, 140, 120, 10, 181, 202, 84, 207, 138,
						184, 230, 224, 1, 128, 111, 168, 93, 180, 0, 80, 76, 39, 241,
						146, 122, 43, 215, 105, 109, 17, 39, 240, 170, 145, 41, 240,
						254, 226, 55, 2, 145, 145, 231, 45, 122, 136, 236, 133, 104,
						182, 95, 125, 214, 154, 130, 197, 0, 58, 56, 9, 232, 61, 207,
						13, 66, 111, 98, 64, 116, 159, 65, 199, 189, 238, 24, 30, 173,
						28, 110, 89, 33, 60, 17, 178, 180, 181, 241, 196, 85, 158, 33,
						155, 132, 210, 219, 166, 108, 2, 49, 255, 27, 135, 180, 131,
						181, 188, 185, 83, 134, 224, 186, 128, 156, 147, 219, 213, 237,
						132, 100, 19, 52, 232, 107, 64, 157, 78, 229, 230, 236, 58, 162,
						48, 136, 201, 191, 79, 30, 228, 240, 151, 184, 90, 206, 201, 255,
						204, 130, 150, 89, 15, 69, 25, 77, 38, 89, 81, 115, 234, 240, 17,
						43, 107, 242, 11, 233, 153, 120, 46, 48, 73, 0, 72, 38, 111, 13,
						199, 93, 58, 255, 15, 83, 204, 180, 22, 224, 94, 100, 84, 147,
						237, 49, 255, 44, 187, 252, 207, 223, 116, 19, 32, 24, 176, 50,
						169, 250, 176, 218, 197, 98, 229, 210, 154, 179, 100, 59, 175,
						72, 95, 191, 210, 125, 141, 222, 243, 118, 11, 134, 155, 9, 225,
						124, 134, 143, 110, 184, 156, 120, 131, 6, 30, 29, 81, 24, 122,
						82, 110, 92, 69, 236, 104, 213, 248, 74, 244, 10, 68, 248, 176,
						5, 79, 116, 29, 250, 104, 154, 150, 210, 91, 136, 247, 104, 32,
						52, 189, 35, 66, 111, 211, 17, 184, 141, 50, 255, 131, 122, 142,
						206, 162, 130, 10, 203, 248, 202, 178, 86, 204, 83, 205, 33, 253,
						79, 200, 5, 100, 152, 182, 184, 79, 242, 246, 65, 198, 43, 47,
						254, 127, 125, 193, 198, 155, 17, 41, 200, 125, 234, 110, 139,
						166, 142, 179, 121, 39, 237, 19, 38, 89, 100, 98, 240, 183, 203,
						199, 17, 49, 142, 67, 19, 161, 4, 230, 36, 180, 145, 141, 168,
						82, 221, 126, 244};

		// --------------------------------------------------------------------
		public string GetValue
		{
			get
			{
				System.Text.ASCIIEncoding byteConverter =
											new System.Text.ASCIIEncoding();
				TripleDESCryptoServiceProvider tdes =
											new TripleDESCryptoServiceProvider();
				byte[] gen1 = new byte[]{	12, 25, 255, 15, 69, 125, 33, 201,
											26, 95, 167, 215, 25, 105, 29, 165,
											38, 101, 200, 100, 1, 55, 155, 19};
				byte[] gen2 =  new byte[]{	132, 235, 255, 15, 69, 125, 33, 201	};

				MemoryStream outputFrontEndStream = new MemoryStream();
				
				CryptoStream stream =
					new CryptoStream
								(outputFrontEndStream,
								tdes.CreateDecryptor(gen1, gen2),
								CryptoStreamMode.Write);

				stream.Write(byteGenericComponentsValue,
							0,
							byteGenericComponentsValue.Length);
				stream.Close();

				return byteConverter.GetString(outputFrontEndStream.ToArray());
			}
		}
	}
}
