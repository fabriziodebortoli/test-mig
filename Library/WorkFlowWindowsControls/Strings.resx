<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DataGridUserNameColumnHeaderText" xml:space="preserve">
    <value>User</value>
  </data>
  <data name="DataGridToStateColumnHeaderText" xml:space="preserve">
    <value>With state</value>
  </data>
  <data name="ConnectionErrorMsgFmt" xml:space="preserve">
    <value>Error during database connection:
"{0}"</value>
  </data>
  <data name="ViewWorkFlowTemplateTitle" xml:space="preserve">
    <value>View or modify an existed workflow template </value>
  </data>
  <data name="DataGridActivityDescColumnHeaderText" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="ConfirmWorkFlowTemplateDeletionMsg" xml:space="preserve">
    <value>Are you sure to confirm the deletion of the workflow template '{0}'?</value>
  </data>
  <data name="DataGridStateDescColumnHeaderText" xml:space="preserve">
    <value>State Description</value>
  </data>
  <data name="ViewWorkFlowTemplateCaption" xml:space="preserve">
    <value>In this panel is possible to modify a workflow template created before, its activities and states.
Workflows will inherit from this template, have these activies and states.</value>
  </data>
  <data name="ConfirmWorkFlowActivityDeletionCaption" xml:space="preserve">
    <value>Deletion activity</value>
  </data>
  <data name="NewWorkFlowTemplateTitle" xml:space="preserve">
    <value>Configure a new workflow template</value>
  </data>
  <data name="NewWorkFlowTemplateCaption" xml:space="preserve">
    <value>In this panel is possible to create a new workflow template. After specify a name, it will be possible to define activities and states. Workflows will inherit from this template, have these activies and states.</value>
  </data>
  <data name="NoneConfiguredStatesError" xml:space="preserve">
    <value>You have to configure one state at least for the template!</value>
  </data>
  <data name="WorkFlowTemplateGridCaption" xml:space="preserve">
    <value>Workflow Templates</value>
  </data>
  <data name="ConfirmWorkFlowDeletionMsg" xml:space="preserve">
    <value>Are you sure to delete the workflow  '{0}'?</value>
  </data>
  <data name="InsertActivityFailedErrorMsgFmt" xml:space="preserve">
    <value>Unable to add the activity '{0}'</value>
  </data>
  <data name="EmptyTemplateNameError" xml:space="preserve">
    <value>The name of workflow template is empty!</value>
  </data>
  <data name="ConfirmWorkFlowDeletionCaption" xml:space="preserve">
    <value>Workflow deletion</value>
  </data>
  <data name="DataGridWorkFlowMemberColumnHeaderText" xml:space="preserve">
    <value>Tacking part</value>
  </data>
  <data name="DataGridWorkFlowNameColumnHeaderText" xml:space="preserve">
    <value>Workflow</value>
  </data>
  <data name="NameAlreadyUsedErrMsgFmt" xml:space="preserve">
    <value>The workflow template  '{0}' is already existed!</value>
  </data>
  <data name="WorkFlowNameAlreadyUsedErrMsgFmt" xml:space="preserve">
    <value>The workflow  '{0}' is already existed!</value>
  </data>
  <data name="ViewWorkFlowCaption" xml:space="preserve">
    <value>In this panel is possible to modify a workflow before created, its activities, states, transitions and users who take part in the workflow process.</value>
  </data>
  <data name="EmptyWorkFlowNameError" xml:space="preserve">
    <value>The name of workflow is empty!</value>
  </data>
  <data name="DataGridWorkFlowDescColumnHeaderText" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="DataGridOwnerColumnHeaderText" xml:space="preserve">
    <value>Managed by</value>
  </data>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="Clone" xml:space="preserve">
    <value>Clone</value>
  </data>
  <data name="DataGridUserEMailColumnHeaderText" xml:space="preserve">
    <value>E-mail address</value>
  </data>
  <data name="DataGridActivityNameColumnHeaderText" xml:space="preserve">
    <value>Activities</value>
  </data>
  <data name="WorkFlowUserGridCaption" xml:space="preserve">
    <value>Workflow Users</value>
  </data>
  <data name="NewWorkFlowTitle" xml:space="preserve">
    <value>Configure a new workflow</value>
  </data>
  <data name="NoneConfiguredActionsError" xml:space="preserve">
    <value>You have to configure at least one activity for the template!</value>
  </data>
  <data name="DataGridTemplateDescColumnHeaderText" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="DataGridStateNameColumnHeaderText" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="ConfirmWorkFlowTemplateDeletionCaption" xml:space="preserve">
    <value>Deletion of workflow template</value>
  </data>
  <data name="ConfirmWorkFlowActivityDeletionMsg" xml:space="preserve">
    <value>Are you sure to delete the activity '{0}'?</value>
  </data>
  <data name="DataGridToActivityColumnHeaderText" xml:space="preserve">
    <value>Target activity</value>
  </data>
  <data name="ViewWorkFlowTitle" xml:space="preserve">
    <value>View or modify an existed workflow</value>
  </data>
  <data name="NewWorkFlowCaption" xml:space="preserve">
    <value>In this panel is possible to create a new workflow, if you want, it can be inherit from a template, created before</value>
  </data>
  <data name="DataGridFromActivityColumnHeaderText" xml:space="preserve">
    <value>Starting activity</value>
  </data>
  <data name="DataGridTemplateNameColumnHeaderText" xml:space="preserve">
    <value>Template</value>
  </data>
  <data name="WorkFlowGridCaption" xml:space="preserve">
    <value>Configured Workflow</value>
  </data>
  <data name="WorkFlowActionGridCaption" xml:space="preserve">
    <value>Configured Activities</value>
  </data>
  <data name="View" xml:space="preserve">
    <value>View</value>
  </data>
</root>