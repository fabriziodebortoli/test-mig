<?xml version="1.0"?>
<doc>
  <assembly>
    <name>GdPicture.NET.12</name>
  </assembly>
  <members>
    <member name="M:GdPicture12.Internal.Document.GdPictureMetafileDocument.#ctor(System.Drawing.Imaging.Metafile,System.IO.Stream)">
      <summary>
 Initializes a new instance of the MetafileRasterizer class from the specified Imaging.Metafile object.
 </summary>
      <param name="metafile">A Imaging.Metafile from which to create the new MetafileRasterizer.</param>
    </member>
    <member name="M:GdPicture12.Internal.Annotations.AnnotationUnderLayer.Refresh(GdPicture12.Internal.Globals.GdPictureRect,System.Int32,System.Int32)">
      <summary>
 Tells to redraw annotations.
 </summary>
      <param name="rect">The bounding box of the region to redraw.</param>
      <param name="annotationIdx">The index of the annotation to redraw. -1 means all annotations.</param>
      <remarks>
      </remarks>
    </member>
    <member name="M:GdPicture12.Internal.Annotations.AnnotationUnderLayer.Render(GdPicture12.GdPicturePDF,System.Boolean,System.Boolean)">
      <summary>
 Applies GdPicture/XMP annotation to a PDF document.
 </summary>
      <param name="pdf">The PDF to burn the annotations.</param>
      <param name="annotMode">True to generate annots into the page Annot dictionary, False otherwise to generate postscript in page contents Stream.</param>
      <param name="useStdSubtypes">Used when annotMode parameter is set to true. Specifies if standard PDF annotation subtypes must be used, otherwise private GdPicture subtypes are set.</param>
    </member>
    <member name="M:GdPicture12.Internal.OCR.Tesseract3.TesseractOCR.detectOriention(System.Int32,System.String,System.String,System.Single,GdPicture12.ThresholdMethod,System.Int32@,System.Single@)">
      <summary>
      </summary>
      <param name="nImage">
      </param>
      <param name="dictionary">
      </param>
      <param name="dictionaryPath">
      </param>
      <param name="level">
      </param>
      <param name="thresholder">
      </param>
      <param name="orientation">
      </param>
      <param name="oconfidence">returns the difference of top two orientation scores.</param>
      <returns>
      </returns>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.ControllerState.Clone">
      <summary>
 DeepCopy this instance
 </summary>
      <returns>
      </returns>
      <remarks>
      </remarks>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.GetImageCanvasBounds(System.Int32)">
      <summary>
 Defines the size of the image canvas in the DOM, in pixel, for a specific page. (Read only).
 <para>The page number.</para></summary>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.GetZoomX">
      <summary>
 Returns the current horizontal zoom level. 
 </summary>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.GetZoomY">
      <summary>
 Returns the current vertical zoom level. 
 </summary>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.setCustomZoom(System.Double)">
      <summary>
 Tries to change the current level of zoom.
 </summary>
      <param name="newZoom">THe new noom level to apply.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>In case of success, ZoomMode is automatically switched to ViewerZoomMode.ZoomModeCustom.</remarks>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.ZoomIN">
      <summary>
 Increases the current level of zoom.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>In case of success, ZoomMode is automatically switched to ViewerZoomMode.ZoomModeCustom.</remarks>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.ZoomOUT">
      <summary>
 Decreases the current level of zoom.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>In case of success, ZoomMode is automatically switched to ViewerZoomMode.ZoomModeCustom.</remarks>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.Update(System.Boolean)">
      <summary>
 Update the controller. This method can be called internally and should be called externally when non binded properties have been changed such as scrollbars positions, canvas size, page rotation... 
 </summary>
      <remarks>The method triggers events, if any, to adjust scrollbars position, max value and visibility.</remarks>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.computeZoomBounds(System.Double@,System.Double@)">
      <summary>
 Computes zoom bounds based on system context.
 </summary>
      <param name="minZoom">The min supported zoom.</param>
      <param name="maxZoom">The max supported zoom.</param>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.PageRotated">
      <summary>
 Call this method when a page of the current document has been rotated.
 </summary>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.DocumentClosed">
      <summary>
 Call this method when the document has been closed.
 </summary>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.NewDocumentLoaded">
      <summary>
 Call this method when a new document has been loaded.
 </summary>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.ReloadDocument">
      <summary>
 Call this method when the current document must be reloaded.
 </summary>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.NewPageSelected(System.Int32,System.Boolean,GdPicture12.Internal.Viewer.PageAutoNavigationMode)">
      <summary>
 Call this method when a new page has been loaded.
 </summary>
      <param name="PageNo">The new selected page.</param>
      <param name="NeedUpdate">Set True to trigger update events from the controller.</param>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.CurrentPageUpdated(System.Boolean)">
      <summary>
 Call this method when the current page has been updated.
 </summary>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.DocumentPageSizeChanged(System.Boolean)">
      <summary>
 Call this method when the size of one or several pages changed.
 </summary>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.CoordViewerPixelToDocumentPixel(System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
 Makes a translation of a point coordinates from the viewer space, in pixel, to the document space, in pixel.
 </summary>
      <param name="ViewerLeft">The Left coordinate, in pixel, of the point over the viewer.</param>
      <param name="ViewerTop">The Top coordinate, in pixel, of the point over the viewer.</param>
      <param name="DocumentLeft">Returns The Left coordinate, in pixel, of the point over the displayed document.</param>
      <param name="DocumentTop">Returns The Top coordinate, in pixel, of the point over the displayed document.</param>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.CoordViewerPixelToDocumentInch(System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
 Makes a translation of a point coordinates from the viewer space, in pixel, to the document space, in inch.
 </summary>
      <param name="ViewerLeft">The Left coordinate, in pixel, of the point over the viewer.</param>
      <param name="ViewerTop">The Top coordinate, in pixel, of the point over the viewer.</param>
      <param name="DocumentLeft">Returns The Left coordinate, in inch, of the point over the displayed document.</param>
      <param name="DocumentTop">Returns The Top coordinate, in inch, of the point over the displayed document.</param>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.CoordDocumentPixelToViewerPixel(System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
 Makes a translation of a point coordinates from the document space, in pixel, to the viewer space, in pixel.
 </summary>
      <param name="DocumentLeft">The Left coordinate, in pixel, of the point over the displayed document.</param>
      <param name="DocumentTop">The Top coordinate, in pixel, of the point over the displayed document.</param>
      <param name="ViewerLeft">Returns the Left coordinate, in pixel, of the point over the viewer.</param>
      <param name="ViewerTop">Returns the Top coordinate, in pixel, of the point over the viewer.</param>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.CoordDocumentInchToViewerPixel(System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
 Makes a translation of a point coordinates from the document space, in inches, to the viewer space, in pixel.
 </summary>
      <param name="DocumentLeft">The Left coordinate, in inches, of the point over the displayed document.</param>
      <param name="DocumentTop">The Top coordinate, in inches, of the point over the displayed document.</param>
      <param name="ViewerLeft">Returns the Left coordinate, in pixel, of the point over the viewer.</param>
      <param name="ViewerTop">Returns the Top coordinate, in pixel, of the point over the viewer.</param>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.CoordDocumentPixelToDocumentInches(System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
 Makes a translation of a point coordinates from the document space, in pixel, to the document space, in incles.
 </summary>
      <param name="DocumentLeft">The Left coordinate, in pixel, of the point over the document.</param>
      <param name="DocumentTop">The Top coordinate, in pixel, of the point over the document.</param>
      <param name="DocumentLeftInches">Returns the Left coordinate, in inches, of the point over the document.</param>
      <param name="DocumentTopInches">Returns the Top coordinate, in inches, of the point over the document.</param>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.CoordDocumentInchesToDocumentPixels(System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
 Makes a translation of a point coordinates from the document space, in inches, to the document space, in pixels.
 </summary>
      <param name="DocumentLeft">The Left coordinate, in pixel, of the point over the document.</param>
      <param name="DocumentTop">The Top coordinate, in pixel, of the point over the document.</param>
      <param name="DocumentLeftPixels">Returns the Left coordinate, in pixels, of the point over the document.</param>
      <param name="DocumentTopPixels">Returns the Top coordinate, in pixels, of the point over the document.</param>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.GetPageBounds(System.Double@,System.Double@,System.Double@,System.Double@,System.Boolean)">
      <summary>
 Returns the bounds, in pixels, of the viewer area used to render the current page.
 </summary>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.GetDisplayedArea(System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
 Returns the coordinates, in pixel, of the visible area of the displayed document.
 </summary>
      <param name="Left">Returns Left pixel (0 based) position of the area.</param>
      <param name="Top">Returns Top pixel (0 based) position of the area.</param>
      <param name="Width">Returns Width of the area in pixel.</param>
      <param name="Height">Returns Height of the area in pixel.</param>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.GetDisplayedAreaInch(System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
 Returns the coordinates in inches of the visible area of the displayed document.
 </summary>
      <param name="Left">Returns Left position, in inches, of the area.</param>
      <param name="Top">Returns Top position, in inches, of the area.</param>
      <param name="Width">Returns Width, in inches, of the area.</param>
      <param name="Height">Returns Height, in inches, of the area.</param>
    </member>
    <member name="M:GdPicture12.Internal.Viewer.ViewerController.beforeZoomChange">
      <summary>
 This method is internally called before trying to set a new zoom value.
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.PageDisplayMode">
      <summary>
 Specifies the viewer display mode.
 Default value is PageDisplayMode.SinglePageView.
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.Raster96Mode">
      <summary>
 Specifies that bitmap resulting of rasterization process are always 96 DPI whatever the zoom rendering is.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.MovableCanvas">
      <summary>
 Specifies if the image canvas is movable.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.RendererDPIAware">
      <summary>
 Defines in the View renderer engine is DPI aware (for example WPF is "DPI aware" while GDI+ is not).
 Default value is false.
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.RenderRotation">
      <summary>
 The combination of m_Delegates.getPageRotation() and ViewRotation that represents the final rendering rotation of the current page. (Read-Only).
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.VerticalScrollBarMargin">
      <summary>
 The margin to apply to the vertical scrollbar. (Read-Only).
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.HorizontalScrollBarMargin">
      <summary>
 The margin to apply to the horizontal scrollbar. (Read-Only).
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.VerticalScrollBarVisible">
      <summary>
 Specifies if the vertical scrollbar must be visible. (Read-Only).
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.HorizontalScrollBarVisible">
      <summary>
 Specifies if the horizontal scrollbar must be visible. (Read-Only).
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.HorizontalScrollBarMax">
      <summary>
 Specifies if the max value to apply to the horizontal scrollbar. (Read-Only).
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.VerticalScrollBarMax">
      <summary>
 Specifies if the max value to apply to the vertical scrollbar. (Read-Only).
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.ItemsVerticalSpacing">
      <summary>
 When SinglePageView mode is set to false, specifies the space between each rendered pages.
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.ViewerSize">
      <summary>
 Defines the size of the viewer area, in pixel.
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.ForceScrollBars">
      <summary>
 Specifies if both scrollbars must be always visible, whatever the zoom configuration is.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.ScrollBars">
      <summary>
 Specifies if scrollbars are enabled. Turning this property to false forces both scrollbars to be always invisible, whatever the zoom configuration is.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.ZoomStep">
      <summary>
 Defines the percentage of increasing or decreasing of the level of zoom for 'Zoom In' and 'Zoom Out' operations.
 Default value is 25.
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.ZoomMode">
      <summary>
 Zoom mode used by the viewer.
 Default value is ViewerZoomMode.ZoomMode100.
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.DocumentAlignment">
      <summary>
 Default image alignment within the viewer when the area of the viewer if smaller than the displayed document in its current zoom configuration.
 Setting this property to DocumentAlignmentTopLeft has the effect to display  the most top-left part of the displayed page during "Zoom In" operations.
 Default value is ViewerDocumentAlignment.DocumentAlignmentMiddleCenter.
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.KeepDocumentPosition">
      <summary>
 Specifies if the viewer must keep the page position when the displayed page changes or when a new document is loaded.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.ZoomAtCursorPos">
      <summary>
 Specifies if the document must ce centered to the latest provided cursor position when a zoom operation is performed.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.DocumentPosition">
      <summary>
 Default page position within the viewer when the rendering area of the displayed document in its current zoom configuration if smaller than then area of the viewer.
 Default value is ViewerDocumentPosition.DocumentPositionMiddleCenter.
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.ViewRotation">
      <summary>
 The current rotation of the page view.
 </summary>
    </member>
    <member name="P:GdPicture12.Internal.Viewer.ViewerController.RenderMat">
      <summary>
 The latest computed renderer Matrix. (Read-Only).
 </summary>
    </member>
    <member name="E:GdPicture12.Internal.Viewer.ViewerController.UpdateView">
      <summary>
 Occurs when the view in the client side should be updated.
 </summary>
      <param name="newZoom">Specifies a new zoom has been computed.</param>
      <param name="newViewOrPageRotation">Specifies a new view or page rotation.</param>
      <param name="newScrollBarsConfig">Specifies the scrollbar options have been changed.</param>
      <param name="newPageAlignment">Specifies that page alignment configuration changed.</param>
      <param name="horizontalScrollbarValue">The computed horizontal scrollbar position.</param>
      <param name="verticalScrollBarValue">The computed vertical scrollbar position.</param>
      <param name="rasterizePage">Indicates that current page of the vector document must be rasterized.</param>
      <param name="newDocument">A new document is displayed.</param>
      <param name="newPage">A new page is displayed.</param>
      <param name="documentLoaded">Specifies if a document is loaded and handled.</param>
      <param name="newCanvasSize">Specifies that canvas sizes changed.</param>
      <param name="pageUpdated">Specifies that the current pas has been altered.</param>
      <param name="documentReloaded">Specifies that the current document has been reloaded.</param>
      <remarks>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureDocumentUtilities.AddFontFolder(System.String)">
      <summary>
 Adds a new location from which system font will be loaded during the whole application life cycle.
 </summary>
      <param name="Path">The additional path from which system font will be loaded.</param>
      <remarks>This method can be called several time if there is more than one path to add.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureDocumentUtilities.EmptyCache">
      <summary>
 Releases from the memory all cached content such as parsed system fonts. 
 </summary>
    </member>
    <member name="M:GdPicture12.GdPictureDocumentUtilities.ForceGarbageCollection">
      <summary>
 Forces an immediate garbage collection. 
 Use this method to try to reclaim all memory that is inaccessible.
 </summary>
    </member>
    <member name="M:GdPicture12.GdPictureDocumentUtilities.GetDocumentFormat(System.String)">
      <summary>
 Returns the format of a document from a file.
 </summary>
      <param name="FilePath">The path of the document.</param>
      <returns>
 A member of the DocumentFormat enumeration.
 </returns>
      <example>
        <code description="Retrieving the document format of a file." lang="VB.NET">
 Dim documentFormat As DocumentFormat = GdPictureDocumentUtilities.GetDocumentFormatFromFile("d:\documents\document.docx")
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureDocumentUtilities.GetDocumentFormat(System.IO.Stream)">
      <summary>
 Returns the format of a document from a stream.
 </summary>
      <param name="Stream">System.IO.Stream object storing the document.</param>
      <returns>
 A member of the DocumentFormat enumeration.
 </returns>
      <remarks>
        <para>
 The provided strem must support seeking, otherwise the returned value will be DocumentFormat.DocumentFormatUNKNOWN.
 </para>
        <para>
 WMF, EMF and ICO files are not  yet supported by this method.
 </para>
      </remarks>
      <example>
        <code description="Retrieving the format of an image stroted within a stream." lang="VB.NET">
 Dim fileStream As New FileStream("input.tif", FileMode.Open)
 Dim documentFormat As DocumentFormat = oGdPictureImaging.GdPictureDocumentUtilities(fileStream)
 fileStream.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureDocumentUtilities.GetDocumentFormat(System.IO.Stream,System.String)">
      <summary>
 Returns the format of a document from a stream.
 </summary>
      <param name="Stream">System.IO.Stream object storing the document.</param>
      <param name="FileName">The name of the original file. This parameter can help the format detection algorithm to distinguish format using the same signature pattern.</param>
      <returns>
 A member of the DocumentFormat enumeration.
 </returns>
      <remarks>
        <para>
 The provided strem must support seeking, otherwise the returned value will be DocumentFormat.DocumentFormatUNKNOWN.
 </para>
        <para>
 WMF, EMF and ICO files are not  yet supported by this method.
 </para>
      </remarks>
      <example>
        <code description="Retrieving the format of an image stroted within a stream." lang="VB.NET">
 Dim fileStream As New FileStream("input.tif", FileMode.Open)
 Dim documentFormat As DocumentFormat = oGdPictureImaging.GdPictureDocumentUtilities(fileStream, "input.tif")
 fileStream.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureDocumentUtilities.GetDocumentFormatFromFileName(System.String)">
      <summary>
 Returns the format of a document from a file name.
 </summary>
      <param name="FileName">The name of the document.</param>
      <returns>
 A member of the DocumentFormat enumeration.
 </returns>
      <example>
        <code description="Retrieving the document format of a file." lang="VB.NET">
 Dim documentFormat As DocumentFormat = GdPictureDocumentUtilities.GetDocumentFormatFromFile("document.docx")
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureDocumentUtilities.GetDocumentPreview(System.String,GdPicture12.DocumentFormat@,System.Int32@)">
      <summary>
 Provides document's format and number of pages from a file.
 </summary>
      <param name="FilePath">The path of the file.</param>
      <param name="DocumentFormat">Returns the format of the document.</param>
      <param name="PageCount">Returns the number of page of the document.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPictureDocumentUtilities.GetDocumentPreview(System.IO.Stream,System.String,GdPicture12.DocumentFormat@,System.Int32@)">
      <summary>
 Provides document's format and number of pages from a stream.
 </summary>
      <param name="FileStream">The stream of the file.</param>
      <param name="FileName">The name of the original file. Can be an empty string. This parameter can help the format detection algorithm to distinguish format using the same signature pattern.</param>
      <param name="DocumentFormat">Returns the format of the document.</param>
      <param name="PageCount">Returns the number of page of the document.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPictureDocumentUtilities.GetDocumentPreview(System.String,System.Int32,System.Int32,System.Int32,GdPicture12.DocumentFormat@,System.Int32@,System.Int32@)">
      <summary>
 Provides document's format, thumbnail and number of pages from a file.
 </summary>
      <param name="FilePath">The path of the file.</param>
      <param name="ThumbnailWidth">Specifies the width of the thumbnail to generate, in pixel.</param>
      <param name="ThumbnailHeight">Specifies the height of the thumbnail to generate, in pixel.</param>
      <param name="BackColor">Specifies the background color of the thumbnail to generate, in ARGB format.</param>
      <param name="DocumentFormat">Returns the format of the document.</param>
      <param name="ThumbnailID">Returns a GdPicture image identified which is a thumbnail of the first page of the document. This image must be subsequently released from the memory using the DisposeImage() method.</param>
      <param name="PageCount">Returns the number of page of the document.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPictureDocumentUtilities.GetDocumentPreview(System.IO.Stream,System.String,System.Int32,System.Int32,System.Int32,GdPicture12.DocumentFormat@,System.Int32@,System.Int32@)">
      <summary>
 Provides document's format, thumbnail and number of pages from a file.
 </summary>
      <param name="FileStream">The stream of the file.</param>
      <param name="FileName">The name of the original file. Can be an empty string. This parameter can help the format detection algorithm to distinguish format using the same signature pattern.</param>
      <param name="ThumbnailWidth">Specifies the width of the thumbnail to generate, in pixel.</param>
      <param name="ThumbnailHeight">Specifies the height of the thumbnail to generate, in pixel.</param>
      <param name="BackColor">Specifies the background color of the thumbnail to generate, in ARGB format.</param>
      <param name="DocumentFormat">Returns the format of the document.</param>
      <param name="ThumbnailID">Returns a GdPicture image identified which is a thumbnail of the first page of the document. This image must be subsequently released from the memory using the DisposeImage() method.</param>
      <param name="PageCount">Returns the number of page of the document.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPictureDocumentUtilities.DisposeImage(System.Int32)">
      <summary>
 Deletes a GdPicture Image from the memory.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to release.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.LicenseManagerGlobals.urlEncode(System.String)">
      <summary>
 The purpose of this method is to replace System.Web.HttpUtility.UrlEncode that is not a part of the Client profile version subset of the framework
 </summary>
      <param name="text">
      </param>
      <returns>
      </returns>
      <remarks>
      </remarks>
    </member>
    <member name="T:GdPicture12.Annotations.AnnotationAppearance">
      <summary>
 Handles rendering instructions for annotation painting purpose.
 </summary>
    </member>
    <member name="T:GdPicture12.Annotations.AnnotationAppearance.AnnotationAppearanceCmd">
      <summary>
 Specifies one command for annotation appeance rendering.
 </summary>
    </member>
    <member name="M:GdPicture12.Annotations.Annotation.GetAnnotationType">
      <summary>
 Returns the type of the annotation.
 </summary>
      <returns>
  A member of the GdPictureAnnotationType enumeration. 
  </returns>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Guid">
      <summary>
 Specifies the annotation unique identifier.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.CreationTime">
      <summary>
 The date and time when the annotation was created. IE: "29-Mar-11 12:36 PM".
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.ModificationTime">
      <summary>
 The date and time when the annotation was modified. IE: "29-Mar-11 12:36 PM".
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Visible">
      <summary>
 Determines if the annotation is visible or not. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Rotation">
      <summary>
 The rotation of the annotation, in degrees, in the range [0;360].
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Zorder">
      <summary>
 Specifies the the order in which the annotation is rendered from front to back. The annotation having the higher Zorder will be displayed in front of all others.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Tag">
      <summary>
 Stores arbitrary value that can be used to store optional information about the annotation.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Author">
      <summary>
 The name of the author who created the annotation.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Subject">
      <summary>
 The subject of the annotation, if any.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Left">
      <summary>
 Left position, in inches, of the middle point of the bounding box of the annotation.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Top">
      <summary>
 Top position, in inches, of the middle point of the bounding box of the annotation.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Width">
      <summary>
 Width, in inches, of the bounding box of the annotation.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Height">
      <summary>
 Height, in inches, of the bounding box of the annotation.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.CanRotate">
      <summary>
 Specifies if the annotation can be rotated in design time.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.CanResize">
      <summary>
 Specifies if the annotation can be resized in design time.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.CanMove">
      <summary>
 Specifies if the annotation can be moved in design time.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.CanSelect">
      <summary>
 Specifies if the annotation can be selected in design time.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Selected">
      <summary>
 Specifies if the annotation is selected.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Printable">
      <summary>
 Specifies if the annotation is rendered during printing process.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.PreventBurning">
      <summary>
 Specifies if during burning process, the annotation is prevented to be rendered. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.CanEditText">
      <summary>
 Specifies if the text of the annotation can be edited in design time.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Opacity">
      <summary>
 Opacity (or blending level) of the annotation in the range [0;1]. 0 means full transparency, 1 means full opacity.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.SquaredBox">
      <summary>
 Determines if the annotation must have the same width and height.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.BorderWidth">
      <summary>
 The width, in inches, of each lines in stroking operations.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Stroke">
      <summary>
 Determines if the annotation must be stroked or not. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.StrokeColor">
      <summary>
 The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth parameter.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Fill">
      <summary>
 Determines if the annotation must be filled or not. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.FillColor">
      <summary>
 The color to be used for filling the annotation. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.RadiusFactor">
      <summary>
 The radius factor used to draw rounded borders, in the range [0;1]. 0 means: 0% rounded borders, 1 means 100% rounded.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Link">
      <summary>
 The destination of the link. Can be an uri or a page destination.
 </summary>
      <remarks>The syntax of page desinations is page:[page destination]. IE: use 'page:5' to set the target to the page 5 of the document.</remarks>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Image">
      <summary>
 The image to be rendered.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.ImageBase64">
      <summary>
 The initial annotation image, in RAW base 64 form. Internally used for caching purpose.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.ModelID">
      <summary>
 A private identifier defining the model of the annotation.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Text">
      <summary>
 The text to display.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.FontName">
      <summary>
 The name of the font to be used to render the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.FontSize">
      <summary>
 The size of the font, in points, to be used to render the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.AutoSize">
      <summary>
 Defines whether the annotation is automatically resized to display its entire contents.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.FontStyle">
      <summary>
 The style of the font to be used to render the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.HoverFontStyle">
      <summary>
 The style of the font to be used to render the hovered text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.ArrowWidth">
      <summary>
 The width of the arrow, in inches.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.ArrowHeight">
      <summary>
 The height of the arrow, in inches.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.ArrowFilled">
      <summary>
 Specifies if the arrow must be filled or not.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.ForeColor">
      <summary>
 Defines the color of the font.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.HoverForeColor">
      <summary>
 Defines the color of the font when the text is hovered.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.LineAlignment">
      <summary>
 Defines the vertical alignment of the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Scale">
      <summary>
 Defines the scale of the ruler.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Alignment">
      <summary>
 Defines the horizontal alignment of the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.MeasurementUnit">
      <summary>
 Defines the measurement unit used.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.EndCap">
      <summary>
 Defines the cap style used at the end of lines drawn.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.StartCap">
      <summary>
 Defines the cap style used at the start of lines drawn.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.LineJoin">
      <summary>
 Defines the the join style for the ends of two consecutive lines drawn.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.DashStyle">
      <summary>
 Determines the dash style for stroking operations. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.DashCap">
      <summary>
 Determines the cap style for stroking operations when DashStyle is different of Solid. Cap is used at the end of the dashes that make up dashed lines drawn. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.Annotation.Points">
      <summary>
 The points of the path of the annotation. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationCustom.ModelID">
      <summary>
 A private identifier defining the model of the annotation.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationCustom.SquaredBox">
      <summary>
 Determines if the annotation must have the same width and height.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRectangle.Opacity">
      <summary>
 Opacity (or blending level) of the annotation in the range [0;1]. 0 means full transparency, 1 means full opacity.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRectangle.SquaredBox">
      <summary>
 Determines if the annotation must have the same width and height.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRectangle.BorderWidth">
      <summary>
 The width, in inches, of each lines in stroking operations.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRectangle.DashStyle">
      <summary>
 Determines the dash style for stroking operations. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRectangle.DashCap">
      <summary>
 Determines the cap style for stroking operations when DashStyle is different of Solid. Cap is used at the end of the dashes that make up dashed lines drawn. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRectangle.Stroke">
      <summary>
 Determines if the annotation must be stroked or not. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRectangle.StrokeColor">
      <summary>
 The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth parameter.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRectangle.Fill">
      <summary>
 Determines if the annotation must be filled or not. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRectangle.FillColor">
      <summary>
 The color to be used for filling the annotation. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRectangle.RadiusFactor">
      <summary>
 The radius factor used to draw rounded borders, in the range [0;1]. 0 means: 0% rounded borders, 1 means 100% rounded.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEmbeddedImage.Opacity">
      <summary>
 Opacity (or blending level) of the annotation in the range [0;1]. 0 means full transparency, 1 means full opacity.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEmbeddedImage.BorderWidth">
      <summary>
 The width, in inches, of each lines in stroking operations.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEmbeddedImage.DashStyle">
      <summary>
 Determines the dash style for stroking operations. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEmbeddedImage.DashCap">
      <summary>
 Determines the cap style for stroking operations when DashStyle is different of Solid. Cap is used at the end of the dashes that make up dashed lines drawn. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEmbeddedImage.Stroke">
      <summary>
 Determines if the annotation must be stroked or not. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEmbeddedImage.StrokeColor">
      <summary>
 The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth parameter.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEmbeddedImage.Fill">
      <summary>
 Determines if the annotation must be filled or not. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEmbeddedImage.FillColor">
      <summary>
 The color to be used for filling the annotation. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEmbeddedImage.RadiusFactor">
      <summary>
 The radius factor used to draw rounded borders, in the range [0;1]. 0 means: 0% rounded borders, 1 means 100% rounded.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEmbeddedImage.Image">
      <summary>
 The image to be rendered.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEllipse.SquaredBox">
      <summary>
 Determines if the annotation must have the same width and height.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEllipse.Points">
      <summary>
 The points of the path of the annotation. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEllipse.Opacity">
      <summary>
 Opacity (or blending level) of the annotation in the range [0;1]. 0 means full transparency, 1 means full opacity.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEllipse.BorderWidth">
      <summary>
 The width, in inches, of each lines in stroking operations.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEllipse.DashStyle">
      <summary>
 Determines the dash style for stroking operations. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEllipse.DashCap">
      <summary>
 Determines the cap style for stroking operations when DashStyle is different of Solid. Cap is used at the end of the dashes that make up dashed lines drawn. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEllipse.Stroke">
      <summary>
 Determines if the annotation must be stroked or not. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEllipse.StrokeColor">
      <summary>
 The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth parameter.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEllipse.Fill">
      <summary>
 Determines if the annotation must be filled or not. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationEllipse.FillColor">
      <summary>
 The color to be used for filling the annotation. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationLine.Opacity">
      <summary>
 Opacity (or blending level) of the annotation in the range [0;1]. 0 means full transparency, 1 means full opacity.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationLine.BorderWidth">
      <summary>
 The width, in inches, of each lines in stroking operations.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationLine.DashStyle">
      <summary>
 Determines the dash style for stroking operations. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationLine.DashCap">
      <summary>
 Determines the cap style for stroking operations when DashStyle is different of Solid. Cap is used at the end of the dashes that make up dashed lines drawn. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationLine.StrokeColor">
      <summary>
 The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth parameter.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationLine.EndCap">
      <summary>
 Defines the cap style used at the end of lines drawn.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationLine.StartCap">
      <summary>
 Defines the cap style used at the start of lines drawn.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationLineArrow.ArrowWidth">
      <summary>
 The width of the arrow, in inches.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationLineArrow.ArrowHeight">
      <summary>
 The height of the arrow, in inches.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationLineArrow.ArrowFilled">
      <summary>
 Specifies if the arrow must be filled or not.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRuler.MeasurementUnit">
      <summary>
 Defines the measurement unit used.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRuler.FontName">
      <summary>
 The name of the font to be used to render the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRuler.FontStyle">
      <summary>
 The style of the font to be used to render the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRuler.FontSize">
      <summary>
 The size of the font to be used to render the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRuler.ForeColor">
      <summary>
 Defines the color of the font.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRuler.Scale">
      <summary>
 Defines the scale of the ruler.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationLink.HoverForeColor">
      <summary>
 Defines the color of the font when the text is hovered.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationLink.HoverFontStyle">
      <summary>
 The style of the font to be used to render the hovered text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationLink.Link">
      <summary>
 The destination of the link. Can be an uri or a page destination.
 </summary>
      <remarks>The syntax of page desinations is page:[page destination]. IE: use 'page:5' to set the target to the page 5 of the document.</remarks>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationFreeHand.Points">
      <summary>
 The points of the path of the annotation. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationFreeHand.Opacity">
      <summary>
 Opacity (or blending level) of the annotation in the range [0;1]. 0 means full transparency, 1 means full opacity.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationFreeHand.BorderWidth">
      <summary>
 The width, in inches, of each lines in stroking operations.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationFreeHand.DashStyle">
      <summary>
 Determines the dash style for stroking operations. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationFreeHand.DashCap">
      <summary>
 Determines the cap style for stroking operations when DashStyle is different of Solid. Cap is used at the end of the dashes that make up dashed lines drawn. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationFreeHand.StrokeColor">
      <summary>
 The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth parameter.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationFreeHandHighlighter.Points">
      <summary>
 The points of the path of the annotation. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationFreeHandHighlighter.StrokeColor">
      <summary>
 The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth parameter.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationFreeHandHighlighter.BorderWidth">
      <summary>
 The width, in inches, of each lines in stroking operations.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRectangleHighlighter.FillColor">
      <summary>
 The color to be used for filling the annotation. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRectangleHighlighter.SquaredBox">
      <summary>
 Determines if the annotation must have the same width and height.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationPolygon.Points">
      <summary>
 The points of the path of the annotation. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationPolygon.Opacity">
      <summary>
 Opacity (or blending level) of the annotation in the range [0;1]. 0 means full transparency, 1 means full opacity.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationPolygon.BorderWidth">
      <summary>
 The width, in inches, of each lines in stroking operations.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationPolygon.DashStyle">
      <summary>
 Determines the dash style for stroking operations. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationPolygon.DashCap">
      <summary>
 Determines the cap style for stroking operations when DashStyle is different of Solid. Cap is used at the end of the dashes that make up dashed lines drawn. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationPolygon.Stroke">
      <summary>
 Determines if the annotation must be stroked or not. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationPolygon.StrokeColor">
      <summary>
 The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth parameter.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationPolygon.Fill">
      <summary>
 Determines if the annotation must be filled or not. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationPolygon.FillColor">
      <summary>
 The color to be used for filling the annotation. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationPolyRuler.MeasurementUnit">
      <summary>
 Defines the measurement unit used.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationPolyRuler.FontName">
      <summary>
 The name of the font to be used to render the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationPolyRuler.FontStyle">
      <summary>
 The style of the font to be used to render the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationPolyRuler.FontSize">
      <summary>
 The size of the font to be used to render the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationPolyRuler.ForeColor">
      <summary>
 Defines the color of the font.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationPolyRuler.Scale">
      <summary>
 Defines the scale of the ruler.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRubberStamp.Opacity">
      <summary>
 Opacity (or blending level) of the annotation in the range [0;1]. 0 means full transparency, 1 means full opacity.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRubberStamp.BorderWidth">
      <summary>
 The width, in inches, of each lines in stroking operations.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRubberStamp.DashStyle">
      <summary>
 Determines the dash style for stroking operations. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRubberStamp.DashCap">
      <summary>
 Determines the cap style for stroking operations when DashStyle is different of Solid. Cap is used at the end of the dashes that make up dashed lines drawn. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRubberStamp.Stroke">
      <summary>
 Determines if the annotation must be stroked or not. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRubberStamp.StrokeColor">
      <summary>
 The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth parameter.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRubberStamp.Fill">
      <summary>
 Determines if the annotation must be filled or not. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRubberStamp.FillColor">
      <summary>
 The color to be used for filling the annotation. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRubberStamp.Text">
      <summary>
 The text to display.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRubberStamp.RadiusFactor">
      <summary>
 The radius factor used to draw rounded borders, in the range [0;1]. 0 means: 0% rounded borders, 1 means 100% rounded.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRubberStamp.FontName">
      <summary>
 The name of the font to be used to render the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRubberStamp.FontStyle">
      <summary>
 The style of the font to be used to render the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationRubberStamp.ForeColor">
      <summary>
 Defines the color of the font.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.CanEditText">
      <summary>
 Specifies if the text of the annotation can be edited in design time.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.Opacity">
      <summary>
 Opacity (or blending level) of the annotation in the range [0;1]. 0 means full transparency, 1 means full opacity.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.BorderWidth">
      <summary>
 The width, in inches, of each lines in stroking operations.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.DashStyle">
      <summary>
 Determines the dash style for stroking operations. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.DashCap">
      <summary>
 Determines the cap style for stroking operations when DashStyle is different of Solid. Cap is used at the end of the dashes that make up dashed lines drawn. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.Stroke">
      <summary>
 Determines if the annotation must be stroked or not. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.StrokeColor">
      <summary>
 The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth parameter.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.Fill">
      <summary>
 Determines if the annotation must be filled or not. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.FillColor">
      <summary>
 The color to be used for filling the annotation. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.RadiusFactor">
      <summary>
 The radius factor used to draw rounded borders, in the range [0;1]. 0 means: 0% rounded borders, 1 means 100% rounded.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.Text">
      <summary>
 The text to display.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.FontName">
      <summary>
 The name of the font to be used to render the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.FontStyle">
      <summary>
 The style of the font to be used to render the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.FontSize">
      <summary>
 The size of the font to be used to render the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.ForeColor">
      <summary>
 Defines the color of the font.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.AutoSize">
      <summary>
 Defines whether the annotation is automatically resized to display its entire contents.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.Alignment">
      <summary>
 Defines the horizontal alignment of the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationText.LineAlignment">
      <summary>
 Defines the vertical alignment of the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationStickyNote.CanEditText">
      <summary>
 Specifies if the text of the annotation can be edited in design time.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationStickyNote.Opacity">
      <summary>
 Opacity (or blending level) of the annotation in the range [0;1]. 0 means full transparency, 1 means full opacity.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationStickyNote.Fill">
      <summary>
 Determines if the annotation must be filled or not. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationStickyNote.FillColor">
      <summary>
 The color to be used for filling the annotation. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationStickyNote.Stroke">
      <summary>
 Determines if the annotation must be stroked or not. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationStickyNote.BorderWidth">
      <summary>
 The width, in inches, of each lines in stroking operations.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationStickyNote.DashStyle">
      <summary>
 Determines the dash style for stroking operations. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationStickyNote.DashCap">
      <summary>
 Determines the cap style for stroking operations when DashStyle is different of Solid. Cap is used at the end of the dashes that make up dashed lines drawn. 
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationStickyNote.StrokeColor">
      <summary>
 The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth parameter.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationStickyNote.Alignment">
      <summary>
 Defines the horizontal alignment of the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationStickyNote.LineAlignment">
      <summary>
 Defines the vertical alignment of the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationStickyNote.Text">
      <summary>
 The text to display.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationStickyNote.FontName">
      <summary>
 The name of the font to be used to render the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationStickyNote.FontStyle">
      <summary>
 The style of the font to be used to render the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationStickyNote.FontSize">
      <summary>
 The size of the font to be used to render the text.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationStickyNote.AutoSize">
      <summary>
 Defines whether the annotation is automatically resized to display its entire contents.
 </summary>
    </member>
    <member name="P:GdPicture12.Annotations.AnnotationStickyNote.ForeColor">
      <summary>
 Defines the color of the font.
 </summary>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)">
      <summary>
 Loads a PDF document from a file.
 </summary>
      <param name="FilePath">The path of the file. Supported formats are text files and PDF files.</param>
      <param name="LoadInMemory">Specifies if the content of the document must be loaded in memory.
 Loading document in memory results on a better manipulation performance but consumes more memory.
 This also permits to subsequently overwrite or delete the input file. Suggested value is False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 The origin and measurement units are reset to their default values : Origin.OriginBottomLeft, PdfMeasurementUnit.PdfMeasurementUnitPoint.
 </para>
        <para>
 Sometime PDF can be password protected. You can use the IsEncrypted method to determine if a PDF is
 encrypted or not. If encrypted, you should use the SetPassword to decode it with the user or owner
 password.
 </para>
        <para>
 The first page of the document is automatically selected after loading.
 </para>
      </remarks>
      <example>
        <code description="How to compress and pack existing PDF" lang="C#">
 GdPicturePDF oGdPicturePDF = new GdPicturePDF();
 oGdPicturePDF.LoadFromFile(@"Input.pdf", false);
 oGdPicturePDF.EnableCompression(true);
 oGdPicturePDF.SaveToFile(@"compressed.pdf", false);
 oGdPicturePDF.SaveToFile(@"compressed_pack.pdf", true);
 oGdPicturePDF.EnableCompression(false);
 oGdPicturePDF.SaveToFile(@"uncompressed.pdf", false);
 oGdPicturePDF.SaveToFile(@"uncompressed_pack.pdf", true);
 oGdPicturePDF.Dispose();
  </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.IsEncrypted" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetPassword(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.CloseDocument" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.LoadFromFileEx(System.String,System.Boolean)">
      <summary>
 Loads a PDF document from a file.
 </summary>
      <param name="FilePath">The path of the file. Supported formats are text files and PDF files.</param>
      <param name="OpenReadWrite">Specifies if the file must be opened in read and write mode.
 Setting this parameter to true permits to subsequently save modified parts of the PDF, to the same source file, using incremental saving (see example).
 Default value is False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 The origin and measurement units are reset to their default values : Origin.OriginBottomLeft, PdfMeasurementUnit.PdfMeasurementUnitPoint.
 </para>
        <para>
 Sometime PDF can be password protected. You can use the IsEncrypted method to determine if a PDF is
 encrypted or not. If encrypted, you should use the SetPassword to decode it with the user or owner.
 password.
 </para>
        <para>
 The first page of the document is automatically selected after loading.
 </para>
      </remarks>
      <example>
        <code description="This example opens a PDF, appends a text line on its first page and saves the modification using incremental saving." lang="C#">
 using (GdPicturePDF gdPicturePDF = new GdPicturePDF())
 {
    gdPicturePDF.LoadFromFileEx(@"test.pdf", true);
    string fontRes = gdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontCourier);
    gdPicturePDF.SetTextSize(20);
    gdPicturePDF.DrawText(fontRes, 10, 10, "The quick brown fox jumps over the lazy dog");
    gdPicturePDF.SaveToFileInc(@"test.pdf");
 }
 </code>
      </example>
      <example>
        <code description="Merging two documents using incremental saving. This way helps to reduce memory usage and dramatically increase performance during the merging process." lang="VB.NET">
 Dim oSrcPDF As New GdPicturePDF
 Dim oDstPDF As New GdPicturePDF
 oDstPDF.LoadFromFileEx("doc1.pdf", True)
 oSrcPDF.LoadFromFile("doc2.pdf", False)
 Dim srcPageCount As Integer = oSrcPDF.GetPageCount()
 For i As Integer = 1 To srcPageCount
    oDstPDF.ClonePage(oSrcPDF, i)
 Next
 oDstPDF.SaveToFileInc("doc1.pdf")
 oDstPDF.Dispose()
 oSrcPDF.Dispose()
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.IsEncrypted" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetPassword(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.CloseDocument" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SaveToFileInc(System.String)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)">
      <summary>
 Loads a PDF document from a Stream object.
 </summary>
      <param name="Stream">The Stream object. The stream must be kept open for subsequent use.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 The origin and measurement units are reset to their default values : Origin.OriginBottomLeft, PdfMeasurementUnit.PdfMeasurementUnitPoint.
 </para>
        <para>
 Sometime PDF can be password protected. You can use the IsEncrypted method to determine if
 a PDF is encrypted or not. If encrypted, you should use the SetPassword to decode it with the user or owner password.
 </para>
        <para>
 The Stream should remain open, and shall only be closed by the user when a call to CloseDocument is made.
 </para>
        <para>
 The first page of the document is automatically selected after loading.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetEncryptionScheme" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetPassword(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.CloseDocument" />
      <example>
        <code description="Displaying the number of pages in a PDF." lang="VB.NET">
 Dim PdfDoc As IO.Stream = New IO.FileStream("test.pdf", IO.FileMode.Open)
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromStream(PdfDoc)
 If (status = GdPictureStatus.OK) Then
    MessageBox.Show("This pdf contains " + oGdPicturePDF.GetPageCount().ToString() + " pages")
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 PdfDoc.Close
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.LoadFromIStream(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary>
 Loads a PDF document from an IStream object.
 </summary>
      <param name="Stream">The IStream object. The stream must be kept open for subsequent use.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 The origin and measurement units are reset to their default values : Origin.OriginBottomLeft, PdfMeasurementUnit.PdfMeasurementUnitPoint.
 </para>
        <para>
 Sometime PDF can be password protected. You can use the IsEncrypted method to determine if
 a PDF is encrypted or not. If encrypted, you should use the SetPassword to decode it with the user or owner password.
 </para>
        <para>
 The first page of the document is automatically selected after loading.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetEncryptionScheme" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetPassword(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.CloseDocument" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.NewPDF">
      <summary>
 Starts a new empty PDF document.
 Warning: a newly created GdPicturePDF object does not automatically create a new empty document.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 The origin and measurement units are reset to their default values : Origin.OriginBottomLeft, PdfMeasurementUnit.PdfMeasurementUnitPoint.
 </remarks>
      <example>
        <code description="Create a new pdf with Hello Word writen in the center of the firt page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    Dim ResFontName = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
    oGdPicturePDF.NewPage(500, 500)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetTextSize(30)
    oGdPicturePDF.DrawText(ResFontName, 200, 250, "Hello Word")
    oGdPicturePDF.SaveToFile("test_HelloWord.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed: " + status.ToString())
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.NewPDF(System.Boolean)">
      <summary>
 Starts a new empty PDF or PDF/A document.
 Warning: a newly created GdPicturePDF object does not automatically create a new empty document.
 </summary>
      <param name="PDFA">True to start a new PDF/A 1-b, or false to start a regular PDF.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 The origin and measurement units are reset to their default values : Origin.OriginBottomLeft, PdfMeasurementUnit.PdfMeasurementUnitPoint.
 </remarks>
      <example>
        <code description="Create a new pdf/A with Hello Word writen in the center of the firt page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF(True)
 If status = GdPictureStatus.OK Then
    Dim ResFontName = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
    oGdPicturePDF.NewPage(500, 500)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetTextSize(30)
    oGdPicturePDF.DrawText(ResFontName, 200, 250, "Hello Word")
    oGdPicturePDF.SaveToFile("test_HelloWord.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed: " + status.ToString())
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.NewPDF(GdPicture12.PdfConformance)">
      <summary>
 Starts a new empty PDF or PDF/A document.
 </summary>
      <param name="Conformance">A member of the PDFConformance</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.CreateFromText(GdPicture12.PdfConformance,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,GdPicture12.TextAlignment,System.String,System.Single,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
 Convert a text into a multipage pdf.
 </summary>
      <param name="Conformance">A member of the PdfConformance enumeration. The conformance of the PDF to create.</param>
      <param name="PageWidth">The width of the pages in point. 1 point = 1/72 inch.</param>
      <param name="PageHeight">The height of the pages in point. 1 point = 1/72 inch.</param>
      <param name="MarginLeft">The width of the left margin in point. 1 point = 1/72 inch.</param>
      <param name="MarginTop">The height of the top margin in point. 1 point = 1/72 inch.</param>
      <param name="MarginRight">The width of the right margin in point. 1 point = 1/72 inch.</param>
      <param name="MarginBottom">The height of the bottom margin in point. 1 point = 1/72 inch.</param>
      <param name="TextAlignment">Specifies the horizontal alignment of the text within the bounding box.</param>
      <param name="Text">The text to draw</param>
      <param name="TextSize">Text size in point. 1 point = 1/72 inch.</param>
      <param name="FontName">The name of the font to add.</param>
      <param name="FontBold">True to set the font bold else False.</param>
      <param name="FontItalic">True to set the font italic else False.</param>
      <param name="Embedded">True to embed the font in the PDF as TrueType, else False. Warning: embedding the font
 to the file produces larger document.</param>
      <param name="UseFontBbox">Specifies if the bounding box of the font must be used to determine the font height. False by default. Using True should help to increase separation between lines.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Create a Pdf for text file" lang="C#">
  System.IO.StreamReader myFile = new System.IO.StreamReader(@"d:\pdfs\libjpeg.txt");
  string content = myFile.ReadToEnd();
  myFile.Close();
  GdPicturePDF oGdPicturePDF = new GdPicturePDF();
  GdPictureStatus status = oGdPicturePDF.CreateFromText(PdfConformance.PDF_A_1b, 595, 842, 10, 10, 10, 10, TextAlignment.TextAlignmentNear, content, 12, "Arial", false, false, true, false);
  status = oGdPicturePDF.SaveToFile(@"d:\PDFs\DrawMultiPageText.pdf", false);
  MessageBox.Show("Done");
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.CloseDocument">
      <summary>
 Releases the PDF document from the memory.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration. GdPictureStatus.OK if the PDF has been successfully released, else otherwise.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromIStream(System.Runtime.InteropServices.ComTypes.IStream)" />
      <example>
        <code description="Displaying the number of pages of a PDF." lang="VB.NET">
 Dim PdfDoc As IO.Stream = New IO.FileStream("test.pdf", IO.FileMode.Open)
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromStream(PdfDoc)
 If (status = GdPictureStatus.OK) Then
    MessageBox.Show("This pdf contains " + oGdPicturePDF.GetPageCount().ToString() + " pages")
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 PdfDoc.Close
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.NewActionLaunch(System.String,System.String,System.String,GdPicture12.PdfActionLaunchOperation,System.Boolean)">
      <summary>
 Creates a new launch action PDF.
 A launch action launches an application or opens or prints a document.
 </summary>
      <param name="FileName">The file name of the application to be launched or the document to be opened or printed, in standard Windows pathname format.</param>
      <param name="DefaultDirectory">Specifies the default directory in standard DOS syntax. Can be an empty string.</param>
      <param name="Parameters">A parameter string to be passed to the application designated by the FileName parameter. Can be an empty string.</param>
      <param name="Operation">A member of the PdfActionLaunchOperation enumeration.</param>
      <param name="NewWindow">Specifies whether to open the destination document in a new window. If false, the destination document replaces the current document in the same window.</param>
      <returns>
 The newly created action ID.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Creating a PDF with a push button form field that opens Notepad.exe" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SelectPage(1)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontCourier)
 Dim fieldID As Integer = oGdPicturePDF.AddPushButtonFormField(1, 1, 5, 1, "Submit", "Open notepad.exe", fontResName, 6, 255, 0, 0)
 Dim actionID As Integer = oGdPicturePDF.NewActionLaunch("notepad.exe", "", "", PdfActionLaunchOperation.ActionLaunchOperationUndefined, True)
 oGdPicturePDF.SetFormFieldAction(fieldID, actionID)
 oGdPicturePDF.SaveToFile("mydocument.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoTo(GdPicture12.PdfDestinationType,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoToR(GdPicture12.PdfDestinationType,System.String,System.Boolean,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionURI(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionJavaScript(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionNamed(GdPicture12.PdfActionNamed)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetActionLaunchDestination(System.Int32,System.String@,System.String@,System.String@,GdPicture12.PdfActionLaunchOperation@,System.Boolean@)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.NewActionGoTo(GdPicture12.PdfDestinationType,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Creates a new GoTo action PDF.
 A go-to action changes the view to a specified destination (page, location, and magnification factor).
 </summary>
      <param name="DestinationType">A member of the PdfDestinationType enumeration.</param>
      <param name="Page">The destination page number.</param>
      <param name="Left">The left coordinate, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, according to the DestinationType configuration.</param>
      <param name="Bottom">The bottom coordinate, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, according to the DestinationType configuration.</param>
      <param name="Right">The right coordinate, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, according to the DestinationType configuration.</param>
      <param name="Top">The top coordinate, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, according to the DestinationType configuration.</param>
      <param name="Zoom">The zoom factor according to the DestinationType configuration. 1 for 100%, 2 for 200%...</param>
      <returns>
 The newly created action ID.
 </returns>
      <example>
        <code description="Defines the OpenAction of a PDF to open it at the 10th page, with a zoom level of 300% and default offset to 1 centimeter from the left and 5 centimeters from the top." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 Dim actionID As Integer = oGdPicturePDF.NewActionGoTo(PdfDestinationType.DestinationTypeXYZ, 10, 1, 0, 0, 5, 3)
 oGdPicturePDF.SetViewerOpenAction(actionID)
 oGdPicturePDF.SaveToFile("result.pdf", True)
 oGdPicturePDF.Dispose()
 </code>
      </example>
      <example>
        <code description="Creating a 10 pages PDF with bookmark. Each bookmark targets a specific page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF(False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 For i As Integer = 1 To 10
    oGdPicturePDF.NewPage(21, 29.7)
    oGdPicturePDF.SetFillColor(Color.Red)
    oGdPicturePDF.SetTextSize(12)
    oGdPicturePDF.DrawText(fontResName, 1, 1, "This is the page " + i.ToString())
    Dim actionID As Integer = oGdPicturePDF.NewActionGoTo(PdfDestinationType.DestinationTypeXYZ, i, 0, 0, 0, 0, 1)
    Dim bookMarkID As Integer = oGdPicturePDF.NewBookMark(0, "Move to the page " + i.ToString())
    oGdPicturePDF.SetBookMarkAction(bookMarkID, actionID)
 Next
 oGdPicturePDF.SaveToFile("mypdf.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoToR(GdPicture12.PdfDestinationType,System.String,System.Boolean,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionURI(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionJavaScript(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionLaunch(System.String,System.String,System.String,GdPicture12.PdfActionLaunchOperation,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionNamed(GdPicture12.PdfActionNamed)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetActionPageDestination(System.Int32,GdPicture12.PdfDestinationType@,System.Int32@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.NewActionGoToR(GdPicture12.PdfDestinationType,System.String,System.Boolean,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Creates a new GoToR action PDF.
 A go-to remote action changes the view to a specific file to a specified destination (page, location, and magnification factor).
 </summary>
      <param name="DestinationType">A member of the PdfDestinationType enumeration.</param>
      <param name="File">The relative path of the file in which the destination is located.</param>
      <param name="NewWindow">Specifies whether to open the destination document in a new window. If false, the destination document replaces the current document in the same window.</param>
      <param name="Page">The destination page number.</param>
      <param name="Left">The left coordinate, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, according to the DestinationType configuration.</param>
      <param name="Bottom">The bottom coordinate, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, according to the DestinationType configuration.</param>
      <param name="Right">The right coordinate, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, according to the DestinationType configuration.</param>
      <param name="Top">The top coordinate, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, according to the DestinationType configuration.</param>
      <param name="Zoom">The zoom factor according to the DestinationType configuration. 1 for 100%, 2 for 200%...</param>
      <returns>
 The newly created action ID.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Creating 2 PDF which are linked together." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 'creating pdf1.pdf
 oGdPicturePDF.NewPDF(False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim textSize As Single = 12
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SetFillColor(Color.Red)
 oGdPicturePDF.SetTextSize(textSize)
 Dim text As String = "Navigate to pdf2.pdf"
 Dim textWidth As Single = oGdPicturePDF.GetTextWidth(fontResName, textSize, text)
 Dim textHeight As Single = oGdPicturePDF.GetTextHeight(fontResName, textSize, True)
 oGdPicturePDF.DrawTextBox(fontResName, 1, 1, textWidth + 1, textHeight + 1, TextAlignment.TextAlignmentNear, TextAlignment.TextAlignmentNear, text)
 Dim annotIdx As Integer = oGdPicturePDF.AddLinkAnnotation(1, 1, textWidth, textHeight, True, 255, 0, 0)
 Dim actionID As Integer = oGdPicturePDF.NewActionGoToR(PdfDestinationType.DestinationTypeXYZ, "pdf2.pdf", False, 1, 0, 0, 0, 0, 1)
 oGdPicturePDF.SetAnnotationAction(annotIdx, actionID)
 oGdPicturePDF.SaveToFile("pdf1.pdf")
 oGdPicturePDF.CloseDocument()
 'creating pdf2.pdf
 oGdPicturePDF.NewPDF(False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 fontResName = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SetFillColor(Color.Red)
 oGdPicturePDF.SetTextSize(textSize)
 text = "Navigate to pdf1.pdf"
 textWidth = oGdPicturePDF.GetTextWidth(fontResName, textSize, text)
 oGdPicturePDF.DrawTextBox(fontResName, 1, 1, textWidth + 1, textHeight + 1, TextAlignment.TextAlignmentNear, TextAlignment.TextAlignmentNear, text)
 annotIdx = oGdPicturePDF.AddLinkAnnotation(1, 1, textWidth, textHeight, True, 255, 0, 0)
 actionID = oGdPicturePDF.NewActionGoToR(PdfDestinationType.DestinationTypeXYZ, "pdf1.pdf", False, 1, 0, 0, 0, 0, 1)
 oGdPicturePDF.SetAnnotationAction(annotIdx, actionID)
 oGdPicturePDF.SaveToFile("pdf2.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoTo(GdPicture12.PdfDestinationType,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionURI(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionJavaScript(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionLaunch(System.String,System.String,System.String,GdPicture12.PdfActionLaunchOperation,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionNamed(GdPicture12.PdfActionNamed)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetActionRemotePageDestination(System.Int32,GdPicture12.PdfDestinationType@,System.String@,System.Boolean@,System.Int32@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.NewActionJavaScript(System.String)">
      <summary>
 Creates a new javascript action PDF.
 JavaScript action causes a script to be compiled and executed by the JavaScript interpreter.
 Depending on the nature of the script, various interactive form fields in the document may update their values or change their visual appearances.
 Netscape Communications Corporation's Client-Side JavaScript Reference and the Adobe JavaScript for Acrobat API Reference give details on the contents and effects of JavaScript scripts.
 </summary>
      <param name="JavaScript">Text string containing a JavaScript script to be executed when the action is triggered.</param>
      <returns>
 The newly created action ID.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Creating a PDF with a button that links a JavaScript action displaying 'Hello'" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SelectPage(1)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontCourier)
 Dim fieldID As Integer = oGdPicturePDF.AddPushButtonFormField(1, 1, 5, 1, "Submit", "Hello!", fontResName, 6, 255, 0, 0)
 Dim javaScript As String = "app.alert(""Hello!"");"
 Dim actionID As Integer = oGdPicturePDF.NewActionJavaScript(javaScript)
 oGdPicturePDF.SetFormFieldAction(fieldID, actionID)
 oGdPicturePDF.SaveToFile("mydocument.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionURI(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoTo(GdPicture12.PdfDestinationType,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoToR(GdPicture12.PdfDestinationType,System.String,System.Boolean,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionLaunch(System.String,System.String,System.String,GdPicture12.PdfActionLaunchOperation,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionNamed(GdPicture12.PdfActionNamed)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetActionJavaScript(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.NewActionURI(System.String,System.Boolean)">
      <summary>
 Creates a new URI action PDF.
 A uniform resource identifier (URI) is a string that identifies (resolves to) a resource on the Internet,
 typically a file that is the destination of a hypertext link, although it can also resolve to a query or other entity.
 (URIs are described in Internet RFC 2396).
 </summary>
      <param name="URI">The uniform resource identifier to resolve, encoded in 7-bit ASCII. IE: http://www.gdpicture.com.</param>
      <param name="IsMap">A flag specifying whether to track the mouse position when the URI is resolved (see below). Default value is False.
 This entry applies only to actions triggered by the user's clicking an annotation; it is ignored for actions associated with bookmark or with a document's OpenAction entry.</param>
      <returns>
 The newly created action ID.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Creating a 10 pages PDF with bookmark. 10 bookmark targets a specific page, 2 others links external URI." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim actionID, BookMarkID As Integer
 oGdPicturePDF.NewPDF(False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim pagesBookmarkID As Integer = oGdPicturePDF.NewBookMark(0, "Pages Navigation")
 For i As Integer = 1 To 10
    oGdPicturePDF.NewPage(21, 29.7)
    oGdPicturePDF.SetFillColor(Color.Red)
    oGdPicturePDF.SetTextSize(12)
    oGdPicturePDF.DrawText(fontResName, 1, 1, "This is the page " + i.ToString())
    actionID = oGdPicturePDF.NewActionGoTo(PdfDestinationType.DestinationTypeXYZ, i, 0, 0, 0, 0, 1)
    BookMarkID = oGdPicturePDF.NewBookMark(pagesBookmarkID, "Move to the page " + i.ToString())
    oGdPicturePDF.SetBookMarkAction(BookMarkID, actionID)
 Next
 Dim linksBookmark As Integer = oGdPicturePDF.NewBookMark(0, "Links")
 BookMarkID = oGdPicturePDF.NewBookMark(linksBookmark, "Visit GdPicture website!")
 actionID = oGdPicturePDF.NewActionURI("http://www.gdpicture.com", False)
 oGdPicturePDF.SetBookMarkAction(BookMarkID, actionID)
 actionID = oGdPicturePDF.NewActionURI("http://www.guides.gdpicture.com", False)
 BookMarkID = oGdPicturePDF.NewBookMark(linksBookmark, "Read GdPicture.NET documentation online!")
 oGdPicturePDF.SetBookMarkAction(bookMarkID, actionID)
 oGdPicturePDF.SaveToFile("mypdf.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetActionURI(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoTo(GdPicture12.PdfDestinationType,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoToR(GdPicture12.PdfDestinationType,System.String,System.Boolean,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionJavaScript(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionLaunch(System.String,System.String,System.String,GdPicture12.PdfActionLaunchOperation,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionNamed(GdPicture12.PdfActionNamed)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.NewActionNamed(GdPicture12.PdfActionNamed)">
      <summary>
 Creates a new named action PDF.
 A named action is a simple action defined by a name that PDF viewer applications are expected to support.
 </summary>
      <param name="Name">A member of the PdfActionNamed enumeration.</param>
      <returns>
 The newly created action ID.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Creating a 10 pages PDF with 4 links on each page targetting to first, prev., next and last page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF(False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim actionFirstPageID As Integer = oGdPicturePDF.NewActionNamed(PdfActionNamed.ActionNamedFirstPage)
 Dim actionPrevPageID As Integer = oGdPicturePDF.NewActionNamed(PdfActionNamed.ActionNamedPrevPage)
 Dim actionNextPageID As Integer = oGdPicturePDF.NewActionNamed(PdfActionNamed.ActionNamedNextPage)
 Dim actionLastPageID As Integer = oGdPicturePDF.NewActionNamed(PdfActionNamed.ActionNamedLastPage)
 Dim annotID As Integer
 For i As Integer = 1 To 10
    oGdPicturePDF.NewPage(21, 29.7)
    oGdPicturePDF.SetFillColor(Color.Red)
    oGdPicturePDF.SetTextSize(12)
    oGdPicturePDF.DrawText(fontResName, 1, 0.5, "This is the page " + i.ToString())
    oGdPicturePDF.DrawTextBox(fontResName, 1, 1, 4, 2, TextAlignment.TextAlignmentCenter, TextAlignment.TextAlignmentCenter, "First page")
    annotID = oGdPicturePDF.AddLinkAnnotation(1, 1, 3, 1, True, Color.Red)
    oGdPicturePDF.SetAnnotationAction(annotID, actionFirstPageID)
    oGdPicturePDF.DrawTextBox(fontResName, 4, 1, 7, 2, TextAlignment.TextAlignmentCenter, TextAlignment.TextAlignmentCenter, "Prev. page")
    annotID = oGdPicturePDF.AddLinkAnnotation(4, 1, 3, 1, True, Color.Red)
    oGdPicturePDF.SetAnnotationAction(annotID, actionPrevPageID)
    oGdPicturePDF.DrawTextBox(fontResName, 7, 1, 10, 2, TextAlignment.TextAlignmentCenter, TextAlignment.TextAlignmentCenter, "Next page")
    annotID = oGdPicturePDF.AddLinkAnnotation(7, 1, 3, 1, True, Color.Red)
    oGdPicturePDF.SetAnnotationAction(annotID, actionNextPageID)
    oGdPicturePDF.DrawTextBox(fontResName, 10, 1, 13, 2, TextAlignment.TextAlignmentCenter, TextAlignment.TextAlignmentCenter, "Last page")
    annotID = oGdPicturePDF.AddLinkAnnotation(10, 1, 3, 1, True, Color.Red)
    oGdPicturePDF.SetAnnotationAction(annotID, actionLastPageID)
 Next
 oGdPicturePDF.SaveToFile("mypdf.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetActionURI(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoTo(GdPicture12.PdfDestinationType,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoToR(GdPicture12.PdfDestinationType,System.String,System.Boolean,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionJavaScript(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionLaunch(System.String,System.String,System.String,GdPicture12.PdfActionLaunchOperation,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionURI(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetActionPageDestination(System.Int32,GdPicture12.PdfDestinationType@,System.Int32@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetViewerOpenAction(System.Int32)">
      <summary>
 Defines the OpenAction entry in the PDF catalog. This property defines a destination to be displayed or an action to be performed when the document is opened.
 If this entry is absent, the document should be opened to the top of the first page at the default magnification factor.
 </summary>
      <param name="ActionID">An action ID returned by the the NewActionGoTo method.</param>
      <returns>
 A member of GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Defines the OpenAction of a PDF to open it at the 10th page, with a zoom level of 300% and default offset to 1 centimeter from the left and 5 centimeters from the top." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 Dim actionID As Integer = oGdPicturePDF.NewActionGoTo(PdfDestinationType.DestinationTypeXYZ, 10, 1, 0, 0, 5, 3)
 oGdPicturePDF.SetViewerOpenAction(actionID)
 oGdPicturePDF.SaveToFile("result.pdf", True)
 oGdPicturePDF.Dispose()
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoTo(GdPicture12.PdfDestinationType,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetViewerOpenAction(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetViewerOpenActionID">
      <summary>
 Gets the OpenAction entry in the PDF catalog. This property defines a destination to be displayed or an action to be performed when the document is opened.
 If this entry is absent, the document should be opened to the top of the first page at the default magnification factor.
 </summary>
      <returns>
 The ID of the OpenAction action.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetViewerOpenAction(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetActionType(System.Int32)" />
      <example>
        <code description="Getting the action type associated with the OpenAction entry of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim ActionId As Integer = oGdPicturePDF.GetViewerOpenActionID()
    If ActionId &lt;&gt; 0 Then
       Dim ActionType As PdfActionType = oGdPicturePDF.GetActionType(ActionId)
       MessageBox.Show("Open Action type : " + ActionType.ToString())
    Else
       MessageBox.Show("No open action")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
</code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetActionType(System.Int32)">
      <summary>
 Returns the action type of a specified PDF action object.
 A PDF action object defines the characteristics and behavior of an action. See the PdfActionType enumeration for more information about possible actions.
 </summary>
      <param name="ActionID">An action ID returned by the GetViewerOpenActionID, GetBookMarkActionID, GetFormFieldActionID, GetAnnotationActionID, NewActionGoTo, NewActionGoToR, NewActionLaunch, NewActionJavaScript, NewActionNamed or NewActionURI method.</param>
      <returns>
 A member of the PdfActionType enumeration. ActionTypeUnknown means an error probably occurred. You can use the GetStat() method to determine the reason.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetViewerOpenActionID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoTo(GdPicture12.PdfDestinationType,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoToR(GdPicture12.PdfDestinationType,System.String,System.Boolean,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionURI(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionJavaScript(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionLaunch(System.String,System.String,System.String,GdPicture12.PdfActionLaunchOperation,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionNamed(GdPicture12.PdfActionNamed)" />
      <example>
        <code description="Parsing annotations to find their action types." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
    If AnnotCount = 0 Then
       MessageBox.Show("No annotations")
    Else
       Dim AnnotsActionsType As String = ""
       For x As Integer = 0 To AnnotCount - 1
          Dim ActionId As Integer = oGdPicturePDF.GetAnnotationActionID(x)
          Dim ActionType As PdfActionType = oGdPicturePDF.GetActionType(ActionId)
          AnnotsActionsType = AnnotsActionsType + "Annotation No " + x.ToString() + " Type : " + ActionType.ToString() + vbCrLf
       Next
       MessageBox.Show(AnnotsActionsType)
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetBookMarkActionID(System.Int32)">
      <summary>
 Returns the action ID of a specified bookmark.
 The GetActionType method should be subsequently called to determine which kind of action is associated to the bookmark.
 </summary>
      <param name="BookMarkID">A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <returns>
 The  ID of the action of the specified bookmark.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetActionType(System.Int32)" />
      <example>
        <code description="Find the root bookmark's action type if it has an action object." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim BookMarkId As Integer = oGdPicturePDF.GetBookMarkRootID()
    If BookMarkId &lt;&gt; 0 Then
       Dim ActionId As Integer = oGdPicturePDF.GetBookMarkActionID(BookMarkId)
       If ActionId &lt;&gt; 0 Then
          Dim ActionType As PdfActionType = oGdPicturePDF.GetActionType(ActionId)
          MessageBox.Show("Fist bookMark Action type : " + ActionType.ToString())
       Else
          MessageBox.Show("Root bookmark has no action")
       End If
    Else
       MessageBox.Show("This pdf does not have bookmarks")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetBookMarkAction(System.Int32,System.Int32)">
      <summary>
 Sets the action associated with a specified bookmark.
 </summary>
      <param name="BookMarkID">A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <param name="ActionID">An action ID returned by the NewActionGoTo, NewActionGoToR, NewActionLaunch, NewActionJavaScript, NewActionNamed or NewActionURI method.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Creating a 10 pages PDF with bookmark. 10 bookmark targets a specific page, 2 others links external URI." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim actionID, BookMarkID As Integer
 oGdPicturePDF.NewPDF(False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim pagesBookmarkID As Integer = oGdPicturePDF.NewBookMark(0, "Pages Navigation")
 For i As Integer = 1 To 10
    oGdPicturePDF.NewPage(21, 29.7)
    oGdPicturePDF.SetFillColor(Color.Red)
    oGdPicturePDF.SetTextSize(12)
    oGdPicturePDF.DrawText(fontResName, 1, 1, "This is the page " + i.ToString())
    actionID = oGdPicturePDF.NewActionGoTo(PdfDestinationType.DestinationTypeXYZ, i, 0, 0, 0, 0, 1)
    BookMarkID = oGdPicturePDF.NewBookMark(pagesBookmarkID, "Move to the page " + i.ToString())
    oGdPicturePDF.SetBookMarkAction(BookMarkID, actionID)
 Next
 Dim linksBookmark As Integer = oGdPicturePDF.NewBookMark(0, "Links")
 BookMarkID = oGdPicturePDF.NewBookMark(linksBookmark, "Visit GdPicture website!")
 actionID = oGdPicturePDF.NewActionURI("http://www.gdpicture.com", False)
 oGdPicturePDF.SetBookMarkAction(BookMarkID, actionID)
 actionID = oGdPicturePDF.NewActionURI("http://www.guides.gdpicture.com", False)
 BookMarkID = oGdPicturePDF.NewBookMark(linksBookmark, "Read GdPicture.NET documentation online!")
 oGdPicturePDF.SetBookMarkAction(bookMarkID, actionID)
 oGdPicturePDF.SaveToFile("mypdf.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoTo(GdPicture12.PdfDestinationType,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoToR(GdPicture12.PdfDestinationType,System.String,System.Boolean,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionJavaScript(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionLaunch(System.String,System.String,System.String,GdPicture12.PdfActionLaunchOperation,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionURI(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionNamed(GdPicture12.PdfActionNamed)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetActionURI(System.Int32)">
      <summary>
 Returns the URI of target of a specified PDF action object of type URI.
 A PDF action object defines the characteristics and behavior of an action. See the PdfActionType enumeration for more information about possible actions.
 </summary>
      <param name="ActionID">An action ID returned by the GetViewerOpenActionID, GetBookMarkActionID, GetFormFieldActionID, GetAnnotationActionID or NewActionURI method. The type of the action returned by the GetActionType method must be ActionTypeURI.</param>
      <returns>
 The URI destination. An empty string means an error probably occurred. You can use the GetStat() method to determine the reason.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetViewerOpenActionID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionURI(System.String,System.Boolean)" />
      <example>
        <code description="Parsing annotations to find the target URI of an action object of type URI." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
    If AnnotCount = 0 Then
       MessageBox.Show("No annotations")
    Else
       Dim found As Boolean = False
       For x As Integer = 0 To AnnotCount - 1
          Dim ActionId As Integer = oGdPicturePDF.GetAnnotationActionID(x)
          Dim ActionType As PdfActionType = oGdPicturePDF.GetActionType(ActionId)
          Select Case ActionType
          Case PdfActionType.ActionTypeURI
          found = True
          Dim URI As String = oGdPicturePDF.GetActionURI(ActionId)
          MessageBox.Show("Annotation No " + x.ToString() + vbCrLf + "URIL : " + vbCrLf + URI)
          End Select
       Next
       If Not found Then
          MessageBox.Show("No annotations with URI action")
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetActionJavaScript(System.Int32)">
      <summary>
 Returns the javascript of a specified PDF action object of type JavaScript.
 A PDF action object defines the characteristics and behavior of an action. See the PdfActionType enumeration for more information about possible actions.
 </summary>
      <param name="ActionID">An action ID returned by the GetViewerOpenActionID, GetBookMarkActionID, GetFormFieldActionID, GetAnnotationActionID or NewActionJavaScript method. The type of the action returned by the GetActionType method must be ActionTypeJavaScript.</param>
      <returns>
 The javascript code. An empty string means an error probably occurred. You can use the GetStat() method to determine the reason.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetViewerOpenActionID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionJavaScript(System.String)" />
      <example>
        <code description="Parsing annotations to find javascript actions." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
    If AnnotCount = 0 Then
       MessageBox.Show("No annotations")
    Else
       Dim found As Boolean = False
       For x As Integer = 0 To AnnotCount - 1
          Dim ActionId As Integer = oGdPicturePDF.GetAnnotationActionID(x)
          Dim ActionType As PdfActionType = oGdPicturePDF.GetActionType(ActionId)
          Select Case ActionType
          Case PdfActionType.ActionTypeJavaScript
          found = True
          Dim JavaScript As String = oGdPicturePDF.GetActionJavaScript(ActionId)
          MessageBox.Show("Annotation No " + x.ToString() + vbCrLf + "Javascrit : " + vbCrLf + JavaScript)
          End Select
       Next
       If Not found Then
          MessageBox.Show("No annotations with javascript action")
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetActionLaunchDestination(System.Int32,System.String@,System.String@,System.String@,GdPicture12.PdfActionLaunchOperation@,System.Boolean@)">
      <summary>
 Returns the destination info of a specified PDF action object of type Launch.
 A PDF action object defines the characteristics and behavior of an action. See the PdfActionType enumeration for more information about possible actions.
 </summary>
      <param name="ActionID">An action ID returned by the GetViewerOpenActionID, GetBookMarkActionID, GetFormFieldActionID, GetAnnotationActionID or the NewActionLaunch method. The type of the action returned by the GetActionType method must be ActionTypeLaunch.</param>
      <param name="FileName">Output parameter. The file name of the application to be launched or the document to be opened or printed, in standard Windows pathname format.</param>
      <param name="DefaultDirectory">Output parameter. Specifies the default directory in standard DOS syntax. Can be an empty string.</param>
      <param name="Parameters">Output parameter. A parameter string to be passed to the application designated by the FileName parameter. Can be an empty string.</param>
      <param name="Operation">Output parameter. A member of the PdfActionLaunchOperation enumeration.</param>
      <param name="NewWindow">Output parameter. Specifies whether to open the destination document in a new window. If false, the destination document replaces the current document in the same window.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetViewerOpenActionID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionLaunch(System.String,System.String,System.String,GdPicture12.PdfActionLaunchOperation,System.Boolean)" />
      <example>
        <code description="Parsing annotations to find the destination info of PDF action objects of type Launch." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
    If AnnotCount = 0 Then
       MessageBox.Show("No annotations")
    Else
       Dim found As Boolean = False
       For x As Integer = 0 To AnnotCount - 1
          Dim ActionId As Integer = oGdPicturePDF.GetAnnotationActionID(x)
          Dim ActionType As PdfActionType = oGdPicturePDF.GetActionType(ActionId)
          Dim FileName As String, DefaultDirectory As String, Parameters As String, Operation As PdfActionLaunchOperation, NewWindow As Boolean
          Select Case ActionType
          Case PdfActionType.ActionTypeLaunch
          found = True
          status = oGdPicturePDF.GetActionLaunchDestination(ActionId, FileName, DefaultDirectory, Parameters, Operation, NewWindow)
          If status = GdPictureStatus.OK Then
             MessageBox.Show("Annotation No " + x.ToString() + vbCrLf + "Launch Action : " + vbCrLf +
             "Filename = " + FileName + vbCrLf +
             "Default Directory = " + DefaultDirectory + vbCrLf +
             "Parameters = " + Parameters + vbCrLf +
             "Operation = " + Operation.ToString + vbCrLf +
             "NewWindow = " + NewWindow.ToString)
          End If
          End Select
       Next
       If Not found Then
          MessageBox.Show("No annotations with action objects of type Launch")
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetActionPageDestination(System.Int32,GdPicture12.PdfDestinationType@,System.Int32@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
      <summary>
 Returns the page destination info of a specified PDF action object of type GoTo,Named or ExplicitDestination.
 A PDF action object defines the characteristics and behavior of an action. See the PdfActionType enumeration for more information about possible actions.
 </summary>
      <param name="ActionID">An action ID returned by the GetViewerOpenActionID, GetBookMarkActionID, GetFormFieldActionID, GetAnnotationActionID, NewActionNamed or the NewActionGoTo method. The type of the action returned by the GetActionType method must be ActionTypeGoTo, ActionTypeNamed or ActionTypeExplicitDestination.</param>
      <param name="DestinationType">Output parameter. A member of the PdfDestinationType enumeration.</param>
      <param name="Page">Output parameter. The destination page number.</param>
      <param name="Left">Output parameter. The left coordinate, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, according to the DestinationType configuration.</param>
      <param name="Bottom">Output parameter. The bottom coordinate, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, according to the DestinationType configuration.</param>
      <param name="Right">Output parameter. The right coordinate, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, according to the DestinationType configuration.</param>
      <param name="Top">Output parameter. The top coordinate, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, according to the DestinationType configuration.</param>
      <param name="Zoom">Output parameter. The zoom factor according to the DestinationType configuration. 1 for 100%, 2 for 200%...</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetViewerOpenActionID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoTo(GdPicture12.PdfDestinationType,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionNamed(GdPicture12.PdfActionNamed)" />
      <example>
        <code description="Parsing annotations to find the destinations of PDF action objects of type GoTo, Named or ExplicitDestination." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
    If AnnotCount = 0 Then
       MessageBox.Show("No annotations")
    Else
       Dim found As Boolean = False
       For x As Integer = 0 To AnnotCount - 1
          Dim ActionId As Integer = oGdPicturePDF.GetAnnotationActionID(x)
          Dim ActionType As PdfActionType = oGdPicturePDF.GetActionType(ActionId)
          Dim DestinationType As PdfDestinationType, Page As Integer, Left As Single, Bottom As Single, Right As Single, Top As Single, Zoom As Single
          Select Case ActionType
          Case PdfActionType.ActionTypeGoTo, PdfActionType.ActionTypeGoToR, PdfActionType.ActionTypeGoToE, PdfActionType.ActionTypeNamed, PdfActionType.ActionTypeExplicitDestination
          found = True
          oGdPicturePDF.GetActionPageDestination(ActionId, DestinationType, Page, Left, Bottom, Right, Top, Zoom)
          MessageBox.Show("Annotation No " + x.ToString() + vbCrLf + "Destination Action : " + vbCrLf +
          "Type = " + ActionType.ToString + vbCrLf +
          "Page = " + Page.ToString + vbCrLf +
          "Coords = (" + Left.ToString + "*" + Bottom.ToString + ")-(" + Right.ToString + "*" + Top.ToString + ")")
          End Select
       Next
       If Not found Then
          MessageBox.Show("No annotations with Action Type Goto")
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetActionRemotePageDestination(System.Int32,GdPicture12.PdfDestinationType@,System.String@,System.Boolean@,System.Int32@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
      <summary>
 Returns the remote page destination info of a specified PDF action object of type GoToR.
 A PDF action object defines the characteristics and behavior of an action. See the PdfActionType enumeration for more information about possible actions.
 </summary>
      <param name="ActionID">An action ID returned by the GetViewerOpenActionID, GetBookMarkActionID, GetFormFieldActionID, GetAnnotationActionID or the NewActionGoToR method. The type of the action returned by the GetActionType method must be ActionTypeGoToR.</param>
      <param name="DestinationType">Output parameter. A member of the PdfDestinationType enumeration.</param>
      <param name="File">Output parameter. The path of the file in which the destination is located.</param>
      <param name="NewWindow">Output parameter. Specifies whether to open the destination document in a new window.</param>
      <param name="Page">Output parameter. The destination page number.</param>
      <param name="Left">Output parameter. The left coordinate, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, according to the DestinationType configuration.</param>
      <param name="Bottom">Output parameter. The bottom coordinate, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, according to the DestinationType configuration.</param>
      <param name="Right">Output parameter. The right coordinate, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, according to the DestinationType configuration.</param>
      <param name="Top">Output parameter. The top coordinate, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, according to the DestinationType configuration.</param>
      <param name="Zoom">Output parameter. The zoom factor according to the DestinationType configuration. 1 for 100%, 2 for 200%...</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetViewerOpenActionID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationActionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoToR(GdPicture12.PdfDestinationType,System.String,System.Boolean,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <example>
        <code description="Parsing annotations to find the destinations of PDF action objects of type GoToR" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
    If AnnotCount = 0 Then
       MessageBox.Show("No annotations")
    Else
       Dim found As Boolean = False
       For x As Integer = 0 To AnnotCount - 1
          Dim ActionId As Integer = oGdPicturePDF.GetAnnotationActionID(x)
          Dim ActionType As PdfActionType = oGdPicturePDF.GetActionType(ActionId)
          Dim DestinationType As PdfDestinationType, FileName As String, NewWindow As Boolean, Page As Integer, Left As Single, Bottom As Single, Right As Single, Top As Single, Zoom As Single
          Select Case ActionType
          Case PdfActionType.ActionTypeGoToR
          found = True
          oGdPicturePDF.GetActionRemotePageDestination(ActionId, DestinationType, FileName, NewWindow, Page, Left, Bottom, Right, Top, Zoom)
          MessageBox.Show("Annotation No " + x.ToString() + vbCrLf + "Destination Action : " + vbCrLf +
          "Type = " + ActionType.ToString + vbCrLf +
          "Filename = " + FileName + vbCrLf +
          "NewWindow = " + NewWindow.ToString +
          "Page = " + Page.ToString + vbCrLf +
          "Coords = (" + Left.ToString + "*" + Bottom.ToString + ")-(" + Right.ToString + "*" + Top.ToString + ")")
          End Select
       Next
       If Not found Then
          MessageBox.Show("No annotations with Action Type GotoR")
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RemoveBookMarks">
      <summary>
 Removes all bookmarks of the PDF.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Removing all bookmarks from a pdf file." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureoGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim RootBookMarkId As Integer = oGdPicturePDF.GetBookMarkRootID()
    If RootBookMarkId &lt;&gt; 0 Then
       status = oGdPicturePDF.RemoveBookMarks()
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_RemoveBookMarks_func.pdf")
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("RemoveBookMark failed, status : " + status.ToString())
       End If
    Else
       MessageBox.Show("This pdf does not have Boormarks")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RemoveBookMark(System.Int32)">
      <summary>
 Removes a specified bookmark from the PDF.
 </summary>
      <param name="BookMarkID">A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
      <example>
        <code description="Removing the second top level bookmark." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim RootBookMarkId As Integer = oGdPicturePDF.GetBookMarkRootID()
    If RootBookMarkId &lt;&gt; 0 Then
       Dim NextBookMarkId As Integer = oGdPicturePDF.GetBookMarkNextID(RootBookMarkId)
       If NextBookMarkId = 0 Then
          MessageBox.Show("This pdf only has a single bookmark at the root")
       Else
          status = oGdPicturePDF.RemoveBookMark(NextBookMarkId)
          If status = GdPictureStatus.OK Then
             oGdPicturePDF.SaveToFile("test_RemoveBookMark_func.pdf")
             MessageBox.Show("Ok")
          Else
             MessageBox.Show("RemoveBookMark failed, status : " + status.ToString())
          End If
       End If
    Else
       MessageBox.Show("This pdf does not have bookmarks")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetBookMarkCount">
      <summary>
 Returns the number of available bookmarks entries in the PDF.
 </summary>
      <returns>
 The number of bookmarks. -1 means an error occurred. You can use the GetStat() method to determine the reason.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <example>
        <code description="Retrieving the bookmarks count and displaying it in a message box." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim BookMarkCount As Integer = oGdPicturePDF.GetBookMarkCount()
    MessageBox.Show("Bookmark count : " + BookMarkCount.ToString())
 Else
    MessageBox.Show("This pdf does not have bookmarks")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetBookMarkRootID">
      <summary>
 Returns the ID of the root bookmark in the PDF.
 </summary>
      <returns>
 The root bookmark ID (value higher than 0). 0 means an error occurred. You can use the GetStat() method to determine the reason.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Parsing all outlines of a document." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("bookmark.pdf", False)
 parseOutlines(oGdPicturePDF, oGdPicturePDF.GetBookMarkRootID(), 0)
 End Sub
 Private Sub parseOutlines(ByVal oGdPicturePDF As GdPicturePDF, ByVal bookmarkID As Integer, ByVal level As Integer)
 While True
    MessageBox.Show("Title: " + oGdPicturePDF.GetBookMarkTitle(bookmarkID) + ". level: " + level.ToString())
    'Check childs
    If oGdPicturePDF.GetBookMarkChildCount(bookmarkID) &gt; 0 Then
       parseOutlines(oGdPicturePDF, oGdPicturePDF.GetBookMarkFirstChildID(bookmarkID), level + 1)
    End If
    'Check for subsequent outlines
    bookmarkID = oGdPicturePDF.GetBookMarkNextID(bookmarkID)
    If bookmarkID = 0 Then
       Exit While
    End If
 End While
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetBookMarkChildCount(System.Int32)">
      <summary>
 Returns the number of child bookmarks contained in a specified bookmark.
 </summary>
      <param name="BookMarkID">A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <returns>
 The number of available child bookmarks in the specified bookmark (value higher or equal to 0). -1 means an error occurred. You can use the GetStat() method to determine the reason.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Parsing all outlines of a document." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("bookmark.pdf", False)
 parseOutlines(oGdPicturePDF, oGdPicturePDF.GetBookMarkRootID(), 0)
 End Sub
 Private Sub parseOutlines(ByVal oGdPicturePDF As GdPicturePDF, ByVal bookmarkID As Integer, ByVal level As Integer)
 While True
    MessageBox.Show("Title: " + oGdPicturePDF.GetBookMarkTitle(bookmarkID) + ". level: " + level.ToString())
    'Check childs
    If oGdPicturePDF.GetBookMarkChildCount(bookmarkID) &gt; 0 Then
       parseOutlines(oGdPicturePDF, oGdPicturePDF.GetBookMarkFirstChildID(bookmarkID), level + 1)
    End If
    'Check for subsequent outlines
    bookmarkID = oGdPicturePDF.GetBookMarkNextID(bookmarkID)
    If bookmarkID = 0 Then
       Exit While
    End If
 End While
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)">
      <summary>
 Returns the bookmark ID of the first child bookmarks contained in a specified bookmark.
 </summary>
      <param name="BookMarkID">A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <returns>
 The bookmark ID of the first child bookmarks in the specified bookmark (value higher than 0). -1 means an error occurred. You can use the GetStat() method to determine the reason.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Parsing all outlines of a document." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("bookmark.pdf", False)
 parseOutlines(oGdPicturePDF, oGdPicturePDF.GetBookMarkRootID(), 0)
 End Sub
 Private Sub parseOutlines(ByVal oGdPicturePDF As GdPicturePDF, ByVal bookmarkID As Integer, ByVal level As Integer)
 While True
    MessageBox.Show("Title: " + oGdPicturePDF.GetBookMarkTitle(bookmarkID) + ". level: " + level.ToString())
    'Check childs
    If oGdPicturePDF.GetBookMarkChildCount(bookmarkID) &gt; 0 Then
       parseOutlines(oGdPicturePDF, oGdPicturePDF.GetBookMarkFirstChildID(bookmarkID), level + 1)
    End If
    'Check for subsequent outlines
    bookmarkID = oGdPicturePDF.GetBookMarkNextID(bookmarkID)
    If bookmarkID = 0 Then
       Exit While
    End If
 End While
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
      <example>
        <code description="Retrieving the bookmark root id, and it's first child id if it exists." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim BookMarkId As Integer = oGdPicturePDF.GetBookMarkRootID()
    If BookMarkId &lt;&gt; 0 Then
       If oGdPicturePDF.GetBookMarkChildCount(BookMarkId) &gt; 0 Then
          Dim FirstChildId As Integer = oGdPicturePDF.GetBookMarkFirstChildID(BookMarkId)
          MessageBox.Show("Root Id :" + BookMarkId.ToString() + vbCrLf + "First child Id of the root bookmark :" + FirstChildId.ToString() + vbCrLf + " it's Parent's ID :" + oGdPicturePDF.GetBookMarkParentID(FirstChildId).ToString())
       Else
          MessageBox.Show("Root bookmark does not have children")
       End If
    Else
       MessageBox.Show("This pdf does not have bookmarks")
    End If
 Else
    MessageBox.Show("The file cannot't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)">
      <summary>
 Returns the bookmark ID of the next bookmarks available in the same node of a specified bookmark.
 </summary>
      <param name="BookMarkID">A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <returns>
 The  ID of the next available bookmark located in the same node of the specified bookmark (value higher than 0). -1 means an error occurred. You can use the GetStat() method to determine the reason.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Parsing all outlines of a document." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("bookmark.pdf", False)
 parseOutlines(oGdPicturePDF, oGdPicturePDF.GetBookMarkRootID(), 0)
 End Sub
 Private Sub parseOutlines(ByVal oGdPicturePDF As GdPicturePDF, ByVal bookmarkID As Integer, ByVal level As Integer)
 While True
    MessageBox.Show("Title: " + oGdPicturePDF.GetBookMarkTitle(bookmarkID) + ". level: " + level.ToString())
    'Check childs
    If oGdPicturePDF.GetBookMarkChildCount(bookmarkID) &gt; 0 Then
       parseOutlines(oGdPicturePDF, oGdPicturePDF.GetBookMarkFirstChildID(bookmarkID), level + 1)
    End If
    'Check for subsequent outlines
    bookmarkID = oGdPicturePDF.GetBookMarkNextID(bookmarkID)
    If bookmarkID = 0 Then
       Exit While
    End If
 End While
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)">
      <summary>
 Returns the bookmark ID of the previous bookmarks available in the same node of a specified bookmark.
 </summary>
      <param name="BookMarkID">A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <returns>
 The  ID of the previous available bookmark located in the same node of the specified bookmark (value higher than 0). -1 means an error occurred. You can use the GetStat() method to determine the reason.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
      <example>
        <code description="Retrieving the Id and title of the second last child of the root bookmark." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim BookMarkId As Integer = oGdPicturePDF.GetBookMarkRootID()
    If BookMarkId &lt;&gt; 0 Then
       If oGdPicturePDF.GetBookMarkChildCount(BookMarkId) &gt; 0 Then
          Dim FirstChildId As Integer = oGdPicturePDF.GetBookMarkFirstChildID(BookMarkId)
          Dim RootBokMarkFirstChildSiblingCount = oGdPicturePDF.GetBookMarkChildCount(BookMarkId)
          Dim SiblingId As Integer = FirstChildId
          For x As Integer = 0 To RootBokMarkFirstChildSiblingCount - 2
             SiblingId = oGdPicturePDF.GetBookMarkNextID(SiblingId)
          Next
          SiblingId = oGdPicturePDF.GetBookMarkPrevID(SiblingId)
          MessageBox.Show("The root's second last child's Id : " + SiblingId.ToString() + vbCrLf + "Title :" + oGdPicturePDF.GetBookMarkTitle(SiblingId))
       Else
          MessageBox.Show("Root bookmark does not have children")
       End If
    Else
       MessageBox.Show("This pdf does not have bookmarks")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)">
      <summary>
 Returns the bookmark ID of the parent bookmarks of a specified bookmark.
 </summary>
      <param name="BookMarkID">A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <returns>
 The  ID of the parent bookmark the specified bookmark (value higher than 0). -1 means an error occurred. You can use the GetStat() method to determine the reason.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
      <example>
        <code description="Retrieve the first second level bookmark of a pdf." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim BookMarkId As Integer = oGdPicturePDF.GetBookMarkRootID()
    If BookMarkId &lt;&gt; 0 Then
       If oGdPicturePDF.GetBookMarkChildCount(BookMarkId) &gt; 0 Then
          Dim FirstChildId As Integer = oGdPicturePDF.GetBookMarkFirstChildID(BookMarkId)
          MessageBox.Show("Root Id :" + BookMarkId.ToString() + vbCrLf + "First child Id of the root bookmark :" + FirstChildId.ToString() + vbCrLf + " it's Parent's ID :" + oGdPicturePDF.GetBookMarkParentID(FirstChildId).ToString())
       Else
          MessageBox.Show("Root bookmark do nott have childs")
       End If
    Else
       MessageBox.Show("This pdf does not have Boormarks")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetBookMarkTitle(System.Int32)">
      <summary>
 Returns the title of a specified bookmark.
 </summary>
      <param name="BookMarkID">A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <returns>
 The  title of the bookmark. An empty string probably means an error occurred. You can use the GetStat() method to determine the reason.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Parsing all outlines of a document." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("bookmark.pdf", False)
 parseOutlines(oGdPicturePDF, oGdPicturePDF.GetBookMarkRootID(), 0)
 End Sub
 Private Sub parseOutlines(ByVal oGdPicturePDF As GdPicturePDF, ByVal bookmarkID As Integer, ByVal level As Integer)
 While True
    MessageBox.Show("Title: " + oGdPicturePDF.GetBookMarkTitle(bookmarkID) + ". level: " + level.ToString())
    'Check childs
    If oGdPicturePDF.GetBookMarkChildCount(bookmarkID) &gt; 0 Then
       parseOutlines(oGdPicturePDF, oGdPicturePDF.GetBookMarkFirstChildID(bookmarkID), level + 1)
    End If
    'Check for subsequent outlines
    bookmarkID = oGdPicturePDF.GetBookMarkNextID(bookmarkID)
    If bookmarkID = 0 Then
       Exit While
    End If
 End While
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
      <example>
        <code description="Retrieving the root bookmark's title and displaying it in a message box if it exists." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim BookMarkId As Integer = oGdPicturePDF.GetBookMarkRootID()
    If BookMarkId &lt;&gt; 0 Then
       Dim BookMarkTitle As String = oGdPicturePDF.GetBookMarkTitle(BookMarkId)
       MessageBox.Show("Root bookmark title : " + BookMarkTitle)
    Else
       MessageBox.Show("This pdf does not have bookmarks")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.MoveBookMarkUp(System.Int32)">
      <summary>
 Moves a specified bookmark up in the current level.
 </summary>
      <param name="BookMarkID">A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
      <example>
        <code description="Moving the second bookmark one level up." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim RootBookMarkId As Integer = oGdPicturePDF.GetBookMarkRootID()
    If RootBookMarkId &lt;&gt; 0 Then
       Dim NextBookMarkId As Integer = oGdPicturePDF.GetBookMarkNextID(RootBookMarkId)
       If NextBookMarkId = 0 Then
          MessageBox.Show("This pdf only has a single bookmark at the root")
       Else
          status = oGdPicturePDF.MoveBookMarkUp(NextBookMarkId)
          If status = GdPictureStatus.OK Then
             oGdPicturePDF.SaveToFile("test_MoveBookMarkUp_func.pdf")
             MessageBox.Show("Ok")
          Else
             MessageBox.Show("MoveBookMarkUp failed, status : " + status.ToString())
          End If
       End If
    Else
       MessageBox.Show("This pdf does not have bookmarks")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.MoveBookMarkDown(System.Int32)">
      <summary>
 Moves a specified bookmark down in the current level.
 </summary>
      <param name="BookMarkID">A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
      <example>
        <code description="Moving the root bookmark one level down." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim RootBookMarkId As Integer = oGdPicturePDF.GetBookMarkRootID()
    If RootBookMarkId &lt;&gt; 0 Then
       Dim NextBookMarkId As Integer = oGdPicturePDF.GetBookMarkNextID(RootBookMarkId)
       If NextBookMarkId = 0 Then
          MessageBox.Show("This pdf only has a single bookmark at the root")
       Else
          status = oGdPicturePDF.MoveBookMarkDown(RootBookMarkId)
          If status = GdPictureStatus.OK Then
             oGdPicturePDF.SaveToFile("test_MoveBookMarkDown_func.pdf")
             MessageBox.Show("Ok")
          Else
             MessageBox.Show("MoveBookMarkDown failed, status : " + status.ToString())
          End If
       End If
    Else
       MessageBox.Show("This pdf does not have bookmarks")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.MoveBookMark(System.Int32,System.Int32,System.Boolean)">
      <summary>
 Moves a specified bookmark right before or right after another bookmark.
 </summary>
      <param name="BookMarkID">The bookmark to move. A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <param name="BookMarkDestID">The destination bookmark to move near. A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <param name="Before">Set True to move the bookmark before the destination bookmark, False to move it after.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
      <example>
        <code description="Moving the last top level bookmark just after the root bookmark." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim RootBookMarkId As Integer = oGdPicturePDF.GetBookMarkRootID()
    If RootBookMarkId &lt;&gt; 0 Then
       Dim BookMarkId As Integer = RootBookMarkId
       Dim LastBookMarkId As Integer = 0
       Do While BookMarkId &gt; 0
          BookMarkId = oGdPicturePDF.GetBookMarkNextID(BookMarkId)
          If BookMarkId &gt; 0 Then
             LastBookMarkId = BookMarkId
          End If
       Loop
       If LastBookMarkId = 0 Then
          MessageBox.Show("This pdf only has a single bookmark at the root")
       Else
          status = oGdPicturePDF.MoveBookMark(LastBookMarkId, RootBookMarkId, False)
          If status = GdPictureStatus.OK Then
             oGdPicturePDF.SaveToFile("test_MoveBookMark_func.df")
             MessageBox.Show("Ok")
          Else
             MessageBox.Show("MoveBookMark failed, status : " + status.ToString())
          End If
       End If
    Else
       MessageBox.Show("This pdf does not have bookmarks")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetBookMarkTitle(System.Int32,System.String)">
      <summary>
 Sets the title of a specified bookmark.
 </summary>
      <param name="BookMarkID">A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <param name="Title">The  title of the bookmark.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
      <example>
        <code description="Changing the root bookmark's title." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim RootBookMarkId As Integer = oGdPicturePDF.GetBookMarkRootID()
    If RootBookMarkId &lt;&gt; 0 Then
       status = oGdPicturePDF.SetBookMarkTitle(RootBookMarkId, "GdPicturePDF")
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_SetBookMarkTitle_func.pdf")
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("etBookMarkTitle failed, status : " + status.ToString())
       End If
    Else
       MessageBox.Show("This pdf does not have bookmarks")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
 oGdPicturePDF.Dispose()
 </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetBookMarkTextAttribute(System.Int32)">
      <summary>
 Returns the text attribute of a specified bookmark.
 </summary>
      <param name="BookMarkID">A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <returns>
 The  text attribute of the bookmark returned as Integer value.
 - 1: Italic text
 - 2: Bold text.
 - 3: BoldItalic text.
 - 0: No text attribute or error. You can use the GetStat() method to determine the reason.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
      <example>
        <code description="Retrieve the root bookmark's text attribute." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim BookMarkId As Integer = oGdPicturePDF.GetBookMarkRootID()
    If BookMarkId &lt;&gt; 0 Then
       Dim BookMarkAttribute As Integer = oGdPicturePDF.GetBookMarkTextAttribute(BookMarkId)
       If BookMarkAttribute = 1 Then
          MessageBox.Show("Text attribute : Italic")
       ElseIf BookMarkAttribute = 2 Then
          MessageBox.Show("Text attribute : Bold")
       ElseIf BookMarkAttribute = 3 Then
          MessageBox.Show("Text attribute : Bold + Italic")
       Else
          MessageBox.Show("Text attribute : Normal")
       End If
    Else
       MessageBox.Show("This pdf does not have bookmarks")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetBookMarkTextAttribute(System.Int32,System.Int32)">
      <summary>
 Defines the text attribute of a specified bookmark.
 </summary>
      <param name="BookMarkID">A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <param name="Attribute">The  text attribute of the bookmark.
 - 1: Italic text.
 - 2: Bold text.
 - 3: BoldItalic text.
 - 0: No text attribute.
 </param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Set red bold to all first level bookmarks of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("input.pdf", False)
 Dim bookmarkID As Integer = oGdPicturePDF.GetBookMarkRootID()
 If bookmarkID &gt; 0 Then
    While bookmarkID &gt; 0
       oGdPicturePDF.SetBookMarkTextAttribute(bookmarkID, 2)
       bookmarkID = oGdPicturePDF.GetBookMarkNextID(bookmarkID)
    End While
 Else
    MessageBox.show("no bookmark found")
 End If
 oGdPicturePDF.SaveToFile("output.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetActionType(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkTextAttribute(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetBookMarkColor(System.Int32)">
      <summary>
 Returns the color of a specified bookmark.
 </summary>
      <param name="BookMarkID">A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <returns>
 The  Color of the bookmark.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetBookMarkColor(System.Int32,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Retrieving the root bookmark's color." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim BookMarkId As Integer = oGdPicturePDF.GetBookMarkRootID()
    If BookMarkId &lt;&gt; 0 Then
       Dim BookMarkColor As Color = oGdPicturePDF.GetBookMarkColor(BookMarkId)
       MessageBox.Show("Color : " + BookMarkColor.ToString())
    Else
       MessageBox.Show("This pdf does not have bookmarks")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetBookMarkColor(System.Int32,System.Byte,System.Byte,System.Byte)">
      <summary>
 Defines the color of a specified bookmark. This method uses RGB color space.
 </summary>
      <param name="BookMarkID">A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method.</param>
      <param name="Red">The amount of red color between 0 and 255.</param>
      <param name="Green">The amount of green color between 0 and 255.</param>
      <param name="Blue">The amount of blue color between 0 and 255.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Set red color to all first level bookmarks of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("input.pdf", False)
 Dim bookmarkID As Integer = oGdPicturePDF.GetBookMarkRootID()
 If bookmarkID &gt; 0 Then
    While bookmarkID &gt; 0
       oGdPicturePDF.SetBookMarkColor(bookmarkID, 255, 0, 0)
       bookmarkID = oGdPicturePDF.GetBookMarkNextID(bookmarkID)
    End While
 Else
    MessageBox.show("no bookmark found")
 End If
 oGdPicturePDF.SaveToFile("output.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetActionType(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkColor(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetBookMarkColor(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Defines the color of a specified bookmark. This method uses CMYK color space.
 </summary>
      <param name="Cyan">The amount of Cyan color between 0 and 255.</param>
      <param name="Magenta">The amount of Magenta color between 0 and 255.</param>
      <param name="Yellow">The amount of Yellow color between 0 and 255.</param>
      <param name="Black">The amount of Black (key) color between 0 and 255.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Set cyan  color to all first level bookmarks of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("input.pdf", False)
 Dim bookmarkID As Integer = oGdPicturePDF.GetBookMarkRootID()
 If bookmarkID &gt; 0 Then
    While bookmarkID &gt; 0
       oGdPicturePDF.SetBookMarkColor(bookmarkID, 255, 0, 0, 0)
       bookmarkID = oGdPicturePDF.GetBookMarkNextID(bookmarkID)
    End While
 Else
    MessageBox.show("no bookmark found")
 End If
 oGdPicturePDF.SaveToFile("output.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetActionType(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkColor(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetBookMarkColor(System.Int32,System.Drawing.Color)">
      <summary>
 Defines the color of a specified bookmark.
 </summary>
      <param name="Color">A color object that defines the color to apply..</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Set red color to all first level bookmarks of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("input.pdf", False)
 Dim bookmarkID As Integer = oGdPicturePDF.GetBookMarkRootID()
 If bookmarkID &gt; 0 Then
    While bookmarkID &gt; 0
       oGdPicturePDF.SetBookMarkColor(bookmarkID, Color.Red)
       bookmarkID = oGdPicturePDF.GetBookMarkNextID(bookmarkID)
    End While
 Else
    MessageBox.show("no bookmark found")
 End If
 oGdPicturePDF.SaveToFile("output.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkRootID" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkFirstChildID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkNextID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkPrevID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkParentID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetActionType(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetBookMarkColor(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.NewBookMark(System.Int32,System.String)">
      <summary>
 Appends a new bookmark to the PDF.
 </summary>
      <param name="ParentBookmarkID">A bookmark ID returned by the NewBookMark, GetBookMarkRootID, GetBookMarkFirstChildID, GetBookMarkNextID, GetBookMarkPrevID or GetBookMarkParentID method. Defines the parent bookmark of the bookmark to create. Use 0 to append the new bookmark to the root.</param>
      <param name="Title">The  title of the bookmark.</param>
      <returns>The ID of the new bookmark. 0 means an error occurred.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Creating a 10 pages PDF with bookmark. 10 bookmark targets a specific page, 2 others links external URI." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim actionID, BookMarkID As Integer
 oGdPicturePDF.NewPDF(False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim pagesBookmarkID As Integer = oGdPicturePDF.NewBookMark(0, "Pages Navigation")
 For i As Integer = 1 To 10
    oGdPicturePDF.NewPage(21, 29.7)
    oGdPicturePDF.SetFillColor(Color.Red)
    oGdPicturePDF.SetTextSize(12)
    oGdPicturePDF.DrawText(fontResName, 1, 1, "This is the page " + i.ToString())
    actionID = oGdPicturePDF.NewActionGoTo(PdfDestinationType.DestinationTypeXYZ, i, 0, 0, 0, 0, 1)
    BookMarkID = oGdPicturePDF.NewBookMark(pagesBookmarkID, "Move to the page " + i.ToString())
    oGdPicturePDF.SetBookMarkAction(BookMarkID, actionID)
 Next
 Dim linksBookmark As Integer = oGdPicturePDF.NewBookMark(0, "Links")
 BookMarkID = oGdPicturePDF.NewBookMark(linksBookmark, "Visit GdPicture website!")
 actionID = oGdPicturePDF.NewActionURI("http://www.gdpicture.com", False)
 oGdPicturePDF.SetBookMarkAction(BookMarkID, actionID)
 actionID = oGdPicturePDF.NewActionURI("http://www.guides.gdpicture.com", False)
 BookMarkID = oGdPicturePDF.NewBookMark(linksBookmark, "Read GdPicture.NET documentation online!")
 oGdPicturePDF.SetBookMarkAction(bookMarkID, actionID)
 oGdPicturePDF.SaveToFile("mypdf.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetEncryptionScheme">
      <summary>
 Returns if any, the encryption scheme used to encode the PDF.
 </summary>
      <returns>
 The encryption scheme used to encode the PDF. A member of the PdfEncryption enumeration.
 </returns>
      <remarks>
 Before using this method on an encrypted PDF, make sure it has been decoded using the SetPassword method.
 </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetPassword(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.IsEncrypted" />
      <example>
        <code description="Finding out the rights of the user and the encryption scheme of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test_Crypt.pdf", False) = GdPictureStatus.OK Then
    Dim PassOk As Boolean = False
    If oGdPicturePDF.IsEncrypted() Then
       If oGdPicturePDF.SetPassword("")  = GdPictureStatus.OK Then
          PassOk = True
       ElseIf oGdPicturePDF.SetPassword("toto") Then
          PassOk = True
       End If
       If PassOk = True Then
          Dim EncryptionSheme As PdfEncryption = oGdPicturePDF.GetEncryptionScheme()
          Dim RightList As String = ""
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanAddNotes) Then
             RightList = RightList + PdfRight.PdfRightCanAddNotes.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanAssemble) Then
             RightList = RightList + PdfRight.PdfRightCanAssemble.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanCopy) Then
             RightList = RightList + PdfRight.PdfRightCanCopy.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanCopyAccess) Then
             RightList = RightList + PdfRight.PdfRightCanCopyAccess.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanFillFields) Then
             RightList = RightList + PdfRight.PdfRightCanFillFields.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanModify) Then
             RightList = RightList + PdfRight.PdfRightCanModify.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanPrint) Then
             RightList = RightList + PdfRight.PdfRightCanPrint.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanPrintFull) Then
             RightList = RightList + PdfRight.PdfRightCanPrintFull.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanView) Then
             RightList = RightList + PdfRight.PdfRightCanView.ToString() + vbCrLf
          End If
          MessageBox.Show("Encryption sheme : " + EncryptionSheme.ToString() + vbCrLf + vbCrLf +
          "User Rights : " + vbCrLf +
          RightList)
       Else
          MessageBox.Show("Wrong Password")
       End If
    Else
       MessageBox.Show("This PDF is not Encrypted")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.IsEncrypted">
      <summary>
 Returns if the PDF is encrypted or not. The SetPassword can be used to decode encrypted
 documents.
 </summary>
      <returns>
 True if the PDF is encrypted, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetEncryptionScheme" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetPassword(System.String)" />
      <example>
        <code description="Finding out the rights of the user and the encryption scheme of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test_Crypt.pdf", False) = GdPictureStatus.OK Then
    Dim PassOk As Boolean = False
    If oGdPicturePDF.IsEncrypted() Then
       If oGdPicturePDF.SetPassword("")  = GdPictureStatus.OK Then
          PassOk = True
       ElseIf oGdPicturePDF.SetPassword("toto") Then
          PassOk = True
       End If
       If PassOk = True Then
          Dim EncryptionSheme As PdfEncryption = oGdPicturePDF.GetEncryptionScheme()
          Dim RightList As String = ""
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanAddNotes) Then
             RightList = RightList + PdfRight.PdfRightCanAddNotes.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanAssemble) Then
             RightList = RightList + PdfRight.PdfRightCanAssemble.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanCopy) Then
             RightList = RightList + PdfRight.PdfRightCanCopy.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanCopyAccess) Then
             RightList = RightList + PdfRight.PdfRightCanCopyAccess.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanFillFields) Then
             RightList = RightList + PdfRight.PdfRightCanFillFields.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanModify) Then
             RightList = RightList + PdfRight.PdfRightCanModify.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanPrint) Then
             RightList = RightList + PdfRight.PdfRightCanPrint.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanPrintFull) Then
             RightList = RightList + PdfRight.PdfRightCanPrintFull.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanView) Then
             RightList = RightList + PdfRight.PdfRightCanView.ToString() + vbCrLf
          End If
          MessageBox.Show("Encryption sheme : " + EncryptionSheme.ToString() + vbCrLf + vbCrLf +
          "User Rights : " + vbCrLf +
          RightList)
       Else
          MessageBox.Show("Wrong Password")
       End If
    Else
       MessageBox.Show("This PDF is not Encrypted")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetPassword(System.String)">
      <summary>
 Decodes the encrypted PDF specifying a password.
 </summary>
      <param name="PassWord">The password to be used to decode the document.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.IsEncrypted" />
      <example>
        <code description="Finding out the rights of the user and the encryption scheme of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test_Crypt.pdf", False) = GdPictureStatus.OK Then
    Dim PassOk As Boolean = False
    If oGdPicturePDF.IsEncrypted() Then
       If oGdPicturePDF.SetPassword("")  = GdPictureStatus.OK Then
          PassOk = True
       ElseIf oGdPicturePDF.SetPassword("toto") Then
          PassOk = True
       End If
       If PassOk = True Then
          Dim EncryptionSheme As PdfEncryption = oGdPicturePDF.GetEncryptionScheme()
          Dim RightList As String = ""
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanAddNotes) Then
             RightList = RightList + PdfRight.PdfRightCanAddNotes.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanAssemble) Then
             RightList = RightList + PdfRight.PdfRightCanAssemble.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanCopy) Then
             RightList = RightList + PdfRight.PdfRightCanCopy.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanCopyAccess) Then
             RightList = RightList + PdfRight.PdfRightCanCopyAccess.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanFillFields) Then
             RightList = RightList + PdfRight.PdfRightCanFillFields.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanModify) Then
             RightList = RightList + PdfRight.PdfRightCanModify.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanPrint) Then
             RightList = RightList + PdfRight.PdfRightCanPrint.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanPrintFull) Then
             RightList = RightList + PdfRight.PdfRightCanPrintFull.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanView) Then
             RightList = RightList + PdfRight.PdfRightCanView.ToString() + vbCrLf
          End If
          MessageBox.Show("Encryption sheme : " + EncryptionSheme.ToString() + vbCrLf + vbCrLf +
          "User Rights : " + vbCrLf +
          RightList)
       Else
          MessageBox.Show("Wrong Password")
       End If
    Else
       MessageBox.Show("This PDF is not Encrypted")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetCertificate(System.String,System.String)">
      <summary>
 set the certificate from an external P12 or Pfx file to use for decryption.
 </summary>
      <param name="CertPath">The path of the pkcs12 file.</param>
      <param name="PFXPassword">The password to open the PKCS12.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetCertificate(System.IO.Stream,System.String)">
      <summary>
 Set the certificate from a pkcs12 stream  to use for decryption.
 </summary>
      <param name="Certificate">A stream containing the PKCS12.</param>
      <param name="PFXPassword">The password to open the PKCS12.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetRight(GdPicture12.PdfRight)">
      <summary>
 Returns information about usage right of the current PDF.
 </summary>
      <param name="Right">A member of the Right enumeration.</param>
      <returns>
 True if the specified right is enabled, else False.
 </returns>
      <remarks>
 Before using this method on an encrypted PDF, make sure it has been decoded using the SetPassword
 method.
 </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.IsEncrypted" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetPassword(System.String)" />
      <example>
        <code description="Finding out the rights of the user and the encryption scheme of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test_Crypt.pdf", False) = GdPictureStatus.OK Then
    Dim PassOk As Boolean = False
    If oGdPicturePDF.IsEncrypted() Then
       If oGdPicturePDF.SetPassword("")  = GdPictureStatus.OK Then
          PassOk = True
       ElseIf oGdPicturePDF.SetPassword("toto") Then
          PassOk = True
       End If
       If PassOk = True Then
          Dim EncryptionSheme As PdfEncryption = oGdPicturePDF.GetEncryptionScheme()
          Dim RightList As String = ""
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanAddNotes) Then
             RightList = RightList + PdfRight.PdfRightCanAddNotes.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanAssemble) Then
             RightList = RightList + PdfRight.PdfRightCanAssemble.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanCopy) Then
             RightList = RightList + PdfRight.PdfRightCanCopy.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanCopyAccess) Then
             RightList = RightList + PdfRight.PdfRightCanCopyAccess.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanFillFields) Then
             RightList = RightList + PdfRight.PdfRightCanFillFields.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanModify) Then
             RightList = RightList + PdfRight.PdfRightCanModify.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanPrint) Then
             RightList = RightList + PdfRight.PdfRightCanPrint.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanPrintFull) Then
             RightList = RightList + PdfRight.PdfRightCanPrintFull.ToString() + vbCrLf
          End If
          If oGdPicturePDF.GetRight(PdfRight.PdfRightCanView) Then
             RightList = RightList + PdfRight.PdfRightCanView.ToString() + vbCrLf
          End If
          MessageBox.Show("Encryption sheme : " + EncryptionSheme.ToString() + vbCrLf + vbCrLf +
          "User Rights : " + vbCrLf +
          RightList)
       Else
          MessageBox.Show("Wrong Password")
       End If
    Else
       MessageBox.Show("This PDF is not Encrypted")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetEncryptionMode">
      <summary>
 Returns the encryption mode of the current PDF.
 </summary>
      <returns>A member of the PdfEncryptionMode enumeration.</returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPDFAConformance">
      <summary>
 Returns the PDF/A conformance of the PDF.
 </summary>
      <returns>
 0: non PDF/A, 1: PDF/A-A, 2: PDF/A-B, 9: Unknown.
 </returns>
      <example>
        <code description="Retrieving the conformance to the PDF/A standard of the PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PdfConformance As Integer = oGdPicturePDF.GetPDFAConformance()
    Select Case PdfConformance
    Case 0
    MessageBox.Show("the PDF does not conform to PDF/A standard")
    Case 1
    MessageBox.Show("the PDF conforms to PDF/A-A standard")
    Case 2
    MessageBox.Show("the PDF conforms to PDF/A-B standard")
    Case Else
    MessageBox.Show("The GetPDFAConformance method cannot determine PDF conformance")
    End Select
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.IsLinearized">
      <summary>
 Returns information about linearization of the PDF.
 </summary>
      <returns>
 True if the PDF is linearized, else False.
 </returns>
      <example>
        <code description="Determining whether a pdf is linearized or not." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.IsLinearized() Then
       MessageBox.Show("The pdf is linearized")
    Else
       MessageBox.Show("The pdf is not linearized")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetAuthor">
      <summary>
 Returns the author of the PDF.
 </summary>
      <returns>
 The PDF author.
 </returns>
      <example>
        <code description="Retrieving the PDF's author." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    MessageBox.Show("PDF's author :" + oGdPicturePDF.GetAuthor())
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetTitle">
      <summary>
 Returns the title of the PDF.
 </summary>
      <returns>
 The PDF title.
 </returns>
      <example>
        <code description="Retrieving the PDF's title." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    MessageBox.Show("PDF's title :" + oGdPicturePDF.GetTitle())
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetSubject">
      <summary>
 Returns the subject of the PDF.
 </summary>
      <returns>
 The PDF subject.
 </returns>
      <example>
        <code description="Retrieving the PDF's subject." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    MessageBox.Show("PDF's subject :" + oGdPicturePDF.GetSubject())
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetKeywords">
      <summary>
 Returns the keywords of the PDF.
 </summary>
      <returns>
 The PDF keywords.
 </returns>
      <example>
        <code description="Retrieving the PDF's keywords." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    MessageBox.Show("PDF's keywords :" + oGdPicturePDF.GetKeywords())
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetCreator">
      <summary>
 Returns the creator of the PDF.
 </summary>
      <returns>
 The PDF creator.
 </returns>
      <example>
        <code description="Retrieve the PDF's creator." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    MessageBox.Show("PDF's creator :" + oGdPicturePDF.GetCreator())
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetProducer">
      <summary>
 Returns the producer of the PDF.
 </summary>
      <returns>
 The PDF producer.
 </returns>
      <example>
        <code description="Retrieve the PDF's producer." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    MessageBox.Show("PDF's producer :" + oGdPicturePDF.GetProducer())
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetCreationDate">
      <summary>
 Returns the date of creation of the PDF.
 </summary>
      <returns>
 The PDF date of creation.
 </returns>
      <example>
        <code description="Retrieving the PDF's creation date." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    MessageBox.Show("PDF's creation date :" + oGdPicturePDF.GetCreationDate())
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetModificationDate">
      <summary>
 Returns the modification date of the PDF.
 </summary>
      <returns>
 The PDF modification date.
 </returns>
      <example>
        <code description="Retrieving the PDF's modification date." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim ModificationDate As String = oGdPicturePDF.GetModificationDate()
    If ModificationDate &lt;&gt; "" Then
       MessageBox.Show("PDF's modification date :" + oGdPicturePDF.GetModificationDate())
    Else
       MessageBox.Show("This PDF has not been modified")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetCustomPDFInformation(System.String,System.String)">
      <summary>
 Sets the value of a custom information key of the PDF.
 </summary>
      <param name="Key">The key for the custom information.</param>
      <param name="Value">The value for the custom information.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Setting the PDF's metadata." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SetCustomPDFInformation("MyKey", "MyValue")
    oGdPicturePDF.SaveToFile("test_SetMetaData_func.pdf", False)
    If status = GdPictureStatus.OK Then
       MessageBox.Show("Ok")
    Else
       MessageBox.Show("Error setting custom information. Status: " + oGdPicturePDF.GetStat.ToString))
    End If
 Else
    MessageBox.Show("The file cannot be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetCustomPDFInformation(System.String)">
      <summary>
 Returns a string containing the custom information value for a certain key in the PDF.
 </summary>
      <param name="Key">The key of the desired custom information.</param>
      <returns>
 If success, the string containing the keys.
 If error, or unencrypted file, an empty string.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <example>
        <code description="Retrieving the PDF's custom informations value." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim customKeys As String = oGdPicturePDF.GetCustomPDFInformationKeys(vbCrLf)
    If customKeys = "" Then
       MessageBox.Show("This Pdf does not contains custom keys")
       Exit Sub
    End If
    Dim outPut As String
    Dim customKeyTable As String() = Split(customKeys, vbCrLf)
    For x As Integer = 0 To customKeyTable.Length -1
       outPut = outPut + customKeyTable(x) + vbTab + oGdPicturePDF.GetCustomPDFInformation(customKeyTable(x)) + vbCrLf
    Next
    MessageBox.Show(outPut)
 Else
    MessageBox.Show("The file cannot be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetCustomPDFInformationKeys(System.String)">
      <summary>
 Returns a string containing custom information keys of the PDF.
 </summary>
      <param name="Separator">The string used to separate values in the returned string.</param>
      <returns>
 If success, the string containing the keys.
 If error, or unencrypted file, an empty string.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <example>
        <code description="Retrieving the PDF's custom informations value." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim customKeys As String = oGdPicturePDF.GetCustomPDFInformationKeys(vbCrLf)
    If customKeys = "" Then
       MessageBox.Show("This Pdf does not contain custom keys")
       Exit Sub
    End If
    Dim outPut As String
    Dim customKeyTable As String() = Split(customKeys, vbCrLf)
    For x As Integer = 0 To customKeyTable.Length -1
       outPut = outPut + customKeyTable(x) + vbTab + oGdPicturePDF.GetCustomPDFInformation(customKeyTable(x)) + vbCrLf
    Next
    MessageBox.Show(outPut)
 Else
    MessageBox.Show("The file cannot be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetVersion">
      <summary>
 Returns the version of the PDF.
 </summary>
      <returns>
 The PDF version.
 </returns>
      <example>
        <code description="Retrieving the PDF's version." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    MessageBox.Show("PDF's version :" + oGdPicturePDF.GetVersion())
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.IncreaseVersion(System.Int32)">
      <summary>
 Increases the version of the current PDF.
 </summary>
      <param name="Version">The new version number. IE: 5 for PDF 1.5, 6 for PDF 1.6...</param>
      <remarks>This method can be useful to convert input PDF/A 1.4 to PDF 1.5 in order to decrease the resulting file size.</remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Setting the PDF's version to 1.6." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PdfVersion As String = oGdPicturePDF.GetVersion()
    If PdfVersion &lt; "1.6" Then
       status = oGdPicturePDF.IncreaseVersion(6)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_IncreaseVersion_func.pdf", False)
          MessageBox.Show("Ok")
       End If
    Else
       MessageBox.Show("This Pdf is already at version 1.6")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetMetadata">
      <summary>
 Returns the Metadata of the PDF.
 </summary>
      <returns>
 The PDF Metadata.  If no metadata is found and empty string is returned.
 </returns>
      <example>
        <code description="Retrieving the PDF's metadata." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    MessageBox.Show("PDF's meta data :" + oGdPicturePDF.GetMetadata())
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetTitle(System.String)">
      <summary>
 Sets the Title of the PDF.
 </summary>
      <param name="Title">The Title.</param>
      <example>
        <code description="Setting the title of the PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetTitle("Setting Pdf Title
    oGdPicturePDF.SaveToFile("test_SetTitle_func.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetAuthor(System.String)">
      <summary>
 Sets the Author of the PDF.
 </summary>
      <param name="Author">The Author.</param>
      <example>
        <code description="Setting the author of the PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetAuthor("Victor Hugo")
    oGdPicturePDF.SaveToFile("test_SetAuthor_func.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetProducer(System.String)">
      <summary>
 Sets the producer of the PDF.
 </summary>
      <param name="Producer">The Producer.</param>
      <example>
        <code description="Setting the producer of the PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetProducer("GdPicture.Net")
    oGdPicturePDF.SaveToFile("test_SetProducer_func.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetCreator(System.String)">
      <summary>
 Sets the creator of the PDF.
 </summary>
      <param name="Creator">The Creator.</param>
      <example>
        <code description="Setting the creator of the PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetCreator("GdPicture")
    oGdPicturePDF.SaveToFile("test_SetCreator_func.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetSubject(System.String)">
      <summary>
 Setting the subject of the PDF.
 </summary>
      <param name="Subject">The Subject.</param>
      <example>
        <code description="Setting the subject of the PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetSubject("Test GdPicture working on PDFs")
    oGdPicturePDF.SaveToFile("test_SetSubject_func.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetKeywords(System.String)">
      <summary>
 Sets the keywords of the PDF.
 </summary>
      <param name="Keywords">The Keywords.</param>
      <example>
        <code description="Setting the keywords of the PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetKeywords("For Whom the Bell Tolls,Indian Camp,The Sun Also Rises,A Farewell to Arms,The Old Man and the Sea")
    oGdPicturePDF.SaveToFile("test_SetKeywords_func.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetMetadata(System.String)">
      <summary>
 Sets the metadata of the PDF.
 </summary>
      <param name="XMP">The metadata.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Setting the PDF's metadata." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMetadata("&lt;?xpacket begin='' id='W5M0MpCehiHzreSzNTczkc9d' bytes='1513'?&gt;" + vbCrLf +
    "&lt;rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'&gt;" + vbCrLf +
    " &lt;rdf:Description about='' xmlns='http://ns.adobe.com/pdf/1.3/' xmlns:pdf='http://ns.adobe.com/pdf/1.3/'&gt;" + vbCrLf +
    "  &lt;pdf:Producer&gt;GdPicure.Net.Pdf&lt;/pdf:Producer&gt;" + vbCrLf +
    "  &lt;pdf:Author&gt;John&lt;/pdf:Author&gt;" + vbCrLf +
    "  &lt;pdf:Creator&gt;GdPicture&lt;/pdf:Creator&gt;" + vbCrLf +
    "  &lt;pdf:ModDate&gt;D:20130205172501Z+0100&lt;/pdf:ModDate&gt;" + vbCrLf +
    "  &lt;pdf:Title&gt;Hemingway&lt;/pdf:Title&gt;" + vbCrLf +
    "  &lt;pdf:CreationDate&gt;D:20130205172501+0100&lt;/pdf:CreationDate&gt;" + vbCrLf +
    "  &lt;pdf:Subject&gt;Hemingway's books&lt;/pdf:Subject&gt;" + vbCrLf +
    "  &lt;pdf:Keywords&gt;For Whom the Bell Tolls,Indian Camp,The Sun Also Rises,A Farewell to Arms,The Old Man and the Sea&lt;/pdf:Keywords&gt;" + vbCrLf +
    " &lt;/rdf:Description&gt;" + vbCrLf +
    " &lt;rdf:Description about='' xmlns='http://ns.adobe.com/xap/1.0/' xmlns:xap='http://ns.adobe.com/xap/1.0/'&gt;" + vbCrLf +
    "  &lt;xap:Author&gt;John&lt;/xap:Author&gt;" + vbCrLf +
    "  &lt;xap:ModifyDate&gt;D:20130205172501Z+0100&lt;/xap:ModifyDate&gt;" + vbCrLf +
    "  &lt;xap:Title&gt;" + vbCrLf +
    "   &lt;rdf:Alt&gt;" + vbCrLf +
    "  &lt;rdf:li xml:lang='x-default'&gt;Hemingway&lt;/rdf:li&gt;" + vbCrLf +
    "   &lt;/rdf:Alt&gt;" + vbCrLf +
    "  &lt;/xap:Title&gt;" + vbCrLf +
    "  &lt;xap:CreateDate&gt;D:20130205172501Z+0100&lt;/xap:CreateDate&gt;" + vbCrLf +
    "  &lt;xap:Description&gt;" + vbCrLf +
    "   &lt;rdf:Alt&gt;" + vbCrLf +
    "  &lt;rdf:li xml:lang='x-default'&gt;&lt;/rdf:li&gt;" + vbCrLf +
    "   &lt;/rdf:Alt&gt;" + vbCrLf +
    "  &lt;/xap:Description&gt;" + vbCrLf +
    "  &lt;xap:MetadataDate&gt;D:20130205172501Z+0100&lt;/xap:MetadataDate&gt;" + vbCrLf +
    " &lt;/rdf:Description&gt;" + vbCrLf +
    " &lt;rdf:Description about='' xmlns='http://purl.org/dc/elements/1.1/' xmlns:dc='http://purl.org/dc/elements/1.1/'&gt;" + vbCrLf +
    "  &lt;dc:creator&gt;GdPicture&lt;/dc:creator&gt;" + vbCrLf +
    "  &lt;dc:title&gt;Hemingway&lt;/dc:title&gt;" + vbCrLf +
    "  &lt;dc:description&gt;&lt;/dc:description&gt;" + vbCrLf +
    " &lt;/rdf:Description&gt;" + vbCrLf +
    "&lt;/rdf:RDF&gt;" + vbCrLf +
    "&lt;?xpacket end='r'?&gt;")
    oGdPicturePDF.SaveToFile("test_SetMetaData_func.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetViewerPreference(GdPicture12.PdfViewerPreference,System.Boolean)">
      <summary>
 Specifies an option, controlling the way the document is to be presented on the screen or in print in Adobe viewers.
 </summary>
      <param name="Preference">A member of the PdfViewerPreference enumeration.</param>
      <param name="Enable">True to enable the option else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Setting viewing preferences." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SetViewerPreference(PdfViewerPreference.PdfViewerPreferenceFitWindow, True)
    If status = GdPictureStatus.OK Then
       status = oGdPicturePDF.SetViewerPreference(PdfViewerPreference.PdfViewerPreferenceHideWindowUI, True)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_SetViewerPreference_func.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("SetViewerPreference failed. status : " + status.ToString())
       End If
    Else
       MessageBox.Show("SetViewerPreference failed. status : " + status.ToString())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetViewerPreference(GdPicture12.PdfViewerPreference)">
      <summary>
 Gets information about an option, controlling the way the document is to be presented on the screen or in print in Adobe viewers.
 </summary>
      <param name="Preference">A member of the PdfViewerPreference enumeration.</param>
      <returns>
 True if the option is enabled else false.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Displaying viewer preferences." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PreferenceFound As Boolean
    If oGdPicturePDF.GetViewerPreference(PdfViewerPreference.PdfViewerPreferenceCenterWindow) = True Then
       MessageBox.Show("The position the document's window is in the center of the screen.")
       PreferenceFound = True
    End If
    If oGdPicturePDF.GetViewerPreference(PdfViewerPreference.PdfViewerPreferenceDisplayDocTitle) = True Then
       MessageBox.Show("The window's title bar should display the document title.")
       PreferenceFound = True
    End If
    If oGdPicturePDF.GetViewerPreference(PdfViewerPreference.PdfViewerPreferenceFitWindow) = True Then
       MessageBox.Show("The document's window will be resized to fit the size of the first displayed page.")
       PreferenceFound = True
    End If
    If oGdPicturePDF.GetViewerPreference(PdfViewerPreference.PdfViewerPreferenceHideMenubar) = True Then
       MessageBox.Show("The viewer application's menu bar will be hidden when the document is active.")
       PreferenceFound = True
    End If
    If oGdPicturePDF.GetViewerPreference(PdfViewerPreference.PdfViewerPreferenceHideToolbar) = True Then
       MessageBox.Show("The viewer application's tool bars will be hidden when the document is active.")
       PreferenceFound = True
    End If
    If oGdPicturePDF.GetViewerPreference(PdfViewerPreference.PdfViewerPreferenceHideWindowUI) = True Then
       MessageBox.Show("User interface elements in the document's window (such as scroll bars and navigation controls) will be hidden, leaving only the document's contents displayed")
       PreferenceFound = True
    End If
    If PreferenceFound = False Then
       MessageBox.Show("No viewer preferences")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetViewerPageMode(GdPicture12.PdfViewerPageMode)">
      <summary>
 Sets the document's page mode, specifying how the document should be displayed when opened in Adobe viewers.
 </summary>
      <param name="PageMode">A member of the PdfViewerPageMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Setting the viewer page mode to full screen." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SetViewerPageMode(PdfViewerPageMode.PdfViewerPageModeFullScreen)
    If status = GdPictureStatus.OK Then
       oGdPicturePDF.SaveToFile("test_SetViewerPageMode_func.pdf", False)
       MessageBox.Show("Ok")
    Else
       MessageBox.Show("SetViewerPageMode failed. status : " + status.ToString())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetViewerPageMode">
      <summary>
 Gets the document's page mode, specifying how the document should be displayed when opened in Adobe viewers.
 </summary>
      <returns>
 A member of the PdfViewerPageMode enumeration.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Showing how the document should be displayed when opened." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PdfViewerPageMode As PdfViewerPageMode = oGdPicturePDF.GetViewerPageMode()
    Select Case PdfViewerPageMode
    Case PdfViewerPageMode.PdfViewerPageModeFullScreen
    MessageBox.Show("Full-screen mode, with no menu bar, window controls, or any other window visible")
    Case PdfViewerPageMode.PdfViewerPageModeUseAttachments
    MessageBox.Show("(PDF 1.6) Attachments panel visible")
    Case PdfViewerPageMode.PdfViewerPageModeUseNone
    MessageBox.Show("Neither document outline nor thumbnail images are visible")
    Case PdfViewerPageMode.PdfViewerPageModeUseOC
    MessageBox.Show("(PDF 1.5) Optional content group panel is visible")
    Case PdfViewerPageMode.PdfViewerPageModeUseOutlines
    MessageBox.Show("Document outline is visible")
    Case PdfViewerPageMode.PdfViewerPageModeUseThumbs
    MessageBox.Show("Thumbnail images is visible")
    Case Else
    MessageBox.Show("GetViewerPageMode_func method has failed")
    End Select
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetViewerNonFullScreenPageMode(GdPicture12.PdfViewerNonFullScreenPageMode)">
      <summary>
 Specifies the document's page mode, specifying how to display the document on exiting full-screen mode in Adobe viewers.
 This option is meaningful only if the value returned by the GetViewerPageMode() method is PdfViewerPageModeFullScreen. It is ignored otherwise.
 </summary>
      <param name="NonFullScreenPageMode">A member of the PdfViewerNonFullScreenPageMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Showing thumbs when the screen page mode is not set to full." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SetViewerPageMode(PdfViewerPageMode.PdfViewerPageModeFullScreen)
    If status = GdPictureStatus.OK Then
       status = oGdPicturePDF.SetViewerNonFullScreenPageMode(PdfViewerNonFullScreenPageMode.PdfViewerNonFullScreenPageModeUseThumbs)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_SetViewerNonFullScreenPageMode_func.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("SetViewerNonFullScreenPageMode failed. status : " + status.ToString())
       End If
    Else
       MessageBox.Show("SetViewerPageMode failed. status : " + status.ToString())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetViewerNonFullScreenPageMode">
      <summary>
 Gets the document's page mode, specifying how to display the document on exiting full-screen mode in Adobe viewers.
 </summary>
      <returns>
 A member of the PdfViewerNonFullScreenPageMode enumeration.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving the document's page mode." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PdfViewerNonFullScreenPageMode As PdfViewerNonFullScreenPageMode = oGdPicturePDF.GetViewerNonFullScreenPageMode()
    Select Case PdfViewerNonFullScreenPageMode
    Case PdfViewerNonFullScreenPageMode.PdfViewerNonFullScreenPageModeUseNone
    MessageBox.Show("Neither document outline nor thumbnail images are visible")
    Case PdfViewerNonFullScreenPageMode.PdfViewerNonFullScreenPageModeUseOC
    MessageBox.Show("Optional content group panel is visible")
    Case PdfViewerNonFullScreenPageMode.PdfViewerNonFullScreenPageModeUseOutlines
    MessageBox.Show("Document outline is visible")
    Case PdfViewerNonFullScreenPageMode.PdfViewerNonFullScreenPageModeUseThumbs
    MessageBox.Show("Thumbnail images are visible")
    Case Else
    MessageBox.Show("GetViewerNonFullScreenPageMode_func method has failed")
    End Select
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetViewerLayoutMode(GdPicture12.PdfViewerLayoutMode)">
      <summary>
 Specifies the document's layout mode, specifying the page layout to be used when the document is opened in Adobe viewers.
 </summary>
      <param name="LayoutMode">A member of the PdfViewerLayoutMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Setting the viewer layout mode to single page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SetViewerLayoutMode(PdfViewerLayoutMode.PdfViewerLayoutModeSinglePage)
    If status = GdPictureStatus.OK Then
       oGdPicturePDF.SaveToFile("test_SetViewerLayoutMode_func.pdf", False)
       MessageBox.Show("Ok")
    Else
       MessageBox.Show("SetViewerLayoutMode failed. status : " + status.ToString())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetViewerLayoutMode">
      <summary>
 Gets the document's layout mode, specifying the page layout to be used when the document is opened in Adobe viewers.
 </summary>
      <returns>
 A member of the PdfViewerLayoutMode enumeration.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving the PDF\s layout mode." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PdfViewerLayoutMode As PdfViewerLayoutMode = oGdPicturePDF.GetViewerLayoutMode()
    Select Case PdfViewerLayoutMode
    Case PdfViewerLayoutMode.PdfViewerLayoutModeOneColumn
    MessageBox.Show("this PDF displays the pages in one column")
    Case PdfViewerLayoutMode.PdfViewerLayoutModeSinglePage
    MessageBox.Show("this PDF displays one page at a time")
    Case PdfViewerLayoutMode.PdfViewerLayoutModeTwoColumnLeft
    MessageBox.Show("this PDF displays the pages in two columns, with odd-numbered pages on the left")
    Case PdfViewerLayoutMode.PdfViewerLayoutModeTwoColumnRight
    MessageBox.Show("this PDF displays the pages in two columns, with odd-numbered pages on the right")
    Case PdfViewerLayoutMode.PdfViewerLayoutModeTwoPageLeft
    MessageBox.Show("this PDF displays the pages two at a time, with odd-numbered pages on the left")
    Case PdfViewerLayoutMode.PdfViewerLayoutModeTwoColumnRight
    MessageBox.Show("this PDF displays the pages two at a time, with odd-numbered pages on the right")
    Case Else
    MessageBox.Show("GetViewerLayoutMode method has failed")
    End Select
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.EmbedFile(System.String,System.String)">
      <summary>
 Embed a file into the PDF.
 </summary>
      <param name="FilePath">The file of the file to embed.</param>
      <param name="Description">The description of the file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Embed a text file into a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim FileName As String = Dir("*.txt")
    If FileName = "" Then
       MessageBox.Show("No text file on C:\")
    Else
       status = oGdPicturePDF.EmbedFile("" + FileName, "Title for " + FileName, "full description of the file")
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_EmbedFile_func.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("EmbedFile method failed. status : " + status.ToString())
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetEmbeddedFileCount">
      <summary>
 Gets the number of available embedded files into the PDF.
 </summary>
      <returns>
 The number of embedded files.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving the number of embedded files into a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim EmbeddedFileCount As Integer = oGdPicturePDF.GetEmbeddedFileCount()
    If EmbeddedFileCount = 0 Then
       MessageBox.Show("This pdf does not contain embedded files")
    Else
       MessageBox.Show("This pdf contain " + EmbeddedFileCount.ToString() + " embedded files")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetEmbeddedFileSize(System.Int32)">
      <summary>
 Gets the uncompressed size an of a file embedded into the PDF.
 </summary>
      <param name="FileIdx">The file index (0-based). Must be a value between 0 and GetEmbeddedFileCount() -1.</param>
      <returns>
 The embedded file size in bytes.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving the file size of the first file embedded into the PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim EmbeddedFileCount As Integer = oGdPicturePDF.GetEmbeddedFileCount()
    If EmbeddedFileCount = 0 Then
       MessageBox.Show("This pdf does not contain embedded files")
    Else
       MessageBox.Show("The embedded file size : " + oGdPicturePDF.GetEmbeddedFileSize(0).ToString())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetEmbeddedFileName(System.Int32)">
      <summary>
 Gets the name of a file embedded into the PDF.
 </summary>
      <param name="FileIdx">The file index (0-based). Must be a value between 0 and GetEmbeddedFileCount() -1.</param>
      <returns>
 The embedded file name.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving the file name of the first file embedded into the PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim EmbeddedFileCount As Integer = oGdPicturePDF.GetEmbeddedFileCount()
    If EmbeddedFileCount = 0 Then
       MessageBox.Show("This pdf does not contain embedded files")
    Else
       MessageBox.Show("The embedded file filename  : " + oGdPicturePDF.GetEmbeddedFileName(0))
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetEmbeddedFileTitle(System.Int32)">
      <summary>
 Gets the title of an file embedded into the PDF.
 </summary>
      <param name="FileIdx">The file index (0-based). Must be a value between 0 and GetEmbeddedFileCount() -1.</param>
      <returns>
 The embedded file title.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving the title of the first file embedded into the PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim EmbeddedFileCount As Integer = oGdPicturePDF.GetEmbeddedFileCount()
    If EmbeddedFileCount = 0 Then
       MessageBox.Show("This pdf does not contain embedded files")
    Else
       MessageBox.Show("The embedded file size : " + oGdPicturePDF.GetEmbeddedFileTitle(0))
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetEmbeddedFileDescription(System.Int32)">
      <summary>
 Gets the description of a file embedded into the PDF.
 </summary>
      <param name="FileIdx">The file index (0-based). Must be a value between 0 and GetEmbeddedFileCount() -1.</param>
      <returns>
 The embedded file description.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving the description of the first file embedded into the PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim EmbeddedFileCount As Integer = oGdPicturePDF.GetEmbeddedFileCount()
    If EmbeddedFileCount = 0 Then
       MessageBox.Show("This pdf does not contain embedded files")
    Else
       MessageBox.Show("The embedded files description : " + oGdPicturePDF.GetEmbeddedFileDescription(0))
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetEmbeddedFileCreationDate(System.Int32)">
      <summary>
 Gets the creation date of a file embedded into the PDF.
 </summary>
      <param name="FileIdx">The file index (0-based). Must be a value between 0 and GetEmbeddedFileCount() -1.</param>
      <returns>
 The embedded file creation date.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving the creation date of the first file embedded into the PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim EmbeddedFileCount As Integer = oGdPicturePDF.GetEmbeddedFileCount()
    If EmbeddedFileCount = 0 Then
       MessageBox.Show("This pdf does not contain embedded files")
    Else
       MessageBox.Show("The embedded files creation date : " + oGdPicturePDF.GetEmbeddedFileCreationDate(0))
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetEmbeddedFileModificationDate(System.Int32)">
      <summary>
 Gets the modification date of a file embedded into the PDF.
 </summary>
      <param name="FileIdx">The file index (0-based). Must be a value between 0 and GetEmbeddedFileCount() -1.</param>
      <returns>
 The embedded file modification date.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving the modification date of the first file embedded into the PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim EmbeddedFileCount As Integer = oGdPicturePDF.GetEmbeddedFileCount()
    If EmbeddedFileCount = 0 Then
       MessageBox.Show("This pdf does not contain embedded files")
    Else
       MessageBox.Show("The embedded files modification date : " + oGdPicturePDF.GetEmbeddedFileModificationDate(0))
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.ExtractEmbeddedFile(System.Int32,System.Byte[]@)">
      <summary>
 Gets the uncompressed content a file embedded into the PDF.
 </summary>
      <param name="FileIdx">The file index (0-based). Must be a value between 0 and GetEmbeddedFileCount() -1.</param>
      <param name="Data">Output parameter. An array of byte containing the embedded file data.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Extracting the first file embedded into a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim EmbeddedFileCount As Integer = oGdPicturePDF.GetEmbeddedFileCount()
    If EmbeddedFileCount = 0 Then
       MessageBox.Show("This pdf does not contain embedded files")
    Else
       Dim FileName As String = oGdPicturePDF.GetEmbeddedFileName(0)
       Dim FileSize As Integer = oGdPicturePDF.GetEmbeddedFileSize(0)
       Dim FileData(FileSize) As Byte
       status = oGdPicturePDF.ExtractEmbeddedFile(0, FileData)
       If status = GdPictureStatus.OK Then
          Dim oFileStream As System.IO.FileStream
          oFileStream = New System.IO.FileStream("" + FileName + ".dat", System.IO.FileMode.Create)
          oFileStream.Write(FileData, 0, FileData.Length)
          oFileStream.Close()
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("ExtractEmbeddedFile method failed")
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DeleteEmbeddedFile(System.Int32)">
      <summary>
 Removes an embedded file from the PDF.
 </summary>
      <param name="FileIdx">The file index (0-based). Must be a value between 0 and GetEmbeddedFileCount() -1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Deleting first embedded file into a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim EmbeddedFileCount As Integer = oGdPicturePDF.GetEmbeddedFileCount()
    If EmbeddedFileCount = 0 Then
       MessageBox.Show("This pdf does not contain embedded files")
    Else
       status = oGdPicturePDF.DeleteEmbeddedFile(0)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_DeleteEmbeddedFile_func.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("DeleteEmbeddedFile method failed")
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PortFolioCreate(System.String,GdPicture12.PdfPortFolioType)">
      <summary>
 Converts a simple pdf in a Pdf PortFolio.
 </summary>
      <param name="FirstFileNameToShow">A string containing the first embedded file name to show</param>
      <param name="ViewMode">A member of PortFolioType enumeration</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PortFolioCreate(System.Int32,GdPicture12.PdfPortFolioType)">
      <summary>
 Converts a simple pdf in a Pdf PortFolio.
 </summary>
      <param name="FirstFileToShowIdx">An integer containing the first embedded file index to show ,betwwen 0 and GetEmbededFileCount -1.</param>
      <param name="ViewMode">A member of PortFolioType enumeration</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PortFolioDelete">
      <summary>
 Rermove all informations for the Pdf Portfolio. Making it a simple pdf
 </summary>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.IsPortFolio(System.Boolean@,System.Int32@,GdPicture12.PdfPortFolioType@)">
      <summary>
 Check if the pdf is a Portfolio
 </summary>
      <param name="Portfolio">Return true if the pdf is a portfolio or false in the opposite</param>
      <param name="FirstFileIdx">Return the first embedded file index to show</param>
      <param name="ViewMode">Return the first embedded file index to show</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SaveToFile(System.String)">
      <summary>
 Saves the PDF document to a file.
 </summary>
      <param name="FilePath">The path to save the document. If the specified file already exists the
 component will try to overwrite it. You can overwrite the
 currently opened file but only if the document has been loaded in memory (see
 LoadInMemory parameter of the loading methods).</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <example>
        <code description="How to compress and pack an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 oGdPicturePDF.EnableCompression(True)
 oGdPicturePDF.SaveToFile("test_Compressed.pdf", False)
 oGdPicturePDF.SaveToFile("test_Compressed_Pack.pdf", True)
 oGdPicturePDF.EnableCompression(False)
 oGdPicturePDF.SaveToFile("test_UnCompressed.pdf", False)
 oGdPicturePDF.SaveToFile("test_UnCompressed_Pack.pdf", True)
 oGdPicturePDF.SaveToFile("test_Crypt.pdf", PdfEncryption.PdfEncryption40BitRC4, "toto", "titi", True, True, False, True, True, False, False, True)
 oGdPicturePDF.Dispose()
 </code>
        <code description="How to compress and pack an existing PDF." lang="C#">
 GdPicturePDF oGdPicturePDF = new GdPicturePDF();
 oGdPicturePDF.LoadFromFile(@"Input.pdf", false);
 oGdPicturePDF.EnableCompression(true);
 oGdPicturePDF.SaveToFile(@"compressed.pdf", false);
 oGdPicturePDF.SaveToFile(@"compressed_pack.pdf", true);
 oGdPicturePDF.EnableCompression(false);
 oGdPicturePDF.SaveToFile(@"uncompressed.pdf", false);
 oGdPicturePDF.SaveToFile(@"uncompressed_pack.pdf", true);
 oGdPicturePDF.Dispose();
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SaveToFile(System.String,System.Boolean)">
      <summary>
 Saves the PDF document to a file.
 </summary>
      <param name="FilePath">The path to save the document. If the specified file already exists the
 component will try to overwrite it. You can overwrite the
 currently opened file but only if the document has been loaded in memory
 (see LoadInMemory parameter of the loading methods).</param>
      <param name="PackDocument">Specifies if the library have to pack the produced document to reduce its
 size. If true, the saving process can be slower with some documents.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <example>
        <code description="How to compress and pack existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 oGdPicturePDF.EnableCompression(True)
 oGdPicturePDF.SaveToFile("test_Compressed.pdf", False)
 oGdPicturePDF.SaveToFile("test_Compressed_Pack.pdf", True)
 oGdPicturePDF.EnableCompression(False)
 oGdPicturePDF.SaveToFile("test_UnCompressed.pdf", False)
 oGdPicturePDF.SaveToFile("test_UnCompressed_Pack.pdf", True)
 oGdPicturePDF.SaveToFile("test_Crypt.pdf", PdfEncryption.PdfEncryption40BitRC4, "toto", "titi", True, True, False, True, True, False, False, True)
 oGdPicturePDF.CloseDocument()
 </code>
        <code description="How to compress and pack existing PDF." lang="C#">
 GdPicturePDF oGdPicturePDF = new GdPicturePDF();
 oGdPicturePDF.LoadFromFile(@"Input.pdf", false);
 oGdPicturePDF.EnableCompression(true);
 oGdPicturePDF.SaveToFile(@"compressed.pdf", false);
 oGdPicturePDF.SaveToFile(@"compressed_pack.pdf", true);
 oGdPicturePDF.EnableCompression(false);
 oGdPicturePDF.SaveToFile(@"uncompressed.pdf", false);
 oGdPicturePDF.SaveToFile(@"uncompressed_pack.pdf", true);
 oGdPicturePDF.Dispose();
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SaveToFile(System.String,System.Boolean,System.Boolean)">
      <summary>
 Saves the PDF document to a file.
 </summary>
      <param name="FilePath">The path to save the document. If the specified file already exists the
 component will try to overwrite it. You can overwrite the
 currently opened file but only if the document has been loaded in memory
 (see LoadInMemory parameter of the loading methods).</param>
      <param name="PackDocument">Specifies if the library have to pack the produced document to reduce its
 size. If true, the saving process can be slower with some documents.</param>
      <param name="Linearize">Set True to enable Fast Web View mode. Linearization shuffles the contents of the PDF file to place all of the information needed to display the first page near the beginning of the file.
 This allows the user to see the first page while the remainder of the file is still downloading from the web.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <example>
        <code description="How to compress, linearize and pack existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 oGdPicturePDF.EnableCompression(True)
 oGdPicturePDF.SaveToFile("test_Compressed.pdf", False)
 oGdPicturePDF.SaveToFile("test_Compressed_Pack.pdf", True)
 oGdPicturePDF.EnableCompression(False)
 oGdPicturePDF.SaveToFile("test_UnCompressed.pdf", False)
 oGdPicturePDF.SaveToFile("test_UnCompressed_Pack.pdf", True)
 oGdPicturePDF.SaveToFile("test_Crypt.pdf", PdfEncryption.PdfEncryption40BitRC4, "toto", "titi", True, True, False, True, True, False, False, True)
 oGdPicturePDF.Dispose()
 </code>
        <code description="How to compress, linearize and pack existing PDF." lang="C#">
 GdPicturePDF oGdPicturePDF = new GdPicturePDF();
 oGdPicturePDF.LoadFromFile(@"Input.pdf", false);
 oGdPicturePDF.EnableCompression(true);
 oGdPicturePDF.SaveToFile(@"compressed_linearized.pdf", false, true);
 oGdPicturePDF.SaveToFile(@"compressed_pack_linearized.pdf", true, true);
 oGdPicturePDF.EnableCompression(false);
 oGdPicturePDF.SaveToFile(@"uncompressed_linearized.pdf", false, true);
 oGdPicturePDF.SaveToFile(@"uncompressed_pack_linearized.pdf", true, true);
 oGdPicturePDF.Dispose();
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SaveToFile(System.String,GdPicture12.PdfEncryption,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
 Saves the PDF document to a file with encryption. Encryption is not allowed for PDF/A.
 </summary>
      <param name="FilePath">The path to save the document. If the specified file already exists
 the component will try to overwrite it. You can overwrite
 the currently opened file but only if the document has been loaded in
 memory (see LoadInMemory parameter of the loading methods).</param>
      <param name="EncryptionScheme">The encryption scheme to use.</param>
      <param name="UserPass">The user password for the PDF. Can be an empty string.</param>
      <param name="OwnerPass">The owner password for the PDF. Can be an empty string.</param>
      <param name="CanPrint">Allows the user to print the document. Ignored if EncryptionScheme is set to PdfEncryption.PdfEncryptionNone.</param>
      <param name="CanCopy">Allows the user to copy text and graphics from the document. Ignored if EncryptionScheme is set to PdfEncryption.PdfEncryptionNone.</param>
      <param name="CanModify">Allows the user to edit the document. Ignored if EncryptionScheme is set to PdfEncryption.PdfEncryptionNone.</param>
      <param name="CanAddNotes">Allows the user to add annotations. Ignored if EncryptionScheme is set to PdfEncryption.PdfEncryptionNone.</param>
      <param name="CanFillFields">Allows the user to fill in form fields. Only works with 128-bit
 encryption.</param>
      <param name="CanCopyAccess">Enables copying for use with accessibility features. Only works with
 128-bit encryption.</param>
      <param name="CanAssemble">Allows the user to assemble the document. Only works with 128-bit
 encryption.</param>
      <param name="CanPrintFull">Allows high resolution printing of the document. Only works with
 128-bit encryption.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <example>
        <code description="How to compress, linearize , pack and crypt existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 oGdPicturePDF.EnableCompression(True)
 oGdPicturePDF.SaveToFile("test_Compressed.pdf", False)
 oGdPicturePDF.SaveToFile("test_Compressed_Pack.pdf", True)
 oGdPicturePDF.EnableCompression(False)
 oGdPicturePDF.SaveToFile("test_UnCompressed.pdf", False)
 oGdPicturePDF.SaveToFile("test_UnCompressed_Pack.pdf", True)
 oGdPicturePDF.SaveToFile("test_Crypt.pdf", PdfEncryption.PdfEncryption40BitRC4, "toto", "titi", True, True, False, True, True, False, False, True)
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SaveToFileInc(System.String)">
      <summary>
 Saves the PDF document to a file, using incremental updates. Incremental saving (or incremental
 updates) produces fast save and document content persistence but produces bigger files than standard
 saving.
 This method must be used on non-encrypted documents only! We suggest to use this method only if you
 are doing small modification on large documents. IE: rotating a page for swapping some pages.
 From PDF References: The contents of a PDF file can be updated incrementally without rewriting the
 entire file. Changes are appended to the end of the file, leaving its original contents intact. The
 main advantage to updating a file in this way is that small changes to a large document can be saved
 quickly.
 </summary>
      <param name="FilePath">The path to save the document. If the specified file already exists the
 component will try to overwrite it. You can overwrite the
 currently opened file but only if the document has been loaded using the LoadFromFileEx() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Merging two documents using incremental saving. This way helps to reduce memory usage and dramatically increase performance during the merging process." lang="VB.NET">
 Dim oSrcPDF As New GdPicturePDF
 Dim oDstPDF As New GdPicturePDF
 oDstPDF.LoadFromFileEx("doc1.pdf", True)
 oSrcPDF.LoadFromFile("doc2.pdf", False)
 Dim srcPageCount As Integer = oSrcPDF.GetPageCount()
 For i As Integer = 1 To srcPageCount
    oDstPDF.ClonePage(oSrcPDF, i)
 Next
 oDstPDF.SaveToFileInc("doc1.pdf")
 oDstPDF.Dispose()
 oSrcPDF.Dispose()
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFileEx(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SaveToStreamInc(System.IO.Stream)">
      <summary>
 Saves the PDF document to a stream, using incremental updates. Incremental saving (or incremental
 updates) produces fast save and document content persistence but produces bigger files than standard
 saving.
 This method must be used on non-encrypted documents only! We suggest to use this method only if you
 are doing small modification on large documents. IE: rotating a page for swapping some pages.
 From PDF References: The contents of a PDF file can be updated incrementally without rewriting the
 entire file. Changes are appended to the end of the file, leaving its original contents intact. The
 main advantage to updating a file in this way is that small changes to a large document can be saved
 quickly.
 </summary>
      <param name="Stream">The stream to save the document.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <example>
        <code description="Loading a pdf, cloning the first page at the end and then saving it incrementally on a stream." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.DuplicatePage(1)
    Dim oFileStream As System.IO.FileStream
    oFileStream = New System.IO.FileStream("test_SaveIncToStream.pdf", System.IO.FileMode.Create)
    oGdPicturePDF.SaveToStreamInc(oFileStream)
    oFileStream.Close()
    MessageBox.Show("Ok")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SaveToStream(System.IO.Stream)">
      <summary>
 Saves the PDF document to a stream.
 </summary>
      <param name="Stream">The stream to save the document.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <example>
        <code description="Loading a PDF and saving it to a stream with compression." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim oFileStream As System.IO.FileStream
    oFileStream = New System.IO.FileStream("test_SaveToStream.pdf", System.IO.FileMode.Create)
    oGdPicturePDF.EnableCompression(True)
    oGdPicturePDF.SaveToStream(oFileStream)
    oFileStream.Close()
    MessageBox.Show("Ok")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SaveToStream(System.IO.Stream,System.Boolean)">
      <summary>
 Saves the PDF document to a stream.
 </summary>
      <param name="Stream">The stream to save the document.</param>
      <param name="PackDocument">Specifies if the library have to pack the produced document to reduce its size. If true, the saving process can be slower.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <example>
        <code description="Loading a PDF and saving it to a stream with compression and packing." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim oFileStream As System.IO.FileStream
    oFileStream = New System.IO.FileStream("test_SaveToStream.pdf", System.IO.FileMode.Create)
    oGdPicturePDF.EnableCompression(True)
    oGdPicturePDF.SaveToStream(oFileStream, true)
    oFileStream.Close()
    MessageBox.Show("Ok")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SaveToStream(System.IO.Stream,GdPicture12.PdfEncryption,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
 Saves the PDF document to a stream with encryption. Encryption is not allowed for PDF/A.
 </summary>
      <param name="Stream">The stream to save the document.</param>
      <param name="EncryptionScheme">The encryption scheme to use. Warning: AES 256 is not yet supported.</param>
      <param name="UserPass">The user password for the PDF. Can be an empty string.</param>
      <param name="OwnerPass">The owner password for the PDF. Can be an empty string.</param>
      <param name="CanPrint">Allows the user to print the document. Ignored if EncryptionScheme is set to PdfEncryption.PdfEncryptionNone.</param>
      <param name="CanCopy">Allows the user to copy text and graphics from the document. Ignored if EncryptionScheme is set to PdfEncryption.PdfEncryptionNone.</param>
      <param name="CanModify">Allows the user to edit the document. Ignored if EncryptionScheme is set to PdfEncryption.PdfEncryptionNone.</param>
      <param name="CanAddNotes">Allows the user to add annotations. Ignored if EncryptionScheme is set to PdfEncryption.PdfEncryptionNone.</param>
      <param name="CanFillFields">Allows the user to fill in form fields. Only works with 128-bit
 encryption.</param>
      <param name="CanCopyAccess">Enables copying for use with accessibility features. Only works with
 128-bit encryption.</param>
      <param name="CanAssemble">Allows the user to assemble the document. Only works with 128-bit
 encryption.</param>
      <param name="CanPrintFull">Allows high resolution printing of the document. Only works with
 128-bit encryption.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <example>
        <code description="Loading a PDF and saving it to a stream with encryption." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim oFileStream As System.IO.FileStream
 oFileStream = New System.IO.FileStream("test_CryptToStream.pdf", System.IO.FileMode.Create)
 oGdPicturePDF.SaveToStream(oFileStream,
 PdfEncryption.PdfEncryption40BitRC4,
 "toto",
 "titi",
 True, True, False, True, True, False, False, True)
 oFileStream.Close()
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.EnableCompression(System.Boolean)">
      <summary>
 Determines if the PDF engine must compress PDFs during saving operation (compressed by default).
 </summary>
      <param name="Compress">True to compress generated PDF document, else False.</param>
      <example>
        <code description="Compressing a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.EnableCompression(True)
    oGdPicturePDF.SaveToFile("test_EnableCompression.pdf")
    MessageBox.Show("Ok")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DigiSign(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
 Saves and applies digital signature to the PDF.
 This method generate an Adobe.PPKLite signature (adbe.pkcs7.detached).
 Warning: This method automatically closes the PDF document.
 </summary>
      <param name="DstPDFPath">The path to save to PDF.</param>
      <param name="CertPath">The path of the digital certificate to use. Must be PKCS#12 certificate (.PFX, .P12).</param>
      <param name="Password">The certificate password.</param>
      <param name="Reason">The reason of the signature. Can be an empty string.</param>
      <param name="Location">The location where the signature is applied. Can be an empty string.</param>
      <param name="ContactInfo">Information about the signer. Can be an empty string.</param>
      <param name="SignerName">The signer name. If empty, "GdPicture" will be used.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Applying digital signature to an existing document" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 oGdPicturePDF.DigiSign("signed.pdf", "test.pfx", "certificat_password", "The Reason", "The Location", "The Contact Info", "The Signer Name")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DigiSign(System.IO.Stream,System.IO.Stream,System.String,System.String,System.String,System.String,System.String)">
      <summary>
 Saves and applies digital signature to the PDF.
 This method generate an Adobe.PPKLite signature (adbe.pkcs7.detached).
 Warning: This method automatically closes the PDF document.
 </summary>
      <param name="DstPDF">The stream to save the PDF.</param>
      <param name="Certificate">The stream storing the digital certificate to use. Must be PKCS#12 certificate (.PFX, .P12).</param>
      <param name="Password">The certificate password.</param>
      <param name="Reason">The reason of the signature. Can be an empty string.</param>
      <param name="Location">The location where the signature is applied. Can be an empty string.</param>
      <param name="ContactInfo">Information about the signer. Can be an empty string.</param>
      <param name="SignerName">The signer name. If empty, "GdPicture" will be used.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Applying digital signature to an existing document" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 oGdPicturePDF.DigiSign("signed.pdf", "test.pfx", "certificat_password", "The Reason", "The Location", "The Contact Info", "The Signer Name")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DigiSign(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>
 Saves and applies digital signature to the PDF. Linearization can be applied.
 This method generate an Adobe.PPKLite signature (adbe.pkcs7.detached).
 Warning: This method automatically closes the PDF document.
 </summary>
      <param name="DstPDFPath">The path to save to PDF.</param>
      <param name="CertPath">The path of the digital certificate to use. Must be PKCS#12 certificate (.PFX, .P12).</param>
      <param name="Password">The certificate password.</param>
      <param name="Reason">The reason of the signature. Can be an empty string.</param>
      <param name="Location">The location where the signature is applied. Can be an empty string.</param>
      <param name="ContactInfo">Information about the signer. Can be an empty string.</param>
      <param name="SignerName">The signer name. If empty, "GdPicture" will be used.</param>
      <param name="Linearize">Set True to enable Fast Web View mode. Linearization shuffles the contents of the PDF file to place all of the information needed to display the first page near the beginning of the file.
 This allows the user to see the first page while the remainder of the file is still downloading from the web.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Linearize and apply digital signature to an existing document." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 oGdPicturePDF.DigiSign("signed.pdf", "test.pfx", "certificat_password", "The Reason", "The Location", "The Contact Info", "The Signer Name", True)
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DigiSign(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,GdPicture12.PdfSignatureMode)">
      <summary>
 Saves and applies digital signature to the PDF. Linearization can be applied.
 Warning: This method automatically closes the PDF document.
 </summary>
      <param name="DstPDFPath">The path to save to PDF.</param>
      <param name="CertPath">The path of the digital certificate to use. Must be PKCS#12 certificate (.PFX, .P12).</param>
      <param name="Password">The certificate password.</param>
      <param name="Reason">The reason of the signature. Can be an empty string.</param>
      <param name="Location">The location where the signature is applied. Can be an empty string.</param>
      <param name="ContactInfo">Information about the signer. Can be an empty string.</param>
      <param name="SignerName">The signer name. If empty, "GdPicture" will be used.</param>
      <param name="Linearize">Set True to enable Fast Web View mode. Linearization shuffles the contents of the PDF file to place all of the information needed to display the first page near the beginning of the file.
 This allows the user to see the first page while the remainder of the file is still downloading from the web.</param>
      <param name="SignatureMode">A member of the PdfSignatureMode enumeration. The type of signature to apply.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Linearize and apply digital signature to an existing document." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 oGdPicturePDF.DigiSign("signed.pdf", "test.pfx", "certificat_password", "The Reason", "The Location", "The Contact Info", "The Signer Name", True)
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DigiSign(System.IO.Stream,System.IO.Stream,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>
 Saves and applies digital signature to the PDF. Linearization can be applied.
 This method generate an Adobe.PPKLite signature (adbe.pkcs7.detached).
 Warning: This method automatically closes the PDF document.
 </summary>
      <param name="DstPDF">The stream to save the PDF.</param>
      <param name="Certificate">The stream storing the digital certificate to use. Must be PKCS#12 certificate (.PFX, .P12).</param>
      <param name="Password">The certificate password.</param>
      <param name="Reason">The reason of the signature. Can be an empty string.</param>
      <param name="Location">The location where the signature is applied. Can be an empty string.</param>
      <param name="ContactInfo">Information about the signer. Can be an empty string.</param>
      <param name="SignerName">The signer name. If empty, "GdPicture" will be used.</param>
      <param name="Linearize">Set True to enable Fast Web View mode. Linearization shuffles the contents of the PDF file to place all of the information needed to display the first page near the beginning of the file.
 This allows the user to see the first page while the remainder of the file is still downloading from the web.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Linearize and apply digital signature to an existing document." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 oGdPicturePDF.DigiSign("signed.pdf", "test.pfx", "certificat_password", "The Reason", "The Location", "The Contact Info", "The Signer Name", True)
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DigiSign(System.IO.Stream,System.IO.Stream,System.String,System.String,System.String,System.String,System.String,System.Boolean,GdPicture12.PdfSignatureMode)">
      <summary>
 Saves and applies digital signature to the PDF. Linearization can be applied.
 Warning: This method automatically closes the PDF document.
 </summary>
      <param name="DstPDF">The stream to save the PDF.</param>
      <param name="Certificate">The stream storing the digital certificate to use. Must be PKCS#12 certificate (.PFX, .P12).</param>
      <param name="Password">The certificate password.</param>
      <param name="Reason">The reason of the signature. Can be an empty string.</param>
      <param name="Location">The location where the signature is applied. Can be an empty string.</param>
      <param name="ContactInfo">Information about the signer. Can be an empty string.</param>
      <param name="SignerName">The signer name. If empty, "GdPicture" will be used.</param>
      <param name="Linearize">Set True to enable Fast Web View mode. Linearization shuffles the contents of the PDF file to place all of the information needed to display the first page near the beginning of the file.
 This allows the user to see the first page while the remainder of the file is still downloading from the web.</param>
      <param name="SignatureMode">A member of the PdfSignatureMode enumeration. The type of signature to apply.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Linearize and apply digital signature to an existing document." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 oGdPicturePDF.DigiSign("signed.pdf", "test.pfx", "certificat_password", "The Reason", "The Location", "The Contact Info", "The Signer Name", True)
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DigiSignWithStamp(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
      <summary>
 Saves and applies digital signature with a visible stamp to the PDF.
 This method generate an Adobe.PPKLite signature (adbe.pkcs7.detached).
 Warning: This method automatically closes the PDF document.
 </summary>
      <param name="DstPDFPath">The path to save to PDF.</param>
      <param name="CertPath">The path of the digital certificate to use. Must be PKCS#12 certificate (.PFX, .P12).</param>
      <param name="Password">The certificate password.</param>
      <param name="Reason">The reason of the signature. Can be an empty string.</param>
      <param name="Location">The location where the signature is applied. Can be an empty string.</param>
      <param name="ContactInfo">Information about the signer. Can be an empty string.</param>
      <param name="SignerName">The signer name. If empty, "GdPicture" will be used.</param>
      <param name="ImageResName">The image resource name (the stamp) previously returned by the AddImageFromBitmap, AddImageFromGdPictureImage or GetPageImageResName method.</param>
      <param name="DstX">The X destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="DstY">The Y destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="Width">Width of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">Height of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="ValidationMark">Specifies if a validation mark must be rendered over the signature field.</param>
      <remarks>
 Take care: DstX and DstY parameters are the coordinates on the bottom-left corner of the image!
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Applying digital signature to an existing document with a stamp." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("stamp.png")
 Dim imgResName As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
 oGdPicturePDF.DigiSignWithStamp("signed.pdf", "test.pfx", "MyPassword", "The reason", "The location", "The contactInfo", "The signerName", imgResName, 0, 0, 100, 150)
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DigiSignWithStamp(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean,GdPicture12.PdfSignatureMode)">
      <summary>
 Saves and applies digital signature with a visible stamp to the PDF.
 Warning: This method automatically closes the PDF document.
 </summary>
      <param name="DstPDFPath">The path to save to PDF.</param>
      <param name="CertPath">The path of the digital certificate to use. Must be PKCS#12 certificate (.PFX, .P12).</param>
      <param name="Password">The certificate password.</param>
      <param name="Reason">The reason of the signature. Can be an empty string.</param>
      <param name="Location">The location where the signature is applied. Can be an empty string.</param>
      <param name="ContactInfo">Information about the signer. Can be an empty string.</param>
      <param name="SignerName">The signer name. If empty, "GdPicture" will be used.</param>
      <param name="ImageResName">The image resource name (the stamp) previously returned by the AddImageFromBitmap, AddImageFromGdPictureImage or GetPageImageResName method.</param>
      <param name="DstX">The X destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="DstY">The Y destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="Width">Width of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">Height of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="ValidationMark">Specifies if a validation mark must be rendered over the signature field.</param>
      <param name="SignatureMode">A member of the PdfSignatureMode enumeration. The type of signature to apply.</param>
      <remarks>
 Take care: DstX and DstY parameters are the coordinates on the bottom-left corner of the image!
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Applying digital signature to an existing document with a stamp." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("stamp.png")
 Dim imgResName As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
 oGdPicturePDF.DigiSignWithStamp("signed.pdf", "test.pfx", "MyPassword", "The reason", "The location", "The contactInfo", "The signerName", imgResName, 0, 0, 100, 150)
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DigiSignWithStamp(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
      <summary>
 Saves and applies digital signature with a visible stamp to the PDF.
 This method generate an Adobe.PPKLite signature (adbe.pkcs7.detached).
 Warning: This method automatically closes the PDF document.
 </summary>
      <param name="DstPDFPath">The path to save to PDF.</param>
      <param name="CertPath">The path of the digital certificate to use. Must be PKCS#12 certificate (.PFX, .P12).</param>
      <param name="Password">The certificate password.</param>
      <param name="Reason">The reason of the signature. Can be an empty string.</param>
      <param name="Location">The location where the signature is applied. Can be an empty string.</param>
      <param name="ContactInfo">Information about the signer. Can be an empty string.</param>
      <param name="SignerName">The signer name. If empty, "GdPicture" will be used.</param>
      <param name="ImageResName">The image resource name (the stamp) previously returned by the AddImageFromBitmap, AddImageFromGdPictureImage or GetPageImageResName method.</param>
      <param name="DstX">The X destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="DstY">The Y destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="Width">Width of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">Height of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="ValidationMark">Specifies if a validation mark must be rendered over the signature field.</param>
      <param name="ShowInformation">Specifies if the signature information's must be rendered over the signature field.</param>
      <remarks>
 Take care: DstX and DstY parameters are the coordinates on the bottom-left corner of the image!
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Applying digital signature to an existing document with a stamp." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("stamp.png")
 Dim imgResName As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
 oGdPicturePDF.DigiSignWithStamp("signed.pdf", "test.pfx", "MyPassword", "The reason", "The location", "The contactInfo", "The signerName", imgResName, 0, 0, 100, 150)
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DigiSignWithStamp(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,GdPicture12.PdfSignatureMode)">
      <summary>
 Saves and applies digital signature with a visible stamp to the PDF.
 Warning: This method automatically closes the PDF document.
 </summary>
      <param name="DstPDFPath">The path to save to PDF.</param>
      <param name="CertPath">The path of the digital certificate to use. Must be PKCS#12 certificate (.PFX, .P12).</param>
      <param name="Password">The certificate password.</param>
      <param name="Reason">The reason of the signature. Can be an empty string.</param>
      <param name="Location">The location where the signature is applied. Can be an empty string.</param>
      <param name="ContactInfo">Information about the signer. Can be an empty string.</param>
      <param name="SignerName">The signer name. If empty, "GdPicture" will be used.</param>
      <param name="ImageResName">The image resource name (the stamp) previously returned by the AddImageFromBitmap, AddImageFromGdPictureImage or GetPageImageResName method.</param>
      <param name="DstX">The X destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="DstY">The Y destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="Width">Width of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">Height of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="ValidationMark">Specifies if a validation mark must be rendered over the signature field.</param>
      <param name="ShowInformation">Specifies if the signature information's must be rendered over the signature field.</param>
      <param name="SignatureMode">A member of the PdfSignatureMode enumeration. The type of signature to apply.</param>
      <remarks>
 Take care: DstX and DstY parameters are the coordinates on the bottom-left corner of the image!
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Applying digital signature to an existing document with a stamp." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("stamp.png")
 Dim imgResName As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
 oGdPicturePDF.DigiSignWithStamp("signed.pdf", "test.pfx", "MyPassword", "The reason", "The location", "The contactInfo", "The signerName", imgResName, 0, 0, 100, 150)
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DigiSignWithStamp(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.String)">
      <summary>
 Saves and applies digital signature with a visible stamp to the PDF.
 This method generate an Adobe.PPKLite signature (adbe.pkcs7.detached).
 Warning: This method automatically closes the PDF document.
 </summary>
      <param name="DstPDFPath">The path to save to PDF.</param>
      <param name="CertPath">The path of the digital certificate to use. Must be PKCS#12 certificate (.PFX, .P12).</param>
      <param name="Password">The certificate password.</param>
      <param name="Reason">The reason of the signature. Can be an empty string.</param>
      <param name="Location">The location where the signature is applied. Can be an empty string.</param>
      <param name="ContactInfo">Information about the signer. Can be an empty string.</param>
      <param name="SignerName">The signer name. If empty, "GdPicture" will be used.</param>
      <param name="ImageResName">The image resource name (the stamp) previously returned by the AddImageFromBitmap, AddImageFromGdPictureImage or GetPageImageResName method.</param>
      <param name="DstX">The X destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="DstY">The Y destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="Width">Width of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">Height of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="ValidationMark">Specifies if a validation mark must be rendered over the signature field.</param>
      <param name="TextInformation">Defines the text to be rendered over the signature field. Multiline text can be used.</param>
      <remarks>
 Take care: DstX and DstY parameters are the coordinates on the bottom-left corner of the image!
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Applying digital signature to an existing document with a stamp." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("stamp.png")
 Dim imgResName As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
 oGdPicturePDF.DigiSignWithStamp("signed.pdf", "test.pfx", "MyPassword", "The reason", "The location", "The contactInfo", "The signerName", imgResName, 0, 0, 100, 150)
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DigiSignWithStamp(System.IO.Stream,System.IO.Stream,System.String,System.String,System.String,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.String)">
      <summary>
 Saves and applies digital signature with a visible stamp to the PDF.
 This method generate an Adobe.PPKLite signature (adbe.pkcs7.detached).
 Warning: This method automatically closes the PDF document.
 </summary>
      <param name="DstPDF">The stream to save the PDF.</param>
      <param name="Certificate">The stream storing the digital certificate to use. Must be PKCS#12 certificate (.PFX, .P12).</param>
      <param name="Password">The certificate password.</param>
      <param name="Reason">The reason of the signature. Can be an empty string.</param>
      <param name="Location">The location where the signature is applied. Can be an empty string.</param>
      <param name="ContactInfo">Information about the signer. Can be an empty string.</param>
      <param name="SignerName">The signer name. If empty, "GdPicture" will be used.</param>
      <param name="ImageResName">The image resource name (the stamp) previously returned by the AddImageFromBitmap, AddImageFromGdPictureImage or GetPageImageResName method.</param>
      <param name="DstX">The X destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="DstY">The Y destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="Width">Width of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">Height of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="ValidationMark">Specifies if a validation mark must be rendered over the signature field.</param>
      <param name="TextInformation">Defines the text to be rendered over the signature field. Multiline text can be used.</param>
      <remarks>
 Take care: DstX and DstY parameters are the coordinates on the bottom-left corner of the image!
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Applying digital signature to an existing document with a stamp." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("stamp.png")
 Dim imgResName As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
 oGdPicturePDF.DigiSignWithStamp("signed.pdf", "test.pfx", "MyPassword", "The reason", "The location", "The contactInfo", "The signerName", imgResName, 0, 0, 100, 150)
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DigiSignWithStamp(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.String,System.Boolean)">
      <summary>
 Saves and applies digital signature with a visible stamp to the PDF.
 This method generate an Adobe.PPKLite signature (adbe.pkcs7.detached). Linearization can be applied.
 Warning: This method automatically closes the PDF document.
 </summary>
      <param name="DstPDFPath">The path to save to PDF.</param>
      <param name="CertPath">The path of the digital certificate to use. Must be PKCS#12 certificate (.PFX, .P12).</param>
      <param name="Password">The certificate password.</param>
      <param name="Reason">The reason of the signature. Can be an empty string.</param>
      <param name="Location">The location where the signature is applied. Can be an empty string.</param>
      <param name="ContactInfo">Information about the signer. Can be an empty string.</param>
      <param name="SignerName">The signer name. If empty, "GdPicture" will be used.</param>
      <param name="ImageResName">The image resource name (the stamp) previously returned by the AddImageFromBitmap, AddImageFromGdPictureImage or GetPageImageResName method.</param>
      <param name="DstX">The X destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">Width of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">Height of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="ValidationMark">Specifies if a validation mark must be rendered over the signature field.</param>
      <param name="TextInformation">Defines the text to be rendered over the signature field. Multiline text can be used.</param>
      <param name="Linearize">Set True to enable Fast Web View mode. Linearization shuffles the contents of the PDF file to place all of the information needed to display the first page near the beginning of the file.
 This allows the user to see the first page while the remainder of the file is still downloading from the web.</param>
      <remarks>
 Take care: DstX and DstY parameters are the coordinates on the bottom-left corner of the image!
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Linearize and apply digital signature to an existing document with a stamp." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("stamp.png")
 Dim imgResName As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
 oGdPicturePDF.DigiSignWithStamp("signed.pdf", "test.pfx", "MyPassword", "The reason", "The location", "The contactInfo", "The signerName", imgResName, 0, 0, 100, 150, True)
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DigiSignWithStamp(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.String,System.Boolean,GdPicture12.PdfSignatureMode)">
      <summary>
 Saves and applies digital signature with a visible stamp to the PDF.
 Warning: This method automatically closes the PDF document.
 </summary>
      <param name="DstPDFPath">The path to save to PDF.</param>
      <param name="CertPath">The path of the digital certificate to use. Must be PKCS#12 certificate (.PFX, .P12).</param>
      <param name="Password">The certificate password.</param>
      <param name="Reason">The reason of the signature. Can be an empty string.</param>
      <param name="Location">The location where the signature is applied. Can be an empty string.</param>
      <param name="ContactInfo">Information about the signer. Can be an empty string.</param>
      <param name="SignerName">The signer name. If empty, "GdPicture" will be used.</param>
      <param name="ImageResName">The image resource name (the stamp) previously returned by the AddImageFromBitmap, AddImageFromGdPictureImage or GetPageImageResName method.</param>
      <param name="DstX">The X destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="DstY">The Y destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="Width">Width of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">Height of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="ValidationMark">Specifies if a validation mark must be rendered over the signature field.</param>
      <param name="TextInformation">Defines the text to be rendered over the signature field. Multiline text can be used.</param>
      <param name="Linearize">Set True to enable Fast Web View mode. Linearization shuffles the contents of the PDF file to place all of the information needed to display the first page near the beginning of the file.
 This allows the user to see the first page while the remainder of the file is still downloading from the web.</param>
      <param name="SignatureMode">A member of the PdfSignatureMode enumeration. The type of signature to apply.</param>
      <remarks>
 Take care: DstX and DstY parameters are the coordinates on the bottom-left corner of the image!
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Linearize and apply digital signature to an existing document with a stamp." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("stamp.png")
 Dim imgResName As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
 oGdPicturePDF.DigiSignWithStamp("signed.pdf", "test.pfx", "MyPassword", "The reason", "The location", "The contactInfo", "The signerName", imgResName, 0, 0, 100, 150, True)
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DigiSignWithStamp(System.IO.Stream,System.IO.Stream,System.String,System.String,System.String,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.String,System.Boolean)">
      <summary>
 Saves and applies digital signature with a visible stamp to the PDF.
 This method generate an Adobe.PPKLite signature (adbe.pkcs7.detached). Linearization can be applied.
 Warning: This method automatically closes the PDF document.
 </summary>
      <param name="DstPDF">The stream to save the PDF.</param>
      <param name="Certificate">The stream storing the digital certificate to use. Must be PKCS#12 certificate (.PFX, .P12).</param>
      <param name="Password">The certificate password.</param>
      <param name="Reason">The reason of the signature. Can be an empty string.</param>
      <param name="Location">The location where the signature is applied. Can be an empty string.</param>
      <param name="ContactInfo">Information about the signer. Can be an empty string.</param>
      <param name="SignerName">The signer name. If empty, "GdPicture" will be used.</param>
      <param name="ImageResName">The image resource name (the stamp) previously returned by the AddImageFromBitmap, AddImageFromGdPictureImage or GetPageImageResName method.</param>
      <param name="DstX">The X destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="DstY">The Y destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="Width">Width of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">Height of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="ValidationMark">Specifies if a validation mark must be rendered over the signature field.</param>
      <param name="TextInformation">Defines the text to be rendered over the signature field. Multiline text can be used.</param>
      <param name="Linearize">Set True to enable Fast Web View mode. Linearization shuffles the contents of the PDF file to place all of the information needed to display the first page near the beginning of the file.
 This allows the user to see the first page while the remainder of the file is still downloading from the web.</param>
      <remarks>
 Take care: DstX and DstY parameters are the coordinates on the bottom-left corner of the image!
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Linearize and apply digital signature to an existing document with a stamp." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("stamp.png")
 Dim imgResName As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
 oGdPicturePDF.DigiSignWithStamp("signed.pdf", "test.pfx", "MyPassword", "The reason", "The location", "The contactInfo", "The signerName", imgResName, 0, 0, 100, 150, True)
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DigiSignWithStamp(System.IO.Stream,System.IO.Stream,System.String,System.String,System.String,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.String,System.Boolean,GdPicture12.PdfSignatureMode)">
      <summary>
 Saves and applies digital signature with a visible stamp to the PDF.
 Warning: This method automatically closes the PDF document.
 </summary>
      <param name="DstPDF">The stream to save the PDF.</param>
      <param name="Certificate">The stream storing the digital certificate to use. Must be PKCS#12 certificate (.PFX, .P12).</param>
      <param name="Password">The certificate password.</param>
      <param name="Reason">The reason of the signature. Can be an empty string.</param>
      <param name="Location">The location where the signature is applied. Can be an empty string.</param>
      <param name="ContactInfo">Information about the signer. Can be an empty string.</param>
      <param name="SignerName">The signer name. If empty, "GdPicture" will be used.</param>
      <param name="ImageResName">The image resource name (the stamp) previously returned by the AddImageFromBitmap, AddImageFromGdPictureImage or GetPageImageResName method.</param>
      <param name="DstX">The X destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="DstY">The Y destination of the bottom left corner of the stamp in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="Width">Width of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">Height of the stamp, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="ValidationMark">Specifies if a validation mark must be rendered over the signature field.</param>
      <param name="TextInformation">Defines the text to be rendered over the signature field. Multiline text can be used.</param>
      <param name="Linearize">Set True to enable Fast Web View mode. Linearization shuffles the contents of the PDF file to place all of the information needed to display the first page near the beginning of the file.
 This allows the user to see the first page while the remainder of the file is still downloading from the web.</param>
      <param name="SignatureMode">A member of the PdfSignatureMode enumeration. The type of signature to apply.</param>
      <remarks>
 Take care: DstX and DstY parameters are the coordinates on the bottom-left corner of the image!
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Linearize and apply digital signature to an existing document with a stamp." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("stamp.png")
 Dim imgResName As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
 oGdPicturePDF.DigiSignWithStamp("signed.pdf", "test.pfx", "MyPassword", "The reason", "The location", "The contactInfo", "The signerName", imgResName, 0, 0, 100, 150, True)
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetSignatureCount">
      <summary>
 Returns the number of applied digital signature to the document.
 </summary>
      <returns>
 The number of applied digital signatures.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Counting signatures in a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim SignatureCount As Integer = oGdPicturePDF.GetSignatureCount()
    If SignatureCount &gt; 0 Then
       MessageBox.Show("This PDF contains " + SignatureCount.ToString())
    Else
       MessageBox.Show("This PDF does not contain a signature")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetSignatureProperties(System.Int32,System.String@,System.String@,System.String@,System.String@,System.String@,System.Single@,System.Single@,System.Single@,System.Single@,System.Int32@,System.Boolean@,System.Boolean@,System.String@,System.String@,System.DateTime@,System.DateTime@,System.String@,System.Int32@,System.DateTime@,GdPicture12.PdfSignatureCertificationLevel@)">
      <summary>
 Gets information about a digital signature in the document.
 This method also check the certificate validity and if the document has been altered or corrupted since it was signed.
 </summary>
      <param name="SignatureIdx">The signature index. Must be a value in the range 0 - GetSignatureCount() - 1.</param>
      <param name="SignatureName">Returns the name of the person or authority signing the document. Can be an empty string.</param>
      <param name="SignatureReason">Returns the reason for the signing, such as ( I agree ). Can be an empty string.</param>
      <param name="SignatureLocation">Returns the CPU host name or physical location of the signing. Can be an empty string.</param>
      <param name="SignatureContactInfo">Returns information provided by the signer to enable a recipient to contact the signer to verify the signature; for example, a phone number. Can be an empty string.</param>
      <param name="SignatureDate">Returns the time of signing as string. Depending on the signature handler, this may be a normal unverified computer time or a time generated in a verifiable way from a secure time server. Can be an empty string.</param>
      <param name="StampLeft">Returns the left position, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, of the associated stamp. Can be 0 if no stamp has been applied.</param>
      <param name="StampTop">Returns the top position, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method, of the associated stamp. Can be 0 if no stamp has been applied.</param>
      <param name="StampWidth">Returns the width, in current unit defined by the SetMeasurementUnit() method, of the associated stamp. Can be 0 if no stamp has been applied.</param>
      <param name="StampHeight">Returns the height, in current unit defined by the SetMeasurementUnit() method, of the associated stamp. Can be 0 if no stamp has been applied.</param>
      <param name="StampPage">Returns the page number including the associated stamp. Can be 0 if no stamp has been applied.</param>
      <param name="DocumentValid">Returns if the document has been altered or corrupted since it was signed.</param>
      <param name="CertificateValid">Returns of the certificate has been successfully verified.</param>
      <param name="CertificateFriendlyName">Returns the associated alias of the certificate.</param>
      <param name="CertificateIssuer">Returns the name of the authority that issued the certificate.</param>
      <param name="CertificateNotBefore">Returns the date in local time on which the certificate become valid.</param>
      <param name="CertificateNotAfter">Returns the date in local time after which the certificate is no longer valid.</param>
      <param name="CertificateSubject">Returns the subject distinguished name of the certificate.</param>
      <param name="CertificateVersion">Returns the certificate version.</param>
      <param name="SigningTime">Returns the date and time that the message was signed.</param>
      <param name="SignatureLevel">A member of the PdfSignatureCertificationLevel enumeration.</param>
      <remarks>This method supports only adbe.pkcs7.sha1 and adbe.pkcs7.detached subfilters. adbe.x509.rsa.sha1 will be supported in a future release.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetSignatureCount" />
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Showing the signature information of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim SignatureCount As Integer = oGdPicturePDF.GetSignatureCount()
    If SignatureCount &gt; 0 Then
       For SignatureNum As Integer = 0 To SignatureCount - 1
          Dim SignatureName As String
          Dim SignatureReason As String
          Dim SignatureLocation As String
          Dim SignatureContactInfo As String
          Dim SignatureDate As String
          Dim StampLeft As Single
          Dim StampTop As Single
          Dim StampWidth As Single
          Dim StampHeight As Single
          Dim StampPage As Integer
          Dim DocumentValid As Boolean
          Dim CertificateValid As Boolean
          Dim CertificateFriendlyName As String
          Dim CertificateIssuer As String
          Dim CertificateNotBefore As DateTime
          Dim CertificateNotAfter As DateTime
          Dim CertificateSubject As String
          Dim CertificateVersion As Integer
          Dim SigningTime As DateTime
          Dim sigLevel As PdfSignatureCertificationLevel
          oGdPicturePDF.GetSignatureProperties(SignatureNum,
          SignatureName,
          SignatureReason,
          SignatureLocation,
          SignatureContactInfo,
          SignatureDate,
          StampLeft,
          StampTop,
          StampWidth,
          StampHeight,
          StampPage,
          DocumentValid,
          CertificateValid,
          CertificateFriendlyName,
          CertificateIssuer,
          CertificateNotBefore,
          CertificateNotAfter,
          CertificateSubject,
          CertificateVersion,
          SigningTime,
          sigLevel)
          Dim SignatureInfo As String
          If StampWidth = 0 Or StampHeight = 0 Then
             SignatureInfo = "Invisble signature"
          Else
             SignatureInfo = "Signature at (" +
             StampLeft.ToString() + "*" + StampTop.ToString() +
             ")-(" +
             StampWidth.ToString() + "*" + StampHeight.ToString() + ")"
          End If
          If DocumentValid Then
             SignatureInfo = SignatureInfo + vbCrLf +
             "The document has not been changed"
          Else
             SignatureInfo = SignatureInfo + vbCrLf +
             "The document has been changed"
          End If
          If CertificateValid Then
             SignatureInfo = SignatureInfo + vbCrLf +
             "The signature is valid"
          Else
             SignatureInfo = SignatureInfo + vbCrLf +
             "The signature is not valid"
          End If
          SignatureInfo = SignatureInfo + vbCrLf +
          "at page " + StampPage.ToString() + vbCrLf + vbCrLf +
          "SignatureName : " + SignatureName + vbCrLf +
          "SignatureReason : " + SignatureReason + vbCrLf +
          "SignatureLocation : " + SignatureLocation + vbCrLf +
          "SignatureContactInfo : " + SignatureContactInfo + vbCrLf +
          "SignatureDate : " + SignatureDate.ToString() + vbCrLf + vbCrLf
          MessageBox.Show(SignatureInfo, "Signature number" + SignatureNum.ToString())
       Next
    Else
       MessageBox.Show("This PDF does not contain a signature")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RemoveSignature(System.Int32)">
      <summary>
 Removes a digital signature from the document.
 </summary>
      <param name="SignatureIdx">The signature index. Must be a value in the range 0 - GetSignatureCount() - 1.</param>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetSignatureCount" />
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SigSetCertificationLevel(GdPicture12.PdfSignatureCertificationLevel)">
      <summary>
 Specifies the level of signature certification to be set before signing for certifying signature only
 </summary>
      <param name="Level">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SigSetCertFromP12(System.String,System.String)">
      <summary>
 Set the certificate from an external P12 or Pfx file.
 </summary>
      <param name="certPath">a staing containing the full path for the pkcs12 file.</param>
      <param name="PFXPassword">the password to open the PKCS12.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SigSetCertFromStore(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SigSetCertFromSmartCard(System.String,System.String,System.String)" />
      <remarks>At least one of the SetCert must be used before Signing, it's a mandatory.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SigSetCertFromP12(System.IO.Stream,System.String)">
      <summary>
 Set the certificate from a pkcs12 stream.
 </summary>
      <param name="Certificate">a stream containing the PKCS12.</param>
      <param name="PFXPassword">the password to open the PKCS12</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SigSetCertFromStore(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SigSetCertFromSmartCard(System.String,System.String,System.String)" />
      <remarks>At least one of the SetCert must be used before Signing, it's a mandatory.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SigSetCertFromStore(System.String)">
      <summary>
 Set the certificate from the Windows Certicate Store.
 </summary>
      <param name="SerialNumber">The serial number of the certificate to use.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SigSetCertFromP12(System.IO.Stream,System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SigSetCertFromSmartCard(System.String,System.String,System.String)" />
      <remarks>At least one of the SetCert must be used before Signing, it's a mandatory.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SigSetCertFromSmartCard(System.String,System.String,System.String)">
      <summary>
 Set the certificate from a Smart Card reader.
 </summary>
      <param name="ProviderName">The provider name, Generaly 'Microsoft Base Smart Card Crypto Provider'.</param>
      <param name="KeyContainerName">The key container name.</param>
      <param name="PinCode">The Pin code of the card. If left black a popup window will be shown at signning time.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SigSetCertFromP12(System.IO.Stream,System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SigSetCertFromStore(System.String)" />
      <remarks>At least one of the SetCert must be used before Signing, it's a mandatory</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SigSetCertFromSmartCardBySerialNumber(System.String,System.String)">
      <summary>
 Set the certificate from a Smart Card reader by the serial number.
 </summary>
      <param name="SerialNumber">The serial number of the certificate to find. If left blanck a popup window will be shown to select manualy a certificate.</param>
      <param name="PinCode">The Pin code of the card. If left black a popup window will be shown at signning time.</param>
      <returns>
      </returns>
      <remarks>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SigSetSignaturePos(System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Set the signature position, if not set  the signature is not visible.
 </summary>
      <param name="StampLeft">The X coordinate of the signature.</param>
      <param name="StampBottom">The Y coordinate of the signature.</param>
      <param name="StampWidth">The Width of the signature.</param>
      <param name="StampHeight">The Width of the signature.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SigSetSignaturePosFromPlaceHolder(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SigSetSignaturePosFromPlaceHolder(System.Int32)">
      <summary>
 set the signature position, using a place holder to get the coordinates.
 </summary>
      <param name="SignatureIdx">The signature index in the range 0 to GetSignatureCount() - 1</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SigSetSignaturePos(System.Single,System.Single,System.Single,System.Single)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SigSetStampImage(System.String)">
      <summary>
 Set the image drawn on the signature
 </summary>
      <param name="StampResName">The image'resource name. Obtained by a AddBitmap method.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SigSetSignatureInfos(System.String,System.String,System.String,System.String)">
      <summary>
 set the signature info, using this method is a mandotory before signing
 </summary>
      <param name="Name">Set the Name of the signer.</param>
      <param name="Reason">Set the reason for the signing.</param>
      <param name="Location">Set the location for the signing</param>
      <param name="ContactInfo">Set the contact information of the signer</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SigSetText(System.String,System.String,System.Single,System.Drawing.Color,GdPicture12.TextAlignment,GdPicture12.TextAlignment,System.Boolean)">
      <summary>
 Set the text to be drawn
 </summary>
      <param name="Text">The text to draw</param>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="FontSize">The size to use for the font.</param>
      <param name="Color">A color object that defines the color to draw the text.</param>
      <param name="AlignHorz">Specifies the horizontal alignment of the text within the bounding box.</param>
      <param name="AlignVert">Specifies the vertical alignment of the text within the bounding box.</param>
      <param name="ShowText">
      </param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>If text is left blank, a text will be build automaticaly with the info of the signature.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SigSetText(System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte,System.Byte,GdPicture12.TextAlignment,GdPicture12.TextAlignment,System.Boolean)">
      <summary>
 Set the text to be drawn
 </summary>
      <param name="Text">The text to draw</param>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="FontSize">The size to use for the font.</param>
      <param name="Cyan">
      </param>
      <param name="Magenta">
      </param>
      <param name="Yellow">
      </param>
      <param name="Black">
      </param>
      <param name="AlignHorz">Specifies the horizontal alignment of the text within the bounding box.</param>
      <param name="AlignVert">Specifies the vertical alignment of the text within the bounding box.</param>
      <param name="ShowText">
      </param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>If text is left blank, a text will be build automaticaly with the info of the signature.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SigShowValidationMark(System.Boolean)">
      <summary>
 Set the validation mark to be added in the signature
 </summary>
      <param name="ShowValidationMark">A boolean specifying the add the validation mark or not</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SigSign(System.String,GdPicture12.PdfSignatureMode,System.Boolean)">
      <summary>
 Apply the signature on the current page of the PDF 
 </summary>
      <param name="OutputFileName">A string containing the name of the signed pdf on</param>
      <param name="SignatureMode">A member of the SignatureMode enumeration</param>
      <param name="Linearisation">A boolean that specifies that the pdf must be linearized or not.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SigSign(System.IO.Stream,GdPicture12.PdfSignatureMode,System.Boolean)">
      <summary>
 Apply the signature on the current page of the PDF 
 </summary>
      <param name="OutputStream">A stream to write the signed pdf on</param>
      <param name="SignatureMode">A member of the SignatureMode enumeration</param>
      <param name="Linearisation">A boolean that specifies that the pdf must be linearized or not.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddFontFolder(System.Collections.Generic.List{System.String})">
      <summary>
 Important: Here for backward compatibility. This method is obsolete, please use the GdPictureDocumentUtilities.AddFontFolder() method instead.
 Register new folder that can be used to load non embeded fonts.
 </summary>
      <param name="Path">The path to load the fonts from.</param>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFontCount">
      <summary>
 Returns the number of fonts used by the PDF.
 </summary>
      <returns>
 The number of fonts used.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFontName(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFontType(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFontEncoding(System.Int32)" />
      <example>
        <code description="List all fonts and their attributes used by a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim FontCount As Integer = oGdPicturePDF.GetFontCount()
    If FontCount &gt; 0 Then
       Dim FontList As String = ""
       For x As Integer = 0 To FontCount - 1
          Dim FontAtribs As String = oGdPicturePDF.GetFontName(x + 1) + " | " +
          oGdPicturePDF.GetFontType(x + 1) + " | " +
          oGdPicturePDF.GetFontEncoding(x + 1)
          FontList = FontList + FontAtribs + vbCrLf
       Next
       MessageBox.Show(FontList)
    Else
       MessageBox.Show("This pdf does not contain fonts")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFontName(System.Int32)">
      <summary>
 Returns the name of a fonts used by the PDF.
 </summary>
      <param name="FontIdx">The font index. Must be a value between 1 and GetFontCount.</param>
      <returns>
 The font name.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFontCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFontType(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFontEncoding(System.Int32)" />
      <example>
        <code description="List all fonts and their attributes used by a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim FontCount As Integer = oGdPicturePDF.GetFontCount()
    If FontCount &gt; 0 Then
       Dim FontList As String = ""
       For x As Integer = 0 To FontCount - 1
          Dim FontAtribs As String = oGdPicturePDF.GetFontName(x + 1) + " | " +
          oGdPicturePDF.GetFontType(x + 1) + " | " +
          oGdPicturePDF.GetFontEncoding(x + 1)
          FontList = FontList + FontAtribs + vbCrLf
       Next
       MessageBox.Show(FontList)
    Else
       MessageBox.Show("This pdf does not contain fonts")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFontType(System.Int32)">
      <summary>
 Returns the type of a fonts used by the PDF.
 </summary>
      <param name="FontIdx">The font index. Must be a value between 1 and GetFontCount.</param>
      <returns>
 The font type.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFontCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFontName(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFontEncoding(System.Int32)" />
      <example>
        <code description="List all fonts and their attributes used by a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim FontCount As Integer = oGdPicturePDF.GetFontCount()
    If FontCount &gt; 0 Then
       Dim FontList As String = ""
       For x As Integer = 0 To FontCount - 1
          Dim FontAtribs As String = oGdPicturePDF.GetFontName(x + 1) + " | " +
          oGdPicturePDF.GetFontType(x + 1) + " | " +
          oGdPicturePDF.GetFontEncoding(x + 1)
          FontList = FontList + FontAtribs + vbCrLf
       Next
       MessageBox.Show(FontList)
    Else
       MessageBox.Show("This pdf does not contain fonts")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFontEncoding(System.Int32)">
      <summary>
 Returns the encoding scheme a fonts used by the PDF.
 </summary>
      <param name="FontIdx">The font index. Must be a value between 1 and GetFontCount.</param>
      <returns>
 The encoding scheme.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFontCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFontType(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFontName(System.Int32)" />
      <example>
        <code description="List all fonts and their attributes used by a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim FontCount As Integer = oGdPicturePDF.GetFontCount()
    If FontCount &gt; 0 Then
       Dim FontList As String = ""
       For x As Integer = 0 To FontCount - 1
          Dim FontAtribs As String = oGdPicturePDF.GetFontName(x + 1) + " | " +
          oGdPicturePDF.GetFontType(x + 1) + " | " +
          oGdPicturePDF.GetFontEncoding(x + 1)
          FontList = FontList + FontAtribs + vbCrLf
       Next
       MessageBox.Show(FontList)
    Else
       MessageBox.Show("This pdf does not contain fonts")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.IsFontEmbedded(System.Int32)">
      <summary>
 Returns the if a fonts used by the PDF is embedded.
 </summary>
      <param name="FontIdx">The font index. Must be a value between 1 and GetFontCount.</param>
      <returns>
 True if the font data is embedded, False otherwise.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFontCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFontType(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFontName(System.Int32)" />
      <example>
        <code description="List all fonts and their attributes used by a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim FontCount As Integer = oGdPicturePDF.GetFontCount()
    If FontCount &gt; 0 Then
       Dim FontList As String = ""
       For x As Integer = 0 To FontCount - 1
          Dim FontAtribs As String = oGdPicturePDF.GetFontName(x + 1) + " | " +
          oGdPicturePDF.GetFontType(x + 1) + " | " +
          oGdPicturePDF.IsFontEmbedded(x + 1).ToString() + " | " +
          oGdPicturePDF.GetFontEncoding(x + 1)
          FontList = FontList + FontAtribs + vbCrLf
       Next
       MessageBox.Show(FontList)
    Else
       MessageBox.Show("This pdf does not contain fonts")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddTrueTypeFont(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
 Adds a TrueType system font to the PDF. Only ANSI characters will be supported by using the added font.
 </summary>
      <param name="FontName">The name of the font to add.</param>
      <param name="Bold">True to set the font bold else False.</param>
      <param name="Italic">True to set the font italic else False.</param>
      <param name="Embedded">True to embed the font in the PDF as TrueType, else False. Warning: embedding the font
 to the file produces larger document.</param>
      <returns>
 Returns a Font resource name if success, else an empty string. The Font resource name can be subsequently used with DrawText(), DrawTextUnderLine(), DrawTextBox() and other methods taking a font resource name as parameter.
 </returns>
      <example>
        <code description="Adding a TrueType system font to the pdf, then using it to draw some text on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status = GdPictureStatus.OK Then
       Dim FontResName As String = oGdPicturePDF.AddTrueTypeFont("Times new Roman", False, False, False)
       If FontResName = "" Then
          MessageBox.Show("Unknown truetype system font")
       Else
          oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
          oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
          oGdPicturePDF.SetTextSize(30)
          status = oGdPicturePDF.DrawText(FontResName, 10, 10, "Here is some text")
          If status = GdPictureStatus.OK Then
             oGdPicturePDF.SaveToFile("test_AddTrueTypeFont_func.pdf", False)
             MessageBox.Show("Ok")
          Else
             MessageBox.Show("DrawText method failed")
          End If
       End If
    Else
       MessageBox.Show("This pdf does not have a first page", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddTrueTypeFontU(System.String,GdPicture12.FontCharSet,System.Boolean,System.Boolean)">
      <summary>
 Adds a TrueType system font to the PDF.
 Unicode characters drawing will be supported by using the added font.
 </summary>
      <param name="FontName">The name of the font to add.</param>
      <param name="CharSet">A member of the FontCharSet enumeration. Defines the character encoding
 system to use.</param>
      <param name="Bold">True to set the font bold else False.</param>
      <param name="Italic">True to set the font italic else False.</param>
      <returns>
 Returns a Font resource name if success, else an empty string. The Font resource name can be subsequently used with DrawText(), DrawTextUnderLine(), DrawTextBox() and other methods taking a font resource name as parameter.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Adding a TrueType system font to the PDF, then using it to draw some unicode text on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status = GdPictureStatus.OK Then
       Dim FontResName As String = oGdPicturePDF.AddTrueTypeFontU("MingLiu", FontCharSet.ANSI_CHARSET, False, False)
       If FontResName = "" Then
          MessageBox.Show("Font file not found")
       Else
          oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
          oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
          oGdPicturePDF.SetTextSize(30)
          status = oGdPicturePDF.DrawText(FontResName, 10, 10, ChrW(20320) + ChrW(22909))
          If status = GdPictureStatus.OK Then
             oGdPicturePDF.SaveToFile("test_AddTrueTypeFontU_func.pdf", False)
             MessageBox.Show("Ok")
          Else
             MessageBox.Show("DrawText method failed")
          End If
       End If
    Else
       MessageBox.Show("This pdf does not have a first page", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddTrueTypeFontFromFile(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
 Adds a TrueType font from a file to the PDF. Only ANSI characters will be supported by using the added font.
 </summary>
      <param name="FilePath">The path of the font file.</param>
      <param name="Bold">True to set the font bold else False.</param>
      <param name="Italic">True to set the font italic else False.</param>
      <param name="Embedded">True to embed the font in the PDF as TrueType, else False. Warning: embedding the font
 to the file produces larger document.</param>
      <returns>
 Returns a Font resource name if success, else an empty string. The Font resource name can be subsequently used with DrawText(), DrawTextUnderLine(), DrawTextBox() and other methods taking a font resource name as parameter.
 </returns>
      <example>
        <code description="Adding a TrueType font from a file to the PDF, then using it to draw some text on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status = GdPictureStatus.OK Then
       Dim FontResName As String = oGdPicturePDF.AddTrueTypeFontFromFile("windows\fonts\webdings.ttf", False, False, True)
       If FontResName = "" Then
          MessageBox.Show("truetype file font not found")
       Else
          oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
          oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
          oGdPicturePDF.SetTextSize(30)
          status = oGdPicturePDF.DrawText(FontResName, 10, 10, "Here is some text")
          If status = GdPictureStatus.OK Then
             oGdPicturePDF.SaveToFile("test_AddTrueTypeFontFromFile_func.pdf", False)
             MessageBox.Show("Ok")
          Else
             MessageBox.Show("DrawText method failed")
          End If
       End If
    Else
       MessageBox.Show("This pdf does not have a first page", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddFontFromFileU(System.String,System.String,GdPicture12.FontCharSet,System.Boolean,System.Boolean)">
      <summary>
 Adds a font from a file to the PDF. Unicode characters drawing will be supported by using the added
 font.
 Supported font files are:
 * .fon Font resource file.
 * .fnt Raw bitmap font file.
 * .ttf Raw TrueType file.
 * .ttc East Asian Windows: TrueType font collection.
 * .fot TrueType resource file.
 * .otf PostScript OpenType font.
 * .mmm multiple master Type1 font resource file. It must be used with .pfm and .pfb files.
 * .pfb Type 1 font bits file. It is used with a .pfm file.
 * .pfm Type 1 font metrics file. It is used with a .pfb file.
 </summary>
      <param name="FilePath">The path of the font file. To add a font whose information comes
 from several resource files, defines string with the file names separated by
 a | --for example, abcxxxxx.pfm | abcxxxxx.pfb.</param>
      <param name="FontName">The name of the font. IE: Arial.</param>
      <param name="CharSet">A member of the FontCharSet enumeration. Defines the character encoding
 system to use.</param>
      <param name="Bold">True to set the font bold else False.</param>
      <param name="Italic">True to set the font italic else False.</param>
      <returns>
 Returns a Font resource name if success, else an empty string. The Font resource name can be subsequently used with DrawText(), DrawTextUnderLine(), DrawTextBox() and other methods taking a font resource name as parameter.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Adding a font from a file to the PDF, then using it to draw some unicode text on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status = GdPictureStatus.OK Then
       Dim FontResName As String = oGdPicturePDF.AddFontFromFileU("WINDOWS\Fonts\mingliu.ttc", "MingLiu", FontCharSet.ANSI_CHARSET, False, False)
       If FontResName = "" Then
          MessageBox.Show("Font file not found")
       Else
          oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
          oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
          oGdPicturePDF.SetTextSize(30)
          status = oGdPicturePDF.DrawText(FontResName, 10, 10, ChrW(20320) + ChrW(22909))
          If status = GdPictureStatus.OK Then
             oGdPicturePDF.SaveToFile("test_AddFontFromFileU_func.pdf", False)
             MessageBox.Show("Ok")
          Else
             MessageBox.Show("DrawText method failed")
          End If
       End If
    Else
       MessageBox.Show("This pdf does not have a first page", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddStandardFont(GdPicture12.PdfStandardFont)">
      <summary>
 Adds a standard font (Standard Type 1 Fonts (Standard 14 Fonts)) to the PDF.
 </summary>
      <param name="StdFont">The standard font to add. A member of the PdfStandardFont enumeration.</param>
      <returns>
 Returns a Font resource name if success, else an empty string. The Font resource name can be subsequently used with DrawText(), DrawTextUnderLine(), DrawTextBox() and other methods taking a font resource name as parameter.
 </returns>
      <example>
        <code description="Adding a standard font to the PDF, then using it to draw some text on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status = GdPictureStatus.OK Then
       Dim FontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
       If FontResName = "" Then
          MessageBox.Show("Unknown standard font")
       Else
          oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
          oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
          oGdPicturePDF.SetTextSize(30)
          status = oGdPicturePDF.DrawText(FontResName, 10, 10, "Here is some text")
          If status = GdPictureStatus.OK Then
             oGdPicturePDF.SaveToFile("test_AddStandardFont_func.pdf", False)
             MessageBox.Show("Ok")
          Else
             MessageBox.Show("DrawText method failed")
          End If
       End If
    Else
       MessageBox.Show("This pdf does not have a first page", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageContent">
      <summary>
 Returns the content (postscript data) of the current page of the PDF.
 </summary>
      <returns>The postscript content of the current page.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetPageContent(System.String)">
      <summary>
 Sets the content (postscript data) of the current page of the PDF.
 </summary>
      <param name="Content">The postscript content to set.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageLabel(System.Int32)">
      <summary>
 Returns, if any, the label associated to a specific page of the PDF.
 </summary>
      <param name="PageNo">The page number. Should be a value between 1 and GetPageCount(). If the specified parameter is out of range, the nereast page will be automatically selected.</param>
      <returns>
 The page label.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPageLabelsRange(System.Int32,GdPicture12.PdfPageLabelStyle,System.String,System.Int32)" />
      <example>
        <code description="Getting the page label for each page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       'remove existing page-labels-range if any
       Dim pageLabelsRangeCount As Integer = oGdPicturePDF.GetPageLabelsRangeCount()
       If pageLabelsRangeCount &gt; 0 Then
          Dim pageLabels As String = ""
          For pageNum As Integer = 1 To PageCount
             pageLabels = pageLabels + "Page " + pageNum.ToString() + " Label = &lt;&lt;" + oGdPicturePDF.GetPageLabel(pageNum) + "&gt;&gt;" + vbCrLf
          Next
          MessageBox.Show(pageLabels)
       Else
          MessageBox.Show("This PDF does not contain PageLabels")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageLabelsRangeCount">
      <summary>
 Retunrs the number of the available labeling ranges in the PDF.
 </summary>
      <returns>
 The number of the available labeling ranges in the PDF.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.DeletePageLabelsRange(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageLabelsRange(System.Int32,System.Int32@,GdPicture12.PdfPageLabelStyle@,System.String@,System.Int32@)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetPageLabelsRangeStartPage(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetPageLabelsRangeStyle(System.Int32,GdPicture12.PdfPageLabelStyle)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetPageLabelsRangePrefix(System.Int32,System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetPageLabelsRangeNumPortion(System.Int32,System.Int32)" />
      <example>
        <code description="Removing all page labels of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       'remove existing pagelabelsrange if any
       Dim pageLabelsRangeCount As Integer = oGdPicturePDF.GetPageLabelsRangeCount()
       If pageLabelsRangeCount &gt; 0 Then
          status = oGdPicturePDF.DeletePageLabels()
          If status = GdPictureStatus.OK Then
             oGdPicturePDF.SaveToFile("test_DeletePageLabels.pdf", False)
             MessageBox.Show("Ok")
          Else
             MessageBox.Show("DeletePageLabels failed :" + status.ToString())
          End If
       Else
          MessageBox.Show("This PDF does not contain PageLabels")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddPageLabelsRange(System.Int32,GdPicture12.PdfPageLabelStyle,System.String,System.Int32)">
      <summary>
 Adds a new labeling range in the PDF. A labeling range is a series of consecutive pages using the same numbering system.
 </summary>
      <param name="StartPage">The starting page in the labeling range. Must be a value between 1 and GetPageCount().</param>
      <param name="Style">A member of the PdfPageLabelStyle enumeration. Defines the page labeling style.</param>
      <param name="Prefix">The label prefix for page labels in this range. Can be an empty string.</param>
      <param name="NumPortion">The value of the numeric portion for the first page label in the range. Subsequent pages are numbered sequentially from this value, which must be greater than or equal to 1. Default value: 1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageLabelsRange(System.Int32,System.Int32@,GdPicture12.PdfPageLabelStyle@,System.String@,System.Int32@)" />
      <example>
        <code description="Adding a roman page labels on the first page of a PDF, starting at number 50." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       'remove existing pagelabelsrange if any
       Dim pageLabelsRangeCount As Integer = oGdPicturePDF.GetPageLabelsRangeCount()
       If pageLabelsRangeCount &gt; 0 Then
          For pageLabelsRangeNum As Integer = pageLabelsRangeCount - 1 To 0 Step -1
             status = oGdPicturePDF.DeletePageLabelsRange(pageLabelsRangeNum)
          Next
       End If
       status = oGdPicturePDF.AddPageLabelsRange(1, PdfPageLabelStyle.PdfPageLabelStyleUppercaseRomanNumerals, "Roman Label : ", 50)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_AddPageLabelsRange.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("AddPageLabelsRange failed :" + status.ToString())
       End If
    Else
       MessageBox.Show("The PDF do not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageLabelsRange(System.Int32,System.Int32@,GdPicture12.PdfPageLabelStyle@,System.String@,System.Int32@)">
      <summary>
 Returns properties of a specific page labeling range of the PDF.
 </summary>
      <param name="LabelingRangeIdx">The labeling range, must be a value between 0 and GetPageLabelsRangeCount() - 1.</param>
      <param name="StartPage">Returns the starting page in the labeling range.</param>
      <param name="Style">A member of the PdfPageLabelStyle enumeration. Defines the page labeling style.</param>
      <param name="Prefix">Returns the label prefix for page labels in this range. Can be an empty string.</param>
      <param name="NumPortion">Returns the value of the numeric portion for the first page label in the range. Subsequent pages are numbered sequentially from this value, which must be greater than or equal to 1. Default value: 1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageLabelsRangeCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPageLabelsRange(System.Int32,GdPicture12.PdfPageLabelStyle,System.String,System.Int32)" />
      <example>
        <code description="Retrieving information about each page label in a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       'remove existing pagelabelsrange if any
       Dim pageLabelsRangeCount As Integer = oGdPicturePDF.GetPageLabelsRangeCount()
       If pageLabelsRangeCount &gt; 0 Then
          For pageLabelsNum = 0 To pageLabelsRangeCount - 1
             Dim PageLabelsStartPage As Integer
             Dim PageLabelsStyle As PdfPageLabelStyle
             Dim PageLabelsPrefix As String = ""
             Dim PageLabelNumPortion As Integer
             status = oGdPicturePDF.GetPageLabelsRange(pageLabelsNum, PageLabelsStartPage, PageLabelsStyle, PageLabelsPrefix, PageLabelNumPortion)
             MessageBox.Show("Start at page " + PageLabelsStartPage.ToString() + vbCrLf +
             "Style : " + PageLabelsStyle.ToString() + vbCrLf +
             "Prefix : " + PageLabelsPrefix + vbCrLf +
             "PartNum :" + PageLabelNumPortion.ToString(),
             "PageLabel number " + pageLabelsNum.ToString())
          Next
       Else
          MessageBox.Show("This PDF does not contain PageLabels")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DeletePageLabels">
      <summary>
 Removes all page labels of the PDF.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Removing all page labels of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       'remove existing pagelabelsrange if any
       Dim pageLabelsRangeCount As Integer = oGdPicturePDF.GetPageLabelsRangeCount()
       If pageLabelsRangeCount &gt; 0 Then
          status = oGdPicturePDF.DeletePageLabels()
          If status = GdPictureStatus.OK Then
             oGdPicturePDF.SaveToFile("test_DeletePageLabels.pdf", False)
             MessageBox.Show("Ok")
          Else
             MessageBox.Show("DeletePageLabels failed :" + status.ToString())
          End If
       Else
          MessageBox.Show("This PDF does not contain PageLabels")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DeletePageLabelsRange(System.Int32)">
      <summary>
 Removes a specific page labeling range of the PDF.
 </summary>
      <param name="LabelingRangeIdx">The labeling range, must be a value between 0 and GetPageLabelsRangeCount() - 1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageLabelsRangeCount" />
      <example>
        <code description="Adding a roman page labels on the first page of a PDF, stating at number 50." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       'remove existing page-labels-range if any
       Dim pageLabelsRangeCount As Integer = oGdPicturePDF.GetPageLabelsRangeCount()
       If pageLabelsRangeCount &gt; 0 Then
          For pageLabelsRangeNum As Integer = pageLabelsRangeCount - 1 To 0 Step -1
             status = oGdPicturePDF.DeletePageLabelsRange(pageLabelsRangeNum)
          Next
       End If
       status = oGdPicturePDF.AddPageLabelsRange(1, PdfPageLabelStyle.PdfPageLabelStyleUppercaseRomanNumerals, "Roman Label : ", 50)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_AddPageLabelsRange.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("AddPageLabelsRange failed :" + status.ToString())
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetPageLabelsRangeStartPage(System.Int32,System.Int32)">
      <summary>
 Modifies the starting page of a labeling range of the PDF.
 </summary>
      <param name="LabelingRangeIdx">The labeling range, must be a value between 0 and GetPageLabelsRangeCount() - 1.</param>
      <param name="StartPage">The starting page in the labeling range. Must be a value between 1 and GetPageCount().</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageLabelsRangeCount" />
      <example>
        <code description="Changing the starting page of the first page labels range in the last page, removing other page labels range in a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 'Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       'remove existing pagelabelsrange if any
       Dim pageLabelsRangeCount As Integer = oGdPicturePDF.GetPageLabelsRangeCount()
       If pageLabelsRangeCount &gt; 0 Then
          For pageLabelsRangeNum As Integer = pageLabelsRangeCount - 1 To 1 Step -1
             oGdPicturePDF.DeletePageLabelsRange(pageLabelsRangeNum)
          Next
          oGdPicturePDF.SetPageLabelsRangeStartPage(0, PageCount)
          oGdPicturePDF.SaveToFile("test_SetPageLabels.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("This PDF does not contain PageLabels")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetPageLabelsRangeStyle(System.Int32,GdPicture12.PdfPageLabelStyle)">
      <summary>
 Modifies the style of a labeling range of the PDF.
 </summary>
      <param name="LabelingRangeIdx">The labeling range, must be a value between 0 and GetPageLabelsRangeCount() - 1.</param>
      <param name="Style">A member of the PdfPageLabelStyle enumeration. Defines the page labeling style.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageLabelsRangeCount" />
      <example>
        <code description="Changing the first page labels range of a pdf." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       'remove existing pagelabelsrange if any
       Dim pageLabelsRangeCount As Integer = oGdPicturePDF.GetPageLabelsRangeCount()
       If pageLabelsRangeCount &gt; 0 Then
          oGdPicturePDF.SetPageLabelsRangeNumPortion(0, 10)
          oGdPicturePDF.SetPageLabelsRangePrefix(0, "Prefix")
          oGdPicturePDF.SetPageLabelsRangeStyle(0, PdfPageLabelStyle.PdfPageLabelStyleLowercaseLetters)
          oGdPicturePDF.SaveToFile("test_SetPageLabels.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("This PDF does not contain PageLabels")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetPageLabelsRangePrefix(System.Int32,System.String)">
      <summary>
 Modifies the label prefix of a labeling range of the PDF.
 </summary>
      <param name="LabelingRangeIdx">The labeling range, must be a value between 0 and GetPageLabelsRangeCount() - 1.</param>
      <param name="Prefix">The label prefix of a labeling range of the PDF.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageLabelsRangeCount" />
      <example>
        <code description="Changing the first page labels range of a pdf." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       'remove existing pagelabelsrange if any
       Dim pageLabelsRangeCount As Integer = oGdPicturePDF.GetPageLabelsRangeCount()
       If pageLabelsRangeCount &gt; 0 Then
          oGdPicturePDF.SetPageLabelsRangeNumPortion(0, 10)
          oGdPicturePDF.SetPageLabelsRangePrefix(0, "Prefix")
          oGdPicturePDF.SetPageLabelsRangeStyle(0, PdfPageLabelStyle.PdfPageLabelStyleLowercaseLetters)
          oGdPicturePDF.SaveToFile("test_SetPageLabels.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("This PDF does not contain PageLabels")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetPageLabelsRangeNumPortion(System.Int32,System.Int32)">
      <summary>
 Modifies the numeric portion value for the first page label of a labeling range of the PDF.
 </summary>
      <param name="LabelingRangeIdx">The labeling range, must be a value between 0 and GetPageLabelsRangeCount() - 1.</param>
      <param name="NumPortion">The value of the numeric portion for the first page label in the range. Subsequent pages are numbered sequentially from this value, which must be greater than or equal to 1. Default value: 1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageLabelsRangeCount" />
      <example>
        <code description="Changing the first page labels range of a pdf." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       'remove existing pagelabelsrange if any
       Dim pageLabelsRangeCount As Integer = oGdPicturePDF.GetPageLabelsRangeCount()
       If pageLabelsRangeCount &gt; 0 Then
          oGdPicturePDF.SetPageLabelsRangeNumPortion(0, 10)
          oGdPicturePDF.SetPageLabelsRangePrefix(0, "Prefix")
          oGdPicturePDF.SetPageLabelsRangeStyle(0, PdfPageLabelStyle.PdfPageLabelStyleLowercaseLetters)
          oGdPicturePDF.SaveToFile("test_SetPageLabels.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("This PDF does not contain PageLabels")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.ClearPageContent">
      <summary>
 Empties the content of the selected page. This will result in a blank page with the same dimensions.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <example>
        <code description="Clearing the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       status = oGdPicturePDF.ClearPageContent()
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_ClearPageContent.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("ClearPageContent failed : " + status.ToString())
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.NewPage(System.Single,System.Single)">
      <summary>
 Adds a new page to the PDF.
 </summary>
      <param name="PageWidth">Width in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="PageHeight">Height in current unit defined by the SetMeasurementUnit() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>The newly created page in the document is automatically selected after the operation.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageCount" />
      <example>
        <code description="Create a new page at the end of the pdf with the same dimensions and rotation as the first page. Then delete the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 1 Then    'more than one page
       oGdPicturePDF.SelectPage(1)
       Dim PageRotation As Integer = oGdPicturePDF.GetPageRotation()
       Dim PageHeight As Single = oGdPicturePDF.GetPageHeight()
       Dim PageWidth As Single = oGdPicturePDF.GetPageWidth()
       oGdPicturePDF.NewPage(PageWidth, PageHeight)
       oGdPicturePDF.SelectPage(oGdPicturePDF.GetPageCount())
       oGdPicturePDF.RotatePage(PageRotation)
       status = oGdPicturePDF.DeletePage(1)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_DeletePage.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("DeletePage failed : " + status.ToString())
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.NewPage(GdPicture12.PdfPageSizes)">
      <summary>
 Adds a new page to the PDF.
 </summary>
      <param name="PageSize">A member of the PdfPageSizes enumeration. The predefined page size.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>The newly created page in the document is automatically selected after the operation.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.ResizePage(System.Single,System.Single)">
      <summary>
 Resize a page page of the PDF.
 </summary>
      <param name="NewPageWidth">The new page width in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="NewPageHeight">The new page height in current unit defined by the SetMeasurementUnit() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.ScalePage(System.Single,System.Single)" />
      <example>
        <code description="Resize the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim PageHeight As Single = oGdPicturePDF.GetPageHeight()
       Dim PageWidth As Single = oGdPicturePDF.GetPageWidth()
       status = oGdPicturePDF.ResizePage(PageWidth * 110 / 100, PageHeight * 110 / 100)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_ResizePage.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("ResizePage failed : " + status.ToString())
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.ScalePage(System.Single,System.Single)">
      <summary>
 Scale a page page of the PDF.
 </summary>
      <param name="ScaleX">The horizontal scaling factor. For example 2.0 multiplies the width by 2, and 0.5 divides the width by 2.</param>
      <param name="ScaleY">The vertical scaling factor. For example 2.0 multiplies the height by 2, and 0.5 divides the height by 2.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.ResizePage(System.Single,System.Single)" />
      <example>
        <code description="Resize first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       status = oGdPicturePDF.ScalePage(1.1, 1.1)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_ScalePage.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("ScalePage failed : " + status.ToString())
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.InsertPage(System.Single,System.Single,System.Int32)">
      <summary>
 Insert a new page to the PDF.
 </summary>
      <param name="PageWidth">Width in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="PageHeight">Height in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="PageNo">The position of the page to insert. Must be a value between 1 and PageCount.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageCount" />
      <example>
        <code description="Insert a blank page before the last page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim PageHeight As Single = oGdPicturePDF.GetPageHeight()
       Dim PageWidth As Single = oGdPicturePDF.GetPageWidth()
       status = oGdPicturePDF.InsertPage(PageWidth, PageHeight, PageCount)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_InsertPage.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("InsertPage failed : " + status.ToString())
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.InsertPage(GdPicture12.PdfPageSizes,System.Int32)">
      <summary>
 Insert a new page to the PDF.
 </summary>
      <param name="PageSize">A member of the PdfPageSizes enumeration. The predefined page size.</param>
      <param name="PageNo">The position of the page to insert. Must be a value between 1 and PageCount.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.ClonePage(System.Int32)">
      <summary>
 Clones a specific page of the PDF to the last position.
 </summary>
      <param name="PageNo">The page number to clone. Must be a value between 1 and page count.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>The newly created page in the document is automatically selected after the operation.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageCount" />
      <example>
        <code description="Cloning the first page, then cropping the clone page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.ClonePage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("ClonePage method failed")
    Else
       oGdPicturePDF.SelectPage(oGdPicturePDF.GetPageCount)
       Dim CropLeft, CropTop, CropRight, CropBottom As Single
       oGdPicturePDF.GetPageBox(PdfPageBox.PdfPageBoxMediaBox, CropLeft, CropTop, CropRight, CropBottom)
       status = oGdPicturePDF.SetPageBox(PdfPageBox.PdfPageBoxCropBox, CropLeft + 10, CropTop + 10, CropRight - 10, CropBottom - 10)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_ClonePage_func_2.pdf", False)
          MessageBox.Show("Ok")
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.ClonePage(GdPicture12.GdPicturePDF,System.Int32)">
      <summary>
 Clones a specific page from a specific PDF to the current PDF. Each cloned page is inserted at the end of the document. This method can be used to merge multiple PDFs together.
 </summary>
      <param name="FromPDF">A GdPicturePDF object. The PDF source which contains the page to clone in the current PDF.</param>
      <param name="PageNo">The page number to clone. Must be a value between 1 and source PDF page count.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>The newly created page in the document is automatically selected after the operation.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageCount" />
      <example>
        <code description="Merging two PDFs." lang="VB.NET">
 Dim oGdPicturePDF1 As New GdPicturePDF
 Dim oGdPicturePDF2 As New GdPicturePDF
 Dim status As GdPictureStatus = oGdPicturePDF1.LoadFromFile("test1.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF2.LoadFromFile("test2.pdf", False)
    If status = GdPictureStatus.OK Then
       Dim oGdPictureNewPdf As New GdPicturePDF
       status = oGdPictureNewPdf.NewPDF()
       If status = GdPictureStatus.OK Then
          Dim NbPages = oGdPicturePDF1.GetPageCount()
          For Page As Integer = 1 To NbPages
             status = oGdPictureNewPdf.ClonePage(oGdPicturePDF1, Page)
             If status &lt;&gt; GdPictureStatus.OK Then
                MessageBox.Show("File 1, Error clonning page " + Page.ToString() + vbCrLf + "Status : " + status.ToString())
                Exit For
             End If
          Next
          If status = GdPictureStatus.OK Then
             NbPages = oGdPicturePDF2.GetPageCount()
             For Page As Integer = 1 To NbPages
                status = oGdPictureNewPdf.ClonePage(oGdPicturePDF2, Page)
                If status &lt;&gt; GdPictureStatus.OK Then
                   MessageBox.Show("File 2, Error clonning page " + Page.ToString() + vbCrLf + "Status : " + status.ToString())
                   Exit For
                End If
             Next
          End If
          If status = GdPictureStatus.OK Then
             status = oGdPictureNewPdf.SaveToFile("test_ClonePage_func_1.pdf", False)
             MessageBox.Show("Ok")
          End If
       End If
    Else
       MessageBox.Show("The second file can't be opened")
    End If
 Else
    MessageBox.Show("The first file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DuplicatePage(System.Int32)">
      <summary>
 Duplicates the current page of the PDF to a specific number of new pages maintaining its layer structure and content.
 The duplicate pages will be generated to the end of the document.
 This method is particularly useful for applying a common page header and footer while keeping the smallest file size.
 </summary>
      <param name="Count">The number of page to create.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>The newly created page in the document is automatically selected after the operation.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <example>
        <code description="Duplicate the first page of a pdf three times at the end of the pdf." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       status = oGdPicturePDF.DuplicatePage(3)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_DuplicatePage.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("DuplicatePage failed : " + status.ToString())
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DeletePage(System.Int32)">
      <summary>
 Deletes a page in the PDF.
 </summary>
      <param name="PageNo">The page number to delete. Must be a value between 1 and GetPageCount().</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageCount" />
      <example>
        <code description="Create a new page at the end of the pdf with the same dimensions and rotation of the first page. Then delete the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 1 Then    'more than one page
       oGdPicturePDF.SelectPage(1)
       Dim PageRotation As Integer = oGdPicturePDF.GetPageRotation()
       Dim PageHeight As Single = oGdPicturePDF.GetPageHeight()
       Dim PageWidth As Single = oGdPicturePDF.GetPageWidth()
       oGdPicturePDF.NewPage(PageWidth, PageHeight)
       oGdPicturePDF.SelectPage(oGdPicturePDF.GetPageCount())
       oGdPicturePDF.RotatePage(PageRotation)
       status = oGdPicturePDF.DeletePage(1)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_DeletePage.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("DeletePage failed : " + status.ToString())
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SwapPages(System.Int32,System.Int32)">
      <summary>
 Swaps 2 pages in the PDF.
 </summary>
      <param name="Page1">The page to swap with Page2. Must be a value between 1 and GetPageCount().</param>
      <param name="Page2">The page to swap with Page1. Must be a value between 1 and GetPageCount().</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.MovePage(System.Int32,System.Int32)" />
      <example>
        <code description="Swapping the first and last pages of a pdf." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       If PageCount &gt; 1 Then
          status = oGdPicturePDF.SwapPages(1, PageCount)
          If status = GdPictureStatus.OK Then
             oGdPicturePDF.SaveToFile("test_SwapPages.pdf", False)
             MessageBox.Show("Ok")
          Else
             MessageBox.Show("SwapPages failed : " + status.ToString())
          End If
       Else
          MessageBox.Show("The pdf must contain at least 2 pages")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.MovePage(System.Int32,System.Int32)">
      <summary>
 Move a page in the PDF.
 </summary>
      <param name="PageNo">The page to move. Must be a value between 1 and GetPageCount().</param>
      <param name="Destination">The page destination. Must be a value between 1 and GetPageCount().</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SwapPages(System.Int32,System.Int32)" />
      <example>
        <code description="Moving the first page of the pdf to become the second." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       If PageCount &gt; 1 Then
          status = oGdPicturePDF.MovePage(1, 2)
          If status = GdPictureStatus.OK Then
             oGdPicturePDF.SaveToFile("test_MovePage.pdf", False)
             MessageBox.Show("Ok")
          Else
             MessageBox.Show("MovePage failed : " + status.ToString())
          End If
       Else
          MessageBox.Show("The pdf must contain at least 2 pages for this sample")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageCount">
      <summary>
 Returns the number of pages of the PDF.
 </summary>
      <returns>
 The number of pages of the PDF.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewPDF" />
      <example>
        <code description="Clearing the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       status = oGdPicturePDF.ClearPageContent()
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_ClearPageContent.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("ClearPageContent failed : " + status.ToString())
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageWidth">
      <summary>
 Returns the page width, in current unit defined by the SetMeasurementUnit() method, of the selected page of the PDF.
 </summary>
      <returns>
 The page width.
 </returns>
      <remarks>
        <para>
 The returned value does not correspond to page rotation. If the page is rotate as a multiple of 90 degress, the original width prior to rotation will be returned.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageHeight" />
      <example>
        <code description="Create a new page at the end of the pdf with the same dimensions and rotation as the first page. Then delete the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 1 Then    'more than one page
       oGdPicturePDF.SelectPage(1)
       Dim PageRotation As Integer = oGdPicturePDF.GetPageRotation()
       Dim PageHeight As Single = oGdPicturePDF.GetPageHeight()
       Dim PageWidth As Single = oGdPicturePDF.GetPageWidth()
       oGdPicturePDF.NewPage(PageWidth, PageHeight)
       oGdPicturePDF.SelectPage(oGdPicturePDF.GetPageCount())
       oGdPicturePDF.RotatePage(PageRotation)
       status = oGdPicturePDF.DeletePage(1)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_DeletePage.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("DeletePage failed : " + status.ToString())
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageHeight">
      <summary>
 Returns the page height, in current unit defined by the SetMeasurementUnit() method, of the selected page of the PDF.
 </summary>
      <returns>
 The page height.
 </returns>
      <remarks>
        <para>
 The returned value does not correspond to page rotation. If the page is rotate as a multiple of 90 degress, the original height prior to rotation will be returned.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageWidth" />
      <example>
        <code description="Create a new page at the end of the pdf with the same dimensions and rotation as the first page. Then delete the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 1 Then    'more than one page
       oGdPicturePDF.SelectPage(1)
       Dim PageRotation As Integer = oGdPicturePDF.GetPageRotation()
       Dim PageHeight As Single = oGdPicturePDF.GetPageHeight()
       Dim PageWidth As Single = oGdPicturePDF.GetPageWidth()
       oGdPicturePDF.NewPage(PageWidth, PageHeight)
       oGdPicturePDF.SelectPage(oGdPicturePDF.GetPageCount())
       oGdPicturePDF.RotatePage(PageRotation)
       status = oGdPicturePDF.DeletePage(1)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_DeletePage.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("DeletePage failed : " + status.ToString())
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageBox(GdPicture12.PdfPageBox,System.Single@,System.Single@,System.Single@,System.Single@)">
      <summary>
 Returns the bounds of the specified page box of the selected page of the PDF.
 </summary>
      <param name="PageBox">The page box. A member of the PdfPageBox enumeration.</param>
      <param name="Left">Returns the left position of the page box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">Returns the top position of the page box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Right">Returns the right position of the page box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Bottom">Returns the bottom position of the page box, in current unit defined by the SetMeasurementUnit() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 1 point = 1/72 inch.
 </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageWidth" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageHeight" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetPageBox(GdPicture12.PdfPageBox,System.Single,System.Single,System.Single,System.Single)" />
      <example>
        <code description="Retrieving the position of the first page's media box in millimetres." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status = GdPictureStatus.OK Then
       oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
       oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
       Dim PageLeft, PageTop, PageRight, PageBottom As Single
       oGdPicturePDF.GetPageBox(PdfPageBox.PdfPageBoxMediaBox, PageLeft, PageTop, PageRight, PageBottom)
       MessageBox.Show("First page mediabox : (" + PageLeft.ToString() + " * " + PageTop.ToString() + ")-(" + PageRight.ToString() + "*" + PageBottom.ToString() + ") millimetres")
    Else
       MessageBox.Show("This PDF has no pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetPageBox(GdPicture12.PdfPageBox,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Defines the bounds of a page box of the selected page of the PDF.
 </summary>
      <param name="PageBox">The page box. A member of the PdfPageBox enumeration.</param>
      <param name="Left">The left position of the page box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top position of the page box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Right">The right position of the page box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Bottom">The bottom position of the page box, in current unit defined by the SetMeasurementUnit() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 1 point = 1/72 inch.
 </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageWidth" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageHeight" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageBox(GdPicture12.PdfPageBox,System.Single@,System.Single@,System.Single@,System.Single@)" />
      <example>
        <code description="Cloning the first page, then cropping the clone page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.ClonePage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("ClonePage method failed")
    Else
       oGdPicturePDF.SelectPage(oGdPicturePDF.GetPageCount)
       Dim CropLeft, CropTop, CropRight, CropBottom As Single
       oGdPicturePDF.GetPageBox(PdfPageBox.PdfPageBoxMediaBox, CropLeft, CropTop, CropRight, CropBottom)
       status = oGdPicturePDF.SetPageBox(PdfPageBox.PdfPageBoxCropBox, CropLeft + 10, CropTop + 10, CropRight - 10, CropBottom - 10)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_ClonePage_func_2.pdf", False)
          MessageBox.Show("Ok")
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)">
      <summary>
 Selects a page of the PDF.
 </summary>
      <param name="PageNo">The page number. Should be a value between 1 and GetPageCount(). If the specified parameter is out of range, the nereast page will be automatically selected.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>This method can fail with password protected document not previously unlocked, or on corrupted PDF.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetCurrentPage" />
      <example>
        <code description="Clearing the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       status = oGdPicturePDF.ClearPageContent()
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_ClearPageContent.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("ClearPageContent failed : " + status.ToString())
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetCurrentPage">
      <summary>
 Returns the current page of the PDF.
 </summary>
      <returns>
 The selected page number. A value between 1 and GetPageCount(). 0 if failed.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageCount" />
      <example>
        <code description="Retrieving the current page number of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       Dim CurrentPage As Integer = oGdPicturePDF.GetCurrentPage()
       MessageBox.Show("The current page number is " + CurrentPage.ToString())
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageRotation">
      <summary>
 Returns the page rotation (clockwise), in degrees, of the current page of the PDF.
 </summary>
      <returns>
 The page rotation of the current page, in degrees. Can be 0, 90, 180 or 270.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.RotatePage(System.Int32)" />
      <example>
        <code description="Create a new page at the end of the pdf with the same dimensions and rotation as the first page. Then delete the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 1 Then    'more than one page
       oGdPicturePDF.SelectPage(1)
       Dim PageRotation As Integer = oGdPicturePDF.GetPageRotation()
       Dim PageHeight As Single = oGdPicturePDF.GetPageHeight()
       Dim PageWidth As Single = oGdPicturePDF.GetPageWidth()
       oGdPicturePDF.NewPage(PageWidth, PageHeight)
       oGdPicturePDF.SelectPage(oGdPicturePDF.GetPageCount())
       oGdPicturePDF.RotatePage(PageRotation)
       status = oGdPicturePDF.DeletePage(1)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_DeletePage.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("DeletePage failed : " + status.ToString())
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RotatePage(System.Int32)">
      <summary>
 Rotates clockwise the current page of the PDF by 90, 180 or 270 degrees.
 </summary>
      <param name="Rotation">Angle of rotation. Can be 90, -90, 180, -180, 270, -270 or any multiple of 90.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageRotation" />
      <seealso cref="M:GdPicture12.GdPicturePDF.RotatePageEx(System.Single)" />
      <example>
        <code description="Create a new page at the end of the pdf with the same dimensions and rotation as the first page. Then delete the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 1 Then    'more than one page
       oGdPicturePDF.SelectPage(1)
       Dim PageRotation As Integer = oGdPicturePDF.GetPageRotation()
       Dim PageHeight As Single = oGdPicturePDF.GetPageHeight()
       Dim PageWidth As Single = oGdPicturePDF.GetPageWidth()
       oGdPicturePDF.NewPage(PageWidth, PageHeight)
       oGdPicturePDF.SelectPage(oGdPicturePDF.GetPageCount())
       oGdPicturePDF.RotatePage(PageRotation)
       status = oGdPicturePDF.DeletePage(1)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_DeletePage.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("DeletePage failed : " + status.ToString())
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RotatePageEx(System.Single)">
      <summary>
 Rotates anti-clockwise the content of the current page of the PDF by any angle.
 </summary>
      <param name="Angle">Angle of rotation.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.RotatePage(System.Int32)" />
      <example>
        <code description="Rotates by 125 degrees the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("input.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.RotatePageEx(125)
    oGdPicturePDF.SaveToFile("rotated_125.pdf", False)
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.FlipPage(System.Boolean,System.Boolean)">
      <summary>
 Flips the content of the current page of the PDF horizontally or vertically.
 </summary>
      <param name="FlipX">Set True to horizontally flip the content of the page, False otherwise.</param>
      <param name="FlipY">Set True to vertically flip the content of the page, False otherwise.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Flips vertically the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("input.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.FlipPage(False, True)
    oGdPicturePDF.SaveToFile("flippedY.pdf", False)
 Else
    MessageBox.Show("The file can't be opened")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RotatePages(System.Int32)">
      <summary>
 Rotates clockwise all pages of the PDF by 90, 180 or 270 degrees.
 </summary>
      <param name="Rotation">Angle of rotation. Can be 90, -90, 180, -180, 270, -270 or any multiple of 90.</param>
      <returns>
 The page rotation of the current page.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageRotation" />
      <example>
        <code description="Rotating all pages of a PDF 90 degrees." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       status = oGdPicturePDF.RotatePages(90)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_RotatePages.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("RotatePages failed : " + status.ToString())
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.NormalizePage">
      <summary>
 Normalizes the current page in order to set the page's rotation to 0 and set the CropBox equal to the MediaBox. 
 </summary>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>This method should be used before starting drawing operations which need to ignore the page's rotation and cropping.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetPageMetadata(System.String)">
      <summary>
 Sets the Metadata of the selected page of the PDF.
 </summary>
      <param name="XMP">The metadata.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <example>
        <code description="Setting the metadata for all pages of a pdf." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       Dim pageMetadata As String
       For pageNumber As Integer = 1 To PageCount
          oGdPicturePDF.SelectPage(pageNumber)
          pageMetadata = "&lt;head&gt;" + vbCrLf +
          "&lt;meta name=" + Chr(34) + "description" + Chr(34) + " content=" + Chr(34) + "metadata inside pdf" + Chr(34) + "&gt;" + vbCrLf +
          "&lt;meta name=" + Chr(34) + "keywords" + Chr(34) + " content=" + Chr(34) + "page metadatas" + Chr(34) + "&gt;" + vbCrLf +
          "&lt;meta name=" + Chr(34) + "author" + Chr(34) + " content=" + Chr(34) + "John Doe" + Chr(34) + "&gt;" + vbCrLf +
          "&lt;meta name=" + Chr(34) + "pagenumber" + Chr(34) + " content=" + Chr(34) + pageNumber.ToString() + "&gt;" + vbCrLf +
          "&lt;meta Chrset=" + Chr(34) + "UTF-8" + Chr(34) + "&gt;" + vbCrLf +
          "&lt;/head&gt;"
          oGdPicturePDF.SetPageMetadata(pageMetadata)
       Next
       oGdPicturePDF.SaveToFile("test_SetPageMeta.pdf", False)
       MessageBox.Show("Ok")
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetPageMetadata(System.Byte[])">
      <summary>
 Sets the Metadata of the selected page of the PDF.
 </summary>
      <param name="XMP">The metadata.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetPagePrivateTag(System.String,System.String)">
      <summary>
 Sets a private tag, defined by a name, in the selected page of the PDF.
 </summary>
      <param name="Tag">The Tag name. IE: "Origin".</param>
      <param name="Content">The Tag content. IE: "Application-Xapp".</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPagePrivateTag(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.DeletePagePrivateTag(System.String)" />
      <example>
        <code description="Setting a private tag 'MyTag' for all pages of the pdf." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       For pageNumber As Integer = 1 To PageCount
          oGdPicturePDF.SelectPage(pageNumber)
          oGdPicturePDF.SetPagePrivateTag("MyTag", "My value = " + pageNumber.ToString())
       Next
       oGdPicturePDF.SaveToFile("test_SetPagePrivateTag.pdf", False)
       MessageBox.Show("Ok")
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPagePrivateTag(System.String)">
      <summary>
 Gets a private tag, defined by a name, in the selected page of the PDF.
 </summary>
      <param name="Tag">The Tag name. IE: "Origin".</param>
      <returns>
 The private page tag value previously defined by the SetPagePrivateTag() method.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetPagePrivateTag(System.String,System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.DeletePagePrivateTag(System.String)" />
      <example>
        <code description="Retrieving the value of the private tag 'MyTag' in the first page of the pdf." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       Dim TagValue As String = oGdPicturePDF.GetPagePrivateTag("MyTag")
       If TagValue &lt;&gt; "" Then
          MessageBox.Show(TagValue, "Private Tag 'MyTag' for the first page")
       Else
          MessageBox.Show("The first page does not contain a private tag named 'MyTag'")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DeletePagePrivateTag(System.String)">
      <summary>
 Deletes a private tag, defined by a name, in the selected page of the PDF.
 </summary>
      <param name="Tag">The Tag name. IE: "Origin".</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPagePrivateTag(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetPagePrivateTag(System.String,System.String)" />
      <example>
        <code description="Deleting the private tag 'MyTag' in the first page of the pdf." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim TagValue As String = oGdPicturePDF.GetPagePrivateTag("MyTag")
       If TagValue &lt;&gt; "" Then
          status = oGdPicturePDF.DeletePagePrivateTag("MyTag")
          If status = GdPictureStatus.OK Then
             oGdPicturePDF.SaveToFile("test_DeletePagePrivateTag.pdf", False)
             MessageBox.Show("Ok")
          Else
             MessageBox.Show("DeletePagePrivateTag failed : " + status.ToString())
          End If
       Else
          MessageBox.Show("The first page does not contain a private tag named 'MyTag'")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageMetadata">
      <summary>
 Gets the Metadata of the selected page of the PDF.
 </summary>
      <returns>
 The page metadata. If no metadata is found and empty string is returned.
 </returns>
      <example>
        <code description="Retrieving the metadata of the first page of the pdf." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PageCount As Integer = oGdPicturePDF.GetPageCount()
    If PageCount &gt; 0 Then
       Dim Metadata As String = oGdPicturePDF.GetPageMetadata()
       If Metadata &lt;&gt; "" Then
          MessageBox.Show(Metadata, "Metadata for the first page")
       Else
          MessageBox.Show("The first page does not contain metadata")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.OcrPage(System.String,System.String,System.String,System.Single)">
      <summary>
 Runs optical characters recognition on the current page of the PDF. The recognized text will be added as invisible text on the page.
 The orientation of the page is automatically detected.
 </summary>
      <param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for Spanish, "eng" for English, "fra" for French...
 The name of a dictionary file has a predefined structure: [LANGUAGE].traineddata, where [LANGUAGE] defines the language.
 Multiple dictionaries may be combined with the "+" separator, for instance English with French is "eng+fra".
 Check appendix Tesseract OCR Language Dictionaries for additional information.</param>
      <param name="DictionaryPath">The path into which the engine can find the dictionary files.</param>
      <param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
 * If you want to recognize only numeric you can use "0123456789".
 * If you want to recognize only uppercase alpha you can use
 "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
 Use empty string to recognize all characters.</param>
      <param name="DPI">The resolution to use for the OCR engine. A value of in the range [200 - 300] should give optimal results on A4 documents.
 Values over 300 will cause excessive memory usage.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>This method uses the GdPicture Tesseract OCR engine.</remarks>
      <example>
        <code description="Applying OCR to existing PDF." lang="VB.NET">
 Const resolution As Single = 300
 Const inputPdfPath As String = "test\input.pdf"
 Const outputPdfPath As String = "test\output.pdf"
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile(inputPdfPath, False) = GdPictureStatus.OK Then
    If oGdPicturePDF.IsEncrypted() Then
       'PDF is encrypted, try to decrypt by using empty password
       If Not oGdPicturePDF.SetPassword("") Then
          MessageBox.Show("This PDF is password protected", "operation cancelled", MessageBoxButtons.OK, MessageBoxIcon.Stop)
          Return
       End If
    End If
    For i As Integer = 1 To oGdPicturePDF.GetPageCount()
       If oGdPicturePDF.SelectPage(i) = GdPictureStatus.OK Then
          If oGdPicturePDF.PageHasText(False) Then
             If MessageBox.Show("The page " + i.ToString + " of the pdf already has text. Do you want to skip it?", "The page has text", MessageBoxButtons.YesNo, MessageBoxIcon.Stop) = Windows.Forms.DialogResult.Yes Then
                Continue For
             End If
          End If
          If oGdPicturePDF.OcrPage(txtLang.Text, txtDictsPath.Text, "", resolution) &lt;&gt; GdPictureStatus.OK Then
             MessageBox.Show("OCR problem on page " + i.ToString() + ". Error: " + oGdPicturePDF.GetStat.ToString)
          End If
       Else
          MessageBox.Show("Can't select page " + i.ToString() + ". Error: " + oGdPicturePDF.GetStat.ToString)
       End If
    Next i
    Dim status As GdPictureStatus = oGdPicturePDF.SaveToFile(outputPdfPath, True)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("Can't save file " + outputPdfPath + " . Error: " + status.ToString())
    Else
       Process.Start(outputPdfPath)
    End If
    MessageBox.Show("Done! Please check file " + outputPdfPath)
 Else
    MessageBox.Show("Can't open file: " + inputPdfPath)
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.OcrPages(System.String,System.Int32,System.String,System.String,System.String,System.Single)">
      <summary>
 Runs optical characters recognition on a page range of the PDF using a specific number of threads. 
 The recognized text will be added as invisible text on each processed page.
 Orientation of each page is automatically detected.
 </summary>
      <param name="PageRange">The page range to be processed. For example "1;4;5" to process pages 1, 4 and 5 or "1-5;10" to process pages from 1 to 5 and page 10. Use * to process all pages.</param>
      <param name="ThreadCount">The number of thread to use. Set 0 to let the component to automatically maximize performances.</param>
      <param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for Spanish, "eng" for English, "fra" for French...
 The name of a dictionary file has a predefined structure: [LANGUAGE].traineddata, where [LANGUAGE] defines the language.
 Multiple dictionaries may be combined with the "+" separator, for instance English with French is "eng+fra".
 Check appendix Tesseract OCR Language Dictionaries for additional information.</param>
      <param name="DictionaryPath">The path into which the engine can find the dictionary files.</param>
      <param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
 * If you want to recognize only numeric you can use "0123456789".
 * If you want to recognize only uppercase alpha you can use
 "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
 Use empty string to recognize all characters.</param>
      <param name="DPI">The resolution to use for the OCR engine. A value of in the range [200 - 300] should give optimal results on A4 documents.
 Values over 300 will cause excessive memory usage.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>The PDF to PDF-OCR demo demonstrates usage of this method.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RenderPageToGdPictureImage(System.Single,System.Boolean)">
      <summary>
 Renders the current page of the PDF to a GdPicture image. Produced bitmap will be in a premultiplied 32-bit ARGB format.
 </summary>
      <param name="DPI">The resolution to use for the rendering. A value of 72 will give the same result as Acrobat when the zoom level is 100%.
 Values over 300 will cause excessive memory usage.</param>
      <param name="RenderFormFields">Set to True to render form fields and annotations, else False.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed. Non-zero: GdPicture Image Identifier. The created image.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Rendering the first page of a pdf to a png file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    Dim pageCount As Integer = oGdPicturePDF.GetPageCount()
    If pageCount &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim Image As Integer = oGdPicturePDF.RenderPageToGdPictureImage(200, True)
       Dim status As GdPictureStatus = oGdPictureImaging.SaveAsPNG(Image, "output.png")
       If status = GdPictureStatus.OK Then
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("SaveAsPNG failed : " + status.ToString())
       End If
       oGdPictureImaging.ReleaseGdPictureImage(Image)
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RenderPageToGdPictureImage(System.Single,System.Boolean,System.Drawing.Imaging.PixelFormat)">
      <summary>
 Renders the current page of the PDF to a GdPicture image.
 </summary>
      <param name="DPI">The resolution to use for the rendering. A value of 72 will give the same result as Acrobat when the zoom level is 100%.
 Values over 300 will cause excessive memory usage.</param>
      <param name="RenderFormFields">Set to True to render form fields and annotations, else False.</param>
      <param name="PixelFormat">Defines the pixel format of the generated bitmap. A member of the PixelFormat enumeration.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed. Non-zero: GdPicture Image Identifier. The created image.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Rendering the first page of a pdf to a png file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    Dim pageCount As Integer = oGdPicturePDF.GetPageCount()
    If pageCount &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim Image As Integer = oGdPicturePDF.RenderPageToGdPictureImage(200, True, Imaging.PixelFormat.Format32bppPArgb)
       Dim status As GdPictureStatus = oGdPictureImaging.SaveAsPNG(Image, "output.png")
       If status = GdPictureStatus.OK Then
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("SaveAsPNG failed : " + status.ToString())
       End If
       oGdPictureImaging.ReleaseGdPictureImage(Image)
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RenderPageToGdPictureImage(System.Single,System.Boolean,System.Boolean)">
      <summary>
 Renders the current page of the PDF to a GdPicture image. This overloads allows to render page on a transparent canvas. Produced bitmap will be in 32-bit ARGB format.
 </summary>
      <param name="DPI">The resolution to use for the rendering. A value of 72 will give the same result as Acrobat when the zoom level is 100%.
 Values over 300 will cause excessive memory usage.</param>
      <param name="RenderFormFields">Set to True to render form fields and annotations, else False.</param>
      <param name="KeepTransparency">Set to True to set initial page background transparent. Defaut is False, meaning  white opaque initial background.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed. Non-zero: GdPicture Image Identifier. The created image.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Rendering with transparency the first page of a pdf to a png file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    Dim pageCount As Integer = oGdPicturePDF.GetPageCount()
    If pageCount &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim Image As Integer = oGdPicturePDF.RenderPageToGdPictureImage(200, True, True)
       Dim status As GdPictureStatus = oGdPictureImaging.SaveAsPNG(Image, "output.png")
       If status = GdPictureStatus.OK Then
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("SaveAsPNG failed : " + status.ToString())
       End If
       oGdPictureImaging.ReleaseGdPictureImage(Image)
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RenderPageToGdPictureImage(System.Single,System.Boolean,System.Drawing.Imaging.PixelFormat,GdPicture12.PdfRasterizerEngine)">
      <summary>
 Renders the current page of the PDF to a GdPicture image by choosing the PDF rasterizer engine to use.
 </summary>
      <param name="DPI">The resolution to use for the rendering. A value of 72 will give the same result as Acrobat when the zoom level is 100%.
 Values over 300 will cause excessive memory usage.</param>
      <param name="RenderFormFields">Set to True to render form fields and annotations, else False.</param>
      <param name="PixelFormat">Defines the pixel format of the generated bitmap. A member of the PixelFormat enumeration.</param>
      <param name="RasterizerEngine">A member of the PdfRasterizerEngine enumeration specifying the PDF rasterizer to use.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed. Non-zero: GdPicture Image Identifier. The created image.
 </returns>
      <remarks>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
        <para>
 This method is available in GdPicture.NET for .NET Framework 4.0 and up.
 </para>
      </remarks>
      <example>
        <code description="Rendering the first page of a pdf to a png file using the WPF rasterizer engine." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    Dim pageCount As Integer = oGdPicturePDF.GetPageCount()
    If pageCount &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim Image As Integer = oGdPicturePDF.RenderPageToGdPictureImage(200, True, Imaging.PixelFormat.Format32bppPArgb, PdfRasterizerEngine.PdfRasterizerEngineWPF)
       Dim status As GdPictureStatus = oGdPictureImaging.SaveAsPNG(Image, "output.png")
       If status = GdPictureStatus.OK Then
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("SaveAsPNG failed : " + status.ToString())
       End If
       oGdPictureImaging.ReleaseGdPictureImage(Image)
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RenderPageToGdPictureImageEx(System.Single,System.Boolean)">
      <summary>
 Renders the current page of the PDF to a GdPicture image. This method has a special behavior: If
 the page is bitmap based (a single bitmap covers all the page area) the bitmap will be extracted "as
 is" in its original bitdepth.
 </summary>
      <param name="DPI">The resolution to use for the rendering. A value of 72 will give the same result as Acrobat when the zoom level is 100%.
 Values over 300 will cause excessive memory usage.</param>
      <param name="RenderFormFields">Set to True to render form fields and annotations, else False.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed. Non-zero: GdPicture Image Identifier. The created image.
 </returns>
      <remarks>
        <para>
 This method uses render the images to PixelFormat.Format32bppPArgb.
 </para>
        <para>
 If there is a rotation applied to the PDF, the image will be extracted with the rotation applied to it.
 </para>
        <para>
        </para>
 Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Rendering with transparency the first page of a pdf to a png file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    Dim pageCount As Integer = oGdPicturePDF.GetPageCount()
    If pageCount &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim Image As Integer = oGdPicturePDF.RenderPageToGdPictureImageEx(72, True)
       Dim status As GdPictureStatus = oGdPictureImaging.SaveAsPNG(Image, "output.png")
       If status = GdPictureStatus.OK Then
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("SaveAsPNG failed : " + status.ToString())
       End If
       oGdPictureImaging.ReleaseGdPictureImage(Image)
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RenderPageToGdPictureImageEx(System.Single,System.Boolean,System.Drawing.Imaging.PixelFormat)">
      <summary>
 Renders the current page of the PDF to a GdPicture image. This method has a special behavior: If
 the page is bitmap based (a single bitmap covers all the page area) the bitmap will be extracted "as
 is" in its original bitdepth.
 </summary>
      <param name="DPI">The resolution to use for the rendering. A value of 72 will give the same result as Acrobat when the zoom level is 100%.
 Values over 300 will cause excessive memory usage.</param>
      <param name="RenderFormFields">Set to True to render form fields and annotations, else False.</param>
      <param name="PixelFormat">Defines the pixel format of the generated bitmap. A member of the PixelFormat enumeration.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed. Non-zero: GdPicture Image Identifier. The created image.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Rendering the first page of a pdf to a bmp file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    Dim pageCount As Integer = oGdPicturePDF.GetPageCount()
    If pageCount &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim Image As Integer = oGdPicturePDF.RenderPageToGdPictureImageEx(72, True, Imaging.PixelFormat.Format8bppIndexed)
       Dim status As GdPictureStatus = oGdPictureImaging.SaveAsBMP(Image, "output.bmp")
       If status = GdPictureStatus.OK Then
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("SaveAsBMP failed : " + status.ToString())
       End If
       oGdPictureImaging.ReleaseGdPictureImage(Image)
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageThumbnail(System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
 Creates a High Quality thumbnail (returns a GdPicture image) of custom size of the current page of the PDF.
 This method fits the image thumbnail within a rectangle of specified dimensions having a specified
 background color. Produced bitmap will be in a premultiplied 32-bit ARGB format.
 </summary>
      <param name="Width">The width of the thumbnail to create.</param>
      <param name="Height">The height of the thumbnail to create.</param>
      <param name="BackColor">Color Object. Background color of the thumbnail.</param>
      <returns>
 GdPicture Image Identifier. The Image thumbnail.
 </returns>
      <remarks>
 To delete the created GdPicture image from the memory you must use the ReleaseGdPictureImage() method of the GdPictureImaging class.
 </remarks>
      <example>
        <code description="Creating a thumbnail for each page of a PDF." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    Dim pageCount As Integer = oGdPicturePDF.GetPageCount()
    If pageCount &gt; 0 Then
       For PageNumber = 1 To pageCount
          oGdPicturePDF.SelectPage(PageNumber)
          Dim Image As Integer = oGdPicturePDF.GetPageThumbnail(20, 20, Color.White)
          Dim status As GdPictureStatus = oGdPictureImaging.SaveAsPNG(Image, "test_thumb" + PageNumber.ToString() + ".png")
          If status &lt;&gt; GdPictureStatus.OK Then
             MessageBox.Show("Page " + PageNumber.ToString() + ", SaveAsPNG failed : " + status.ToString())
          End If
          oGdPictureImaging.ReleaseGdPictureImage(Image)
       Next
       MessageBox.Show("Ok")
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageThumbnail(System.Int32,System.Int32,System.Byte,System.Byte,System.Byte)">
      <summary>
 Creates a High Quality thumbnail (returns a GdPicture image) of custom size of the current page of the PDF.
 This method fits the image thumbnail within a rectangle of specified dimensions having a specified
 background color. Produced bitmap will be in a premultiplied 32-bit ARGB format.
 </summary>
      <param name="Width">The width of the thumbnail to create.</param>
      <param name="Height">The height of the thumbnail to create.</param>
      <param name="Red">The amount of red color of the background, between 0 and 255.</param>
      <param name="Green">The amount of green color of the background, between 0 and 255.</param>
      <param name="Blue">The amount of blue color of the background, between 0 and 255.</param>
      <returns>
 GdPicture Image Identifier. The Image thumbnail.
 </returns>
      <remarks>
 To delete the created GdPicture image from the memory you must use the ReleaseGdPictureImage() method of the GdPictureImaging class.
 </remarks>
      <example>
        <code description="Creating a thumbnail for each page of a PDF." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    Dim pageCount As Integer = oGdPicturePDF.GetPageCount()
    If pageCount &gt; 0 Then
       For PageNumber = 1 To pageCount
          oGdPicturePDF.SelectPage(PageNumber)
          Dim Image As Integer = oGdPicturePDF.GetPageThumbnail(20, 20, 255, 255, 255)
          Dim status As GdPictureStatus = oGdPictureImaging.SaveAsPNG(Image, "test_thumb" + PageNumber.ToString() + ".png")
          If status &lt;&gt; GdPictureStatus.OK Then
             MessageBox.Show("Page " + PageNumber.ToString() + ", SaveAsPNG failed : " + status.ToString())
          End If
          oGdPictureImaging.ReleaseGdPictureImage(Image)
       Next
       MessageBox.Show("Ok")
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageThumbnail(System.Int32,System.Int32,System.Drawing.Color,GdPicture12.PdfRasterizerEngine)">
      <summary>
 Creates a High Quality thumbnail (returns a GdPicture image) of custom size of the current page of the PDF.
 This method fits the image thumbnail within a rectangle of specified dimensions having a specified
 background color. Produced bitmap will be in a premultiplied 32-bit ARGB format.
 </summary>
      <param name="Width">The width of the thumbnail to create.</param>
      <param name="Height">The height of the thumbnail to create.</param>
      <param name="BackColor">Color Object. Background color of the thumbnail.</param>
      <param name="RasterizerEngine">A member of the PdfRasterizerEngine enumeration specifying the PDF rasterizer to use.</param>
      <returns>
 GdPicture Image Identifier. The Image thumbnail.
 </returns>
      <remarks>
 To delete the created GdPicture image from the memory you must use the ReleaseGdPictureImage() method of the GdPictureImaging class.
 </remarks>
      <example>
        <code description="Creating a thumbnail for each page of a PDF." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    Dim pageCount As Integer = oGdPicturePDF.GetPageCount()
    If pageCount &gt; 0 Then
       For PageNumber = 1 To pageCount
          oGdPicturePDF.SelectPage(PageNumber)
          Dim Image As Integer = oGdPicturePDF.GetPageThumbnail(20, 20, Color.White, PdfRasterizerEngine.PdfRasterizerEngineGdiplus)
          Dim status As GdPictureStatus = oGdPictureImaging.SaveAsPNG(Image, "test_thumb" + PageNumber.ToString() + ".png")
          If status &lt;&gt; GdPictureStatus.OK Then
             MessageBox.Show("Page " + PageNumber.ToString() + ", SaveAsPNG failed : " + status.ToString())
          End If
          oGdPictureImaging.ReleaseGdPictureImage(Image)
       Next
       MessageBox.Show("Ok")
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.FlattenFormFields">
      <summary>
 Flatten form fields of the PDF document. After calling this method, all form fields located on all pages will be non editable.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Flattening form fields." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       status = oGdPicturePDF.FlattenFormFields()
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_FlattenFormFields.pdf")
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("FlattenFormFields failed")
       End If
    Else
       MessageBox.Show("This PDF does not contain form fields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)">
      <summary>
 Adds a push button form field to the current page of the PDF.
 A pushbutton is a purely interactive control that responds immediately to user input without retaining a permanent value.
 This method uses RGB color space.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="Caption">The widget annotation's normal caption, displayed when it is not interacting with the user. Can be an empty string.</param>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="FontSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
      <param name="TextRed">The amount of red color of the text, between 0 and 255.</param>
      <param name="TextGreen">The amount of green color of the text, between 0 and 255.</param>
      <param name="TextBlue">The amount of blue color of the text, between 0 and 255.</param>
      <returns>
 The newly added form field ID.
 </returns>
      <example>
        <code description="Creating a PDF with a push button form field that targets http://www.gdpicture.com" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SelectPage(1)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontCourier)
 Dim fieldID As Integer = oGdPicturePDF.AddPushButtonFormField(1, 1, 5, 1, "Submit", "Open http://www.gdpicture.com", fontResName, 6, 255, 0, 0)
 Dim actionID As Integer = oGdPicturePDF.NewActionURI("http://www.gdpicture.com", False)
 oGdPicturePDF.SetFormFieldAction(fieldID, actionID)
 oGdPicturePDF.SaveToFile("mydocument.pdf")
 </code>
      </example>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the formfield.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Adds a push button form field to the current page of the PDF.
 A pushbutton is a purely interactive control that responds immediately to user input without retaining a permanent value.
 This method uses CMYK color space.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="Caption">The widget annotation's normal caption, displayed when it is not interacting with the user. Can be an empty string.</param>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="FontSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
      <param name="TextCyan">The amount of Cyan color of the text between 0 and 255.</param>
      <param name="TextMagenta">The amount of Magenta color of the text between 0 and 255.</param>
      <param name="TextYellow">The amount of Yellow color of the text between 0 and 255.</param>
      <param name="TextBlack">The amount of Black (key) color of the text between 0 and 255.</param>
      <returns>
 The newly added form field ID.
 </returns>
      <example>
        <code description="Creating a PDF with a push button form field that targets http://www.gdpicture.com" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SelectPage(1)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontCourier)
 Dim fieldID As Integer = oGdPicturePDF.AddPushButtonFormField(1, 1, 5, 1, "Submit", "Open http://www.gdpicture.com", fontResName, 6, 255, 0, 0)
 Dim actionID As Integer = oGdPicturePDF.NewActionURI("http://www.gdpicture.com", False)
 oGdPicturePDF.SetFormFieldAction(fieldID, actionID)
 oGdPicturePDF.SaveToFile("mydocument.pdf")
 </code>
      </example>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the formfield.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Drawing.Color)">
      <summary>
 Adds a push button form field to the current page of the PDF.
 A pushbutton is a purely interactive control that responds immediately to user input without retaining a permanent value.
 This method uses CMYK color space.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="Caption">The widget annotation's normal caption, displayed when it is not interacting with the user. Can be an empty string.</param>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="FontSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
      <param name="TextColor">The color of the text.</param>
      <returns>
 The newly added form field ID.
 </returns>
      <example>
        <code description="Creating a PDF with a push button form field that targets http://www.gdpicture.com" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SelectPage(1)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontCourier)
 Dim fieldID As Integer = oGdPicturePDF.AddPushButtonFormField(1, 1, 5, 1, "Submit", "Open http://www.gdpicture.com", fontResName, 6, 255, 0, 0)
 Dim actionID As Integer = oGdPicturePDF.NewActionURI("http://www.gdpicture.com", False)
 oGdPicturePDF.SetFormFieldAction(fieldID, actionID)
 oGdPicturePDF.SaveToFile("mydocument.pdf")
 </code>
      </example>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the formfield.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)">
      <summary>
 Adds a text form field to the current page of the PDF.
 A text field is a box or space in which the user can enter text from the keyboard.
 The text may be restricted to a single line or may be permitted to span multiple lines.
 This method uses RGB color space.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="Text">The text included in the formfield. Can be an empty string to create a virgin field.</param>
      <param name="MultiLines">True to accept multiline text, else False.</param>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="FontSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
      <param name="TextRed">The amount of red color of the text, between 0 and 255.</param>
      <param name="TextGreen">The amount of green color of the text, between 0 and 255.</param>
      <param name="TextBlue">The amount of blue color of the text, between 0 and 255.</param>
      <returns>
 The newly added form field ID.
 </returns>
      <example>
        <code description="Creating a blank PDF document with a text form field on the top-left area of the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SelectPage(1)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontCourier)
 Dim fieldID As Integer = oGdPicturePDF.AddTextFormField(1, 1, 5, 1, "Name", "Enter Your Name", False, fontResName, 12, 255, 0, 0)
 oGdPicturePDF.SetFormFieldBorderColor(fieldID, 0, 0, 255) 'Applying Blue border color
 oGdPicturePDF.SetFormFieldBackgroundColor(fieldID, 0, 255, 0) 'Applying Green background color (ugly but for demonstration purpose;))
 oGdPicturePDF.SaveToFile("mydocument.pdf")
 </code>
      </example>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the formfield.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Adds a text form field to the current page of the PDF.
 A text field is a box or space in which the user can enter text from the keyboard.
 The text may be restricted to a single line or may be permitted to span multiple lines.
 This method uses CMYK color space.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="Text">The text included in the formfield. Can be an empty string to create a virgin field.</param>
      <param name="MultiLines">True to accept multiline text, else False.</param>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="FontSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
      <param name="TextCyan">The amount of Cyan color of the text between 0 and 255.</param>
      <param name="TextMagenta">The amount of Magenta color of the text between 0 and 255.</param>
      <param name="TextYellow">The amount of Yellow color of the text between 0 and 255.</param>
      <param name="TextBlack">The amount of Black (key) color of the text between 0 and 255.</param>
      <returns>
 The newly added form field ID.
 </returns>
      <example>
        <code description="Creating a blank PDF document with a text form field on the top-left area of the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SelectPage(1)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontCourier)
 Dim fieldID As Integer = oGdPicturePDF.AddTextFormField(1, 1, 5, 1, "Name", "Enter Your Name", False, fontResName, 12, 255, 0, 0)
 oGdPicturePDF.SetFormFieldBorderColor(fieldID, 0, 0, 255) 'Applying Blue border color
 oGdPicturePDF.SetFormFieldBackgroundColor(fieldID, 0, 255, 0) 'Applying Green background color (ugly but for demonstration purpose;))
 oGdPicturePDF.SaveToFile("mydocument.pdf")
 </code>
      </example>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the formfield.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Drawing.Color)">
      <summary>
 Adds a text form field to the current page of the PDF.
 A text field is a box or space in which the user can enter text from the keyboard.
 The text may be restricted to a single line or may be permitted to span multiple lines.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="Text">The text included in the formfield. Can be an empty string to create a virgin field.</param>
      <param name="MultiLines">True to accept multiline text, else False.</param>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="FontSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
      <param name="TextColor">The color of the text.</param>
      <returns>
 The newly added form field ID.
 </returns>
      <example>
        <code description="Creating a blank PDF document with a text form field on the top-left area of the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SelectPage(1)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontCourier)
 Dim fieldID As Integer = oGdPicturePDF.AddTextFormField(1, 1, 5, 1, "Name", "Enter Your Name", False, fontResName, 12, 255, 0, 0)
 oGdPicturePDF.SetFormFieldBorderColor(fieldID, 0, 0, 255) 'Applying Blue border color
 oGdPicturePDF.SetFormFieldBackgroundColor(fieldID, 0, 255, 0) 'Applying Green background color (ugly but for demonstration purpose;))
 oGdPicturePDF.SaveToFile("mydocument.pdf")
 </code>
      </example>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the formfield.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddCheckBoxFormField(System.Single,System.Single,System.Single,System.Single,System.String,GdPicture12.PdfCheckBoxStyle,System.Boolean,System.Byte,System.Byte,System.Byte)">
      <summary>
 Adds a check box form field to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="Style">A member of the PdfCheckBoxStyle enumeration defining the aspect of the check mark.</param>
      <param name="Checked">The state value for the checkbox.</param>
      <param name="CheckMarkRed">The amount of red color of the text, between 0 and 255.</param>
      <param name="CheckMarkGreen">The amount of green color of the text, between 0 and 255.</param>
      <param name="CheckMarkBlue">The amount of blue color of the text, between 0 and 255.</param>
      <returns>The newly added form field ID.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Creating a blank PDF document and adding a new check box form field." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(PdfPageSizes.PdfPageSizeA4)
 Dim fieldID As Integer = oGdPicturePDF.AddCheckBoxFormField(1, 1, 5, 5, "CheckBox1", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, True, Color.Green, False)
 oGdPicturePDF.SaveToFile("CheckFormField.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddCheckBoxFormField(System.Single,System.Single,System.Single,System.Single,System.String,GdPicture12.PdfCheckBoxStyle,System.Boolean,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Adds a check box form field to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="style">A member of the PdfCheckBoxStyle enumeration defining the aspect of the check mark.</param>
      <param name="Checked">The state value for the checkbox.</param>
      <param name="CheckMarkCyan">The amount of Cyan color of the text between 0 and 255.</param>
      <param name="CheckMarkMagenta">The amount of Magenta color of the text between 0 and 255.</param>
      <param name="CheckMarkYellow">The amount of Yellow color of the text between 0 and 255.</param>
      <param name="CheckMarkBlack">The amount of Black (key) color of the text between 0 and 255.</param>
      <returns>The newly added form field ID.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Creating a blank PDF document and adding a new check box form field." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(PdfPageSizes.PdfPageSizeA4)
 Dim fieldID As Integer = oGdPicturePDF.AddCheckBoxFormField(1, 1, 5, 5, "CheckBox1", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, True, Color.Green, False)
 oGdPicturePDF.SaveToFile("CheckFormField.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddCheckBoxFormField(System.Single,System.Single,System.Single,System.Single,System.String,GdPicture12.PdfCheckBoxStyle,System.Boolean,System.Drawing.Color)">
      <summary>
 Adds a check box form field to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="Style">A member of the PdfCheckBoxStyle enumeration defining the aspect of the check mark.</param>
      <param name="Checked">The state value for the checkbox.</param>
      <param name="CheckMarkColor">The color of the text.</param>
      <returns>The newly added form field ID.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Creating a blank PDF document and adding a new check box form field." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(PdfPageSizes.PdfPageSizeA4)
 Dim fieldID As Integer = oGdPicturePDF.AddCheckBoxFormField(1, 1, 5, 5, "CheckBox1", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, True, Color.Green, False)
 oGdPicturePDF.SaveToFile("CheckFormField.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddListFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte,System.Boolean,System.Boolean)">
      <summary>
 Adds a list form field to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="FontSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
      <param name="TextRed">The amount of red color of the text, between 0 and 255.</param>
      <param name="TextGreen">The amount of green color of the text, between 0 and 255.</param>
      <param name="TextBlue">The amount of blue color of the text, between 0 and 255.</param>
      <param name="Sorted">If set, the field’s option items should be sorted alphabetically. This option is intended for use by form authoring tools, not by PDF viewer applications.</param>
      <param name="Multiselect">If true, more than one of the field’s option items may be selected simultaneously, otherwise no more than one item at a time may be selected.</param>
      <returns>The newly added form field ID.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Creating a blank PDF document and adding a new list form field." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(PdfPageSizes.PdfPageSizeA4)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim fieldID As Integer = oGdPicturePDF.AddListFormField(1, 1, 5, 5, "Vegetables", fontResName, 12, Color.Green, False, True)
 oGdPicturePDF.AddFormFieldItem(fieldID, "Artichoke")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Lentils")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Tomato")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Carrot")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Onion")
 oGdPicturePDF.SaveToFile("vegetables.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddListFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean,System.Boolean)">
      <summary>
 Adds a list form field to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="FontSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
      <param name="TextCyan">The amount of Cyan color of the text between 0 and 255.</param>
      <param name="TextMagenta">The amount of Magenta color of the text between 0 and 255.</param>
      <param name="TextYellow">The amount of Yellow color of the text between 0 and 255.</param>
      <param name="TextBlack">The amount of Black (key) color of the text between 0 and 255.</param>
      <param name="Sorted">If set, the field’s option items should be sorted alphabetically. This option is intended for use by form authoring tools, not by PDF viewer applications.</param>
      <param name="Multiselect">If true, more than one of the field’s option items may be selected simultaneously, otherwise no more than one item at a time may be selected.</param>
      <returns>The newly added form field ID.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Creating a blank PDF document and adding a new list form field." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(PdfPageSizes.PdfPageSizeA4)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim fieldID As Integer = oGdPicturePDF.AddListFormField(1, 1, 5, 5, "Vegetables", fontResName, 12, Color.Green, False, True)
 oGdPicturePDF.AddFormFieldItem(fieldID, "Artichoke")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Lentils")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Tomato")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Carrot")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Onion")
 oGdPicturePDF.SaveToFile("vegetables.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddListFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Single,System.Drawing.Color,System.Boolean,System.Boolean)">
      <summary>
 Adds a list form field to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="FontSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
      <param name="TextColor">The color of the text.</param>
      <param name="Sorted">If set, the field’s option items should be sorted alphabetically. This option is intended for use by form authoring tools, not by PDF viewer applications.</param>
      <param name="Multiselect">If true, more than one of the field’s option items may be selected simultaneously, otherwise no more than one item at a time may be selected.</param>
      <returns>The newly added form field ID.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Creating a blank PDF document and adding a new list form field." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(PdfPageSizes.PdfPageSizeA4)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim fieldID As Integer = oGdPicturePDF.AddListFormField(1, 1, 5, 5, "Vegetables", fontResName, 12, Color.Green, False, True)
 oGdPicturePDF.AddFormFieldItem(fieldID, "Artichoke")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Lentils")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Tomato")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Carrot")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Onion")
 oGdPicturePDF.SaveToFile("vegetables.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddComboFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte,System.Boolean)">
      <summary>
 Adds a combo form field to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="FontSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
      <param name="TextRed">The amount of red color of the text, between 0 and 255.</param>
      <param name="TextGreen">The amount of green color of the text, between 0 and 255.</param>
      <param name="TextBlue">The amount of blue color of the text, between 0 and 255.</param>
      <param name="Sorted">If set, the field’s option items should be sorted alphabetically. This option is intended for use by form authoring tools, not by PDF viewer applications.</param>
      <returns>The newly added form field ID.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Creating a blank PDF document and adding a new combo form field." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(PdfPageSizes.PdfPageSizeA4)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim fieldID As Integer = oGdPicturePDF.AddComboFormField(1, 1, 5, 5, "Vegetables", fontResName, 12, Color.Green, False)
 oGdPicturePDF.AddFormFieldItem(fieldID, "Artichoke")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Lentils")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Tomato")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Carrot")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Onion")
 oGdPicturePDF.SaveToFile("vegetables.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddComboFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean)">
      <summary>
 Adds a combo form field to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="FontSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
      <param name="TextCyan">The amount of Cyan color of the text between 0 and 255.</param>
      <param name="TextMagenta">The amount of Magenta color of the text between 0 and 255.</param>
      <param name="TextYellow">The amount of Yellow color of the text between 0 and 255.</param>
      <param name="TextBlack">The amount of Black (key) color of the text between 0 and 255.</param>
      <param name="Sorted">If set, the field’s option items should be sorted alphabetically. This option is intended for use by form authoring tools, not by PDF viewer applications.</param>
      <returns>The newly added form field ID.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Creating a blank PDF document and adding a new combo form field." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(PdfPageSizes.PdfPageSizeA4)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim fieldID As Integer = oGdPicturePDF.AddComboFormField(1, 1, 5, 5, "Vegetables", fontResName, 12, Color.Green, False)
 oGdPicturePDF.AddFormFieldItem(fieldID, "Artichoke")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Lentils")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Tomato")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Carrot")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Onion")
 oGdPicturePDF.SaveToFile("vegetables.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddComboFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Single,System.Drawing.Color,System.Boolean)">
      <summary>
 Adds a combo form field to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="FontSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
      <param name="TextColor">The color of the text.</param>
      <param name="Sorted">If set, the field’s option items should be sorted alphabetically. This option is intended for use by form authoring tools, not by PDF viewer applications.</param>
      <returns>The newly added form field ID.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Creating a blank PDF document and adding a new combo form field." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(PdfPageSizes.PdfPageSizeA4)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim fieldID As Integer = oGdPicturePDF.AddComboFormField(1, 1, 5, 5, "Vegetables", fontResName, 12, Color.Green, False)
 oGdPicturePDF.AddFormFieldItem(fieldID, "Artichoke")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Lentils")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Tomato")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Carrot")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Onion")
 oGdPicturePDF.SaveToFile("vegetables.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddRadioButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,GdPicture12.PdfCheckBoxStyle,System.Byte,System.Byte,System.Byte)">
      <summary>
 Adds a radio button form field to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="GroupName">The name of the group of fields. All radio buttons with the same GroupName make a Group.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="Style">A member of the PdfCheckBoxStyle enumeration defining the aspect of the check mark.</param>
      <param name="CheckMarkRed">The amount of red color of the text, between 0 and 255.</param>
      <param name="CheckMarkGreen">The amount of green color of the text, between 0 and 255.</param>
      <param name="CheckMarkBlue">The amount of blue color of the text, between 0 and 255.</param>
      <returns>The newly added form field ID.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.
 Use unique values for FieldName.
 the radio button created with the first occurence of GroupName will be checked
 only one radio button in a group can be checked at a time
 </remarks>
      <example>
        <code description="Creating a blank PDF document and adding two groups of three Radio Button form fields." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(PdfPageSizes.PdfPageSizeA4)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(1, 1, 5, 5, "Group1", "Group1Radio1", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(10, 1, 5, 5, "Group1", "Group1Radio2", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(15, 1, 5, 5, "Group1", "Group1Radio3", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(1, 10, 5, 5, "Group2", "Group2Radio1", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(10, 10, 5, 5, "Group2", "Group2Radio2", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(15, 10, 5, 5, "Group2", "Group2Radio3", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 oGdPicturePDF.SaveToFile("RadioFormField.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddRadioButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,GdPicture12.PdfCheckBoxStyle,System.Boolean,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Adds a radio button form field to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="GroupName">The name of the group of fields. All radio buttons with the same GroupName make a Group.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="Style">A member of the PdfCheckBoxStyle enumeration defining the aspect of the check mark.</param>
      <param name="CheckMarkCyan">The amount of Cyan color of the text between 0 and 255.</param>
      <param name="CheckMarkMagenta">The amount of Magenta color of the text between 0 and 255.</param>
      <param name="CheckMarkYellow">The amount of Yellow color of the text between 0 and 255.</param>
      <param name="CheckMarkBlack">The amount of Black (key) color of the text between 0 and 255.</param>
      <returns>The newly added form field ID.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.
 Use unique values for FieldName.
 the radio button created with the first occurence of GroupName will be checked
 only one radio button in a group can be checked at a time
 </remarks>
      <example>
        <code description="Creating a blank PDF document and adding two groups of three Radio Button form fields." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(PdfPageSizes.PdfPageSizeA4)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(1, 1, 5, 5, "Group1", "Group1Radio1", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(10, 1, 5, 5, "Group1", "Group1Radio2", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(15, 1, 5, 5, "Group1", "Group1Radio3", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(1, 10, 5, 5, "Group2", "Group2Radio1", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(10, 10, 5, 5, "Group2", "Group2Radio2", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(15, 10, 5, 5, "Group2", "Group2Radio3", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 oGdPicturePDF.SaveToFile("RadioFormField.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddRadioButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,GdPicture12.PdfCheckBoxStyle,System.Boolean,System.Drawing.Color)">
      <summary>
 Adds a radio button form field to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="GroupName">The name of the group of fields. All radio buttons with the same GroupName make a Group.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <param name="Style">A member of the PdfCheckBoxStyle enumeration defining the aspect of the check mark.</param>
      <param name="CheckMarkColor">The color of the text.</param>
      <returns>The newly added form field ID.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.
 Use unique values for FieldName.
 the radio button created with the first occurence of GroupName will be checked
 only one radio button in a group can be checked at a time
 </remarks>
      <example>
        <code description="Creating a blank PDF document and adding two groups of three Radio Button form fields." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(PdfPageSizes.PdfPageSizeA4)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(1, 1, 5, 5, "Group1", "Group1Radio1", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(10, 1, 5, 5, "Group1", "Group1Radio2", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(15, 1, 5, 5, "Group1", "Group1Radio3", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(1, 10, 5, 5, "Group2", "Group2Radio1", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(10, 10, 5, 5, "Group2", "Group2Radio2", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 Dim fieldID As Integer = oGdPicturePDF.AddRadioButtonFormField(15, 10, 5, 5, "Group2", "Group2Radio3", PdfCheckBoxStyle.PdfCheckBoxStyleCheck, Color.Green, False)
 oGdPicturePDF.SaveToFile("RadioFormField.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddSignatureFormField(System.Single,System.Single,System.Single,System.Single,System.String)">
      <summary>
 Add a signature place holder in the current page
 </summary>
      <param name="Left">The left coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the formfield, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FieldName">The name of the field. Can be an empty string but it is recommended to set a value.</param>
      <returns>The newly added form field ID.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddFormFieldItem(System.Int32,System.String)">
      <summary>
 Adds an item to a Choice Field form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddListFormField() or AddComboFormField().</param>
      <param name="Text">A text representing the option to be displayed.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Creating a blank PDF document and adding a new list form field." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(PdfPageSizes.PdfPageSizeA4)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim fieldID As Integer = oGdPicturePDF.AddListFormField(1, 1, 5, 5, "Vegetables", fontResName, 12, Color.Green, False, True)
 oGdPicturePDF.AddFormFieldItem(fieldID, "Artichoke")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Lentils")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Tomato")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Carrot")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Onion")
 oGdPicturePDF.SaveToFile("vegetables.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddFormFieldItem(System.Int32,System.String,System.String)">
      <summary>
 Adds an item to a Choice Field form field of the PDF by specifying its displayed text and export value.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddListFormField() or AddComboFormField().</param>
      <param name="Text">A text representing the option to be displayed.</param>
      <param name="Value">The option’s export value.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Creating a blank PDF document and adding a new list form field." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(PdfPageSizes.PdfPageSizeA4)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim fieldID As Integer = oGdPicturePDF.AddListFormField(1, 1, 5, 5, "Vegetables", fontResName, 12, Color.Green, False, True)
 oGdPicturePDF.AddFormFieldItem(fieldID, "Artichoke")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Lentils")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Tomato")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Carrot")
 oGdPicturePDF.AddFormFieldItem(fieldID, "Onion")
 oGdPicturePDF.SaveToFile("vegetables.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldItemCount(System.Int32)">
      <summary>
 Returns the number of available items on a Choice or a Radio Button Group form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddListFormField() or AddComboFormField().</param>
      <returns>The number of available items.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Parsing values of Choice form fields of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("vegetables.pdf", False)
 For i As Integer = 0 To oGdPicturePDF.GetFormFieldsCount() - 1
    Dim fieldID As Integer = oGdPicturePDF.GetFormFieldId(i)
    If oGdPicturePDF.GetFormFieldType(fieldID) = PdfFormFieldType.PdfFormFieldTypeChoice Then
       MessageBox.Show("Retrieving items of form field " + oGdPicturePDF.GetFormFieldTitle(fieldID))
       Dim itemCount As Integer = oGdPicturePDF.GetFormFieldItemCount(fieldID)
       If oGdPicturePDF.GetStat = GdPictureStatus.OK Then
          For j As Integer = 0 To itemCount - 1
             MessageBox.Show("Item " + (j + 1).ToString() + ": " + oGdPicturePDF.GetFormFieldItemText(fieldID, j))
          Next
       End If
    End If
 Next
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldItemText(System.Int32,System.Int32)">
      <summary>
 Returns the text of a specific item of a Choice form field or a Radio Button Group.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddListFormField() or AddComboFormField().</param>
      <param name="ItemIdx">The item index. Must be a value between 0 and GetFormFieldItemCount() - 1.</param>
      <returns>The text of the item.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Parsing values of Choice form fields of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("vegetables.pdf", False)
 For i As Integer = 0 To oGdPicturePDF.GetFormFieldsCount() - 1
    Dim fieldID As Integer = oGdPicturePDF.GetFormFieldId(i)
    If oGdPicturePDF.GetFormFieldType(fieldID) = PdfFormFieldType.PdfFormFieldTypeChoice Then
       MessageBox.Show("Retrieving items of form field " + oGdPicturePDF.GetFormFieldTitle(fieldID))
       Dim itemCount As Integer = oGdPicturePDF.GetFormFieldItemCount(fieldID)
       If oGdPicturePDF.GetStat = GdPictureStatus.OK Then
          For j As Integer = 0 To itemCount - 1
             MessageBox.Show("Item " + (j + 1).ToString() + ": " + oGdPicturePDF.GetFormFieldItemText(fieldID, j))
          Next
       End If
    End If
 Next
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DeleteFormFieldItem(System.Int32,System.Int32)">
      <summary>
 Removes a specific item of a Choice form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddListFormField() or AddComboFormField().</param>
      <param name="ItemIdx">The item index. Must be a value between 0 and GetFormFieldItemCount() - 1.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Removing the first item of a choice form field and adding another one to the end of the list." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("vegetables.pdf", True)
 For i As Integer = 0 To oGdPicturePDF.GetFormFieldsCount() - 1
    Dim fieldID As Integer = oGdPicturePDF.GetFormFieldId(i)
    If oGdPicturePDF.GetFormFieldType(fieldID) = PdfFormFieldType.PdfFormFieldTypeChoice Then
       If oGdPicturePDF.GetFormFieldTitle(fieldID) = "Vegetables" Then
          oGdPicturePDF.DeleteFormFieldItem(fieldID, 0)
          oGdPicturePDF.AddFormFieldItem(fieldID, "pizza!")
       End If
    End If
 Next
 oGdPicturePDF.SaveToFileInc("vegetables.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldNormalCaption(System.Int32)">
      <summary>
 Gets the normal caption of a specific button form field of the PDF. This caption is displayed when the button form field is not interacting with the user.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddPushButtonFormField(), AddListFormField() or AddComboFormField().</param>
      <returns>
 The normal caption of the form field.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFormFieldNormalCaption(System.Int32,System.String)" />
      <example>
        <code description="Search all formfields for the caption of the push-buttons." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim Found As Boolean = False
       For fieldIdx As Integer = 0 To formFieldCount - 1
          Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(fieldIdx)
          Dim FieldType As PdfFormFieldType = oGdPicturePDF.GetFormFieldType(FieldId)
          If FieldType = PdfFormFieldType.PdfFormFieldTypePushButton Then
             MessageBox.Show("Field N°" + fieldIdx.ToString() + vbCrLf +
             "This Normal Caption is : " + oGdPicturePDF.GetFormFieldNormalCaption(FieldId), "PushButtons list")
             Found = True
          End If
       Next
       If Not Found Then
          MessageBox.Show("This pdf does not contain PushButtons.")
       Else
          MessageBox.Show("All PushButtons listed")
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldNormalCaption(System.Int32,System.String)">
      <summary>
 Sets the normal caption of a specific button form field of the PDF. This caption is displayed when the button form field is not interacting with the user.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddPushButtonFormField(), AddListFormField() or AddComboFormField().</param>
      <param name="NormalCaption">The form field normal caption.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldNormalCaption(System.Int32)" />
      <example>
        <code description="Changing the captions of all the push buttons." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim Found As Boolean = False
       For FieldIdx As Integer = 0 To formFieldCount - 1
          Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(FieldIdx)
          Dim FieldType As PdfFormFieldType = oGdPicturePDF.GetFormFieldType(FieldId)
          If FieldType = PdfFormFieldType.PdfFormFieldTypePushButton Then
             Found = True
             oGdPicturePDF.SetFormFieldNormalCaption(FieldId, oGdPicturePDF.GetFormFieldNormalCaption(FieldId) + "_" + FieldIdx.ToString())
          End If
       Next
       If Found Then
          oGdPicturePDF.SaveToFile("test_SetFormFieldNormalCaption.pdf")
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("This PDF does not contain PushButtons")
       End If
    Else
       MessageBox.Show("This PDFes do not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldBorderColor(System.Int32)">
      <summary>
 Returns the border color of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <returns>
 The border color of the formfield.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFormFieldBorderColor(System.Int32,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Retrieving the information of border of the first formfield." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(0)   'get first formfield
       Dim FieldColor As Color = oGdPicturePDF.GetFormFieldBorderColor(FieldId)
       Dim FieldBorderWidth As Single
       Dim FieldBorderStyle As PdfAnnotationBorderStyle
       FieldBorderStyle = PdfAnnotationBorderStyle.PdfAnnotationBorderStyleSolid
       Dim FieldDashOn, FieldDashOff As Single
       oGdPicturePDF.GetFormFieldBorderStyle(FieldId, FieldBorderWidth, FieldBorderStyle, FieldDashOn, FieldDashOff)
       MessageBox.Show("Border color : " + FieldColor.ToString() + vbCrLf +
       "Border width : " + FieldBorderWidth.ToString() + vbCrLf +
       "Border style : " + FieldBorderStyle.ToString() + vbCrLf +
       "Line Dash : " + FieldDashOn.ToString() + " / " + FieldDashOff.ToString())
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldBorderColor(System.Int32,System.Byte,System.Byte,System.Byte)">
      <summary>
 Sets the border color of a specific form field of the PDF. This method uses RGB color space.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <param name="Red">The amount of red color between 0 and 255.</param>
      <param name="Green">The amount of green color between 0 and 255.</param>
      <param name="Blue">The amount of blue color between 0 and 255.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldBorderColor(System.Int32)" />
      <example>
        <code description="Changing the border color of the text form fields." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim Found As Boolean = False
       For FieldIdx As Integer = 0 To formFieldCount - 1
          Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(FieldIdx)
          Dim FieldType As PdfFormFieldType = oGdPicturePDF.GetFormFieldType(FieldId)
          If FieldType = PdfFormFieldType.PdfFormFieldTypeText Then
             Found = True
             oGdPicturePDF.SetFormFieldBorderColor(FieldId, 255, 0, 0)
             oGdPicturePDF.SetFormFieldBorderStyle(FieldId, 2, PdfAnnotationBorderStyle.PdfAnnotationBorderStyleBeveled, 0, 0)
          End If
       Next
       If Found Then
          oGdPicturePDF.SaveToFile("test_SetFormFieldBorderColor.pdf")
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("This PDF does not contain text formfields")
       End If
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldBorderColor(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Sets the border color of a specific form field of the PDF. This method uses CMYK color space.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <param name="Cyan">The amount of Cyan color between 0 and 255.</param>
      <param name="Magenta">The amount of Magenta color between 0 and 255.</param>
      <param name="Yellow">The amount of Yellow color between 0 and 255.</param>
      <param name="Black">The amount of Black (key) color between 0 and 255.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldBorderColor(System.Int32)" />
      <example>
        <code description="Changing the border color and style of the text form fields." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim Found As Boolean = False
       For FieldIdx As Integer = 0 To formFieldCount - 1
          Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(FieldIdx)
          Dim FieldType As PdfFormFieldType = oGdPicturePDF.GetFormFieldType(FieldId)
          If FieldType = PdfFormFieldType.PdfFormFieldTypeText Then
             Found = True
             oGdPicturePDF.SetFormFieldBorderColor(FieldId, 10, 20, 45, 10)
             oGdPicturePDF.SetFormFieldBorderStyle(FieldId, 2, PdfAnnotationBorderStyle.PdfAnnotationBorderStyleBeveled, 0, 0)
          End If
       Next
       If Found Then
          oGdPicturePDF.SaveToFile("test_SetFormFieldBorderColor.pdf")
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("This PDF does not contain text formfields")
       End If
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldBorderColor(System.Int32,System.Drawing.Color)">
      <summary>
 Sets the border color of a specific form field of the PDF. This method uses CMYK color space.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <param name="BorderColor">The background color. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldBorderColor(System.Int32)" />
      <example>
        <code description="Changing the border color and style of the text form fields." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim Found As Boolean = False
       For FieldIdx As Integer = 0 To formFieldCount - 1
          Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(FieldIdx)
          Dim FieldType As PdfFormFieldType = oGdPicturePDF.GetFormFieldType(FieldId)
          If FieldType = PdfFormFieldType.PdfFormFieldTypeText Then
             Found = True
             oGdPicturePDF.SetFormFieldBorderColor(FieldId, Color.Bisque)
             oGdPicturePDF.SetFormFieldBorderStyle(FieldId, 2, PdfAnnotationBorderStyle.PdfAnnotationBorderStyleBeveled, 0, 0)
          End If
       Next
       If Found Then
          oGdPicturePDF.SaveToFile("test_SetFormFieldBorderColor.pdf")
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("This PDF does not contain text formfields")
       End If
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldBorderStyle(System.Int32,System.Single,GdPicture12.PdfAnnotationBorderStyle,System.Single,System.Single)">
      <summary>
 Sets the border style of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <param name="BorderWidth">The width of the border, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="BorderStyle">The border style. A member of the PdfAnnotationBorderStyle enumeration.</param>
      <param name="DashOn">The width of the dashes, in current unit defined by the SetMeasurementUnit() method. Used only if the BorderStyle is equal to PdfAnnotationBorderStyleDashed, in other cases this parameter will be ignored.</param>
      <param name="DashOff">The width of the space between the dashes, in current unit defined by the SetMeasurementUnit() method. Used only if the BorderStyle is equal to PdfAnnotationBorderStyleDashed, in other cases this parameter will be ignored.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldBorderStyle(System.Int32,System.Single@,GdPicture12.PdfAnnotationBorderStyle@,System.Single@,System.Single@)" />
      <example>
        <code description="Changing the border color and style of all the text form fields." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim Found As Boolean = False
       For FieldIdx As Integer = 0 To formFieldCount - 1
          Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(FieldIdx)
          Dim FieldType As PdfFormFieldType = oGdPicturePDF.GetFormFieldType(FieldId)
          If FieldType = PdfFormFieldType.PdfFormFieldTypeText Then
             Found = True
             oGdPicturePDF.SetFormFieldBorderColor(FieldId, Color.Bisque)
             oGdPicturePDF.SetFormFieldBorderStyle(FieldId, 2, PdfAnnotationBorderStyle.PdfAnnotationBorderStyleBeveled, 0, 0)
          End If
       Next
       If Found Then
          oGdPicturePDF.SaveToFile("test_SetFormFieldBorderColor.pdf")
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("This PDF does not contain text formfields")
       End If
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldBorderStyle(System.Int32,System.Single@,GdPicture12.PdfAnnotationBorderStyle@,System.Single@,System.Single@)">
      <summary>
 Gets the border style of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <param name="BorderWidth">Returns the width of the border, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="BorderStyle">Returns the border style. A member of the PdfAnnotationBorderStyle enumeration.</param>
      <param name="DashOn">Returns the width of the dashes, in current unit defined by the SetMeasurementUnit() method. Used only if the BorderStyle is equal to PdfAnnotationBorderStyleDashed, in other cases this parameter will be ignored.</param>
      <param name="DashOff">Returns the width of the space between the dashes, in current unit defined by the SetMeasurementUnit() method. Used only if the BorderStyle is equal to PdfAnnotationBorderStyleDashed, in other cases this parameter will be ignored.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFormFieldBorderStyle(System.Int32,System.Single,GdPicture12.PdfAnnotationBorderStyle,System.Single,System.Single)" />
      <example>
        <code description="Retrieve the information of the border of the first form field." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(0)   'get first formfield
       Dim FieldColor As Color = oGdPicturePDF.GetFormFieldBorderColor(FieldId)
       Dim FieldBorderWidth As Single
       Dim FieldBorderStyle As PdfAnnotationBorderStyle
       FieldBorderStyle = PdfAnnotationBorderStyle.PdfAnnotationBorderStyleSolid
       Dim FieldDashOn, FieldDashOff As Single
       oGdPicturePDF.GetFormFieldBorderStyle(FieldId, FieldBorderWidth, FieldBorderStyle, FieldDashOn, FieldDashOff)
       MessageBox.Show("Border color : " + FieldColor.ToString() + vbCrLf +
       "Border width : " + FieldBorderWidth.ToString() + vbCrLf +
       "Border style : " + FieldBorderStyle.ToString() + vbCrLf +
       "Line Dash : " + FieldDashOn.ToString() + " / " + FieldDashOff.ToString())
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldBackgroundColor(System.Int32,System.Byte,System.Byte,System.Byte)">
      <summary>
 Sets the background color of a specific form field of the PDF. This method uses RGB color space.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <param name="Red">The amount of red color between 0 and 255.</param>
      <param name="Green">The amount of green color between 0 and 255.</param>
      <param name="Blue">The amount of blue color between 0 and 255.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldBackgroundColor(System.Int32)" />
      <example>
        <code description="Set all formfields' background colors to red." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       For FieldIdx As Integer = 0 To formFieldCount - 1
          Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(FieldIdx)
          oGdPicturePDF.SetFormFieldBackgroundColor(FieldId, 255, 0, 0)
       Next
       oGdPicturePDF.SaveToFile("test_SetFormFieldBackgroundColor.pdf")
       MessageBox.Show("Ok")
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldBackgroundColor(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Sets the background color of a specific form field of the PDF. This method uses CMYK color space.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <param name="Cyan">The amount of Cyan color between 0 and 255.</param>
      <param name="Magenta">The amount of Magenta color between 0 and 255.</param>
      <param name="Yellow">The amount of Yellow color between 0 and 255.</param>
      <param name="Black">The amount of Black (key) color between 0 and 255.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldBackgroundColor(System.Int32)" />
      <example>
        <code description="Changing all the formfields' background colors." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       For FieldIdx As Integer = 0 To formFieldCount - 1
          Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(FieldIdx)
          oGdPicturePDF.SetFormFieldBackgroundColor(FieldId, 10, 20, 45, 10)
       Next
       oGdPicturePDF.SaveToFile("test_SetFormFieldBackgroundColor.pdf")
       MessageBox.Show("Ok")
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldBackgroundColor(System.Int32,System.Drawing.Color)">
      <summary>
 Sets the background color of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <param name="BackgroundColor">The background color. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldBackgroundColor(System.Int32)" />
      <example>
        <code description="Set all the formfieldss background colors to bisque." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       For FieldIdx As Integer = 0 To formFieldCount - 1
          Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(FieldIdx)
          oGdPicturePDF.SetFormFieldBackgroundColor(FieldId, Color.Bisque)
       Next
       oGdPicturePDF.SaveToFile("test_SetFormFieldBackgroundColor.pdf")
       MessageBox.Show("Ok")
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldBackgroundColor(System.Int32)">
      <summary>
 Returns the background color of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <returns>
 The background color of the formfield.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFormFieldBackgroundColor(System.Int32,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Retrieve the background color of the first formfield." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(0)   'get first formfield
       Dim FieldColor As Color = oGdPicturePDF.GetFormFieldBackgroundColor(FieldId)
       MessageBox.Show("Background color : " + FieldColor.ToString())
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldsCount">
      <summary>
 Returns the number of available form fields on the PDF.
 </summary>
      <returns>
 The number of form fields.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving information on the existing formfields in a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
 For i As Integer = 0 To formFieldCount - 1
    Dim fieldID As Integer = oGdPicturePDF.GetFormFieldId(i)
    Dim fieldsInfo As String = ""
    fieldsInfo += "form field No: " + (i + 1).ToString() + Chr(10)
    fieldsInfo += "form field Page: " + oGdPicturePDF.GetFormFieldPage(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Type: " + oGdPicturePDF.GetFormFieldType(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Child count: " + oGdPicturePDF.GetFormFieldChildCount(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Title: " + oGdPicturePDF.GetFormFieldTitle(fieldID) + Chr(10)
    fieldsInfo += "form field Value: " + oGdPicturePDF.GetFormFieldValue(fieldID) + Chr(10)
    fieldsInfo += "form field Font resource name: " + oGdPicturePDF.GetFormFieldFontName(fieldID) + Chr(10)
    fieldsInfo += "form field Font size: " + oGdPicturePDF.GetFormFieldFontSize(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Checked: " + oGdPicturePDF.GetFormFieldChecked(fieldID).ToString + Chr(10)
    MessageBox.show(fieldsInfo)
 Next
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)">
      <summary>
 Returns the ID of a specific form field of the PDF.
 </summary>
      <param name="FieldIdx">The form field index, between 0 and GetFormFieldsCount() -1.</param>
      <returns>The form field ID.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving information on the existing formfields in a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
 For i As Integer = 0 To formFieldCount - 1
    Dim fieldID As Integer = oGdPicturePDF.GetFormFieldId(i)
    Dim fieldsInfo As String = ""
    fieldsInfo += "form field No: " + (i + 1).ToString() + Chr(10)
    fieldsInfo += "form field Page: " + oGdPicturePDF.GetFormFieldPage(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Type: " + oGdPicturePDF.GetFormFieldType(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Child count: " + oGdPicturePDF.GetFormFieldChildCount(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Title: " + oGdPicturePDF.GetFormFieldTitle(fieldID) + Chr(10)
    fieldsInfo += "form field Value: " + oGdPicturePDF.GetFormFieldValue(fieldID) + Chr(10)
    fieldsInfo += "form field Font resource name: " + oGdPicturePDF.GetFormFieldFontName(fieldID) + Chr(10)
    fieldsInfo += "form field Font size: " + oGdPicturePDF.GetFormFieldFontSize(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Checked: " + oGdPicturePDF.GetFormFieldChecked(fieldID).ToString + Chr(10)
    MessageBox.show(fieldsInfo)
 Next
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldsCount" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldTextAlignment(System.Int32)">
      <summary>
 Returns the justification used in displaying the text in a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <returns>
 A member of the TextAlignment enumeration.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFormFieldTextAlignment(System.Int32,GdPicture12.TextAlignment)" />
      <example>
        <code description="Retrieving the information of first formfield." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(0)   'get first formfield
       Dim FieldPage As Integer = oGdPicturePDF.GetFormFieldPage(FieldId)
       Dim FieldAlign As TextAlignment = oGdPicturePDF.GetFormFieldTextAlignment(FieldId)
       Dim FieldTitle As String = oGdPicturePDF.GetFormFieldTitle(FieldId)
       Dim FieldMaxLen As Integer = oGdPicturePDF.GetFormFieldMaxLen(FieldId)
       Dim FieldMultiLine As Boolean = oGdPicturePDF.GetFormFieldMultiLine(FieldId)
       Dim FieldLeft, FieldTop, FieldRight, FieldBottom As Single
       status = oGdPicturePDF.GetFormFieldLocation(FieldId, FieldLeft, FieldTop, FieldRight, FieldBottom)
       If status = GdPictureStatus.OK Then
          MessageBox.Show("Page : " + FieldPage.ToString() + vbCrLf +
          "Position : (" + FieldLeft.ToString() + "*" + FieldTop.ToString() + ")-(" + FieldRight.ToString() + "*" + FieldBottom.ToString() + ")" + vbCrLf +
          "Text MaxLen : " + FieldMaxLen.ToString() + vbCrLf +
          "Text Multiline : " + FieldMultiLine.ToString() + vbCrLf +
          "Text Alignment : " + FieldAlign.ToString())
       End If
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldTextAlignment(System.Int32,GdPicture12.TextAlignment)">
      <summary>
 Set the justification to be used in displaying the text in a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <param name="TextAlign">The justification mode. A member of the TextAlignment enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldTextAlignment(System.Int32)" />
      <example>
        <code description="Changing the comportment (max length, multiline ability, and alignment) of every text formfield." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim Found As Boolean = False
       For FieldIdx As Integer = 0 To formFieldCount - 1
          Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(FieldIdx)
          Dim FieldType As PdfFormFieldType = oGdPicturePDF.GetFormFieldType(FieldId)
          If FieldType = PdfFormFieldType.PdfFormFieldTypeText Then
             Found = True
             oGdPicturePDF.SetFormFieldMaxLen(FieldId, 60)
             oGdPicturePDF.SetFormFieldMultiLine(FieldId, True)
             oGdPicturePDF.SetFormFieldTextAlignment(FieldId, TextAlignment.TextAlignmentCenter)
          End If
       Next
       If Found Then
          oGdPicturePDF.SaveToFile("test_SetFormFieldMaxLen.pdf")
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("This PDF does not contain text formfield")
       End If
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldTitle(System.Int32)">
      <summary>
 Returns the title of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <returns>
 The title of the form field.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving information on the existing formfields in a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
 For i As Integer = 0 To formFieldCount - 1
    Dim fieldID As Integer = oGdPicturePDF.GetFormFieldId(i)
    Dim fieldsInfo As String = ""
    fieldsInfo += "form field No: " + (i + 1).ToString() + Chr(10)
    fieldsInfo += "form field Page: " + oGdPicturePDF.GetFormFieldPage(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Type: " + oGdPicturePDF.GetFormFieldType(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Child count: " + oGdPicturePDF.GetFormFieldChildCount(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Title: " + oGdPicturePDF.GetFormFieldTitle(fieldID) + Chr(10)
    fieldsInfo += "form field Value: " + oGdPicturePDF.GetFormFieldValue(fieldID) + Chr(10)
    fieldsInfo += "form field Font resource name: " + oGdPicturePDF.GetFormFieldFontName(fieldID) + Chr(10)
    fieldsInfo += "form field Font size: " + oGdPicturePDF.GetFormFieldFontSize(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Checked: " + oGdPicturePDF.GetFormFieldChecked(fieldID).ToString + Chr(10)
    MessageBox.show(fieldsInfo)
 Next
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldChildCount(System.Int32)">
      <summary>
 Returns the number of available fields children in a specific form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId() or GetFormFieldChildID().</param>
      <returns>
 The number of form fields children.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving information on the existing formfields in a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
 For i As Integer = 0 To formFieldCount - 1
    Dim fieldID As Integer = oGdPicturePDF.GetFormFieldId(i)
    Dim fieldsInfo As String = ""
    fieldsInfo += "form field No: " + (i + 1).ToString() + Chr(10)
    fieldsInfo += "form field Page: " + oGdPicturePDF.GetFormFieldPage(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Type: " + oGdPicturePDF.GetFormFieldType(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Child count: " + oGdPicturePDF.GetFormFieldChildCount(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Title: " + oGdPicturePDF.GetFormFieldTitle(fieldID) + Chr(10)
    fieldsInfo += "form field Value: " + oGdPicturePDF.GetFormFieldValue(fieldID) + Chr(10)
    fieldsInfo += "form field Font resource name: " + oGdPicturePDF.GetFormFieldFontName(fieldID) + Chr(10)
    fieldsInfo += "form field Font size: " + oGdPicturePDF.GetFormFieldFontSize(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Checked: " + oGdPicturePDF.GetFormFieldChecked(fieldID).ToString + Chr(10)
    MessageBox.show(fieldsInfo)
 Next
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)">
      <summary>
 Returns the ID of a specific form field child of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId().</param>
      <param name="FieldIdx">The form field index, between 0 and GetFormFieldChildCount() -1.</param>
      <returns>
 The child form field ID.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildCount(System.Int32)" />
      <example>
        <code description="Showing the information of the childs of formfields if any exist." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim Found As Boolean = False
       For FieldIdx As Integer = 0 To formFieldCount - 1
          Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(FieldIdx)
          Dim FieldChildCount As Integer = oGdPicturePDF.GetFormFieldChildCount(FieldId)
          If FieldChildCount &gt; 0 Then
             Found = True
             Dim FieldType As PdfFormFieldType = oGdPicturePDF.GetFormFieldType(FieldId)
             For ChildIdx As Integer = 0 To FieldChildCount - 1
                Dim ChildID As Integer = oGdPicturePDF.GetFormFieldChildID(FieldId, ChildIdx)
                Dim ChildType As PdfFormFieldType = oGdPicturePDF.GetFormFieldType(ChildID)
                MessageBox.Show("Type :" + ChildType.ToString() + vbCrLf +
                "Title : " + oGdPicturePDF.GetFormFieldTitle(ChildID) + vbCrLf +
                "Value : " + oGdPicturePDF.GetFormFieldValue(ChildID),
                "Child " + ChildIdx.ToString() + "for formfield " + FieldIdx.ToString())
             Next
          End If
       Next
       If Found Then
          MessageBox.Show("End of FormFields")
       Else
          MessageBox.Show("This PDF does not contain formfields with childs")
       End If
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldTitle(System.Int32,System.String)">
      <summary>
 Sets the title of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <param name="Title">The form field title.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Changing the title of every text formfield." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim Found As Boolean = False
       For FieldIdx As Integer = 0 To formFieldCount - 1
          Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(FieldIdx)
          Dim FieldType As PdfFormFieldType = oGdPicturePDF.GetFormFieldType(FieldId)
          If FieldType = PdfFormFieldType.PdfFormFieldTypeText Then
             Found = True
             oGdPicturePDF.SetFormFieldTitle(FieldId, "TxtFormField_" + FieldIdx.ToString())
          End If
       Next
       If Found Then
          oGdPicturePDF.SaveToFile("test_SetFormFieldTitle.pdf")
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("This PDF does not contain text formfield")
       End If
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldMaxLen(System.Int32,System.Int32)">
      <summary>
 Sets the The maximum length in characters of a text form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID() or AddTextFormField().</param>
      <param name="MaxLen">The maximum length of the field's text, in characters.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldMaxLen(System.Int32)" />
      <example>
        <code description="Changing the comportment (max length, multiline ability, and alignment) of every text formfield." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim Found As Boolean = False
       For FieldIdx As Integer = 0 To formFieldCount - 1
          Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(FieldIdx)
          Dim FieldType As PdfFormFieldType = oGdPicturePDF.GetFormFieldType(FieldId)
          If FieldType = PdfFormFieldType.PdfFormFieldTypeText Then
             Found = True
             oGdPicturePDF.SetFormFieldMaxLen(FieldId, 60)
             oGdPicturePDF.SetFormFieldMultiLine(FieldId, True)
             oGdPicturePDF.SetFormFieldTextAlignment(FieldId, TextAlignment.TextAlignmentCenter)
          End If
       Next
       If Found Then
          oGdPicturePDF.SaveToFile("test_SetFormFieldMaxLen.pdf")
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("This PDF does not contain text formfield")
       End If
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldMaxLen(System.Int32)">
      <summary>
 Gets the The maximum length in characters of a text form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID() or AddTextFormField().</param>
      <returns>
 The maximum length of the field's text, in characters.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFormFieldMaxLen(System.Int32,System.Int32)" />
      <example>
        <code description="Retrieving the informations of the first formfield." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(0)   'get first formfield
       Dim FieldPage As Integer = oGdPicturePDF.GetFormFieldPage(FieldId)
       Dim FieldAlign As TextAlignment = oGdPicturePDF.GetFormFieldTextAlignment(FieldId)
       Dim FieldTitle As String = oGdPicturePDF.GetFormFieldTitle(FieldId)
       Dim FieldMaxLen As Integer = oGdPicturePDF.GetFormFieldMaxLen(FieldId)
       Dim FieldMultiLine As Boolean = oGdPicturePDF.GetFormFieldMultiLine(FieldId)
       Dim FieldLeft, FieldTop, FieldRight, FieldBottom As Single
       status = oGdPicturePDF.GetFormFieldLocation(FieldId, FieldLeft, FieldTop, FieldRight, FieldBottom)
       If status = GdPictureStatus.OK Then
          MessageBox.Show("Page : " + FieldPage.ToString() + vbCrLf +
          "Position : (" + FieldLeft.ToString() + "*" + FieldTop.ToString() + ")-(" + FieldRight.ToString() + "*" + FieldBottom.ToString() + ")" + vbCrLf +
          "Text MaxLen : " + FieldMaxLen.ToString() + vbCrLf +
          "Text Multiline : " + FieldMultiLine.ToString() + vbCrLf +
          "Text Alignment : " + FieldAlign.ToString())
       End If
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldMultiLine(System.Int32,System.Boolean)">
      <summary>
 Specifies if specific text form field of the PDF can contain multiple lines of text.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID() or AddTextFormField().</param>
      <param name="MultiLine">True to enable multiple line, else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldMultiLine(System.Int32)" />
      <example>
        <code description="Changing the comportment (max length, multiline ability, and alignment) of every text formfield." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim Found As Boolean = False
       For FieldIdx As Integer = 0 To formFieldCount - 1
          Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(FieldIdx)
          Dim FieldType As PdfFormFieldType = oGdPicturePDF.GetFormFieldType(FieldId)
          If FieldType = PdfFormFieldType.PdfFormFieldTypeText Then
             Found = True
             oGdPicturePDF.SetFormFieldMaxLen(FieldId, 60)
             oGdPicturePDF.SetFormFieldMultiLine(FieldId, True)
             oGdPicturePDF.SetFormFieldTextAlignment(FieldId, TextAlignment.TextAlignmentCenter)
          End If
       Next
       If Found Then
          oGdPicturePDF.SaveToFile("test_SetFormFieldMaxLen.pdf")
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("This PDF does not contain text formfield")
       End If
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldMultiLine(System.Int32)">
      <summary>
 Returns if specific text form field of the PDF can contain multiple lines of text.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID() or AddTextFormField().</param>
      <returns>
 True if multiple line is allowed, else False.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFormFieldMultiLine(System.Int32,System.Boolean)" />
      <example>
        <code description="Retrieving the informations of the first formfield." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(0)   'get first formfield
       Dim FieldPage As Integer = oGdPicturePDF.GetFormFieldPage(FieldId)
       Dim FieldAlign As TextAlignment = oGdPicturePDF.GetFormFieldTextAlignment(FieldId)
       Dim FieldTitle As String = oGdPicturePDF.GetFormFieldTitle(FieldId)
       Dim FieldMaxLen As Integer = oGdPicturePDF.GetFormFieldMaxLen(FieldId)
       Dim FieldMultiLine As Boolean = oGdPicturePDF.GetFormFieldMultiLine(FieldId)
       Dim FieldLeft, FieldTop, FieldRight, FieldBottom As Single
       status = oGdPicturePDF.GetFormFieldLocation(FieldId, FieldLeft, FieldTop, FieldRight, FieldBottom)
       If status = GdPictureStatus.OK Then
          MessageBox.Show("Page : " + FieldPage.ToString() + vbCrLf +
          "Position : (" + FieldLeft.ToString() + "*" + FieldTop.ToString() + ")-(" + FieldRight.ToString() + "*" + FieldBottom.ToString() + ")" + vbCrLf +
          "Text MaxLen : " + FieldMaxLen.ToString() + vbCrLf +
          "Text Multiline : " + FieldMultiLine.ToString() + vbCrLf +
          "Text Alignment : " + FieldAlign.ToString())
       End If
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldChecked(System.Int32,System.Boolean)">
      <summary>
 Sets the checked state of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId() or GetFormFieldChildID().</param>
      <param name="Checked">True to make the form field checked, otherwise False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <example>
        <code description="Inverting the check value for all the checkbox button formfields." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim Found As Boolean = False
       For FieldIdx As Integer = 0 To formFieldCount - 1
          Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(FieldIdx)
          Dim FieldType As PdfFormFieldType = oGdPicturePDF.GetFormFieldType(FieldId)
          If FieldType = PdfFormFieldType.PdfFormFieldTypeCheckBoxButton Then
             Found = True
             Dim FieldChecked As Boolean = oGdPicturePDF.GetFormFieldChecked(FieldId)
             oGdPicturePDF.SetFormFieldChecked(FieldId, FieldChecked = False)
          End If
       Next
       If Found Then
          oGdPicturePDF.SaveToFile("test_SetFormFieldChecked.pdf")
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("This PDF does not contain checkbox formfield")
       End If
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldChecked(System.Int32)">
      <summary>
 Gets the checked state of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID().</param>
      <returns>
 True if the form field is checked, otherwise False.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving the information of all the existing formfields in a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
 For i As Integer = 0 To formFieldCount - 1
    Dim fieldID As Integer = oGdPicturePDF.GetFormFieldId(i)
    Dim fieldsInfo As String = ""
    fieldsInfo += "form field No: " + (i + 1).ToString() + Chr(10)
    fieldsInfo += "form field Page: " + oGdPicturePDF.GetFormFieldPage(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Type: " + oGdPicturePDF.GetFormFieldType(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Child count: " + oGdPicturePDF.GetFormFieldChildCount(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Title: " + oGdPicturePDF.GetFormFieldTitle(fieldID) + Chr(10)
    fieldsInfo += "form field Value: " + oGdPicturePDF.GetFormFieldValue(fieldID) + Chr(10)
    fieldsInfo += "form field Font resource name: " + oGdPicturePDF.GetFormFieldFontName(fieldID) + Chr(10)
    fieldsInfo += "form field Font size: " + oGdPicturePDF.GetFormFieldFontSize(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Checked: " + oGdPicturePDF.GetFormFieldChecked(fieldID).ToString + Chr(10)
    MessageBox.show(fieldsInfo)
 Next
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldValue(System.Int32)">
      <summary>
 Returns the value of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID() or AddTextFormField().</param>
      <returns>
 The value of the form field.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving the information of all the existing formfields in a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
 For i As Integer = 0 To formFieldCount - 1
    Dim fieldID As Integer = oGdPicturePDF.GetFormFieldId(i)
    Dim fieldsInfo As String = ""
    fieldsInfo += "form field No: " + (i + 1).ToString() + Chr(10)
    fieldsInfo += "form field Page: " + oGdPicturePDF.GetFormFieldPage(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Type: " + oGdPicturePDF.GetFormFieldType(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Child count: " + oGdPicturePDF.GetFormFieldChildCount(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Title: " + oGdPicturePDF.GetFormFieldTitle(fieldID) + Chr(10)
    fieldsInfo += "form field Value: " + oGdPicturePDF.GetFormFieldValue(fieldID) + Chr(10)
    fieldsInfo += "form field Font resource name: " + oGdPicturePDF.GetFormFieldFontName(fieldID) + Chr(10)
    fieldsInfo += "form field Font size: " + oGdPicturePDF.GetFormFieldFontSize(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Checked: " + oGdPicturePDF.GetFormFieldChecked(fieldID).ToString + Chr(10)
    MessageBox.show(fieldsInfo)
 Next
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFormFieldValue(System.Int32,System.String)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldReadOnly(System.Int32,System.Boolean)">
      <summary>
 Sets the read-only state of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID() or AddTextFormField().</param>
      <param name="ROnly">True to set the form field to read only, False otherwise.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldReadOnly(System.Int32)">
      <summary>
 Gets the read-only state of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID() or AddTextFormField().</param>
      <returns>True to set the form field to read only, False otherwise.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldValue(System.Int32,System.String)">
      <summary>
 Sets the value of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID() or AddTextFormField().</param>
      <param name="Value">The form field value.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldValue(System.Int32)" />
      <example>
        <code description="Changing the value of all the text formfields." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim Found As Boolean = False
       For FieldIdx As Integer = 0 To formFieldCount - 1
          Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(FieldIdx)
          Dim FieldType As PdfFormFieldType = oGdPicturePDF.GetFormFieldType(FieldId)
          If FieldType = PdfFormFieldType.PdfFormFieldTypeText Then
             Found = True
             oGdPicturePDF.SetFormFieldValue(FieldId, oGdPicturePDF.GetFormFieldValue(FieldId) + "_" + FieldIdx.ToString())
          End If
       Next
       If Found Then
          oGdPicturePDF.SaveToFile("test_SetFormFieldValue.pdf")
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("This PDF does not contain text formfield")
       End If
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldFontName(System.Int32)">
      <summary>
 Returns the resource name of the font used to render the text of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <returns>
 The name of the font used.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving information on the existing formfields in a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
 For i As Integer = 0 To formFieldCount - 1
    Dim fieldID As Integer = oGdPicturePDF.GetFormFieldId(i)
    Dim fieldsInfo As String = ""
    fieldsInfo += "form field No: " + (i + 1).ToString() + Chr(10)
    fieldsInfo += "form field Page: " + oGdPicturePDF.GetFormFieldPage(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Type: " + oGdPicturePDF.GetFormFieldType(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Child count: " + oGdPicturePDF.GetFormFieldChildCount(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Title: " + oGdPicturePDF.GetFormFieldTitle(fieldID) + Chr(10)
    fieldsInfo += "form field Value: " + oGdPicturePDF.GetFormFieldValue(fieldID) + Chr(10)
    fieldsInfo += "form field Font resource name: " + oGdPicturePDF.GetFormFieldFontName(fieldID) + Chr(10)
    fieldsInfo += "form field Font size: " + oGdPicturePDF.GetFormFieldFontSize(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Checked: " + oGdPicturePDF.GetFormFieldChecked(fieldID).ToString + Chr(10)
    MessageBox.show(fieldsInfo)
 Next
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldFontSize(System.Int32)">
      <summary>
 Returns the size of the font used to render the text of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <returns>
 The size of the font used.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving information on the existing formfields in a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
 For i As Integer = 0 To formFieldCount - 1
    Dim fieldID As Integer = oGdPicturePDF.GetFormFieldId(i)
    Dim fieldsInfo As String = ""
    fieldsInfo += "form field No: " + (i + 1).ToString() + Chr(10)
    fieldsInfo += "form field Page: " + oGdPicturePDF.GetFormFieldPage(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Type: " + oGdPicturePDF.GetFormFieldType(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Child count: " + oGdPicturePDF.GetFormFieldChildCount(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Title: " + oGdPicturePDF.GetFormFieldTitle(fieldID) + Chr(10)
    fieldsInfo += "form field Value: " + oGdPicturePDF.GetFormFieldValue(fieldID) + Chr(10)
    fieldsInfo += "form field Font resource name: " + oGdPicturePDF.GetFormFieldFontName(fieldID) + Chr(10)
    fieldsInfo += "form field Font size: " + oGdPicturePDF.GetFormFieldFontSize(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Checked: " + oGdPicturePDF.GetFormFieldChecked(fieldID).ToString + Chr(10)
    MessageBox.show(fieldsInfo)
 Next
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldFontProperties(System.Int32,System.String@,GdPicture12.FontStyle@,System.Boolean@)">
      <summary>
 Returns the family name and the style  of the font used to render the text of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <param name="FontFamily">Output parameter. The family name of the font of the specified formfield.</param>
      <param name="FontStyle">Output parameter. The style of the font of the specified formfield.</param>
      <param name="IsStdFont">Output parameter. Specifies if the font is a standard font.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldLocation(System.Int32,System.Single@,System.Single@,System.Single@,System.Single@)">
      <summary>
 Returns the location of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <param name="Left">Output parameter. The left coordinate, in current unit defined by the SetMeasurementUnit() method, of the bounding box of the specified formfield.</param>
      <param name="Top">Output parameter. The top coordinate, in current unit defined by the SetMeasurementUnit() method, of the bounding box of the specified formfield.</param>
      <param name="Right">Output parameter. The right coordinate, in current unit defined by the SetMeasurementUnit() method, of the bounding box of the specified formfield.</param>
      <param name="Bottom">Output parameter. The bottom coordinate, in current unit defined by the SetMeasurementUnit() method, of the bounding box of the specified formfield.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving information on the existing formfields in a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
 For i As Integer = 0 To formFieldCount - 1
    Dim fieldID As Integer = oGdPicturePDF.GetFormFieldId(i)
    Dim fieldsInfo As String = ""
    fieldsInfo += "form field No: " + (i + 1).ToString() + Chr(10)
    fieldsInfo += "form field Page: " + oGdPicturePDF.GetFormFieldPage(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Type: " + oGdPicturePDF.GetFormFieldType(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Child count: " + oGdPicturePDF.GetFormFieldChildCount(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Title: " + oGdPicturePDF.GetFormFieldTitle(fieldID) + Chr(10)
    fieldsInfo += "form field Value: " + oGdPicturePDF.GetFormFieldValue(fieldID) + Chr(10)
    fieldsInfo += "form field Font resource name: " + oGdPicturePDF.GetFormFieldFontName(fieldID) + Chr(10)
    fieldsInfo += "form field Font size: " + oGdPicturePDF.GetFormFieldFontSize(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Checked: " + oGdPicturePDF.GetFormFieldChecked(fieldID).ToString + Chr(10)
    MessageBox.show(fieldsInfo)
 Next
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Retrieving the information of the first formfield." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(0)   'get first formfield
       Dim FieldPage As Integer = oGdPicturePDF.GetFormFieldPage(FieldId)
       Dim FieldAlign As TextAlignment = oGdPicturePDF.GetFormFieldTextAlignment(FieldId)
       Dim FieldTitle As String = oGdPicturePDF.GetFormFieldTitle(FieldId)
       Dim FieldMaxLen As Integer = oGdPicturePDF.GetFormFieldMaxLen(FieldId)
       Dim FieldMultiLine As Boolean = oGdPicturePDF.GetFormFieldMultiLine(FieldId)
       Dim FieldLeft, FieldTop, FieldRight, FieldBottom As Single
       status = oGdPicturePDF.GetFormFieldLocation(FieldId, FieldLeft, FieldTop, FieldRight, FieldBottom)
       If status = GdPictureStatus.OK Then
          MessageBox.Show("Page : " + FieldPage.ToString() + vbCrLf +
          "Position : (" + FieldLeft.ToString() + "*" + FieldTop.ToString() + ")-(" + FieldRight.ToString() + "*" + FieldBottom.ToString() + ")" + vbCrLf +
          "Text MaxLen : " + FieldMaxLen.ToString() + vbCrLf +
          "Text Multiline : " + FieldMultiLine.ToString() + vbCrLf +
          "Text Alignment : " + FieldAlign.ToString())
       End If
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldPage(System.Int32)">
      <summary>
 Returns the page on which the specified form field is attached.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <returns>
 The form field page owner.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving information on the existing formfields in a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
 For i As Integer = 0 To formFieldCount - 1
    Dim fieldID As Integer = oGdPicturePDF.GetFormFieldId(i)
    Dim fieldsInfo As String = ""
    fieldsInfo += "form field No: " + (i + 1).ToString() + Chr(10)
    fieldsInfo += "form field Page: " + oGdPicturePDF.GetFormFieldPage(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Type: " + oGdPicturePDF.GetFormFieldType(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Child count: " + oGdPicturePDF.GetFormFieldChildCount(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Title: " + oGdPicturePDF.GetFormFieldTitle(fieldID) + Chr(10)
    fieldsInfo += "form field Value: " + oGdPicturePDF.GetFormFieldValue(fieldID) + Chr(10)
    fieldsInfo += "form field Font resource name: " + oGdPicturePDF.GetFormFieldFontName(fieldID) + Chr(10)
    fieldsInfo += "form field Font size: " + oGdPicturePDF.GetFormFieldFontSize(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Checked: " + oGdPicturePDF.GetFormFieldChecked(fieldID).ToString + Chr(10)
    MessageBox.show(fieldsInfo)
 Next
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Retrieving the information of the first formfield." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(0)   'get first formfield
       Dim FieldPage As Integer = oGdPicturePDF.GetFormFieldPage(FieldId)
       Dim FieldAlign As TextAlignment = oGdPicturePDF.GetFormFieldTextAlignment(FieldId)
       Dim FieldTitle As String = oGdPicturePDF.GetFormFieldTitle(FieldId)
       Dim FieldMaxLen As Integer = oGdPicturePDF.GetFormFieldMaxLen(FieldId)
       Dim FieldMultiLine As Boolean = oGdPicturePDF.GetFormFieldMultiLine(FieldId)
       Dim FieldLeft, FieldTop, FieldRight, FieldBottom As Single
       status = oGdPicturePDF.GetFormFieldLocation(FieldId, FieldLeft, FieldTop, FieldRight, FieldBottom)
       If status = GdPictureStatus.OK Then
          MessageBox.Show("Page : " + FieldPage.ToString() + vbCrLf +
          "Position : (" + FieldLeft.ToString() + "*" + FieldTop.ToString() + ")-(" + FieldRight.ToString() + "*" + FieldBottom.ToString() + ")" + vbCrLf +
          "Text MaxLen : " + FieldMaxLen.ToString() + vbCrLf +
          "Text Multiline : " + FieldMultiLine.ToString() + vbCrLf +
          "Text Alignment : " + FieldAlign.ToString())
       End If
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldType(System.Int32)">
      <summary>
 Returns the type of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <returns>
 A member of the PdfFormFieldType enumeration. The type of the form field.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving information on the existing formfields in a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
 For i As Integer = 0 To formFieldCount - 1
    Dim fieldID As Integer = oGdPicturePDF.GetFormFieldId(i)
    Dim fieldsInfo As String = ""
    fieldsInfo += "form field No: " + (i + 1).ToString() + Chr(10)
    fieldsInfo += "form field Page: " + oGdPicturePDF.GetFormFieldPage(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Type: " + oGdPicturePDF.GetFormFieldType(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Child count: " + oGdPicturePDF.GetFormFieldChildCount(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Title: " + oGdPicturePDF.GetFormFieldTitle(fieldID) + Chr(10)
    fieldsInfo += "form field Value: " + oGdPicturePDF.GetFormFieldValue(fieldID) + Chr(10)
    fieldsInfo += "form field Font resource name: " + oGdPicturePDF.GetFormFieldFontName(fieldID) + Chr(10)
    fieldsInfo += "form field Font size: " + oGdPicturePDF.GetFormFieldFontSize(fieldID).ToString + Chr(10)
    fieldsInfo += "form field Checked: " + oGdPicturePDF.GetFormFieldChecked(fieldID).ToString + Chr(10)
    MessageBox.show(fieldsInfo)
 Next
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RemoveFormField(System.Int32)">
      <summary>
 Removes a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldId(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldChildID(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddTextFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.AddPushButtonFormField(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Removing the first formfield." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       Dim FieldId As Integer = oGdPicturePDF.GetFormFieldId(0)
       oGdPicturePDF.RemoveFormField(FieldId)
       oGdPicturePDF.SaveToFile("test_RemoveFormField.pdf")
       MessageBox.Show("Ok")
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RemoveFormFields">
      <summary>
 Removes all form fields of the PDF.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Removing all formfields." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim formFieldCount As Integer = oGdPicturePDF.GetFormFieldsCount()
    If formFieldCount &gt; 0 Then
       oGdPicturePDF.RemoveFormFields()
       oGdPicturePDF.SaveToFile("test_RemoveFormFields.pdf")
       MessageBox.Show("Ok")
    Else
       MessageBox.Show("This PDF does not contain formfields")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.FormFieldHasBorderColor(System.Int32)">
      <summary>
 Return true if the formfield has a border color
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>True or false.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldNoBorderColor(System.Int32)">
      <summary>
 Remove the border color of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.FormFieldHasBackgroundColor(System.Int32)">
      <summary>
 Return true if the formfield has a background color
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>True or false.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldNoBackgroundColor(System.Int32)">
      <summary>
 Remove the background color of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldCheckBoxStyle(System.Int32)">
      <summary>
 Return the graphical style of the checkbox
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>A member of the PdfCheckBoxStyle enumeration.</returns>
      <remarks>
        <para>Used for radio button or check box.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldCheckBoxStyle(System.Int32,GdPicture12.PdfCheckBoxStyle)">
      <summary>
 Sets the graphical style of the checkbox.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="CheckStyle">A member of the PdfCheckBoxStyle enumeration.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>
        <para>Used for radio button or check box</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldOnStateName(System.Int32)">
      <summary>
 Return the value of the On Parameter for a specific child of a radio button group.
 </summary>
      <param name="FieldId">The child form field ID. Should be a value returned by  GetFormFieldChildID().</param>
      <returns>The value of the field when it is checked.</returns>
      <remarks>
        <para>The value when the field is unchecked is always Off.</para>
        <para>If the OnStateName is not set, The default value when the field is checked is On.</para>
        <para>Used for radio button or check box.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldOnStateName(System.Int32,System.String)">
      <summary>
 Sets the value of the formfield will take when it is checked.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="OnStateName">A string value.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>
        <para>The value when the field is unchecked is always Off.</para>
        <para>If the OnStateName is not set, The default value when the field is checked is On.</para>
        <para>Used for radio button or check box.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldDefaultValue(System.Int32)">
      <summary>
 Return the default value of form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>The default value of a form field.</returns>
      <remarks>
        <para>The default value to which the field reverts when a reset-form action is executed</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldDefaultValue(System.Int32,System.String)">
      <summary>
 Sets the default value of a form field..
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="DefaultValue">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>The default value to which the field reverts when a reset-form action is executed.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldDefaultChecked(System.Int32)">
      <summary>
 Return true if the form field is checked by default
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>Return true if the form field is checked by default false and if false the form field is not checked by default.</returns>
      <remarks>
        <para>Used for radio button or check box.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldDefaultChecked(System.Int32,System.Boolean)">
      <summary>
 Sets the form field checked by default.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="Checked">True to set the form field checked by default, false to unset the form field checked by default.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>Used for radio button or check box.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldFullTitle(System.Int32)">
      <summary>
 Return the fully qualified field name of a form field..
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>A string contaning the fully qualified field name.</returns>
      <remarks>
        <para>The fully qualified field name is not explicitly defined but is constructed from the partial field names of the field and all of its
 ancestors. For a field with no parent, the partial and fully qualified names are the same. For a field that is the child of another field,
 the fully qualified name is formed by appending the child field’s partial name to the parent’s fully qualified name,
 separated by a period ( . )</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldFullTitleWithCloneNumber(System.Int32)">
      <summary>
 Return the fully qualified field name plus (if several form fields have the same full title) a # and the clone number.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>A string containing the fully qualified field name with the clone number.</returns>
      <remarks>
        <para>see GetFormFieldFullTitle and GetFormFieldCloneNumber</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldAlternateTitle(System.Int32)">
      <summary>
 Return the alternate title of the form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>A string containing the alternate title.</returns>
      <remarks>
        <para>An alternate field name to be used in place of the actual field name wherever the field must be identified in the user interface
 (such as in error or status messages referring to the field). This text is also useful when extracting the document’s contents
 in support of accessibility to users with disabilities or for other purposes.</para>
        <para>The alternate title is used in Acrobat to show form field's tooltip text</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldAlternateTitle(System.Int32,System.String)">
      <summary>
 Sets the form field alternate title.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="AlternateTitle">A string containing the alternate title.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>
        <para>An alternate field name to be used in place of the actual field name wherever the field must be identified in the user interface
 (such as in error or status messages referring to the field). This text is also useful when extracting the document’s contents
 in support of accessibility to users with disabilities or for other purposes.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldCloneNumber(System.Int32)">
      <summary>
 Return the formfield clone number if several formfield have the same full title
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>
 The clone number if several form fields have the same full title, else 0.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldVisibility(System.Int32)">
      <summary>
 Return the visiblity of the form field
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>A member of the PdfFormFieldVisibility enumeration.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldVisibility(System.Int32,GdPicture12.PdfFormFieldVisibility)">
      <summary>
 Sets the form field visdibility
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="Visibility">A member of the PdfFormFieldVisiblity enumeration.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldRequired(System.Int32,System.Boolean)">
      <summary>
 Sets the required state of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID() or AddTextFormField().</param>
      <param name="Required">True to set the form field to read only, False otherwise.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>If set, the field must have a value at the time it is exported by a submit-form action.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldRequired(System.Int32)">
      <summary>
 Return the required state of a specific form field of the PDF.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID() or AddTextFormField().</param>
      <returns>True to set the form field to read only, False otherwise.</returns>
      <remarks>
        <para>Use the GetStat() method to determine if this method failed.</para>
        <para>If set, the field must have a value at the time it is exported by a submit-form action</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldItemValue(System.Int32,System.Int32)">
      <summary>
 Return the value of a specifc item in a combo box or a list box
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="ItemIdx">A value between 0 and GetFormFieldItemCount - 1.</param>
      <returns>A string containing the value of the selected item.</returns>
      <remarks>
        <para>See GetFormFieldItemText method</para>
        <para>Each element of the array is either a text string representing one of the available options or an array
 consisting of two text strings: the option’s export value and the text to be displayed as the name of the option</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldRadioInUnison(System.Int32)">
      <summary>
 Return the state the form field flag "RadiosInUnison" of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>True if the flag is set or false if it is unset.</returns>
      <remarks>
        <para>Only valid for radio buttons</para>
        <para>If set, a group of radio buttons within a radio button field that use the same value for the on state will turn on and off in unison;
 that is if one is checked, they are all checked. If clear, the buttons are mutually exclusive</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldRadioInUnison(System.Int32,System.Boolean)">
      <summary>
 Sets the flag RadioInUnison to true or false
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="Unison">An boolean value to set or unset the flag.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>
        <para>Only valid for radio buttons.</para>
        <para>If set, a group of radio buttons within a radio button field that use the same value for the on state will turn on and off in unison;
 that is if one is checked, they are all checked. If clear, the buttons are mutually exclusive</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldRotation(System.Int32)">
      <summary>
 Return the rotation of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>An integer value in the list  0 90 180 270.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldRotation(System.Int32,System.Int32)">
      <summary>
 Sets the form field rotation
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="Rotation">An Integer value in the list 0 90 180 270.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldFontColor(System.Int32)">
      <summary>
 Return the color used to draw text in the form field
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>A color object.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldLocation(System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Sets the form field position and size
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="Left">.</param>
      <param name="Top">.</param>
      <param name="Right">.</param>
      <param name="Bottom">.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>The value for Left,Top, Right, and Bottom depends on the Origin and Scaling mode.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldDoNotScroll(System.Int32,System.Boolean)">
      <summary>
 Sets or unset the DoNotScroll flag of the form field
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="DoNotScroll">A boolean value for set or unset.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>
        <para>If set, the field does not scroll (horizontally for single-line fields, vertically for multiple-line fields)
 to accommodate more text than fits within its annotation rectangle. Once the field is full, no further text is accepted.</para>
        <para>Used only for text box.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldDoNotScroll(System.Int32)">
      <summary>
 Return the state the form field flag "DoNotScroll" of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>True if the flag is set or false if it is unset.</returns>
      <remarks>
        <para>If set, the field does not scroll (horizontally for single-line fields, vertically for multiple-line fields)
 to accommodate more text than fits within its annotation rectangle. Once the field is full, no further text is accepted.</para>
        <para>Used only for text box.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldRichText(System.Int32,System.Boolean)">
      <summary>
 Sets or unset the "RichText" flag of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="RichText">True or false.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>
        <para>If set, the value of this field should be represented as a rich text string.</para>
        <para>Used only for text box.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldRichText(System.Int32)">
      <summary>
 Return the state the form field flag "RichText" of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>True if the flag is set and false if the flag is unset.</returns>
      <remarks>
        <para>If set, the value of this field should be represented as a rich text string.</para>
        <para>Used only for text box.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldPassword(System.Int32,System.Boolean)">
      <summary>
 Sets or unset the "Password" flag of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="Password">True if the flag is set and false if the flag is unset.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>
        <para>If set, the field is intended for entering a secure password that should not be echoed visibly to the screen.
 Characters typed from the keyboard should instead be echoed in some unreadable form, such as asterisks or bullet characters.</para>
        <para>Used only for text box.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldPassword(System.Int32)">
      <summary>
 Return the state the form field flag "Password" of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>True if the flag is set and false if the flag is unset.</returns>
      <remarks>
        <para>If set, the field is intended for entering a secure password that should not be echoed visibly to the screen.
 Characters typed from the keyboard should instead be echoed in some unreadable form, such as asterisks or bullet characters.</para>
        <para>Used only for text box.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldDoNotSpellCheck(System.Int32,System.Boolean)">
      <summary>
 Sets or unset the "DoNotSpellCheck" flag of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="SpellCheck">True if the flag is set and false if the flag is unset.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>If set, text entered in the field is not spell-checked.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldDoNotSpellCheck(System.Int32)">
      <summary>
 Return the state the form field flag "DoNotSpellCheck" of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>True if the flag is set and false if the flag is unset.</returns>
      <remarks>
        <para>If set, text entered in the field is not spell-checked.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldFileSelect(System.Int32,System.Boolean)">
      <summary>
 Sets or unset the "FileSelect" flag of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="FileSelect">True if the flag is set and false if the flag is unset.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>If set, the text entered in the field represents the pathname of a file whose contents are to be submitted as the value of the field.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldFileSelect(System.Int32)">
      <summary>
 Return the state the form field flag "FileSelect" of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>True if the flag is set and false if the flag is unset.</returns>
      <remarks>
        <para>If set, the text entered in the field represents the pathname of a file whose contents are to be submitted
 as the value of the field.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldComb(System.Int32,System.Boolean)">
      <summary>
 Sets or unset the "Comb" flag of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="Comb">True if the flag is set and false if the flag is unset.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>
        <para>Meaningful only if the MaxLen entry is present in the text field dictionary and if the Multiline, Password, and FileSelect
 flags are clear. If set, the field is automatically divided into as many equally spaced positions, or combs, as
 the value of MaxLen, and the text is laid out into those combs.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldComb(System.Int32)">
      <summary>
 Return the state the form field flag "Comb" of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>True if the flag is set and false if the flag is unset.</returns>
      <remarks>
        <para>Meaningful only if the MaxLen entry is present in the text field dictionary and if the Multiline, Password, and FileSelect
 flags are clear. If set, the field is automatically divided into as many equally spaced positions, or combs, as
 the value of MaxLen, and the text is laid out into those combs.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldItemSort(System.Int32,System.Boolean)">
      <summary>
 Sets or unset the "Sort" flag of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="Sorted">True if the flag is set and false if the flag is unset.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>If set, the field’s option items should be sorted alphabetically.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldItemSort(System.Int32)">
      <summary>
 Return the state the form field flag "Sort" of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>True if the flag is set and false if the flag is unset.</returns>
      <remarks>
        <para>If set, the field’s option items should be sorted alphabetically.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldItemCommit(System.Int32,System.Boolean)">
      <summary>
 Sets or unset the "ComitOnSelChange" flag of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="Commit">True if the flag is set and false if the flag is unset.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>
        <para>If set, the new value is committed as soon as a selection is made with the pointing device.</para>
        <para>This option enables applications to perform an action once a selection is made, without requiring the user to exit the field.
 If clear, the new value is not committed until the user exits the field.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldItemCommit(System.Int32)">
      <summary>
 Return the state the form field flag "CommitOnSelChange" of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>True if the flag is set and false if the flag is unset.</returns>
      <remarks>
        <para>If set, the new value is committed as soon as a selection is made with the pointing device.
 This option enables applications to perform an action once a selection is made, without requiring the user to exit the field.
 If clear, the new value is not committed until the user exits the field.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldMultiSelect(System.Int32,System.Boolean)">
      <summary>
 Sets or unset the "MultiSelect" flag of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="MultiSelect">True if the flag is set and false if the flag is unset.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>
        <para>If set, more than one of the field’s option items may be selected simultaneously;
 if clear, no more than one item at a time may be selected.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldMultiSelect(System.Int32)">
      <summary>
 Return the state the form field flag "MultiSelect" of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>True if the flag is set and false if the flag is unset.</returns>
      <remarks>
        <para>If set, more than one of the field’s option items may be selected simultaneously;
 if clear, no more than one item at a time may be selected.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldItemEdit(System.Int32,System.Boolean)">
      <summary>
 Sets or unset the "Edit" flag of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="Editable">True if the flag is set and false if the flag is unset.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>
        <para>If set, the combo box includes an editable text box as well as a drop-down list;
 if clear, it includes only a drop-down list. </para>
        <para>This flag is meaningful only if the Combo flag is set.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldItemEdit(System.Int32)">
      <summary>
 Return the state the form field flag "Edit" of a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <returns>True if the flag is set and false if the flag is unset.</returns>
      <remarks>
        <para>If set, the combo box includes an editable text box as well as a drop-down list;
 if clear, it includes only a drop-down list.</para>
        <para>This flag is meaningful only if the Combo flag is set.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldFontColor(System.Int32,System.Byte,System.Byte,System.Byte)">
      <summary>
 Sets the color for the text drawn in a form field
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="Red">The value for Red beween 0 and 255.</param>
      <param name="Green">The value for Green beween 0 and 255.</param>
      <param name="Blue">The value for Blue beween 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldFontColor(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Sets the color for the text drawn in a form field
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="Cyan">The value for Cyan beween 0 and 255.</param>
      <param name="Magenta">The value for Magenta beween 0 and 255.</param>
      <param name="Yellow">The value for Yellow beween 0 and 255.</param>
      <param name="Black">The value for Black beween 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldFontColor(System.Int32,System.Drawing.Color)">
      <summary>
 Sets the color for the text drawn in a form field
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="Color">A color object.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldFontSize(System.Int32,System.Single)">
      <summary>
 Sets the size of the font used to draw the text in a form field
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="FontSize">The size to use for the font.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>A size of zero means an autosize font.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldFontResName(System.Int32,System.String)">
      <summary>
 Sets the font to be used to draw text in a form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId or GetFormFieldChildID().</param>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageLinksCount">
      <summary>
 Returns the number of links available on the selected page of the PDF.
 </summary>
      <returns>
 The number of available links.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageLinkAnnotationIdx(System.Int32)" />
      <example>
        <code description="Retreiving the number of page links on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       MessageBox.Show("The first page contains " + oGdPicturePDF.GetPageLinksCount().ToString() + " page links")
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageLinkAnnotationIdx(System.Int32)">
      <summary>
 Translates a link index to an annotation index in order to manipulate the link object through the annotations methods.
 In PDF, a link is a subtype of annotations representing either a hypertext link to a destination elsewhere in the document or an action to be performed.
 Returns an annotation index that will be usable with the annotations methods group.
 </summary>
      <param name="LinkIdx">The link index, between 0 and GetPageLinksCount() -1.</param>
      <returns>
 The annotation index that will be usable with the related annotations methods (see: Annotation (PDF scheme) methods group).
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Setting border color of all links available on the first page of a PDF to Red." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("mypdf.pdf", False)
 oGdPicturePDF.SelectPage(1)
 Dim linkCount As Integer = oGdPicturePDF.GetPageLinksCount()
 For i As Integer = 0 To linkCount - 1
    Dim annotIdx As Integer = oGdPicturePDF.GetPageLinkAnnotationIdx(i)
    oGdPicturePDF.SetAnnotationColor(annotIdx, Color.Red)
 Next
 oGdPicturePDF.SaveToFile("BorderedLinks.pdf")
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageLinksCount" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RemovePageLink(System.Int32)">
      <summary>
 Removes a specific link of the current page of the PDF.
 </summary>
      <param name="LinkIdx">The link index, between 0 and GetPageLinksCount() -1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageLinksCount" />
      <example>
        <code description="Removing the first page link on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim PageLinkCount As Integer = oGdPicturePDF.GetPageLinksCount()
       If PageLinkCount &gt; 0 Then
          status = oGdPicturePDF.RemovePageLink(0)
          If status = GdPictureStatus.OK Then
             status = oGdPicturePDF.SaveToFile("test_RemovePageLink.pdf", False)
             MessageBox.Show("Ok")
          Else
             MessageBox.Show("RemovePageLink failed")
          End If
       Else
          MessageBox.Show("The first page does not contain page links")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RemovePageLinks">
      <summary>
 Removes all links of the current page of the PDF.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageLinksCount" />
      <example>
        <code description="Removing all page links on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("13 - texture+gradients not rendered.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim PageLinkCount As Integer = oGdPicturePDF.GetPageLinksCount()
       If PageLinkCount &gt; 0 Then
          status = oGdPicturePDF.RemovePageLinks()
          If status = GdPictureStatus.OK Then
             status = oGdPicturePDF.SaveToFile("test_RemovePageLinks.pdf", False)
             MessageBox.Show("Ok")
          Else
             MessageBox.Show("RemovePageLinks failed")
          End If
       Else
          MessageBox.Show("The first page does not contain page links")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetJpeg2000Quality(System.Int32)">
      <summary>
 Changes the level of quality used to compress JPEG2000 image within the PDF.
 </summary>
      <param name="Quality">Defines the compression rate Between [1(MaxQuality - Lossless) ... 512(Poor quality)]. Default value is 16.</param>
      <remarks>
        <para>
 Jpeg2000 compression is only suitablefor 8bpp grayscale and non indexed color image.
 </para>
        <para>
 Use the  SetCompressionForColorImage() method to specify to the library to use JPEG2000 compression scheme for colour image.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetCompressionForColorImage(GdPicture12.PdfCompression)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetJpegQuality(System.Int32)">
      <summary>
 Changes the level of quality used to compress JPEG image within the PDF.
 </summary>
      <param name="Quality">Compression level [0 to 100]. 0: worse quality and better compression, 100: best quality and worse compression. Default valus is 75.</param>
      <remarks>
        <para>
 Jpeg compression is only suitablefor 8bpp grayscale and non indexed color image.
 </para>
        <para>
 Use the  SetCompressionForColorImage() method to specify to the library to use JPEG compression scheme for colour image.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetCompressionForColorImage(GdPicture12.PdfCompression)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetCompressionForBitonalImage(GdPicture12.PdfCompression)">
      <summary>
 Changes the scheme to use to compress bitonal image data within the PDF. Default is
 PdfCompressionJBIG2 if the optional GdPicture JBIG2 Encoder Plugin has been unlocked, else PdfCompressionCCITT4.
 </summary>
      <param name="Compression">A member of the PdfCompression enumeration.
 If you select the JBIG2 compression ensure yourself to have unlocked the optional GdPicture JBIG2 Encoder Plugin first.</param>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetCompressionForColorImage(GdPicture12.PdfCompression)">
      <summary>
 Changes the scheme to use to compress color image data within the PDF. Default is
 PdfCompressionJPEG.
 </summary>
      <param name="Compression">A member of the PdfCompression enumeration.</param>
      <remarks>If PdfCompressionCCITT4 or PdfCompressionJBIG2 Deflate compression will be used instead.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddImageFromGdPictureImage(System.Int32,System.Boolean,System.Boolean)">
      <summary>
 Adds an image as resource of the PDF, from a GdPicture Image. You will be able to subsequently draw this image on any page of the document by using the DrawImage() method.
 </summary>
      <param name="ImageID">A GdPicture Image Identifier. The image to add within the PDF.</param>
      <param name="ImageMask">Only for 1BPP (1 Bit Per Pixel)image! Indicates whether the image shall be treated as an image mask (or Stencil mask). False by default.</param>
      <param name="DrawImage">If true, begin a new page and draw the added image on its whole surface.</param>
      <returns>
 Returns a Pdf image resource name if success, else an empty string. This pdf image name can be subsequently used with
 the DrawImage() method on any page of this document.
 To know what the error is in case of empty string, please call GetStat() method.
 </returns>
      <example>
        <code description="Draw an image on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
 If ImageID &gt; 0 AndAlso oGdPicturePDF.LoadFromFile("test.pdf", True) = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1) 'Selecting first page
    Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
    oGdPicturePDF.DrawImage(image_res_name, 10, 10, 5, 5)
    oGdPicturePDF.SaveToFileInc("test.pdf")
    MessageBox.show("Done")
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
      <example>
        <code description="Open an existing PDF, insert an A4 page in second page then draw an image on the whole page area." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
 If ImageID &gt; 0 AndAlso oGdPicturePDF.LoadFromFile("test.pdf", True) = GdPictureStatus.OK Then
    'Add the image as resource in the PDF document
    Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    'Insert a new blank A4 page as second page of the document.
    Dim pageWidth As Single = 8.27
    Dim pageHeight As Single = 11.69
    Dim pagePosition As Integer = 2
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitInch)
    oGdPicturePDF.InsertPage(pageWidth, pageHeight, pagePosition)
    oGdPicturePDF.SelectPage(pagePosition)
    'Draw the image on the PDF page
    oGdPicturePDF.DrawImage(image_res_name, 0, 0, pageWidth, pageHeight)
    oGdPicturePDF.SaveToFileInc("test.pdf")
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddImageFromGdPictureImage(System.Int32,GdPicture12.PdfAdvancedImageCompression)">
      <summary>
 Adds then draw an image on a new page from a GdPicture Image by using advanced compression mechanism such as color detection or mixed raster content (MRC).
 </summary>
      <param name="ImageID">A GdPicture Image Identifier. The image to add within the PDF.</param>
      <param name="AvancedCompression">A member of the PdfAdvancedImageCompression enumeration specifying the advanced compression to use.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting a multipage tiff document to PDF using mixed raster content compression." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging()
 Dim oGdPicurePDF As New GdPicturePDF()
 oGdPicurePDF.NewPDF()
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 For i As Integer = 1 To oGdPictureImaging.GetPageCount(ImageID)
    oGdPictureImaging.SelectPage(ImageID, i)
    oGdPicurePDF.AddImageFromGdPictureImage(ImageID, PdfAdvancedImageCompression.PdfAdvancedImageCompressionMRC)
 Next
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.Dispose()
 oGdPicurePDF.SaveToFile("pdf_mrc.pdf")
 oGdPicurePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddImageFromBitmap(System.Drawing.Bitmap,System.Boolean,System.Boolean)">
      <summary>
 Adds an image as resource of the PDF, from a Drawing.Bitmap object. You will be able to subsequently draw this image on any page of the document by using the DrawImage() method.
 </summary>
      <param name="bitmap">A Bitmap object. The image to add within the PDF.</param>
      <param name="ImageMask">Only for 1BPP (1 Bit Per Pixel)image! Indicates whether the image shall be treated as an image mask (or Stencil mask). False by default.</param>
      <param name="DrawImage">If true, begin a new page and draw the added image on its whole surface.</param>
      <returns>
 Returns a Pdf image resource name if success, else an empty string. This pdf image name can be subsequently used with
 the DrawImage() method on any page of this document.
 </returns>
      <example>
        <code description="Draw an image on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
 If ImageID &gt; 0 AndAlso oGdPicturePDF.LoadFromFile("test.pdf", True) = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1) 'Selecting first page
    Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
    oGdPicturePDF.DrawImage(image_res_name, 10, 10, 5, 5)
    oGdPicturePDF.SaveToFileInc("test.pdf")
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
      <example>
        <code description="Open an existing PDF, insert an A4 page in second page then draw an image on the whole page area." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
 If ImageID &gt; 0 AndAlso oGdPicturePDF.LoadFromFile("test.pdf", True) = GdPictureStatus.OK Then
    'Add the image as resource in the PDF document
    Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    'Insert a new blank A4 page as second page of the document.
    Dim pageWidth As Single = 8.27
    Dim pageHeight As Single = 11.69
    Dim pagePosition As Integer = 2
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitInch)
    oGdPicturePDF.InsertPage(pageWidth, pageHeight, pagePosition)
    oGdPicturePDF.SelectPage(pagePosition)
    'Draw the image on the PDF page
    oGdPicturePDF.DrawImage(image_res_name, 0, 0, pageWidth, pageHeight)
    oGdPicturePDF.SaveToFileInc("test.pdf")
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddImageFromBitmap(System.Drawing.Bitmap,GdPicture12.PdfAdvancedImageCompression)">
      <summary>
 Adds then draw an image on a new page from a GdPicture Image by using advanced compression mechanism such as color detection or mixed raster content (MRC).
 </summary>
      <param name="bitmap">A Bitmap object. The image to add within the PDF.</param>
      <param name="AvancedCompression">A member of the PdfAdvancedImageCompression enumeration specifying the advanced compression to use.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting a tiff to PDF using mixed raster content compression." lang="VB.NET">
 Dim oGdPicurePDF As New GdPicturePDF()
 oGdPicurePDF.NewPDF()
 Dim bitmap As New Bitmap("document.tif")
 oGdPicurePDF.AddImageFromGdPictureBitmap(bitmap, PdfAdvancedImageCompression.PdfAdvancedImageCompressionMRC)
 bitmap.Dispose()
 oGdPicurePDF.SaveToFile("pdf_mrc.pdf")
 oGdPicurePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DeleteImage(System.String)">
      <summary>
 Deletes an image of the PDF.
 If the specified image is used elsewhere, for example on another pages, it will also be removed on these.
 </summary>
      <param name="ImageResName">The image resource name previously returned by the AddImageFromBitmap, AddImageFromGdPictureImage or GetPageImageResName method.</param>
      <example>
        <code description="Deleting the first image found on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 oGdPicturePDF.SelectPage(1)
 Dim imageResName As String = oGdPicturePDF.GetPageImageResName(0)
 If Not (imageResName = "") Then
    oGdPicturePDF.DeleteImage(imageResName)
 End If
 oGdPicturePDF.SaveToFile("newfile.pdf", True) 'use True to pack the document. (recommended)
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.ReplaceImage(System.String,System.Int32,System.Boolean)">
      <summary>
 Replaces an image of the PDF.
 If the specified image is used elsewhere, for example on another pages, it will also be replaced on these.
 </summary>
      <param name="ImageResName">The image resource name previously returned by the AddImageFromBitmap, AddImageFromGdPictureImage or GetPageImageResName method.</param>
      <param name="ImageID">A GdPicture Image Identifier. The image to add within the PDF.</param>
      <param name="ImageMask">Only for 1BPP (1 Bit Per Pixel)image! Indicates whether the image shall be
 treated as an image mask (or Stencil mask, False by default).</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting all bitmaps of a PDF into 1 bits per pixel (black and white) images." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    For i As Integer = 1 To oGdPicturePDF.GetPageCount()
       oGdPicturePDF.SelectPage(i)
       Dim imageCount As Integer = oGdPicturePDF.GetPageImageCount()
       If imageCount &gt; 0 Then
          For j As Integer = 1 To imageCount
             Dim imgResName As String = oGdPicturePDF.GetPageImageResName(j - 1)
             Dim ImageID As Integer = oGdPicturePDF.ExtractPageImage(j)
             Dim GdPictureImaging As New GdPictureImaging
             If GdPictureImaging.GetBitDepth(ImageID) &gt; 1 Then
                GdPictureImaging.ConvertTo1BppAT(ImageID)
                oGdPicturePDF.ReplaceImage(imgResName, ImageID, False, True)
             End If
             GdPictureImaging.ReleaseGdPictureImage(ImageID)
          Next
       End If
    Next
    oGdPicturePDF.SaveToFile("1bpp.pdf", False) 'Packing document is suggested in such scenario.
 End If
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.ReplaceImage(System.String,System.Int32,System.Boolean,System.Boolean)">
      <summary>
 Replaces an image of the PDF.
 If the specified image is used elsewhere, for example on another pages, it will also be replaced on these.
 </summary>
      <param name="ImageResName">The image resource name previously returned by the AddImageFromBitmap, AddImageFromGdPictureImage or GetPageImageResName method.</param>
      <param name="ImageID">A GdPicture Image Identifier. The image to add within the PDF.</param>
      <param name="ImageMask">Only for 1BPP (1 Bit Per Pixel)image! Indicates whether the image shall be
 treated as an image mask (or Stencil mask, False by default).</param>
      <param name="CheckSize">Set to true to overwrite the specified image only if the new image content size (in bytes) is smaller. If set to true but the resulting image content size (in bytes) is bigger than the original image content size (in bytes) a GdPictureStatus.Aborted will be returned.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting all bitmaps of a PDF into 1 bits per pixel (black and white) images." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    For i As Integer = 1 To oGdPicturePDF.GetPageCount()
       oGdPicturePDF.SelectPage(i)
       Dim imageCount As Integer = oGdPicturePDF.GetPageImageCount()
       If imageCount &gt; 0 Then
          For j As Integer = 1 To imageCount
             Dim imgResName As String = oGdPicturePDF.GetPageImageResName(j - 1)
             Dim ImageID As Integer = oGdPicturePDF.ExtractPageImage(j)
             Dim GdPictureImaging As New GdPictureImaging
             If GdPictureImaging.GetBitDepth(ImageID) &gt; 1 Then
                GdPictureImaging.ConvertTo1BppAT(ImageID)
                oGdPicturePDF.ReplaceImage(imgResName, ImageID, False, True)
             End If
             GdPictureImaging.ReleaseGdPictureImage(ImageID)
          Next
       End If
    Next
    oGdPicturePDF.SaveToFile("1bpp.pdf", False) 'Packing document is suggested in such scenario.
 End If
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageImageCoordinates(System.Int32,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
      <summary>
 Returns the coordinates of a specific image used on the current page.
 </summary>
      <param name="ImageIdx">The image index on the page. Must be a value between 0 and GetPageImageCount() -1.</param>
      <param name="x0">Output parameter. The x coordinate of the top-left corner of the image, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="y0">Output parameter. The y coordinate of the top-left corner of the image, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="x1">Output parameter. The x coordinate of the top-right corner of the image, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="y1">Output parameter. The y coordinate of the top-right corner of the image, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="x2">Output parameter. The x coordinate of the bottom-left corner of the image, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <param name="y2">Output parameter. The y coordinate of the bottom-left corner of the image, in current unit defined by the SetMeasurementUnit() method, in the current coordinate space defined by the SetOrigin() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageImageCount" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageImageFilters(System.Int32)">
      <summary>
 Returns the filters used to encode a specified image used on the current page.
 </summary>
      <param name="ImageIdx">The image index on the page. Must be a value between 0 and GetPageImageCount() -1.</param>
      <returns>
 An array of string including the names of the filters used to encode the image. Each entry can be: ASCIIHexDecode, ASCII85Decode, LZWDecode, FlateDecode, RunLengthDecode, CCITTFaxDecode, JBIG2Decode, DCTDecode, JPXDecode, Crypt. See Chapter 3.3 TABLE 3.5 Standard filters of the PDF reference for more information about each filter.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving the information of the images of the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim ImageCount As Integer = oGdPicturePDF.GetPageImageCount()
       If ImageCount &gt; 0 Then
          For ImageNumber = 0 To ImageCount - 1
             Dim ImageResName As String = oGdPicturePDF.GetPageImageResName(ImageNumber)
             Dim ImageBitDepth As Integer = oGdPicturePDF.GetPageImageBitDepth(ImageNumber)
             Dim X0, Y0, X1, Y1, X2, Y2 As Single
             oGdPicturePDF.GetPageImageCoordinates(ImageNumber, X0, Y0, X1, Y1, X2, Y2)
             Dim ImageFilters() As String = oGdPicturePDF.GetPageImageFilters(ImageNumber)
             Dim PdfImageMaskType As PdfImageMaskType = oGdPicturePDF.GetPageImageMaskMode(ImageNumber)
             Dim HorzRes, VertRes As Single
             oGdPicturePDF.GetPageImageResolution(ImageNumber, HorzRes, VertRes)
             Dim ImageWidth, ImageHeight As Integer
             oGdPicturePDF.GetPageImageSize(ImageNumber, ImageWidth, ImageHeight)
             MessageBox.Show("resource name : " + ImageResName + vbCrLf +
             "bit depth : " + ImageBitDepth.ToString() + vbCrLf +
             "cords : (" + X0.ToString() + "*" + Y1.ToString() + ")-(" + X1.ToString() + "*" + Y2.ToString() + ")" + vbCrLf +
             "Filters : " + Join(ImageFilters, ",") + vbCrLf +
             "mask type : " + PdfImageMaskType.ToString() + vbCrLf +
             "vert / horz res : " + HorzRes.ToString() + " / " + VertRes.ToString() + vbCrLf +
             "width / height : " + ImageWidth.ToString() + " / " + ImageHeight.ToString(), "Image number " + ImageNumber.ToString())
          Next
       Else
          MessageBox.Show("The first page does not contain images")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageImageMaskMode(System.Int32)">
      <summary>
 Returns the mask mode of a specified image used on the current page.
 </summary>
      <param name="ImageIdx">The image index on the page. Must be a value between 0 and GetPageImageCount() -1.</param>
      <returns>
 A member of the PdfImageMaskType enumeration.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving the information of the images of the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim ImageCount As Integer = oGdPicturePDF.GetPageImageCount()
       If ImageCount &gt; 0 Then
          For ImageNumber = 0 To ImageCount - 1
             Dim ImageResName As String = oGdPicturePDF.GetPageImageResName(ImageNumber)
             Dim ImageBitDepth As Integer = oGdPicturePDF.GetPageImageBitDepth(ImageNumber)
             Dim X0, Y0, X1, Y1, X2, Y2 As Single
             oGdPicturePDF.GetPageImageCoordinates(ImageNumber, X0, Y0, X1, Y1, X2, Y2)
             Dim ImageFilters() As String = oGdPicturePDF.GetPageImageFilters(ImageNumber)
             Dim PdfImageMaskType As PdfImageMaskType = oGdPicturePDF.GetPageImageMaskMode(ImageNumber)
             Dim HorzRes, VertRes As Single
             oGdPicturePDF.GetPageImageResolution(ImageNumber, HorzRes, VertRes)
             Dim ImageWidth, ImageHeight As Integer
             oGdPicturePDF.GetPageImageSize(ImageNumber, ImageWidth, ImageHeight)
             MessageBox.Show("resource name : " + ImageResName + vbCrLf +
             "bit depth : " + ImageBitDepth.ToString() + vbCrLf +
             "cords : (" + X0.ToString() + "*" + Y1.ToString() + ")-(" + X1.ToString() + "*" + Y2.ToString() + ")" + vbCrLf +
             "Filters : " + Join(ImageFilters, ",") + vbCrLf +
             "mask type : " + PdfImageMaskType.ToString() + vbCrLf +
             "vert / horz res : " + HorzRes.ToString() + " / " + VertRes.ToString() + vbCrLf +
             "width / height : " + ImageWidth.ToString() + " / " + ImageHeight.ToString(), "Image number " + ImageNumber.ToString())
          Next
       Else
          MessageBox.Show("The first page do not contain images")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageImageColorSpace(System.Int32)">
      <summary>
 Returns the color space of a specified image used on the current page.
 </summary>
      <param name="ImageIdx">The image index on the page. Must be a value between 0 and GetPageImageCount() -1.</param>
      <returns>
 A member of the PdfColorSpace enumeration.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving the information of the images of the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim ImageCount As Integer = oGdPicturePDF.GetPageImageCount()
       If ImageCount &gt; 0 Then
          For ImageNumber = 0 To ImageCount - 1
             Dim ImageResName As String = oGdPicturePDF.GetPageImageResName(ImageNumber)
             Dim ImageBitDepth As Integer = oGdPicturePDF.GetPageImageBitDepth(ImageNumber)
             Dim ImageColorSpace As PdfColorSpace = oGdPicturePDF.GetPageImageColorSpace(ImageNumber)
             Dim X0, Y0, X1, Y1, X2, Y2 As Single
             oGdPicturePDF.GetPageImageCoordinates(ImageNumber, X0, Y0, X1, Y1, X2, Y2)
             Dim ImageFilters() As String = oGdPicturePDF.GetPageImageFilters(ImageNumber)
             Dim PdfImageMaskType As PdfImageMaskType = oGdPicturePDF.GetPageImageMaskMode(ImageNumber)
             Dim HorzRes, VertRes As Single
             oGdPicturePDF.GetPageImageResolution(ImageNumber, HorzRes, VertRes)
             Dim ImageWidth, ImageHeight As Integer
             oGdPicturePDF.GetPageImageSize(ImageNumber, ImageWidth, ImageHeight)
             MessageBox.Show("resource name : " + ImageResName + vbCrLf +
             "bit depth : " + ImageBitDepth.ToString() + vbCrLf +
             "color space : " + ImageColorSpace.ToString() + vbCrLf +
             "cords : (" + X0.ToString() + "*" + Y1.ToString() + ")-(" + X1.ToString() + "*" + Y2.ToString() + ")" + vbCrLf +
             "Filters : " + Join(ImageFilters, ",") + vbCrLf +
             "mask type : " + PdfImageMaskType.ToString() + vbCrLf +
             "vert / horz res : " + HorzRes.ToString() + " / " + VertRes.ToString() + vbCrLf +
             "width / height : " + ImageWidth.ToString() + " / " + ImageHeight.ToString(), "Image number " + ImageNumber.ToString())
          Next
       Else
          MessageBox.Show("The first page do not contain images")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageImageResolution(System.Int32,System.Single@,System.Single@)">
      <summary>
 Returns the vertical and horizontal resolution of a specific image used on the current page.
 </summary>
      <param name="ImageIdx">The image index on the page. Must be a value between 0 and GetPageImageCount() -1.</param>
      <param name="HorizontalResolution">Output parameter. The horizontal image resolution.</param>
      <param name="VerticalResolution">Output parameter. The vertical image resolution.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageImageCount" />
      <example>
        <code description="Retrieving the information of the images of the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim ImageCount As Integer = oGdPicturePDF.GetPageImageCount()
       If ImageCount &gt; 0 Then
          For ImageNumber = 0 To ImageCount - 1
             Dim ImageResName As String = oGdPicturePDF.GetPageImageResName(ImageNumber)
             Dim ImageBitDepth As Integer = oGdPicturePDF.GetPageImageBitDepth(ImageNumber)
             Dim X0, Y0, X1, Y1, X2, Y2 As Single
             oGdPicturePDF.GetPageImageCoordinates(ImageNumber, X0, Y0, X1, Y1, X2, Y2)
             Dim ImageFilters() As String = oGdPicturePDF.GetPageImageFilters(ImageNumber)
             Dim PdfImageMaskType As PdfImageMaskType = oGdPicturePDF.GetPageImageMaskMode(ImageNumber)
             Dim HorzRes, VertRes As Single
             oGdPicturePDF.GetPageImageResolution(ImageNumber, HorzRes, VertRes)
             Dim ImageWidth, ImageHeight As Integer
             oGdPicturePDF.GetPageImageSize(ImageNumber, ImageWidth, ImageHeight)
             MessageBox.Show("resource name : " + ImageResName + vbCrLf +
             "bit depth : " + ImageBitDepth.ToString() + vbCrLf +
             "cords : (" + X0.ToString() + "*" + Y1.ToString() + ")-(" + X1.ToString() + "*" + Y2.ToString() + ")" + vbCrLf +
             "Filters : " + Join(ImageFilters, ",") + vbCrLf +
             "mask type : " + PdfImageMaskType.ToString() + vbCrLf +
             "vert / horz res : " + HorzRes.ToString() + " / " + VertRes.ToString() + vbCrLf +
             "width / height : " + ImageWidth.ToString() + " / " + ImageHeight.ToString(), "Image number " + ImageNumber.ToString())
          Next
       Else
          MessageBox.Show("The first page does not contain images")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageImageSize(System.Int32,System.Int32@,System.Int32@)">
      <summary>
 Returns the width and height of a specific image used on the current page.
 </summary>
      <param name="ImageIdx">The image index on the page. Must be a value between 0 and GetPageImageCount() -1.</param>
      <param name="Width">Output parameter. The image width, in pixel.</param>
      <param name="Height">Output parameter. The image height, in pixel.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 The width and height parameters are the dimension of the image added to the PDF prior drawing.
 </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageImageCount" />
      <example>
        <code description="Retrieving the information of the images of the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim ImageCount As Integer = oGdPicturePDF.GetPageImageCount()
       If ImageCount &gt; 0 Then
          For ImageNumber = 0 To ImageCount - 1
             Dim ImageResName As String = oGdPicturePDF.GetPageImageResName(ImageNumber)
             Dim ImageBitDepth As Integer = oGdPicturePDF.GetPageImageBitDepth(ImageNumber)
             Dim X0, Y0, X1, Y1, X2, Y2 As Single
             oGdPicturePDF.GetPageImageCoordinates(ImageNumber, X0, Y0, X1, Y1, X2, Y2)
             Dim ImageFilters() As String = oGdPicturePDF.GetPageImageFilters(ImageNumber)
             Dim PdfImageMaskType As PdfImageMaskType = oGdPicturePDF.GetPageImageMaskMode(ImageNumber)
             Dim HorzRes, VertRes As Single
             oGdPicturePDF.GetPageImageResolution(ImageNumber, HorzRes, VertRes)
             Dim ImageWidth, ImageHeight As Integer
             oGdPicturePDF.GetPageImageSize(ImageNumber, ImageWidth, ImageHeight)
             MessageBox.Show("resource name : " + ImageResName + vbCrLf +
             "bit depth : " + ImageBitDepth.ToString() + vbCrLf +
             "cords : (" + X0.ToString() + "*" + Y1.ToString() + ")-(" + X1.ToString() + "*" + Y2.ToString() + ")" + vbCrLf +
             "Filters : " + Join(ImageFilters, ",") + vbCrLf +
             "mask type : " + PdfImageMaskType.ToString() + vbCrLf +
             "vert / horz res : " + HorzRes.ToString() + " / " + VertRes.ToString() + vbCrLf +
             "width / height : " + ImageWidth.ToString() + " / " + ImageHeight.ToString(), "Image number " + ImageNumber.ToString())
          Next
       Else
          MessageBox.Show("The first page does not contain images")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageImageBitDepth(System.Int32)">
      <summary>
 Returns bit depth of a specific image used on the current page.
 </summary>
      <param name="ImageIdx">The image index on the page. Must be a value between 0 and GetPageImageCount() -1.</param>
      <returns>
 The specified image bit depth. If 0, use the GetStat() method to determine the reason the method failed.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageImageCount" />
      <example>
        <code description="Retrieving the information of the images of the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim ImageCount As Integer = oGdPicturePDF.GetPageImageCount()
       If ImageCount &gt; 0 Then
          For ImageNumber = 0 To ImageCount - 1
             Dim ImageResName As String = oGdPicturePDF.GetPageImageResName(ImageNumber)
             Dim ImageBitDepth As Integer = oGdPicturePDF.GetPageImageBitDepth(ImageNumber)
             Dim X0, Y0, X1, Y1, X2, Y2 As Single
             oGdPicturePDF.GetPageImageCoordinates(ImageNumber, X0, Y0, X1, Y1, X2, Y2)
             Dim ImageFilters() As String = oGdPicturePDF.GetPageImageFilters(ImageNumber)
             Dim PdfImageMaskType As PdfImageMaskType = oGdPicturePDF.GetPageImageMaskMode(ImageNumber)
             Dim HorzRes, VertRes As Single
             oGdPicturePDF.GetPageImageResolution(ImageNumber, HorzRes, VertRes)
             Dim ImageWidth, ImageHeight As Integer
             oGdPicturePDF.GetPageImageSize(ImageNumber, ImageWidth, ImageHeight)
             MessageBox.Show("resource name : " + ImageResName + vbCrLf +
             "bit depth : " + ImageBitDepth.ToString() + vbCrLf +
             "cords : (" + X0.ToString() + "*" + Y1.ToString() + ")-(" + X1.ToString() + "*" + Y2.ToString() + ")" + vbCrLf +
             "Filters : " + Join(ImageFilters, ",") + vbCrLf +
             "mask type : " + PdfImageMaskType.ToString() + vbCrLf +
             "vert / horz res : " + HorzRes.ToString() + " / " + VertRes.ToString() + vbCrLf +
             "width / height : " + ImageWidth.ToString() + " / " + ImageHeight.ToString(), "Image number " + ImageNumber.ToString())
          Next
       Else
          MessageBox.Show("The first page does not contain images")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageImageCount">
      <summary>
 Returns the number of bitmap available on the selected page of the PDF.
 </summary>
      <returns>
 The number of available bitmap.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.ExtractPageImage(System.Int32)" />
      <example>
        <code description="Retrieving the information of the images of the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim ImageCount As Integer = oGdPicturePDF.GetPageImageCount()
       If ImageCount &gt; 0 Then
          For ImageNumber = 0 To ImageCount - 1
             Dim ImageResName As String = oGdPicturePDF.GetPageImageResName(ImageNumber)
             Dim ImageBitDepth As Integer = oGdPicturePDF.GetPageImageBitDepth(ImageNumber)
             Dim X0, Y0, X1, Y1, X2, Y2 As Single
             oGdPicturePDF.GetPageImageCoordinates(ImageNumber, X0, Y0, X1, Y1, X2, Y2)
             Dim ImageFilters() As String = oGdPicturePDF.GetPageImageFilters(ImageNumber)
             Dim PdfImageMaskType As PdfImageMaskType = oGdPicturePDF.GetPageImageMaskMode(ImageNumber)
             Dim HorzRes, VertRes As Single
             oGdPicturePDF.GetPageImageResolution(ImageNumber, HorzRes, VertRes)
             Dim ImageWidth, ImageHeight As Integer
             oGdPicturePDF.GetPageImageSize(ImageNumber, ImageWidth, ImageHeight)
             MessageBox.Show("resource name : " + ImageResName + vbCrLf +
             "bit depth : " + ImageBitDepth.ToString() + vbCrLf +
             "cords : (" + X0.ToString() + "*" + Y1.ToString() + ")-(" + X1.ToString() + "*" + Y2.ToString() + ")" + vbCrLf +
             "Filters : " + Join(ImageFilters, ",") + vbCrLf +
             "mask type : " + PdfImageMaskType.ToString() + vbCrLf +
             "vert / horz res : " + HorzRes.ToString() + " / " + VertRes.ToString() + vbCrLf +
             "width / height : " + ImageWidth.ToString() + " / " + ImageHeight.ToString(), "Image number " + ImageNumber.ToString())
          Next
       Else
          MessageBox.Show("The first page does not contain images")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageImageResName(System.Int32)">
      <summary>
 Returns the resource name of a specific image used on the current page.
 </summary>
      <param name="ImageIdx">The image index on the page. Must be a value between 0 and GetPageImageCount() -1.</param>
      <returns>
 The resource name of the image.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.ExtractPageImage(System.Int32)" />
      <example>
        <code description="Retrieving the information of the images of the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    If oGdPicturePDF.GetPageCount() &gt; 0 Then
       oGdPicturePDF.SelectPage(1)
       Dim ImageCount As Integer = oGdPicturePDF.GetPageImageCount()
       If ImageCount &gt; 0 Then
          For ImageNumber = 0 To ImageCount - 1
             Dim ImageResName As String = oGdPicturePDF.GetPageImageResName(ImageNumber)
             Dim ImageBitDepth As Integer = oGdPicturePDF.GetPageImageBitDepth(ImageNumber)
             Dim X0, Y0, X1, Y1, X2, Y2 As Single
             oGdPicturePDF.GetPageImageCoordinates(ImageNumber, X0, Y0, X1, Y1, X2, Y2)
             Dim ImageFilters() As String = oGdPicturePDF.GetPageImageFilters(ImageNumber)
             Dim PdfImageMaskType As PdfImageMaskType = oGdPicturePDF.GetPageImageMaskMode(ImageNumber)
             Dim HorzRes, VertRes As Single
             oGdPicturePDF.GetPageImageResolution(ImageNumber, HorzRes, VertRes)
             Dim ImageWidth, ImageHeight As Integer
             oGdPicturePDF.GetPageImageSize(ImageNumber, ImageWidth, ImageHeight)
             MessageBox.Show("resource name : " + ImageResName + vbCrLf +
             "bit depth : " + ImageBitDepth.ToString() + vbCrLf +
             "cords : (" + X0.ToString() + "*" + Y1.ToString() + ")-(" + X1.ToString() + "*" + Y2.ToString() + ")" + vbCrLf +
             "Filters : " + Join(ImageFilters, ",") + vbCrLf +
             "mask type : " + PdfImageMaskType.ToString() + vbCrLf +
             "vert / horz res : " + HorzRes.ToString() + " / " + VertRes.ToString() + vbCrLf +
             "width / height : " + ImageWidth.ToString() + " / " + ImageHeight.ToString(), "Image number " + ImageNumber.ToString())
          Next
       Else
          MessageBox.Show("The first page does not contain images")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages", "Error")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.ExtractPageImage(System.Int32)">
      <summary>
 Extract a bitmap embedded into the selected page of the PDF to a new GdPicture Image.
 </summary>
      <param name="ImageNo">The number of the bitmap in the page. Must be a value between 1 and
 GetPageImageCount.</param>
      <returns>
 A GdPicture Image Identifier. The created image.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromFile(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.LoadFromStream(System.IO.Stream)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageImageCount" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SearchText(System.String,System.Int32,System.Boolean,System.Boolean,System.Single@,System.Single@,System.Single@,System.Single@)">
      <summary>
 Searches the current page page of the PDF for an occurrence of a given text string and returns
 its bounding box.
 </summary>
      <param name="Text">The text to search for.</param>
      <param name="Occurrence">The occurrence of the text to search for. 1 to search for the first
 occurrence, 2 for the second... 0 is not accepted.</param>
      <param name="CaseSensitive">True to apply case-sensitive search, else False.</param>
      <param name="WholeWords">Searches for whole words only.</param>
      <param name="Left">If the occurrence is found, returns the left position in inches of the
 area bounding the text.</param>
      <param name="Top">If the occurrence is found, returns the top position in inches of the
 area bounding the text.</param>
      <param name="Width">If the occurrence is found, returns the width in inches of the area
 bounding the text.</param>
      <param name="Height">If the occurrence is found, returns the height in inches of the area
 bounding the text.</param>
      <returns>
 True if the string has been found, else False.
 </returns>
      <example>
        <code description="Searching for a text in all pages of a PDF." lang="VB.NET">
 Dim TextToFind As String = "John"
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    Dim pageCount As Integer = oGdPicturePDF.GetPageCount
    For i As Integer = 1 To pageCount
       oGdPicturePDF.SelectPage(i)
       Dim PosTexts As String = ""
       Dim Occur As Integer = 1
       Dim found As Boolean
       Do
          Dim Posleft, PosTop, PosHeight, PosWidth As Single
          found = oGdPicturePDF.SearchText(TextToFind, Occur, False, False, Posleft, PosTop, PosWidth, PosHeight)
          If found Then
             PosTexts = PosTexts + "Found at (" +
             Posleft.ToString() + "*" + PosTop.ToString() +
             ")-(" +
             PosWidth.ToString() + "*" + PosHeight.ToString() +
             ")" + vbCrLf
             Occur = Occur + 1
          End If
       Loop While found = True
       If PosTexts &lt;&gt; "" Then
          MessageBox.Show(PosTexts, "Search for &lt;&lt;" + TextToFind + "&gt;&gt; in page number " + i.ToString())
       Else
          MessageBox.Show("text not found", "Search for &lt;&lt;" + TextToFind + "&gt;&gt; in page number " + i.ToString())
       End If
    Next
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageText">
      <summary>
 Returns the text of the current page of the PDF.
 </summary>
      <returns>
 The whole page text.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Extracting the text of all page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    Dim pageCount As Integer = oGdPicturePDF.GetPageCount
    For i As Integer = 1 To pageCount
       oGdPicturePDF.SelectPage(i)
       Dim pageText As String = oGdPicturePDF.GetPageText()
       Console.WriteLine("Text of page " + CStr(i) + ":")
       Console.Write(pageText)
    Next
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageTextWithCoords(System.String)">
      <summary>
 Returns the text of the current page of the PDF including coordinates, font information, text size and text mode.
 The return string will be formatted like this:
 The most top left X coordinate of the rendering area + [FieldSeparator] +
 The most top left Y coordinate of the rendering area + [FieldSeparator] +
 The most top right X coordinate of the rendering area + [FieldSeparator] +
 The most top right Y coordinate of the rendering area + [FieldSeparator] +
 The most bottom right X coordinate of the rendering area + [FieldSeparator] +
 The most bottom right Y coordinate of the rendering area + [FieldSeparator] +
 The most bottom left X coordinate of the rendering area + [FieldSeparator] +
 The most bottom left Y coordinate of the rendering area + [FieldSeparator] +
 Word + [FieldSeparator] +
 Font name + [FieldSeparator] +
 Font box height + [FieldSeparator] +
 Text mode + [FieldSeparator] +
 Text size + EOL
 </summary>
      <param name="FieldSeparator">The string to use to delimit fields.</param>
      <returns>
 The whole page text (one word per line) including coordinates and properties.
 </returns>
      <remarks>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
        <para>
 Returned coordinates are given in points = 1/72 inches.
 </para>
        <para>
 Value, expressed in the glyph coordinate system, specifying the height of the font bounding box.
 The font bounding box is the smallest rectangle enclosing the shape that would result if all the glyphs of the font were placed with their origins coinciding and then filled.
 </para>
        <para>
 Returned Text mode is a member of the PdfTextMode enumeration.
 </para>
      </remarks>
      <example>
        <code description="Returning the text of the current page of the PDF with its coordinates." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    Dim pageCount As Integer = oGdPicturePDF.GetPageCount
    For i As Integer = 1 To pageCount
       oGdPicturePDF.SelectPage(i)
       Dim pageText As String = oGdPicturePDF.GetPageTextWithCoords("¤")
       MessageBox.Show(pageText, "Text in page " + i.ToString())
    Next
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetPageTextArea(System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Returns the text of the current page of the PDF within a specific rectangle.
 </summary>
      <param name="Left">Left position of the rectangle in inches.</param>
      <param name="Top">Top position of the rectangle in inches.</param>
      <param name="Width">Width of the rectangle in inches.</param>
      <param name="Height">Height of the rectangle in inches.</param>
      <returns>
 The text within the specified area.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving the text contained in a certain area in all page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    Dim DumpText As String = ""
    Dim pageCount As Integer = oGdPicturePDF.GetPageCount
    For i As Integer = 1 To pageCount
       oGdPicturePDF.SelectPage(i)
       Dim pageText As String = oGdPicturePDF.GetPageTextArea(2, 2, 3, 3)
       DumpText += "Text of page " + CStr(i) + ":" + vbCrLf +
       pageText + vbCrLf + vbCrLf
    Next
    MessageBox.Show(DumpText)
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetStat">
      <summary>
 Returns the last status of the GdPicturePDF object.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Using the standard printer dialog box to print a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    If oGdPicturePDF.PrintDialog(Me) Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.GetStat().ToString)
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PageHasShape">
      <summary>
 Returns if the selected page of the PDF has any kind of shape (path, lines, rectangle, bezier curves...).
 </summary>
      <returns>
 True is the selected page has shape, else False.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PageHasText">
      <summary>
 Returns if the selected page of the PDF has text.
 This method uses an internal algorithm which is faster than full page text extraction. to determine
 if a PDF page contains text.
 </summary>
      <returns>
 True is the selected page has text, else False.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PageHasText(System.Boolean)">
      <summary>
 Returns if the selected page of the PDF has text.
 This method uses an internal algorithm which is faster than full page text extraction. to determine
 if a PDF page contains text.
 </summary>
      <param name="IgnoreHiddenText">Specifies if hidden text must be ignored.</param>
      <returns>
 True is the selected page has text, else False.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.SelectPage(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.IsPageImage">
      <summary>
 Returns if the current page of the PDF is image-based.
 Are considered as "image-based", pages containing only one fully visible bitmap covering the whole page area and drawn without rotation, with no other particular drawing operation such as clipping path.
 </summary>
      <returns>True if the current page is image-based, else False.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.IsPageImage(System.Int32@,System.Boolean)">
      <summary>
 Returns if the current page of the PDF is image-based.
 Are considered as "image-based", pages containing only one fully visible bitmap covering the whole page area and drawn without rotation, with no other particular drawing operation such as clipping path.
 </summary>
      <param name="ImageID">Output parameter. If the PDF page is image-based, this parameter will return a GdPicture Image, corresponding to the bitmap embedded in the page. In the other case, this parameter returns 0.</param>
      <param name="AutoRotate">Set True to automatically rotate the exported bitmap, in order to get the same rendering orientation as the viewing mode.</param>
      <returns>True if the current page is image-based, else False.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SupportFunc(System.Int32,System.Double,System.String)">
      <summary>
 Used for GdPicture technical support purpose.
 </summary>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetOrigin(GdPicture12.PdfOrigin)">
      <summary>
 Defines the origin for coordinates.
 </summary>
      <param name="Origin">A member of the PdfOrigin enumeration. Determines the origin in the current coordinates system.</param>
      <example>
        <code description="Retrieving the position of the first page's media box in millimetres." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status = GdPictureStatus.OK Then
       oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
       oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
       Dim PageLeft, PageTop, PageRight, PageBottom As Single
       oGdPicturePDF.GetPageBox(PdfPageBox.PdfPageBoxMediaBox, PageLeft, PageTop, PageRight, PageBottom)
       MessageBox.Show("First page mediabox : (" + PageLeft.ToString() + " * " + PageTop.ToString() + ")-(" + PageRight.ToString() + "*" + PageBottom.ToString() + ") millimetres")
    Else
       MessageBox.Show("This PDF has no pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetOrigin">
      <summary>
 Returns the origin for coordinates.
 </summary>
      <returns>A member of the PdfOrigin enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)">
      <summary>
 Sets the measurement unit to be used. Default unit mode is Point.
 </summary>
      <param name="UnitMode">A member of the PdfMeasurementUnit enumeration.</param>
      <example>
        <code description="Create a new pdf with 'Hello Word' writen in the center of the firt page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    Dim ResFontName = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetTextSize(30)
    oGdPicturePDF.DrawText(ResFontName, 100, 150, "Hello Word")
    oGdPicturePDF.SaveToFile("test_HelloWord.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed: " + status.ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetMeasurementUnit">
      <summary>
 Gets the measurement unit used.
 </summary>
      <returns>The current measurement unit used.</returns>
      <remarks>.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetPrependContentMode(System.Boolean)">
      <summary>
 Determines if subsequent modifications of the current page of the PDF are prepend or append (default mode).
 </summary>
      <param name="Enable">Set True to enable the prepend mode or False to deactivate it.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Rotating the first page of an existing PDF by an angle of 20 degrees without altering its objects content." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Const ROTATION_ANGLE As Single = 20 'anti clockwise
 If oGdPicturePDF.LoadFromFile("test2.pdf", False) = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1) 'implicit
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitPoint)
    oGdPicturePDF.SetPrependContentMode(True)
    Dim pageWidth As Single = oGdPicturePDF.GetPageWidth()
    Dim pageHeight As Single = oGdPicturePDF.GetPageHeight()
    'Rotation by the center
    oGdPicturePDF.AddTransformationMatrix(1, 0, 0, 1, pageWidth / 2, pageHeight / 2)
    oGdPicturePDF.AddRotationAt(ROTATION_ANGLE, 0, 0)
    oGdPicturePDF.AddTransformationMatrix(1, 0, 0, 1, -pageWidth / 2, -pageHeight / 2)
    '
    oGdPicturePDF.SaveToFile("rotated.pdf")
 End If
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.ResetGraphicsState">
      <summary>
 Resets the graphics parameters to the default configuration. For example, any page transformation will be canceled.
 It is suggested to make a call to this method before appending data to existing PDF documents.
 </summary>
      <returns>A member of the GdPicture enumeration.</returns>
      <example>
        <code description="Create a new pdf, add a blank page and draw some rectangles with a different matrix." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.ResetGraphicsState()
    oGdPicturePDF.SetLineWidth(0.5)
    oGdPicturePDF.SetLineColor(Color.Blue)
    oGdPicturePDF.SetFillColor(Color.Cyan)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.SaveGraphicsState()   'save the graphics state
    oGdPicturePDF.SaveGraphicsState()   'save the graphics state again
    oGdPicturePDF.AddTransformationMatrix(1, 0, 0, 1, 150, 0) 'tranlation
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.SetFillColor(Color.Purple)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.RestoreGraphicsState() 'restore the preceeding graphic state
    oGdPicturePDF.AddTransformationMatrix(1, 0.1, 0, 1, 150, -100) 'shear vert + tranlation
    oGdPicturePDF.SetLineColor(Color.Green)
    oGdPicturePDF.SetFillColor(Color.GreenYellow)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.RestoreGraphicsState()   'restore the preceeding graphic state (the inital one)
    oGdPicturePDF.DrawRectangle(10, 80, 40, 20, True, True) 'use inital colors
    oGdPicturePDF.AddTransformationMatrix(1, 0.1, 0.1, 1, 100, 0) 'shear horz and vert + trans
    oGdPicturePDF.SetLineColor(Color.Black)
    oGdPicturePDF.SetFillColor(Color.Yellow)
    oGdPicturePDF.DrawRectangle(10, 80, 40, 20, True, True)
    oGdPicturePDF.SaveToFile("test_GraphicState.pdf")
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF failed")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SaveGraphicsState">
      <summary>
 Save the current graphics state on the graphics state stack.
 From PDF references (4.3 Graphics State):
 A PDF consumer application maintains an internal data structure called the graphics state
 that holds current graphics control parameters. These parameters define the global framework
 within which the graphics operators execute. For example, the f (fill) operator implicitly uses
 the current color parameter, and the S(stroke) operator additionally uses the current line width parameter
 from the graphics state.
 </summary>
      <returns>A member of the GdPicture enumeration.</returns>
      <example>
        <code description="Create a new pdf, add a blank page and draw some rectangles with a different matrix." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.ResetGraphicsState()
    oGdPicturePDF.SetLineWidth(0.5)
    oGdPicturePDF.SetLineColor(Color.Blue)
    oGdPicturePDF.SetFillColor(Color.Cyan)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.SaveGraphicsState()   'save the graphics state
    oGdPicturePDF.SaveGraphicsState()   'save the graphics state again
    oGdPicturePDF.AddTransformationMatrix(1, 0, 0, 1, 150, 0) 'tranlation
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.SetFillColor(Color.Purple)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.RestoreGraphicsState() 'restore the preceeding graphic state
    oGdPicturePDF.AddTransformationMatrix(1, 0.1, 0, 1, 150, -100) 'shear vert + tranlation
    oGdPicturePDF.SetLineColor(Color.Green)
    oGdPicturePDF.SetFillColor(Color.GreenYellow)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.RestoreGraphicsState()   'restore the preceeding graphic state (the inital one)
    oGdPicturePDF.DrawRectangle(10, 80, 40, 20, True, True) 'use inital colors
    oGdPicturePDF.AddTransformationMatrix(1, 0.1, 0.1, 1, 100, 0) 'shear horz and vert + trans
    oGdPicturePDF.SetLineColor(Color.Black)
    oGdPicturePDF.SetFillColor(Color.Yellow)
    oGdPicturePDF.DrawRectangle(10, 80, 40, 20, True, True)
    oGdPicturePDF.SaveToFile("test_GraphicState.pdf")
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF failed")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RestoreGraphicsState">
      <summary>
 Restore the graphics state by removing the most recently saved state from the stack and making it the current state.
 From PDF references (4.3 Graphics State):
 A PDF consumer application maintains an internal data structure called the graphics state
 that holds current graphics control parameters. These parameters define the global framework
 within which the graphics operators execute. For example, the f (fill) operator implicitly uses
 the current color parameter, and the S(stroke) operator additionally uses the current line width parameter
 from the graphics state.
 </summary>
      <returns>A member of the GdPicture enumeration.</returns>
      <example>
        <code description="Create a new pdf, add a blank page and draw some rectangles with a different matrix." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.ResetGraphicsState()
    oGdPicturePDF.SetLineWidth(0.5)
    oGdPicturePDF.SetLineColor(Color.Blue)
    oGdPicturePDF.SetFillColor(Color.Cyan)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.SaveGraphicsState()   'save the graphics state
    oGdPicturePDF.SaveGraphicsState()   'save the graphics state again
    oGdPicturePDF.AddTransformationMatrix(1, 0, 0, 1, 150, 0) 'tranlation
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.SetFillColor(Color.Purple)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.RestoreGraphicsState() 'restore the preceeding graphic state
    oGdPicturePDF.AddTransformationMatrix(1, 0.1, 0, 1, 150, -100) 'shear vert + tranlation
    oGdPicturePDF.SetLineColor(Color.Green)
    oGdPicturePDF.SetFillColor(Color.GreenYellow)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.RestoreGraphicsState()   'restore the preceeding graphic state (the inital one)
    oGdPicturePDF.DrawRectangle(10, 80, 40, 20, True, True) 'use inital colors
    oGdPicturePDF.AddTransformationMatrix(1, 0.1, 0.1, 1, 100, 0) 'shear horz and vert + trans
    oGdPicturePDF.SetLineColor(Color.Black)
    oGdPicturePDF.SetFillColor(Color.Yellow)
    oGdPicturePDF.DrawRectangle(10, 80, 40, 20, True, True)
    oGdPicturePDF.SaveToFile("test_GraphicState.pdf")
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF failed")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetLineWidth(System.Single)">
      <summary>
 Sets the line width (or pen size) for subsequent stroking operations.
 </summary>
      <param name="LineWidth">The width of the lines in current unit defined by the
 SetMeasurementUnit() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
      <example>
        <code description="Create a new pdf, add a blank page, draw some rectangles with different attributes for the line and the filling." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.ResetGraphicsState()
    oGdPicturePDF.SetLineWidth(0.5)
    oGdPicturePDF.SetLineColor(Color.Blue)
    oGdPicturePDF.SetFillColor(Color.Cyan)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineDash(5, 2)
    oGdPicturePDF.DrawRectangle(80, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineNoDash()
    oGdPicturePDF.DrawRectangle(150, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineColor(Color.Bisque)
    oGdPicturePDF.SetFillColor(Color.RosyBrown)
    oGdPicturePDF.SetLineWidth(10)
    oGdPicturePDF.SetLineAlpha(128)
    oGdPicturePDF.SetFillAlpha(128)
    oGdPicturePDF.DrawRectangle(20, 20, 180, 30, True, True)
    oGdPicturePDF.SaveToFile("test_SetLine.pdf")
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF failed")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetLineDash(System.Single,System.Single)">
      <summary>
 Sets the dash pattern for subsequent stroking operations.
 </summary>
      <param name="DashOn">The width of the dashes in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DashOff">The width of the space between the dashes in current unit defined by the SetMeasurementUnit() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
      <example>
        <code description="Create a new pdf, add a blank page, draw some rectangles with different attributes for the line and the filling." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.ResetGraphicsState()
    oGdPicturePDF.SetLineWidth(0.5)
    oGdPicturePDF.SetLineColor(Color.Blue)
    oGdPicturePDF.SetFillColor(Color.Cyan)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineDash(5, 2)
    oGdPicturePDF.DrawRectangle(80, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineNoDash()
    oGdPicturePDF.DrawRectangle(150, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineColor(Color.Bisque)
    oGdPicturePDF.SetFillColor(Color.RosyBrown)
    oGdPicturePDF.SetLineWidth(10)
    oGdPicturePDF.SetLineAlpha(128)
    oGdPicturePDF.SetFillAlpha(128)
    oGdPicturePDF.DrawRectangle(20, 20, 180, 30, True, True)
    oGdPicturePDF.SaveToFile("test_SetLine.pdf")
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF failed")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetLineDash(System.Single[])">
      <summary>
 Sets the dash pattern for subsequent stroking operations.
 </summary>
      <param name="DashPattern">Specifies the length of the custom dashes and spaces, in current unit defined by the SetMeasurementUnit() method. The first element sets the length of a dash, the second element sets the length of a space, the third element sets the length of a dash, and so forth...</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
      <example>
        <code description="Create a new pdf, add a blank page, draw some rectangles with different attributes for the line and the filling." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.ResetGraphicsState()
    oGdPicturePDF.SetLineWidth(0.5)
    oGdPicturePDF.SetLineColor(Color.Blue)
    oGdPicturePDF.SetFillColor(Color.Cyan)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineDashPattern(new Single(){1, 0.5, 2, 0.3})
    oGdPicturePDF.DrawRectangle(80, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineNoDash()
    oGdPicturePDF.DrawRectangle(150, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineColor(Color.Bisque)
    oGdPicturePDF.SetFillColor(Color.RosyBrown)
    oGdPicturePDF.SetLineWidth(10)
    oGdPicturePDF.SetLineAlpha(128)
    oGdPicturePDF.SetFillAlpha(128)
    oGdPicturePDF.DrawRectangle(20, 20, 180, 30, True, True)
    oGdPicturePDF.SaveToFile("test_SetLine.pdf")
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF failed")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetLineJoinStyle(GdPicture12.PdfLineJoinStyle)">
      <summary>
 Sets the line join style. The line join style specifies the shape to be used at the corners of paths that are stroked.
 </summary>
      <param name="LineJoin">A member of the PdfLineJoinStyle enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetLineCapStyle(GdPicture12.PdfLineCapStyle)">
      <summary>
 Sets the line cap style. The line cap style specifies the shape to be used at the ends of open subpaths (and dashes, if any) when they are stroked.
 </summary>
      <param name="LineCap">A member of the PdfLineCapStyle enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetLineNoDash">
      <summary>
 Removes the dash pattern for subsequent stroking operations.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
      <example>
        <code description="Create a new pdf, add a blank page, draw some rectangles with different attributes for the line and the filling." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.ResetGraphicsState()
    oGdPicturePDF.SetLineWidth(0.5)
    oGdPicturePDF.SetLineColor(Color.Blue)
    oGdPicturePDF.SetFillColor(Color.Cyan)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineDash(5, 2)
    oGdPicturePDF.DrawRectangle(80, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineNoDash()
    oGdPicturePDF.DrawRectangle(150, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineColor(Color.Bisque)
    oGdPicturePDF.SetFillColor(Color.RosyBrown)
    oGdPicturePDF.SetLineWidth(10)
    oGdPicturePDF.SetLineAlpha(128)
    oGdPicturePDF.SetFillAlpha(128)
    oGdPicturePDF.DrawRectangle(20, 20, 180, 30, True, True)
    oGdPicturePDF.SaveToFile("test_SetLine.pdf")
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF failed")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetBlendMode(GdPicture12.PdfBlendMode)">
      <summary>
 Defines the blend method used in the compositing formula to customize the blending operation for subsequent drawing operations.
 </summary>
      <param name="BlendMode">A member of the PdfBlendMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Adding a semi transparent watermark behind a page content" lang="VB.NET">
 Const text As String = "WATERMARK"
 Const textSize As Integer = 100
 Const rotation As Single = 320 'Note: rotation is anti-clockwise
 Const font As String = "Arial"
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("input.pdf", False)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitPoint)
 oGdPicturePDF.SelectPage(1)
 Dim oGdPictureBackPDF As New GdPicturePDF
 oGdPictureBackPDF.NewPDF()
 Dim pageWidth As Single = oGdPicturePDF.GetPageWidth()
 Dim pageHeight As Single = oGdPicturePDF.GetPageHeight()
 oGdPictureBackPDF.ClonePage(gdPicturePDF, 1)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.ClearPageContent()
 Dim fontResName As String = oGdPicturePDF.AddTrueTypeFont(font, True, False, False)
 oGdPicturePDF.SetTextSize(textSize)
 oGdPicturePDF.DrawRotatedText(fontResName, 0, oGdPicturePDF.GetTextHeight(fontResName, textSize), text, rotation)
 oGdPicturePDF.SaveGraphicsState()
 oGdPicturePDF.SetBlendMode(PdfBlendMode.PdfBlendModeNormal)
 oGdPicturePDF.SetFillAlpha(200)
 oGdPicturePDF.DrawPage(oGdPictureBackPDF, 1, 0, pageHeight, pageWidth, pageHeight)
 oGdPicturePDF.SaveToFile("output.pdf")
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFillColor(System.Byte,System.Byte,System.Byte)">
      <summary>
 Sets the color for subsequent filling operations. This method uses RGB color space.
 </summary>
      <param name="Red">The amount of red color between 0 and 255.</param>
      <param name="Green">The amount of green color between 0 and 255.</param>
      <param name="Blue">The amount of blue color between 0 and 255.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Create a new pdf, add a blank page, draw some rectangles with different attributes for the line and the filling." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.ResetGraphicsState()
    oGdPicturePDF.SetLineWidth(0.5)
    oGdPicturePDF.SetLineColor(Color.Blue)
    oGdPicturePDF.SetFillColor(110, 205, 221)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineDash(5, 2)
    oGdPicturePDF.DrawRectangle(80, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineNoDash()
    oGdPicturePDF.DrawRectangle(150, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineColor(Color.Bisque)
    oGdPicturePDF.SetFillColor(218, 193, 191)
    oGdPicturePDF.SetLineWidth(10)
    oGdPicturePDF.SetLineAlpha(128)
    oGdPicturePDF.SetFillAlpha(128)
    oGdPicturePDF.DrawRectangle(20, 20, 180, 30, True, True)
    oGdPicturePDF.SaveToFile("test_SetLine.pdf")
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF failed")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFillColor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Sets the color for subsequent filling operations. This method uses CMYK color space.
 </summary>
      <param name="Cyan">The amount of Cyan color between 0 and 255.</param>
      <param name="Magenta">The amount of Magenta color between 0 and 255.</param>
      <param name="Yellow">The amount of Yellow color between 0 and 255.</param>
      <param name="Black">The amount of Black (key) color between 0 and 255.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Create a new pdf, add a blank page, draw some rectangles with different attributes for the line and the filling." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.ResetGraphicsState()
    oGdPicturePDF.SetLineWidth(0.5)
    oGdPicturePDF.SetLineColor(Color.Blue)
    oGdPicturePDF.SetFillColor(50,7,0,13)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineDash(5, 2)
    oGdPicturePDF.DrawRectangle(80, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineNoDash()
    oGdPicturePDF.DrawRectangle(150, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineColor(Color.Bisque)
    oGdPicturePDF.SetFillColor(0, 11, 12, 14)
    oGdPicturePDF.SetLineWidth(10)
    oGdPicturePDF.SetLineAlpha(128)
    oGdPicturePDF.SetFillAlpha(128)
    oGdPicturePDF.DrawRectangle(20, 20, 180, 30, True, True)
    oGdPicturePDF.SaveToFile("test_SetLine.pdf")
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF failed")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFillColor(System.Drawing.Color)">
      <summary>
 Sets the color for subsequent filling operations. This method uses RGB color space.
 </summary>
      <param name="FillColor">The filling color.A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Create a new pdf, add a blank page, draw some rectangles with different attributes for the line and the filling." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.ResetGraphicsState()
    oGdPicturePDF.SetLineWidth(0.5)
    oGdPicturePDF.SetLineColor(Color.Blue)
    oGdPicturePDF.SetFillColor(Color.Cyan)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineDash(5, 2)
    oGdPicturePDF.DrawRectangle(80, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineNoDash()
    oGdPicturePDF.DrawRectangle(150, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineColor(Color.Bisque)
    oGdPicturePDF.SetFillColor(Color.RosyBrown)
    oGdPicturePDF.SetLineWidth(10)
    oGdPicturePDF.SetLineAlpha(128)
    oGdPicturePDF.SetFillAlpha(128)
    oGdPicturePDF.DrawRectangle(20, 20, 180, 30, True, True)
    oGdPicturePDF.SaveToFile("test_SetLine.pdf")
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF failed")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFillAlpha(System.Byte)">
      <summary>
 Sets the transparency level for subsequent filling operations.
 </summary>
      <param name="Alpha">The transparency level between 0 (full transparency) and 255 (full opacity - default value used).</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFillColor(System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetLineAlpha(System.Byte)" />
      <example>
        <code description="Create a new pdf, add a blank page, draw some rectangles with different attributes for the line and the filling." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.ResetGraphicsState()
    oGdPicturePDF.SetLineWidth(0.5)
    oGdPicturePDF.SetLineColor(Color.Blue)
    oGdPicturePDF.SetFillColor(Color.Cyan)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineDash(5, 2)
    oGdPicturePDF.DrawRectangle(80, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineNoDash()
    oGdPicturePDF.DrawRectangle(150, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineColor(Color.Bisque)
    oGdPicturePDF.SetFillColor(Color.RosyBrown)
    oGdPicturePDF.SetLineWidth(10)
    oGdPicturePDF.SetLineAlpha(128)
    oGdPicturePDF.SetFillAlpha(128)
    oGdPicturePDF.DrawRectangle(20, 20, 180, 30, True, True)
    oGdPicturePDF.SaveToFile("test_SetLine.pdf")
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF failed")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)">
      <summary>
 Sets the line color for subsequent stroking operations. This method uses RGB color space.
 </summary>
      <param name="Red">The amount of red color between 0 and 255.</param>
      <param name="Green">The amount of green color between 0 and 255.</param>
      <param name="Blue">The amount of blue color between 0 and 255.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFillColor(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Create a new pdf, add a blank page, draw some rectangles with different attributes for the line and the filling." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.ResetGraphicsState()
    oGdPicturePDF.SetLineWidth(0.5)
    oGdPicturePDF.SetLineColor(56, 83 ,164)
    oGdPicturePDF.SetFillColor(Color.Cyan)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineDash(5, 2)
    oGdPicturePDF.DrawRectangle(80, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineNoDash()
    oGdPicturePDF.DrawRectangle(150, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineColor(254, 241, 223)
    oGdPicturePDF.SetFillColor(Color.RosyBrown)
    oGdPicturePDF.SetLineWidth(10)
    oGdPicturePDF.SetLineAlpha(128)
    oGdPicturePDF.SetFillAlpha(128)
    oGdPicturePDF.DrawRectangle(20, 20, 180, 30, True, True)
    oGdPicturePDF.SaveToFile("test_SetLine.pdf")
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF failed")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Sets the line color for subsequent stroking operations. This method uses CMYK color space.
 </summary>
      <param name="Cyan">The amount of Cyan color between 0 and 255.</param>
      <param name="Magenta">The amount of Magenta color between 0 and 255.</param>
      <param name="Yellow">The amount of Yellow color between 0 and 255.</param>
      <param name="Black">The amount of Black (key) color between 0 and 255.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFillColor(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Create a new pdf, add a blank page, draw some rectangles with different attributes for the line and the filling." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.ResetGraphicsState()
    oGdPicturePDF.SetLineWidth(0.5)
    oGdPicturePDF.SetLineColor(65, 50, 0, 35)
    oGdPicturePDF.SetFillColor(Color.Cyan)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineDash(5, 2)
    oGdPicturePDF.DrawRectangle(80, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineNoDash()
    oGdPicturePDF.DrawRectangle(150, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineColor(0,5,12,1)
    oGdPicturePDF.SetFillColor(Color.RosyBrown)
    oGdPicturePDF.SetLineWidth(10)
    oGdPicturePDF.SetLineAlpha(128)
    oGdPicturePDF.SetFillAlpha(128)
    oGdPicturePDF.DrawRectangle(20, 20, 180, 30, True, True)
    oGdPicturePDF.SaveToFile("test_SetLine.pdf")
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF failed")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetLineColor(System.Drawing.Color)">
      <summary>
 Sets the line color for subsequent stroking operations.
 </summary>
      <param name="LineColor">The line color.A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFillColor(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Create a new pdf, add a blank page, draw some rectangles with different attributes for the line and the filling." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.ResetGraphicsState()
    oGdPicturePDF.SetLineWidth(0.5)
    oGdPicturePDF.SetLineColor(Color.Blue)
    oGdPicturePDF.SetFillColor(Color.Cyan)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineDash(5, 2)
    oGdPicturePDF.DrawRectangle(80, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineNoDash()
    oGdPicturePDF.DrawRectangle(150, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineColor(Color.Bisque)
    oGdPicturePDF.SetFillColor(Color.RosyBrown)
    oGdPicturePDF.SetLineWidth(10)
    oGdPicturePDF.SetLineAlpha(128)
    oGdPicturePDF.SetFillAlpha(128)
    oGdPicturePDF.DrawRectangle(20, 20, 180, 30, True, True)
    oGdPicturePDF.SaveToFile("test_SetLine.pdf")
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF failed")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetLineAlpha(System.Byte)">
      <summary>
 Sets the transparency level for subsequent stroking operations.
 </summary>
      <param name="Alpha">The transparency level between 0 (full transparency) and 255 (full opacity - default value used).</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFillAlpha(System.Byte)" />
      <example>
        <code description="Create a new pdf, add a blank page, draw some rectangles with different attributes for the line and the filling." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.ResetGraphicsState()
    oGdPicturePDF.SetLineWidth(0.5)
    oGdPicturePDF.SetLineColor(Color.Blue)
    oGdPicturePDF.SetFillColor(Color.Cyan)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineDash(5, 2)
    oGdPicturePDF.DrawRectangle(80, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineNoDash()
    oGdPicturePDF.DrawRectangle(150, 10, 40, 20, True, True)
    oGdPicturePDF.SetLineColor(Color.Bisque)
    oGdPicturePDF.SetFillColor(Color.RosyBrown)
    oGdPicturePDF.SetLineWidth(10)
    oGdPicturePDF.SetLineAlpha(128)
    oGdPicturePDF.SetFillAlpha(128)
    oGdPicturePDF.DrawRectangle(20, 20, 180, 30, True, True)
    oGdPicturePDF.SaveToFile("test_SetLine.pdf")
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF failed")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddTransformationMatrix(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Modify the current transformation matrix (CTM) by concatenating the specified matrix for subsequent drawing operation.
 Although the parameters specify a matrix, they are written as six separate numbers.
 The matrix can represent any linear transformation from one coordinate system to another.
 - Translations are specified as [ 1, 0, 0, 1, tx, ty ], where tx and ty are the distances to translate the origin of the coordinate system in the horizontal and vertical dimensions, respectively.
 - Scaling is obtained by [ sx, 0, 0, sy, 0, 0 ]. This scales the coordinates so that 1 unit in the horizontal and vertical dimensions of the new coordinate system is the same size as sx and sy units, respectively, in the previous coordinate system.
 - Rotations are produced by [ cos a, sin a, -sin a, cos a, 0, 0 ], which has the effect of rotating the coordinate system axes by an angle a counterclockwise.
 - Skew is specified by [ 1, tan a, tan b, 1, 0, 0 ], which skews the x axis by an angle a and the y axis by an angle b.
 </summary>
      <param name="a">First element of the translation matrix. See summary for more information.</param>
      <param name="b">Second element of the translation matrix. See summary for more information.</param>
      <param name="c">Third element of the translation matrix. See summary for more information.</param>
      <param name="d">Fourth element of the translation matrix. See summary for more information.</param>
      <param name="e">Distance, in points, from the left, to translate the origin of the coordinate system in the horizontal dimension.</param>
      <param name="f">Distance, in points, from the bottom, to translate the origin of the coordinate system in the vertical dimension.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Create a new pdf, add a blank page and draw some rectangles with a different matrix." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.ResetGraphicsState()
    oGdPicturePDF.SetLineWidth(0.5)
    oGdPicturePDF.SetLineColor(Color.Blue)
    oGdPicturePDF.SetFillColor(Color.Cyan)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.SaveGraphicsState()   'save the graphics state
    oGdPicturePDF.SaveGraphicsState()   'save the graphics state again
    oGdPicturePDF.AddTransformationMatrix(1, 0, 0, 1, 150, 0) 'tranlation
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.SetFillColor(Color.Purple)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.RestoreGraphicsState() 'restore the preceeding graphic state
    oGdPicturePDF.AddTransformationMatrix(1, 0.1, 0, 1, 150, -100) 'shear vert + tranlation
    oGdPicturePDF.SetLineColor(Color.Green)
    oGdPicturePDF.SetFillColor(Color.GreenYellow)
    oGdPicturePDF.DrawRectangle(10, 10, 40, 20, True, True)
    oGdPicturePDF.RestoreGraphicsState()   'restore the preceeding graphic state (the inital one)
    oGdPicturePDF.DrawRectangle(10, 80, 40, 20, True, True) 'use inital colors
    oGdPicturePDF.AddTransformationMatrix(1, 0.1, 0.1, 1, 100, 0) 'shear horz and vert + trans
    oGdPicturePDF.SetLineColor(Color.Black)
    oGdPicturePDF.SetFillColor(Color.Yellow)
    oGdPicturePDF.DrawRectangle(10, 80, 40, 20, True, True)
    oGdPicturePDF.SaveToFile("test_GraphicState.pdf")
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF failed")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddPageRotation(System.Int32)">
      <summary>
 Modify the current transformation matrix (CTM) by applying a clockwise page rotation for subsequent drawing operation.
 This method is particularly useful to write text (or other kind of content) on a page having rotation without applying this rotation on the content (see example).
 </summary>
      <param name="Angle">The angle of rotation. Can be 90, -90, 180, -180, 270 or -270. Other values result in an InvalidParameter return code.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Draw an text from the top-left viewable corner of a page having a rotation." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("input_rotation.pdf", False)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontCourier)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitPoint)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 Dim pageRotation As Integer = oGdPicturePDF.GetPageRotation()
 If pageRotation &lt;&gt; 0 Then
    oGdPicturePDF.AddPageRotation(360 - pageRotation)
 End If
 oGdPicturePDF.SetTextSize(20)
 oGdPicturePDF.SetFillColor(255, 0, 0)
 oGdPicturePDF.DrawText(fontResName, 0, 20, "Hello world!")
 oGdPicturePDF.SaveToFile("test.pdf")
  </code>
      </example>
      <remarks>
        <para>
 Despite AddPageRotation() and GetPageRotation() are named similarly they do no work with analogous data.
 </para>
        <para>
 AddPageRotation() modifies the current transformation matrix for subsequent drawing operation and do not modifies the actual page content.
 </para>
        <para>
 GetPageRotation() retrieves the initial rotation of the page that can not be modified using AddPageRotation(), for such purpose the RotatePage() has to be used.
 </para>
        <para>
 The SetOrigin() method must not be called subsequently, else unexpected results will be encountered. A call to the ResetGraphicsState() method is required in order to subsequently change the coordinates origin.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetPageRotation" />
      <seealso cref="M:GdPicture12.GdPicturePDF.RotatePage(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddRotationAt(System.Single,System.Single,System.Single)">
      <summary>
 Modify the current transformation matrix (CTM) by applying an anticlockwise arbitrary rotation around a specific point for subsequent drawing operation.
 </summary>
      <param name="Angle">The angle of anti-clockwise rotation. Can be an arbitrary value in the range [0 - 360]. Other values result in an InvalidParameter return code.</param>
      <param name="AtX">The X coordinate, in current unit defined by the SetMeasurementUnit() method, of the point that represents the center of the rotation.</param>
      <param name="AtY">The Y coordinate, in current unit defined by the SetMeasurementUnit() method, of the point that represents the center of the rotation.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Draw a rotated text to a new PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.NewPage(500, 500)
 oGdPicturePDF.AddRotationAt(20, 0, 0)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 oGdPicturePDF.DrawText(fontResName, 0, 0, "Hello World")
 oGdPicturePDF.SaveToFile("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawImage(System.String,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Draws an image into the current page of a PDF.
 </summary>
      <param name="ImageResName">The image resource name previously returned by the AddImageFromBitmap, AddImageFromGdPictureImage or GetPageImageResName method.</param>
      <param name="DstX">The X destination of the bottom left corner of the bitmap in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y destination of the bottom left corner of the bitmap in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">Width in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">Height in current unit defined by the SetMeasurementUnit() method.</param>
      <remarks>
 If the image to draw is a Mask Image, you should define the color to use for nonstroking operation
 using the SetFillColor method.
 Take care: DstX and DstY parameters are the coordinates on the bottom-left corner of the image!
 </remarks>
      <example>
        <code description="Draw an image on the first page of a PDF" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
 If ImageID &gt; 0 AndAlso oGdPicturePDF.LoadFromFile("test.pdf", True) = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1) 'Selecting first page
    Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
    oGdPicturePDF.DrawImage(image_res_name, 10, 10, 5, 5)
    oGdPicturePDF.SaveToFileInc("test.pdf")
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
      <example>
        <code description="Open an existing PDF, insert an A4 page in second page then draw an image on the whole page area" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
 If ImageID &gt; 0 AndAlso oGdPicturePDF.LoadFromFile("test.pdf", True) = GdPictureStatus.OK Then
    'Add the image as resource in the PDF document
    Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    'Insert a new blank A4 page as second page of the document.
    Dim pageWidth As Single = 8.27
    Dim pageHeight As Single = 11.69
    Dim pagePosition As Integer = 2
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitInch)
    oGdPicturePDF.InsertPage(pageWidth, pageHeight, pagePosition)
    oGdPicturePDF.SelectPage(pagePosition)
    'Draw the image on the PDF page
    oGdPicturePDF.DrawImage(image_res_name, 0, 0, pageWidth, pageHeight)
    oGdPicturePDF.SaveToFileInc("test.pdf")
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
      <example>
        <code description="Create a new PDF, add a new empty A4 page and draw a screenshot image in the middle of the page." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromHwnd(Me.Handle)
 Dim imageRes As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.DrawImage(imageRes, 2.5, 20, 16, 9)
 oGdPicturePDF.SaveToFile("screenshot.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawLine(System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Draws a line on the current page of the PDF.
 </summary>
      <param name="StartX">The X coordinate of the starting point, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="StartY">The Y coordinate of the starting point, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstX">The X coordinate of the ending point, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y coordinate of the ending point, in current unit defined by the SetMeasurementUnit() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a line on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status = GdPictureStatus.OK Then
       oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
       oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
       oGdPicturePDF.SetLineColor(0, 0, 255)
       oGdPicturePDF.SetLineWidth(2)
       status = oGdPicturePDF.DrawLine(30, 70, 130, 170)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_DrawLine_func.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("DrawLine method failed")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawEllipse(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
      <summary>
 Draws an ellipse on the current page of the PDF.
 </summary>
      <param name="CenterX">The X coordinate of the center of the ellipse, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="CenterY">The Y coordinate of the center of the ellipse, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the bounding box of the ellipse, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="height">The height of the bounding box of the ellipse, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Fill">Set to true to fill the circle using the current color of the graphics state. This color can be defined using the SetFillColor() method.</param>
      <param name="Stroke">Set to true to stroke the circle using the current color of the graphics state. This color can be defined using the SetLineColor() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFillColor(System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing an ellipse on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status = GdPictureStatus.OK Then
       oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
       oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
       oGdPicturePDF.SetLineColor(0, 0, 255)
       oGdPicturePDF.SetFillColor(255, 0, 0)
       oGdPicturePDF.SetLineWidth(2)
       status = oGdPicturePDF.DrawEllipse(30, 70, 50, 100, True, True)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_DrawEllipse_func.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("DrawEllipse method failed")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawCircle(System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
      <summary>
 Draws a circle on the current page of the PDF.
 </summary>
      <param name="CenterX">The X coordinate of the center of the circle, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="CenterY">The Y coordinate of the center of the circle, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Radius">The radius of the circle in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Fill">Set to true to fill the circle using the current color of the graphics state. This color can be defined using the SetFillColor() method.</param>
      <param name="Stroke">Set to true to stroke the circle using the current color of the graphics state. This color can be defined using the SetLineColor() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFillColor(System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a circle on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status = GdPictureStatus.OK Then
       oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
       oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
       oGdPicturePDF.SetLineColor(0, 0, 255)
       oGdPicturePDF.SetFillColor(255, 0, 0)
       oGdPicturePDF.SetLineWidth(2)
       status = oGdPicturePDF.DrawCircle(30, 30, 50, True, True)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_DrawCircle_func.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("DrawCircle method failed")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawRectangle(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
      <summary>
 Draws a rectangle on the current page of the PDF.
 </summary>
      <param name="Left">The X coordinate of the rectangle, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The Y coordinate of the rectangle, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the rectangle, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the rectangle in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Fill">Set to true to fill the rectangle using the current color of the graphics state. This color can be defined using the SetFillColor() method.</param>
      <param name="Stroke">Set to true to stroke the rectangle using the current color of the graphics state. This color can be defined using the SetLineColor() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFillColor(System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a rectangle on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status = GdPictureStatus.OK Then
       oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
       oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
       oGdPicturePDF.SetLineColor(0, 0, 255)
       oGdPicturePDF.SetFillColor(255, 0, 0)
       oGdPicturePDF.SetLineWidth(2)
       status = oGdPicturePDF.DrawRectangle(20, 20, 100, 50, True, True)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_DrawRectangle_func.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("DrawRectangle method failed")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawRoundedRectangle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
      <summary>
 Draws a rounded rectangle on the current page of the PDF.
 </summary>
      <param name="Left">The X coordinate of the rectangle in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The Y coordinate of the rectangle in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the rectangle in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the rectangle in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Radius">The radius of the rectangle in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Fill">Set to true to fill the rectangle using the current color of the graphics state. This color can be defined using the SetFillColor() method.</param>
      <param name="Stroke">Set to true to stroke the rectangle using the current color of the graphics state. This color can be defined using the SetLineColor() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFillColor(System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a rounded rectangle on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status = GdPictureStatus.OK Then
       oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
       oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
       oGdPicturePDF.SetLineColor(0, 0, 255)
       oGdPicturePDF.SetFillColor(255, 0, 0)
       oGdPicturePDF.SetLineWidth(2)
       status = oGdPicturePDF.DrawRoundedRectangle(20, 20, 100, 50, 5, True, True)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_DrawRoundedRectangle_func.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("DrawRoundedRectangle method failed")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
 Draws an arc on the current page of the PDF.
 </summary>
      <param name="Left">The X coordinate of the arc in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The Y coordinate of the arc in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Radius">The radius of the arc in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="StartAngle">Specifies the start angle (degree). Usually 0.</param>
      <param name="EndAngle">Specifies the end angle (degree). Usually 360.</param>
      <param name="Close">True to close the arc, else False.</param>
      <param name="Fill">Set to true to fill the arc using the current color of the graphics state. This color can be defined using the SetFillColor() method.</param>
      <param name="Stroke">Set to true to stroke the arc using the current color of the graphics state. This color can be defined using the SetLineColor() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFillColor(System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing an arc on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status = GdPictureStatus.OK Then
       oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
       oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
       oGdPicturePDF.SetLineColor(0, 0, 255)
       oGdPicturePDF.SetFillColor(255, 0, 0)
       oGdPicturePDF.SetLineWidth(2)
       status = oGdPicturePDF.DrawArc(20, 20, 50, 0, 160, True, True, True)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_DrawArc_func.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("DrawArc method failed")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawPie(System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
      <summary>
 Draws a pie on the current page of the PDF.
 </summary>
      <param name="Left">The X coordinate of the pie in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The Y coordinate of the pie in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Radius">The radius of the pie in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="StartAngle">Specifies the start angle (degree). Usually 0.</param>
      <param name="EndAngle">Specifies the end angle (degree). Usually 360 for a whole circle.</param>
      <param name="Fill">Set to true to fill the pie using the current color of the graphics state. This color can be defined using the SetFillColor() method.</param>
      <param name="Stroke">Set to true to stroke the pie using the current color of the graphics state. This color can be defined using the SetLineColor() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFillColor(System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a pie on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status = GdPictureStatus.OK Then
       oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
       oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
       oGdPicturePDF.SetLineColor(0, 0, 255)
       oGdPicturePDF.SetFillColor(255, 0, 0)
       oGdPicturePDF.SetLineWidth(2)
       status = oGdPicturePDF.DrawPie(20, 20, 50, 0, 160, True, True)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_DrawPie_func.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("DrawPie method failed")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcode1D(GdPicture12.Barcode1DWriterType,System.String,System.Single,System.Single,System.Single,System.Single,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a 1D barcode into the current page of the PDF. This method uses RGB color space.
 </summary>
      <param name="BarcodeType">A member of the Barcode1DWriterType enumeration.</param>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstWidth">Width of the bounding box of the barcode in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstHeight">Height of the bounding box of the barcode in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Red">The amount of red color of the bars, between 0 and 255.</param>
      <param name="Green">The amount of green color of the bars, between 0 and 255.</param>
      <param name="Blue">The amount of blue color of the bars, between 0 and 255.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Drawing a 1-dimensional barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.DrawBarcode1D(Barcode1DWriterType.Barcode1DWriterCode128, "0123456789", 1, 1, 5, 1, 255, 0, 0)
 oGdPicturePDF.SaveToFile("test2.pdf")
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcode1D(GdPicture12.Barcode1DWriterType,System.String,System.Single,System.Single,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a 1D barcode into the current page of the PDF.  This method uses CMYK color space.
 </summary>
      <param name="BarcodeType">A member of the Barcode1DWriterType enumeration.</param>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstWidth">Width of the bounding box of the barcode in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstHeight">Height of the bounding box of the barcode in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Cyan">The amount of cyan color of the bars, between 0 and 255.</param>
      <param name="Magenta">The amount of magenta color of the bars, between 0 and 255.</param>
      <param name="Yellow">The amount of yellow color of the bars, between 0 and 255.</param>
      <param name="Black">The amount of black color of the bars, between 0 and 255.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Drawing a 1-dimensional barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.DrawBarcode1D(Barcode1DWriterType.Barcode1DWriterCode128, "0123456789", 1, 1, 5, 1, 0, 255, 0, 0)
 oGdPicturePDF.SaveToFile("test2.pdf")
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcode1D(GdPicture12.Barcode1DWriterType,System.String,System.Single,System.Single,System.Single,System.Single,System.Drawing.Color)">
      <summary>
 Draws a 1D barcode into the current page of the PDF.  This method uses RGB color space.
 </summary>
      <param name="BarcodeType">A member of the Barcode1DWriterType enumeration.</param>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstWidth">Width of the bounding box of the barcode in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstHeight">Height of the bounding box of the barcode in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="BarColor">Color Object. Color used to draw the barcode.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Drawing a 1-dimensional barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.DrawBarcode1D(Barcode1DWriterType.Barcode1DWriterCode128, "0123456789", 1, 1, 5, 1, Color.Red)
 oGdPicturePDF.SaveToFile("test2.pdf")
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeQrCode(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeQRErrorCorrectionLevel,System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Color)">
      <summary>
 Draws a QrCode barcode into the current page of the PDF. This method uses RGB color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeQREncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">The version of the QrCode. In the range 0 - 40. Specifies the overall dimensions of the symbol.  Use 0 to let the engine decide the minimum version required to encode all data.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FillColor">Color of the symbols.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a QrCode barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeQrCode("0123456789", BarcodeQREncodingMode.BarcodeQREncodingModeUndefined, BarcodeQRErrorCorrectionLevel.BarcodeQRErrorCorrectionLevelH, 0, 4, 1, 1, Color.Black)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeQrCode(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeQRErrorCorrectionLevel,System.Int32,System.Int32,System.Single,System.Single,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a QrCode barcode into the current page of the PDF. This method uses RGB color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeQREncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">The version of the QrCode. In the range 0 - 40. Specifies the overall dimensions of the symbol.  Use 0 to let the engine decide the minimum version required to encode all data.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Red">The amount of red color of the symbols, between 0 and 255.</param>
      <param name="Green">The amount of green color of the symbols, between 0 and 255.</param>
      <param name="Blue">The amount of blue color of the symbols, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a QrCode barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeQrCode("0123456789", BarcodeQREncodingMode.BarcodeQREncodingModeUndefined, BarcodeQRErrorCorrectionLevel.BarcodeQRErrorCorrectionLevelH, 0, 4, 1, 1, 0, 0, 0)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeQrCode(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeQRErrorCorrectionLevel,System.Int32,System.Int32,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a QrCode barcode into the current page of the PDF. This method uses CMYK color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeQREncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">The version of the QrCode. In the range 0 - 40. Specifies the overall dimensions of the symbol.  Use 0 to let the engine decide the minimum version required to encode all data.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Cyan">The amount of cyan color of the symbols, between 0 and 255.</param>
      <param name="Magenta">The amount of magenta color of the symbols, between 0 and 255.</param>
      <param name="Yellow">The amount of yellow color of the symbols, between 0 and 255.</param>
      <param name="Black">The amount of black color of the symbols, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a QrCode barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeQrCode("0123456789", BarcodeQREncodingMode.BarcodeQREncodingModeUndefined, BarcodeQRErrorCorrectionLevel.BarcodeQRErrorCorrectionLevelH, 0, 4, 1, 1, 0, 0, 0, 255)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeQrCode(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeQRErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a QrCode barcode into the current page of the PDF. This method uses RGB color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeQREncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">The version of the QrCode. In the range 0 - 40. Specifies the overall dimensions of the symbol.  Use 0 to let the engine decide the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode.
 QR Code requires a four-module wide margin at all sides of a symbol. Consequently a value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FillColorR">The amount of red color of the symbols, between 0 and 255.</param>
      <param name="FillColorG">The amount of green color of the symbols, between 0 and 255.</param>
      <param name="FillColorB">The amount of blue color of the symbols, between 0 and 255.</param>
      <param name="BackColorR">The amount of red color of the background, between 0 and 255.</param>
      <param name="BackColorG">The amount of green color of the background, between 0 and 255.</param>
      <param name="BackColorB">The amount of blue color of the background, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a QrCode barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeQrCode("0123456789", BarcodeQREncodingMode.BarcodeQREncodingModeUndefined, BarcodeQRErrorCorrectionLevel.BarcodeQRErrorCorrectionLevelH, 0, 4, 4, 1, 1, 255,0,0, 255,255,255)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeQrCode(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeQRErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a QrCode barcode into the current page of the PDF. This method uses CMYK color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeQREncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">The version of the QrCode. In the range 0 - 40. Specifies the overall dimensions of the symbol.  Use 0 to let the engine decide the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode.
 QR Code requires a four-module wide margin at all sides of a symbol. Consequently a value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FillColorC">The amount of cyan color of the symbols, between 0 and 255.</param>
      <param name="FillColorM">The amount of magenta color of the symbols, between 0 and 255.</param>
      <param name="FillColorY">The amount of yellow color of the symbols, between 0 and 255.</param>
      <param name="FillColorK">The amount of black color of the symbols, between 0 and 255.</param>
      <param name="BackColorC">The amount of cyan color of the background, between 0 and 255.</param>
      <param name="BackColorM">The amount of magenta color of the background, between 0 and 255.</param>
      <param name="BackColorY">The amount of yellow color of the background, between 0 and 255.</param>
      <param name="BackColorK">The amount of black color of the background, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a QrCode barcode on an the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeQrCode("0123456789", BarcodeQREncodingMode.BarcodeQREncodingModeUndefined, BarcodeQRErrorCorrectionLevel.BarcodeQRErrorCorrectionLevelH, 0, 4, 4, 1, 1, 255,0,0,0, 255,255,255,255)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeQrCode(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeQRErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Color,System.Drawing.Color)">
      <summary>
 Draws a QrCode barcode into the current page of the PDF. This method uses RGB color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeQREncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">The version of the QrCode. In the range 0 - 40. Specifies the overall dimensions of the symbol.  Use 0 to let the engine decide the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode.
 QR Code requires a four-module wide margin at all sides of a symbol. Consequently a value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FillColor">Color of the symbols.</param>
      <param name="BackColor">Color of the background.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a QrCode barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeQrCode("0123456789", BarcodeQREncodingMode.BarcodeQREncodingModeUndefined, BarcodeQRErrorCorrectionLevel.BarcodeQRErrorCorrectionLevelH, 0, 4, 4, 1, 1, Color.Red, Color.White)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeMicroMicroQrCode(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeMicroQRErrorCorrectionLevel,System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Color)">
      <summary>
 Draws a Micro QrCode barcode into the current page of the PDF. This method uses RGB color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeQREncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeMicroQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">The version of the Micro QrCode. In the range 0 - 4. Specifies the overall dimensions of the symbol.  Use 0 to let the engine decide the minimum version required to encode all data.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FillColor">Color of the symbols.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a Micro QrCode barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeMicroMicroQrCode("0123456789", BarcodeQREncodingMode.BarcodeQREncodingModeUndefined, BarcodeMicroQRErrorCorrectionLevel.BarcodeMicroQRErrorCorrectionLevelL, 0, 4, 1, 1, Color.Black)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeMicroMicroQrCode(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeMicroQRErrorCorrectionLevel,System.Int32,System.Int32,System.Single,System.Single,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a Micro QrCode barcode into the current page of the PDF. This method uses RGB color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeQREncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeMicroQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">The version of the Micro QrCode. In the range 0 - 4. Specifies the overall dimensions of the symbol.  Use 0 to let the engine decide the minimum version required to encode all data.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Red">The amount of red color of the symbols, between 0 and 255.</param>
      <param name="Green">The amount of green color of the symbols, between 0 and 255.</param>
      <param name="Blue">The amount of blue color of the symbols, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a Micro QrCode barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeMicroMicroQrCode("0123456789", BarcodeQREncodingMode.BarcodeQREncodingModeUndefined, BarcodeMicroQRErrorCorrectionLevel.BarcodeMicroQRErrorCorrectionLevelL, 0, 4, 1, 1, 0, 0, 0)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeMicroMicroQrCode(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeMicroQRErrorCorrectionLevel,System.Int32,System.Int32,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a Micro QrCode barcode into the current page of the PDF. This method uses CMYK color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeQREncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeMicroQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">The version of the Micro QrCode. In the range 0 - 4. Specifies the overall dimensions of the symbol.  Use 0 to let the engine decide the minimum version required to encode all data.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Cyan">The amount of cyan color of the symbols, between 0 and 255.</param>
      <param name="Magenta">The amount of magenta color of the symbols, between 0 and 255.</param>
      <param name="Yellow">The amount of yellow color of the symbols, between 0 and 255.</param>
      <param name="Black">The amount of black color of the symbols, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a Micro QrCode barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeMicroMicroQrCode("0123456789", BarcodeQREncodingMode.BarcodeQREncodingModeUndefined, BarcodeMicroQRErrorCorrectionLevel.BarcodeMicroQRErrorCorrectionLevelL, 0, 4, 1, 1, 0, 0, 0, 255)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeMicroMicroQrCode(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeMicroQRErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a Micro QrCode barcode into the current page of the PDF. This method uses RGB color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeQREncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeMicroQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">The version of the Micro QrCode. In the range 0 - 4. Specifies the overall dimensions of the symbol.  Use 0 to let the engine decide the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode.
 QR Code requires a four-module wide margin at all sides of a symbol. Consequently a value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FillColorR">The amount of red color of the symbols, between 0 and 255.</param>
      <param name="FillColorG">The amount of green color of the symbols, between 0 and 255.</param>
      <param name="FillColorB">The amount of blue color of the symbols, between 0 and 255.</param>
      <param name="BackColorR">The amount of red color of the background, between 0 and 255.</param>
      <param name="BackColorG">The amount of green color of the background, between 0 and 255.</param>
      <param name="BackColorB">The amount of blue color of the background, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a Micro QrCode barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeMicroMicroQrCode("0123456789", BarcodeQREncodingMode.BarcodeQREncodingModeUndefined, BarcodeMicroQRErrorCorrectionLevel.BarcodeMicroQRErrorCorrectionLevelL, 0, 4, 4, 1, 1, 255,0,0, 255,255,255)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeMicroMicroQrCode(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeMicroQRErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a Micro QrCode barcode into the current page of the PDF. This method uses CMYK color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeQREncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeMicroQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">The version of the Micro QrCode. In the range 0 - 4. Specifies the overall dimensions of the symbol.  Use 0 to let the engine decide the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode.
 QR Code requires a four-module wide margin at all sides of a symbol. Consequently a value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FillColorC">The amount of cyan color of the symbols, between 0 and 255.</param>
      <param name="FillColorM">The amount of magenta color of the symbols, between 0 and 255.</param>
      <param name="FillColorY">The amount of yellow color of the symbols, between 0 and 255.</param>
      <param name="FillColorK">The amount of black color of the symbols, between 0 and 255.</param>
      <param name="BackColorC">The amount of cyan color of the background, between 0 and 255.</param>
      <param name="BackColorM">The amount of magenta color of the background, between 0 and 255.</param>
      <param name="BackColorY">The amount of yellow color of the background, between 0 and 255.</param>
      <param name="BackColorK">The amount of black color of the background, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a Micro QrCode barcode on an the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeMicroMicroQrCode("0123456789", BarcodeQREncodingMode.BarcodeQREncodingModeUndefined, BarcodeMicroQRErrorCorrectionLevel.BarcodeMicroQRErrorCorrectionLevelL, 0, 4, 4, 1, 1, 255,0,0,0, 255,255,255,255)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeMicroMicroQrCode(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeMicroQRErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Color,System.Drawing.Color)">
      <summary>
 Draws a Micro QrCode barcode into the current page of the PDF. This method uses RGB color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeQREncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeMicroQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">The version of the Micro QrCode. In the range 0 - 4. Specifies the overall dimensions of the symbol.  Use 0 to let the engine decide the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode.
 QR Code requires a four-module wide margin at all sides of a symbol. Consequently a value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FillColor">Color of the symbols.</param>
      <param name="BackColor">Color of the background.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a Micro QrCode barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeMicroMicroQrCode("0123456789", BarcodeQREncodingMode.BarcodeQREncodingModeUndefined, BarcodeMicroQRErrorCorrectionLevel.BarcodeMicroQRErrorCorrectionLevelL, 0, 4, 4, 1, 1, Color.Red, Color.White)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeDataMatrix(System.String,GdPicture12.BarcodeDataMatrixEncodingMode,GdPicture12.BarcodeDataMatrixVersion,System.Int32,System.Single,System.Single,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a DataMatrix barcode into the current page of the PDF. This method uses RGB color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeDataMatrixEncodingMode enumeration. The encoding mode.</param>
      <param name="Version">A member of the BarcodeDataMatrixVersion enumeration. The version of the DataMatrix barcode. Use BarcodeDataMatrixVersionAuto to let the engine decide the minimum version required to encode all data.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Red">The amount of red color of the symbols, between 0 and 255.</param>
      <param name="Green">The amount of green color of the symbols, between 0 and 255.</param>
      <param name="Blue">The amount of blue color of the symbols, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Draw a DataMatrix barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeDataMatrix("0123456789", BarcodeDataMatrixEncodingMode.BarcodeDataMatrixEncodingModeUndefined, BarcodeDataMatrixVersion.BarcodeDataMatrixVersionAuto, 4, 1, 1, 0, 0, 0)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeDataMatrix(System.String,GdPicture12.BarcodeDataMatrixEncodingMode,GdPicture12.BarcodeDataMatrixVersion,System.Int32,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a DataMatrix barcode into the current page of the PDF. This method uses CMYK color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeDataMatrixEncodingMode enumeration. The encoding mode.</param>
      <param name="Version">A member of the BarcodeDataMatrixVersion enumeration. The version of the DataMatrix barcode. Use BarcodeDataMatrixVersionAuto to let the engine decide the minimum version required to encode all data.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Cyan">The amount of cyan color of the symbols, between 0 and 255.</param>
      <param name="Magenta">The amount of magenta color of the symbols, between 0 and 255.</param>
      <param name="Yellow">The amount of yellow color of the symbols, between 0 and 255.</param>
      <param name="Black">The amount of black color of the symbols, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Draw a DataMatrix barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeDataMatrix("0123456789", BarcodeDataMatrixEncodingMode.BarcodeDataMatrixEncodingModeUndefined, BarcodeDataMatrixVersion.BarcodeDataMatrixVersionAuto, 4, 1, 1, 255, 255, 255, 255)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeDataMatrix(System.String,GdPicture12.BarcodeDataMatrixEncodingMode,GdPicture12.BarcodeDataMatrixVersion,System.Int32,System.Single,System.Single,System.Drawing.Color)">
      <summary>
 Draws a DataMatrix barcode into the current page of the PDF. This method uses RGB color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeDataMatrixEncodingMode enumeration. The encoding mode.</param>
      <param name="Version">A member of the BarcodeDataMatrixVersion enumeration. The version of the DataMatrix barcode. Use BarcodeDataMatrixVersionAuto to let the engine decide the minimum version required to encode all data.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FillColor">Color of the symbols.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Draw a DataMatrix barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeDataMatrix("0123456789", BarcodeDataMatrixEncodingMode.BarcodeDataMatrixEncodingModeUndefined, BarcodeDataMatrixVersion.BarcodeDataMatrixVersionAuto, 4, 1, 1, Color.Black)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeDataMatrix(System.String,GdPicture12.BarcodeDataMatrixEncodingMode,GdPicture12.BarcodeDataMatrixVersion,System.Int32,System.Int32,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a DataMatrix barcode into the current page of the PDF. This method uses RGB color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeDataMatrixEncodingMode enumeration. The encoding mode.</param>
      <param name="Version">A member of the BarcodeDataMatrixVersion enumeration. The version of the DataMatrix barcode. Use BarcodeDataMatrixVersionAuto to let the engine decide the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode. A value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FillColorR">The amount of red color of the symbols, between 0 and 255.</param>
      <param name="FillColorG">The amount of green color of the symbols, between 0 and 255.</param>
      <param name="FillColorB">The amount of blue color of the symbols, between 0 and 255.</param>
      <param name="BackColorR">The amount of red color of the background, between 0 and 255.</param>
      <param name="BackColorG">The amount of green color of the background, between 0 and 255.</param>
      <param name="BackColorB">The amount of blue color of the background, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Draw a DataMatrix barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeDataMatrix("0123456789", BarcodeDataMatrixEncodingMode.BarcodeDataMatrixEncodingModeUndefined, BarcodeDataMatrixVersion.BarcodeDataMatrixVersionAuto, 4, 4, 1, 1, 0, 0, 0, 255, 255, 255)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeDataMatrix(System.String,GdPicture12.BarcodeDataMatrixEncodingMode,GdPicture12.BarcodeDataMatrixVersion,System.Int32,System.Int32,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a DataMatrix barcode into the current page of the PDF. This method uses RGB color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeDataMatrixEncodingMode enumeration. The encoding mode.</param>
      <param name="Version">A member of the BarcodeDataMatrixVersion enumeration. The version of the DataMatrix barcode. Use BarcodeDataMatrixVersionAuto to let the engine decide the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode. A value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FillColorC">The amount of cyan color of the symbols, between 0 and 255.</param>
      <param name="FillColorM">The amount of magenta color of the symbols, between 0 and 255.</param>
      <param name="FillColorY">The amount of yellow color of the symbols, between 0 and 255.</param>
      <param name="FillColorK">The amount of black color of the symbols, between 0 and 255.</param>
      <param name="BackColorC">The amount of cyan color of the background, between 0 and 255.</param>
      <param name="BackColorM">The amount of magenta color of the background, between 0 and 255.</param>
      <param name="BackColorY">The amount of yellow color of the background, between 0 and 255.</param>
      <param name="BackColorK">The amount of black color of the background, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Draw a DataMatrix barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeDataMatrix("0123456789", BarcodeDataMatrixEncodingMode.BarcodeDataMatrixEncodingModeUndefined, BarcodeDataMatrixVersion.BarcodeDataMatrixVersionAuto, 4, 4, 1, 1, 0, 0, 0, 0, 255, 255, 255, 255)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodeDataMatrix(System.String,GdPicture12.BarcodeDataMatrixEncodingMode,GdPicture12.BarcodeDataMatrixVersion,System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Color,System.Drawing.Color)">
      <summary>
 Draws a DataMatrix barcode into the current page of the PDF. This method uses CMYK color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeDataMatrixEncodingMode enumeration. The encoding mode.</param>
      <param name="Version">A member of the BarcodeDataMatrixVersion enumeration. The version of the DataMatrix barcode. Use BarcodeDataMatrixVersionAuto to let the engine decide the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode. A value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FillColor">Color of the symbols.</param>
      <param name="BackColor">Color of the background.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Draw a DataMatrix barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodeDataMatrix("0123456789", BarcodeDataMatrixEncodingMode.BarcodeDataMatrixEncodingModeUndefined, BarcodeDataMatrixVersion.BarcodeDataMatrixVersionAuto, 4, 4, 1, 1, Color.Black, Color.White)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodePDF417(System.String,GdPicture12.BarcodePDF417EncodingMode,GdPicture12.BarcodePDF417ErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a PDF417 barcode into the current page of the PDF. This method uses RGB color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodePDF417EncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodePDF417ErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Rows">Defines the number of rows constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 90].</param>
      <param name="Cols">Defines the number of columns constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 30].</param>
      <param name="ModuleWidth">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="RowHeight">The height of each row, in point. A value superior or equal to 2 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Red">The amount of red color of the symbols, between 0 and 255.</param>
      <param name="Green">The amount of green color of the symbols, between 0 and 255.</param>
      <param name="Blue">The amount of blue color of the symbols, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Draw a PDF417 barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodePDF417("0123456789", BarcodePDF417EncodingMode.BarcodePDF417EncodingModeUndefined, BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevelAuto, 0, 0, 1, 2, 1, 1, 0, 0, 0)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodePDF417(System.String,GdPicture12.BarcodePDF417EncodingMode,GdPicture12.BarcodePDF417ErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a PDF417 barcode into the current page of the PDF. This method uses CMYK color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodePDF417EncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodePDF417ErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Rows">Defines the number of rows constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 90].</param>
      <param name="Cols">Defines the number of columns constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 30].</param>
      <param name="ModuleWidth">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="RowHeight">The height of each row, in point. A value superior or equal to 2 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Cyan">The amount of cyan color of the symbols, between 0 and 255.</param>
      <param name="Magenta">The amount of magenta color of the symbols, between 0 and 255.</param>
      <param name="Yellow">The amount of yellow color of the symbols, between 0 and 255.</param>
      <param name="Black">The amount of black color of the symbols, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Draw a PDF417 barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodePDF417("0123456789", BarcodePDF417EncodingMode.BarcodePDF417EncodingModeUndefined, BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevelAuto, 0, 0, 1, 2, 1, 1, 0, 0, 0)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodePDF417(System.String,GdPicture12.BarcodePDF417EncodingMode,GdPicture12.BarcodePDF417ErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Color)">
      <summary>
 Draws a PDF417 barcode into the current page of the PDF. This method uses RGB color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodePDF417EncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodePDF417ErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Rows">Defines the number of rows constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 90].</param>
      <param name="Cols">Defines the number of columns constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 30].</param>
      <param name="ModuleWidth">The size of each module, in point. A value superior or equal to 4 is recommended.</param>
      <param name="RowHeight">The height of each row, in point. A value superior or equal to 2 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FillColor">Color of the symbols.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Draw a PDF417 barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodePDF417("0123456789", BarcodePDF417EncodingMode.BarcodePDF417EncodingModeUndefined, BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevelAuto, 0, 0, 1, 2, 1, 1, 0, 0, 0)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodePDF417(System.String,GdPicture12.BarcodePDF417EncodingMode,GdPicture12.BarcodePDF417ErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a PDF417 barcode into the current page of the PDF. This method uses RGB color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodePDF417EncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodePDF417ErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Rows">Defines the number of rows constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 90].</param>
      <param name="Cols">Defines the number of columns constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 30].</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode. A value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleWidth">The size of each module, in point.</param>
      <param name="RowHeight">The height of each row, in point. A value superior or equal to 2 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FillColorR">The amount of red color of the symbols, between 0 and 255.</param>
      <param name="FillColorG">The amount of green color of the symbols, between 0 and 255.</param>
      <param name="FillColorB">The amount of blue color of the symbols, between 0 and 255.</param>
      <param name="BackColorR">The amount of red color of the background, between 0 and 255.</param>
      <param name="BackColorG">The amount of green color of the background, between 0 and 255.</param>
      <param name="BackColorB">The amount of blue color of the background, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Draw a PDF417 barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodePDF417("0123456789", BarcodePDF417EncodingMode.BarcodePDF417EncodingModeUndefined, BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevelAuto, 0, 0, 1, 2, 1, 1, 0, 0, 0)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodePDF417(System.String,GdPicture12.BarcodePDF417EncodingMode,GdPicture12.BarcodePDF417ErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Draws a PDF417 barcode into the current page of the PDF. This method uses RGB color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodePDF417EncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodePDF417ErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Rows">Defines the number of rows constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 90].</param>
      <param name="Cols">Defines the number of columns constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 30].</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode. A value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleWidth">The size of each module, in point.</param>
      <param name="RowHeight">The height of each row, in point. A value superior or equal to 2 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FillColorC">The amount of cyan color of the symbols, between 0 and 255.</param>
      <param name="FillColorM">The amount of magenta color of the symbols, between 0 and 255.</param>
      <param name="FillColorY">The amount of yellow color of the symbols, between 0 and 255.</param>
      <param name="FillColorK">The amount of black color of the symbols, between 0 and 255.</param>
      <param name="BackColorC">The amount of cyan color of the background, between 0 and 255.</param>
      <param name="BackColorM">The amount of magenta color of the background, between 0 and 255.</param>
      <param name="BackColorY">The amount of yellow color of the background, between 0 and 255.</param>
      <param name="BackColorK">The amount of black color of the background, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Draw a PDF417 barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodePDF417("0123456789", BarcodePDF417EncodingMode.BarcodePDF417EncodingModeUndefined, BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevelAuto, 0, 0, 1, 2, 1, 1, 0, 0, 0)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawBarcodePDF417(System.String,GdPicture12.BarcodePDF417EncodingMode,GdPicture12.BarcodePDF417ErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Color,System.Drawing.Color)">
      <summary>
 Draws a PDF417 barcode into the current page of the PDF. This method uses CMYK color space.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodePDF417EncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodePDF417ErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Rows">Defines the number of rows constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 90].</param>
      <param name="Cols">Defines the number of columns constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 30].</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode. A value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleWidth">The size of each module, in point.</param>
      <param name="RowHeight">The height of each row, in point. A value superior or equal to 2 is recommended.</param>
      <param name="DstX">The X source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y source in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="FillColor">Color of the symbols.</param>
      <param name="BackColor">Color of the background.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Draw a PDF417 barcode on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFileEx("test.pdf", True)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.DrawBarcodePDF417("0123456789", BarcodePDF417EncodingMode.BarcodePDF417EncodingModeUndefined, BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevelAuto, 0, 0, 1, 2, 1, 1, 0, 0, 0)
 oGdPicturePDF.SaveToFileInc("test.pdf")
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetTextSize(System.Single)">
      <summary>
 Sets the current text size.
 </summary>
      <param name="TextSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Add text on an existing PDF using incremental saving" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", True) = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1) 'Selecting first page
    Dim font_res_name As String = oGdPicturePDF.AddTrueTypeFont("Arial", False, False, False)
    oGdPicturePDF.SetTextMode(PdfTextMode.PdfTextModeFill)
    oGdPicturePDF.SetTextSize(30)
    oGdPicturePDF.SetFillColor(255, 0, 0, 0) 'Using Cyan colour
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
    oGdPicturePDF.DrawText(font_res_name, 1, 1, "Hello World!")
    oGdPicturePDF.SaveToFileInc("test.pdf")
    MessageBox.show("Done")
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetTextMode(GdPicture12.PdfTextMode)">
      <summary>
 Specifies the mode to draw text on the PDF.
 </summary>
      <param name="TextMode">A member of the PdfTextMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Add text on an existing PDF using incremental saving" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", True) = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1) 'Selecting first page
    Dim font_res_name As String = oGdPicturePDF.AddTrueTypeFont("Arial", False, False, False)
    oGdPicturePDF.SetTextMode(PdfTextMode.PdfTextModeFill)
    oGdPicturePDF.SetTextSize(30)
    oGdPicturePDF.SetFillColor(255, 0, 0, 0) 'Using Cyan colour
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
    oGdPicturePDF.DrawText(font_res_name, 1, 1, "Hello World!")
    oGdPicturePDF.SaveToFileInc("test.pdf")
    MessageBox.show("Done")
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetTextWordSpacing(System.Single)">
      <summary>
 Set the word spacing, which is a number expressed in unscaled text space units(Points). 
 Initial value: 0.
 </summary>
      <param name="WordSpacing">The new value for the word spacing.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Draw a text twice, the first one draw the text usualy, and the second one draw the text with a word spacing" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", True) = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1) 'Selecting first page
    Dim font_res_name As String = oGdPicturePDF.AddTrueTypeFont("Arial", False, False, False)
    oGdPicturePDF.SetTextMode(PdfTextMode.PdfTextModeFill)
    oGdPicturePDF.SetTextSize(30)
    oGdPicturePDF.SetFillColor(255, 0, 0, 0) 'Using Cyan colour
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
    oGdPicturePDF.DrawText(font_res_name, 1, 1, "Hello World!")
    oGdPicturePDF.SetTextWordSpacing(10);
    oGdPicturePDF.DrawText(font_res_name, 1, 10, "Hello World!")
    oGdPicturePDF.SaveToFileInc("test.pdf")
    MessageBox.show("Done")
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetTextCharSpacing(System.Single)">
      <summary>
 Set the char spacing, which is a number expressed in unscaled text space units(Points). 
 Initial value: 0.
 </summary>
      <param name="CharSpacing">The new value for the char spacing.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Draw a text twice, the first one draw the text usualy, and the second one draw the text with a char spacing" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", True) = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1) 'Selecting first page
    Dim font_res_name As String = oGdPicturePDF.AddTrueTypeFont("Arial", False, False, False)
    oGdPicturePDF.SetTextMode(PdfTextMode.PdfTextModeFill)
    oGdPicturePDF.SetTextSize(30)
    oGdPicturePDF.SetFillColor(255, 0, 0, 0) 'Using Cyan colour
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
    oGdPicturePDF.DrawText(font_res_name, 1, 1, "Hello World!")
    oGdPicturePDF.SetTextCharSpacing(10);
    oGdPicturePDF.DrawText(font_res_name, 1, 10, "Hello World!")
    oGdPicturePDF.SaveToFileInc("test.pdf")
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetTextScaling(System.Single)">
      <summary>
 Set the horizontal scaling, which is a number specifying the percentage of the normal width. 
 Initial value: 100 (normal width).
 </summary>
      <param name="Scaling">The new value for the scaling.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Draw a text twice, the first one draw the text usualy, and the second one draw the text with a scaling" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", True) = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1) 'Selecting first page
    Dim font_res_name As String = oGdPicturePDF.AddTrueTypeFont("Arial", False, False, False)
    oGdPicturePDF.SetTextMode(PdfTextMode.PdfTextModeFill)
    oGdPicturePDF.SetTextSize(30)
    oGdPicturePDF.SetFillColor(255, 0, 0, 0) 'Using Cyan colour
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
    oGdPicturePDF.DrawText(font_res_name, 1, 1, "Hello World!")
    oGdPicturePDF.SetTextScaling(110);
    oGdPicturePDF.DrawText(font_res_name, 1, 10, "Hello World!")
    oGdPicturePDF.SaveToFileInc("test.pdf")
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetTextRise(System.Single)">
      <summary>
 Set the text rise, which is a number expressed in unscaled text space units(Points).
 Initial value: 0.
 </summary>
      <param name="Rise">The new value for the text rising.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Draw a text followed by a superscripted text" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", True) = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1) 'Selecting first page
    Dim font_res_name As String = oGdPicturePDF.AddTrueTypeFont("Arial", False, False, False)
    oGdPicturePDF.SetTextMode(PdfTextMode.PdfTextModeFill)
    oGdPicturePDF.SetTextSize(30)
    oGdPicturePDF.SetFillColor(255, 0, 0, 0) 'Using Cyan colour
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
    oGdPicturePDF.DrawText(font_res_name, 1, 1, "Hello World!")
    oGdPicturePDF.SetTextRise(30 * 2 / 3);
    oGdPicturePDF.DrawText(font_res_name, 1, 1 + oGdPicturePDF.GetTextWidth("Hello World!"), "Hello World!")
    oGdPicturePDF.SaveToFileInc("test.pdf")
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawText(System.String,System.Single,System.Single,System.String)">
      <summary>
 Draws text using specified font into the current page of the PDF.
 </summary>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="DstX">The X destination in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y destination in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Text">The text to draw.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Add text on an existing PDF using incremental saving." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", True) = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1) 'Selecting first page
    Dim font_res_name As String = oGdPicturePDF.AddTrueTypeFont("Arial", False, False, False)
    oGdPicturePDF.SetTextMode(PdfTextMode.PdfTextModeFill)
    oGdPicturePDF.SetTextSize(30)
    oGdPicturePDF.SetFillColor(255, 0, 0, 0) 'Using Cyan colour
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
    oGdPicturePDF.DrawText(font_res_name, 1, 1, "Hello World!")
    oGdPicturePDF.SaveToFileInc("test.pdf")
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawTextBox(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.TextAlignment,GdPicture12.TextAlignment,System.String)">
      <summary>
 Draws an aligned text into a bounding box, using specified font, into the current page of the PDF. Multilines text is supported.
 </summary>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="Left">Specifies the x-coordinate of the upper-left corner of the text box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">Specifies the y-coordinate of the upper-left corner of the text box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Right">Specifies the x-coordinate of the lower-right corner of the text box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Bottom">Specifies the y-coordinate of the lower-right corner of the text box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="HorizontalAlignment">Specifies the horizontal alignment of the text within the bounding box.</param>
      <param name="VerticalAlignment">Specifies the vertical alignment of the text within the bounding box.</param>
      <param name="Text">The text to draw.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Drawing a centred text in a rounded rectangle on the current page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status = GdPictureStatus.OK Then
       Dim FontName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontTimesRoman)
       oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
       oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
       oGdPicturePDF.SetLineColor(0, 0, 255)
       oGdPicturePDF.SetLineWidth(2)
       oGdPicturePDF.DrawRoundedRectangle(20, 20, 100, 50, 5, False, True)
       status = oGdPicturePDF.DrawTextBox(FontName, 20, 20, 120, 72, TextAlignment.TextAlignmentCenter, TextAlignment.TextAlignmentCenter, "Centered text")
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_DrawTextBox_func_1.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("DrawTextBox method failed")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawTextBox(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.TextAlignment,GdPicture12.TextAlignment,System.String,System.Boolean)">
      <summary>
 Draws an aligned text into a bounding box, using specified font, into the current page of the PDF. Multilines text is supported.
 </summary>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="Left">Specifies the x-coordinate of the upper-left corner of the text box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">Specifies the y-coordinate of the upper-left corner of the text box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Right">Specifies the x-coordinate of the lower-right corner of the text box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Bottom">Specifies the y-coordinate of the lower-right corner of the text box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="HorizontalAlignment">Specifies the horizontal alignment of the text within the bounding box.</param>
      <param name="VerticalAlignment">Specifies the vertical alignment of the text within the bounding box.</param>
      <param name="Text">The text to draw.</param>
      <param name="UseFontBBox">Specifies if the bounding box of the font must be used to determine the font height. False by default. Using True should help to increase separation between lines.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Drawing a multi-lines text in a rounded rectangle on the current page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status = GdPictureStatus.OK Then
       Dim FontName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontTimesRoman)
       oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
       oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
       oGdPicturePDF.SetLineColor(0, 0, 255)
       oGdPicturePDF.SetLineWidth(2)
       oGdPicturePDF.DrawRoundedRectangle(20, 20, 100, 50, 5, False, True)
       Dim TextToDraw As String = ""
       For x As Integer = 1 To 5
          TextToDraw = TextToDraw + "Line " + x.ToString() + vbCrLf
       Next
       TextToDraw = TextToDraw.Substring(0, TextToDraw.Length - 2)  'remove last vbcrlf
       status = oGdPicturePDF.DrawTextBox(FontName, 20, 20, 120, 72, TextAlignment.TextAlignmentCenter, TextAlignment.TextAlignmentCenter, TextToDraw, True)
       If status = GdPictureStatus.OK Then
          oGdPicturePDF.SaveToFile("test_DrawTextBox_func_2.pdf", False)
          MessageBox.Show("Ok")
       Else
          MessageBox.Show("DrawTextBox method failed")
       End If
    Else
       MessageBox.Show("The PDF does not contain pages")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawWrappedText(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.TextAlignment,System.String,System.Boolean,System.Int32@)">
      <summary>
 Draws text on the native PDF by specifying a rectangle.
 </summary>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="Left">The left position of the rectangle.</param>
      <param name="Top">The top position of the rectangle.</param>
      <param name="Right">The right position of the rectangle.</param>
      <param name="Bottom">The bottom position of the rectangle.</param>
      <param name="HorizontalAlignment">The horizontal text alignment</param>
      <param name="Text">The text content.</param>
      <param name="useFontBBox">Specifies of font bbox must be used to compute line height.</param>
      <param name="StartPos">the starting position from the text. For the return, this position is updated whith the next unprinted position</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetWrappedTextHeight(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.TextAlignment,System.String,System.Boolean,System.Int32@)">
      <summary>
 compute the height of the wrapped text when drawn by the method DrawWrappedText
 </summary>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="Left">The left position of the rectangle.</param>
      <param name="Top">The top position of the rectangle.</param>
      <param name="Right">The right position of the rectangle.</param>
      <param name="Bottom">The bottom position of the rectangle.</param>
      <param name="HorizontalAlignment">The horizontal text alignment</param>
      <param name="Text">The text content.</param>
      <param name="useFontBBox">Specifies of font bbox must be used to compute line height.</param>
      <param name="StartPos">the starting position from the text. For the return, this position is updated whith the next unprinted position</param>
      <returns>the height of the drawn text</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawTextUnderline(System.String,System.Single,System.Single,System.String,System.Byte,System.Byte,System.Byte,System.Single)">
      <summary>
 Draws underlined text using specified font into the current page of the PDF.
 </summary>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="DstX">The X destination in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y destination in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Text">The text to draw.</param>
      <param name="Red">The amount of red color of the underline, between 0 and 255.</param>
      <param name="Green">The amount of green color of the underline, between 0 and 255.</param>
      <param name="Blue">The amount of blue color of the underline, between 0 and 255.</param>
      <param name="LineWidth">The width of the underline in current unit defined by the SetMeasurementUnit() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Add underlined text on an existing PDF" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1) 'Selecting first page
    Dim font_res_name As String = oGdPicturePDF.AddTrueTypeFont("Arial", False, False, False)
    oGdPicturePDF.SetTextMode(PdfTextMode.PdfTextModeFill)
    oGdPicturePDF.SetTextSize(30)
    oGdPicturePDF.SetFillColor(255, 0, 0, 0) 'Using Cyan colour
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
    oGdPicturePDF.DrawTextUnderline(font_res_name, 1, 1, "Hello World!", 255, 0, 0, 0.005)
    oGdPicturePDF.SaveToFileInc("Output.pdf")
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawTextUnderline(System.String,System.Single,System.Single,System.String,System.Drawing.Color,System.Single)">
      <summary>
 Draws underlined text using specified font into the current page of the PDF.
 </summary>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="DstX">The X destination in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y destination in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Text">The text to draw.</param>
      <param name="LineColor">The color of the underline. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="LineWidth">The width of the underline in current unit defined by the SetMeasurementUnit() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Add underlined text on an existing PDF" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1) 'Selecting first page
    Dim font_res_name As String = oGdPicturePDF.AddTrueTypeFont("Arial", False, False, False)
    oGdPicturePDF.SetTextMode(PdfTextMode.PdfTextModeFill)
    oGdPicturePDF.SetTextSize(30)
    oGdPicturePDF.SetFillColor(255, 0, 0, 0) 'Using Cyan colour
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
    oGdPicturePDF.DrawTextUnderline(font_res_name, 1, 1, "Hello World!", Color.Red, 0.005)
    oGdPicturePDF.SaveToFileInc("Output.pdf")
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawRotatedText(System.String,System.Single,System.Single,System.String,System.Single)">
      <summary>
 Draws a rotated text using specified font into the current page of the PDF.
 </summary>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="DstX">The X destination in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y destination in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Text">The text to draw.</param>
      <param name="Angle">The text angle rotation, in degrees.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Add rotated text on an existing PDF" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1) 'Selecting first page
    Dim font_res_name As String = oGdPicturePDF.AddTrueTypeFont("Arial", False, False, False)
    oGdPicturePDF.SetTextMode(PdfTextMode.PdfTextModeFill)
    oGdPicturePDF.SetTextSize(30)
    oGdPicturePDF.SetFillColor(255, 0, 0, 0) 'Using Cyan colour
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
    oGdPicturePDF.DrawRotatedText(font_res_name, 5, 5, "Hello World!", 45)
    oGdPicturePDF.SaveToFileInc("Output.pdf")
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
      <example>
        <code description="Adding a semi transparent watermark behind a page content" lang="VB.NET">
 Const text As String = "WATERMARK"
 Const textSize As Integer = 100
 Const rotation As Single = 320 'Note: rotation is anti-clockwise
 Const font As String = "Arial"
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("input.pdf", False)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitPoint)
 oGdPicturePDF.SelectPage(1)
 Dim oGdPictureBackPDF As New GdPicturePDF
 oGdPictureBackPDF.NewPDF()
 Dim pageWidth As Single = oGdPicturePDF.GetPageWidth()
 Dim pageHeight As Single = oGdPicturePDF.GetPageHeight()
 oGdPictureBackPDF.ClonePage(gdPicturePDF, 1)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.ClearPageContent()
 Dim fontResName As String = oGdPicturePDF.AddTrueTypeFont(font, True, False, False)
 oGdPicturePDF.SetTextSize(textSize)
 oGdPicturePDF.DrawRotatedText(fontResName, 0, oGdPicturePDF.GetTextHeight(fontResName, textSize), text, rotation)
 oGdPicturePDF.SaveGraphicsState()
 oGdPicturePDF.SetBlendMode(PdfBlendMode.PdfBlendModeNormal)
 oGdPicturePDF.SetFillAlpha(200)
 oGdPicturePDF.DrawPage(oGdPictureBackPDF, 1, 0, pageHeight, pageWidth, pageHeight)
 oGdPicturePDF.SaveToFile("output.pdf")
  </code>
      </example>
      <example>
        <code description="Draw a page of a PDF over a page of another PDF." lang="VB.NET">
 Dim backPDF As New GdPicturePDF
 If backPDF.LoadFromFile("back.pdf", False) = GdPictureStatus.OK Then
    Dim overlayPDF As New GdPicturePDF
    If overlayPDF.LoadFromFile("over.pdf", False) = GdPictureStatus.OK Then
       backPDF.DrawPage(overlayPDF, 1, 0, 0, backPDF.GetPageWidth, backPDF.GetPageHeight)
       backPDF.SaveToFile("output.pdf", True)
    End If
 End If
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetTextWidth(System.String,System.Single,System.String)">
      <summary>
 Calculates the width of a line of text.
 </summary>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font
 resource name.</param>
      <param name="Text">The text to measure.</param>
      <param name="TextSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
      <returns>
 The specified text width, in current unit defined by the SetMeasurementUnit() method.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetTextHeight(System.String,System.Single)">
      <summary>
 Returns the height of a specific font used in the PDF.
 </summary>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font
 resource name.</param>
      <param name="TextSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
      <returns>
 The text height, in current unit defined by the SetMeasurementUnit() method.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetTextHeight(System.String,System.Single,System.Boolean)">
      <summary>
 Returns the height of a specific font used in the PDF.
 </summary>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font
 resource name.</param>
      <param name="TextSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
      <param name="UseFontBox">Indicates if the font height must be determined by using the font box entry or by using ascent and descent properties.</param>
      <returns>
 The text height, in current unit defined by the SetMeasurementUnit() method.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DrawPage(GdPicture12.GdPicturePDF,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Draws a page from a specific PDF document into the current page of the PDF.
 </summary>
      <param name="SrcPDF">The PDF document of the page to draw.</param>
      <param name="SrcPage">The page number to draw.</param>
      <param name="DstX">The X destination of the bottom left corner, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y destination of the bottom left corner, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstWidth">The width of the destination, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstHeight">The height of the destination, in current unit defined by the SetMeasurementUnit() method.</param>
      <remarks>
 Take care: DstX and DstY parameters are the coordinates on the bottom-left corner of the destination area!
 </remarks>
      <example>
        <code description="Drawing the first page of document1.pdf to the top left corner of the first page of document2.pdf." lang="VB.NET">
 Dim srcPDF As New GdPicturePDF
 If srcPDF.LoadFromFile("document1.pdf", False) = GdPictureStatus.OK Then
    Dim dstPDF As New GdPicturePDF
    If dstPDF.LoadFromFile("document2.pdf", True) = GdPictureStatus.OK Then
       dstPDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
       dstPDF.SetOrigin(Origin.OriginTopLeft)
       dstPDF.SelectPage(1)
       dstPDF.DrawPage(srcPDF, 1, 0, 10, 10, 10)
       dstPDF.SaveToFileInc("document2.pdf")
    End If
 End If
 </code>
      </example>
      <example>
        <code description="Adding a semi transparent watermark behind a page content" lang="VB.NET">
 Const text As String = "WATERMARK"
 Const textSize As Integer = 100
 Const rotation As Single = 320 'Note: rotation is anti-clockwise
 Const font As String = "Arial"
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.LoadFromFile("input.pdf", False)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitPoint)
 oGdPicturePDF.SelectPage(1)
 Dim oGdPictureBackPDF As New GdPicturePDF
 oGdPictureBackPDF.NewPDF()
 Dim pageWidth As Single = oGdPicturePDF.GetPageWidth()
 Dim pageHeight As Single = oGdPicturePDF.GetPageHeight()
 oGdPictureBackPDF.ClonePage(gdPicturePDF, 1)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.ClearPageContent()
 Dim fontResName As String = oGdPicturePDF.AddTrueTypeFont(font, True, False, False)
 oGdPicturePDF.SetTextSize(textSize)
 oGdPicturePDF.DrawRotatedText(fontResName, 0, oGdPicturePDF.GetTextHeight(fontResName, textSize), text, rotation)
 oGdPicturePDF.SaveGraphicsState()
 oGdPicturePDF.SetBlendMode(PdfBlendMode.PdfBlendModeNormal)
 oGdPicturePDF.SetFillAlpha(200)
 oGdPicturePDF.DrawPage(oGdPictureBackPDF, 1, 0, pageHeight, pageWidth, pageHeight)
 oGdPicturePDF.SaveToFile("output.pdf")
  </code>
      </example>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddGraphicsToPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
 Appends path from a GraphicsPath object. It is recommended to set the origin to top-left. See example.
 </summary>
      <param name="GraphicsPath">A GraphicsPath object.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetOrigin(GdPicture12.PdfOrigin)" />
      <example>
        <code description="Create a GraphicsPath object and then stroke it on an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    oGdPicturePDF.SelectPage(1)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitPoint)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetLineColor(Color.Red)
    Dim graphicsPath As New Drawing2D.GraphicsPath
    Dim myPoints() As Point = {New Point(20, 20), New Point(120, 120), New Point(20, 120), New Point(20, 20)}
    Dim myRect As New Rectangle(120, 120, 100, 100)
    graphicsPath.AddLines(myPoints)
    graphicsPath.AddRectangle(myRect)
    graphicsPath.AddEllipse(220, 220, 100, 100)
    graphicsPath.AddString("I Love GdPicture.NET", New FontFamily("Arial"), 0, 20, New Point(), New StringFormat())
    oGdPicturePDF.AddGraphicsToPath(graphicsPath)
    oGdPicturePDF.StrokePath()
    oGdPicturePDF.SaveToFile("out.pdf")
 End If
 oGdPicturePDF.Dispose()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.BeginPath(System.Single,System.Single)">
      <summary>
 Begin a new subpath by moving the current point to coordinates (DstX, DstY), omitting any connecting
 line segment into the current page of the PDF.
 </summary>
      <param name="DstX">The X destination in current unit defined by the SetMeasurementUnit()
 method.</param>
      <param name="DstY">The Y destination in current unit defined by the
 SetMeasurementUnit() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
      <example>
        <code description="Create a new pdf and draw some graphics on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.BeginPath(100, 10)
    oGdPicturePDF.AddLineToPath(20, 50)
    oGdPicturePDF.AddLineToPath(200, 50)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePath()
    oGdPicturePDF.BeginPath(100, 55)
    oGdPicturePDF.AddLineToPath(20, 100)
    oGdPicturePDF.AddLineToPath(200, 100)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.StrokePath()
    oGdPicturePDF.BeginPath(100, 105)
    oGdPicturePDF.AddLineToPath(20, 150)
    oGdPicturePDF.AddLineToPath(200, 150)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(200, 155)
    oGdPicturePDF.AddLineToPath(20, 205)
    oGdPicturePDF.AddLineToPath(200, 180)
    oGdPicturePDF.AddLineToPath(20, 155)
    oGdPicturePDF.AddLineToPath(200, 205)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePathOdd()
    oGdPicturePDF.BeginPath(10, 210)
    oGdPicturePDF.AddCurveToPath1(5, 250, 70, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(100, 210)
    oGdPicturePDF.AddCurveToPath2(105, 250, 170, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(10, 260)
    oGdPicturePDF.AddCurveToPath3(5, 290, 70, 280, 80, 270)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.SaveToFile("test_PathFunc.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed: " + status.ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.ClosePath">
      <summary>
 Closes &amp; terminates the current subpath by appending a straight line segment from the current
 point to the starting point of the subpath,into the current page of the PDF. If the current subpath is
 already closed, this method shall do nothing.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.BeginPath(System.Single,System.Single)" />
      <example>
        <code description="Create a new pdf and draw some graphics on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.BeginPath(100, 10)
    oGdPicturePDF.AddLineToPath(20, 50)
    oGdPicturePDF.AddLineToPath(200, 50)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePath()
    oGdPicturePDF.BeginPath(100, 55)
    oGdPicturePDF.AddLineToPath(20, 100)
    oGdPicturePDF.AddLineToPath(200, 100)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.StrokePath()
    oGdPicturePDF.BeginPath(100, 105)
    oGdPicturePDF.AddLineToPath(20, 150)
    oGdPicturePDF.AddLineToPath(200, 150)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(200, 155)
    oGdPicturePDF.AddLineToPath(20, 205)
    oGdPicturePDF.AddLineToPath(200, 180)
    oGdPicturePDF.AddLineToPath(20, 155)
    oGdPicturePDF.AddLineToPath(200, 205)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePathOdd()
    oGdPicturePDF.BeginPath(10, 210)
    oGdPicturePDF.AddCurveToPath1(5, 250, 70, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(100, 210)
    oGdPicturePDF.AddCurveToPath2(105, 250, 170, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(10, 260)
    oGdPicturePDF.AddCurveToPath3(5, 290, 70, 280, 80, 270)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.SaveToFile("test_PathFunc.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed : " + status.ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.EndPath">
      <summary>
 End the path without filling or stroking, into the current page of the PDF. If the current subpath is
 already closed, this method shall do nothing.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.BeginPath(System.Single,System.Single)" />
      <example>
        <code description="Create a new pdf and draw some graphics on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.BeginPath(100, 10)
    oGdPicturePDF.AddLineToPath(20, 50)
    oGdPicturePDF.AddLineToPath(200, 50)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePath()
    oGdPicturePDF.BeginPath(100, 55)
    oGdPicturePDF.AddLineToPath(20, 100)
    oGdPicturePDF.AddLineToPath(200, 100)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.StrokePath()
    oGdPicturePDF.BeginPath(100, 105)
    oGdPicturePDF.AddLineToPath(20, 150)
    oGdPicturePDF.AddLineToPath(200, 150)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(200, 155)
    oGdPicturePDF.AddLineToPath(20, 205)
    oGdPicturePDF.AddLineToPath(200, 180)
    oGdPicturePDF.AddLineToPath(20, 155)
    oGdPicturePDF.AddLineToPath(200, 205)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePathOdd()
    oGdPicturePDF.BeginPath(10, 210)
    oGdPicturePDF.AddCurveToPath1(5, 250, 70, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(100, 210)
    oGdPicturePDF.AddCurveToPath2(105, 250, 170, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(10, 260)
    oGdPicturePDF.AddCurveToPath3(5, 290, 70, 280, 80, 270)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.SaveToFile("test_PathFunc.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed: " + status.ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.ClipPath">
      <summary>
 Modify the current clipping path by intersecting it with the current path, into the current page of the PDF.
 This method uses the nonzero winding number rule to determine which regions lie inside the clipping path.
 </summary>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing an image into a clipping path defined by an ellipse." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim imageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("c:\myimage.jpg")
 Dim imageWidth As Integer = oGdPictureImaging.GetWidth(imageID)
 Dim imageHeight As Integer = oGdPictureImaging.GetHeight(imageID)
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitPoint)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
 oGdPicturePDF.NewPage(imageWidth, imageHeight)
 oGdPicturePDF.AddEllipseToPath(CSng(imageWidth) / 2.0F, CSng(imageHeight) / 2.0F, imageWidth, imageHeight)
 oGdPicturePDF.ClipPath()
 Dim imageResName As String = oGdPicturePDF.AddImageFromGdPictureImage(imageID, False, False)
 oGdPicturePDF.DrawImage(imageResName, 0, 0, imageWidth, imageHeight)
 oGdPictureImaging.ReleaseGdPictureImage(imageID)
 oGdPictureImaging.Dispose()
 oGdPicturePDF.SaveToFile("c:\mypdf.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.ClipPathOdd">
      <summary>
 Modify the current clipping path by intersecting it with the current path, into the current page of the PDF.
 This method uses the even-odd rule to determine which regions lie inside the clipping path.
 </summary>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing an image into a clipping path defined by an ellipse." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim imageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("c:\myimage.jpg")
 Dim imageWidth As Integer = oGdPictureImaging.GetWidth(imageID)
 Dim imageHeight As Integer = oGdPictureImaging.GetHeight(imageID)
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitPoint)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
 oGdPicturePDF.NewPage(imageWidth, imageHeight)
 oGdPicturePDF.AddEllipseToPath(CSng(imageWidth) / 2.0F, CSng(imageHeight) / 2.0F, imageWidth, imageHeight)
 oGdPicturePDF.ClipPath()
 Dim imageResName As String = oGdPicturePDF.AddImageFromGdPictureImage(imageID, False, False)
 oGdPicturePDF.DrawImage(imageResName, 0, 0, imageWidth, imageHeight)
 oGdPictureImaging.ReleaseGdPictureImage(imageID)
 oGdPictureImaging.Dispose()
 oGdPicturePDF.SaveToFile("c:\mypdf.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.StrokePath">
      <summary>
 Stroke the path, into the current page of the PDF.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.BeginPath(System.Single,System.Single)" />
      <example>
        <code description="Create a new pdf and draw some graphics on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.BeginPath(100, 10)
    oGdPicturePDF.AddLineToPath(20, 50)
    oGdPicturePDF.AddLineToPath(200, 50)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePath()
    oGdPicturePDF.BeginPath(100, 55)
    oGdPicturePDF.AddLineToPath(20, 100)
    oGdPicturePDF.AddLineToPath(200, 100)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.StrokePath()
    oGdPicturePDF.BeginPath(100, 105)
    oGdPicturePDF.AddLineToPath(20, 150)
    oGdPicturePDF.AddLineToPath(200, 150)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(200, 155)
    oGdPicturePDF.AddLineToPath(20, 205)
    oGdPicturePDF.AddLineToPath(200, 180)
    oGdPicturePDF.AddLineToPath(20, 155)
    oGdPicturePDF.AddLineToPath(200, 205)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePathOdd()
    oGdPicturePDF.BeginPath(10, 210)
    oGdPicturePDF.AddCurveToPath1(5, 250, 70, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(100, 210)
    oGdPicturePDF.AddCurveToPath2(105, 250, 170, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(10, 260)
    oGdPicturePDF.AddCurveToPath3(5, 290, 70, 280, 80, 270)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.SaveToFile("test_PathFunc.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed: " + status.ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.CloseAndFillAndStrokePath">
      <summary>
 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region
 to fill, into the current page of the PDF.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.BeginPath(System.Single,System.Single)" />
      <example>
        <code description="Create a new pdf and draw some graphics on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.BeginPath(100, 10)
    oGdPicturePDF.AddLineToPath(20, 50)
    oGdPicturePDF.AddLineToPath(200, 50)
    oGdPicturePDF.CloseAndFillAndStrokePath()
    oGdPicturePDF.BeginPath(100, 55)
    oGdPicturePDF.AddLineToPath(20, 100)
    oGdPicturePDF.AddLineToPath(200, 100)
    oGdPicturePDF.CloseAndStrokePath()
    oGdPicturePDF.BeginPath(200, 105)
    oGdPicturePDF.AddLineToPath(20, 155)
    oGdPicturePDF.AddLineToPath(200, 130)
    oGdPicturePDF.AddLineToPath(20, 105)
    oGdPicturePDF.AddLineToPath(200, 155)
    oGdPicturePDF.CloseAndFillAndStrokePath()
    oGdPicturePDF.SaveToFile("test_PathFunc2.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed: " + status.ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.CloseAndFillAndStrokePathOdd">
      <summary>
 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill, into
 the current page of the PDF.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.BeginPath(System.Single,System.Single)" />
      <example>
        <code description="Create a new pdf and draw some graphics on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.BeginPath(100, 10)
    oGdPicturePDF.AddLineToPath(20, 50)
    oGdPicturePDF.AddLineToPath(200, 50)
    oGdPicturePDF.CloseAndFillAndStrokePath()
    oGdPicturePDF.BeginPath(100, 55)
    oGdPicturePDF.AddLineToPath(20, 100)
    oGdPicturePDF.AddLineToPath(200, 100)
    oGdPicturePDF.CloseAndStrokePath()
    oGdPicturePDF.BeginPath(200, 105)
    oGdPicturePDF.AddLineToPath(20, 155)
    oGdPicturePDF.AddLineToPath(200, 130)
    oGdPicturePDF.AddLineToPath(20, 105)
    oGdPicturePDF.AddLineToPath(200, 155)
    oGdPicturePDF.CloseAndFillAndStrokePathOdd()
    oGdPicturePDF.SaveToFile("test_PathFunc2.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed: " + status.ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.FillAndStrokePath">
      <summary>
 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill,
 into the current page of the PDF.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.BeginPath(System.Single,System.Single)" />
      <example>
        <code description="Create a new pdf and draw some graphics on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.BeginPath(100, 10)
    oGdPicturePDF.AddLineToPath(20, 50)
    oGdPicturePDF.AddLineToPath(200, 50)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePath()
    oGdPicturePDF.BeginPath(100, 55)
    oGdPicturePDF.AddLineToPath(20, 100)
    oGdPicturePDF.AddLineToPath(200, 100)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.StrokePath()
    oGdPicturePDF.BeginPath(100, 105)
    oGdPicturePDF.AddLineToPath(20, 150)
    oGdPicturePDF.AddLineToPath(200, 150)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(200, 155)
    oGdPicturePDF.AddLineToPath(20, 205)
    oGdPicturePDF.AddLineToPath(200, 180)
    oGdPicturePDF.AddLineToPath(20, 155)
    oGdPicturePDF.AddLineToPath(200, 205)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePathOdd()
    oGdPicturePDF.BeginPath(10, 210)
    oGdPicturePDF.AddCurveToPath1(5, 250, 70, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(100, 210)
    oGdPicturePDF.AddCurveToPath2(105, 250, 170, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(10, 260)
    oGdPicturePDF.AddCurveToPath3(5, 290, 70, 280, 80, 270)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.SaveToFile("test_PathFunc.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed: " + status.ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.FillAndStrokePathOdd">
      <summary>
 Fill and then stroke the path, using the even-odd rule to determine the region to fill, into the
 current page of the PDF.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.BeginPath(System.Single,System.Single)" />
      <example>
        <code description="Create a new pdf and draw some graphics on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.BeginPath(100, 10)
    oGdPicturePDF.AddLineToPath(20, 50)
    oGdPicturePDF.AddLineToPath(200, 50)
    oGdPicturePDF.CloseAndFillAndStrokePath()
    oGdPicturePDF.BeginPath(100, 55)
    oGdPicturePDF.AddLineToPath(20, 100)
    oGdPicturePDF.AddLineToPath(200, 100)
    oGdPicturePDF.CloseAndStrokePath()
    oGdPicturePDF.BeginPath(200, 105)
    oGdPicturePDF.AddLineToPath(20, 155)
    oGdPicturePDF.AddLineToPath(200, 130)
    oGdPicturePDF.AddLineToPath(20, 105)
    oGdPicturePDF.AddLineToPath(200, 155)
    oGdPicturePDF.FillAndStrokePathOdd()
    oGdPicturePDF.SaveToFile("test_PathFunc2.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed:" + status.ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.FillPath">
      <summary>
 Fill the path, using the nonzero winding number rule to determine the region to fill, into the
 current page of the PDF.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.BeginPath(System.Single,System.Single)" />
      <example>
        <code description="Create a new pdf and draw some graphics on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.BeginPath(100, 10)
    oGdPicturePDF.AddLineToPath(20, 50)
    oGdPicturePDF.AddLineToPath(200, 50)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePath()
    oGdPicturePDF.BeginPath(100, 55)
    oGdPicturePDF.AddLineToPath(20, 100)
    oGdPicturePDF.AddLineToPath(200, 100)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.StrokePath()
    oGdPicturePDF.BeginPath(100, 105)
    oGdPicturePDF.AddLineToPath(20, 150)
    oGdPicturePDF.AddLineToPath(200, 150)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(200, 155)
    oGdPicturePDF.AddLineToPath(20, 205)
    oGdPicturePDF.AddLineToPath(200, 180)
    oGdPicturePDF.AddLineToPath(20, 155)
    oGdPicturePDF.AddLineToPath(200, 205)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePathOdd()
    oGdPicturePDF.BeginPath(10, 210)
    oGdPicturePDF.AddCurveToPath1(5, 250, 70, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(100, 210)
    oGdPicturePDF.AddCurveToPath2(105, 250, 170, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(10, 260)
    oGdPicturePDF.AddCurveToPath3(5, 290, 70, 280, 80, 270)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.SaveToFile("test_PathFunc.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed: " + status.ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.FillPathOdd">
      <summary>
 Fill the path, using the even-odd rule to determine the region to fill, into the current page of a
 PDF.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.BeginPath(System.Single,System.Single)" />
      <example>
        <code description="Create a new pdf and draw some graphics on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.BeginPath(100, 10)
    oGdPicturePDF.AddLineToPath(20, 50)
    oGdPicturePDF.AddLineToPath(200, 50)
    oGdPicturePDF.CloseAndFillAndStrokePath()
    oGdPicturePDF.BeginPath(100, 55)
    oGdPicturePDF.AddLineToPath(20, 100)
    oGdPicturePDF.AddLineToPath(200, 100)
    oGdPicturePDF.CloseAndStrokePath()
    oGdPicturePDF.BeginPath(200, 105)
    oGdPicturePDF.AddLineToPath(20, 155)
    oGdPicturePDF.AddLineToPath(200, 130)
    oGdPicturePDF.AddLineToPath(20, 105)
    oGdPicturePDF.AddLineToPath(200, 155)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPathOdd()
    oGdPicturePDF.SaveToFile("test_PathFunc2.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed: " + status.ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.CloseAndStrokePath">
      <summary>
 Close and stroke the path, into the current page of the PDF. This method shall have the same effect
 as the sequence PdfClosePath and PdfStrokePath.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.BeginPath(System.Single,System.Single)" />
      <example>
        <code description="Create a new pdf and draw some graphics on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.BeginPath(100, 10)
    oGdPicturePDF.AddLineToPath(20, 50)
    oGdPicturePDF.AddLineToPath(200, 50)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePath()
    oGdPicturePDF.BeginPath(100, 55)
    oGdPicturePDF.AddLineToPath(20, 100)
    oGdPicturePDF.AddLineToPath(200, 100)
    oGdPicturePDF.CloseAndStrokePath()
    oGdPicturePDF.BeginPath(100, 105)
    oGdPicturePDF.AddLineToPath(20, 150)
    oGdPicturePDF.AddLineToPath(200, 150)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(200, 155)
    oGdPicturePDF.AddLineToPath(20, 205)
    oGdPicturePDF.AddLineToPath(200, 180)
    oGdPicturePDF.AddLineToPath(20, 155)
    oGdPicturePDF.AddLineToPath(200, 205)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePathOdd()
    oGdPicturePDF.BeginPath(10, 210)
    oGdPicturePDF.AddCurveToPath1(5, 250, 70, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(100, 210)
    oGdPicturePDF.AddCurveToPath2(105, 250, 170, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(10, 260)
    oGdPicturePDF.AddCurveToPath3(5, 290, 70, 280, 80, 270)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.SaveToFile("test_PathFunc.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed: " + status.ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddLineToPath(System.Single,System.Single)">
      <summary>
 Appends a straight line segment from the current point to the point (DstX, DstY) into the current page
 of the PDF.
 </summary>
      <param name="DstX">The X destination in current unit defined by the SetMeasurementUnit()
 method.</param>
      <param name="DstY">The Y destination in current unit defined by the
 SetMeasurementUnit() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.BeginPath(System.Single,System.Single)" />
      <remarks>
 The new current point in the subpath will be (DstX, DstY).
 </remarks>
      <example>
        <code description="Create a new pdf and draw some graphics on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.BeginPath(100, 10)
    oGdPicturePDF.AddLineToPath(20, 50)
    oGdPicturePDF.AddLineToPath(200, 50)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePath()
    oGdPicturePDF.BeginPath(100, 55)
    oGdPicturePDF.AddLineToPath(20, 100)
    oGdPicturePDF.AddLineToPath(200, 100)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.StrokePath()
    oGdPicturePDF.BeginPath(100, 105)
    oGdPicturePDF.AddLineToPath(20, 150)
    oGdPicturePDF.AddLineToPath(200, 150)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(200, 155)
    oGdPicturePDF.AddLineToPath(20, 205)
    oGdPicturePDF.AddLineToPath(200, 180)
    oGdPicturePDF.AddLineToPath(20, 155)
    oGdPicturePDF.AddLineToPath(200, 205)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePathOdd()
    oGdPicturePDF.BeginPath(10, 210)
    oGdPicturePDF.AddCurveToPath1(5, 250, 70, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(100, 210)
    oGdPicturePDF.AddCurveToPath2(105, 250, 170, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(10, 260)
    oGdPicturePDF.AddCurveToPath3(5, 290, 70, 280, 80, 270)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.SaveToFile("test_PathFunc.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed: " + status.ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddEllipseToPath(System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Appends an ellipse on the current page of the PDF.
 </summary>
      <param name="CenterX">The X coordinate of the center of the ellipse, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="CenterY">The Y coordinate of the center of the ellipse, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the bounding box of the ellipse, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="height">The height of the bounding box of the ellipse, in current unit defined by the SetMeasurementUnit() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Drawing an image into a clipping path defined by an ellipse." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim imageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("c:\myimage.jpg")
 Dim imageWidth As Integer = oGdPictureImaging.GetWidth(imageID)
 Dim imageHeight As Integer = oGdPictureImaging.GetHeight(imageID)
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitPoint)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
 oGdPicturePDF.NewPage(imageWidth, imageHeight)
 oGdPicturePDF.AddEllipseToPath(CSng(imageWidth) / 2.0F, CSng(imageHeight) / 2.0F, imageWidth, imageHeight)
 oGdPicturePDF.ClipPath()
 Dim imageResName As String = oGdPicturePDF.AddImageFromGdPictureImage(imageID, False, False)
 oGdPicturePDF.DrawImage(imageResName, 0, 0, imageWidth, imageHeight)
 oGdPictureImaging.ReleaseGdPictureImage(imageID)
 oGdPictureImaging.Dispose()
 oGdPicturePDF.SaveToFile("c:\mypdf.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddCurveToPath3(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Appends a cubic Bézier curve, using 2 control points from the current point to the point (X3, Y3),
 into the current page of the PDF.
 </summary>
      <param name="X1">The X destination in current unit defined by the SetMeasurementUnit()
 method of the first Bézier control point.</param>
      <param name="Y1">The Y destination in current unit defined by the
 SetMeasurementUnit() method of the first Bézier control point.</param>
      <param name="X2">The X destination in current unit defined by the SetMeasurementUnit()
 method of the second Bézier control point.</param>
      <param name="Y2">The Y destination in current unit defined by the
 SetMeasurementUnit() method of the second Bézier control point.</param>
      <param name="X3">The X destination in current unit defined by the SetMeasurementUnit()
 method of the curve end point.</param>
      <param name="Y3">The Y destination in current unit defined by the
 SetMeasurementUnit() method of curve end point.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.BeginPath(System.Single,System.Single)" />
      <remarks>
 The new current point in the subpath will be (X3, Y3).
 </remarks>
      <example>
        <code description="Create a new pdf and draw some graphics on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.BeginPath(100, 10)
    oGdPicturePDF.AddLineToPath(20, 50)
    oGdPicturePDF.AddLineToPath(200, 50)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePath()
    oGdPicturePDF.BeginPath(100, 55)
    oGdPicturePDF.AddLineToPath(20, 100)
    oGdPicturePDF.AddLineToPath(200, 100)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.StrokePath()
    oGdPicturePDF.BeginPath(100, 105)
    oGdPicturePDF.AddLineToPath(20, 150)
    oGdPicturePDF.AddLineToPath(200, 150)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(200, 155)
    oGdPicturePDF.AddLineToPath(20, 205)
    oGdPicturePDF.AddLineToPath(200, 180)
    oGdPicturePDF.AddLineToPath(20, 155)
    oGdPicturePDF.AddLineToPath(200, 205)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePathOdd()
    oGdPicturePDF.BeginPath(10, 210)
    oGdPicturePDF.AddCurveToPath1(5, 250, 70, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(100, 210)
    oGdPicturePDF.AddCurveToPath2(105, 250, 170, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(10, 260)
    oGdPicturePDF.AddCurveToPath3(5, 290, 70, 280, 80, 270)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.SaveToFile("test_PathFunc.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed: " + status.ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddCurveToPath2(System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Appends a cubic Bézier curve, using current point and (X2, Y2) as control points, from the current
 point to the point (X3, Y3), into the current page of the PDF.
 </summary>
      <param name="X2">The X destination in current unit defined by the SetMeasurementUnit()
 method of the second Bézier control point.</param>
      <param name="Y2">The Y destination in current unit defined by the
 SetMeasurementUnit() method of the second Bézier control point.</param>
      <param name="X3">The X destination in current unit defined by the SetMeasurementUnit()
 method of the curve end point.</param>
      <param name="Y3">The Y destination in current unit defined by the
 SetMeasurementUnit() method of curve end point.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.BeginPath(System.Single,System.Single)" />
      <remarks>
 The new current point in the subpath will be (X3, Y3).
 </remarks>
      <example>
        <code description="Create a new pdf and draw some graphics on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.BeginPath(100, 10)
    oGdPicturePDF.AddLineToPath(20, 50)
    oGdPicturePDF.AddLineToPath(200, 50)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePath()
    oGdPicturePDF.BeginPath(100, 55)
    oGdPicturePDF.AddLineToPath(20, 100)
    oGdPicturePDF.AddLineToPath(200, 100)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.StrokePath()
    oGdPicturePDF.BeginPath(100, 105)
    oGdPicturePDF.AddLineToPath(20, 150)
    oGdPicturePDF.AddLineToPath(200, 150)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(200, 155)
    oGdPicturePDF.AddLineToPath(20, 205)
    oGdPicturePDF.AddLineToPath(200, 180)
    oGdPicturePDF.AddLineToPath(20, 155)
    oGdPicturePDF.AddLineToPath(200, 205)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePathOdd()
    oGdPicturePDF.BeginPath(10, 210)
    oGdPicturePDF.AddCurveToPath1(5, 250, 70, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(100, 210)
    oGdPicturePDF.AddCurveToPath2(105, 250, 170, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(10, 260)
    oGdPicturePDF.AddCurveToPath3(5, 290, 70, 280, 80, 270)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.SaveToFile("test_PathFunc.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed: " + status.ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddCurveToPath1(System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Appends a cubic Bézier curve, using (X1, Y1) and (X3, X3) as control points, from the current point to
 the point (X3, Y3), into the current page of the PDF.
 </summary>
      <param name="X1">The X destination in current unit defined by the SetMeasurementUnit()
 method of the first Bézier control point.</param>
      <param name="Y1">The Y destination in current unit defined by the
 SetMeasurementUnit() method of the first Bézier control point.</param>
      <param name="X3">The X destination in current unit defined by the SetMeasurementUnit()
 method of the curve end point.</param>
      <param name="Y3">The Y destination in current unit defined by the
 SetMeasurementUnit() method of curve end point.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.SetMeasurementUnit(GdPicture12.PdfMeasurementUnit)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.BeginPath(System.Single,System.Single)" />
      <remarks>
 The new current point in the subpath will be (X3, Y3).
 </remarks>
      <example>
        <code description="Create a new pdf and draw some graphics on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.NewPage(210, 297)
    oGdPicturePDF.SetFillColor(Color.Blue)
    oGdPicturePDF.SetLineColor(Color.Red)
    oGdPicturePDF.BeginPath(100, 10)
    oGdPicturePDF.AddLineToPath(20, 50)
    oGdPicturePDF.AddLineToPath(200, 50)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePath()
    oGdPicturePDF.BeginPath(100, 55)
    oGdPicturePDF.AddLineToPath(20, 100)
    oGdPicturePDF.AddLineToPath(200, 100)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.StrokePath()
    oGdPicturePDF.BeginPath(100, 105)
    oGdPicturePDF.AddLineToPath(20, 150)
    oGdPicturePDF.AddLineToPath(200, 150)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(200, 155)
    oGdPicturePDF.AddLineToPath(20, 205)
    oGdPicturePDF.AddLineToPath(200, 180)
    oGdPicturePDF.AddLineToPath(20, 155)
    oGdPicturePDF.AddLineToPath(200, 205)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillAndStrokePathOdd()
    oGdPicturePDF.BeginPath(10, 210)
    oGdPicturePDF.AddCurveToPath1(5, 250, 70, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(100, 210)
    oGdPicturePDF.AddCurveToPath2(105, 250, 170, 230)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.BeginPath(10, 260)
    oGdPicturePDF.AddCurveToPath3(5, 290, 70, 280, 80, 270)
    oGdPicturePDF.ClosePath()
    oGdPicturePDF.FillPath()
    oGdPicturePDF.SaveToFile("test_PathFunc.pdf", False)
    MessageBox.Show("Ok")
 Else
    MessageBox.Show("NewPDF() method failed: " + status.ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.Merge2Documents(System.String,System.String,System.String)">
      <summary>
 Merge 2 PDF files to a new file.
 </summary>
      <param name="SrcDoc1">The path of the first PDF document to merge.</param>
      <param name="SrcDoc2">The path of the second PDF document to merge.</param>
      <param name="DstDoc">The path of the PDF document to create.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Merging 2 documents from files to file." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.Merge2Documents("test1.pdf", "test2.pdf", "Result.pdf")
 If status = GdPictureStatus.OK Then
    MessageBox.show("success")
 Else
    MessageBox.show("failure. Status: " + status.ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.Merge2Documents(System.IO.Stream,System.IO.Stream,System.IO.Stream)">
      <summary>
 Merge 2 PDF stream into another stream. If the both documents are PDF/A a PDF/A will be generated.
 </summary>
      <param name="SrcDoc1">The stream object handling data of the first PDF document to merge.</param>
      <param name="SrcDoc2">The stream object handling data PDF document to merge.</param>
      <param name="DstDoc">The destination stream.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Merging 2 documents from stream to stream and display the resulting doc in a Gdiewer object." lang="VB.NET">
 Dim doc1 As IO.Stream = New IO.FileStream("file1.pdf", IO.FileMode.Open)
 Dim doc2 As IO.Stream = New IO.FileStream("file2.pdf", IO.FileMode.Open)
 Dim mergedDoc As IO.Stream = New IO.MemoryStream
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.Merge2Documents(doc1, doc2, mergedDoc) = GdPictureStatus.OK Then
    GdViewer1.DisplayFromStream(mergedDoc)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.Merge2Documents(GdPicture12.GdPicturePDF,GdPicture12.GdPicturePDF)">
      <summary>
 Merge 2 PDF documents to a new GdPicturePDF object. If the both documents are PDF/A a PDF/A will be generated.
 </summary>
      <param name="SrcDoc1">A GdPicturePDF object. The first PDF document to merge.</param>
      <param name="SrcDoc2">A GdPicturePDF object. The second PDF document to merge.</param>
      <returns>
 A GdPicturePDF object. The generated PDF.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Merging 2 documents from GdPicturePDF objects to a new GdPicturePDF object." lang="VB.NET">
 Dim oGdPicturePDF1 As New GdPicturePDF
 Dim oGdPicturePDF2 As New GdPicturePDF
 oGdPicturePDF1.LoadFromFile("test1.pdf", False)
 oGdPicturePDF2.LoadFromFile("test2.pdf", False)
 Dim oNewGdPicturePDF As GdPicturePDF = oGdPicturePDF1.Merge2Documents(oGdPicturePDF1, oGdPicturePDF2)
 Dim status As GdPictureStatus = oGdPicturePDF1.GetStat
 If status = GdPictureStatus.OK Then
    oNewGdPicturePDF.SetAuthor("Hello from the new author")
    oNewGdPicturePDF.SaveToFile("Result.pdf")
    oNewGdPicturePDF.CloseDocument()
    MessageBox.show("success")
 Else
    MessageBox.show("failure. Status: " + status.ToString())
 End If
 oGdPicturePDF1.CloseDocument()
 oGdPicturePDF2.CloseDocument()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.MergeDocuments(System.String[],System.String)">
      <summary>
 Merge several PDF documents from an array of path to a new PDF file. If the first document in the list is a PDF/A a PDF/A will be generated.
 </summary>
      <param name="SrcDocPath">An array of string defining the path of the PDF documents to merge.</param>
      <param name="DstDoc">The path of the PDF document to create.</param>
      <returns>
 A GdPicturePDF object. The generated PDF.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.MergeDocuments(GdPicture12.GdPicturePDF[])">
      <summary>
 Merge several PDF documents from an array of GdPicturePDF objects to a new GdPicturePDF object. If the first document in the list is a PDF/A a PDF/A will be generated.
 </summary>
      <param name="SrcDoc">An array of GdPicturePDF object. PDF documents to merge.</param>
      <returns>
 A GdPicturePDF object. The generated PDF.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Merging 3 documents from an array of GdPicturePDF objects to a new GdPicturePDF object." lang="VB.NET">
 Dim arGdPicturePDF(0 To 2) As GdPicturePDF
 arGdPicturePDF(0) = New GdPicturePDF
 arGdPicturePDF(0).LoadFromFile("test1.pdf", False)
 arGdPicturePDF(1) = New GdPicturePDF
 arGdPicturePDF(1).LoadFromFile("test2.pdf", False)
 arGdPicturePDF(2) = New GdPicturePDF
 arGdPicturePDF(2).LoadFromFile("test3.pdf", False)
 Dim oNewGdPicturePDF As GdPicturePDF = arGdPicturePDF(0).MergeDocuments(arGdPicturePDF)
 Dim status As GdPictureStatus = arGdPicturePDF(0).GetStat
 If status = GdPictureStatus.OK Then
    oNewGdPicturePDF.SetAuthor("Hello from the new author")
    oNewGdPicturePDF.SaveToFile("Result.pdf")
    oNewGdPicturePDF.CloseDocument()
    MessageBox.show("success")
 Else
    MessageBox.show("failure. Status: " + status.ToString())
 End If
 arGdPicturePDF(0).CloseDocument()
 arGdPicturePDF(1).CloseDocument()
 arGdPicturePDF(2).CloseDocument()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFormFieldActionID(System.Int32)">
      <summary>
 Returns the action ID of a specified form field.
 The GetActionType method should be subsequently called to determine which kind of action is associated to the form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <returns>
 The  ID of the action.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetActionType(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetFormFieldAction(System.Int32,System.Int32)" />
      <example>
        <code description="Find form fields' action types." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim BookMarkId As Integer = oGdPicturePDF.GetBookMarkRootID()
    If BookMarkId &lt;&gt; 0 Then
       Dim ActionId As Integer = oGdPicturePDF.GetBookMarkActionID(BookMarkId)
       If ActionId &lt;&gt; 0 Then
          Dim ActionType As PdfActionType = oGdPicturePDF.GetActionType(ActionId)
          MessageBox.Show("Fist bookMark Action type : " + ActionType.ToString())
       Else
          MessageBox.Show("First bookmark has no action")
       End If
    Else
       MessageBox.Show("This pdf does not have bookmarks")
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldAction(System.Int32,System.Int32)">
      <summary>
 Sets the action associated with a specified form field.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID(), AddTextFormField() or AddPushButtonFormField().</param>
      <param name="ActionID">An action ID returned by the  NewActionGoTo, NewActionGoToR, NewActionLaunch, NewActionJavaScript, NewActionNamed or NewActionURI method.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Creating a PDF with a push button form field that targets http://www.gdpicture.com" lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF()
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SelectPage(1)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontCourier)
 Dim fieldID As Integer = oGdPicturePDF.AddPushButtonFormField(1, 1, 5, 1, "Submit", "Open http://www.gdpicture.com", fontResName, 6, 255, 0, 0)
 Dim actionID As Integer = oGdPicturePDF.NewActionURI("http://www.gdpicture.com", False)
 oGdPicturePDF.SetFormFieldAction(fieldID, actionID)
 oGdPicturePDF.SaveToFile("mydocument.pdf")
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldsCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoTo(GdPicture12.PdfDestinationType,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoToR(GdPicture12.PdfDestinationType,System.String,System.Boolean,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionLaunch(System.String,System.String,System.String,GdPicture12.PdfActionLaunchOperation,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionURI(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionJavaScript(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionNamed(GdPicture12.PdfActionNamed)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetFormFieldActionID(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetAnnotationActionID(System.Int32)">
      <summary>
 Returns the action ID of a specified annotation.
 The GetActionType method should be subsequently called to determine which kind of action is associated to the annotation.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <returns>
 The  ID of the action.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetActionType(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetAnnotationAction(System.Int32,System.Int32)" />
      <example>
        <code description="Parsing annotations to find their IDs." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
    If AnnotCount = 0 Then
       MessageBox.Show("No annotations")
    Else
       Dim AnnotsActionsID As String = ""
       For x As Integer = 0 To AnnotCount - 1
          Dim ActionId As Integer = oGdPicturePDF.GetAnnotationActionID(x)
          AnnotsActionsID = AnnotsActionsID + "Annotation No " + x.ToString() + " ID : " + ActionId.ToString() + vbCrLf
       Next
       MessageBox.Show(AnnotsActionsID)
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetAnnotationAction(System.Int32,System.Int32)">
      <summary>
 Sets the action associated with a specified annotation.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <param name="ActionID">An action ID returned by the  NewActionGoTo, NewActionGoToR, NewActionLaunch, NewActionJavaScript, NewActionNamed or NewActionURI method.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Creating 2 PDF which are linked together." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 'creating pdf1.pdf
 oGdPicturePDF.NewPDF(False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim textSize As Single = 12
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SetFillColor(Color.Red)
 oGdPicturePDF.SetTextSize(textSize)
 Dim text As String = "Navigate to pdf2.pdf"
 Dim textWidth As Single = oGdPicturePDF.GetTextWidth(fontResName, textSize, text)
 Dim textHeight As Single = oGdPicturePDF.GetTextHeight(fontResName, textSize, True)
 oGdPicturePDF.DrawTextBox(fontResName, 1, 1, textWidth + 1, textHeight + 1, TextAlignment.TextAlignmentNear, TextAlignment.TextAlignmentNear, text)
 Dim annotIdx As Integer = oGdPicturePDF.AddLinkAnnotation(1, 1, textWidth, textHeight, True, 255, 0, 0)
 Dim actionID As Integer = oGdPicturePDF.NewActionGoToR(PdfDestinationType.DestinationTypeXYZ, "pdf2.pdf", False, 1, 0, 0, 0, 0, 1)
 oGdPicturePDF.SetAnnotationAction(annotIdx, actionID)
 oGdPicturePDF.SaveToFile("pdf1.pdf")
 oGdPicturePDF.CloseDocument()
 'creating pdf2.pdf
 oGdPicturePDF.NewPDF(False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 fontResName = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SetFillColor(Color.Red)
 oGdPicturePDF.SetTextSize(textSize)
 text = "Navigate to pdf1.pdf"
 textWidth = oGdPicturePDF.GetTextWidth(fontResName, textSize, text)
 oGdPicturePDF.DrawTextBox(fontResName, 1, 1, textWidth + 1, textHeight + 1, TextAlignment.TextAlignmentNear, TextAlignment.TextAlignmentNear, text)
 annotIdx = oGdPicturePDF.AddLinkAnnotation(1, 1, textWidth, textHeight, True, 255, 0, 0)
 actionID = oGdPicturePDF.NewActionGoToR(PdfDestinationType.DestinationTypeXYZ, "pdf1.pdf", False, 1, 0, 0, 0, 0, 1)
 oGdPicturePDF.SetAnnotationAction(annotIdx, actionID)
 oGdPicturePDF.SaveToFile("pdf2.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoTo(GdPicture12.PdfDestinationType,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoToR(GdPicture12.PdfDestinationType,System.String,System.Boolean,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionLaunch(System.String,System.String,System.String,GdPicture12.PdfActionLaunchOperation,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionJavaScript(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionURI(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionNamed(GdPicture12.PdfActionNamed)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationActionID(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddStickyNoteAnnotation(GdPicture12.PdfStickyNoteAnnotationIcon,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Boolean,System.Byte,System.Byte,System.Byte,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Adds a sticky-note annotation to the current page of the PDF.
 </summary>
      <param name="IconName">A member of the PdfStickyNoteAnnotationIcon enumeration. The appearance to apply.</param>
      <param name="Left">The left coordinate of the annotation icon, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The left coordinate of the annotation icon, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Author">The author of the annotation.</param>
      <param name="Subject">The subject of the annotation.</param>
      <param name="Contents">The contents of the annotation popup.</param>
      <param name="Opacity">The opacity, between 0 (full transparency) and 1 (full opacity).</param>
      <param name="OpenPopup">A flag specifying whether the annotation should initially be native open. Default value: false (closed).</param>
      <param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
      <param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
      <param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
      <param name="PopupLeft">The left coordinate of the annotation popup, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="PopupTop">The top coordinate of the annotation popup, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="PopupWidth">The width of the annotation popup, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="PopupHeight">The height coordinate of the annotation popup, in current unit defined by the SetMeasurementUnit() method.</param>
      <returns>
 -1 if fail, else the annotation index between 0 and GetAnnotationCount() -1.
 </returns>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the annotation.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Adding a yellow sticky note to the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       If oGdPicturePDF.AddStickyNoteAnnotation(PdfStickyNoteAnnotationIcon.PdfAnnotationIconComment, 30, 90, "M. Durand", "Important note", "This is a StickyNote annotation", 1, True, 255, 255, 0, 150, 90, 40, 40) = -1 Then
          MessageBox.Show("AddStickyNoteAnnotation failed")
       Else
          oGdPicturePDFSaveToFile("test_AddStickyNoteAnnotation_func.pdf")
          MessageBox.Show("Ok")
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddStampAnnotation(System.Single,System.Single,System.Single,System.Single,System.String,System.String,GdPicture12.PdfRubberStampAnnotationIcon,System.Single,System.Byte,System.Byte,System.Byte)">
      <summary>
 Adds a stamp annotation to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Title">The title of the annotation.</param>
      <param name="Contents">The content of the annotation.</param>
      <param name="StampStyle">The appearance of the stamp. A member of the PdfRubberStampAnnotationIcon
 enumeration.</param>
      <param name="Opacity">The opacity, between 0 (full transparency) and 1 (full opacity).</param>
      <param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
      <param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
      <param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
      <returns>
 -1 if fail, else the annotation index between 0 and GetAnnotationCount() -1.
 </returns>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the annotation.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Adding an approved stamp annotation to the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       If oGdPicturePDF.AddStampAnnotation(30, 90, 100, 20, "Stamp annot", "This is a stamp annotation", PdfRubberStampAnnotationIcon.Approved, 1, 0, 0, 255) = -1 Then
          MessageBox.Show("AddStampAnnotation_func failed")
       Else
          oGdPicturePDF.SaveToFile("test_AddStampAnnotation_func.pdf")
          MessageBox.Show("Ok")
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddLineAnnotation(System.Single,System.Single,System.Single,System.Single,System.String,System.String,GdPicture12.PdfAnnotationLineEndingStyle,GdPicture12.PdfAnnotationLineEndingStyle,System.Boolean,System.Single,GdPicture12.PdfAnnotationBorderStyle,System.Single,System.Single,System.Single,System.Byte,System.Byte,System.Byte)">
      <summary>
 Adds a line annotation to the current page of the PDF.
 </summary>
      <param name="StartX">The X coordinate of the starting point, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="StartY">The Y coordinate of the starting point, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstX">The X coordinate of the ending point, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstY">The Y coordinate of the ending point, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Title">The title of the annotation.</param>
      <param name="Contents">The content of the annotation.</param>
      <param name="StartCap">Defines the cap style used at the start of line drawn. A member of the PdfAnnotationLineEndingStyle enumeration.</param>
      <param name="EndCap">Defines the cap style used at the end of line drawn. A member of the PdfAnnotationLineEndingStyle enumeration.</param>
      <param name="ShowContent">(Optional; PDF 1.6) If true, the text specified by the Contents or RC entries should be replicated as a caption in the appearance of the line.
 The text should be rendered in a manner appropriate to the content, taking into account factors such as writing direction.</param>
      <param name="LineWidth">The width of the line, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="LineStyle">The style of the line. A member of the PdfAnnotationBorderStyle enumeration.</param>
      <param name="LineDashOn">If line style is dashed, defines the width of the dash pattern, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="LineDashOff">If line style is dashed, defines the between the dashes, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Opacity">The opacity, between 0 (full transparency) and 1 (full opacity).</param>
      <param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
      <param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
      <param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
      <returns>-1 if fail, else the annotation index between 0 and GetAnnotationCount() -1.</returns>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the annotation.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Add a line annotation looking like a pointing arrow on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       If oGdPicturePDF.AddLineAnnotation(30, 30, 100, 150, "Line annot", "This is a line annotation", PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleNone, PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleClosedArrow, True, 0.3, PdfAnnotationBorderStyle.PdfAnnotationBorderStyleSolid, 0, 0, 1, 255, 0, 0) = -1 Then
          MessageBox.Show("AddLineAnnotation failed")
       Else
          oGdPicturePDF.SaveToFile("test_AddLineAnnotation_func.pdf")
          MessageBox.Show("Ok")
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddCircleAnnotation(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Single,GdPicture12.PdfAnnotationBorderStyle,System.Single,System.Single,System.Single,System.Byte,System.Byte,System.Byte)">
      <summary>
 Adds a circle annotation to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Title">The title of the annotation.</param>
      <param name="Contents">The content of the annotation.</param>
      <param name="LineWidth">The width of the line, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="LineStyle">The style of the line. A member of the PdfAnnotationBorderStyle enumeration.</param>
      <param name="LineDashOn">If line style is dashed, defines the width of the dash pattern, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="LineDashOff">If line style is dashed, defines the between the dashes, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Opacity">The opacity, between 0 (full transparency) and 1 (full opacity).</param>
      <param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
      <param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
      <param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
      <returns>-1 if fail, else the annotation index between 0 and GetAnnotationCount() -1.</returns>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the annotation.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Adding a green circle annotaton on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       If oGdPicturePDF.AddCircleAnnotation(30, 60, 50, 25, "Circle annot", "This is a circle annotation", 0.3, PdfAnnotationBorderStyle.PdfAnnotationBorderStyleSolid, 0, 0, 1, 0, 255, 0) = -1 Then
          MessageBox.Show("AddCircleAnnotation failed")
       Else
          oGdPicturePDF.SaveToFile("test_AddCircleAnnotation_func.pdf")
          MessageBox.Show("Ok")
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddSquareAnnotation(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Single,GdPicture12.PdfAnnotationBorderStyle,System.Single,System.Single,System.Single,System.Byte,System.Byte,System.Byte)">
      <summary>
 Adds a square annotation to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Title">The title of the annotation.</param>
      <param name="Contents">The content of the annotation.</param>
      <param name="LineWidth">The width of the line, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="LineStyle">The style of the line. A member of the PdfAnnotationBorderStyle enumeration.</param>
      <param name="LineDashOn">If line style is dashed, defines the width of the dash pattern, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="LineDashOff">If line style is dashed, defines the between the dashes, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Opacity">The opacity, between 0 (full transparency) and 1 (full opacity).</param>
      <param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
      <param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
      <param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
      <returns>-1 if fail, else the annotation index between 0 and GetAnnotationCount() -1.</returns>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the annotation.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Add a square annotation on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       If oGdPicturePDF.AddSquareAnnotation(30, 90, 100, 20, "Line annot", "This is a square annotation", 0.3, PdfAnnotationBorderStyle.PdfAnnotationBorderStyleSolid, 0, 0, 1, 0, 0, 255) = -1 Then
          MessageBox.Show("AddSquareAnnotation failed")
       Else
          oGdPicturePDF.SaveToFile("test_AddSquareAnnotation_func.pdf")
          MessageBox.Show("Ok")
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddFreeTextAnnotation(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.String,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Single)">
      <summary>
 Adds a free text annotation to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The top coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Borders">Set true to display borders around the text, else False.</param>
      <param name="Title">The title of the annotation.</param>
      <param name="Subject">The subject of the annotation.</param>
      <param name="Contents">The content of the annotation.</param>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="FontSize">The size to use for the font.</param>
      <param name="FontColorRed">The red component value of the color of the text of the annotation, between 0 and 255.</param>
      <param name="FontColorGreen">The green component value of the color of the text of the annotation, between 0 and 255.</param>
      <param name="FontColorBlue">The blue component value of the color of the text of the annotation, between 0 and 255.</param>
      <param name="FillColorRed">The red component value of the color of the annotation, between 0 and 255.</param>
      <param name="FillColorGreen">The green component value of the color of the annotation, between 0 and 255.</param>
      <param name="FillColorBlue">The blue component value of the color of the annotation, between 0 and 255.</param>
      <param name="Opacity">The opacity value in the range 0 (full transparency) and 255 (full opacity).</param>
      <returns>-1 if fail, else the annotation index between 0 and GetAnnotationCount() -1.</returns>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the annotation.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Add a free text annotation on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim FontResName As String = oGdPicturePDF.AddTrueTypeFont("Times new Roman", False, False, False)
       If FontResName = "" Then
          MessageBox.Show("Unknown truetype system font")
       Else
          If oGdPicturePDF.AddFreeTextAnnotation(30, 90, 100, 20, true, "Free text annot title", "Free text annot subject", "This is a free text annotation", FontResName, 10,  255, 0, 0, 128, 255, 255, 255) = -1 Then
             MessageBox.Show("AddFreeTextAnnotation failed")
          Else
             oGdPicturePDF.SaveToFile("test_AddFreeTextAnnotation_func.pdf")
             MessageBox.Show("Ok")
          End If
       End if
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddFreeTextAnnotation(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.String,System.String,System.String,System.String,System.Single,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Single)">
      <summary>
 Adds a free text annotation to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Borders">Set true to display borders around the text, else False.</param>
      <param name="Title">The title of the annotation.</param>
      <param name="Subject">The subject of the annotation.</param>
      <param name="Contents">The content of the annotation.</param>
      <param name="FontResName">The Font resource name. See Fonts section to get a valid Font resource name.</param>
      <param name="FontSize">The size to use for the font.</param>
      <param name="FontColorCyan">The cyan component value of the color of the text of the annotation, between 0 and 255.</param>
      <param name="FontColorMagenta">The magenta component value of the color of the text of the annotation, between 0 and 255.</param>
      <param name="FontColorYellow">The yellow component value of the color of the text of the annotation, between 0 and 255.</param>
      <param name="FontColorBlack">The black component value of the color of the text of the annotation, between 0 and 255.</param>
      <param name="FillColorCyan">The cyan component value of the color of the annotation, between 0 and 255</param>
      <param name="FillColorMagenta">The magenta component value of the color of the annotation, between 0 and 255</param>
      <param name="FillColorYellow">The yellow component value of the color of the annotation, between 0 and 255</param>
      <param name="FillColorBlack">The black component value of the color of the annotation, between 0 and 255</param>
      <param name="Opacity">The opacity value in the range 0 (full transparency) and 255 (full opacity).</param>
      <returns>-1 if fail, else the annotation index between 0 and GetAnnotationCount() -1.</returns>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the annotation.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Add a free text annotation on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
    oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim FontResName As String = oGdPicturePDF.AddTrueTypeFont("Times new Roman", False, False, False)
       If FontResName = "" Then
          MessageBox.Show("Unknown truetype system font")
       Else
          If oGdPicturePDF.AddFreeTextAnnotation(30, 90, 100, 20, true, "Free text annot title", "Free text annot subject", "This is a free text annotation", FontResName, 10,  255, 0, 0, 128, 255, 255, 255) = -1 Then
             MessageBox.Show("AddFreeTextAnnotation failed")
          Else
             oGdPicturePDF.SaveToFile("test_AddFreeTextAnnotation_func.pdf")
             MessageBox.Show("Ok")
          End If
       End if
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddLinkAnnotation(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Byte,System.Byte,System.Byte)">
      <summary>
 Adds an "action ready" link to the current page of the PDF. An action should be subsequently applied to the created link (see snippet).
 This method uses RGB color space.
 </summary>
      <param name="Left">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Borders">Set true to display borders around the link, else False.</param>
      <param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
      <param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
      <param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
      <returns>
 -1 if fail, else the annotation index between 0 and GetAnnotationCount() -1.
 </returns>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the annotation.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
      <example>
        <code description="Creating 2 PDF which are linked together." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 'creating pdf1.pdf
 oGdPicturePDF.NewPDF(False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim textSize As Single = 12
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SetFillColor(Color.Red)
 oGdPicturePDF.SetTextSize(textSize)
 Dim text As String = "Navigate to pdf2.pdf"
 Dim textWidth As Single = oGdPicturePDF.GetTextWidth(fontResName, textSize, text)
 Dim textHeight As Single = oGdPicturePDF.GetTextHeight(fontResName, textSize, True)
 oGdPicturePDF.DrawTextBox(fontResName, 1, 1, textWidth + 1, textHeight + 1, TextAlignment.TextAlignmentNear, TextAlignment.TextAlignmentNear, text)
 Dim annotIdx As Integer = oGdPicturePDF.AddLinkAnnotation(1, 1, textWidth, textHeight, True, 255, 0, 0)
 Dim actionID As Integer = oGdPicturePDF.NewActionGoToR(PdfDestinationType.DestinationTypeXYZ, "pdf2.pdf", False, 1, 0, 0, 0, 0, 1)
 oGdPicturePDF.SetAnnotationAction(annotIdx, actionID)
 oGdPicturePDF.SaveToFile("pdf1.pdf")
 oGdPicturePDF.CloseDocument()
 'creating pdf2.pdf
 oGdPicturePDF.NewPDF(False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 fontResName = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SetFillColor(Color.Red)
 oGdPicturePDF.SetTextSize(textSize)
 text = "Navigate to pdf1.pdf"
 textWidth = oGdPicturePDF.GetTextWidth(fontResName, textSize, text)
 oGdPicturePDF.DrawTextBox(fontResName, 1, 1, textWidth + 1, textHeight + 1, TextAlignment.TextAlignmentNear, TextAlignment.TextAlignmentNear, text)
 annotIdx = oGdPicturePDF.AddLinkAnnotation(1, 1, textWidth, textHeight, True, 255, 0, 0)
 actionID = oGdPicturePDF.NewActionGoToR(PdfDestinationType.DestinationTypeXYZ, "pdf1.pdf", False, 1, 0, 0, 0, 0, 1)
 oGdPicturePDF.SetAnnotationAction(annotIdx, actionID)
 oGdPicturePDF.SaveToFile("pdf2.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoTo(GdPicture12.PdfDestinationType,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoToR(GdPicture12.PdfDestinationType,System.String,System.Boolean,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionLaunch(System.String,System.String,System.String,GdPicture12.PdfActionLaunchOperation,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionJavaScript(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionURI(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionNamed(GdPicture12.PdfActionNamed)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddLinkAnnotation(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Adds an "action ready" link to the current page of the PDF. An action should be subsequently applied to the created link (see snippet).
 This method uses CMYK color space.
 </summary>
      <param name="Left">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Borders">Set true to display borders around the link, else False.</param>
      <param name="Cyan">The amount of Cyan color between 0 and 255.</param>
      <param name="Magenta">The amount of Magenta color between 0 and 255.</param>
      <param name="Yellow">The amount of Yellow color between 0 and 255.</param>
      <param name="Black">The amount of Black (key) color between 0 and 255.</param>
      <returns>
 -1 if fail, else the annotation index between 0 and GetAnnotationCount() -1.
 </returns>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the annotation.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
      <example>
        <code description="Creating 2 PDF which are linked together." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 'creating pdf1.pdf
 oGdPicturePDF.NewPDF(False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim textSize As Single = 12
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SetFillColor(Color.Red)
 oGdPicturePDF.SetTextSize(textSize)
 Dim text As String = "Navigate to pdf2.pdf"
 Dim textWidth As Single = oGdPicturePDF.GetTextWidth(fontResName, textSize, text)
 Dim textHeight As Single = oGdPicturePDF.GetTextHeight(fontResName, textSize, True)
 oGdPicturePDF.DrawTextBox(fontResName, 1, 1, textWidth + 1, textHeight + 1, TextAlignment.TextAlignmentNear, TextAlignment.TextAlignmentNear, text)
 Dim annotIdx As Integer = oGdPicturePDF.AddLinkAnnotation(1, 1, textWidth, textHeight, True, 255, 0, 0)
 Dim actionID As Integer = oGdPicturePDF.NewActionGoToR(PdfDestinationType.DestinationTypeXYZ, "pdf2.pdf", False, 1, 0, 0, 0, 0, 1)
 oGdPicturePDF.SetAnnotationAction(annotIdx, actionID)
 oGdPicturePDF.SaveToFile("pdf1.pdf")
 oGdPicturePDF.CloseDocument()
 'creating pdf2.pdf
 oGdPicturePDF.NewPDF(False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 fontResName = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SetFillColor(Color.Red)
 oGdPicturePDF.SetTextSize(textSize)
 text = "Navigate to pdf1.pdf"
 textWidth = oGdPicturePDF.GetTextWidth(fontResName, textSize, text)
 oGdPicturePDF.DrawTextBox(fontResName, 1, 1, textWidth + 1, textHeight + 1, TextAlignment.TextAlignmentNear, TextAlignment.TextAlignmentNear, text)
 annotIdx = oGdPicturePDF.AddLinkAnnotation(1, 1, textWidth, textHeight, True, 255, 0, 0)
 actionID = oGdPicturePDF.NewActionGoToR(PdfDestinationType.DestinationTypeXYZ, "pdf1.pdf", False, 1, 0, 0, 0, 0, 1)
 oGdPicturePDF.SetAnnotationAction(annotIdx, actionID)
 oGdPicturePDF.SaveToFile("pdf2.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoTo(GdPicture12.PdfDestinationType,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoToR(GdPicture12.PdfDestinationType,System.String,System.Boolean,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionLaunch(System.String,System.String,System.String,GdPicture12.PdfActionLaunchOperation,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionJavaScript(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionURI(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionNamed(GdPicture12.PdfActionNamed)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddLinkAnnotation(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Drawing.Color)">
      <summary>
 Adds an "action ready" link to the current page of the PDF. An action should be subsequently applied to the created link (see snippet).
 This method uses RGB color space.
 </summary>
      <param name="Left">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Borders">Set true to display borders around the link, else False.</param>
      <param name="Color">The color of the link borders, if any.</param>
      <returns>
 -1 if fail, else the annotation index between 0 and GetAnnotationCount() -1.
 </returns>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the annotation.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
      <example>
        <code description="Creating 2 PDF which are linked together." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 'creating pdf1.pdf
 oGdPicturePDF.NewPDF(False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim textSize As Single = 12
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SetFillColor(Color.Red)
 oGdPicturePDF.SetTextSize(textSize)
 Dim text As String = "Navigate to pdf2.pdf"
 Dim textWidth As Single = oGdPicturePDF.GetTextWidth(fontResName, textSize, text)
 Dim textHeight As Single = oGdPicturePDF.GetTextHeight(fontResName, textSize, True)
 oGdPicturePDF.DrawTextBox(fontResName, 1, 1, textWidth + 1, textHeight + 1, TextAlignment.TextAlignmentNear, TextAlignment.TextAlignmentNear, text)
 Dim annotIdx As Integer = oGdPicturePDF.AddLinkAnnotation(1, 1, textWidth, textHeight, True, 255, 0, 0)
 Dim actionID As Integer = oGdPicturePDF.NewActionGoToR(PdfDestinationType.DestinationTypeXYZ, "pdf2.pdf", False, 1, 0, 0, 0, 0, 1)
 oGdPicturePDF.SetAnnotationAction(annotIdx, actionID)
 oGdPicturePDF.SaveToFile("pdf1.pdf")
 oGdPicturePDF.CloseDocument()
 'creating pdf2.pdf
 oGdPicturePDF.NewPDF(False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 fontResName = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SetFillColor(Color.Red)
 oGdPicturePDF.SetTextSize(textSize)
 text = "Navigate to pdf1.pdf"
 textWidth = oGdPicturePDF.GetTextWidth(fontResName, textSize, text)
 oGdPicturePDF.DrawTextBox(fontResName, 1, 1, textWidth + 1, textHeight + 1, TextAlignment.TextAlignmentNear, TextAlignment.TextAlignmentNear, text)
 annotIdx = oGdPicturePDF.AddLinkAnnotation(1, 1, textWidth, textHeight, True, 255, 0, 0)
 actionID = oGdPicturePDF.NewActionGoToR(PdfDestinationType.DestinationTypeXYZ, "pdf1.pdf", False, 1, 0, 0, 0, 0, 1)
 oGdPicturePDF.SetAnnotationAction(annotIdx, actionID)
 oGdPicturePDF.SaveToFile("pdf2.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoTo(GdPicture12.PdfDestinationType,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionGoToR(GdPicture12.PdfDestinationType,System.String,System.Boolean,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionLaunch(System.String,System.String,System.String,GdPicture12.PdfActionLaunchOperation,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionJavaScript(System.String)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionURI(System.String,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPicturePDF.NewActionNamed(GdPicture12.PdfActionNamed)" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddLinkToWebAnnotation(System.Single,System.Single,System.Single,System.Single,System.String,System.Boolean,System.Byte,System.Byte,System.Byte)">
      <summary>
 Adds a link to web annotation to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="URI">The uniform resource identifier to resolve, encoded in 7-bit ASCII. IE: http://www.gdpicture.com.</param>
      <param name="Borders">Set true to display borders around the link, else False.</param>
      <param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
      <param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
      <param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
      <returns>
 -1 if fail, else the annotation index between 0 and GetAnnotationCount() -1.
 </returns>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the annotation.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Create a new pdf, and then add a link to web annotation on the first page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF(False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim textSize As Single = 12
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SetFillColor(Color.Red)
 oGdPicturePDF.SetTextSize(textSize)
 Dim text As String = "Navigate to www.gdpicture.com"
 Dim textWidth As Single = oGdPicturePDF.GetTextWidth(fontResName, textSize, text)
 Dim textHeight As Single = oGdPicturePDF.GetTextHeight(fontResName, textSize, True)
 oGdPicturePDF.DrawTextBox(fontResName, 1, 1, textWidth + 1, textHeight + 1, TextAlignment.TextAlignmentNear, TextAlignment.TextAlignmentNear, text)
 Dim annotIdx As Integer = oGdPicturePDF.AddLinkToWebAnnotation(1, 1, textWidth, textHeight, "www.gdpicture.com", True, 0, 0, 255)
 oGdPicturePDF.SaveToFile("test_AddLinkToWebAnnotation.pdf")
 MessageBox.Show("Ok")
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddLinkToPageAnnotation(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean,System.Byte,System.Byte,System.Byte)">
      <summary>
 Adds a link to page annotation to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="PageNum">The page destination of the link. Must be a value between 1 and
 GetPageCount().</param>
      <param name="DstLeft">The left coordinate of the link destination, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="DstTop">The top coordinate of the link destination, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Borders">Set true to display borders around the link, else False.</param>
      <param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
      <param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
      <param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
      <returns>
 -1 if fail, else the annotation index between 0 and GetAnnotationCount() -1.
 </returns>
      <remarks>
        <para>
 Do not forget to select the page using the SelectPage() method before adding the annotation.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Create a new pdf, add two pages, then create a link to page annotation on each page." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 oGdPicturePDF.NewPDF(False)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontHelvetica)
 Dim textSize As Single = 12
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.NewPage(21, 29.7)
 oGdPicturePDF.SelectPage(1)
 oGdPicturePDF.SetFillColor(Color.Red)
 oGdPicturePDF.SetTextSize(textSize)
 Dim text As String = "Goto page 2"
 Dim textWidth As Single = oGdPicturePDF.GetTextWidth(fontResName, textSize, text)
 Dim textHeight As Single = oGdPicturePDF.GetTextHeight(fontResName, textSize, True)
 oGdPicturePDF.DrawTextBox(fontResName, 1, 1, textWidth + 1, textHeight + 1, TextAlignment.TextAlignmentNear, TextAlignment.TextAlignmentNear, text)
 Dim annotIdx As Integer = oGdPicturePDF.AddLinkToPageAnnotation(1, 1, textWidth, textHeight, 2, 1, 1, True, 0, 0, 255)
 oGdPicturePDF.SelectPage(2)
 text = "Goto page 1"
 oGdPicturePDF.SetFillColor(Color.Cyan)
 textWidth = oGdPicturePDF.GetTextWidth(fontResName, textSize, text)
 textHeight = oGdPicturePDF.GetTextHeight(fontResName, textSize, True)
 oGdPicturePDF.DrawTextBox(fontResName, 1, 1, textWidth + 1, textHeight + 1, TextAlignment.TextAlignmentNear, TextAlignment.TextAlignmentNear, text)
 annotIdx = oGdPicturePDF.AddLinkToPageAnnotation(1, 1, textWidth, textHeight, 1, 1, 1, True, 0, 0, 255)
 oGdPicturePDF.SaveToFile("test_AddLinkToPageAnnotation.pdf")
 MessageBox.Show("Ok")
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddFileAttachmentAnnot(System.Single,System.Single,System.Single,System.Single,System.Byte[],System.String,System.String,System.String,System.Byte,System.Byte,System.Byte,System.Single,GdPicture12.PdfFileAttachmentAnnotIcon)">
      <summary>
 Adds a file attachment annotation to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Data">The binary content of the file.</param>
      <param name="FileName">Specifies the name of the file.</param>
      <param name="Title">The title of the annotation.</param>
      <param name="Description">The description of the file.</param>
      <param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
      <param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
      <param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
      <param name="Opacity">The opacity, between 0 (full transparency) and 1 (full opacity).</param>
      <param name="AnnotIcon">The icon to be shown. A member of the PdfFileAttachmentAnnotIcon enumeration.</param>
      <returns>-1 if fail, else the annotation index between 0 and GetAnnotationCount() -1.</returns>
      <remarks>
        <para>Do not forget to select the page using the SelectPage() method before adding the annotation.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddFileAttachmentAnnot(System.Single,System.Single,System.Single,System.Single,System.Byte[],System.String,System.String,System.String,System.Byte,System.Byte,System.Byte,System.Byte,System.Single,GdPicture12.PdfFileAttachmentAnnotIcon)">
      <summary>
 Adds a file attachment annotation to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Data">The binary content of the file.</param>
      <param name="FileName">Specifies the name of the file.</param>
      <param name="Title">The title of the annotation.</param>
      <param name="Description">The description of the file.</param>
      <param name="Cyan">The amount of Cyan color between 0 and 255.</param>
      <param name="Magenta">The amount of Magenta color between 0 and 255.</param>
      <param name="Yellow">The amount of Yellow color between 0 and 255.</param>
      <param name="Black">The amount of Black (key) color between 0 and 255.</param>
      <param name="Opacity">The opacity, between 0 (full transparency) and 1 (full opacity).</param>
      <param name="AnnotIcon">The icon to be shown. A member of the PdfFileAttachmentAnnotIcon enumeration.</param>
      <returns>-1 if fail, else the annotation index between 0 and GetAnnotationCount() -1.</returns>
      <remarks>
        <para>Do not forget to select the page using the SelectPage() method before adding the annotation.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.AddFileAttachmentAnnot(System.Single,System.Single,System.Single,System.Single,System.Byte[],System.String,System.String,System.String,System.Drawing.Color,System.Single,GdPicture12.PdfFileAttachmentAnnotIcon)">
      <summary>
 Adds a file attachment annotation to the current page of the PDF.
 </summary>
      <param name="Left">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The left coordinate of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the annotation, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Data">The binary content of the file.</param>
      <param name="FileName">Specifies the name of the file.</param>
      <param name="Title">The title of the annotation.</param>
      <param name="Description">The description of the file.</param>
      <param name="Color">The annoation color.</param>
      <param name="Opacity">The opacity, between 0 (full transparency) and 1 (full opacity).</param>
      <param name="AnnotIcon">The icon to be shown. A member of the PdfFileAttachmentAnnotIcon enumeration.</param>
      <returns>-1 if fail, else the annotation index between 0 and GetAnnotationCount() -1.</returns>
      <remarks>
        <para>Do not forget to select the page using the SelectPage() method before adding the annotation.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetAnnotationCount">
      <summary>
 Returns the number of annotations available on the current page.
 </summary>
      <returns>The number of annotations available on the current page.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Retrieving the number of annotations available on the current page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          MessageBox.Show("Annotations count : " + AnnotCount.ToString)
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.RemoveAnnotation(System.Int32)">
      <summary>
 Removes an annotation from the current page of the PDF.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Removing all annotations on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim Ok As Boolean = True
          For x As Integer = AnnotCount - 1 To 0 Step -1
             status = oGdPicturePDF.RemoveAnnotation(x)
             If status &lt;&gt; GdPictureStatus.OK Then
                MessageBox.Show("Annotation no  " + x.ToString() + " removal failed. status : " + status.ToString())
                Ok = False
             End If
          Next
          If Ok Then
             MessageBox.Show("Annotations removed")
             oGdPicturePDF.SaveToFile("test_RemoveAnnotation_func.pdf")
          End If
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetAnnotationFlags(System.Int32)">
      <summary>
 Gets the flags of a specific annotation of the current page.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <returns>A combination of items of the PdfAnnotationFlag enumeration.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Retrieving the flags of the first annotation of the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim AnnotFlag As PdfAnnotationFlag = oGdPicturePDF.GetAnnotationFlags(0)
          MessageBox.Show("Flags : " + AnnotFlag.ToString())
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetAnnotationFlags(System.Int32,GdPicture12.PdfAnnotationFlag)">
      <summary>
 Changes the flags of a specific annotation of the current page.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <param name="Flags">A combination of items of the PdfAnnotationFlag enumeration.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Ensuring all annotations of the first page of a PDF will be printed." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim Ok As Boolean = True
          For x As Integer = 0 To AnnotCount - 1
             Dim OldFlags As PdfAnnotationFlag = oGdPicturePDF.GetAnnotationFlags(x)
             status = oGdPicturePDF.SetAnnotationFlags(x, OldFlags Or PdfAnnotationFlag.PdfAnnotationFlagPrint)
             If status &lt;&gt; GdPictureStatus.OK Then
                MessageBox.Show("Annotation no  " + x.ToString() + " SetAnnotationFlags failed. status : " + status.ToString())
                Ok = False
             End If
          Next
          If Ok Then
             MessageBox.Show("Annotations flag changed")
             oGdPicturePDF.SaveToFile("test_SetAnnotationFlags_func.pdf")
          End If
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetAnnotationContents(System.Int32)">
      <summary>
 Gets the contents of a specific annotation of the current page.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <returns>The annotation content.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Retrievinf annotation contents of the first annotation of the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim AnnotContents As String = oGdPicturePDF.GetAnnotationContents(0)
          MessageBox.Show("Contents : " + AnnotContents)
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetAnnotationContents(System.Int32,System.String)">
      <summary>
 Sets the contents of a specific annotation of the current page.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <param name="Contents">The new content.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Changing the annotations contents of the first page of a PDF ." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim Ok As Boolean = True
          For x As Integer = 0 To AnnotCount - 1
             status = oGdPicturePDF.SetAnnotationContents(x, "Annot No " + x.ToString())
             If status &lt;&gt; GdPictureStatus.OK Then
                MessageBox.Show("Annotation no  " + x.ToString() + " SetAnnotationContent failed. status : " + status.ToString())
                Ok = False
             End If
          Next
          If Ok Then
             MessageBox.Show("Annotations content changed")
             oGdPicturePDF.SaveToFile("test_SetAnnotationContents_func.pdf")
          End If
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetAnnotationType(System.Int32)">
      <summary>
 Gets the type of a specific annotation of the current page.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <returns>
 The type of the annotation. IE: Line, Stamp, Circle...
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Retrieving the type of the first annotation of the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim AnnotType As String = oGdPicturePDF.GetAnnotationType(0)
          MessageBox.Show("Type : " + AnnotType)
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetAnnotationSubType(System.Int32)">
      <summary>
 Gets the subtype of a specific annotation of the current page.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <returns>The annotation subtype. IE: Widget.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Retrieving the subtype of the first annotation of the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim AnnotSubType As String = oGdPicturePDF.GetAnnotationSubType(0)
          MessageBox.Show("Subtype : " + AnnotSubType)
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetAnnotationRect(System.Int32,System.Single@,System.Single@,System.Single@,System.Single@)">
      <summary>
 Gets the bounding box of a specific annotation of the current page.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <param name="Left">Return the left coordinates of the annotation bounding box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">Return the left coordinates of the annotation bounding box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">Return the width of the annotation bounding box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">Return the height of the annotation bounding box, in current unit defined by the SetMeasurementUnit() method.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Retrieving the rectangle of the first annotation of the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim Left, Top, Width, Height As Single
          status = oGdPicturePDF.GetAnnotationRect(0, Left, Top, Width, Height)
          If status &lt;&gt; GdPictureStatus.OK Then
             MessageBox.Show("GetAnnotationRect Failed")
          Else
             MessageBox.Show("Rect : (" + Left.ToString() + "*" + Top.ToString() + ")-(" + Width.ToString() + "*" + Height.ToString() + ")")
          End If
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetAnnotationRect(System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Sets the bounding box of a specific annotation of the current page.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <param name="Left">The left coordinates of the annotation bounding box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Top">The left coordinates of the annotation bounding box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Width">The width of the annotation bounding box, in current unit defined by the SetMeasurementUnit() method.</param>
      <param name="Height">The height of the annotation bounding box, in current unit defined by the SetMeasurementUnit() method.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Resizing all first page's annotations to be twice large in their height." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim Ok As Boolean = True
          For x As Integer = 0 To AnnotCount - 1
             Dim Left, Top, Width, Height As Single
             oGdPicturePDF.GetAnnotationRect(x, Left, Top, Width, Height)
             Height = Height * 2
             status = oGdPicturePDF.SetAnnotationRect(x, Left, Top, Width, Height)
             If status &lt;&gt; GdPictureStatus.OK Then
                MessageBox.Show("Annotation no  " + x.ToString() + " SetAnnotationRect failed. status : " + status.ToString())
                Ok = False
             End If
          Next
          If Ok Then
             MessageBox.Show("Annotations rect changed")
             oGdPicturePDF.SaveToFile("test_SetAnnotationRect_func.pdf")
          End If
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetAnnotationReadOnly(System.Int32,System.Boolean)">
      <summary>
 Sets the read-only state of a specific annotation of the PDF.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <param name="ROnly">True to set the annotation to read only, False otherwise.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetAnnotationReadOnly(System.Int32)">
      <summary>
 Gets the read-only state of a specific annotation of the PDF.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <returns>True to set the annotation to read only, False otherwise.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetAnnotationColor(System.Int32)">
      <summary>
 Gets the color entry of a specific annotation of the current page. The color is used for the following purposes:
 <para>The background of the annotation's icon when closed.</para><para>The title bar of the annotation's pop-up window.</para><para>The border of a link annotation.</para></summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <returns>
 The annotation color.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Retrieving the color of the first annotation of the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount = oGdPicturePDF.GetAnnotationCount
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim AnnotColor As Color = oGdPicturePDF.GetAnnotationColor(0)
          MessageBox.Show("Color : " + AnnotColor.ToString())
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetAnnotationFillColor(System.Int32)">
      <summary>
 Gets the interior color entry of a specific annotation of the current page. The color is used for the following purposes:
 <para>To specify the interior color with which to fill the annotation’s rectangle or ellipse.</para><para>To specify the interior color with which to fill the annotation’s line endings.</para></summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <returns>
 The annotation interior color.
 </returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Retrieving the color of the first annotation of the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount = oGdPicturePDF.GetAnnotationCount
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim AnnotColor As Color = oGdPicturePDF.GetAnnotationColor(0)
          MessageBox.Show("Color : " + AnnotColor.ToString())
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetAnnotationColor(System.Int32,System.Byte,System.Byte,System.Byte)">
      <summary>
 Sets the color of a specific annotation of the current page. The color is used for the following purposes:
 <para>The background of the annotation's icon when closed.</para><para>The title bar of the annotation's pop-up window.</para><para>The border of a link annotation.</para></summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
      <param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
      <param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Setting the colors of all the annotations on the first page of a PDF using the red, gree, and blue channels." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim Ok As Boolean = True
          For x As Integer = 0 To AnnotCount - 1
             status = oGdPicturePDF.SetAnnotationColor(x, 255, 0, 0)
             If status &lt;&gt; GdPictureStatus.OK Then
                MessageBox.Show("Annotation no  " + x.ToString() + " SetAnnotationColor failed. status : " + status.ToString())
                Ok = False
             End If
          Next
          If Ok Then
             MessageBox.Show("Annotations' colors changed")
             oGdPicturePDF.SaveToFile("test_SetAnnotationColor_func_1.pdf")
          End If
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetAnnotationColor(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Sets the color of a specific annotation of the current page. The color is used for the following purposes:
 <para>The background of the annotation's icon when closed.</para><para>The title bar of the annotation's pop-up window.</para><para>The border of a link annotation.</para></summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <param name="Cyan">The amount of Cyan color between 0 and 255.</param>
      <param name="Magenta">The amount of Magenta color between 0 and 255.</param>
      <param name="Yellow">The amount of Yellow color between 0 and 255.</param>
      <param name="Black">The amount of Black (key) color between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Setting the colors of all the annotations on the first page of a PDF using the cyan, magneta, yellow, and black channels." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim Ok As Boolean = True
          For x As Integer = 0 To AnnotCount - 1
             status = oGdPicturePDF.SetAnnotationColor(x, 128, 255, 0, 0)
             If status &lt;&gt; GdPictureStatus.OK Then
                MessageBox.Show("Annotation no  " + x.ToString() + " SetAnnotationColor failed. status : " + status.ToString())
                Ok = False
             End If
          Next
          If Ok Then
             MessageBox.Show("Annotations' colors changed")
             oGdPicturePDF.SaveToFile("test_SetAnnotationColor_func_2.pdf")
          End If
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetAnnotationColor(System.Int32,System.Drawing.Color)">
      <summary>
 Sets the color of a specific annotation of the current page. The color is used for the following purposes:
 <para>The background of the annotation's icon when closed.</para><para>The title bar of the annotation's pop-up window.</para><para>The border of a link annotation.</para></summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <param name="Color">The annotation color.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Seting the colors of all the annotations on the first page of a PDF using a color object." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim Ok As Boolean = True
          Dim AppliedColor As Color = Color.GreenYellow
          For x As Integer = 0 To AnnotCount - 1
             status = oGdPicturePDF.SetAnnotationColor(x, AppliedColor)
             If status &lt;&gt; GdPictureStatus.OK Then
                MessageBox.Show("Annotation no  " + x.ToString() + " SetAnnotationColor failed. status : " + status.ToString())
                Ok = False
             End If
          Next
          If Ok Then
             MessageBox.Show("Annotations' colors changed")
             oGdPicturePDF.SaveToFile("test_SetAnnotationColor_func_3.pdf")
          End If
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetAnnotationFillColor(System.Int32,System.Byte,System.Byte,System.Byte)">
      <summary>
 Sets the interior color of a specific annotation of the current page. the interior color is used for the following purposes:
 <para>To specify the interior color with which to fill the annotation’s rectangle or ellipse.</para><para>To specify the interior color with which to fill the annotation’s line endings.</para></summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <param name="Red">The red component value of the interior color of the annotation, between 0 and 255.</param>
      <param name="Green">The green component value of the interior color of the annotation, between 0 and 255.</param>
      <param name="Blue">The blue component value of the interior color of the annotation, between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Setting the interior colors of all the annotations on the first page of a PDF using the red, gree, and blue channels." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim Ok As Boolean = True
          For x As Integer = 0 To AnnotCount - 1
             status = oGdPicturePDF.SetAnnotationFillColor(x, 255, 0, 0)
             If status &lt;&gt; GdPictureStatus.OK Then
                MessageBox.Show("Annotation no  " + x.ToString() + " SetAnnotationFillColor failed. status : " + status.ToString())
                Ok = False
             End If
          Next
          If Ok Then
             MessageBox.Show("Annotations' colors changed")
             oGdPicturePDF.SaveToFile("test_SetAnnotationFillColor_func_1.pdf")
          End If
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetAnnotationFillColor(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Sets the interior color of a specific annotation of the current page. the interior color is used for the following purposes:
 <para>To specify the interior color with which to fill the annotation’s rectangle or ellipse.</para><para>To specify the interior color with which to fill the annotation’s line endings.</para></summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <param name="Cyan">The amount of Cyan color between 0 and 255.</param>
      <param name="Magenta">The amount of Magenta color between 0 and 255.</param>
      <param name="Yellow">The amount of Yellow color between 0 and 255.</param>
      <param name="Black">The amount of Black (key) color between 0 and 255.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Setting the interior colors of all the annotations on the first page of a PDF using the cyan, magneta, yellow, and black channels." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim Ok As Boolean = True
          For x As Integer = 0 To AnnotCount - 1
             status = oGdPicturePDF.SetAnnotationFillColor(x, 128, 255, 0, 0)
             If status &lt;&gt; GdPictureStatus.OK Then
                MessageBox.Show("Annotation no  " + x.ToString() + " SetAnnotationFillColor failed. status : " + status.ToString())
                Ok = False
             End If
          Next
          If Ok Then
             MessageBox.Show("Annotations' colors changed")
             oGdPicturePDF.SaveToFile("test_SetAnnotationFillColor_func_2.pdf")
          End If
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetAnnotationFillColor(System.Int32,System.Drawing.Color)">
      <summary>
 Sets the interior color of a specific annotation of the current page. the interior color is used for the following purposes:
 <para>To specify the interior color with which to fill the annotation’s rectangle or ellipse.</para><para>To specify the interior color with which to fill the annotation’s line endings.</para></summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <param name="Color">The annotation intertior color.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Seting the interior colors of all the annotations on the first page of a PDF using a color object." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim Ok As Boolean = True
          Dim AppliedColor As Color = Color.GreenYellow
          For x As Integer = 0 To AnnotCount - 1
             status = oGdPicturePDF.SetAnnotationFillColor(x, AppliedColor)
             If status &lt;&gt; GdPictureStatus.OK Then
                MessageBox.Show("Annotation no  " + x.ToString() + " SetAnnotationFillColor failed. status : " + status.ToString())
                Ok = False
             End If
          Next
          If Ok Then
             MessageBox.Show("Annotations' colors changed")
             oGdPicturePDF.SaveToFile("test_SetAnnotationFillColor_func_3.pdf")
          End If
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetAnnotationTitle(System.Int32)">
      <summary>
 Gets the title of a specific annotation of the current page.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <returns>The title of the annotation.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Retrieving the title of the first annotation on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim AnnotTitle As String = oGdPicturePDF.GetAnnotationTitle(0)
          MessageBox.Show("Title : " + AnnotTitle)
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetAnnotationTitle(System.Int32,System.String)">
      <summary>
 Sets the title of a specific annotation of the current page.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <param name="Title">The title of the annotation.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Changing the titles of all the annotations on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf don't have first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf don't have annotations")
       Else
          Dim Ok As Boolean = True
          For x As Integer = 0 To AnnotCount - 1
             status = oGdPicturePDF.SetAnnotationTitle(x, "Title " + x.ToString())
             If status &lt;&gt; GdPictureStatus.OK Then
                MessageBox.Show("Annotation n° " + x.ToString() + " SetAnnotationTitle failed. status : " + status.ToString())
                Ok = False
             End If
          Next
          If Ok Then
             MessageBox.Show("Annotations title changed")
             status = oGdPicturePDF.SaveToFile("test_SetAnnotationTitle_Func.pdf")
          End If
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetAnnotationOpacity(System.Int32)">
      <summary>
 Gets the opacity value of a specific annotation of the current page.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <returns>The opacity value in the range 0 (full transparency) and 255 (full opacity).</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.SetAnnotationOpacity(System.Int32,System.Byte)" />
      <example>
        <code description="Retrieving the opacity of the first annotation on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim AnnotOpacity As Byte = oGdPicturePDF.GetAnnotationOpacity(0)
          MessageBox.Show("Opacity : " + AnnotOpacity.ToString())
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetAnnotationOpacity(System.Int32,System.Byte)">
      <summary>
 Gets the opacity value of a specific annotation of the current page.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <param name="Opacity">The opacity value in the range 0 (full transparency) and 255 (full opacity).</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationOpacity(System.Int32)" />
      <example>
        <code description="Setting the opacity of all first page's annotations to half the range." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim Ok As Boolean = True
          For x As Integer = 0 To AnnotCount - 1
             status = oGdPicturePDF.SetAnnotationOpacity(x, 128)
             If status &lt;&gt; GdPictureStatus.OK Then
                MessageBox.Show("Annotation no  " + x.ToString() + " SetAnnotationOpacity failed. status : " + status.ToString())
                Ok = False
             End If
          Next
          If Ok Then
             MessageBox.Show("Annotations opacity changed")
             oGdPicturePDF.SaveToFile("test_SetAnnotationOpacity_func.pdf")
          End If
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetAnnotationSubject(System.Int32)">
      <summary>
 Gets the subject of a specific annotation of the current page.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <returns>The subjct of the annotation.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Retrieving the subject of the first annotation on the first page of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim AnnotSubject As String = oGdPicturePDF.GetAnnotationSubject(0)
          MessageBox.Show("Suject : " + AnnotSubject)
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetAnnotationSubject(System.Int32,System.String)">
      <summary>
 Sets the subject of a specific annotation of the current page.
 </summary>
      <param name="AnnotationIdx">The annotation index between 0 and GetAnnotationCount() -1.</param>
      <param name="Subject">The annotation subject.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.GetAnnotationCount" />
      <example>
        <code description="Changing the subjects of all first page's annotations." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    status = oGdPicturePDF.SelectPage(1)
    If status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("This pdf does not have a first page", "Error")
    Else
       Dim AnnotCount As Integer = oGdPicturePDF.GetAnnotationCount()
       If AnnotCount = 0 Then
          MessageBox.Show("This pdf does not have annotations")
       Else
          Dim Ok As Boolean = True
          For x As Integer = 0 To AnnotCount - 1
             status = oGdPicturePDF.SetAnnotationSubject(x, "Subject " + x.ToString())
             If status &lt;&gt; GdPictureStatus.OK Then
                MessageBox.Show("Annotation no " + x.ToString() + " SetAnnotationSubject failed. status : " + status.ToString())
                Ok = False
             End If
          Next
          If Ok Then
             MessageBox.Show("Annotations subject changed")
             oGdPicturePDF.SaveToFile("test_SetAnnotationSubject_func.pdf")
          End If
       End If
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFileAttachmentAnnotEmbeddedFile(System.Int32,System.Byte[]@)">
      <summary>
 Gets the content the file embedded into the specified annotation.
 </summary>
      <param name="AnnotationIdx">The annotation index(0-based). Must be a value between 0 and GetAnnotationCount() -1.</param>
      <param name="Data">Output parameter. An array of byte containing the embedded file data.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Extracting the embedded file in the FileAttachment Annots" lang="C#">
 GdPicturePDF gdPicturePDF = New GdPicturePDF();
 gdPicturePDF.LoadFromFile(MyFileName, false);
 gdPicturePDF.SelectPage(1);
 int AnnotCount = gdPicturePDF.GetAnnotationCount();
 For (int X = 0; X &lt; AnnotCount; X++)
 {
     String Subtype = gdPicturePDF.GetAnnotationSubType(X);
     If (Subtype == "FileAttachment")
     {
         Byte[] data = New Byte[0];
         gdPicturePDF.GetFileAttachmentAnnotEmbeddedFile(X, ref data);
         String FileName = gdPicturePDF.GetFileAttachmentAnnotFileName(X);
         int FileSize = gdPicturePDF.GetFileAttachmentAnnotFileSize(X);
         Using (Stream file = File.OpenWrite(FileName))
         {
             file.Write(data, 0, FileSize);
         }
     }
 }
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFileAttachmentAnnotCreationDate(System.Int32)">
      <summary>
 Gets the creation date of the file embedded into the specified annotation.
 </summary>
      <param name="AnnotationIdx">The annotation index(0-based). Must be a value between 0 and GetAnnotationCount() -1.</param>
      <returns>The embedded file creation date.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Extracting the embedded file in the FileAttachment Annots" lang="C#">
 GdPicturePDF gdPicturePDF = New GdPicturePDF();
 gdPicturePDF.LoadFromFile(MyFileName, false);
 gdPicturePDF.SelectPage(1);
 int AnnotCount = gdPicturePDF.GetAnnotationCount();
 For (int X = 0; X &lt; AnnotCount; X++)
 {
     String Subtype = gdPicturePDF.GetAnnotationSubType(X);
     If (Subtype == "FileAttachment")
     {
         Byte[] data = New Byte[0];
         gdPicturePDF.GetFileAttachmentAnnotEmbeddedFile(X, ref data);
         String FileName = gdPicturePDF.GetFileAttachmentAnnotFileName(X);
         int FileSize = gdPicturePDF.GetFileAttachmentAnnotFileSize(X);
         Using (Stream file = File.OpenWrite(FileName))
         {
             file.Write(data, 0, FileSize);
         }
     }
 }
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFileAttachmentAnnotFileDescription(System.Int32)">
      <summary>
 Gets the description of the file embedded into the specified annotation.
 </summary>
      <param name="AnnotationIdx">The annotation index(0-based). Must be a value between 0 and GetAnnotationCount() -1.</param>
      <returns>The embedded file description.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Extracting the embedded file in the FileAttachment Annots" lang="C#">
 GdPicturePDF gdPicturePDF = New GdPicturePDF();
 gdPicturePDF.LoadFromFile(MyFileName, false);
 gdPicturePDF.SelectPage(1);
 int AnnotCount = gdPicturePDF.GetAnnotationCount();
 For (int X = 0; X &lt; AnnotCount; X++)
 {
     String Subtype = gdPicturePDF.GetAnnotationSubType(X);
     If (Subtype == "FileAttachment")
     {
         Byte[] data = New Byte[0];
         gdPicturePDF.GetFileAttachmentAnnotEmbeddedFile(X, ref data);
         String FileName = gdPicturePDF.GetFileAttachmentAnnotFileName(X);
         int FileSize = gdPicturePDF.GetFileAttachmentAnnotFileSize(X);
         Using (Stream file = File.OpenWrite(FileName))
         {
             file.Write(data, 0, FileSize);
         }
     }
 }
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFileAttachmentAnnotModificationDate(System.Int32)">
      <summary>
 Gets the modification date of the file embedded into the specified annotation.
 </summary>
      <param name="AnnotationIdx">The annotation index(0-based). Must be a value between 0 and GetAnnotationCount() -1.</param>
      <returns>The embedded file modification date.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Extracting the embedded file in the FileAttachment Annots" lang="C#">
 GdPicturePDF gdPicturePDF = New GdPicturePDF();
 gdPicturePDF.LoadFromFile(MyFileName, false);
 gdPicturePDF.SelectPage(1);
 int AnnotCount = gdPicturePDF.GetAnnotationCount();
 For (int X = 0; X &lt; AnnotCount; X++)
 {
     String Subtype = gdPicturePDF.GetAnnotationSubType(X);
     If (Subtype == "FileAttachment")
     {
         Byte[] data = New Byte[0];
         gdPicturePDF.GetFileAttachmentAnnotEmbeddedFile(X, ref data);
         String FileName = gdPicturePDF.GetFileAttachmentAnnotFileName(X);
         int FileSize = gdPicturePDF.GetFileAttachmentAnnotFileSize(X);
         Using (Stream file = File.OpenWrite(FileName))
         {
             file.Write(data, 0, FileSize);
         }
     }
 }
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFileAttachmentAnnotFileName(System.Int32)">
      <summary>
 Gets the name of the file embedded into the specified annotation.
 </summary>
      <param name="AnnotationIdx">The annotation index(0-based). Must be a value between 0 and GetAnnotationCount() -1.</param>
      <returns>The embedded file name.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Extracting the embedded file in the FileAttachment Annots" lang="C#">
 GdPicturePDF gdPicturePDF = New GdPicturePDF();
 gdPicturePDF.LoadFromFile(MyFileName, false);
 gdPicturePDF.SelectPage(1);
 int AnnotCount = gdPicturePDF.GetAnnotationCount();
 For (int X = 0; X &lt; AnnotCount; X++)
 {
     String Subtype = gdPicturePDF.GetAnnotationSubType(X);
     If (Subtype == "FileAttachment")
     {
         Byte[] data = New Byte[0];
         gdPicturePDF.GetFileAttachmentAnnotEmbeddedFile(X, ref data);
         String FileName = gdPicturePDF.GetFileAttachmentAnnotFileName(X);
         int FileSize = gdPicturePDF.GetFileAttachmentAnnotFileSize(X);
         Using (Stream file = File.OpenWrite(FileName))
         {
             file.Write(data, 0, FileSize);
         }
     }
 }
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetFileAttachmentAnnotFileSize(System.Int32)">
      <summary>
 Gets the size of the file embedded into the specified annotation.
 </summary>
      <param name="AnnotationIdx">The annotation index(0-based). Must be a value between 0 and GetAnnotationCount() -1.</param>
      <returns>The embedded file size in bytes.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="Extracting the embedded file in the FileAttachment Annots" lang="C#">
 GdPicturePDF gdPicturePDF = New GdPicturePDF();
 gdPicturePDF.LoadFromFile(MyFileName, false);
 gdPicturePDF.SelectPage(1);
 int AnnotCount = gdPicturePDF.GetAnnotationCount();
 For (int X = 0; X &lt; AnnotCount; X++)
 {
     String Subtype = gdPicturePDF.GetAnnotationSubType(X);
     If (Subtype == "FileAttachment")
     {
         Byte[] data = New Byte[0];
         gdPicturePDF.GetFileAttachmentAnnotEmbeddedFile(X, ref data);
         String FileName = gdPicturePDF.GetFileAttachmentAnnotFileName(X);
         int FileSize = gdPicturePDF.GetFileAttachmentAnnotFileSize(X);
         Using (Stream file = File.OpenWrite(FileName))
         {
             file.Write(data, 0, FileSize);
         }
     }
 }
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetColorMode">
      <summary>
 Returns the active printer color Mode.
 </summary>
      <returns>
 A member of the PrinterColorMode enumeration.
 </returns>
      <example>
        <code description="Setting the properties of the current printer before printing a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
    Dim PrinterAligment As PrintAlignment = oGdPicturePDF.PrintGetAlignment()
    If PrinterAligment &lt;&gt; PrintAlignment.PrintAlignmentDefault Then
       oGdPicturePDF.PrintSetAlignment(PrintAlignment.PrintAlignmentDefault)
    End If
    Dim PrinterColorMode As PrinterColorMode = oGdPicturePDF.PrintGetColorMode()
    If PrinterColorMode &lt;&gt; GdPicture12.PrinterColorMode.PrinterColorModeColor Then
       oGdPicturePDF.PrintSetColorMode(GdPicture12.PrinterColorMode.PrinterColorModeColor)
    End If
    Dim PrinterCopies As Integer = oGdPicturePDF.PrintGetCopies()
    If PrinterCopies &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetCopies(1)
    End If
    Dim PrinterDocumentName As String = oGdPicturePDF.PrintGetDocumentName()
    If PrinterDocumentName &lt;&gt; "GdPicture" Then
       oGdPicturePDF.PrintSetDocumentName("GdPicture")
    End If
    Dim PrinterDuplex As Duplex = oGdPicturePDF.PrintGetDuplexMode()
    If PrinterDuplex &lt;&gt; Duplex.Default Then
       oGdPicturePDF.PrintSetDuplexMode(Duplex.Default)
    End If
    Dim PrinterOrientation As PrinterOrientation = oGdPicturePDF.PrintGetOrientation()
    If PrinterOrientation &lt;&gt; GdPicture12.PrinterOrientation.PrinterOrientationPortrait Then
       oGdPicturePDF.PrintSetOrientation(GdPicture12.PrinterOrientation.PrinterOrientationPortrait)
    End If
    Dim PrinterPaperBin As Integer = oGdPicturePDF.PrintGetPaperBin()
    If PrinterPaperBin &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetPaperBin(1)
    End If
    Dim PrinterPaperSize As Integer = oGdPicturePDF.PrintGetPaperSize()
    If PrinterPaperSize &lt;&gt; 9 Then
       Dim ps As New PaperSize("A4", 850, 1100)
       oGdPicturePDF.PrintSetPaperSize(ps)
    End If
    Dim PrinterQuality As PrintQuality = oGdPicturePDF.PrintGetQuality()
    If PrinterQuality &lt;&gt; PrintQuality.PrintQualityDraft Then
       oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    End If
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetColorMode(GdPicture12.PrinterColorMode)">
      <summary>
 Sets to the active printer the color mode for the print process.
 </summary>
      <param name="ColorMode">A member of the PrinterColorMode enumeration.</param>
      <example>
        <code description="Printing two copies of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.PrintSetColorMode(PrinterColorMode.PrinterColorModeColor)
    oGdPicturePDF.PrintSetDocumentName("GdPicture printing")
    oGdPicturePDF.PrintSetShowPrintingProgress(False)
    oGdPicturePDF.PrintSetPaperBin(1)   'upper bin
    oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    oGdPicturePDF.PrintSetCopies(2)
    oGdPicturePDF.PrintSetDuplexMode(Duplex.Horizontal)
    oGdPicturePDF.PrintSetStdPaperSize(9)   'A4
    oGdPicturePDF.PrintSetAutoRotation(True)
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetDocumentName">
      <summary>
 Gets the document name to display during the next print process (for example, in a print status
 dialog box or printer queue) while printing the document.
 </summary>
      <returns>
 The document name to display.
 </returns>
      <example>
        <code description="Setting the properties of the current printer before printing a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
    Dim PrinterAligment As PrintAlignment = oGdPicturePDF.PrintGetAlignment()
    If PrinterAligment &lt;&gt; PrintAlignment.PrintAlignmentDefault Then
       oGdPicturePDF.PrintSetAlignment(PrintAlignment.PrintAlignmentDefault)
    End If
    Dim PrinterColorMode As PrinterColorMode = oGdPicturePDF.PrintGetColorMode()
    If PrinterColorMode &lt;&gt; GdPicture12.PrinterColorMode.PrinterColorModeColor Then
       oGdPicturePDF.PrintSetColorMode(GdPicture12.PrinterColorMode.PrinterColorModeColor)
    End If
    Dim PrinterCopies As Integer = oGdPicturePDF.PrintGetCopies()
    If PrinterCopies &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetCopies(1)
    End If
    Dim PrinterDocumentName As String = oGdPicturePDF.PrintGetDocumentName()
    If PrinterDocumentName &lt;&gt; "GdPicture" Then
       oGdPicturePDF.PrintSetDocumentName("GdPicture")
    End If
    Dim PrinterDuplex As Duplex = oGdPicturePDF.PrintGetDuplexMode()
    If PrinterDuplex &lt;&gt; Duplex.Default Then
       oGdPicturePDF.PrintSetDuplexMode(Duplex.Default)
    End If
    Dim PrinterOrientation As PrinterOrientation = oGdPicturePDF.PrintGetOrientation()
    If PrinterOrientation &lt;&gt; GdPicture12.PrinterOrientation.PrinterOrientationPortrait Then
       oGdPicturePDF.PrintSetOrientation(GdPicture12.PrinterOrientation.PrinterOrientationPortrait)
    End If
    Dim PrinterPaperBin As Integer = oGdPicturePDF.PrintGetPaperBin()
    If PrinterPaperBin &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetPaperBin(1)
    End If
    Dim PrinterPaperSize As Integer = oGdPicturePDF.PrintGetPaperSize()
    If PrinterPaperSize &lt;&gt; 9 Then
       Dim ps As New PaperSize("A4", 850, 1100)
       oGdPicturePDF.PrintSetPaperSize(ps)
    End If
    Dim PrinterQuality As PrintQuality = oGdPicturePDF.PrintGetQuality()
    If PrinterQuality &lt;&gt; PrintQuality.PrintQualityDraft Then
       oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    End If
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetDocumentName(System.String)">
      <summary>
 Sets the document name to display during the next print process (for example, in a print status
 dialog box or printer queue) while printing the document.
 </summary>
      <param name="DocumentName">The document name to display.</param>
      <example>
        <code description="Printing two copies of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.PrintSetColorMode(PrinterColorMode.PrinterColorModeColor)
    oGdPicturePDF.PrintSetDocumentName("GdPicture printing")
    oGdPicturePDF.PrintSetShowPrintingProgress(False)
    oGdPicturePDF.PrintSetPaperBin(1)   'upper bin
    oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    oGdPicturePDF.PrintSetCopies(2)
    oGdPicturePDF.PrintSetDuplexMode(Duplex.Horizontal)
    oGdPicturePDF.PrintSetStdPaperSize(9)   'A4
    oGdPicturePDF.PrintSetAutoRotation(True)
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetShowPrintingProgress(System.Boolean)">
      <summary>
 Tells the component to show or hide progress indicator during printing (showed by default).
 </summary>
      <param name="Show">True to show progress indicators printing, else False.</param>
      <example>
        <code description="Printing two copies of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.PrintSetColorMode(PrinterColorMode.PrinterColorModeColor)
    oGdPicturePDF.PrintSetDocumentName("GdPicture printing")
    oGdPicturePDF.PrintSetShowPrintingProgress(False)
    oGdPicturePDF.PrintSetPaperBin(1)   'upper bin
    oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    oGdPicturePDF.PrintSetCopies(2)
    oGdPicturePDF.PrintSetDuplexMode(Duplex.Horizontal)
    oGdPicturePDF.PrintSetStdPaperSize(9)   'A4
    oGdPicturePDF.PrintSetAutoRotation(True)
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetPaperBin(System.Int32)">
      <summary>
 Sets the paper bin used by the active printer.
 </summary>
      <param name="PaperBin">The paper bin to use.Standard values are:
 - 1: Upper
 - 2: Lower
 - 3: Middle
 - 4: Manual
 - 5: Envelope
 - 6: ManualFeed
 - 7: AutomaticFeed
 - 8: TractorFeed
 - 9: SmallFormat
 - 10: LargeFormat
 - 11: LargeCapacity
 - 14: Cassette
 - 15: FormSource
 - 256 or higher: Custom.</param>
      <returns>
 True if the paper bin has been selected else false (unsupported paper bin).
 </returns>
      <example>
        <code description="Printing two copies of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.PrintSetColorMode(PrinterColorMode.PrinterColorModeColor)
    oGdPicturePDF.PrintSetDocumentName("GdPicture printing")
    oGdPicturePDF.PrintSetShowPrintingProgress(False)
    oGdPicturePDF.PrintSetPaperBin(1)   'upper bin
    oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    oGdPicturePDF.PrintSetCopies(2)
    oGdPicturePDF.PrintSetDuplexMode(Duplex.Horizontal)
    oGdPicturePDF.PrintSetStdPaperSize(9)   'A4
    oGdPicturePDF.PrintSetAutoRotation(True)
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetPaperBin(System.Drawing.Printing.PaperSource)">
      <summary>
 Sets the paper bin to be used by the active printer.
 </summary>
      <param name="PaperBin">The paper bin to use. A PaperSource object.</param>
      <returns>
 True if the paper bin has been selected else false (unsupported paper bin).
 </returns>
      <example>
        <code description="Setting the properties of the current printer before printing a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
    Dim PrinterAligment As PrintAlignment = oGdPicturePDF.PrintGetAlignment()
    If PrinterAligment &lt;&gt; PrintAlignment.PrintAlignmentDefault Then
       oGdPicturePDF.PrintSetAlignment(PrintAlignment.PrintAlignmentDefault)
    End If
    Dim PrinterColorMode As PrinterColorMode = oGdPicturePDF.PrintGetColorMode()
    If PrinterColorMode &lt;&gt; GdPicture12.PrinterColorMode.PrinterColorModeColor Then
       oGdPicturePDF.PrintSetColorMode(GdPicture12.PrinterColorMode.PrinterColorModeColor)
    End If
    Dim PrinterCopies As Integer = oGdPicturePDF.PrintGetCopies()
    If PrinterCopies &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetCopies(1)
    End If
    Dim PrinterDocumentName As String = oGdPicturePDF.PrintGetDocumentName()
    If PrinterDocumentName &lt;&gt; "GdPicture" Then
       oGdPicturePDF.PrintSetDocumentName("GdPicture")
    End If
    Dim PrinterDuplex As Duplex = oGdPicturePDF.PrintGetDuplexMode()
    If PrinterDuplex &lt;&gt; Duplex.Default Then
       oGdPicturePDF.PrintSetDuplexMode(Duplex.Default)
    End If
    Dim PrinterOrientation As PrinterOrientation = oGdPicturePDF.PrintGetOrientation()
    If PrinterOrientation &lt;&gt; GdPicture12.PrinterOrientation.PrinterOrientationPortrait Then
       oGdPicturePDF.PrintSetOrientation(GdPicture12.PrinterOrientation.PrinterOrientationPortrait)
    End If
    Dim PrinterPaperBin As Integer = oGdPicturePDF.PrintGetPaperBin()
    If PrinterPaperBin &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetPaperBin(1)
    End If
    Dim PrinterPaperSize As Integer = oGdPicturePDF.PrintGetPaperSize()
    If PrinterPaperSize &lt;&gt; 9 Then
       Dim ps As New PaperSize("A4", 850, 1100)
       oGdPicturePDF.PrintSetPaperSize(ps)
    End If
    Dim PrinterQuality As PrintQuality = oGdPicturePDF.PrintGetQuality()
    If PrinterQuality &lt;&gt; PrintQuality.PrintQualityDraft Then
       oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    End If
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetPaperBin">
      <summary>
 Returns the paperbin used by the active printer.
 </summary>
      <returns>The paperbin used. Standard values are:
 - 1: Upper
 - 2: Lower
 - 3: Middle
 - 4: Manual
 - 5: Envelope
 - 6: ManualFeed
 - 7: AutomaticFeed
 - 8: TractorFeed
 - 9: SmallFormat
 - 10: LargeFormat
 - 11: LargeCapacity
 - 14: Cassette
 - 15: FormSource
 - 256 or higher: Custom
 </returns>
      <example>
        <code description="Setting the properties of the current printer before printing a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
    Dim PrinterAligment As PrintAlignment = oGdPicturePDF.PrintGetAlignment()
    If PrinterAligment &lt;&gt; PrintAlignment.PrintAlignmentDefault Then
       oGdPicturePDF.PrintSetAlignment(PrintAlignment.PrintAlignmentDefault)
    End If
    Dim PrinterColorMode As PrinterColorMode = oGdPicturePDF.PrintGetColorMode()
    If PrinterColorMode &lt;&gt; GdPicture12.PrinterColorMode.PrinterColorModeColor Then
       oGdPicturePDF.PrintSetColorMode(GdPicture12.PrinterColorMode.PrinterColorModeColor)
    End If
    Dim PrinterCopies As Integer = oGdPicturePDF.PrintGetCopies()
    If PrinterCopies &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetCopies(1)
    End If
    Dim PrinterDocumentName As String = oGdPicturePDF.PrintGetDocumentName()
    If PrinterDocumentName &lt;&gt; "GdPicture" Then
       oGdPicturePDF.PrintSetDocumentName("GdPicture")
    End If
    Dim PrinterDuplex As Duplex = oGdPicturePDF.PrintGetDuplexMode()
    If PrinterDuplex &lt;&gt; Duplex.Default Then
       oGdPicturePDF.PrintSetDuplexMode(Duplex.Default)
    End If
    Dim PrinterOrientation As PrinterOrientation = oGdPicturePDF.PrintGetOrientation()
    If PrinterOrientation &lt;&gt; GdPicture12.PrinterOrientation.PrinterOrientationPortrait Then
       oGdPicturePDF.PrintSetOrientation(GdPicture12.PrinterOrientation.PrinterOrientationPortrait)
    End If
    Dim PrinterPaperBin As Integer = oGdPicturePDF.PrintGetPaperBin()
    If PrinterPaperBin &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetPaperBin(1)
    End If
    Dim PrinterPaperSize As Integer = oGdPicturePDF.PrintGetPaperSize()
    If PrinterPaperSize &lt;&gt; 9 Then
       Dim ps As New PaperSize("A4", 850, 1100)
       oGdPicturePDF.PrintSetPaperSize(ps)
    End If
    Dim PrinterQuality As PrintQuality = oGdPicturePDF.PrintGetQuality()
    If PrinterQuality &lt;&gt; PrintQuality.PrintQualityDraft Then
       oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    End If
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetFromToPage(System.Int32,System.Int32)">
      <summary>
 Ask to the component for the next print process to print a range of page.
 </summary>
      <param name="FromPage">First page to print.</param>
      <param name="ToPage">Last page to print.</param>
      <example>
        <code description="Printing a PDF from the first page to the one before the last." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount()-1)
    status = oGdPicturePDF.Print()
    Dim status As GdPictureStatus = oGdPicturePDF.GetStat()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + status.ToString)
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetPageSelection(System.String)">
      <summary>
 Ask to the component for the next print process to print a selection of pages.
 </summary>
      <param name="CustomRange">The custom page range. For example "1;4;5" to print pages 1, 4 and 5 or "1-5;10" to print pages from 1 to 5 and page 10.</param>
      <remarks>This method is not compatible with PrintDialog() and PrintDialogFit().</remarks>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetQuality">
      <summary>
 Returns the current quality of the active printer.
 </summary>
      <returns>
 A member of the PrintQuality enumeration.
 </returns>
      <example>
        <code description="Setting the properties of the current printer before printing a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
    Dim PrinterAligment As PrintAlignment = oGdPicturePDF.PrintGetAlignment()
    If PrinterAligment &lt;&gt; PrintAlignment.PrintAlignmentDefault Then
       oGdPicturePDF.PrintSetAlignment(PrintAlignment.PrintAlignmentDefault)
    End If
    Dim PrinterColorMode As PrinterColorMode = oGdPicturePDF.PrintGetColorMode()
    If PrinterColorMode &lt;&gt; GdPicture12.PrinterColorMode.PrinterColorModeColor Then
       oGdPicturePDF.PrintSetColorMode(GdPicture12.PrinterColorMode.PrinterColorModeColor)
    End If
    Dim PrinterCopies As Integer = oGdPicturePDF.PrintGetCopies()
    If PrinterCopies &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetCopies(1)
    End If
    Dim PrinterDocumentName As String = oGdPicturePDF.PrintGetDocumentName()
    If PrinterDocumentName &lt;&gt; "GdPicture" Then
       oGdPicturePDF.PrintSetDocumentName("GdPicture")
    End If
    Dim PrinterDuplex As Duplex = oGdPicturePDF.PrintGetDuplexMode()
    If PrinterDuplex &lt;&gt; Duplex.Default Then
       oGdPicturePDF.PrintSetDuplexMode(Duplex.Default)
    End If
    Dim PrinterOrientation As PrinterOrientation = oGdPicturePDF.PrintGetOrientation()
    If PrinterOrientation &lt;&gt; GdPicture12.PrinterOrientation.PrinterOrientationPortrait Then
       oGdPicturePDF.PrintSetOrientation(GdPicture12.PrinterOrientation.PrinterOrientationPortrait)
    End If
    Dim PrinterPaperBin As Integer = oGdPicturePDF.PrintGetPaperBin()
    If PrinterPaperBin &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetPaperBin(1)
    End If
    Dim PrinterPaperSize As Integer = oGdPicturePDF.PrintGetPaperSize()
    If PrinterPaperSize &lt;&gt; 9 Then
       Dim ps As New PaperSize("A4", 850, 1100)
       oGdPicturePDF.PrintSetPaperSize(ps)
    End If
    Dim PrinterQuality As PrintQuality = oGdPicturePDF.PrintGetQuality()
    If PrinterQuality &lt;&gt; PrintQuality.PrintQualityDraft Then
       oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    End If
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetQuality(GdPicture12.PrintQuality)">
      <summary>
 Sets the quality of the active printer.
 </summary>
      <param name="Quality">A member of the PrintQuality enumeration.</param>
      <example>
        <code description="Printing two copies of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.PrintSetColorMode(PrinterColorMode.PrinterColorModeColor)
    oGdPicturePDF.PrintSetDocumentName("GdPicture printing")
    oGdPicturePDF.PrintSetShowPrintingProgress(False)
    oGdPicturePDF.PrintSetPaperBin(1)   'upper bin
    oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    oGdPicturePDF.PrintSetCopies(2)
    oGdPicturePDF.PrintSetDuplexMode(Duplex.Horizontal)
    oGdPicturePDF.PrintSetStdPaperSize(9)   'A4
    oGdPicturePDF.PrintSetAutoRotation(True)
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetStat">
      <summary>
 Returns the last Printer status. In case of PrintingException status the PrintGetLastError() method can be used to get more details.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.PrintGetLastError" />
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetLastError">
      <summary>
 Returns the last Printer error description, if any.
 </summary>
      <returns>
 The description of the last printing error.
 </returns>
      <example>
        <code description="Printing two copies of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.PrintSetColorMode(PrinterColorMode.PrinterColorModeColor)
    oGdPicturePDF.PrintSetDocumentName("GdPicture printing")
    oGdPicturePDF.PrintSetShowPrintingProgress(False)
    oGdPicturePDF.PrintSetPaperBin(1)   'upper bin
    oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    oGdPicturePDF.PrintSetCopies(2)
    oGdPicturePDF.PrintSetDuplexMode(Duplex.Horizontal)
    oGdPicturePDF.PrintSetStdPaperSize(9)   'A4
    oGdPicturePDF.PrintSetAutoRotation(True)
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetCopies(System.Int16)">
      <summary>
 Tell to the active printer the number of copies to print.
 </summary>
      <param name="Copies">The number of copies to print.</param>
      <example>
        <code description="Printing two copies of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.PrintSetColorMode(PrinterColorMode.PrinterColorModeColor)
    oGdPicturePDF.PrintSetDocumentName("GdPicture printing")
    oGdPicturePDF.PrintSetShowPrintingProgress(False)
    oGdPicturePDF.PrintSetPaperBin(1)   'upper bin
    oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    oGdPicturePDF.PrintSetCopies(2)
    oGdPicturePDF.PrintSetDuplexMode(Duplex.Horizontal)
    oGdPicturePDF.PrintSetStdPaperSize(9)   'A4
    oGdPicturePDF.PrintSetAutoRotation(True)
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetCopies">
      <summary>
 Returns the number of copies to print with the selected printer.
 </summary>
      <returns>
 Number of copies to print.
 </returns>
      <example>
        <code description="Setting the properties of the current printer before printing a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
    Dim PrinterAligment As PrintAlignment = oGdPicturePDF.PrintGetAlignment()
    If PrinterAligment &lt;&gt; PrintAlignment.PrintAlignmentDefault Then
       oGdPicturePDF.PrintSetAlignment(PrintAlignment.PrintAlignmentDefault)
    End If
    Dim PrinterColorMode As PrinterColorMode = oGdPicturePDF.PrintGetColorMode()
    If PrinterColorMode &lt;&gt; GdPicture12.PrinterColorMode.PrinterColorModeColor Then
       oGdPicturePDF.PrintSetColorMode(GdPicture12.PrinterColorMode.PrinterColorModeColor)
    End If
    Dim PrinterCopies As Integer = oGdPicturePDF.PrintGetCopies()
    If PrinterCopies &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetCopies(1)
    End If
    Dim PrinterDocumentName As String = oGdPicturePDF.PrintGetDocumentName()
    If PrinterDocumentName &lt;&gt; "GdPicture" Then
       oGdPicturePDF.PrintSetDocumentName("GdPicture")
    End If
    Dim PrinterDuplex As Duplex = oGdPicturePDF.PrintGetDuplexMode()
    If PrinterDuplex &lt;&gt; Duplex.Default Then
       oGdPicturePDF.PrintSetDuplexMode(Duplex.Default)
    End If
    Dim PrinterOrientation As PrinterOrientation = oGdPicturePDF.PrintGetOrientation()
    If PrinterOrientation &lt;&gt; GdPicture12.PrinterOrientation.PrinterOrientationPortrait Then
       oGdPicturePDF.PrintSetOrientation(GdPicture12.PrinterOrientation.PrinterOrientationPortrait)
    End If
    Dim PrinterPaperBin As Integer = oGdPicturePDF.PrintGetPaperBin()
    If PrinterPaperBin &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetPaperBin(1)
    End If
    Dim PrinterPaperSize As Integer = oGdPicturePDF.PrintGetPaperSize()
    If PrinterPaperSize &lt;&gt; 9 Then
       Dim ps As New PaperSize("A4", 850, 1100)
       oGdPicturePDF.PrintSetPaperSize(ps)
    End If
    Dim PrinterQuality As PrintQuality = oGdPicturePDF.PrintGetQuality()
    If PrinterQuality &lt;&gt; PrintQuality.PrintQualityDraft Then
       oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    End If
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetDuplexMode(System.Drawing.Printing.Duplex)">
      <summary>
 Sets duplex mode for the selected printer.
 </summary>
      <param name="DuplexMode">A member of the Duplex enumeration.</param>
      <example>
        <code description="Printing two copies of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.PrintSetColorMode(PrinterColorMode.PrinterColorModeColor)
    oGdPicturePDF.PrintSetDocumentName("GdPicture printing")
    oGdPicturePDF.PrintSetShowPrintingProgress(False)
    oGdPicturePDF.PrintSetPaperBin(1)   'upper bin
    oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    oGdPicturePDF.PrintSetCopies(2)
    oGdPicturePDF.PrintSetDuplexMode(Duplex.Horizontal)
    oGdPicturePDF.PrintSetStdPaperSize(9)   'A4
    oGdPicturePDF.PrintSetAutoRotation(True)
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetCollate(System.Boolean)">
      <summary>
 Sets document collate mode for the selected printer.
 </summary>
      <param name="Collate">True is the printed document is collated, False otherwise..</param>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetCollate">
      <summary>
 Returns whether the printed document is collated.
 </summary>
      <returns>
 True is the printed document is collated, False otherwise.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintShowPrinterSettingsDialog(System.IntPtr)">
      <summary>
 Prompts the selected printer driver settings dialog.
 </summary>
      <param name="HANDLE">A handle to the parent window of the printer-configuration property sheet.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetDuplexMode">
      <summary>
 Returns the print duplex mode for the selected printer.
 </summary>
      <returns>
 A member of the Duplex enumeration.
 </returns>
      <example>
        <code description="Setting the properties of the current printer before printing a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
    Dim PrinterAligment As PrintAlignment = oGdPicturePDF.PrintGetAlignment()
    If PrinterAligment &lt;&gt; PrintAlignment.PrintAlignmentDefault Then
       oGdPicturePDF.PrintSetAlignment(PrintAlignment.PrintAlignmentDefault)
    End If
    Dim PrinterColorMode As PrinterColorMode = oGdPicturePDF.PrintGetColorMode()
    If PrinterColorMode &lt;&gt; GdPicture12.PrinterColorMode.PrinterColorModeColor Then
       oGdPicturePDF.PrintSetColorMode(GdPicture12.PrinterColorMode.PrinterColorModeColor)
    End If
    Dim PrinterCopies As Integer = oGdPicturePDF.PrintGetCopies()
    If PrinterCopies &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetCopies(1)
    End If
    Dim PrinterDocumentName As String = oGdPicturePDF.PrintGetDocumentName()
    If PrinterDocumentName &lt;&gt; "GdPicture" Then
       oGdPicturePDF.PrintSetDocumentName("GdPicture")
    End If
    Dim PrinterDuplex As Duplex = oGdPicturePDF.PrintGetDuplexMode()
    If PrinterDuplex &lt;&gt; Duplex.Default Then
       oGdPicturePDF.PrintSetDuplexMode(Duplex.Default)
    End If
    Dim PrinterOrientation As PrinterOrientation = oGdPicturePDF.PrintGetOrientation()
    If PrinterOrientation &lt;&gt; GdPicture12.PrinterOrientation.PrinterOrientationPortrait Then
       oGdPicturePDF.PrintSetOrientation(GdPicture12.PrinterOrientation.PrinterOrientationPortrait)
    End If
    Dim PrinterPaperBin As Integer = oGdPicturePDF.PrintGetPaperBin()
    If PrinterPaperBin &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetPaperBin(1)
    End If
    Dim PrinterPaperSize As Integer = oGdPicturePDF.PrintGetPaperSize()
    If PrinterPaperSize &lt;&gt; 9 Then
       Dim ps As New PaperSize("A4", 850, 1100)
       oGdPicturePDF.PrintSetPaperSize(ps)
    End If
    Dim PrinterQuality As PrintQuality = oGdPicturePDF.PrintGetQuality()
    If PrinterQuality &lt;&gt; PrintQuality.PrintQualityDraft Then
       oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    End If
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetOrientation(GdPicture12.PrinterOrientation)">
      <summary>
 Defines the page orientation when printing.
 </summary>
      <param name="Orientation">A member of the PrinterOrientation enumeration.</param>
      <example>
        <code description="Printing two copies of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.PrintSetColorMode(PrinterColorMode.PrinterColorModeColor)
    oGdPicturePDF.PrintSetDocumentName("GdPicture printing")
    oGdPicturePDF.PrintSetShowPrintingProgress(False)
    oGdPicturePDF.PrintSetPaperBin(1)   'upper bin
    oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    oGdPicturePDF.PrintSetCopies(2)
    oGdPicturePDF.PrintSetDuplexMode(Duplex.Horizontal)
    oGdPicturePDF.PrintSetStdPaperSize(9)   'A4
    oGdPicturePDF.PrintSetOrientation(1)    'Portrait
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetOrientation">
      <summary>
 Returns the page orientation when printing.
 </summary>
      <returns>
 A member of the PrinterOrientation enumeration.
 </returns>
      <example>
        <code description="Setting the properties of the current printer before printing a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
    Dim PrinterAligment As PrintAlignment = oGdPicturePDF.PrintGetAlignment()
    If PrinterAligment &lt;&gt; PrintAlignment.PrintAlignmentDefault Then
       oGdPicturePDF.PrintSetAlignment(PrintAlignment.PrintAlignmentDefault)
    End If
    Dim PrinterColorMode As PrinterColorMode = oGdPicturePDF.PrintGetColorMode()
    If PrinterColorMode &lt;&gt; GdPicture12.PrinterColorMode.PrinterColorModeColor Then
       oGdPicturePDF.PrintSetColorMode(GdPicture12.PrinterColorMode.PrinterColorModeColor)
    End If
    Dim PrinterCopies As Integer = oGdPicturePDF.PrintGetCopies()
    If PrinterCopies &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetCopies(1)
    End If
    Dim PrinterDocumentName As String = oGdPicturePDF.PrintGetDocumentName()
    If PrinterDocumentName &lt;&gt; "GdPicture" Then
       oGdPicturePDF.PrintSetDocumentName("GdPicture")
    End If
    Dim PrinterDuplex As Duplex = oGdPicturePDF.PrintGetDuplexMode()
    If PrinterDuplex &lt;&gt; Duplex.Default Then
       oGdPicturePDF.PrintSetDuplexMode(Duplex.Default)
    End If
    Dim PrinterOrientation As PrinterOrientation = oGdPicturePDF.PrintGetOrientation()
    If PrinterOrientation &lt;&gt; GdPicture12.PrinterOrientation.PrinterOrientationPortrait Then
       oGdPicturePDF.PrintSetOrientation(GdPicture12.PrinterOrientation.PrinterOrientationPortrait)
    End If
    Dim PrinterPaperBin As Integer = oGdPicturePDF.PrintGetPaperBin()
    If PrinterPaperBin &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetPaperBin(1)
    End If
    Dim PrinterPaperSize As Integer = oGdPicturePDF.PrintGetPaperSize()
    If PrinterPaperSize &lt;&gt; 9 Then
       Dim ps As New PaperSize("A4", 850, 1100)
       oGdPicturePDF.PrintSetPaperSize(ps)
    End If
    Dim PrinterQuality As PrintQuality = oGdPicturePDF.PrintGetQuality()
    If PrinterQuality &lt;&gt; PrintQuality.PrintQualityDraft Then
       oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    End If
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetActivePrinter">
      <summary>
 Returns the selected printer name.
 </summary>
      <returns>
 The name of the selected printer.
 </returns>
      <example>
        <code description="Setting the properties of the current printer before printing a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
    Dim PrinterAligment As PrintAlignment = oGdPicturePDF.PrintGetAlignment()
    If PrinterAligment &lt;&gt; PrintAlignment.PrintAlignmentDefault Then
       oGdPicturePDF.PrintSetAlignment(PrintAlignment.PrintAlignmentDefault)
    End If
    Dim PrinterColorMode As PrinterColorMode = oGdPicturePDF.PrintGetColorMode()
    If PrinterColorMode &lt;&gt; GdPicture12.PrinterColorMode.PrinterColorModeColor Then
       oGdPicturePDF.PrintSetColorMode(GdPicture12.PrinterColorMode.PrinterColorModeColor)
    End If
    Dim PrinterCopies As Integer = oGdPicturePDF.PrintGetCopies()
    If PrinterCopies &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetCopies(1)
    End If
    Dim PrinterDocumentName As String = oGdPicturePDF.PrintGetDocumentName()
    If PrinterDocumentName &lt;&gt; "GdPicture" Then
       oGdPicturePDF.PrintSetDocumentName("GdPicture")
    End If
    Dim PrinterDuplex As Duplex = oGdPicturePDF.PrintGetDuplexMode()
    If PrinterDuplex &lt;&gt; Duplex.Default Then
       oGdPicturePDF.PrintSetDuplexMode(Duplex.Default)
    End If
    Dim PrinterOrientation As PrinterOrientation = oGdPicturePDF.PrintGetOrientation()
    If PrinterOrientation &lt;&gt; GdPicture12.PrinterOrientation.PrinterOrientationPortrait Then
       oGdPicturePDF.PrintSetOrientation(GdPicture12.PrinterOrientation.PrinterOrientationPortrait)
    End If
    Dim PrinterPaperBin As Integer = oGdPicturePDF.PrintGetPaperBin()
    If PrinterPaperBin &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetPaperBin(1)
    End If
    Dim PrinterPaperSize As Integer = oGdPicturePDF.PrintGetPaperSize()
    If PrinterPaperSize &lt;&gt; 9 Then
       Dim ps As New PaperSize("A4", 850, 1100)
       oGdPicturePDF.PrintSetPaperSize(ps)
    End If
    Dim PrinterQuality As PrintQuality = oGdPicturePDF.PrintGetQuality()
    If PrinterQuality &lt;&gt; PrintQuality.PrintQualityDraft Then
       oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    End If
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetActivePrinter(System.String)">
      <summary>
 Changes the active printer.
 </summary>
      <param name="PrinterName">The name of the new active printer.</param>
      <returns>
 True if success, else False.
 </returns>
      <example>
        <code description="Getting the printer with the smallest margins." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim PrintersCount As Integer = oGdPicturePDF.PrintGetPrintersCount()
 Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
 Dim PrinterName As String = ""
 Dim PrinterLeftmargin As Single
 Dim PrinterTopmargin As Single
 Dim PrinterMinLeftmargin As Single = 999
 Dim PrinterMinTopmargin As Single = 999
 Dim PrinterPageWidth As Single = 0
 Dim PrintrPageHeight As Single = 0
 For PrinterNum As Integer = 1 To PrintersCount
    oGdPicturePDF.PrintSetActivePrinter(oGdPicturePDF.PrintGetPrinterName(PrinterNum))
    oGdPicturePDF.PrintGetMargins(PrinterLeftmargin, PrinterTopmargin)
    If (PrinterLeftmargin &lt; PrinterMinLeftmargin) Or (PrinterTopmargin &lt; PrinterMinTopmargin) Then
       PrinterName = oGdPicturePDF.PrintGetPrinterName(PrinterNum)
       PrinterMinLeftmargin = PrinterLeftmargin
       PrinterMinTopmargin = PrinterTopmargin
       PrinterPageWidth = oGdPicturePDF.PrintGetPaperWidth()
       PrintrPageHeight = oGdPicturePDF.PrintGetPaperHeight()
    End If
 Next
 oGdPicturePDF.PrintSetActivePrinter(CurPrinter)
 MessageBox.Show("Printer with the smallest margins : " + PrinterName + vbCrLf +
 "Page dimensions : " + PrinterPageWidth.ToString() + "/" + PrintrPageHeight.ToString())
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetPrintersCount">
      <summary>
 Returns the number of available printers.
 </summary>
      <returns>
 Number of copies.
 </returns>
      <example>
        <code description="Getting the printer with the smallest margins." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim PrintersCount As Integer = oGdPicturePDF.PrintGetPrintersCount()
 Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
 Dim PrinterName As String = ""
 Dim PrinterLeftmargin As Single
 Dim PrinterTopmargin As Single
 Dim PrinterMinLeftmargin As Single = 999
 Dim PrinterMinTopmargin As Single = 999
 Dim PrinterPageWidth As Single = 0
 Dim PrintrPageHeight As Single = 0
 For PrinterNum As Integer = 1 To PrintersCount
    oGdPicturePDF.PrintSetActivePrinter(oGdPicturePDF.PrintGetPrinterName(PrinterNum))
    oGdPicturePDF.PrintGetMargins(PrinterLeftmargin, PrinterTopmargin)
    If (PrinterLeftmargin &lt; PrinterMinLeftmargin) Or (PrinterTopmargin &lt; PrinterMinTopmargin) Then
       PrinterName = oGdPicturePDF.PrintGetPrinterName(PrinterNum)
       PrinterMinLeftmargin = PrinterLeftmargin
       PrinterMinTopmargin = PrinterTopmargin
       PrinterPageWidth = oGdPicturePDF.PrintGetPaperWidth()
       PrintrPageHeight = oGdPicturePDF.PrintGetPaperHeight()
    End If
 Next
 oGdPicturePDF.PrintSetActivePrinter(CurPrinter)
 MessageBox.Show("Printer with the smallest margins : " + PrinterName + vbCrLf +
 "Page dimensions : " + PrinterPageWidth.ToString() + "/" + PrintrPageHeight.ToString())
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetPrinterName(System.Int32)">
      <summary>
 Returns the name of an available printer.
 </summary>
      <param name="PrinterNo">Value between 1 and printer count.</param>
      <returns>
 The name of the printer.
 </returns>
      <example>
        <code description="Getting the printer with the smallest margins." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim PrintersCount As Integer = oGdPicturePDF.PrintGetPrintersCount()
 Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
 Dim PrinterName As String = ""
 Dim PrinterLeftmargin As Single
 Dim PrinterTopmargin As Single
 Dim PrinterMinLeftmargin As Single = 999
 Dim PrinterMinTopmargin As Single = 999
 Dim PrinterPageWidth As Single = 0
 Dim PrintrPageHeight As Single = 0
 For PrinterNum As Integer = 1 To PrintersCount
    oGdPicturePDF.PrintSetActivePrinter(oGdPicturePDF.PrintGetPrinterName(PrinterNum))
    oGdPicturePDF.PrintGetMargins(PrinterLeftmargin, PrinterTopmargin)
    If (PrinterLeftmargin &lt; PrinterMinLeftmargin) Or (PrinterTopmargin &lt; PrinterMinTopmargin) Then
       PrinterName = oGdPicturePDF.PrintGetPrinterName(PrinterNum)
       PrinterMinLeftmargin = PrinterLeftmargin
       PrinterMinTopmargin = PrinterTopmargin
       PrinterPageWidth = oGdPicturePDF.PrintGetPaperWidth()
       PrintrPageHeight = oGdPicturePDF.PrintGetPaperHeight()
    End If
 Next
 oGdPicturePDF.PrintSetActivePrinter(CurPrinter)
 MessageBox.Show("Printer with the smallest margins : " + PrinterName + vbCrLf +
 "Page dimensions : " + PrinterPageWidth.ToString() + "/" + PrintrPageHeight.ToString())
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintDialog">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the native document.
 </summary>
      <returns>
 True if success, else False. Use the GetStat() method to determine the reason this method failed.
 </returns>
      <example>
        <code description="Using the standard printer dialog box to print a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    If oGdPicturePDF.PrintDialog() Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.GetStat().ToString)
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetPrinterSettings(System.Drawing.Printing.PrinterSettings)">
      <summary>
 Sets the current printer settings.
 </summary>
      <param name="PS">A System.Drawing.Printing.PrinterSettings object. The printer settings.</param>
      <example>
        <code description="Printing 2 copies of a PDF." lang="VB.NET">
 'note : use a Imports System.Drawing.Printing at the beginning of the code
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PrnSetting As PrinterSettings = oGdPicturePDF.PrintGetPrinterSettings()
    PrnSetting.Copies = 2
    oGdPicturePDF.PrintSetPrinterSettings(PrnSetting)
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + status.ToString)
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetPrinterSettings">
      <summary>
 Returns the current printer settings.
 </summary>
      <returns>
 A System.Drawing.Printing.PrinterSettings object. The current printer settings.
 </returns>
      <example>
        <code description="Printing 2 copies of a PDF." lang="VB.NET">
 'note : use a Imports System.Drawing.Printing at the beginning of the code
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim PrnSetting As PrinterSettings = oGdPicturePDF.PrintGetPrinterSettings()
    PrnSetting.Copies = 2
    oGdPicturePDF.PrintSetPrinterSettings(PrnSetting)
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + status.ToString)
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintDialog(System.Windows.Forms.IWin32Window)">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the native document.
 This method allows to specify the top-level window that will own the modal dialog box.
 </summary>
      <param name="owner">Represents the top-level window that will own the modal dialog box.</param>
      <returns>
 True if success, else False. Use the GetStat() method to determine the reason this method failed.
 </returns>
      <example>
        <code description="Using the standard printer dialog box to print a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    If oGdPicturePDF.PrintDialog(Me) Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.GetStat().ToString)
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintDialogFit">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the native document adjusting pages size to the default paper size.
 </summary>
      <returns>
 True if success, else False. Use the GetStat() method to determine the reason this method failed.
 </returns>
      <example>
        <code description="Using the standard printer dialog box to print a PDF, adjusting the page size to the default paper size." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    If oGdPicturePDF.PrintDialogFit() Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.GetStat().ToString)
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintDialogFit(System.Windows.Forms.IWin32Window)">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the native document adjusting pages size to the default paper size.
 This method allows to specify the top-level window that will own the modal dialog box.
 </summary>
      <param name="owner">Represents the top-level window that will own the modal dialog box.</param>
      <returns>
 True if success, else False. Use the GetStat() method to determine the reason this method failed.
 </returns>
      <example>
        <code description="Using the standard printer dialog box to print a PDF, adjusting page size to the default paper size." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    If oGdPicturePDF.PrintDialogFit(Me) Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.GetStat().ToString)
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.Print">
      <summary>
 Prints the native document the active printer.
 </summary>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Printing a PDF from to first page and to the one before the last." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount()-1)
    Dim status As GdPictureStatus = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + status.ToString)
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintFit">
      <summary>
 Prints the native document to the active printer. Adjusts the pages size to the default paper size.
 </summary>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Printing a PDF from to first page and to the one before the last." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 If oGdPicturePDF.LoadFromFile("test.pdf", False) = GdPictureStatus.OK Then
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount()-1)
    oGdPicturePDF.PrintFit()
    Dim status As GdPictureStatus = oGdPicturePDF.GetStat()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + status.ToString)
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetStdPaperSize(System.Int32)">
      <summary>
 Sets a standard paper size to use by the active printer.
 </summary>
      <param name="PaperSize">
        <list type="bullet">
          <item>
            <term>1</term>
            <description>Letter, 8.5 x 11 in.</description>
          </item>
          <item>
            <term>2</term>
            <description>Letter Small, 8.5 x 11 in.</description>
          </item>
          <item>
            <term>3</term>
            <description>Tabloid, 11 x 17 in.</description>
          </item>
          <item>
            <term>4</term>
            <description>Ledger, 17 x 11 in.</description>
          </item>
          <item>
            <term>5</term>
            <description>Legal, 8.5 x 14 in.</description>
          </item>
          <item>
            <term>6</term>
            <description>Statement, 5 1/2 x 8 1/2 in.</description>
          </item>
          <item>
            <term>7</term>
            <description>Executive, 7 1/2 x 10 1/2 in.</description>
          </item>
          <item>
            <term>8</term>
            <description>A3, 297 x 420 mm</description>
          </item>
          <item>
            <term>9</term>
            <description>A4, 210 x 297 mm</description>
          </item>
          <item>
            <term>10</term>
            <description>A4 Small, 210 x 297 mm</description>
          </item>
          <item>
            <term>11</term>
            <description>A5, 148 x 210 mm</description>
          </item>
          <item>
            <term>12</term>
            <description>B4, 250 x 354 mm</description>
          </item>
          <item>
            <term>13</term>
            <description>B5, 182 x 257 mm</description>
          </item>
          <item>
            <term>14</term>
            <description>Folio, 8.5 x 13 in.</description>
          </item>
          <item>
            <term>15</term>
            <description>Quarto, 215 x 275 mm</description>
          </item>
          <item>
            <term>16</term>
            <description>10 x 14 in.</description>
          </item>
          <item>
            <term>17</term>
            <description>11 x 17 in.</description>
          </item>
          <item>
            <term>18</term>
            <description>Note, 8.5 x 11 in.</description>
          </item>
          <item>
            <term>19</term>
            <description>Envelope #9, 3 7/8 x 8 7/8 in.</description>
          </item>
          <item>
            <term>20</term>
            <description>Envelope #10, 4 1/8 x 9.5 in.</description>
          </item>
          <item>
            <term>21</term>
            <description>Envelope #11, 4.5 x 10 3/8 in.</description>
          </item>
          <item>
            <term>22</term>
            <description>Envelope #12, 4.5 x 11 in.</description>
          </item>
          <item>
            <term>23</term>
            <description>Envelope #14, 5 x 11.5 in.</description>
          </item>
          <item>
            <term>24</term>
            <description>C size sheet</description>
          </item>
          <item>
            <term>25</term>
            <description>D size sheet</description>
          </item>
          <item>
            <term>26</term>
            <description>E size sheet</description>
          </item>
          <item>
            <term>27</term>
            <description>Envelope DL, 110 x 220 mm</description>
          </item>
          <item>
            <term>28</term>
            <description>Envelope C5, 162 x 229 mm</description>
          </item>
          <item>
            <term>29</term>
            <description>Envelope C3, 324 x 458 mm</description>
          </item>
          <item>
            <term>30</term>
            <description>Envelope C4, 229 x 324 mm</description>
          </item>
          <item>
            <term>31</term>
            <description>Envelope C6, 114 x 162 mm</description>
          </item>
          <item>
            <term>32</term>
            <description>Envelope C65, 114 x 229 mm</description>
          </item>
          <item>
            <term>33</term>
            <description>Envelope B4, 250 x 353 mm</description>
          </item>
          <item>
            <term>34</term>
            <description>Envelope B5, 176 x 250 mm</description>
          </item>
          <item>
            <term>35</term>
            <description>Envelope B6, 176 x 125 mm</description>
          </item>
          <item>
            <term>36</term>
            <description>Envelope, 110 x 230 mm</description>
          </item>
          <item>
            <term>37</term>
            <description>Envelope Monarch, 3 7/8 x 7.5 in.</description>
          </item>
          <item>
            <term>38</term>
            <description>Envelope, 3 5/8 x 6.5 in.</description>
          </item>
          <item>
            <term>39</term>
            <description>U.S. Standard Fanfold, 14 7/8 x 11 in.</description>
          </item>
          <item>
            <term>40</term>
            <description>German Standard Fanfold, 8.5 x 12 in.</description>
          </item>
          <item>
            <term>41</term>
            <description>German Legal Fanfold, 8 1/2 x 13 in.</description>
          </item>
          <item>
            <term>42 to 68</term>
            <description>Less-common international sizes.</description>
          </item>
          <item>
            <term>Greater than 118</term>
            <description>A custom paper size.</description>
          </item>
        </list>
      </param>
      <example>
        <code description="Printing two copies of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.PrintSetColorMode(PrinterColorMode.PrinterColorModeColor)
    oGdPicturePDF.PrintSetDocumentName("GdPicture printing")
    oGdPicturePDF.PrintSetShowPrintingProgress(False)
    oGdPicturePDF.PrintSetPaperBin(1)   'upper bin
    oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    oGdPicturePDF.PrintSetCopies(2)
    oGdPicturePDF.PrintSetDuplexMode(Duplex.Horizontal)
    oGdPicturePDF.PrintSetStdPaperSize(9)   'A4
    oGdPicturePDF.PrintSetAutoRotation(True)
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetPaperSize(System.Drawing.Printing.PaperSize)">
      <summary>
 Sets the paper size to be used by the active printer.
 </summary>
      <param name="PaperSize">Paper size. A PaperSize object.</param>
      <example>
        <code description="Setting the properties of the current printer before printing a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
    Dim PrinterAligment As PrintAlignment = oGdPicturePDF.PrintGetAlignment()
    If PrinterAligment &lt;&gt; PrintAlignment.PrintAlignmentDefault Then
       oGdPicturePDF.PrintSetAlignment(PrintAlignment.PrintAlignmentDefault)
    End If
    Dim PrinterColorMode As PrinterColorMode = oGdPicturePDF.PrintGetColorMode()
    If PrinterColorMode &lt;&gt; GdPicture12.PrinterColorMode.PrinterColorModeColor Then
       oGdPicturePDF.PrintSetColorMode(GdPicture12.PrinterColorMode.PrinterColorModeColor)
    End If
    Dim PrinterCopies As Integer = oGdPicturePDF.PrintGetCopies()
    If PrinterCopies &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetCopies(1)
    End If
    Dim PrinterDocumentName As String = oGdPicturePDF.PrintGetDocumentName()
    If PrinterDocumentName &lt;&gt; "GdPicture" Then
       oGdPicturePDF.PrintSetDocumentName("GdPicture")
    End If
    Dim PrinterDuplex As Duplex = oGdPicturePDF.PrintGetDuplexMode()
    If PrinterDuplex &lt;&gt; Duplex.Default Then
       oGdPicturePDF.PrintSetDuplexMode(Duplex.Default)
    End If
    Dim PrinterOrientation As PrinterOrientation = oGdPicturePDF.PrintGetOrientation()
    If PrinterOrientation &lt;&gt; GdPicture12.PrinterOrientation.PrinterOrientationPortrait Then
       oGdPicturePDF.PrintSetOrientation(GdPicture12.PrinterOrientation.PrinterOrientationPortrait)
    End If
    Dim PrinterPaperBin As Integer = oGdPicturePDF.PrintGetPaperBin()
    If PrinterPaperBin &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetPaperBin(1)
    End If
    Dim PrinterPaperSize As Integer = oGdPicturePDF.PrintGetPaperSize()
    If PrinterPaperSize &lt;&gt; 9 Then
       Dim ps As New PaperSize("A4", 850, 1100)
       oGdPicturePDF.PrintSetPaperSize(ps)
    End If
    Dim PrinterQuality As PrintQuality = oGdPicturePDF.PrintGetQuality()
    If PrinterQuality &lt;&gt; PrintQuality.PrintQualityDraft Then
       oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    End If
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetUserPaperSize(System.Single,System.Single)">
      <summary>
 Sets a custom paper size to use by the active printer.
 </summary>
      <param name="PaperWidth">Custom paper width in Inches.</param>
      <param name="PaperHeight">Custom paper height in Inches.</param>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetPaperHeight">
      <summary>
 Gets the paper height used by the active printer.
 </summary>
      <returns>
 The paper height in Inches.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.PrintGetPaperSize" />
      <seealso cref="M:GdPicture12.GdPicturePDF.PrintGetPaperWidth" />
      <example>
        <code description="Getting the printer with the smallest margins." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim PrintersCount As Integer = oGdPicturePDF.PrintGetPrintersCount()
 Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
 Dim PrinterName As String = ""
 Dim PrinterLeftmargin As Single
 Dim PrinterTopmargin As Single
 Dim PrinterMinLeftmargin As Single = 999
 Dim PrinterMinTopmargin As Single = 999
 Dim PrinterPageWidth As Single = 0
 Dim PrintrPageHeight As Single = 0
 For PrinterNum As Integer = 1 To PrintersCount
    oGdPicturePDF.PrintSetActivePrinter(oGdPicturePDF.PrintGetPrinterName(PrinterNum))
    oGdPicturePDF.PrintGetMargins(PrinterLeftmargin, PrinterTopmargin)
    If (PrinterLeftmargin &lt; PrinterMinLeftmargin) Or (PrinterTopmargin &lt; PrinterMinTopmargin) Then
       PrinterName = oGdPicturePDF.PrintGetPrinterName(PrinterNum)
       PrinterMinLeftmargin = PrinterLeftmargin
       PrinterMinTopmargin = PrinterTopmargin
       PrinterPageWidth = oGdPicturePDF.PrintGetPaperWidth()
       PrintrPageHeight = oGdPicturePDF.PrintGetPaperHeight()
    End If
 Next
 oGdPicturePDF.PrintSetActivePrinter(CurPrinter)
 MessageBox.Show("Printer with the smallest margins : " + PrinterName + vbCrLf +
 "Page dimensions : " + PrinterPageWidth.ToString() + "/" + PrintrPageHeight.ToString())
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetPaperWidth">
      <summary>
 Gets the paper width used by the active printer.
 </summary>
      <returns>
 The paper width in Inches.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.PrintGetPaperSize" />
      <seealso cref="M:GdPicture12.GdPicturePDF.PrintGetPaperHeight" />
      <example>
        <code description="Getting the printer with the smallest margins." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim PrintersCount As Integer = oGdPicturePDF.PrintGetPrintersCount()
 Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
 Dim PrinterName As String = ""
 Dim PrinterLeftmargin As Single
 Dim PrinterTopmargin As Single
 Dim PrinterMinLeftmargin As Single = 999
 Dim PrinterMinTopmargin As Single = 999
 Dim PrinterPageWidth As Single = 0
 Dim PrintrPageHeight As Single = 0
 For PrinterNum As Integer = 1 To PrintersCount
    oGdPicturePDF.PrintSetActivePrinter(oGdPicturePDF.PrintGetPrinterName(PrinterNum))
    oGdPicturePDF.PrintGetMargins(PrinterLeftmargin, PrinterTopmargin)
    If (PrinterLeftmargin &lt; PrinterMinLeftmargin) Or (PrinterTopmargin &lt; PrinterMinTopmargin) Then
       PrinterName = oGdPicturePDF.PrintGetPrinterName(PrinterNum)
       PrinterMinLeftmargin = PrinterLeftmargin
       PrinterMinTopmargin = PrinterTopmargin
       PrinterPageWidth = oGdPicturePDF.PrintGetPaperWidth()
       PrintrPageHeight = oGdPicturePDF.PrintGetPaperHeight()
    End If
 Next
 oGdPicturePDF.PrintSetActivePrinter(CurPrinter)
 MessageBox.Show("Printer with the smallest margins : " + PrinterName + vbCrLf +
 "Page dimensions : " + PrinterPageWidth.ToString() + "/" + PrintrPageHeight.ToString())
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetAlignment">
      <summary>
 Gets the image alignment into the page during a print process.
 </summary>
      <returns>
 A member of the PrintAlignment enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.PrintSetAlignment(GdPicture12.PrintAlignment)" />
      <example>
        <code description="Setting the properties of the current printer before printing a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
    Dim PrinterAligment As PrintAlignment = oGdPicturePDF.PrintGetAlignment()
    If PrinterAligment &lt;&gt; PrintAlignment.PrintAlignmentDefault Then
       oGdPicturePDF.PrintSetAlignment(PrintAlignment.PrintAlignmentDefault)
    End If
    Dim PrinterColorMode As PrinterColorMode = oGdPicturePDF.PrintGetColorMode()
    If PrinterColorMode &lt;&gt; GdPicture12.PrinterColorMode.PrinterColorModeColor Then
       oGdPicturePDF.PrintSetColorMode(GdPicture12.PrinterColorMode.PrinterColorModeColor)
    End If
    Dim PrinterCopies As Integer = oGdPicturePDF.PrintGetCopies()
    If PrinterCopies &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetCopies(1)
    End If
    Dim PrinterDocumentName As String = oGdPicturePDF.PrintGetDocumentName()
    If PrinterDocumentName &lt;&gt; "GdPicture" Then
       oGdPicturePDF.PrintSetDocumentName("GdPicture")
    End If
    Dim PrinterDuplex As Duplex = oGdPicturePDF.PrintGetDuplexMode()
    If PrinterDuplex &lt;&gt; Duplex.Default Then
       oGdPicturePDF.PrintSetDuplexMode(Duplex.Default)
    End If
    Dim PrinterOrientation As PrinterOrientation = oGdPicturePDF.PrintGetOrientation()
    If PrinterOrientation &lt;&gt; GdPicture12.PrinterOrientation.PrinterOrientationPortrait Then
       oGdPicturePDF.PrintSetOrientation(GdPicture12.PrinterOrientation.PrinterOrientationPortrait)
    End If
    Dim PrinterPaperBin As Integer = oGdPicturePDF.PrintGetPaperBin()
    If PrinterPaperBin &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetPaperBin(1)
    End If
    Dim PrinterPaperSize As Integer = oGdPicturePDF.PrintGetPaperSize()
    If PrinterPaperSize &lt;&gt; 9 Then
       Dim ps As New PaperSize("A4", 850, 1100)
       oGdPicturePDF.PrintSetPaperSize(ps)
    End If
    Dim PrinterQuality As PrintQuality = oGdPicturePDF.PrintGetQuality()
    If PrinterQuality &lt;&gt; PrintQuality.PrintQualityDraft Then
       oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    End If
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetAlignment(GdPicture12.PrintAlignment)">
      <summary>
 Sets the image alignment into the page during a print process.
 </summary>
      <param name="ImageAlignment">A member of the PrintAlignment enumeration.</param>
      <seealso cref="M:GdPicture12.GdPicturePDF.PrintGetAlignment" />
      <example>
        <code description="Setting the properties of the current printer before printing a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
    Dim PrinterAligment As PrintAlignment = oGdPicturePDF.PrintGetAlignment()
    If PrinterAligment &lt;&gt; PrintAlignment.PrintAlignmentDefault Then
       oGdPicturePDF.PrintSetAlignment(PrintAlignment.PrintAlignmentDefault)
    End If
    Dim PrinterColorMode As PrinterColorMode = oGdPicturePDF.PrintGetColorMode()
    If PrinterColorMode &lt;&gt; GdPicture12.PrinterColorMode.PrinterColorModeColor Then
       oGdPicturePDF.PrintSetColorMode(GdPicture12.PrinterColorMode.PrinterColorModeColor)
    End If
    Dim PrinterCopies As Integer = oGdPicturePDF.PrintGetCopies()
    If PrinterCopies &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetCopies(1)
    End If
    Dim PrinterDocumentName As String = oGdPicturePDF.PrintGetDocumentName()
    If PrinterDocumentName &lt;&gt; "GdPicture" Then
       oGdPicturePDF.PrintSetDocumentName("GdPicture")
    End If
    Dim PrinterDuplex As Duplex = oGdPicturePDF.PrintGetDuplexMode()
    If PrinterDuplex &lt;&gt; Duplex.Default Then
       oGdPicturePDF.PrintSetDuplexMode(Duplex.Default)
    End If
    Dim PrinterOrientation As PrinterOrientation = oGdPicturePDF.PrintGetOrientation()
    If PrinterOrientation &lt;&gt; GdPicture12.PrinterOrientation.PrinterOrientationPortrait Then
       oGdPicturePDF.PrintSetOrientation(GdPicture12.PrinterOrientation.PrinterOrientationPortrait)
    End If
    Dim PrinterPaperBin As Integer = oGdPicturePDF.PrintGetPaperBin()
    If PrinterPaperBin &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetPaperBin(1)
    End If
    Dim PrinterPaperSize As Integer = oGdPicturePDF.PrintGetPaperSize()
    If PrinterPaperSize &lt;&gt; 9 Then
       Dim ps As New PaperSize("A4", 850, 1100)
       oGdPicturePDF.PrintSetPaperSize(ps)
    End If
    Dim PrinterQuality As PrintQuality = oGdPicturePDF.PrintGetQuality()
    If PrinterQuality &lt;&gt; PrintQuality.PrintQualityDraft Then
       oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    End If
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintSetAutoRotation(System.Boolean)">
      <summary>
 Determines if the object rotate automatically pages to fit on the output medium.
 </summary>
      <param name="AutoRotation">True for automatic rotation, else False.</param>
      <example>
        <code description="Printing two copies of a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    oGdPicturePDF.PrintSetColorMode(PrinterColorMode.PrinterColorModeColor)
    oGdPicturePDF.PrintSetDocumentName("GdPicture printing")
    oGdPicturePDF.PrintSetShowPrintingProgress(False)
    oGdPicturePDF.PrintSetPaperBin(1)   'upper bin
    oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    oGdPicturePDF.PrintSetCopies(2)
    oGdPicturePDF.PrintSetDuplexMode(Duplex.Horizontal)
    oGdPicturePDF.PrintSetStdPaperSize(9)   'A4
    oGdPicturePDF.PrintSetAutoRotation(True)
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetPaperSize">
      <summary>
 Returns the current paper size of the active printer.
 </summary>
      <returns>
 Paper size constant. Can be:
 <list type="bullet"><item><term>1</term><description>Letter, 8.5 x 11 in.</description></item><item><term>2</term><description>Letter Small, 8.5 x 11 in.</description></item><item><term>3</term><description>Tabloid, 11 x 17 in.</description></item><item><term>4</term><description>Ledger, 17 x 11 in.</description></item><item><term>5</term><description>Legal, 8.5 x 14 in.</description></item><item><term>6</term><description>Statement, 5 1/2 x 8 1/2 in.</description></item><item><term>7</term><description>Executive, 7 1/2 x 10 1/2 in.</description></item><item><term>8</term><description>A3, 297 x 420 mm</description></item><item><term>9</term><description>A4, 210 x 297 mm</description></item><item><term>10</term><description>A4 Small, 210 x 297 mm</description></item><item><term>11</term><description>A5, 148 x 210 mm</description></item><item><term>12</term><description>B4, 250 x 354 mm</description></item><item><term>13</term><description>B5, 182 x 257 mm</description></item><item><term>14</term><description>Folio, 8.5 x 13 in.</description></item><item><term>15</term><description>Quarto, 215 x 275 mm</description></item><item><term>16</term><description>10 x 14 in.</description></item><item><term>17</term><description>11 x 17 in.</description></item><item><term>18</term><description>Note, 8.5 x 11 in.</description></item><item><term>19</term><description>Envelope #9, 3 7/8 x 8 7/8 in.</description></item><item><term>20</term><description>Envelope #10, 4 1/8 x 9.5 in.</description></item><item><term>21</term><description>Envelope #11, 4.5 x 10 3/8 in.</description></item><item><term>22</term><description>Envelope #12, 4.5 x 11 in.</description></item><item><term>23</term><description>Envelope #14, 5 x 11.5 in.</description></item><item><term>24</term><description>C size sheet</description></item><item><term>25</term><description>D size sheet</description></item><item><term>26</term><description>E size sheet</description></item><item><term>27</term><description>Envelope DL, 110 x 220 mm</description></item><item><term>28</term><description>Envelope C5, 162 x 229 mm</description></item><item><term>29</term><description>Envelope C3, 324 x 458 mm</description></item><item><term>30</term><description>Envelope C4, 229 x 324 mm</description></item><item><term>31</term><description>Envelope C6, 114 x 162 mm</description></item><item><term>32</term><description>Envelope C65, 114 x 229 mm</description></item><item><term>33</term><description>Envelope B4, 250 x 353 mm</description></item><item><term>34</term><description>Envelope B5, 176 x 250 mm</description></item><item><term>35</term><description>Envelope B6, 176 x 125 mm</description></item><item><term>36</term><description>Envelope, 110 x 230 mm</description></item><item><term>37</term><description>Envelope Monarch, 3 7/8 x 7.5 in.</description></item><item><term>38</term><description>Envelope, 3 5/8 x 6.5 in.</description></item><item><term>39</term><description>U.S. Standard Fanfold, 14 7/8 x 11 in.</description></item><item><term>40</term><description>German Standard Fanfold, 8.5 x 12 in.</description></item><item><term>41</term><description>German Legal Fanfold, 8 1/2 x 13 in.</description></item><item><term>42 to 68</term><description>Less-common international sizes.</description></item><item><term>Greater than 118</term><description>A custom paper size.</description></item></list></returns>
      <seealso cref="M:GdPicture12.GdPicturePDF.PrintGetPaperWidth" />
      <seealso cref="M:GdPicture12.GdPicturePDF.PrintGetPaperHeight" />
      <example>
        <code description="Setting the properties of the current printer before printing a PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile("test.pdf", False)
 If status = GdPictureStatus.OK Then
    Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
    Dim PrinterAligment As PrintAlignment = oGdPicturePDF.PrintGetAlignment()
    If PrinterAligment &lt;&gt; PrintAlignment.PrintAlignmentDefault Then
       oGdPicturePDF.PrintSetAlignment(PrintAlignment.PrintAlignmentDefault)
    End If
    Dim PrinterColorMode As PrinterColorMode = oGdPicturePDF.PrintGetColorMode()
    If PrinterColorMode &lt;&gt; GdPicture12.PrinterColorMode.PrinterColorModeColor Then
       oGdPicturePDF.PrintSetColorMode(GdPicture12.PrinterColorMode.PrinterColorModeColor)
    End If
    Dim PrinterCopies As Integer = oGdPicturePDF.PrintGetCopies()
    If PrinterCopies &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetCopies(1)
    End If
    Dim PrinterDocumentName As String = oGdPicturePDF.PrintGetDocumentName()
    If PrinterDocumentName &lt;&gt; "GdPicture" Then
       oGdPicturePDF.PrintSetDocumentName("GdPicture")
    End If
    Dim PrinterDuplex As Duplex = oGdPicturePDF.PrintGetDuplexMode()
    If PrinterDuplex &lt;&gt; Duplex.Default Then
       oGdPicturePDF.PrintSetDuplexMode(Duplex.Default)
    End If
    Dim PrinterOrientation As PrinterOrientation = oGdPicturePDF.PrintGetOrientation()
    If PrinterOrientation &lt;&gt; GdPicture12.PrinterOrientation.PrinterOrientationPortrait Then
       oGdPicturePDF.PrintSetOrientation(GdPicture12.PrinterOrientation.PrinterOrientationPortrait)
    End If
    Dim PrinterPaperBin As Integer = oGdPicturePDF.PrintGetPaperBin()
    If PrinterPaperBin &lt;&gt; 1 Then
       oGdPicturePDF.PrintSetPaperBin(1)
    End If
    Dim PrinterPaperSize As Integer = oGdPicturePDF.PrintGetPaperSize()
    If PrinterPaperSize &lt;&gt; 9 Then
       Dim ps As New PaperSize("A4", 850, 1100)
       oGdPicturePDF.PrintSetPaperSize(ps)
    End If
    Dim PrinterQuality As PrintQuality = oGdPicturePDF.PrintGetQuality()
    If PrinterQuality &lt;&gt; PrintQuality.PrintQualityDraft Then
       oGdPicturePDF.PrintSetQuality(PrintQuality.PrintQualityDraft)
    End If
    oGdPicturePDF.PrintSetFromToPage(1, oGdPicturePDF.GetPageCount())
    status = oGdPicturePDF.Print()
    If status = GdPictureStatus.OK Then
       MessageBox.Show("The PDF is printed")
    Else
       MessageBox.Show("The PDF is not printed. " + oGdPicturePDF.PrintGetLastError())
    End If
 Else
    MessageBox.Show("The file can't be opened")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.PrintGetMargins(System.Single@,System.Single@)">
      <summary>
 Gets the physical margins of the active printer.
 </summary>
      <param name="LeftMargin">Returns the left physical margin in inches.</param>
      <param name="TopMargin">Returns the top physical margin in inches.</param>
      <example>
        <code description="Getting the printer with the smallest margins." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim PrintersCount As Integer = oGdPicturePDF.PrintGetPrintersCount()
 Dim CurPrinter As String = oGdPicturePDF.PrintGetActivePrinter()
 Dim PrinterName As String = ""
 Dim PrinterLeftmargin As Single
 Dim PrinterTopmargin As Single
 Dim PrinterMinLeftmargin As Single = 999
 Dim PrinterMinTopmargin As Single = 999
 Dim PrinterPageWidth As Single = 0
 Dim PrintrPageHeight As Single = 0
 For PrinterNum As Integer = 1 To PrintersCount
    oGdPicturePDF.PrintSetActivePrinter(oGdPicturePDF.PrintGetPrinterName(PrinterNum))
    oGdPicturePDF.PrintGetMargins(PrinterLeftmargin, PrinterTopmargin)
    If (PrinterLeftmargin &lt; PrinterMinLeftmargin) Or (PrinterTopmargin &lt; PrinterMinTopmargin) Then
       PrinterName = oGdPicturePDF.PrintGetPrinterName(PrinterNum)
       PrinterMinLeftmargin = PrinterLeftmargin
       PrinterMinTopmargin = PrinterTopmargin
       PrinterPageWidth = oGdPicturePDF.PrintGetPaperWidth()
       PrintrPageHeight = oGdPicturePDF.PrintGetPaperHeight()
    End If
 Next
 oGdPicturePDF.PrintSetActivePrinter(CurPrinter)
 MessageBox.Show("Printer with the smallest margins : " + PrinterName + vbCrLf +
 "Page dimensions : " + PrinterPageWidth.ToString() + "/" + PrintrPageHeight.ToString())
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetOCGCount">
      <summary>
 Returns the number of optional content group entries in the PDF.
 </summary>
      <returns>The number of optional content groups.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="How to enumerate all optional content groups an their properties in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim ocgCount As Integer = oGdPicturePDF.GetOCGCount()
 Dim ListOcgTitle As String = ""
 For x As Integer = 0 To ocgCount - 1
     Dim OcgId As Integer = oGdPicturePDF.GetOCG(x)
     Dim ZoomMinValue As Double = oGdPicturePDF.GetOcgZoomMin(OcgId)
     Dim ZoomMaxValue As Double = oGdPicturePDF.GetOcgZoomMax(OcgId)
     Dim ZoomMinStr As String = String.Format("{0:0.00}", ZoomMinValue)
     Dim ZoomMaxStr As String = String.Format("{0:0.00}", ZoomMaxValue)
     ListOcgTitle = ListOcgTitle +
             oGdPicturePDF.GetOCGTitle(OcgId) + vbTab +
             oGdPicturePDF.GetOCGViewState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGPrintState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGExportState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGLockedState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGIntentView(OcgId).ToString() + vbTab +
             ZoomMinStr + vbTab +
             ZoomMaxStr + vbTab +
             vbCr
 Next
 oGdPicturePDF.Dispose()
 MessageBox.Show("OCG count : " + ocgCount.ToString() + vbCrLf + ListOcgTitle)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetOCG(System.Int32)">
      <summary>
 Returns the ID of an optional content group by its index.
 </summary>
      <param name="OCGIdx">The index of the optional content group. Must be a value between 0 and GetOCGCount() -1.</param>
      <returns>The ID of the returned optional content group.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="How to enumerate all optional content groups an their properties in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim ocgCount As Integer = oGdPicturePDF.GetOCGCount()
 Dim ListOcgTitle As String = ""
 For x As Integer = 0 To ocgCount - 1
     Dim OcgId As Integer = oGdPicturePDF.GetOCG(x)
     Dim ZoomMinValue As Double = oGdPicturePDF.GetOcgZoomMin(OcgId)
     Dim ZoomMaxValue As Double = oGdPicturePDF.GetOcgZoomMax(OcgId)
     Dim ZoomMinStr As String = String.Format("{0:0.00}", ZoomMinValue)
     Dim ZoomMaxStr As String = String.Format("{0:0.00}", ZoomMaxValue)
     ListOcgTitle = ListOcgTitle +
             oGdPicturePDF.GetOCGTitle(OcgId) + vbTab +
             oGdPicturePDF.GetOCGViewState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGPrintState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGExportState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGLockedState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGIntentView(OcgId).ToString() + vbTab +
             ZoomMinStr + vbTab +
             ZoomMaxStr + vbTab +
             vbCr
 Next
 oGdPicturePDF.Dispose()
 MessageBox.Show("OCG count : " + ocgCount.ToString() + vbCrLf + ListOcgTitle)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetOCGTitle(System.Int32)">
      <summary>
 Returns the title of a specified optional content group, by its ID.
 </summary>
      <param name="OCGId">The ID of the optional content group from which the title must be obtained.</param>
      <returns>the title of the optional content group.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="How to enumerate all optional content groups an their properties in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim ocgCount As Integer = oGdPicturePDF.GetOCGCount()
 Dim ListOcgTitle As String = ""
 For x As Integer = 0 To ocgCount - 1
     Dim OcgId As Integer = oGdPicturePDF.GetOCG(x)
     Dim ZoomMinValue As Double = oGdPicturePDF.GetOcgZoomMin(OcgId)
     Dim ZoomMaxValue As Double = oGdPicturePDF.GetOcgZoomMax(OcgId)
     Dim ZoomMinStr As String = String.Format("{0:0.00}", ZoomMinValue)
     Dim ZoomMaxStr As String = String.Format("{0:0.00}", ZoomMaxValue)
     ListOcgTitle = ListOcgTitle +
             oGdPicturePDF.GetOCGTitle(OcgId) + vbTab +
             oGdPicturePDF.GetOCGViewState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGPrintState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGExportState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGLockedState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGIntentView(OcgId).ToString() + vbTab +
             ZoomMinStr + vbTab +
             ZoomMaxStr + vbTab +
             vbCr
 Next
 oGdPicturePDF.Dispose()
 MessageBox.Show("OCG count : " + ocgCount.ToString() + vbCrLf + ListOcgTitle)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetOCGTitle(System.Int32,System.String)">
      <summary>
 Sets the title of a specified optional content group, by its ID.
 </summary>
      <param name="OCGId">The ID of the optional content group in which the title is to be set.</param>
      <param name="Title">The title of the optional content group.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="How to create an optional content group and link it to an image in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim OcgId1 = oGdPicturePDF.NewOCG("First ocg linked with image")
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
 Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.DrawImage(image_res_name, 10, 10, 5, 5)
 oGdPicturePDF.SetImageOptional(image_res_name, OcgId1)
 oGdPicturePDF.SetOCGExportState(OcgId1, PdfOcgState.StateOff)
 oGdPicturePDF.SetOCGLockedState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGPrintState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGViewState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGZoomMin(OcgId1, 0.75F)
 oGdPicturePDF.SetOCGZoomMax(OcgId1, 1.25F)
 oGdPicturePDF.SaveToFile("test_OCG_Image.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetOCGLockedState(System.Int32)">
      <summary>
 Returns the Locked state of a specific optional content group.
 Producers can use this state to prevent the visibility of this group from being changed by users.
 </summary>
      <param name="OCGId">The ID of the optional content group from which the Locked state must be obtained</param>
      <returns>Returns the Locked state of the optional content group.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="How to enumerate all optional content groups an their properties in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim ocgCount As Integer = oGdPicturePDF.GetOCGCount()
 Dim ListOcgTitle As String = ""
 For x As Integer = 0 To ocgCount - 1
     Dim OcgId As Integer = oGdPicturePDF.GetOCG(x)
     Dim ZoomMinValue As Double = oGdPicturePDF.GetOcgZoomMin(OcgId)
     Dim ZoomMaxValue As Double = oGdPicturePDF.GetOcgZoomMax(OcgId)
     Dim ZoomMinStr As String = String.Format("{0:0.00}", ZoomMinValue)
     Dim ZoomMaxStr As String = String.Format("{0:0.00}", ZoomMaxValue)
     ListOcgTitle = ListOcgTitle +
             oGdPicturePDF.GetOCGTitle(OcgId) + vbTab +
             oGdPicturePDF.GetOCGViewState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGPrintState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGExportState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGLockedState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGIntentView(OcgId).ToString() + vbTab +
             ZoomMinStr + vbTab +
             ZoomMaxStr + vbTab +
             vbCr
 Next
 oGdPicturePDF.Dispose()
 MessageBox.Show("OCG count : " + ocgCount.ToString() + vbCrLf + ListOcgTitle)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetOCGLockedState(System.Int32,System.Boolean)">
      <summary>
 Sets the Locked state of a specific optional content group.
 Producers can use this state to prevent the visibility of this group from being changed by users.
 </summary>
      <param name="OCGId">The ID of the optional content group in which the Locked state must be set.</param>
      <param name="Locked">The Locked state to set to the optional content group.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="How to create an optional content group and link it to an image in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim OcgId1 = oGdPicturePDF.NewOCG("First ocg linked with image")
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
 Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.DrawImage(image_res_name, 10, 10, 5, 5)
 oGdPicturePDF.SetImageOptional(image_res_name, OcgId1)
 oGdPicturePDF.SetOCGExportState(OcgId1, PdfOcgState.StateOff)
 oGdPicturePDF.SetOCGLockedState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGPrintState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGViewState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGZoomMin(OcgId1, 0.75F)
 oGdPicturePDF.SetOCGZoomMax(OcgId1, 1.25F)
 oGdPicturePDF.SaveToFile("test_OCG_Image.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetOCGViewState(System.Int32)">
      <summary>
 Returns the View state of a specific optional content group.
 </summary>
      <param name="OCGId">The ID of the optional content group from which the View state must be obtained.</param>
      <returns>A member of the PdfOcgState enumeration.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="How to enumerate all optional content groups an their properties in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim ocgCount As Integer = oGdPicturePDF.GetOCGCount()
 Dim ListOcgTitle As String = ""
 For x As Integer = 0 To ocgCount - 1
     Dim OcgId As Integer = oGdPicturePDF.GetOCG(x)
     Dim ZoomMinValue As Double = oGdPicturePDF.GetOcgZoomMin(OcgId)
     Dim ZoomMaxValue As Double = oGdPicturePDF.GetOcgZoomMax(OcgId)
     Dim ZoomMinStr As String = String.Format("{0:0.00}", ZoomMinValue)
     Dim ZoomMaxStr As String = String.Format("{0:0.00}", ZoomMaxValue)
     ListOcgTitle = ListOcgTitle +
             oGdPicturePDF.GetOCGTitle(OcgId) + vbTab +
             oGdPicturePDF.GetOCGViewState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGPrintState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGExportState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGLockedState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGIntentView(OcgId).ToString() + vbTab +
             ZoomMinStr + vbTab +
             ZoomMaxStr + vbTab +
             vbCr
 Next
 oGdPicturePDF.Dispose()
 MessageBox.Show("OCG count : " + ocgCount.ToString() + vbCrLf + ListOcgTitle)
 </code>
      </example>    ''' 
</member>
    <member name="M:GdPicture12.GdPicturePDF.SetOCGViewState(System.Int32,GdPicture12.PdfOcgState)">
      <summary>
 Sets the View state of a specific optional content group.
 </summary>
      <param name="OCGId">The ID of the optional content group in which the View state must be set.</param>
      <param name="ViewState">The View state to set to the optional content group. A member of the PdfOcgState enumeration.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="How to create an optional content group and link it to an image in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim OcgId1 = oGdPicturePDF.NewOCG("First ocg linked with image")
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
 Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.DrawImage(image_res_name, 10, 10, 5, 5)
 oGdPicturePDF.SetImageOptional(image_res_name, OcgId1)
 oGdPicturePDF.SetOCGExportState(OcgId1, PdfOcgState.StateOff)
 oGdPicturePDF.SetOCGLockedState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGPrintState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGViewState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGZoomMin(OcgId1, 0.75F)
 oGdPicturePDF.SetOCGZoomMax(OcgId1, 1.25F)
 oGdPicturePDF.SaveToFile("test_OCG_Image.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetOCGPrintState(System.Int32)">
      <summary>
 Returns the Print state of a specific optional content group.
 </summary>
      <param name="OCGId">The ID of the optional content group from which the Print state must be obtained.</param>
      <returns>A member of the PdfOcgState enumeration.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="How to enumerate all optional content groups an their properties in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim ocgCount As Integer = oGdPicturePDF.GetOCGCount()
 Dim ListOcgTitle As String = ""
 For x As Integer = 0 To ocgCount - 1
     Dim OcgId As Integer = oGdPicturePDF.GetOCG(x)
     Dim ZoomMinValue As Double = oGdPicturePDF.GetOcgZoomMin(OcgId)
     Dim ZoomMaxValue As Double = oGdPicturePDF.GetOcgZoomMax(OcgId)
     Dim ZoomMinStr As String = String.Format("{0:0.00}", ZoomMinValue)
     Dim ZoomMaxStr As String = String.Format("{0:0.00}", ZoomMaxValue)
     ListOcgTitle = ListOcgTitle +
             oGdPicturePDF.GetOCGTitle(OcgId) + vbTab +
             oGdPicturePDF.GetOCGViewState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGPrintState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGExportState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGLockedState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGIntentView(OcgId).ToString() + vbTab +
             ZoomMinStr + vbTab +
             ZoomMaxStr + vbTab +
             vbCr
 Next
 oGdPicturePDF.Dispose()
 MessageBox.Show("OCG count : " + ocgCount.ToString() + vbCrLf + ListOcgTitle)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetOCGPrintState(System.Int32,GdPicture12.PdfOcgState)">
      <summary>
 Sets the Print state of a specific optional content group.
 </summary>
      <param name="OCGId">The ID of the optional content group in which the Print state must be set.</param>
      <param name="PrintState">A member of the PdfOcgState enumeration. The Print state to set to the optional content group.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="How to create an optional content group and link it to an image in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim OcgId1 = oGdPicturePDF.NewOCG("First ocg linked with image")
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
 Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.DrawImage(image_res_name, 10, 10, 5, 5)
 oGdPicturePDF.SetImageOptional(image_res_name, OcgId1)
 oGdPicturePDF.SetOCGExportState(OcgId1, PdfOcgState.StateOff)
 oGdPicturePDF.SetOCGLockedState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGPrintState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGViewState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGZoomMin(OcgId1, 0.75F)
 oGdPicturePDF.SetOCGZoomMax(OcgId1, 1.25F)
 oGdPicturePDF.SaveToFile("test_OCG_Image.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetOCGExportState(System.Int32)">
      <summary>
 Returns the Export state of a specific optional content group.
 </summary>
      <param name="OCGId">The ID of the optional content group from which the Export state must be obtained.</param>
      <returns>A member of the PdfOcgState enumeration.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="How to enumerate all optional content groups an their properties in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim ocgCount As Integer = oGdPicturePDF.GetOCGCount()
 Dim ListOcgTitle As String = ""
 For x As Integer = 0 To ocgCount - 1
     Dim OcgId As Integer = oGdPicturePDF.GetOCG(x)
     Dim ZoomMinValue As Double = oGdPicturePDF.GetOcgZoomMin(OcgId)
     Dim ZoomMaxValue As Double = oGdPicturePDF.GetOcgZoomMax(OcgId)
     Dim ZoomMinStr As String = String.Format("{0:0.00}", ZoomMinValue)
     Dim ZoomMaxStr As String = String.Format("{0:0.00}", ZoomMaxValue)
     ListOcgTitle = ListOcgTitle +
             oGdPicturePDF.GetOCGTitle(OcgId) + vbTab +
             oGdPicturePDF.GetOCGViewState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGPrintState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGExportState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGLockedState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGIntentView(OcgId).ToString() + vbTab +
             ZoomMinStr + vbTab +
             ZoomMaxStr + vbTab +
             vbCr
 Next
 oGdPicturePDF.Dispose()
 MessageBox.Show("OCG count : " + ocgCount.ToString() + vbCrLf + ListOcgTitle)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetOCGExportState(System.Int32,GdPicture12.PdfOcgState)">
      <summary>
 Sets the Export state of a specific optional content group.
 </summary>
      <param name="OCGId">The ID of the optional content group in which the Export state must be set.</param>
      <param name="ExportState">A member of the PdfOcgState enumeration. The Export state to set to the optional content group.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="How to create an optional content group and link it to an image in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim OcgId1 = oGdPicturePDF.NewOCG("First ocg linked with image")
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
 Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.DrawImage(image_res_name, 10, 10, 5, 5)
 oGdPicturePDF.SetImageOptional(image_res_name, OcgId1)
 oGdPicturePDF.SetOCGExportState(OcgId1, PdfOcgState.StateOff)
 oGdPicturePDF.SetOCGLockedState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGPrintState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGViewState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGZoomMin(OcgId1, 0.75F)
 oGdPicturePDF.SetOCGZoomMax(OcgId1, 1.25F)
 oGdPicturePDF.SaveToFile("test_OCG_Image.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetOcgZoomMin(System.Int32)">
      <summary>
 Returns the minimum value of the range of magnifications at which the content of an optional content group is best viewed, by its ID.
 </summary>
      <param name="OCGId">The ID of the optional content group from which the best-viewed zoom range must be obtained.</param>
      <returns>The minimum value of the zoom range.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="How to enumerate all optional content groups an their properties in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim ocgCount As Integer = oGdPicturePDF.GetOCGCount()
 Dim ListOcgTitle As String = ""
 For x As Integer = 0 To ocgCount - 1
     Dim OcgId As Integer = oGdPicturePDF.GetOCG(x)
     Dim ZoomMinValue As Double = oGdPicturePDF.GetOcgZoomMin(OcgId)
     Dim ZoomMaxValue As Double = oGdPicturePDF.GetOcgZoomMax(OcgId)
     Dim ZoomMinStr As String = String.Format("{0:0.00}", ZoomMinValue)
     Dim ZoomMaxStr As String = String.Format("{0:0.00}", ZoomMaxValue)
     ListOcgTitle = ListOcgTitle +
             oGdPicturePDF.GetOCGTitle(OcgId) + vbTab +
             oGdPicturePDF.GetOCGViewState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGPrintState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGExportState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGLockedState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGIntentView(OcgId).ToString() + vbTab +
             ZoomMinStr + vbTab +
             ZoomMaxStr + vbTab +
             vbCr
 Next
 oGdPicturePDF.Dispose()
 MessageBox.Show("OCG count : " + ocgCount.ToString() + vbCrLf + ListOcgTitle)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetOCGZoomMin(System.Int32,System.Single)">
      <summary>
 Sets the mininum value of the range of magnifications at which the content of an optional content group is best viewed.
 </summary>
      <param name="OCGId">The ID of the optional content group from which the best-viewed zoom range must be obtained.</param>
      <param name="ZoomMin">The mininum zoom to set to the optional content group.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="How to create an optional content group and link it to an image in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim OcgId1 = oGdPicturePDF.NewOCG("First ocg linked with image")
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
 Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.DrawImage(image_res_name, 10, 10, 5, 5)
 oGdPicturePDF.SetImageOptional(image_res_name, OcgId1)
 oGdPicturePDF.SetOCGExportState(OcgId1, PdfOcgState.StateOff)
 oGdPicturePDF.SetOCGLockedState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGPrintState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGViewState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGZoomMin(OcgId1, 0.75F)
 oGdPicturePDF.SetOCGZoomMax(OcgId1, 1.25F)
 oGdPicturePDF.SaveToFile("test_OCG_Image.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetOcgZoomMax(System.Int32)">
      <summary>
 Returns the maximum value of the range of magnifications at which the content of an optional content group is best viewed, by its ID.
 </summary>
      <param name="OCGId">The ID of the optional content group from which the best-viewed zoom range must be obtained.</param>
      <returns>the maximum value of the zoom range.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="How to enumerate all optional content groups an their properties in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim ocgCount As Integer = oGdPicturePDF.GetOCGCount()
 Dim ListOcgTitle As String = ""
 For x As Integer = 0 To ocgCount - 1
     Dim OcgId As Integer = oGdPicturePDF.GetOCG(x)
     Dim ZoomMinValue As Double = oGdPicturePDF.GetOcgZoomMin(OcgId)
     Dim ZoomMaxValue As Double = oGdPicturePDF.GetOcgZoomMax(OcgId)
     Dim ZoomMinStr As String = String.Format("{0:0.00}", ZoomMinValue)
     Dim ZoomMaxStr As String = String.Format("{0:0.00}", ZoomMaxValue)
     ListOcgTitle = ListOcgTitle +
             oGdPicturePDF.GetOCGTitle(OcgId) + vbTab +
             oGdPicturePDF.GetOCGViewState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGPrintState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGExportState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGLockedState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGIntentView(OcgId).ToString() + vbTab +
             ZoomMinStr + vbTab +
             ZoomMaxStr + vbTab +
             vbCr
 Next
 oGdPicturePDF.Dispose()
 MessageBox.Show("OCG count : " + ocgCount.ToString() + vbCrLf + ListOcgTitle)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetOCGZoomMax(System.Int32,System.Single)">
      <summary>
 Sets the maximum value of the range of magnifications at which the content of an optional content group is best viewed.
 </summary>
      <param name="OCGId">The ID of the optional content group from which the best-viewed zoom range must be obtained.</param>
      <param name="ZoomMax">The maximum zoom to set to the optional content group.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="How to create an optional content group and link it to an image in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim OcgId1 = oGdPicturePDF.NewOCG("First ocg linked with image")
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
 Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.DrawImage(image_res_name, 10, 10, 5, 5)
 oGdPicturePDF.SetImageOptional(image_res_name, OcgId1)
 oGdPicturePDF.SetOCGExportState(OcgId1, PdfOcgState.StateOff)
 oGdPicturePDF.SetOCGLockedState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGPrintState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGViewState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGZoomMin(OcgId1, 0.75F)
 oGdPicturePDF.SetOCGZoomMax(OcgId1, 1.25F)
 oGdPicturePDF.SaveToFileInc("test_OCG_Image.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.GetOCGIntentView(System.Int32)">
      <summary>
 Returns if the state of the Intent entry of a specified optional content group is View, by its ID.
 </summary>
      <param name="OCGId">The ID of the optional content group from which the intent-View must be obtained.</param>
      <returns>Returns a boolean that specifies if the optional content group is intended to be displayed.</returns>
      <remarks>
      </remarks>
      <example>
        <code description="How to enumerate all optional content groups an their properties in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim ocgCount As Integer = oGdPicturePDF.GetOCGCount()
 Dim ListOcgTitle As String = ""
 For x As Integer = 0 To ocgCount - 1
     Dim OcgId As Integer = oGdPicturePDF.GetOCG(x)
     Dim ZoomMinValue As Double = oGdPicturePDF.GetOcgZoomMin(OcgId)
     Dim ZoomMaxValue As Double = oGdPicturePDF.GetOcgZoomMax(OcgId)
     Dim ZoomMinStr As String = String.Format("{0:0.00}", ZoomMinValue)
     Dim ZoomMaxStr As String = String.Format("{0:0.00}", ZoomMaxValue)
     ListOcgTitle = ListOcgTitle +
             oGdPicturePDF.GetOCGTitle(OcgId) + vbTab +
             oGdPicturePDF.GetOCGViewState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGPrintState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGExportState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGLockedState(OcgId).ToString() + vbTab +
             oGdPicturePDF.GetOCGIntentView(OcgId).ToString() + vbTab +
             ZoomMinStr + vbTab +
             ZoomMaxStr + vbTab +
             vbCr
 Next
 oGdPicturePDF.Dispose()
 MessageBox.Show("OCG count : " + ocgCount.ToString() + vbCrLf + ListOcgTitle)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetImageOptional(System.String,System.Int32)">
      <summary>
 Links a specific image to a specific optional content group.
 </summary>
      <param name="ImageResName">The image resource name previously returned by the AdddBitmap() method.</param>
      <param name="OCGId">The ID of the optional content group with which the image must be associated.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="How to create an optional content group and link it to an image in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim OcgId1 = oGdPicturePDF.NewOCG("First ocg linked with image")
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
 Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.DrawImage(image_res_name, 10, 10, 5, 5)
 oGdPicturePDF.SetImageOptional(image_res_name, OcgId1)
 oGdPicturePDF.SetOCGExportState(OcgId1, PdfOcgState.StateOff)
 oGdPicturePDF.SetOCGLockedState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGPrintState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGViewState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGZoomMin(OcgId1, 0.75F)
 oGdPicturePDF.SetOCGZoomMax(OcgId1, 1.25F)
 oGdPicturePDF.SaveToFile("test_OCG_Image.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.SetFormFieldOptional(System.Int32,System.Int32)">
      <summary>
 Links a specific form-field to a specific optional content group.
 </summary>
      <param name="FieldId">The form field ID. Should be a value returned by GetFormFieldId(), GetFormFieldChildID() or AddTextFormField().</param>
      <param name="OCGId">The ID of the optional content group with which the image must be associated.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="How to create an optional content group and link it to a form field in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim OcgId1 = oGdPicturePDF.NewOCG("First ocg linked with FormField")
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 Dim fontResName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontCourier)
 Dim fieldID As Integer = oGdPicturePDF.AddTextFormField(1, 1, 5, 1, "Name", "Enter Your Name", False, fontResName, 12, 255, 0, 0)
 oGdPicturePDF.SetFormFieldBorderColor(fieldID, 0, 0, 255) 'Applying Blue border color
 oGdPicturePDF.SetFormFieldBackgroundColor(fieldID, 0, 255, 0) 'Applying Green background color (ugly but for demonstration purpose;))
 oGdPicturePDF.SetFormFieldOptional(fieldID, OcgId1)
 oGdPicturePDF.SetOCGExportState(OcgId1, PdfOcgState.StateOff)
 oGdPicturePDF.SetOCGLockedState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGPrintState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGViewState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGZoomMin(OcgId1, 0.75F)
 oGdPicturePDF.SetOCGZoomMax(OcgId1, 1.25F)
 oGdPicturePDF.SaveToFile("test_OCG_FormField.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.BeginMarkedContent(System.Int32)">
      <summary>
 Begins a marked-content sequence of operations associated to an optional content group.
 </summary>
      <param name="OCGId">The ID of the optional content group The optional content group associated to the marked-content.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="How to create an optional content group and use it for a content mark." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim FontName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontTimesRoman)
 Dim OcgId1 = oGdPicturePDF.NewOCG("First ocg starting a marked content")
 oGdPicturePDF.SetOCGExportState(OcgId1, PdfOcgState.StateOff)
 oGdPicturePDF.SetOCGLockedState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGPrintState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGViewState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGZoomMin(OcgId1, 0.75F)
 oGdPicturePDF.SetOCGZoomMax(OcgId1, 1.25F)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetLineColor(0, 0, 255)
 oGdPicturePDF.SetLineWidth(2)
 oGdPicturePDF.BeginMarkedContent(OcgId1)
 oGdPicturePDF.DrawRoundedRectangle(20, 20, 100, 50, 5, False, True)
 Dim TextToDraw As String = ""
 For x As Integer = 1 To 5
     TextToDraw = TextToDraw + "Line " + x.ToString() + vbCrLf
 Next
 TextToDraw = TextToDraw.Substring(0, TextToDraw.Length - 2)  'remove last vbcrlf
 status = oGdPicturePDF.DrawTextBox(FontName, 20, 20, 120, 72, TextAlignment.TextAlignmentCenter, TextAlignment.TextAlignmentCenter, TextToDraw, True)
 oGdPicturePDF.EndMarkedContent()
 oGdPicturePDF.SaveToFile("test_OCG_MarkedContent.pdf", False)
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.EndMarkedContent">
      <summary>
 Ends the latest marked-content.
 </summary>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="How to create an optional content group and use it for a content mark." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim status As GdPictureStatus = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim FontName As String = oGdPicturePDF.AddStandardFont(PdfStandardFont.PdfStandardFontTimesRoman)
 Dim OcgId1 = oGdPicturePDF.NewOCG("First ocg starting a marked content")
 oGdPicturePDF.SetOCGExportState(OcgId1, PdfOcgState.StateOff)
 oGdPicturePDF.SetOCGLockedState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGPrintState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGViewState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGZoomMin(OcgId1, 0.75F)
 oGdPicturePDF.SetOCGZoomMax(OcgId1, 1.25F)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitMillimeter)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetLineColor(0, 0, 255)
 oGdPicturePDF.SetLineWidth(2)
 oGdPicturePDF.BeginMarkedContent(OcgId1)
 oGdPicturePDF.DrawRoundedRectangle(20, 20, 100, 50, 5, False, True)
 Dim TextToDraw As String = ""
 For x As Integer = 1 To 5
     TextToDraw = TextToDraw + "Line " + x.ToString() + vbCrLf
 Next
 TextToDraw = TextToDraw.Substring(0, TextToDraw.Length - 2)  'remove last vbcrlf
 status = oGdPicturePDF.DrawTextBox(FontName, 20, 20, 120, 72, TextAlignment.TextAlignmentCenter, TextAlignment.TextAlignmentCenter, TextToDraw, True)
 oGdPicturePDF.EndMarkedContent()
 oGdPicturePDF.SaveToFile("test_OCG_MarkedContent.pdf", False)
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.NewOCG(System.String)">
      <summary>
 Creates a new optional content group.
 </summary>
      <param name="Title">The title of the optional content group.</param>
      <returns>The ID of the new optional content group.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
      <example>
        <code description="How to create an optional content group and link it to an image in an existing PDF." lang="VB.NET">
 Dim oGdPicturePDF As New GdPicturePDF()
 Dim oGdPictureImaging As New GdPictureImaging
 Dim status As GdPictureStatus = oGdPicturePDF.NewPDF()
 status = oGdPicturePDF.LoadFromFile(txtInputFile.Text, False)
 Dim OcgId1 = oGdPicturePDF.NewOCG("First ocg linked with image")
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
 Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
 oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
 oGdPicturePDF.DrawImage(image_res_name, 10, 10, 5, 5)
 oGdPicturePDF.SetImageOptional(image_res_name, OcgId1)
 oGdPicturePDF.SetOCGExportState(OcgId1, PdfOcgState.StateOff)
 oGdPicturePDF.SetOCGLockedState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGPrintState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGViewState(OcgId1, PdfOcgState.StateOn)
 oGdPicturePDF.SetOCGZoomMin(OcgId1, 0.75F)
 oGdPicturePDF.SetOCGZoomMax(OcgId1, 1.25F)
 oGdPicturePDF.SaveToFile("test_OCG_Image.pdf")
 oGdPicturePDF.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.DeleteOCG(System.Int32)">
      <summary>
 Deletes an optional content group.
 </summary>
      <param name="OCGId">The ID of the optional content group to be deleted.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPicturePDF.Dispose">
      <summary>
 This method disposes the GdPicturePDF object, by closing and releasing all related resources. This method implicitly call the CloseDocument() method.
 </summary>
    </member>
    <member name="E:GdPicture12.GdPicturePDF.OcrPagesProgress">
      <summary>
 Occurs after a page ocr process.
 </summary>
      <param name="Status">The page processing status. A member of the GdPictureStatus enumeration.</param>
      <param name="PageNo">The number of the processed page.</param>
      <param name="Processed">The number of pages already processed.</param>
      <param name="Count">The number of pages to be processed.</param>
      <param name="Cancel">Cancellation parameter. Switching it to true permits to cancel the process on pending pages.</param>
      <remarks>The event will be always triggered within the caller thread of the OcrPages() method.</remarks>
    </member>
    <member name="E:GdPicture12.GdPicturePDF.BeforePageOcr">
      <summary>
 Occurs before a page ocr process.
 </summary>
      <param name="PageNo">The number of the page to be processed.</param>
      <param name="Cancel">Cancellation parameter. Switching it to true permits to cancel the process on this specific page.</param>
      <remarks>The event will be always triggered within the caller thread of the OcrPages() method.</remarks>
    </member>
    <member name="E:GdPicture12.GdPicturePDF.OcrPagesDone">
      <summary>
 This event is raised when an OCR process started by the OcrPages() method is terminated.
 </summary>
      <param name="Status">The process status. A member of the GdPictureStatus enumeration.</param>
      <remarks>The event will be always triggered within the caller thread of the OcrPages() method.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderDoScan(System.Int32)">
      <summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method. This method uses best quality option.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 This method or an overload of it is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting all barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
             MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderDoScan(System.Int32,GdPicture12.Barcode1DReaderScanMode)">
      <summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method.
 This method accepts a parameter to specify the scanning mode (quality vs speed).
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ScanMode">A member of the Barcode1DReaderScanMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 This method or an overload of it is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting all barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
             MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderDoScan(System.Int32,GdPicture12.Barcode1DReaderScanMode,GdPicture12.Barcode1DReaderType,System.Boolean,System.Int32)">
      <summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method. This method accepts a parameter to specify the scanning mode (quality vs
 speed). This method also allows the user to specify the type of barcode type to be searched for.
 BarcodeTypes are stored in a BarcodeType enumeration in GdPicture. The user can also choose to define
 the number of barcodes expected, or ignore defining that number.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ScanMode">A member of the Barcode1DReaderScanMode enumeration.</param>
      <param name="BarcodeType">A member or a combination of members of the Barcode1DReaderType
 enumeration. Default value is Barcode1DReaderType.Barcode1DReaderNone meaning to search for all known barcode symbologies.</param>
      <param name="ReturnCorrupted">Specifies if the barcode scanner shall returns corrupted barcode. False
 by default. It is highly recommended to keep this option to False,
 otherwise invalid detected barcode can override valid barcode.
 Therefore, you should use it only in a second attempt when the first
 detection process did not detect any barcode.</param>
      <param name="ExpectedCount">Defines the minimum number of barcode expected to be detected. Using 0
 can result in a faster detection process but can produce a lower
 accuracy with poor quality barcode. Default value is 1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 This method or an overload of it is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
        <para>
 When reading Code128 symbology, if barcode checksum is missing or wrong, the barcode will be recognized as corrupted. To return the value nonetheless, please set ReturnCorrupted to true.
 </para>
      </remarks>
      <example>
        <code description="Detecting all barcodes symbologies in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
             MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
        <code description="Detecting all barcodes symbologies in an image." lang="C#">
 GdPictureImaging m_GdPictureImaging = new GdPictureImaging();
 int m_ImageID;
 m_ImageID = m_GdPictureImaging.CreateGdPictureImageFromFile(""); //Prompt the user to select an image
 if (m_ImageID != 0){
    if (m_GdPictureImaging.Barcode1DReaderDoScan(m_ImageID, Barcode1DReaderScanMode.BestQuality) == GdPictureStatus.OK){//Start barcode scanning process
       int m_BarcodeCount = m_GdPictureImaging.Barcode1DReaderGetBarcodeCount();
       if (m_BarcodeCount &gt; 0){
          for (int i = 1; i &lt;= m_BarcodeCount; i++){
             MessageBox.Show("Barcode No: " , i.ToString());
             MessageBox.Show("Barcode Type: " , m_GdPictureImaging.GetBarCodeType(i).ToString());
             MessageBox.Show("Value: " , m_GdPictureImaging.Barcode1DReaderGetBarcodeValue(i));
             MessageBox.Show("Angle: " , m_GdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i).ToString());
          }
       }
       else
       MessageBox.Show("No barcode detected !");
       m_GdPictureImaging.Barcode1DReaderClear(); //Release detection info from memory
    }
    m_GdPictureImaging.ReleaseGdPictureImage(m_ImageID);
 }
 </code>
      </example>
      <example>
        <code description="Detecting all barcodes of type Code39 and of type Code128 in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 Dim BarcodeType As Barcode1DReaderType
 Barcode1DReaderType = Barcode1DReaderType.Barcode1DReaderCode39  Or Barcode1DReaderType.Barcode1DReaderCode128
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID, Barcode1DReaderScanMode.BestQuality, BarcodeType, False, 1) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
        <code description="Detecting all barcodes of type Code39 and of type Code128 in an image." lang="C#">
 GdPictureImaging m_GdPictureImaging = new GdPictureImaging();
 int m_ImageID;
 Barcode1DReaderType m_BarcodeType;
 m_ImageID = m_GdPictureImaging.CreateGdPictureImageFromFile(""); //Prompt the user to select an image
 m_Barcode1DReaderType = Barcode1DReaderType.Barcode1DReaderCode39  | Barcode1DReaderType.Barcode1DReaderCode128;
 if (m_ImageID != 0){
    if (m_GdPictureImaging.Barcode1DReaderDoScan(m_ImageID, Barcode1DReaderScanMode.BestQuality, m_BarcodeType, false, 1) == GdPictureStatus.OK){//Start barcode scanning process
       int m_BarcodeCount = m_GdPictureImaging.Barcode1DReaderGetBarcodeCount();
       if (m_BarcodeCount &gt; 0){
          for (int i = 1; i &lt;= m_BarcodeCount; i++){
             MessageBox.Show("Barcode No: " , i.ToString());
             MessageBox.Show("Value: " , m_GdPictureImaging.Barcode1DReaderGetBarcodeValue(i));
             MessageBox.Show("Angle: " , m_GdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i).ToString());
          }
       }
       else
       MessageBox.Show("No barcode detected !");
       m_GdPictureImaging.Barcode1DReaderClear(); //Release detection info from memory
    }
    m_GdPictureImaging.ReleaseGdPictureImage(m_ImageID);
 }
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderGetBarcodeCount">
      <summary>
 Returns the number of barcode detected by the Barcode1DReaderDoScan method.
 </summary>
      <returns>
 The number of barcode detected.
 </returns>
      <example>
        <code description="Detecting all barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
             MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderGetBarcodeType(System.Int32)">
      <summary>
 Returns the type of a barcode detected by the Barcode1DReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned value.</param>
      <returns>
 A member of the Barcode1DReaderType enumeration.
 </returns>
      <example>
        <code description="Detecting all barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
             MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderCode128IsEAN(System.Int32)">
      <summary>
 Returns if a recognized code 128 is UCC/EAN-128.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned value.</param>
      <returns>True if the code is UCC/EAN-128, False othewise.</returns>
      <remarks>UCC/EAN-128 is not a separate bar code symbology. It is a Code 128 bar code with a specific structure.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderGetBarcodeValue(System.Int32)">
      <summary>
 Returns the value of a barcode detected by the Barcode1DReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode data.
 </returns>
      <example>
        <code description="Detecting all barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
             MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
        <para>
 For UCC / EAN-128 codes FNC1 control character is mapped to the &lt;GS&gt; char (ASCII code 29).
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderGetBarcodeValueRAW(System.Int32)">
      <summary>
 Returns the value of a barcode detected by the Barcode1DReaderDoScan method, in its raw format.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode data.
 </returns>
      <remarks>
        <para>
 Use the GetStat() method to check if this method has completed successfully.
 </para>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderGetBarcodeValueRAWBase64(System.Int32)">
      <summary>
 Returns the value of a barcode detected by the Barcode1DReaderDoScan method, in its raw format, encoded in a base64 string.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode data encoded in base64.
 </returns>
      <remarks>
        <para>
 Use the GetStat() method to check if this method has completed successfully.
 </para>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(System.Int32)">
      <summary>
 Returns the angle of a barcode detected by the Barcode1DReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode angle in degrees.
 </returns>
      <example>
        <code description="Detecting all barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
             MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderBarcodeHasChecksum(System.Int32)">
      <summary>
 Returns if a barcode detected by the Barcode1DReaderDoScan method has a checksum.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
 value.</param>
      <returns>
 True if the barcode has a checksum else False.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting all barcodes in an image, yet displaying the information of only those that have a CheckSum." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             If oGdPictureImaging.Barcode1DReaderBarcodeHasChecksum(i) Then
                MessageBox.show("Barcode No: " &amp; Str(i))
                MessageBox.show("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString())
                MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
                MessageBox.show("Angle: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i).ToString())
             End If
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderGetBarcodeX1(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the top-left corner of a barcode detected by the
 Barcode1DReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode X position of the top-left corner.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting all barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
             MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.Barcode1DReaderGetBarcodeCount
             X1 = oGdPictureImaging.Barcode1DReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.Barcode1DReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.Barcode1DReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.Barcode1DReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.Barcode1DReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.Barcode1DReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.Barcode1DReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.Barcode1DReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderGetBarcodeY1(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the top-left corner of a barcode detected by the
 Barcode1DReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode Y position of the top-left corner.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting all barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
             MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.Barcode1DReaderGetBarcodeCount
             X1 = oGdPictureImaging.Barcode1DReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.Barcode1DReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.Barcode1DReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.Barcode1DReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.Barcode1DReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.Barcode1DReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.Barcode1DReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.Barcode1DReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderGetBarcodeX2(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the top-right corner of a barcode detected by the
 Barcode1DReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode X position of the top-right corner.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting all barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
             MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.Barcode1DReaderGetBarcodeCount
             X1 = oGdPictureImaging.Barcode1DReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.Barcode1DReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.Barcode1DReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.Barcode1DReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.Barcode1DReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.Barcode1DReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.Barcode1DReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.Barcode1DReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderGetBarcodeY2(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the top-right corner of a barcode detected by the
 Barcode1DReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode Y position of the top-right corner.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting all barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
             MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.Barcode1DReaderGetBarcodeCount
             X1 = oGdPictureImaging.Barcode1DReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.Barcode1DReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.Barcode1DReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.Barcode1DReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.Barcode1DReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.Barcode1DReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.Barcode1DReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.Barcode1DReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderGetBarcodeX3(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the bottom-right corner of a barcode detected by the
 Barcode1DReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode X position of the bottom-right corner.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting all barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
             MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.Barcode1DReaderGetBarcodeCount
             X1 = oGdPictureImaging.Barcode1DReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.Barcode1DReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.Barcode1DReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.Barcode1DReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.Barcode1DReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.Barcode1DReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.Barcode1DReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.Barcode1DReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderGetBarcodeY3(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the bottom-right corner of a barcode detected by the
 Barcode1DReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode Y position of the bottom-right corner.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting all barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
             MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.Barcode1DReaderGetBarcodeCount
             X1 = oGdPictureImaging.Barcode1DReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.Barcode1DReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.Barcode1DReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.Barcode1DReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.Barcode1DReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.Barcode1DReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.Barcode1DReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.Barcode1DReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderGetBarcodeX4(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the bottom-left corner of a barcode detected by the
 Barcode1DReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode X position of the bottom-left corner.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting all barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
             MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.Barcode1DReaderGetBarcodeCount
             X1 = oGdPictureImaging.Barcode1DReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.Barcode1DReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.Barcode1DReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.Barcode1DReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.Barcode1DReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.Barcode1DReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.Barcode1DReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.Barcode1DReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderGetBarcodeY4(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the bottom-left corner of a barcode detected by the
 Barcode1DReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode Y position of the bottom-left corner.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting all barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
             MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.Barcode1DReaderGetBarcodeCount
             X1 = oGdPictureImaging.Barcode1DReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.Barcode1DReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.Barcode1DReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.Barcode1DReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.Barcode1DReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.Barcode1DReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.Barcode1DReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.Barcode1DReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DReaderClear">
      <summary>
 Releases from memory all information about latest 1D barcode detection.
 </summary>
      <example>
        <code description="Detecting all barcodes in an image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
             MessageBox.show("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PatchCodeReaderDoScan(System.Int32)">
      <summary>
 Starts a Patch Code recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 This method or an overload of it is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting Patch Code elements in an image" lang="VB.NET">
 Dim gdpictureImaging As New GdPictureImaging
 Dim ImageID As Integer = gdpictureImaging.CreateGdPictureImageFromFile("separator.tif")
 gdpictureImaging.PatchCodeReaderDoScan(ImageID)
 For i As Integer = 1 To gdpictureImaging.PatchCodeReaderGetCodeCount()
    MessageBox.Show("Patch Code no " + (i).ToString() + ": " + gdpictureImaging.PatchCodeReaderGetCodeType(i).ToString())
 Next i
 gdpictureImaging.ReleaseGdPictureImage(ImageID)
 gdpictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PatchCodeReaderGetCodeCount">
      <summary>
 Returns the number of Patch Code detected by the PatchCodeReaderDoScan method.
 </summary>
      <returns>
 The number of Patch Code detected.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting Patch Code elements in an image" lang="VB.NET">
 Dim gdpictureImaging As New GdPictureImaging
 Dim ImageID As Integer = gdpictureImaging.CreateGdPictureImageFromFile("separator.tif")
 gdpictureImaging.PatchCodeReaderDoScan(ImageID)
 For i As Integer = 1 To gdpictureImaging.PatchCodeReaderGetCodeCount()
    MessageBox.Show("Patch Code no " + (i).ToString() + ": " + gdpictureImaging.PatchCodeReaderGetCodeType(i).ToString())
 Next i
 gdpictureImaging.ReleaseGdPictureImage(ImageID)
 gdpictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PatchCodeReaderGetCodeType(System.Int32)">
      <summary>
 Returns the type of a Patch Code detected by the PatchCodeReaderDoScan method.
 </summary>
      <param name="PatchCodeNo">Patch Code index. Must be between 1 and PatchCodeReaderGetCodeCount returned
 value.</param>
      <returns>
 A member of the PatchCodeType enumeration.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting Patch Code elements in an image" lang="VB.NET">
 Dim gdpictureImaging As New GdPictureImaging
 Dim ImageID As Integer = gdpictureImaging.CreateGdPictureImageFromFile("separator.tif")
 gdpictureImaging.PatchCodeReaderDoScan(ImageID)
 For i As Integer = 1 To gdpictureImaging.PatchCodeReaderGetCodeCount()
    MessageBox.Show("Patch Code no " + (i).ToString() + ": " + gdpictureImaging.PatchCodeReaderGetCodeType(i).ToString())
 Next i
 gdpictureImaging.ReleaseGdPictureImage(ImageID)
 gdpictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PatchCodeReaderGetCodeX1(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the top-left corner of a Patch Code detected by the
 PatchCodeReaderDoScan method.
 </summary>
      <param name="PatchCodeNo">Patch Code index. Must be between 1 and PatchCodeReaderGetCodeCount returned
 value.</param>
      <returns>
 The Patch Code X position of the top-left corner.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting Patch Code elements in an image" lang="VB.NET">
 Dim gdpictureImaging As New GdPictureImaging
 Dim ImageID As Integer = gdpictureImaging.CreateGdPictureImageFromFile("separator.tif")
 gdpictureImaging.PatchCodeReaderDoScan(ImageID)
 For i As Integer = 1 To gdpictureImaging.PatchCodeReaderGetCodeCount()
    MessageBox.Show("Patch Code no " + (i).ToString() + ": " + gdpictureImaging.PatchCodeReaderGetCodeType(i).ToString())
 Next i
 gdpictureImaging.ReleaseGdPictureImage(ImageID)
 gdpictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PatchCodeReaderGetCodeY1(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the top-left corner of a Patch Code detected by the
 PatchCodeReaderDoScan method.
 </summary>
      <param name="PatchCodeNo">Patch Code index. Must be between 1 and PatchCodeReaderGetCodeCount returned
 value.</param>
      <returns>
 The Patch Code Y position of the top-left corner.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting Patch Code elements in an image" lang="VB.NET">
 Dim gdpictureImaging As New GdPictureImaging
 Dim ImageID As Integer = gdpictureImaging.CreateGdPictureImageFromFile("separator.tif")
 gdpictureImaging.PatchCodeReaderDoScan(ImageID)
 For i As Integer = 1 To gdpictureImaging.PatchCodeReaderGetCodeCount()
    MessageBox.Show("Patch Code no " + (i).ToString() + ": " + gdpictureImaging.PatchCodeReaderGetCodeType(i).ToString())
 Next i
 gdpictureImaging.ReleaseGdPictureImage(ImageID)
 gdpictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PatchCodeReaderGetCodeX2(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the top-right corner of a Patch Code detected by the
 PatchCodeReaderDoScan method.
 </summary>
      <param name="PatchCodeNo">Patch Code index. Must be between 1 and PatchCodeReaderGetCodeCount returned
 value.</param>
      <returns>
 The Patch Code X position of the top-right corner.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting Patch Code elements in an image" lang="VB.NET">
 Dim gdpictureImaging As New GdPictureImaging
 Dim ImageID As Integer = gdpictureImaging.CreateGdPictureImageFromFile("separator.tif")
 gdpictureImaging.PatchCodeReaderDoScan(ImageID)
 For i As Integer = 1 To gdpictureImaging.PatchCodeReaderGetCodeCount()
    MessageBox.Show("Patch Code no " + (i).ToString() + ": " + gdpictureImaging.PatchCodeReaderGetCodeType(i).ToString())
 Next i
 gdpictureImaging.ReleaseGdPictureImage(ImageID)
 gdpictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PatchCodeReaderGetCodeY2(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the top-right corner of a Patch Code detected by the
 PatchCodeReaderDoScan method.
 </summary>
      <param name="PatchCodeNo">Patch Code index. Must be between 1 and PatchCodeReaderGetCodeCount returned
 value.</param>
      <returns>
 The Patch Code Y position of the top-right corner.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting Patch Code elements in an image" lang="VB.NET">
 Dim gdpictureImaging As New GdPictureImaging
 Dim ImageID As Integer = gdpictureImaging.CreateGdPictureImageFromFile("separator.tif")
 gdpictureImaging.PatchCodeReaderDoScan(ImageID)
 For i As Integer = 1 To gdpictureImaging.PatchCodeReaderGetCodeCount()
    MessageBox.Show("Patch Code no " + (i).ToString() + ": " + gdpictureImaging.PatchCodeReaderGetCodeType(i).ToString())
 Next i
 gdpictureImaging.ReleaseGdPictureImage(ImageID)
 gdpictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PatchCodeReaderGetCodeX3(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the bottom-right corner of a Patch Code detected by the
 PatchCodeReaderDoScan method.
 </summary>
      <param name="PatchCodeNo">Patch Code index. Must be between 1 and PatchCodeReaderGetCodeCount returned
 value.</param>
      <returns>
 The Patch Code X position of the bottom-right corner.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting Patch Code elements in an image" lang="VB.NET">
 Dim gdpictureImaging As New GdPictureImaging
 Dim ImageID As Integer = gdpictureImaging.CreateGdPictureImageFromFile("separator.tif")
 gdpictureImaging.PatchCodeReaderDoScan(ImageID)
 For i As Integer = 1 To gdpictureImaging.PatchCodeReaderGetCodeCount()
    MessageBox.Show("Patch Code no " + (i).ToString() + ": " + gdpictureImaging.PatchCodeReaderGetCodeType(i).ToString())
 Next i
 gdpictureImaging.ReleaseGdPictureImage(ImageID)
 gdpictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PatchCodeReaderGetCodeY3(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the bottom-right corner of a Patch Code detected by the
 PatchCodeReaderDoScan method.
 </summary>
      <param name="PatchCodeNo">Patch Code index. Must be between 1 and PatchCodeReaderGetCodeCount returned
 value.</param>
      <returns>
 The Patch Code Y position of the bottom-right corner.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting Patch Code elements in an image" lang="VB.NET">
 Dim gdpictureImaging As New GdPictureImaging
 Dim ImageID As Integer = gdpictureImaging.CreateGdPictureImageFromFile("separator.tif")
 gdpictureImaging.PatchCodeReaderDoScan(ImageID)
 For i As Integer = 1 To gdpictureImaging.PatchCodeReaderGetCodeCount()
    MessageBox.Show("Patch Code no " + (i).ToString() + ": " + gdpictureImaging.PatchCodeReaderGetCodeType(i).ToString())
 Next i
 gdpictureImaging.ReleaseGdPictureImage(ImageID)
 gdpictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PatchCodeReaderGetCodeX4(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the bottom-left corner of a Patch Code detected by the
 PatchCodeReaderDoScan method.
 </summary>
      <param name="PatchCodeNo">Patch Code index. Must be between 1 and PatchCodeReaderGetCodeCount returned
 value.</param>
      <returns>
 The Patch Code X position of the bottom-left corner.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting Patch Code elements in an image" lang="VB.NET">
 Dim gdpictureImaging As New GdPictureImaging
 Dim ImageID As Integer = gdpictureImaging.CreateGdPictureImageFromFile("separator.tif")
 gdpictureImaging.PatchCodeReaderDoScan(ImageID)
 For i As Integer = 1 To gdpictureImaging.PatchCodeReaderGetCodeCount()
    MessageBox.Show("Patch Code no " + (i).ToString() + ": " + gdpictureImaging.PatchCodeReaderGetCodeType(i).ToString())
 Next i
 gdpictureImaging.ReleaseGdPictureImage(ImageID)
 gdpictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PatchCodeReaderGetCodeY4(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the bottom-left corner of a Patch Code detected by the
 PatchCodeReaderDoScan method.
 </summary>
      <param name="PatchCodeNo">Patch Code index. Must be between 1 and PatchCodeReaderGetCodeCount returned
 value.</param>
      <returns>
 The Patch Code Y position of the bottom-left corner.
 </returns>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting Patch Code elements in an image" lang="VB.NET">
 Dim gdpictureImaging As New GdPictureImaging
 Dim ImageID As Integer = gdpictureImaging.CreateGdPictureImageFromFile("separator.tif")
 gdpictureImaging.PatchCodeReaderDoScan(ImageID)
 For i As Integer = 1 To gdpictureImaging.PatchCodeReaderGetCodeCount()
    MessageBox.Show("Patch Code no " + (i).ToString() + ": " + gdpictureImaging.PatchCodeReaderGetCodeType(i).ToString())
 Next i
 gdpictureImaging.ReleaseGdPictureImage(ImageID)
 gdpictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PatchCodeReaderClear">
      <summary>
 Releases from memory all information about latest Patch Code Patch Code detection.
 </summary>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Detecting Patch Code elements in an image" lang="VB.NET">
 Dim gdpictureImaging As New GdPictureImaging
 Dim ImageID As Integer = gdpictureImaging.CreateGdPictureImageFromFile("separator.tif")
 gdpictureImaging.PatchCodeReaderDoScan(ImageID)
 For i As Integer = 1 To gdpictureImaging.PatchCodeReaderGetCodeCount()
    MessageBox.Show("Patch Code no " + (i).ToString() + ": " + gdpictureImaging.PatchCodeReaderGetCodeType(i).ToString())
 Next i
 gdpictureImaging.ReleaseGdPictureImage(ImageID)
 gdpictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderDoScan(System.Int32)">
      <summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Detecting all DataMatrix barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method or an overload of it is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderDoScan(System.Int32,GdPicture12.BarcodeDataMatrixReaderScanMode)">
      <summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method.
 This method accepts a parameter to specify the scanning mode (quality vs speed).
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ScanMode">A member of the BarcodeDataMatrixReaderScanMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Detecting all DataMatrix barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method or an overload of it is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderDoScan(System.Int32,GdPicture12.BarcodeDataMatrixReaderScanMode,System.Int32)">
      <summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method.
 This method accepts a parameter to specify the scanning mode (quality vs speed).
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ScanMode">A member of the BarcodeDataMatrixReaderScanMode enumeration.</param>
      <param name="ExpectedCount">Defines the  minimum number of barcode expected to be detected. Using 0 can result in a faster detection process but can produce a lower accuracy with poor quality barcode. Suggest value is 1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Detecting all DataMatrix barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method or an overload of it is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount">
      <summary>
 Returns the number of barcode detected by the BarcodeDataMatrixReaderDoScan method.
 </summary>
      <returns>
 The number of barcode detected.
 </returns>
      <example>
        <code description="Detecting all DataMatrix barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(System.Int32)">
      <summary>
 Returns the value of a barcode detected by the BarcodeDataMatrixReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode data.
 </returns>
      <example>
        <code description="Detecting all DataMatrix barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValueRAW(System.Int32)">
      <summary>
 Returns the value, as RAW Bytes, of a barcode detected by the BarcodeDataMatrixReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode data.
 </returns>
      <example>
        <code description="Detecting all DataMatrix barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging.
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 Use the GetStat() method to check if this method has completed successfully.
 </para>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValueRAWBase64(System.Int32)">
      <summary>
 Returns the value of a barcode detected by the BarcodeDataMatrixReaderDoScan method, in its raw format, encoded in a base64 string.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode data encoded in base64.
 </returns>
      <remarks>
        <para>
 Use the GetStat() method to check if this method has completed successfully.
 </para>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(System.Int32)">
      <summary>
 Returns the number of rows of a barcode detected by the BarcodeDataMatrixReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The number of rows of the barcode.
 </returns>
      <example>
        <code description="Detecting all DataMatrixs barcode in an image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(System.Int32)">
      <summary>
 Returns the angle of a barcode detected by the BarcodeDataMatrixReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode angle in degrees.
 </returns>
      <example>
        <code description="Detecting all DataMatrix barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(i)))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(System.Int32)">
      <summary>
 Returns the number of columns of a barcode detected by the BarcodeDataMatrixReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The number of columns of the barcode.
 </returns>
      <example>
        <code description="Detecting all DataMatrix barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(i)))
             MessageBox.show("Angle: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the top-left corner of a barcode detected by the
 BarcodeDataMatrixReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode X position of the top-left corner.
 </returns>
      <example>
        <code description="Detecting all DataMatrix barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the top-left corner of a barcode detected by the
 BarcodeDataMatrixReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode Y position of the top-left corner.
 </returns>
      <example>
        <code description="Detecting all DataMatrix barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the top-right corner of a barcode detected by the
 BarcodeDataMatrixReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode X position of the top-right corner.
 </returns>
      <example>
        <code description="Detecting all DataMatrix barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the top-right corner of a barcode detected by the
 BarcodeDataMatrixReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode Y position of the top-right corner.
 </returns>
      <example>
        <code description="Detecting all DataMatrix barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the bottom-right corner of a barcode detected by the
 BarcodeDataMatrixReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode X position of the bottom-right corner.
 </returns>
      <example>
        <code description="Detecting all DataMatrix barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the bottom-right corner of a barcode detected by the
 BarcodeDataMatrixReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode Y position of the bottom-right corner.
 </returns>
      <example>
        <code description="Detecting all DataMatrix barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the bottom-right corner of a barcode detected by the
 BarcodeDataMatrixReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode X position of the bottom-right corner.
 </returns>
      <example>
        <code description="Detecting all DataMatrix barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the bottom-left corner of a barcode detected by the
 BarcodeDataMatrixReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode Y position of the bottom-left corner.
 </returns>
      <example>
        <code description="Detecting all DataMatrix barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixReaderClear">
      <summary>
 Releases from memory all information about latest DataMatrix barcode detection.
 </summary>
      <example>
        <code description="Detecting all DataMatrix barcodes in an image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeSkewAngle(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderDoScan(System.Int32)">
      <summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging.
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method or an overload of it is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderDoScan(System.Int32,GdPicture12.BarcodePDF417ReaderScanMode)">
      <summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method.
 This method accepts a parameter to specify the scanning mode (quality vs speed).
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ScanMode">A member of the BarcodePDF417ReaderScanMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging.
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderDoScan(System.Int32,GdPicture12.BarcodePDF417ReaderScanMode,System.Int32)">
      <summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method.
 This method accepts a parameter to specify the scanning mode (quality vs speed).
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ScanMode">A member of the BarcodePDF417ReaderScanMode enumeration.</param>
      <param name="ExpectedCount">Defines the  minimum number of barcode expected to be detected. Using 0 can result in a faster detection process but can produce a lower accuracy with poor quality barcode. Suggest value is 1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging.
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderGetBarcodeCount">
      <summary>
 Returns the number of barcode detected by the BarcodePDF417ReaderDoScan method.
 </summary>
      <returns>
 The number of barcode detected.
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging.
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderGetBarcodeConfidence(System.Int32)">
      <summary>
 Returns the confidence of a barcode detected by the BarcodePDF417ReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodePDF417ReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode confidence. In the range [(less trust) 0 - 100 (full trust)]
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging.
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderGetBarcodeSkewAngle(System.Int32)">
      <summary>
 Returns the angle of a barcode detected by the BarcodePDF417ReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodePDF417ReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode angle in degrees.
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging.
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i).ToString())
             MessageBox.show("Columns: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i).ToString())
             MessageBox.show("Angle: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeSkewAngle(i).ToString())
             MessageBox.show("Confidence: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeConfidence(i).ToString())
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(System.Int32)">
      <summary>
 Returns the value, as string, of a barcode detected by the BarcodePDF417ReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodePDF417ReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode data.
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging.
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i).ToString())
             MessageBox.show("Columns: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i).ToString())
             MessageBox.show("Angle: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeSkewAngle(i).ToString())
             MessageBox.show("Confidence: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeConfidence(i).ToString())
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderGetBarcodeValueRAW(System.Int32)">
      <summary>
 Returns the value, as RAW Bytes, of a barcode detected by the BarcodePDF417ReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodePDF417ReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode data.
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging.
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 Use the GetStat() method to check if this method has completed successfully.
 </para>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderGetBarcodeValueRAWBase64(System.Int32)">
      <summary>
 Returns the value of a barcode detected by the BarcodePDF417ReaderDoScan method, in its raw format, encoded in a base64 string.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodePDF417ReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode data encoded in base64.
 </returns>
      <remarks>
        <para>
 Use the GetStat() method to check if this method has completed successfully.
 </para>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(System.Int32)">
      <summary>
 Returns the number of rows of a barcode detected by the BarcodePDF417ReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodePDF417ReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The number of rows of the barcode.
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging.
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i).ToString())
             MessageBox.show("Columns: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i).ToString())
             MessageBox.show("Angle: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeSkewAngle(i).ToString())
             MessageBox.show("Confidence: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeConfidence(i).ToString())
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(System.Int32)">
      <summary>
 Returns the number of columns of a barcode detected by the BarcodePDF417ReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodePDF417ReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The number of columns of the barcode.
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging.
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i).ToString())
             MessageBox.show("Columns: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i).ToString())
             MessageBox.show("Angle: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeSkewAngle(i).ToString())
             MessageBox.show("Confidence: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeConfidence(i).ToString())
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderGetBarcodeX1(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the top-left corner of a barcode detected by the
 BarcodePDF417ReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodePDF417ReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode X position of the top-left corner.
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderGetBarcodeY1(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the top-left corner of a barcode detected by the
 BarcodePDF417ReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodePDF417ReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode Y position of the top-left corner.
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderGetBarcodeX2(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the top-right corner of a barcode detected by the
 BarcodePDF417ReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodePDF417ReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode X position of the top-right corner.
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderGetBarcodeY2(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the top-right corner of a barcode detected by the
 BarcodePDF417ReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodePDF417ReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode Y position of the top-right corner.
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderGetBarcodeX3(System.Int32)">
      <summary>
 Returns the X position (in pixel) of the bottom-left corner of a barcode detected by the
 BarcodePDF417ReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodePDF417ReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode X position of the bottom-left corner.
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderGetBarcodeY3(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the bottom-left corner of a barcode detected by the
 BarcodePDF417ReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodePDF417ReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode Y position of the bottom-left corner.
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderGetBarcodeX4(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the bottom-right corner of a barcode detected by the
 BarcodePDF417ReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodePDF417ReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode X position of the bottom-right corner.
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderGetBarcodeY4(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the bottom-right corner of a barcode detected by the
 BarcodePDF417ReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodePDF417ReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode Y position of the bottom-right corner.
 </returns>
      <example>
        <code description="Detecting all PDF417 barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417ReaderClear">
      <summary>
 Releases from memory all information about latest PDF417 barcode detection.
 </summary>
      <example>
        <code description="Detecting all PDF417 barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodePDF417ReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start PDF417 barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodePDF417ReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodePDF417ReaderGetBarcodeColumns(i)))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodePDF417ReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodePDF417ReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodePDF417ReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderDoScan(System.Int32)">
      <summary>
 Starts a QR barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Detecting all QR barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method or an overload of it is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderDoScan(System.Int32,GdPicture12.BarcodeQRReaderScanMode)">
      <summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method.
 This method accepts a parameter to specify the scanning mode (quality vs speed).
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ScanMode">A member of the BarcodeQRReaderScanMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Detecting all QR barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method or an overload of it is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderDoScan(System.Int32,GdPicture12.BarcodeQRReaderScanMode,System.Int32)">
      <summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method.
 This method accepts a parameter to specify the scanning mode (quality vs speed).
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ScanMode">A member of the BarcodeQRReaderScanMode enumeration.</param>
      <param name="ExpectedCount">Defines the  minimum number of barcode expected to be detected. Using 0 can result in a faster detection process but can produce a lower accuracy with poor quality barcode. Suggest value is 1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Detecting all QR barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method or an overload of it is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderGetBarcodeCount">
      <summary>
 Returns the number of barcode detected by the BarcodeQRReaderDoScan method.
 </summary>
      <returns>
 The number of barcode detected.
 </returns>
      <example>
        <code description="Detecting all QR barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderGetBarcodeValue(System.Int32)">
      <summary>
 Returns the value of a barcode detected by the BarcodeQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode data.
 </returns>
      <example>
        <code description="Detecting all QR barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderGetBarcodeValueRAW(System.Int32)">
      <summary>
 Returns the value, as RAW Bytes, of a barcode detected by the BarcodeQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode data.
 </returns>
      <example>
        <code description="Detecting all QR barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging.
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
             MessageBox.show("Rows: " &amp; Str(oGdPictureImaging.BarcodeQRReaderGetBarcodeRows(i)))
             MessageBox.show("Columns: " &amp; Str(oGdPictureImaging.BarcodeQRReaderGetBarcodeColumns(i)))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 Use the GetStat() method to check if this method has completed successfully.
 </para>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderGetBarcodeValueRAWBase64(System.Int32)">
      <summary>
 Returns the value of a barcode detected by the BarcodeQRReaderDoScan method, in its raw format, encoded in a base64 string.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode data encoded in base64.
 </returns>
      <remarks>
        <para>
 Use the GetStat() method to check if this method has completed successfully.
 </para>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderGetBarcodeConfidence(System.Int32)">
      <summary>
 Returns the confidence of a barcode detected by the BarcodeQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode confidence. In the range [(less trust) 0 - 100 (full trust)]
 </returns>
      <example>
        <code description="Detecting all QR barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderGetBarcodeSkewAngle(System.Int32)">
      <summary>
 Returns the angle of a barcode detected by the BarcodeQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode angle in degrees.
 </returns>
      <example>
        <code description="Detecting all QR barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeSkewAngle(i).ToString())
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderGetVersion(System.Int32)">
      <summary>
 Returns the version of a barcode detected by the BarcodeQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The version of the barcode.
 </returns>
      <example>
        <code description="Detecting all QR barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderGetBarcodeX1(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the top-left corner of a barcode detected by the
 BarcodeQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode X position of the top-left corner.
 </returns>
      <example>
        <code description="Detecting all QR barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderGetBarcodeY1(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the top-left corner of a barcode detected by the
 BarcodeQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode Y position of the top-left corner.
 </returns>
      <example>
        <code description="Detecting all QR barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderGetBarcodeX2(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the top-right corner of a barcode detected by the
 BarcodeQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode X position of the top-right corner.
 </returns>
      <example>
        <code description="Detecting all QR barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderGetBarcodeY2(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the top-right corner of a barcode detected by the
 BarcodeQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode Y position of the top-right corner.
 </returns>
      <example>
        <code description="Detecting all QR barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderGetBarcodeX3(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the bottom-right corner of a barcode detected by the
 BarcodeQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode X position of the bottom-right corner.
 </returns>
      <example>
        <code description="Detecting all QR barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderGetBarcodeY3(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the bottom-left corner of a barcode detected by the
 BarcodeQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode Y position of the bottom-left corner.
 </returns>
      <example>
        <code description="Detecting all QR barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderGetBarcodeX4(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the bottom-left corner of a barcode detected by the
 BarcodeQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode X position of the bottom-left corner.
 </returns>
      <example>
        <code description="Detecting all QR barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderGetBarcodeY4(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the bottom-right corner of a barcode detected by the
 BarcodeQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode Y position of the bottom-right corner.
 </returns>
      <example>
        <code description="Detecting all QR barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRReaderClear">
      <summary>
 Releases from memory all information about latest QR barcode detection.
 </summary>
      <example>
        <code description="Detecting all QR barcodes in an image and then releasing the QR barcode information." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRReaderDoScan(System.Int32)">
      <summary>
 Starts a Micro QR barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Detecting all Micro QR barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeMicroQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start Micro QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(i))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeMicroQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method or an overload of it is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRReaderDoScan(System.Int32,GdPicture12.BarcodeQRReaderScanMode)">
      <summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method.
 This method accepts a parameter to specify the scanning mode (quality vs speed).
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ScanMode">A member of the BarcodeQRReaderScanMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Detecting all Micro QR barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeMicroQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start Micro QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(i))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeMicroQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method or an overload of it is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRReaderDoScan(System.Int32,GdPicture12.BarcodeQRReaderScanMode,System.Int32)">
      <summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method.
 This method accepts a parameter to specify the scanning mode (quality vs speed).
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ScanMode">A member of the BarcodeQRReaderScanMode enumeration.</param>
      <param name="ExpectedCount">Defines the  minimum number of barcode expected to be detected. Using 0 can result in a faster detection process but can produce a lower accuracy with poor quality barcode. Suggest value is 1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Detecting all Micro QR barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeMicroQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start Micro QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(i))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeMicroQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method or an overload of it is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount">
      <summary>
 Returns the number of barcode detected by the BarcodeMicroQRReaderDoScan method.
 </summary>
      <returns>
 The number of barcode detected.
 </returns>
      <example>
        <code description="Detecting all Micro QR barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeMicroQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start Micro QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(i))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeMicroQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(System.Int32)">
      <summary>
 Returns the value of a barcode detected by the BarcodeMicroQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeMicroQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode data.
 </returns>
      <example>
        <code description="Detecting all Micro QR barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeMicroQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start Micro QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(i))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeMicroQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRReaderGetBarcodeConfidence(System.Int32)">
      <summary>
 Returns the confidence of a barcode detected by the BarcodeMicroQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeMicroQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode confidence. In the range [(less trust) 0 - 100 (full trust)]
 </returns>
      <example>
        <code description="Detecting all Micro QR barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeMicroQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start Micro QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(i))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeMicroQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRReaderGetBarcodeSkewAngle(System.Int32)">
      <summary>
 Returns the angle of a barcode detected by the BarcodeMicroQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeMicroQRReaderGetBarcodeCount returned
 value.</param>
      <returns>
 The barcode angle in degrees.
 </returns>
      <example>
        <code description="Detecting all Micro QR barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeMicroQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start Micro QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(i))
             MessageBox.show("Angle: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeSkewAngle(i).ToString())
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeMicroQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRReaderGetVersion(System.Int32)">
      <summary>
 Returns the version of a barcode detected by the BarcodeMicroQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeMicroQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The version of the barcode.
 </returns>
      <example>
        <code description="Detecting all Micro QR barcodes in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeMicroQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start Micro QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(i))
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeMicroQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRReaderGetBarcodeX1(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the top-left corner of a barcode detected by the
 BarcodeMicroQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeMicroQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode X position of the top-left corner.
 </returns>
      <example>
        <code description="Detecting all Micro QR barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeMicroQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start Micro QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeMicroQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRReaderGetBarcodeY1(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the top-left corner of a barcode detected by the
 BarcodeMicroQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeMicroQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode Y position of the top-left corner.
 </returns>
      <example>
        <code description="Detecting all Micro QR barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeMicroQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start Micro QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeMicroQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRReaderGetBarcodeX2(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the top-right corner of a barcode detected by the
 BarcodeMicroQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeMicroQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode X position of the top-right corner.
 </returns>
      <example>
        <code description="Detecting all Micro QR barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeMicroQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start Micro QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeMicroQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRReaderGetBarcodeY2(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the top-right corner of a barcode detected by the
 BarcodeMicroQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeMicroQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode Y position of the top-right corner.
 </returns>
      <example>
        <code description="Detecting all Micro QR barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeMicroQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start Micro QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeMicroQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRReaderGetBarcodeX3(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the bottom-right corner of a barcode detected by the
 BarcodeMicroQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeMicroQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode X position of the bottom-right corner.
 </returns>
      <example>
        <code description="Detecting all Micro QR barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeMicroQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start Micro QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeMicroQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRReaderGetBarcodeY3(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the bottom-left corner of a barcode detected by the
 BarcodeMicroQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeMicroQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode Y position of the bottom-left corner.
 </returns>
      <example>
        <code description="Detecting all Micro QR barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeMicroQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start Micro QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeMicroQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRReaderGetBarcodeX4(System.Int32)">
      <summary>
 Returns the X position (in pixels) of the bottom-left corner of a barcode detected by the
 BarcodeMicroQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeMicroQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode X position of the bottom-left corner.
 </returns>
      <example>
        <code description="Detecting all Micro QR barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeMicroQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start Micro QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeMicroQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRReaderGetBarcodeY4(System.Int32)">
      <summary>
 Returns the Y position (in pixels) of the bottom-right corner of a barcode detected by the
 BarcodeMicroQRReaderDoScan method.
 </summary>
      <param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeMicroQRReaderGetBarcodeCount
 returned value.</param>
      <returns>
 The barcode Y position of the bottom-right corner.
 </returns>
      <example>
        <code description="Detecting all Micro QR barcodes in an image and drawing a rectangle around them." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeMicroQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start Micro QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeMicroQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRReaderClear">
      <summary>
 Releases from memory all information about latest Micro QR barcode detection.
 </summary>
      <example>
        <code description="Detecting all Micro QR barcodes in an image and then releasing the Micro QR barcode information." lang="VB.NET">
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.BarcodeMicroQRReaderDoScan(ImageID) = GdPictureStatus.OK Then
       'Start Micro QR barcode scanning process
       Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
       If BarcodeCount &gt; 0 Then
          For i As Integer = 1 To BarcodeCount
             MessageBox.show("Barcode No: " &amp; Str(i))
             MessageBox.show("Value: " &amp; oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeValue(i))
          Next
          Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
          For i = 1 To oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeCount
             X1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX1(i) + LeftArea
             X2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX2(i) + LeftArea
             X3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX3(i) + LeftArea
             X4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeX4(i) + LeftArea
             Y1 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY1(i) + TopArea
             Y2 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY2(i) + TopArea
             Y3 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY3(i) + TopArea
             Y4 = oGdPictureImaging.BarcodeMicroQRReaderGetBarcodeY4(i) + TopArea
             oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
             oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
          Next
       Else
          MessageBox.show("No barcode detected !")
       End If
       oGdPictureImaging.BarcodeMicroQRReaderClear() 'Release detection info from memory
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <remarks>
        <para>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetAlphaChannel(System.Int32,System.Byte[]@,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Stores into a byte array the Alpha channel values of a GdPicture image or a portion of it.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Alpha">Output parameter. The Alpha channel data.</param>
      <param name="SrcLeft">The left source pixel of the area.</param>
      <param name="SrcTop">The top source pixel of the area.</param>
      <param name="Width">The width of the area in pixel.</param>
      <param name="Height">The height of the area in pixel.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetAlphaChannel(System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)" />
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Using GetAlphaChannel to obtain the alphachannel on a rectangle with width of 20 pixels and height of 20 pixels located at the left top side of the image. Then negating those alpha values on the image before saving it." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim arPixels(400) As Byte
 Dim AreaWidth As Integer
 Dim AreaHeight As Integer
 AreaHeight = 20
 AreaWidth = 20
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 oGdPictureImaging.GetAlphaChannel(ImageID, arPixels, 0, 0, AreaWidth, AreaHeight)
 For i As Integer = 0 To 400
    arPixels(i) = CByte(255 - arPixels(i))
 Next
 oGdPictureImaging.SetAlphaChannel(ImageID, Alpha, 0, 0, ImageWidth, ImageHeight)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetAlphaChannel(System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Sets the Alpha channel of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Alpha">The Alpha channel data.</param>
      <param name="SrcLeft">The left source pixel of the area.</param>
      <param name="SrcTop">The top source pixel of the area.</param>
      <param name="Width">The width of the area in pixel.</param>
      <param name="Height">The height of the area in pixel.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetAlphaChannel(System.Int32,System.Byte[]@,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Applying a vertical transparent gradient to an image" lang="VB.NET">
 Dim Alpha() As Byte
 Dim PixelCount As Integer
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageHeight As Integer
 Dim ImageWidth As Integer
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 ImageHeight = oGdPictureImaging.GetHeight(ImageID)
 ImageWidth = oGdPictureImaging.GetWidth(ImageID)
 PixelCount = ImageHeight * ImageWidth
 ReDim Alpha(PixelCount)
 For i As Integer = 0 To PixelCount - 1
    Alpha(i) = CByte(255 / PixelCount * (i + 1))
 Next
 oGdPictureImaging.SetAlphaChannel(ImageID, Alpha, 0, 0, ImageWidth, ImageHeight)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetTransparencyColor(System.Int32,System.Drawing.Color)">
      <summary>
 Sets a color as transparent in a GdPicture image or in an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TransparentColor">Color to set as transparent. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Making a color in the image as transparent using SetTransparencyColor." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 oGdPictureImaging.SetTransparency(ImageID,  oGdPictureImaging.ARGB(255, 0, 255, 0))
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetTransparencyColor(System.Int32,System.Drawing.Color,System.Single)">
      <summary>
 Sets a color as transparent in a GdPicture image or in area of a GdPicture image defined by SetROI()
 method.
 This method takes a percentage threshold parameter regarding the color to set as transparent.
 Ie: A threshold value of 90 means that all the color value which are within 90% of the color value
 parameter will be considered.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TransparentColor">Color to set as transparent. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="Threshold">Percentage threshold between 0 and 100.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Making all the colors within 90% of the color green in the image as transparent using SetTransparencyColor." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 oGdPictureImaging.SetTransparency(ImageID,  oGdPictureImaging.ARGB(255, 0, 255, 0), 90.0)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetTransparency(System.Int32,System.Int32)">
      <summary>
 Adds transparency to a GdPicture image or into an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TransparencyValue">Value between -255 and 255. 255 means full opacity and -255 means
 full transparency.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Changing the transparency of the image using SetTransparency." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim TransparencyValue As Integer = -25
 oGdPictureImaging.SetTransparency(ImageID, TransparencyValue)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ADRCreateTemplateFromFile(System.String)">
      <summary>
 Creates a new Document Identifier Template from an image file.
 </summary>
      <param name="FilePath">The path of the image from which the new template will be created. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 The created template ID if success else, -1 if fail. check the GetStat() method to get the reason
 on this result.
 </returns>
      <example>
        <code description="How to create document templates and identify the one which has the closest similar content to an image file." lang="VB.NET">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim nCloserTemplate As Integer
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateFromFile("template1.tif")
 If TemplateID1 = 0 Then
    MessageBox.show("Can't create TemplateID1 " + "Error number: " + Str(oGdPictureImaging.GetStat))
 End If
 'We create the second template from an other kind of image
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateFromFile("template2.tif")
 If TemplateID2 = 0 Then
    MessageBox.show("Can't create TemplateID2 " + "Error number: " + Str(oGdPictureImaging.GetStat))
 End If
 'Now, we will try to identify an image.
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForFile("document.tif")
 Select Case nCloserTemplate
 Case TemplateID1
 MessageBox.show("This image seems to get best similar content as TemplateID1. Confidence is: " + Str(oGdPictureImaging.ADRGetLastConfidence) + " %")
 Case TemplateID2
 MessageBox.show("This image seems to get best similar content as TemplateID2. Confidence is: " + Str(oGdPictureImaging.ADRGetLastConfidence) + " %")
 End Select
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ADRCreateTemplateEmpty">
      <summary>
 Creates a new empty Document Identifier Template. Then, you can add images in this template
 using the ADRAddGdPictureImageToTemplate() method.
 </summary>
      <returns>
 The created template ID if success else, -1 if fail. check the GetStat() method to get the reason
 on this result.
 </returns>
      <example>
        <code description="How to create document templates and identify the one which has the closest similar content to an image file." lang="VB.NET">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim ImageID1 As Integer, ImageID2 As Integer
 Dim nCloserTemplate As Integer
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateEmpty
 ImageID1 = oGdPictureImaging.CreateGdPictureImageFromFile("template1.tif")
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID1, ImageID1) &lt;&gt; OK Then
    MessageBox.Show("Can't add image to TemplateID1 " + "Error number: " + oGdPictureImaging.GetStat().ToString())
 End If
 'We create the second template from an other kind of image
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateEmpty
 ImageID2 = oGdPictureImaging.CreateGdPictureImageFromFile("template2.tif")
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID2, ImageID2) &lt;&gt; OK Then
    MessageBox.Show("Can't add image to TemplateID2 " + "Error number: " + oGdPictureImaging.GetStat().ToString())
 End If
 'Now, we will try to identify an image.
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForFile("document.tif")
 Select Case nCloserTemplate
 Case TemplateID1
 MessageBox.Show("This image seems to get best similar content as TemplateID1. Confidence is: " + oGdPictureImaging.ADRGetLastConfidence().ToString() + " %")
 Case TemplateID2
 MessageBox.Show("This image seems to get best similar content as TemplateID2. Confidence is: " +  oGdPictureImaging.ADRGetLastConfidence().ToString() + " %")
 End Select
 'Release created templates from memory
 oGdPictureImaging.ADRDeleteTemplate (TemplateID1)
 oGdPictureImaging.ADRDeleteTemplate (TemplateID2)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ADRCreateTemplateFromGdPictureImage(System.Int32)">
      <summary>
 Creates a new Document Identifier Template from a GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image from which the new template will be
 created.</param>
      <returns>
 The created template ID if success else, -1 if fail. check the GetStat() method to get the reason
 on this result.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ADRCreateTemplateFromFile(System.String)" />
      <example>
        <code description="How to create document templates from a gdpicture Image" lang="VB.NET">
 Dim TemplateID As Integer
 Dim nCloserTemplate As Integer
 Dim ImageID As Integer,
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("template1.tif")
 'We create the first template from an image
 TemplateID = oGdPictureImaging.ADRCreateTemplateFromGdPictureImage(ImageID)
 If TemplateID1 = 0 Then
    MessageBox.show("Can't create TemplateID1 " + "Error number: " + Str(oGdPictureImaging.GetStat))
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ADRAddGdPictureImageToTemplate(System.Int32,System.Int32)">
      <summary>
 Adds an image to a Document Identifier Template from a GdPicture Image.
 </summary>
      <param name="TemplateID">The existing template ID to add the new image.</param>
      <param name="ImageID">The image to add to the existing template.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to create document templates and identify the one which has the closest similar content to an image file." lang="VB.NET">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim ImageID1 As Integer, ImageID2 As Integer
 Dim nCloserTemplate As Integer
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateEmpty
 ImageID1 = oGdPictureImaging.CreateGdPictureImageFromFile("template1.tif")
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID1, ImageID1) &lt;&gt; OK Then
    MessageBox.Show("Can't add image to TemplateID1 " + "Error number: " + oGdPictureImaging.GetStat().ToString())
 End If
 'We create the second template from an other kind of image
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateEmpty
 ImageID2 = oGdPictureImaging.CreateGdPictureImageFromFile("template2.tif")
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID2, ImageID2) &lt;&gt; OK Then
    MessageBox.Show("Can't add image to TemplateID2 " + "Error number: " + oGdPictureImaging.GetStat().ToString())
 End If
 'Now, we will try to identify an image.
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForFile("document.tif")
 Select Case nCloserTemplate
 Case TemplateID1
 MessageBox.Show("This image seems to get best similar content as TemplateID1. Confidence is: " + oGdPictureImaging.ADRGetLastConfidence().ToString() + " %")
 Case TemplateID2
 MessageBox.Show("This image seems to get best similar content as TemplateID2. Confidence is: " + oGdPictureImaging.ADRGetLastConfidence().ToString() + " %")
 End Select
 'Release created templates from memory
 oGdPictureImaging.ADRDeleteTemplate (TemplateID1)
 oGdPictureImaging.ADRDeleteTemplate (TemplateID2)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ADRDeleteTemplate(System.Int32)">
      <summary>
 Deletes a Document Identifier Template.
 </summary>
      <param name="TemplateID">The existing template ID to delete.</param>
      <returns>
 True if deleted, else False (unknown template).
 </returns>
      <example>
        <code description="How to create document templates and identify the one which has the closest similar content to an image file." lang="VB.NET">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim ImageID1 As Integer, ImageID2 As Integer
 Dim nCloserTemplate As Integer
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateEmpty
 ImageID1 = oGdPictureImaging.CreateGdPictureImageFromFile("template1.tif")
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID1, ImageID1) &lt;&gt; OK Then
    MessageBox.Show("Can't add image to TemplateID1 " + "Error number: " + oGdPictureImaging.GetStat().ToString())
 End If
 'We create the second template from an other kind of image
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateEmpty
 ImageID2 = oGdPictureImaging.CreateGdPictureImageFromFile("template2.tif")
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID2, ImageID2) &lt;&gt; OK Then
    MessageBox.Show("Can't add image to TemplateID2 " + "Error number: " + oGdPictureImaging.GetStat().ToString())
 End If
 'Now, we will try to identify an image.
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForFile("document.tif")
 Select Case nCloserTemplate
 Case TemplateID1
 MessageBox.Show("This image seems to get best similar content as TemplateID1. Confidence is: " + oGdPictureImaging.ADRGetLastConfidence().ToString() + " %")
 Case TemplateID2
 MessageBox.Show("This image seems to get best similar content as TemplateID2. Confidence is: " + oGdPictureImaging.ADRGetLastConfidence().ToString() + " %")
 End Select
 'Release created templates from memory
 oGdPictureImaging.ADRDeleteTemplate (TemplateID1)
 oGdPictureImaging.ADRDeleteTemplate (TemplateID2)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ADRSetTemplateTag(System.Int32,System.String)">
      <summary>
 Sets a TAG to an existing template.
 Tip: this can be the name of the Template Identifier.
 </summary>
      <param name="TemplateID">An existing template ID.</param>
      <param name="TemplateTag">The tag value. Must be &lt; 256 characters length.</param>
      <returns>
 True if success, else False (unknown template).
 </returns>
      <example>
        <code description="How to create document templates from a gdpicture Image, and set the Template Tag" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("template1.tif")
 'We create the first template from an image
 Dim TemplateID As Integer = oGdPictureImaging.ADRCreateTemplateFromGdPictureImage(ImageID)
 If TemplateID1 = 0 Then
    MessageBox.show("Can't create TemplateID1 " + "Error number: " + Str(oGdPictureImaging.GetStat))
 End If
 oGdPictureImaging.ADRSetTemplateTag(TemplateID, ImageID, "Based on template1.tif")
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ADRLoadTemplateConfig(System.String)">
      <summary>
 Loads a complete Template Configuration From a file previously saved with the ADRSaveTemplateConfig()
 method.
 </summary>
      <param name="FileConfig">The path of the template configuration file.</param>
      <returns>
 True if success, else False (invalid file content).
 </returns>
      <example>
        <code description="Loading a template configuration file, and showing each template's name, ID, and number of images it is based on in a MessageBox." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPictureImaging.ADRStartNewTemplateConfig()
 If oGdPictureImaging.ADRLoadTemplateConfig(ADRconfig.dat) Then
    Dim templateCount As Integer = oGdPictureImaging.ADRGetTemplateCount()
    If templateCount &gt; 0 Then
       For i As Integer = 1 To templateCount
          Dim templateID As Integer = oGdPictureImaging.ADRGetTemplateID(i)
          Dim templateName As String = oGdPictureImaging.ADRGetTemplateTag(templateID)
          Dim imageCount As Integer = oGdPictureImaging.ADRGetTemplateImageCount(templateID)
          MessageBox.Show("Template Name: " + templateName + " TemplateID: " + templateID.ToString() +
          " Template Image Count: " + imageCount.ToString())
       Next
    Else
       MessageBox.Show("No template available!", "error", MessageBoxButtons.OK, MessageBoxIcon.Error)
    End If
 Else
    MessageBox.Show("Error loading template config. Status: " + oGdPictureImaging.GetStat().ToString(), "error", MessageBoxButtons.OK, MessageBoxIcon.Error)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ADRStartNewTemplateConfig">
      <summary>
 Resets the current Template Configuration, if existing (deletes all template identifiers), and
 start a new one.
 </summary>
      <example>
        <code description="Loading a template configuration file, and showing each template's name, ID, and number of images it is based on in a MessageBox." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPictureImaging.ADRStartNewTemplateConfig()
 If oGdPictureImaging.ADRLoadTemplateConfig(ADRconfig.dat) Then
    Dim templateCount As Integer = oGdPictureImaging.ADRGetTemplateCount()
    If templateCount &gt; 0 Then
       For i As Integer = 1 To templateCount
          Dim templateID As Integer = oGdPictureImaging.ADRGetTemplateID(i)
          Dim templateName As String = oGdPictureImaging.ADRGetTemplateTag(templateID)
          Dim imageCount As Integer = oGdPictureImaging.ADRGetTemplateImageCount(templateID)
          MessageBox.Show("Template Name: " + templateName + " TemplateID: " + templateID.ToString() +
          " Template Image Count: " + imageCount.ToString())
       Next
    Else
       MessageBox.Show("No template available!", "error", MessageBoxButtons.OK, MessageBoxIcon.Error)
    End If
 Else
    MessageBox.Show("Error loading template config. Status: " + oGdPictureImaging.GetStat().ToString(), "error", MessageBoxButtons.OK, MessageBoxIcon.Error)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ADRSaveTemplateConfig(System.String)">
      <summary>
 Saves the current Template Configuration within a file in order to load it later using the ADRLoadTemplateConfig()
 method.
 </summary>
      <param name="FileConfig">The path of the template configuration file to create.</param>
      <returns>
 True if success, else False (can't create the file or empty template configuration).
 </returns>
      <example>
        <code description="Creating ADR templates from file, and then saving the template configuration." lang="VB.NET">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateFromFile("template1.tif")
 If TemplateID1 = 0 Then
    MessageBox.show("Can't create TemplateID1 " + "Error number: " + oGdPictureImaging.GetStat().ToString())
 End If
 If oGdPictureImaging.ADRSaveTemplateConfig(ADRconfig.dat) Then
    MessageBox.Show("Config saved!")
 Else
    MessageBox.Show("Error saving template config. Status: " + oGdPictureImaging.GetStat().ToString(), "error", MessageBoxButtons.OK, MessageBoxIcon.Error)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ADRGetTemplateTag(System.Int32)">
      <summary>
 Gets a TAG to an existing template.
 </summary>
      <param name="TemplateID">An existing template ID.</param>
      <returns>
 The template TAG value.
 </returns>
      <example>
        <code description="Loading a template configuration file, and showing each template's name, ID, and number of images it is based on in a MessageBox." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPictureImaging.ADRStartNewTemplateConfig()
 If oGdPictureImaging.ADRLoadTemplateConfig(ADRconfig.dat) Then
    Dim templateCount As Integer = oGdPictureImaging.ADRGetTemplateCount()
    If templateCount &gt; 0 Then
       For i As Integer = 1 To templateCount
          Dim templateID As Integer = oGdPictureImaging.ADRGetTemplateID(i)
          Dim templateName As String = oGdPictureImaging.ADRGetTemplateTag(templateID)
          Dim imageCount As Integer = oGdPictureImaging.ADRGetTemplateImageCount(templateID)
          MessageBox.Show("Template Name: " + templateName + " TemplateID: " + templateID.ToString() +
          " Template Image Count: " + imageCount.ToString())
       Next
    Else
       MessageBox.Show("No template available!", "error", MessageBoxButtons.OK, MessageBoxIcon.Error)
    End If
 Else
    MessageBox.Show("Error loading template config. Status: " + oGdPictureImaging.GetStat().ToString(), "error", MessageBoxButtons.OK, MessageBoxIcon.Error)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ADRGetTemplateImageCount(System.Int32)">
      <summary>
 Returns the number of images used in a Document Identifier Template.
 </summary>
      <param name="TemplateID">An existing template ID.</param>
      <returns>
 The number of image on which the Document Identifier Template is based.
 </returns>
      <example>
        <code description="Making sure that every template is based on at least one image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID1 As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("template1.tif")
 Dim TemplateID1 As Integer = oGdPictureImaging.ADRCreateTemplateEmpty()
 Dim TemplateID2 As Integer = oGdPictureImaging.ADRCreateTemplateEmpty()
 Dim TemplateID3 As Integer = oGdPictureImaging.ADRCreateTemplateEmpty()
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID1, ImageID1) &lt;&gt; OK Then
    MessageBox.Show("Can't add image to TemplateID1 " + "Error number: " + oGdPictureImaging.GetStat.ToString())
 End If
 If oGdPictureImaging.ADRGetTemplateCount() &gt; 0 Then
    For i As Integer = 1 To oGdPictureImaging.ADRGetTemplateCount
       Dim templateID As Integer = oGdPictureImaging.ADRGetTemplateID(i)
       If oGdPictureImaging.ADRGetTemplateImageCount(templateID) = 0 Then
          MessageBox.Show("Please add image to template: " + templateID.ToString())
          Exit For
       End If
    Next
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ADRGetTemplateCount">
      <summary>
 Returns the current number of Document Identifier Templates.
 </summary>
      <returns>
 The number of document identifier templates.
 </returns>
      <example>
        <code description="Making sure that every template is based on at least one image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID1 As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("template1.tif")
 Dim TemplateID1 As Integer = oGdPictureImaging.ADRCreateTemplateEmpty()
 Dim TemplateID2 As Integer = oGdPictureImaging.ADRCreateTemplateEmpty()
 Dim TemplateID3 As Integer = oGdPictureImaging.ADRCreateTemplateEmpty()
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID1, ImageID1) &lt;&gt; OK Then
    MessageBox.Show("Can't add image to TemplateID1 " + "Error number: " + oGdPictureImaging.GetStat().ToString())
 End If
 If oGdPictureImaging.ADRGetTemplateCount() &gt; 0 Then
    For i As Integer = 1 To oGdPictureImaging.ADRGetTemplateCount
       Dim templateID As Integer = oGdPictureImaging.ADRGetTemplateID(i)
       If oGdPictureImaging.ADRGetTemplateImageCount(templateID) = 0 Then
          MessageBox.Show("Please add image to template: " + str(templateID))
          Exit For
       End If
    Next
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ADRGetTemplateID(System.Int32)">
      <summary>
 Returns a Document Identifier Template ID from his index.
 </summary>
      <param name="TemplateNo">Template index. Value between 1 and ADRGetTemplateCount().</param>
      <returns>
 The Template ID. If TemplateNo is invalid, returns -1.
 </returns>
      <example>
        <code description="Making sure that every template is based on at least one image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID1 As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("template1.tif")
 Dim TemplateID1 As Integer = oGdPictureImaging.ADRCreateTemplateEmpty()
 Dim TemplateID2 As Integer = oGdPictureImaging.ADRCreateTemplateEmpty()
 Dim TemplateID3 As Integer = oGdPictureImaging.ADRCreateTemplateEmpty()
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID1, ImageID1) &lt;&gt; OK Then
    MessageBox.Show("Can't add image to TemplateID1 " + "Error number: " + oGdPictureImaging.GetStat().ToString())
 End If
 If oGdPictureImaging.ADRGetTemplateCount() &gt; 0 Then
    For i As Integer = 1 To oGdPictureImaging.ADRGetTemplateCount
       Dim templateID As Integer = oGdPictureImaging.ADRGetTemplateID(i)
       If oGdPictureImaging.ADRGetTemplateImageCount(templateID) = 0 Then
          MessageBox.Show("Please add image to template: " + str(templateID))
          Exit For
       End If
    Next
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ADRGetCloserTemplateForGdPictureImage(System.Int32)">
      <summary>
 Performs a Documents Recognition Operation from a GdPicture image and returns the Document
 Identifier Template ID which has the best similar content.
 </summary>
      <param name="ImageID">The GdPicture Image.</param>
      <returns>
 The Template ID which has the best similar content to the specified image.
 </returns>
      <example>
        <code description="How to create document templates and identify the one which has the closest similar content to an image file." lang="VB.NET">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim nCloserTemplate As Integer
 Dim nImage as Integer
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateFromFile("template1.tif")
 If TemplateID1 = 0 Then
    MessageBox.Show("Can't create TemplateID1 " + "Error number: " + oGdPictureImaging.GetStat().ToString())
 End If
 'We create the second template from an other kind of image
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateFromFile("template2.tif")
 If TemplateID2 = 0 Then
    MessageBox.Show("Can't create TemplateID2 " + "Error number: " + oGdPictureImaging.GetStat().ToString())
 End If
 'Now, we will try to identify an image.
 nImage = CreateGdPictureImageFromFile("document.tif")
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForGdPictureImage("document.tif")
 Select Case nCloserTemplate
 Case TemplateID1
 MessageBox.Show("This image seems to get best similar content as TemplateID1. Confidence is: " + oGdPictureImaging.ADRGetLastConfidence().ToString() + " %")
 Case TemplateID2
 MessageBox.Show("This image seems to get best similar content as TemplateID2. Confidence is: " + oGdPictureImaging.ADRGetLastConfidence().ToString() + " %")
 End Select
 oGdPictureImaging.ReleaseGdPictureImage(nImage)
 'Release created templates from memory
 oGdPictureImaging.ADRDeleteTemplate (TemplateID1)
 oGdPictureImaging.ADRDeleteTemplate (TemplateID2)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ADRGetCloserTemplateForFile(System.String)">
      <summary>
 Performs a Documents Recognition Operation from an image file and returns the Document Identifier
 Template ID which has the best similar content.
 </summary>
      <param name="FilePath">The path of the image to identify. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 The Template ID which has the best similar content to the specified image.
 </returns>
      <example>
        <code description="How to create document templates and identify the one which has the closest similar content to an image file." lang="VB.NET">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim nCloserTemplate As Integer
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateFromFile("template1.tif")
 If TemplateID1 = 0 Then
    MessageBox.Show("Can't create TemplateID1 " + "Error number: " + oGdPictureImaging.GetStat().ToString())
 End If
 'We create the second template from an other kind of image
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateFromFile("template2.tif")
 If TemplateID2 = 0 Then
    MessageBox.Show("Can't create TemplateID2 " + "Error number: " + oGdPictureImaging.GetStat().ToString())
 End If
 'Now, we will try to identify an image.
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForFile("document.tif")
 Select Case nCloserTemplate
 Case TemplateID1
 MessageBox.Show("This image seems to get best similar content as TemplateID1. Confidence is: " + oGdPictureImaging.ADRGetLastConfidence().ToString() + " %")
 Case TemplateID2
 MessageBox.Show("This image seems to get best similar content as TemplateID2. Confidence is: " + oGdPictureImaging.ADRGetLastConfidence().ToString() + " %")
 End Select
 'Release created templates from memory
 oGdPictureImaging.ADRDeleteTemplate (TemplateID1)
 oGdPictureImaging.ADRDeleteTemplate (TemplateID2)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ADRGetLastConfidenceFromTemplate(System.Int32)">
      <summary>
 Returns the Confidence from a specific template obtained during the last Documents Recognition
 Operation.
 </summary>
      <param name="TemplateID">The template ID.</param>
      <returns>
 Confidence from specified template. Value between 0 and 100 (identical document).
 </returns>
      <example>
        <code description="How to create document templates and identify the confidence of an ADR operation from a certain template" lang="VB.NET">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim ImageID1 As Integer, ImageID2 As Integer
 Dim nCloserTemplate As Integer
 Dim Confidence
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateEmpty
 ImageID1 = oGdPictureImaging.CreateGdPictureImageFromFile("template1.tif")
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID1, ImageID1) &lt;&gt; OK Then
    MessageBox.Show("Can't add image to TemplateID1 " + "Error number: " + oGdPictureImaging.GetStat().ToString())
 End If
 'We create the second template from an other kind of image
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateEmpty
 ImageID2 = oGdPictureImaging.CreateGdPictureImageFromFile("template2.tif")
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID2, ImageID2) &lt;&gt; OK Then
    MessageBox.Show("Can't add image to TemplateID2 " + "Error number: " + oGdPictureImaging.GetStat().ToString())
 End If
 'Now, we will try to identify an image.
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForFile("document.tif")
 Confidence = oGdPictureImaging.ADRGetLastConfidenceFromTemplate(nCloserTemplate)
 'Release created templates from memory
 oGdPictureImaging.ADRDeleteTemplate (TemplateID1)
 oGdPictureImaging.ADRDeleteTemplate (TemplateID2)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ADRGetLastConfidence">
      <summary>
 Returns the Confidence of the closest template obtained during the last Documents Recognition
 Operation.
 </summary>
      <returns>
 Last Confidence. Value between 0 and 100 (identical document).
 </returns>
      <example>
        <code description="How to create document templates and identify the one which has the closest similar content to an image file." lang="VB.NET">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim nCloserTemplate As Integer
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateFromFile("template1.tif")
 If TemplateID1 = 0 Then
    MessageBox.Show("Can't create TemplateID1 " + "Error number: " + oGdPictureImaging.GetStat().ToString())
 End If
 'We create the second template from an other kind of image
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateFromFile("template2.tif")
 If TemplateID2 = 0 Then
    MessageBox.Show("Can't create TemplateID2 " + "Error number: " + oGdPictureImaging.GetStat().ToString())
 End If
 'Now, we will try to identify an image.
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForFile("document.tif")
 Select Case nCloserTemplate
 Case TemplateID1
 MessageBox.Show("This image seems to get best similar content as TemplateID1. Confidence is: " + oGdPictureImaging.ADRGetLastConfidence().ToString() + " %")
 Case TemplateID2
 MessageBox.Show("This image seems to get best similar content as TemplateID2. Confidence is: " + oGdPictureImaging.ADRGetLastConfidence().ToString() + " %")
 End Select
 'Release created templates from memory
 oGdPictureImaging.ADRDeleteTemplate (TemplateID1)
 oGdPictureImaging.ADRDeleteTemplate (TemplateID2)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetBCSG(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Adjust in one shot, the Brightness, Contrast, Saturation &amp; Gamma in a
 GdPicture image or in an area of a GdPicture image defined by SetROI() method.
 This method is faster than successive calls to any of SetBrightness, SetContrast, SetSaturation
 &amp; SetGammaCorrection methods.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Brightness">Brightness adjustment between -100 and 100.</param>
      <param name="Contrast">Contrast adjustment between -100 and 100.</param>
      <param name="Saturation">Saturation adjustment between -100 and 100.</param>
      <param name="Gamma">Gamma adjustment between -100 and 100.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.SetBrightness(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.SetContrast(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.SetSaturation(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.SetGammaCorrection(System.Int32,System.Int32)" />
      <example>
        <code description="Setting the Brightness, Constrast, Saturation, and Gamma at one go using SetBCSG" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim BrightnessValue As Integer = 50
 Dim ContrastValue As Integer = 40
 Dim SaturationValue As Integer = -10
 Dim GammaValue As Integer =20
 oGdPictureImaging.SetBCSG(ImageID, BrightnessValue, ContrastValue, SaturationValue, GammaValue)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetBrightness(System.Int32,System.Int32)">
      <summary>
 Adjust the Brightness in a GdPicture image or in an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Brightness">Brightness adjustment between -100 and 100.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.SetBCSG(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <example>
        <code description="Increasing the Brightness of an image by 10%" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim BrightnessValue As Integer = 10
 oGdPictureImaging.SetBrightness(ImageID, BrightnessValue)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <example>
        <code description="Decreasing the Brightness of an image by 10%" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim BrightnessValue As Integer = -10
 oGdPictureImaging.SetBrightness(ImageID, BrightnessValue)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetContrast(System.Int32,System.Int32)">
      <summary>
 Adjust the Contrast in a GdPicture image or in the area defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Contrast">Contrast adjustment between -100 and 100.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <example>
        <code description="Increasing the Contrast of an image by 15%" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim ContrastValue As Integer = 15
 oGdPictureImaging.SetContrast(ImageID, ContrastValue)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <example>
        <code description="Decreasing the Contrast of an image by 25%" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim ContrastValue As Integer = -25
 oGdPictureImaging.SetContrast(ImageID, ContrastValue)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.SetBCSG(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetGammaCorrection(System.Int32,System.Int32)">
      <summary>
 Performs Gamma Correction in a GdPicture image or in an area of a GdPicture image
 defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Gamma">Gamma adjustment between -100 and 100.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.SetBCSG(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <example>
        <code description="Increasing Gamma of an image by 50%" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim GammaValue As Integer = 50
 oGdPictureImaging.SetGammaCorrection(ImageID, GammaValue)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <example>
        <code description="Decreasing Gamma of an image by 30%" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim GammaValue As Integer = -30
 oGdPictureImaging.SetGammaCorrection(ImageID, GammaValue)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetSaturation(System.Int32,System.Int32)">
      <summary>
 Adjust the Saturation in a GdPicture image or in an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Saturation">Saturation adjustment between -100 and 100.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 This filter is not inteneded to alter gray leveled bitmaps, and they will stay the same.
 </para>
        <para>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.SetBCSG(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <example>
        <code description="Increasing Saturation of an image by 50%" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim SaturationValue As Integer = 50
 oGdPictureImaging.SetSaturation(ImageID, GammaValue)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <example>
        <code description="Decreasing Saturation of an image by 30%" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim SaturationValue As Integer = -30
 oGdPictureImaging.SetSaturation(ImageID, GammaValue)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CopyRegionToClipboard(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Copies a region of a GdPicture image into the clipboard.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="SrcLeft">The left source pixel.</param>
      <param name="SrcTop">The top source pixel.</param>
      <param name="Width">Width of the region in pixel.</param>
      <param name="Height">Height of the region in pixel.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Copying a rectangular region of the image to the clipboard" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CopyRegionToClipboard(ImageID, 0, 0, 200, 250)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CopyToClipboard(System.Int32)">
      <summary>
 Copies a GdPicture image into the clipboard.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Copying an image to the clipboard" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CopyToClipboard(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DeleteClipboardData">
      <summary>
 Clears the clipboard.
 </summary>
      <example>
        <code description="Copying an image to the clipboard and then deleting the data in the clipboard" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 oGdPictureImaging.CopyToClipboard(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 ImageID = oGdPictureImaging.CreateGdPictureImageFromClipboard()
 oGdPictureImaging.DeleteClipboardData()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AdjustRGB(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Increase or decrease the color components of a GdPicture image or of an area of a GdPicture image
 defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="RedAdjust">Value to add to the red component [-255 ; 255].</param>
      <param name="GreenAdjust">Value to add to the green component [-255 ; 255].</param>
      <param name="BlueAdjust">Value to add to the blue component [-255 ; 255].</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Change the values of the R,G,B color componants of the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.AdjustRGB(ImageID, 25, 100, 76)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SwapColor(System.Int32,System.Drawing.Color,System.Drawing.Color)">
      <summary>
 Replaces one color by another on a GdPicture image or into an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ColorSrc">Color to replace. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="ColorDst">Color of replacement. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Swaping the color red with the color green." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 oGdPictureImaging.SwapColor(ImageID, oGdPictureImaging.ARGB(255,255,0,0),oGdPictureImaging.ARGB(255,0,255,0))
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SwapColor(System.Int32,System.Int32,System.Int32,System.Single)">
      <summary>
 Replaces one color by another on a GdPicture image or into an area of a GdPicture image defined by
 SetROI() method.
 This method takes a percentage threshold parameter regarding the color to replace.
 Ie: A threshold value of 90 means that all the color values which are within 90% of the color value
 to replace will be considered.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ColorSrc">A suitable color value can be obtained by using the ARGBI() method.
 Color to replace.</param>
      <param name="ColorDst">A suitable color value can be obtained by using the ARGBI() method.
 Color of replacement.</param>
      <param name="Threshold">Percentage threshold between 0 and 100.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Swaping a color with another and all the colors that are within 90% of the specified color to change" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 oGdPictureImaging.SwapColor(ImageID, oGdPictureImaging.ARGBI(255,255,0,0),oGdPictureImaging.ARGBI(255,0,255,0), 90.0)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SwapColor(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Single)">
      <summary>
 Replaces one color by another on a GdPicture image or into an area of a GdPicture image defined by
 SetROI() method.
 This method takes a percentage threshold parameter regarding the color to replace.
 Ie: A threshold value of 90 means that all the color values which are within 90% of the color value
 to replace will be considered.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ColorSrc">Color to replace. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="ColorDst">Color of replacement. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="Threshold">Percentage threshold between 0 and 100.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Swaping a color with another and all the colors that are within 90% of the specified color to change" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 oGdPictureImaging.SwapColor(ImageID, oGdPictureImaging.ARGB(255,255,0,0),oGdPictureImaging.ARGB(255,0,255,0), 90.0)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.KeepRedComponent(System.Int32)">
      <summary>
 Keeps only the red color component of a GdPicture image or of an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Using KeepRedComponent to maintain the red component of an image while erasing the blue and green components." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.KeepRedComponent(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.KeepGreenComponent(System.Int32)">
      <summary>
 Keeps only the green color component of a GdPicture image or of an area of a GdPicture image defined
 by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Using KeepGreenComponent to maintain the green component of an image while erasing the blue and red components." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.KeepGreenComponent(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.KeepBlueComponent(System.Int32)">
      <summary>
 Keeps only the blue color component of a GdPicture image or of an area of a GdPicture image defined
 by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Using KeepBlueComponent to maintain the blue component of an image while erasing the red and green components." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.KeepBlueComponent(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.RemoveRedComponent(System.Int32)">
      <summary>
 Removes the red color component of a GdPicture image or of an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Removing the red component from an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.RemoveRedComponent(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.RemoveGreenComponent(System.Int32)">
      <summary>
 Removes the green color component of a GdPicture image or of an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Removing the green component from an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.RemoveGreenComponent(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.RemoveBlueComponent(System.Int32)">
      <summary>
 Removes the blue color component of a GdPicture image or of an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Removing the blue component from an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.RemoveBlueComponent(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ScaleBlueComponent(System.Int32,System.Single)">
      <summary>
 Scales the blue color component of a GdPicture image or of an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Factor">Scale factor.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Scaling the blue component to 11 %  of its value" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ScaleBlueComponent(ImageID, 0.11)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ScaleGreenComponent(System.Int32,System.Single)">
      <summary>
 Scales the green color component of a GdPicture image or of an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Factor">Scale factor.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Scaling the green color component to 59% of its value" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ScaleGreenComponent(ImageID, 0.59)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ScaleRedComponent(System.Int32,System.Single)">
      <summary>
 Scales the red color component of a GdPicture image or of an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Factor">Scale factor.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Scaling the red color component to 30% of its value" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ScaleRedComponent(ImageID, 0.3)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SwapColorsRGBtoBRG(System.Int32)">
      <summary>
 Swaps the color components (RGB - &gt; BRG) of a GdPicture image or of an area of a GdPicture image
 defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Swapping RGB color components to BRG." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SwapColorsRGBtoBRG(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SwapColorsRGBtoGBR(System.Int32)">
      <summary>
 Swaps the color components (RGB - &gt; GBR) of a GdPicture image or of an area of a GdPicture image
 defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Using Swapping RGB color components to GBR." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SwapColorsRGBtoGBR(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SwapColorsRGBtoRBG(System.Int32)">
      <summary>
 Swaps the color components (RGB - &gt; RBG) of a GdPicture image or of an area of a GdPicture image
 defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Swapping RGB color components to RBG." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SwapColorsRGBtoRBG(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SwapColorsRGBtoBGR(System.Int32)">
      <summary>
 Swaps the color components (RGB - &gt; BGR) of a GdPicture image or of an area of a GdPicture image
 defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Swapping RGB color components to BGR." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SwapColorsRGBtoBGR(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SwapColorsRGBtoGRB(System.Int32)">
      <summary>
 Swaps the color components (RGB - &gt; GRB) of a GdPicture image or of an area of a GdPicture image
 defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Swapping RGB color components to GRB." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SwapColorsRGBtoGRB(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.HasTransparency(System.Int32)">
      <summary>
 Detects a GdPicture image or the area defined by SetROI() method has pixel with non fully opaque alpha channel.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 True if transparent pixel are detected, else False.
 </returns>
      <remarks>
 Use the GetStat() method to check if this method has completed successfully.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IsGrayscale(System.Int32)">
      <summary>
 Determines whether a GdPicture image or the area defined by SetROI() method is Gray or not.
 This method uses a linear formula to determine the color intent. To obtain more accurate result the ColorDetection() method should be used instead.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 True if it is a grayscale image, else False.
 </returns>
      <remarks>
        <para>
 Use the GetStat() method to check if this method has completed successfully.
 </para>
        <para>
 This method uses a linear formula to determine the color intent. To obtain more accurate result the ColorDetection() method should be used instead.
 </para>
      </remarks>
      <example>
        <code description="Determining whether an image is gray or not." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    Dim Gray As Boolean = oGdPictureImaging.IsGrayscale(ImageID)
    MessageBox.Show("Is Gray: " + Gray.ToString())
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.ColorDetection(System.Int32,System.Boolean,System.Boolean,System.Boolean)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IsBitonal(System.Int32)">
      <summary>
 Determines whether a GdPicture image or the area defined by SetROI() method is composed of black and white pixels only.
 This method uses a linear formula to determine the color intent. To obtain more accurate result the ColorDetection() method should be used instead.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 True if it is a bitonal image, else False.
 </returns>
      <remarks>
        <para>
 Use the GetStat() method to check if this method has completed successfully.
 </para>
        <para>
 This method uses a linear formula to determine the color intent. To obtain more accurate result the ColorDetection() method should be used instead.
 </para>
      </remarks>
      <example>
        <code description="Determining whether an image is bitonal or not." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    Dim Bitonal As Boolean = oGdPictureImaging.IsBitonal(ImageID)
    MessageBox.Show("Is Bitonal: " + Bitonal.ToString())
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.ColorDetection(System.Int32,System.Boolean,System.Boolean,System.Boolean)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IsBitonal(System.Int32,System.Int32)">
      <summary>
 Determines whether a GdPicture image or the area defined by SetROI() method is composed of black and white pixels only.
 This method uses a linear formula to determine the color intent. To obtain more accurate result the ColorDetection() method should be used instead.
 This method accepts a threshold parameter which speaks to the confidence of the detection.
 Low Threshold values will require high confidence for the image to be determined as bitonal, and high
 values will require low confidence for the image to be determined as bitonal.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Threshold">Threshold between 0 (max confidence) and 765 (min confidence). A value near or
 higher than 50 is highly suggested.</param>
      <returns>
 True if it is a bitonal image, else False.
 </returns>
      <remarks>
        <para>
 Use the GetStat() method to check if this method has completed successfully.
 </para>
        <para>
 This method uses a linear formula to determine the color intent. To obtain more accurate result the ColorDetection() method should be used instead.
 </para>
      </remarks>
      <example>
        <code description="Determining whether an image is bitonal or not by using a threshold value within the suggested range." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    Dim Bitonal As Boolean = oGdPictureImaging.IsBitonal(ImageID, 80)
    MessageBox.Show("Is Bitonal: " + Bitonal.ToString())
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.ColorDetection(System.Int32,System.Boolean,System.Boolean,System.Boolean)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ColorDetection(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
 Performs color detection on an image. Detecting the color scheme can help to dramatically reduce the size of electronically stored documents.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="AutoConvert">Set True to automatically automatically convert the image in its best suited / optimized bits-per-pixel encoding, otherwise False.</param>
      <param name="ScanningContext">Set True if the image has just been acquired from an acquisition device, False otherwise.</param>
      <param name="AutoRepairCharacters">Set True to enable characters repairing during bitonal conversion, if any. This feature is suggested for scanned gray papers acquired in color.</param>
      <returns>A member of the GdPictureOutputIntent enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CountColor(System.Int32,System.Drawing.Color)">
      <summary>
 Counts the number of pixel that have a specific color on a GdPicture image or into an area of a
 GdPicture image defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="PickColor">Color to count. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 The number of pixel that match the color.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <remarks>
 Use the GetStat() method to check if this method has completed successfully.
 </remarks>
      <example>
        <code description="Counting the number of pixels that have the color Green." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim GreenCount As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("input.jpg")
 If imageId &lt;&gt; 0 Then
    GreenCount = oGdPictureImaging.CountColor(ImageID, oGdPictureImaging.ARGB(255, 0,255, 0))
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Could not load document: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CountUniqueColors(System.Int32)">
      <summary>
 Counts the number of unique colors in a GdPicture image or into an area of a GdPicture image defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 The number of unique colors.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <remarks>
 Use the GetStat() method to check if this method has completed successfully.
 </remarks>
      <example>
        <code description="Counting the number of unique colors in a bitmap." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.jpg")
 Dim uniqueColors as Integer = oGdPictureImaging.CountUniqueColors(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 MessageBox.Show("Unique colors: " + uniqueColors.ToString())
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetAverageColor(System.Int32)">
      <summary>
 Returns the average color for a GdPicture image or for an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 The average color.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <remarks>
 Use the GetStat() method to check if this method has completed successfully.
 </remarks>
      <example>
        <code description="Retrieving the average color of the pixels of an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim AverageColor As Color
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 AverageColor = oGdPictureImaging.GetAverageColor(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.EnableICM(System.Boolean)">
      <summary>
 Specifies if color correction is used for images embedding an ICC profile. False by default.
 Enables ICM results in automatic pixel transformation while opening image including an ICC profile.
 </summary>
      <remarks>This parameter only affects image subsequently opened from this same GdPictureImaging object.</remarks>
      <param name="Enable">Use True to enable color correction, otherwise False.</param>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetColorChannelFlagsC(System.Int32)">
      <summary>
 Returns a new GdPicture image based on the Cyan channel of the CMYK color space of a GdPicture
 image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <remarks>
 According to Wikipedia, CMYK (short for cyan, magenta, yellow, and key) is a subtractive color model
 used in color printing.
 This color model is based on mixing pigments of the following colors in order to make other colors:
 * C = Cyan.
 * M = Magenta.
 * Y = Yellow.
 * K = Key (Black).
 CMYK is the standard color model used in offset printing for full-color documents. CMYK, or
 four-color printing, generates a good final printout with excellent contrast.
 </remarks>
      <example>
        <code description="Obtaining an image form the cyan channel of the CMYK color profile of another." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim ImageID2 As Integer = oGdPictureImaging.GetColorChannelFlagsC(ImageID)
    If ImageID2 &lt;&gt; 0 Then
       oGdPictureImaging.SaveAsPNG(ImageID2, "output.png")
       oGdPictureImaging.ReleaseGdPictureImage(ImageID2)
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetColorChannelFlagsM(System.Int32)">
      <summary>
 Returns a new GdPicture image based on the Magenta channel of the CMYK color space of a GdPicture
 image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <remarks>
 According to Wikipedia, CMYK (short for cyan, magenta, yellow, and key) is a subtractive color model
 used in color printing.
 This color model is based on mixing pigments of the following colors in order to make other colors:
 * C = Cyan.
 * M = Magenta.
 * Y = Yellow.
 * K = Key (Black).
 CMYK is the standard color model used in offset printing for full-color documents. CMYK, or
 four-color printing, generates a good final printout with excellent contrast.
 </remarks>
      <example>
        <code description="Obtaining an image form magneta channel of the CMYK color space of another." lang="VB.NET">
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim ImageID2 As Integer = oGdPictureImaging.GetColorChannelFlagsM(ImageID)
    If ImageID2 &lt;&gt; 0 Then
       oGdPictureImaging.SaveAsPNG(ImageID2, "output.png")
       oGdPictureImaging.ReleaseGdPictureImage(ImageID2)
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetColorChannelFlagsY(System.Int32)">
      <summary>
 Returns a new GdPicture image based on the Yellow channel of the CMYK color space of a GdPicture
 image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <remarks>
 According to Wikipedia, CMYK (short for cyan, magenta, yellow, and key) is a subtractive color model
 used in color printing.
 This color model is based on mixing pigments of the following colors in order to make other colors:
 * C = Cyan.
 * M = Magenta.
 * Y = Yellow.
 * K = Key (Black).
 CMYK is the standard color model used in offset printing for full-color documents. CMYK, or
 four-color printing, generates a good final printout with excellent contrast.
 </remarks>
      <example>
        <code description="Obtaining an image form yellow channel of the CMYK color space of another." lang="VB.NET">
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim ImageID2 As Integer = oGdPictureImaging.GetColorChannelFlagsY(ImageID)
    If ImageID2 &lt;&gt; 0 Then
       oGdPictureImaging.SaveAsPNG(ImageID2, "output.png")
       oGdPictureImaging.ReleaseGdPictureImage(ImageID2)
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetColorChannelFlagsK(System.Int32)">
      <summary>
 Returns a new GdPicture image based on the Key (Black) channel of the CMYK color space of a
 GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <remarks>
 According to Wikipedia, CMYK (short for cyan, magenta, yellow, and key) is a subtractive color model
 used in color printing.
 This color model is based on mixing pigments of the following colors in order to make other colors:
 * C = Cyan.
 * M = Magenta.
 * Y = Yellow.
 * K = Key (Black).
 CMYK is the standard color model used in offset printing for full-color documents. CMYK, or
 four-color printing, generates a good final printout with excellent contrast.
 </remarks>
      <example>
        <code description="Obtaining an image form black channel of the CMYK color space of another." lang="VB.NET">
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim ImageID2 As Integer = oGdPictureImaging.GetColorChannelFlagsK(ImageID)
    If ImageID2 &lt;&gt; 0 Then
       oGdPictureImaging.SaveAsPNG(ImageID2, "output.png")
       oGdPictureImaging.ReleaseGdPictureImage(ImageID2)
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ICCSetRGBProfile(System.Int32,System.String)">
      <summary>
 Applies a specific RGB color profile to a GdPicture image without embedding the color profile
 information. Therefore, only image pixels will be modified according to the profile information. If
 you need to embed an ICC profile to an image file the ICCAddFromFile() method must be
 used.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ProfilePath">The path of the ICC profile file to apply.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Setting an icc rgb profile to the image and not embedding it." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 ' We assume there exists an ICC profile called "profile.icc"
 oGdPictureImaging.ICCSetRGBProfile(ImageID, "profile.icc")
 oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.ICCAddFromFile(System.Int32,System.String)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ICCExportToFile(System.Int32,System.String)">
      <summary>
 Exports the ICC profile of a GdPicture image to a file.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">The path of the ICC profile file to create.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Exporting an icc profile from an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If oGdPictureImaging.ICCImageHasProfile(ImageID) Then
    'Now we create an ICC profile from the ImageID
    oGdPictureImaging.ICCExportToFile(ImageID, "profile.icc")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    'We add that profile to another image
    oGdPictureImaging.ICCAddProfileToFile("myimage.tif", "profile.icc")
    ' Now we load the new image
    ImageID = oGdPictureImaging.CreateGdPictureImageFromFileICM ("myimage.tif")
    'Now you can do your processing with the image
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ICCRemove(System.Int32)">
      <summary>
 Deletes the ICC profile embedded within a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Removing an icc profile." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 oGdPictureImaging.ICCRemove(ImageID)
 oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ICCAddFromFile(System.Int32,System.String)">
      <summary>
 Attaches an ICC profile from a file to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">The path of the ICC profile file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Adding an icc profile to an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 'We assume there exists an ICC profile file named profile.icc in the c:\ directory
 oGdPictureImaging.ICCAddFromFile(ImageID, "profile.icc")
 oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ICCImageHasProfile(System.Int32)">
      <summary>
 Asks if a GdPicture image gets an embedded ICC profile.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 True if a GdPicture image embeddes ICC profile, else False.
 </returns>
      <example>
        <code description="Exporting an icc profile from an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If oGdPictureImaging.ICCImageHasProfile(ImageID) Then
    'Now we create an ICC profile from the ImageID
    oGdPictureImaging.ICCExportToFile(ImageID, "profile.icc")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    'We add that profile to another image
    oGdPictureImaging.ICCAddProfileToFile("myimage.tif", "profile.icc")
    ' Now we load the new image
    ImageID = oGdPictureImaging.CreateGdPictureImageFromFileICM ("myimage.tif")
    'Now you can do your processing with the image
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ICCRemoveProfileOfFile(System.String)">
      <summary>
 Removes the ICC profile embedded into an image file. This method permits to conserve the input cmyk color model, if any.
 </summary>
      <param name="FilePath">The path of the image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>Supported image formats are tiff, jpeg, j2k, jp2, webp and png.</remarks>
      <example>
        <code description="Removing  icc profile from a tiff image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 'We assume that there exists an image called "input.tif"
 oGdPictureImaging.ICCRemoveProfileOfFile("input.tif")
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 'Now you can do your processing on an the image as it does not have an ICC profile
 oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ICCAddProfileToFile(System.String,System.String)">
      <summary>
 Adds/replaces an ICC profile of an existing image file. Supported formats are TIFF, JPEG and PNG images.
 </summary>
      <param name="ImagePath">The path of the TIFF, JPEG or PNG image.</param>
      <param name="ProfilePath">The path of the ICM color profil to add to the image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Load an image, save a new copy of it, then apply specific icc profile to the newly created image and then decode it." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("")
 'Now we save the image we loaded to a new file path
 oGdPictureImaging.SaveAsTIFF(ImageID, "myimage.tif", TiffCompression.TiffCompressionAUTO)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 'We know we have an ICC profile named "profile.icc" and we use it
 oGdPictureImaging.ICCAddProfileToFile("myimage.tif", "profile.icc")
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFileICM ("myimage.tif")
 'Now you can do your processing with the image
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetColorRemap(System.Int32,System.Drawing.Imaging.ColorMap[])">
      <summary>
 Applies a color-remap table to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="RemapTable">Array which specifies the color remap table. Each entry is a
 Imaging.ColorMap oGdPictureImaging.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Translate in one call, Blue color by Green, White by Black and Red by Yellow." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim arcolor(3) As Imaging.ColorMap
 arcolor(0).OldColor = Color.Blue
 arcolor(0).NewColor = Color.Green
 arcolor(1).OldColor = Color.White
 arcolor(1).NewColor = Color.Black
 arcolor(2).OldColor = Color.Red
 arcolor(3).NewColor = Color.Yellow
 Dim ImageID as Integer = oGdPictureImaging.CreateGdPictureImageFromFile ("input.bmp")
 oGdPictureImaging.SetColorRemap(ImageID, arcolor)
 oGdPictureImaging.SaveAsBMP (ImageID, "output.bmp")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetColorKey(System.Int32,System.Drawing.Color,System.Drawing.Color)">
      <summary>
 Sets the color key (transparency range) for a specified category on a GdPicture image.
 This method sets the high and low color-key values so that a range of colors can be made
 transparent.
 Any color that has each of its three components (red, green, blue) between the corresponding
 components of the high and low color keys is made transparent.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ColorLow">Specifies the low color-key value. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="ColorHigh">Specifies the high color-key value. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Making the values of the color channel green  between 50 and 120 transparent." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SetColorKey(ImageID, oGdPictureImaging.ARGB(255,0,50,0),oGdPictureImaging.ARGB(255,0,120,0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PaletteSetTransparentColor(System.Int32,System.Drawing.Color)">
      <summary>
 Sets a color of a palette as transparent.
 If the specified color is not present into the palette this will be added if the number of entries
 is lower than 256.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TransparentColor">Color to set as transparent. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Setting a color in the palette as transparent" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim TransparentColor As Color =  oGdPictureImaging.ARGB(255,255,0,0)
 oGdPictureImaging.PaletteSetTransparentColor(ImageID, TransparentColor)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PaletteGetTransparentColor(System.Int32)">
      <summary>
 Gets the transparency color of an indexed GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 The transparent color of the palette.
 </returns>
      <example>
        <code description="Retrieving the image's palette's transperncy color" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim Transparency As Color = oGdPictureImaging.PaletteGetTransparentColor(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PaletteHasTransparentColor(System.Int32)">
      <summary>
 Determines whether a GdPicture image has a color defined as transparent.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 True is a GdPicture image has a color defined as transparent else false.
 </returns>
      <example>
        <code description="Finding out whether an image's palette has a transparent color" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim HasTransparent As Boolean = oGdPictureImaging.PaletteHasTransparentColor(ImageID)
 MessageBox.Show("Image palette has transparent color: " + HasTransparent.ToString())
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PaletteGetType(System.Int32)">
      <summary>
 Gets the type of color palette used by a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 Type of palette. A member of the PaletteType enumeration.
 </returns>
      <example>
        <code description="Retrieving the image's palette's type" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim Type As PaletteType
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Type = oGdPictureImaging.PaletteGetType(ImageID)
 MessageBox.Show("Palette Type is: " + Type.ToString())
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PaletteGetColorsCount(System.Int32)">
      <summary>
 Returns the number of colors contained into the color palette of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 Number of Imaging.Colors.
 </returns>
      <example>
        <code description="Retrieving the image's palette's color count" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ColorCount As Integer
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 ColorCount = oGdPictureImaging.PaletteGet(ImageID)
 MessageBox.Show("Palette color count is: " + ColorCount.ToString())
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PaletteGetEntry(System.Int32,System.Int32)">
      <summary>
 Returns the color of a specific entry of the palette of a GdPicture image.
 </summary>
      <param name="Entry">Index of the color palette. Must be a value between 0 and
 PaletteGetColorsCount() - 1 returned value.</param>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 Color of the selected entry.
 </returns>
      <example>
        <code description="Retrieving the image's palette's fifth entry" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim Entry As Color = oGdPictureImaging.PaletteGetEntry(ImageID, 5)
 'you can do your processing here, for example change the entry in the pallete, then reset the pallette on the image
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PaletteSwapEntries(System.Int32,System.Int32,System.Int32)">
      <summary>
 Returns the color of a specific entry of the palette of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Entrie1">Index of the color palette to swap with the second. Must be a value between 0
 and PaletteGetColorsCount() - 1 returned value.</param>
      <param name="Entrie2">Index of the color palette to swap with the first. Must be a value between 0
 and PaletteGetColorsCount() - 1 returned value.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Swaping entries 5 and 10 in the Color Palette of the image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 oGdPictureImaging.PaletteSwapEntries(ImageID, 5, 10)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PaletteSet(System.Int32,System.Drawing.Color[])">
      <summary>
 Sets a new color palette to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ColorEntries">Output parameter. Array of Color Objects. Color entries of the
 palette.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Setting the Palette of the Image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim Palette(15) As Color
 Dim i As Integer
 For i = 0 To 14
    Palette(i) = Imaging1.ARGB(255, CByte((255) - i), 255, CByte(i))
 Next
 oGdPictureImaging.PaletteSet(ImageID, Palette)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PaletteGet(System.Int32,System.Drawing.Color[]@,System.Int32@)">
      <summary>
 Gets into a 1D array the complete color palette of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ColorEntries">Output parameter. Array of Color Objects. Color array which will contain
 the complete color palette.</param>
      <param name="EntriesCount">Output parameter. Contains the number of colors contained in the
 ColorEntries() array.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Retrieving the image's palette" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ColorEntries() As Color
 Dim EntriesCount As Integer
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 oGdPictureImaging.PaletteGet(ImageID, ColorEntries, EntriesCount)
 'you can do your processing on the palette here
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo1BppAT(System.Int32)">
      <summary>
 Converts a GdPicture image to a 1-bit (black and white) bitmap using a variant of the Otsu adaptive thresholding method. This method is particularly efficient on documents with contrasted foreground and background.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture12.BitonalReduction)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1Bpp(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1BppSauvola(System.Int32,System.Single)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1BppBradley(System.Int32,System.Byte)" />
      <example>
        <code description="Converting the image to a 1-bit per pixel image using adaptive thresholding." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo1BppAT(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "output.tif", TiffCompression.TiffCompressionCCITT4)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo1BppAT(System.Int32,System.Int32)">
      <summary>
 Converts a GdPicture image to a 1-bit (black and white) bitmap using a variant of the Otsu adaptive thresholding method. This method is particularly efficient on documents with contrasted foreground and background.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Threshold">Thresholding for determining the foreground. Must be a value between 0 and 100. Suggested value is 50. Higher is the Thresold value darker should be the resulting image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture12.BitonalReduction)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1Bpp(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1BppSauvola(System.Int32,System.Single)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1BppBradley(System.Int32,System.Byte)" />
      <example>
        <code description="Converting the image to a 1-bit per pixel image using adaptive thresholding with a set thresholding factor." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo1BppAT(ImageID, 10)
    oGdPictureImaging.SaveAsTIFF(ImageID, "output.tif", TiffCompression.TiffCompressionCCITT4)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo1BppBradley(System.Int32,System.Byte)">
      <summary>
 Converts a GdPicture image to a 1-bit (black and white) bitmap using a modified Bradley adaptive thresholding method. 
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Threshold">Value between [0 and 254]. Specifies the aggressiveness of the method. Suggested value is 38. Higher is the value, whiter the resulting bitmap will be.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture12.BitonalReduction)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1Bpp(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1BppSauvola(System.Int32,System.Single)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1BppAT(System.Int32)" />
      <example>
        <code description="Converting the image to a 1-bit per pixel image using adaptive thresholding." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo1BppBradley(ImageID, 38)
    oGdPictureImaging.SaveAsTIFF(ImageID, "output.tif", TiffCompression.TiffCompressionCCITT4)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo1BppSauvola(System.Int32,System.Single)">
      <summary>
 Converts a GdPicture image to a 1-bit (black and white) bitmap using the Sauvola local adaptive thresholding method. This method is particularly efficient on documents with poor contrast.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Factor">Factor of thresholding reduction. Must be a balue in tha range ]0 ; 1[. Suggested value is 0.35. Higher is the factor value lighter should be the resulting image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture12.BitonalReduction)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1Bpp(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1BppAT(System.Int32)" />
      <example>
        <code description="Converting the image to a 1-bit per pixel image using the Sauvola local adaptive thresholding." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo1BppSauvola(ImageID, 0.35)
    oGdPictureImaging.SaveAsTIFF(ImageID, "output.tif", TiffCompression.TiffCompressionCCITT4)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo1BppSauvola(System.Int32,System.Single,System.Int32,System.Int32)">
      <summary>
 Converts a GdPicture image to a 1-bit (black and white) bitmap using the Sauvola local adaptive thresholding method and contrast normalization. This method is particularly efficient on documents with poor contrast.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Factor">Factor of thresholding reduction. Must be a balue in tha range ]0 ; 1[. Suggested value is 0.35. Higher is the factor value lighter should be the resulting image.</param>
      <param name="ContrastMinDif">This method segments the image in tiles and tries to adjust the contrast in each tiles. If the contrast in  a tile is smaller than ContrastMinDif, it uses the minimum and maximum pixel values from neighbor tiles. The value must be in the range [0 - 255] and the suggested one is 50.</param>
      <param name="SmoothKernel">The half-width of the kernel used to smooth the minimum and maximum values of each tiles, in the range [0 (no smoothing) - 5]. Suggested value is 2, higer value should help to remove background parasites on poorly contrasted images.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture12.BitonalReduction)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1Bpp(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1BppAT(System.Int32)" />
      <example>
        <code description="Converting the image to a 1-bit per pixel image using the Sauvola local adaptive thresholding." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo1BppSauvola(ImageID, 0.35, 50, 3)
    oGdPictureImaging.SaveAsTIFF(ImageID, "output.tif", TiffCompression.TiffCompressionCCITT4)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo1Bpp(System.Int32)">
      <summary>
 Converts a GdPicture image to a 1-bit BW indexed color image.
 The color table has 2 entries: 1 Black &amp; 1 White.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <remarks>
 Is equivalent to ConvertTo1Bpp(ImageID, 128).
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture12.BitonalReduction)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1BppAT(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1BppSauvola(System.Int32,System.Single)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1BppBradley(System.Int32,System.Byte)" />
      <example>
        <code description="Converting the image to a 1-bit per pixel image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo1Bpp(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "output.tif", TiffCompression.TiffCompressionCCITT4)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo1Bpp(System.Int32,System.Byte)">
      <summary>
 Converts a GdPicture image to a 1-bit BW indexed color image specifying a threshold value.
 The color table has 2 entries: 1 Black &amp; 1 White.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Threshold">Value between [1 and 255]. Pixels values less than Threshold will be turned black, values equal to or larger till be turned white.
 If you do not know what to choose, select 128 which is the medium value.</param>
      <remarks>
 The pixel value of colored pixels is computed via the following formula: PixValue = (0.2126F * r + 0.7152F * g + 0.0722F * b)
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture12.BitonalReduction)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)" />
      <example>
        <code description="Converting the image to a 1-bit per pixel image with specifying a thresholding value." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo1Bpp(ImageID, 128)
    oGdPictureImaging.SaveAsTIFF(ImageID, "output.tif", TiffCompression.TiffCompressionCCITT4)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo1BppFast(System.Int32)">
      <summary>
 Converts a GdPicture image to a 1-bit BW indexed color image specifying a threshold value. This method assumes that the input image is already black and white.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture12.BitonalReduction)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1Bpp(System.Int32)" />
      <example>
        <code description="Converting the image to a 1-bit per pixel image using a fast algorithm." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo1BppFast(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "output.tif", TiffCompression.TiffCompressionCCITT4)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo4Bpp16(System.Int32)">
      <summary>
 Converts a GdPicture image to a 4-bits indexed color image using a standard color palette.
 The color table has 16 entries.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting the image to a 4-bits per pixel image that has 16 color entries in its table." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo4Bpp16(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo4BppPal(System.Int32,System.Drawing.Color[])">
      <summary>
 Converts a GdPicture image to a 4-bits indexed color image using custom color palette.
 The color table has a maximum of 16 entries.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ColorEntries">Array of Color Objects. All color entries of the palette.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting the image to a 4-bits per pixel image that has a custom color palette." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Palette(3) As Color
    Palette(0) = Imaging1.ARGB(255, 0, 0, 0)
    Palette(1) = Imaging1.ARGB(255, 128, 128, 128)
    Palette(2) = Imaging1.ARGB(255, 255, 255, 255)
    oGdPictureImaging.ConvertTo4BppPal(ImageID, Palette)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo4BppQ(System.Int32)">
      <summary>
 Quantizes &amp; converts a GdPicture image to an 4-bits indexed color image.
 The color table has a maximum of 16 entries.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Color image quantization is a process that reduces the number of distinct colors used in an image,
 usually with the intention that the new image should be as visually similar as possible to the
 original image.
 </remarks>
      <example>
        <code description="Converting the image to a 4-bits per pixel image using color quantization." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo4BppQ(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertBitonalToGrayScale(System.Int32,System.Int32)">
      <summary>
 Converts bitonal images to an enhanced 8-bits gray-scaled indexed color image.
 The color table has 256 entries.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="SoftenValue">Soften factor between 1 and 100.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting a bitonal image into a grayscale image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertBitonalToGrayScale(ImageID, 128)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo8BppGrayScale(System.Int32)">
      <summary>
 Converts a GdPicture image to an 8-bits gray-scaled indexed color image.
 The color table has 256 entries.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method uses a basic grayscale color reduction algorithm, where all three color channels rgb have the weight.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo8BppGrayScaleAdv(System.Int32)" />
      <example>
        <code description="Converting the image into a grayscale image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo8BppGrayScale(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo8BppGrayScaleAdv(System.Int32)">
      <summary>
 Converts a GdPicture image to an 8-bits gray-scaled indexed color image.
 This method uses an advanced grayscale color reduction algorithm.
 The color table has 256 entries.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 The algorithm used uses the following formula based on the rgb color channel values 0.2126F * r + 0.7152F * g + 0.0722F * b.
 </para>
        <para>
 Greyscaling narutal images works better with this method than with ConvertTo8BppGrayScale().
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo8BppGrayScale(System.Int32)" />
      <example>
        <code description="Converting the image to a grayscale indexed color image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo8BppGrayScaleAdv(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo8Bpp216(System.Int32)">
      <summary>
 Converts a GdPicture image to an 8-bits indexed color image using a standard color palette.
 This method uses an automatic segmentation components algorithm.
 The color table has a maximum of 256 entries but only 216 will be used.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting the image to 8-bits per pixel image with only 216 entries used." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo8Bpp216(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo8BppQ(System.Int32)">
      <summary>
 Quantizes &amp; converts a GdPicture image to an 8-bits indexed color image. This method uses a
 color quantization algorithm.
 The color table has a maximum of 256 entries.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Color image quantization is a process that reduces the number of distinct colors used in an image,
 usually with the intention that the new image should be as visually similar as possible to the
 original image.
 </remarks>
      <example>
        <code description="Converting the image to an 8-bits per pixel image using the color quantization algorithm." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo8BppQ(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo8BppQ(System.Int32,System.Int32)">
      <summary>
 Quantizes &amp; converts a GdPicture image to an 8-bits indexed color image with a desired number of
 colors. This method uses a color quantization algorithm.
 The color table has a maximum of 256 entries.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="MaxColors">The number of max. distinct colors to use into the new image. [2 - 256]
 </param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Color image quantization is a process that reduces the number of distinct colors used in an image,
 usually with the intention that the new image should be as visually similar as possible to the
 original image.
 </remarks>
      <example>
        <code description="Converting the image to an 8-bits per pixel image using the color quantization algorithm with maximum 175 distinct colors used." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo8BppQ(ImageID, 175)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo16BppRGB555(System.Int32)">
      <summary>
 Converts a GdPicture image to a 16-bits RGB555 color image.
 5 bits each are used for the red, green, and blue components. The remaining bit is not used.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting the image to a 16-bits per pixel image with 5 bits used for each channel and the last bit is neglected." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo16BppRGB555(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo16BppRGB565(System.Int32)">
      <summary>
 Converts a GdPicture image to a 16-bits RGB565 color image.
 5 bits are used for the red component, 6 bits are used for the green component, and 5 bits are used
 for the blue component.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting the image to a 16-bits per pixel image with 5 bits used for Red and blue channels and 6 bits for the green channel" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo16BppRGB565(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo24BppRGB(System.Int32)">
      <summary>
 Converts a GdPicture image to a 24-bits color image.
 8 bits each are used for the red, green, and blue components.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting the image to a 24-bits per pixel image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo24BppRGB(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo32BppARGB(System.Int32)">
      <summary>
 Converts a GdPicture image to a 32-bits ARGB color image.
 8 bits each are used for the alpha, red, green, and blue components.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting the image to a 32-bits per pixel ARGB image, where 8 pixels are for each of the red, green, blue, and alpha channels" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo32BppARGB(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo32BppRGB(System.Int32)">
      <summary>
 Converts a GdPicture image to a 32-bits RGB color image.
 8 bits each are used for the red, green, and blue components, and the last 8 bits are neglected.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting the image to a 32-bits per pixel RGB image, where the red green and blue channels each are represented by 8 bits, and the last 8 bits are neglected." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo32BppRGB(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo32BppPARGB(System.Int32)">
      <summary>
 Converts a GdPicture image to a 32-bits PARGB color image.
 8 bits each are used for the alpha, red, green, and blue components. The red, green, and blue
 components are premultiplied, according to the alpha component.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting the image to a 32-bits per pixel PARGB image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo32BppPARGB(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo48BppRGB(System.Int32)">
      <summary>
 Converts a GdPicture image to a 48-bits RGB color image.
 16 bits each are used for the red, green, and blue components.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting the image to a 48-bits per pixel RGB image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo48BppRGB(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo64BppARGB(System.Int32)">
      <summary>
 Converts a GdPicture image to a 64-bits ARGB color image.
 16 bits each are used for the alpha, red, green, and blue components.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting the image to a 48-bits per pixel ARGB image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo64BppARGB(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ConvertTo64BppPARGB(System.Int32)">
      <summary>
 Converts a GdPicture image to a 64-bits PARGB color image.
 16 bits each are used for the alpha, red, green, and blue components. The red, green, and blue
 components are premultiplied according to the alpha component.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting the image to a 64-bits per pixel PARGB image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ConvertTo64BppPARGB(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ReleaseGdPictureImage(System.Int32)">
      <summary>
 Deletes a GdPicture Image from the memory.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to release.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateClonedGdPictureImage(System.Int32)">
      <summary>
 Creates a new GdPicture Image and initializes it with a copy of the contents of another GdPicture Image.
 The newly created image will be independent of the image source.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image to clone.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <remarks>
 If the image to clone is a multibitmap image, this method will clone only the selected bitmap and
 will create a single frame image.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateClonedGdPictureImage32BppARGB(System.Int32)">
      <summary>
 Creates a new independent 32-bits ARGB GdPicture Image clone from an existing image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image to clone.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <remarks>
 If the image to clone is a multibitmap image, this method will clone only the selected bitmap and
 will create a single frame image.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <example>
        <code description="Creating a 32 bit ARGB clone of a GdPicture Image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim ResImage As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 ResImage = oGdPictureImaging.CreateClonedGdPictureImage32BppARGB(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateClonedGdPictureImage24BppRGB(System.Int32)">
      <summary>
 Creates a new independent 24-bits RGB GdPicture Image clone from an existing image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image to clone.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <remarks>
 If the image to clone is a multibitmap image, this method will clone only the selected bitmap and
 will create a single frame image.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <example>
        <code description="Creating a 32 bit ARGB clone of a GdPicture Image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim ResImage As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 ResImage = oGdPictureImaging.CreateClonedGdPictureImage24BppRGB(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateClonedGdPictureImage32BppPARGB(System.Int32)">
      <summary>
 - Creates a new independent 32-bits PARGB GdPicture Image clone from an existing image.
 8 bits are used for each of the alpha, red, green, and blue components. The red, green, and blue
 components are pre-multiplied, according to the alpha component.
 - This pixel format provides better performances on Windows applications.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image to clone.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <remarks>
 If the image to clone is a multibitmap image, this method will clone only the selected bitmap and
 will create a single frame image.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <example>
        <code description="Creating a 32 bit PARGB clone of a GdPicture Image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim ResImage As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 ResImage = oGdPictureImaging.CreateClonedGdPictureImage32BppPARGB(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateClonedGdPictureImageArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Creates a new GdPicture Image from the area of another GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image from which we will clone the
 area.</param>
      <param name="SrcLeft">Left pixel source of the area to clone.</param>
      <param name="SrcTop">Top pixel source of the area to clone.</param>
      <param name="Width">Width of the area to clone.</param>
      <param name="Height">Height of the area to clone.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <remarks>
 If the image to clone is a multibitmap image, this method will clone only the selected bitmap and
 will create a single frame image.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <example>
        <code description="Creating an image from a part of a GdPicture Image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim ResImage As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 ResImage = oGdPictureImaging.CreateClonedGdPictureImageArea(ImageID, 0, 0, 100, 100)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromMemory(System.IntPtr,System.Int32)">
      <summary>
 Creates a new GdPicture Image from an image file stored within an area of the memory.
 </summary>
      <param name="hMem">A pointer to the area of the memory which stores the document.</param>
      <param name="Length">The length in byte of the area.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <remarks>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 Notes for multipage images (TIFF and GIF):
 </para>
        <para>
 By default, the class loads multipage images (GIF and TIFF) in read &amp; write mode.
 </para>
        <para>
 To open multipage images in read-only mode call the TiffOpenMultiPageForWrite() method specifying False for tiff images or the GifOpenMultiFrameForWrite() method for gif images.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromByteArray(System.Byte[])">
      <summary>
 Creates a new GdPicture Image from an image file stored within an array of bytes.
 </summary>
      <param name="Data">The image data.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <example>
        <code description="How to create an image from an array of bytes" lang="VB.NET">
 Dim oFile As System.IO.FileInfo
 oFile = New System.IO.FileInfo("myimage.gif")
 Dim oFileStream As System.IO.FileStream = oFile.OpenRead()
 Dim lBytes As Integer = CInt(oFileStream.Length)
 If (lBytes &gt; 0) Then
    Dim fileData(lBytes - 1) As Byte
    Dim ImageID As Integer
    oFileStream.Read(fileData, 0, lBytes)
    oFileStream.Close()
    ImageID = oGdPictureImaging.CreateGdPictureImageFromByteArray(fileData)
 End If
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.SaveAsByteArray(System.Int32,System.Byte[]@,System.Int32@,GdPicture12.DocumentFormat,System.Int32)" />
      <remarks>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 Notes for multipage images (TIFF and GIF):
 </para>
        <para>
 By default, the class loads multipage images (GIF and TIFF) in read &amp; write mode.
 </para>
        <para>
 To open multipage images in read-only mode call the TiffOpenMultiPageForWrite() method specifying False for tiff images or the GifOpenMultiFrameForWrite() method for gif images.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromByteArray(System.Byte[],GdPicture12.DocumentFormat)">
      <summary>
 Creates a new GdPicture Image from an image file stored within an array of bytes.
 </summary>
      <param name="Data">The image data.</param>
      <param name="ImageFormat">A member of the DocumentFormat enumeration specifying the input image format.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <example>
        <code description="How to create an image from an array of bytes" lang="VB.NET">
 Dim oFile As System.IO.FileInfo
 oFile = New System.IO.FileInfo("myimage.gif")
 Dim oFileStream As System.IO.FileStream = oFile.OpenRead()
 Dim lBytes As Integer = CInt(oFileStream.Length)
 If (lBytes &gt; 0) Then
    Dim fileData(lBytes - 1) As Byte
    Dim ImageID As Integer
    oFileStream.Read(fileData, 0, lBytes)
    oFileStream.Close()
    ImageID = oGdPictureImaging.CreateGdPictureImageFromByteArray(fileData, DocumentFormat.DocumentFormatGIF)
 End If
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.SaveAsByteArray(System.Int32,System.Byte[]@,System.Int32@,GdPicture12.DocumentFormat,System.Int32)" />
      <remarks>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 Notes for multipage images (TIFF and GIF):
 </para>
        <para>
 By default, the class loads multipage images (GIF and TIFF) in read &amp; write mode.
 </para>
        <para>
 To open multipage images in read-only mode call the TiffOpenMultiPageForWrite() method specifying False for tiff images or the GifOpenMultiFrameForWrite() method for gif images.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromClipboard">
      <summary>
 Creates a new GdPicture Image from clipboard content.
 </summary>
      <remarks>
 If success, set the created image as the native GdPicture image.
 </remarks>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <example>
        <code description="Creating a GdPicture image from a clipBoard content, and if it exists, inverting the colors and then saving it to desk." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromClipboard()
 If Imaging1.GetStat() &gt; GdPictureStatus.OK Then
    MessageBox.Show("There is no bitmap in the clipboard")
 Else
    oGdPictureImaging.FxNegative(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromDIB(System.Int32)">
      <summary>
 Creates a new GdPicture Image from a Device Independent Bitmap handle (DIB).
 </summary>
      <param name="Dib">Pointer to a Microsoft® Windows® Graphics Device Interface (GDI) BITMAPINFO structure, as integer value.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <remarks>
 The created GdPicture image will use its own pixel allocation.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromDIB(System.IntPtr)">
      <summary>
 Creates a new GdPicture Image from a Device Independent Bitmap handle (DIB).
 </summary>
      <param name="Dib">Pointer to a Microsoft® Windows® Graphics Device Interface (GDI) BITMAPINFO structure, as IntPtr value.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <remarks>
 The created GdPicture image will use its own pixel allocation.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetRawImageLoadingOptions(GdPicture12.RAWImageLoadingOptions)">
      <summary>
 Specifies how this object should subsequently open RAW image.
 </summary>
      <param name="Options">A combination of members of the RAWImageLoadingOptions enumeration. Default value is Preview.</param>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromFile(System.String)">
      <summary>
 Creates a new GdPicture Image based on an image file.
 </summary>
      <param name="FilePath">The path of the file to open.Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <remarks>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 Notes for multipage images (TIFF and GIF):
 </para>
        <para>
 By default, the class loads multipage images (GIF and TIFF) in read &amp; write mode.
 </para>
        <para>
 To open multipage images in read-only mode call the TiffOpenMultiPageForWrite() method specifying False for tiff images or the GifOpenMultiFrameForWrite() method for gif images.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromFile(System.String,System.Boolean)">
      <summary>
 Creates a new GdPicture Image based on an image file.
 </summary>
      <param name="FilePath">The path of the file to open.Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="LoadInMemory">Specifies if the content of the document must be loaded in memory.
 Loading document in memory results on a better manipulation performance but consumes more memory.
 This also permits to subsequently overwrite or delete the input file. Default value is False.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <remarks>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 Notes for multipage images (TIFF and GIF):
 By default, the class loads multipage images (GIF and TIFF) in read &amp; write mode.
 To open multipage images in read-only mode call the TiffOpenMultiPageForWrite() method specifying False for tiff images or the GifOpenMultiFrameForWrite() method for gif images.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromFile(System.String,System.Boolean,System.Boolean)">
      <summary>
 Creates a new GdPicture Image based on an image file.
 </summary>
      <param name="FilePath">The path of the file to open.Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="LoadInMemory">Specifies if the content of the document must be loaded in memory.
 Loading document in memory results on a better manipulation performance but consumes more memory.
 This also permits to subsequently overwrite or delete the input file. Default value is False.</param>
      <param name="DirectAccess">When True, only image properties, metadata and embedded thumbnail will be loaded.
 This parameter is particularly useful to obtain image information's without decoding it. Be careful not to call subsequent methods that need to access pixel data if this parameter is set to True.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <remarks>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 Notes for multipage images (TIFF and GIF):
 By default, the class loads multipage images (GIF and TIFF) in read &amp; write mode.
 To open multipage images in read-only mode call the TiffOpenMultiPageForWrite() method specifying False for tiff images or the GifOpenMultiFrameForWrite() method for gif images.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromMetaFile(System.String)">
      <summary>
 Creates a new GdPicture Image based on a metafile image file.
 </summary>
      <param name="FilePath">The path of the file to open.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <remarks>
 Supported formats are EMF, WMF and SVG.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromMetaFile(System.String,System.Single)">
      <summary>
 Creates a new GdPicture Image based on a metafile image file and scaling it by multiplying the image size by a
 specified factor.
 </summary>
      <param name="FilePath">The path of the file to open. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="ScaleBy">Multiplies the image size by a specified factor.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <remarks>
 Supported formats are EMF, WMF and SVG.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromHBitmap(System.Int32)">
      <summary>
 Creates a new GdPicture Image from an HBitmap handle.
 </summary>
      <param name="hBitmap">Handle to a GDI bitmap, as Integer value.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <remarks>
 The created GdPicture image will use its own pixel allocation.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromHBitmap(System.IntPtr)">
      <summary>
 Creates a new GdPicture Image from an HBitmap handle.
 </summary>
      <param name="hBitmap">Handle to a GDI bitmap, as IntPtr value.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <remarks>
 The created GdPicture image will use its own pixel allocation.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromBitmap(System.Drawing.Bitmap)">
      <summary>
 Creates a new GdPicture Image from a System.Drawing.Bitmap object.
 </summary>
      <param name="bm">Bitmap object.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <example>
        <code description="How to import/export Gdpicture Image from/to Bitmap" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim ResImage As Integer
 Dim Bm As Bitmap
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 Bm = oGdPictureImaging.GetBitmapFromGdPictureImage(ImageID)
 ResImage = oGdPictureImaging.CreateGdPictureImageFromBitmap(Bm)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromCMYKSep(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 .Creates a GdPicture image from four separated bitmap (8bpp or 1bpp) representing each Cyan, Magenta, Yellow, Black channel of a bitmap.
 </summary>
      <param name="CyanImageID">The GdPicture bitmap representing the Cyan channel of the initial bitmap to recompose.</param>
      <param name="MagentaImageID">The GdPicture bitmap representing the Magenta channel of the initial bitmap to recompose.</param>
      <param name="YellowImageID">The GdPicture bitmap representing the Yellow channel of the initial bitmap to recompose.</param>
      <param name="BlackImageID">The GdPicture bitmap representing the Black channel of the initial bitmap to recompose.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <remarks>Input bitmap must be all 1-bit per pixel or 8-bit per pixel. In case input bitmap are 1-bpp the generated bitmap will be 8bpp. Otherwise, a 24-bpp bitmap will be created.</remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <example>
        <code description="Creating a new GdPicture image from four separated Cyan, Magenta, Yellow, Black channels." lang="VB.NET">
 Using gdPictureImaging As New GdPictureImaging
    Dim CyanImageID As Integer = gdPictureImaging.CreateGdPictureImageFromFile("Cyan.tif")
    Dim MagentaImageID As Integer = gdPictureImaging.CreateGdPictureImageFromFile("Magenta.tif")
    Dim YellowImageID As Integer = gdPictureImaging.CreateGdPictureImageFromFile("Yellow.tif")
    Dim BlackImageID As Integer = gdPictureImaging.CreateGdPictureImageFromFile("Black.tif")
    Dim CombinedImageID As Integer = gdPictureImaging.CreateGdPictureImageFromCMYKSep(CyanImageID, MagentaImageID, YellowImageID, BlackImageID)
    gdPictureImaging.ReleaseGdPictureImage(CyanImageID)
    gdPictureImaging.ReleaseGdPictureImage(MagentaImageID)
    gdPictureImaging.ReleaseGdPictureImage(YellowImageID)
    gdPictureImaging.ReleaseGdPictureImage(BlackImageID)
    gdPictureImaging.SaveAsTIFF(CombinedImageID, "combined.tif", TiffCompression.TiffCompressionAUTO)
    gdPictureImaging.ReleaseGdPictureImage(CombinedImageID)
 End Using
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromHICON(System.Int32)">
      <summary>
 Creates a new GdPicture Image from an icon handle HICON.
 </summary>
      <param name="hicon">Handle to a Microsoft® Windows® Graphics Device Interface (GDI) icon, as Integer value.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <remarks>
 The created GdPicture image will use its own pixel allocation.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromHICON(System.IntPtr)">
      <summary>
 Creates a new GdPicture Image from an icon handle HICON.
 </summary>
      <param name="hicon">Handle to a Microsoft® Windows® Graphics Device Interface (GDI) icon, as IntPtr value.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <remarks>
 The created GdPicture image will use its own pixel allocation.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromHwnd(System.Int32)">
      <summary>
 Creates a new GdPicture Image from a window handle HWnd.
 </summary>
      <param name="HANDLE">A Window Handle, as Integer value. This must be a top-level window or a child of
 a top level window.</param>
      <remarks>
 You can get the Windows Desktop hwnd with the GetDesktopHwndI method.
 </remarks>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GetDesktopHwndI" />
      <example>
        <code description="How to create a GdPicture Image from the desktop Window." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim Hwnd As Integer = oGdPictureImaging.GetDesktopHwndI()
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromHwnd(Hwnd)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromHwnd(System.IntPtr)">
      <summary>
 Creates a new GdPicture Image from a window handle HWnd.
 </summary>
      <param name="HANDLE">A Window Handle, as IntPtr value. This must be a top-level window or a child of
 a top level window.</param>
      <remarks>
 You can get the Windows Desktop hwnd with the GetDesktopHwnd method.
 </remarks>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GetDesktopHwnd" />
      <example>
        <code description="How to create a GdPicture Image from the desktop Window." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim Hwnd As IntPtr = oGdPictureImaging.GetDesktopHwnd()
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromHwnd(Hwnd)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromRawBits(System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.IntPtr)">
      <summary>
 Creates a new GdPicture Image from raw bitmap in memory.
 </summary>
      <remarks>
 Warning: Do not remove the raw bitmap from the memory until you delete the created GdPicture Image.
 </remarks>
      <param name="Width">Specifies the width, in pixels, of the bitmap.</param>
      <param name="Height">Specifies the height, in pixels, of the bitmap.</param>
      <param name="Stride">Specifies the byte offset between the beginning of one scan line and the
 next. This is usually (but not necessarily) the number of bytes in the
 pixel format (for example, 2 for 16 bits per pixel) multiplied by the
 width of the bitmap. The value passed to this parameter must be a multiple
 of four.</param>
      <param name="PixelFormat">Specifies the pixel format of the bitmap. A member of the PixelFormat
 enumeration.</param>
      <param name="Bits">Pointer to an array of bytes that contains the pixel data. The caller is
 responsible for allocating and freeing the block of memory pointed to by
 this parameter.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromStream(System.IO.Stream)">
      <summary>
 Creates a new GdPicture Image from an image stored into a Stream Object.
 </summary>
      <param name="Stream">System.IO.Stream object storing the image data.</param>
      <remarks>
        <para>
 The provided stream must support seeking.
 </para>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 Notes for multipage images (TIFF and GIF):
 By default, the class loads multipage images (GIF and TIFF) in read &amp; write mode.
 To open multipage images in read-only mode call the TiffOpenMultiPageForWrite() method specifying False for tiff images or the GifOpenMultiFrameForWrite() method for gif images.
 If the image is a multipage file (TIFF, JBIG2, GIFF), the stream should be kept open until the image is released.
 </para>
      </remarks>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromStream(System.IO.Stream,GdPicture12.DocumentFormat)">
      <summary>
 Creates a new GdPicture Image from an image stored into a Stream Object. This method uses a GdPicture DocumentFormat enumerator.
 </summary>
      <param name="Stream">System.IO.Stream object storing the image data.</param>
      <param name="ImageFormat">A member of the DocumentFormat enumeration specifying the input image format.</param>
      <remarks>
        <para>
 The provided stream must support seeking.
 </para>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 Notes for multipage images (TIFF and GIF):
 By default, the class loads multipage images (GIF and TIFF) in read &amp; write mode.
 To open multipage images in read-only mode call the TiffOpenMultiPageForWrite() method specifying False for tiff images or the GifOpenMultiFrameForWrite() method for gif images.
 If the image is a multipage file (TIFF, JBIG2, GIFF), the stream should be kept open until the image is released.
 </para>
      </remarks>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <example>
        <code description="Creating an GdPictureImage identifier from an stream." lang="VB.NET">
 Dim Image As IO.Stream = New IO.FileStream("d:\Images\test.png", IO.FileMode.Open)
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = GdPictureImaging.CreateGdPictureImageFromStream(Image)
 If ImageID  &lt;&gt; 0 Then
    'You can do your processing here
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("The file can't be opened: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromStream(System.IO.Stream,GdPicture12.DocumentFormat,System.Boolean)">
      <summary>
 Creates a new GdPicture Image from an image stored into a Stream Object. This method uses a GdPicture DocumentFormat enumerator.
 </summary>
      <param name="Stream">System.IO.Stream object storing the image data.</param>
      <param name="ImageFormat">A member of the DocumentFormat enumeration specifying the input image format.</param>
      <param name="DirectAccess">When True, only image properties, metadata and embedded thumbnail will be loaded.
 This parameter is particularly useful to obtain image information's without decoding it. Be careful not to call subsequent methods that need to access pixel data if this parameter is set to True.</param>
      <remarks>
        <para>
 The provided stream must support seeking.
 </para>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 Notes for multipage images (TIFF and GIF):
 By default, the class loads multipage images (GIF and TIFF) in read &amp; write mode.
 To open multipage images in read-only mode call the TiffOpenMultiPageForWrite() method specifying False for tiff images or the GifOpenMultiFrameForWrite() method for gif images.
 If the image is a multipage file (TIFF, JBIG2, GIFF), the stream should be kept open until the image is released.
 </para>
      </remarks>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <example>
        <code description="Creating an GdPictureImage identifier from an stream." lang="VB.NET">
 Dim Image As IO.Stream = New IO.FileStream("d:\Images\test.png", IO.FileMode.Open)
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = GdPictureImaging.CreateGdPictureImageFromStream(Image)
 If ImageID  &lt;&gt; 0 Then
    'You can do your processing here
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("The file can't be opened: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromStream(System.IO.Stream,System.String)">
      <summary>
 Creates a new GdPicture Image from an image stored into a Stream Object. This method uses a GdPicture DocumentFormat enumerator.
 </summary>
      <param name="Stream">System.IO.Stream object storing the image data.</param>
      <param name="FileName">The initial name of the file stored in the Stream object. IE: myfile.tif. The document format will be automatically detected based on this file name.</param>
      <remarks>
        <para>
 The provided stream must support seeking.
 </para>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 Notes for multipage images (TIFF and GIF):
 By default, the class loads multipage images (GIF and TIFF) in read &amp; write mode.
 To open multipage images in read-only mode call the TiffOpenMultiPageForWrite() method specifying False for tiff images or the GifOpenMultiFrameForWrite() method for gif images.
 If the image is a multipage file (TIFF, JBIG2, GIFF), the stream should be kept open until the image is released.
 </para>
      </remarks>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromIStream(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary>
 Creates a new GdPicture Image from an image stored into an IStream Object.
 </summary>
      <param name="Stream">An IStream object storing the image data.</param>
      <remarks>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 Notes for multipage images (TIFF and GIF):
 By default, the class loads multipage images (GIF and TIFF) in read &amp; write mode.
 To open multipage images in read-only mode call the TiffOpenMultiPageForWrite() method specifying False for tiff images or the GifOpenMultiFrameForWrite() method for gif images.
 </para>
      </remarks>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromIStream(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary>
 Creates a new GdPicture Image from an image stored into an IStream Object.
 </summary>
      <param name="Stream">An IStream object storing the image data.</param>
      <param name="DirectAccess">When True, only image properties, metadata and embedded thumbnail will be loaded.
 This parameter is particularly useful to obtain image information's without decoding it. Be careful not to call subsequent methods that need to access pixel data if this parameter is set to True.</param>
      <remarks>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 Notes for multipage images (TIFF and GIF):
 By default, the class loads multipage images (GIF and TIFF) in read &amp; write mode.
 To open multipage images in read-only mode call the TiffOpenMultiPageForWrite() method specifying False for tiff images or the GifOpenMultiFrameForWrite() method for gif images.
 </para>
      </remarks>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromIStream(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean,GdPicture12.DocumentFormat)">
      <summary>
 Creates a new GdPicture Image from an image stored into an IStream Object.
 </summary>
      <param name="Stream">An IStream object storing the image data.</param>
      <param name="DirectAccess">When True, only image properties, metadata and embedded thumbnail will be loaded.
 This parameter is particularly useful to obtain image information's without decoding it. Be careful not to call subsequent methods that need to access pixel data if this parameter is set to True.</param>
      <param name="ImageFormat">A member of the DocumentFormat enumeration specifying the input image format.</param>
      <remarks>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 Notes for multipage images (TIFF and GIF):
 By default, the class loads multipage images (GIF and TIFF) in read &amp; write mode.
 To open multipage images in read-only mode call the TiffOpenMultiPageForWrite() method specifying False for tiff images or the GifOpenMultiFrameForWrite() method for gif images.
 </para>
      </remarks>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromString(System.String)">
      <summary>
 Creates a new GdPicture Image from image data stored within string data (Encoding 1252).
 </summary>
      <param name="ImageData">String which contains the image file data.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <remarks>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 Notes for multipage images (TIFF and GIF):
 By default, the class loads multipage images (GIF and TIFF) in read &amp; write mode.
 To open multipage images in read-only mode call the TiffOpenMultiPageForWrite() method specifying False for tiff images or the GifOpenMultiFrameForWrite() method for gif images.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromFTP(System.String,System.String,System.String,System.String,System.Int32)">
      <summary>
 Creates a new GdPicture Image from an image file stored in a distant server using FTP protocol.
 </summary>
      <param name="Host">The host server IE: ftp.gdicture.com.</param>
      <param name="Path">The image file path into the distant server IE: /demo/image.jpg.</param>
      <param name="Login">User Login.</param>
      <param name="Password">User Password.</param>
      <param name="FTPPort">The FTP port number used. Usually 21.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed. If HTTP or FTP error status is returned the GetLastTransferError method can be used to diagnose the error.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <remarks>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 Notes for multipage images (TIFF and GIF):
 By default, the class loads multipage images (GIF and TIFF) in read &amp; write mode.
 To open multipage images in read-only mode call the TiffOpenMultiPageForWrite() method specifying False for tiff images or the GifOpenMultiFrameForWrite() method for gif images.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetLastTransferError" />
      <example>
        <code description="Loading an image stored in a server using FTP protocol, and then saving it on desk" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFTP("ftp.gdpicture.com", "/demo/image.jpg", "user", "1234", 21)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromHTTP(System.String,System.String,System.Int32)">
      <summary>
 Creates a new GdPicture Image from an image file stored in a distant server using HTTP protocol.
 </summary>
      <param name="Host">The host server. IE: www.gdpicture.com.</param>
      <param name="Path">The image file path into the distant server .IE: /demo/image.jpg.</param>
      <param name="HTTPPort">The HTTP port number used. Usually 80 or 443 to use https transfert mode.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed. If HTTP or FTP error status is returned the GetLastTransferError method can be used to diagnose the error.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.SetHttpTransfertBufferSize(System.Int32)" />
      <remarks>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 Notes for multipage images (TIFF and GIF):
 By default, the class loads multipage images (GIF and TIFF) in read &amp; write mode.
 To open multipage images in read-only mode call the TiffOpenMultiPageForWrite() method specifying False for tiff images or the GifOpenMultiFrameForWrite() method for gif images.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetLastTransferError" />
      <example>
        <code description="Loading an image stored in a server using HTTP protocol, and then saving it on desk" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromHTTP("www.gdpicture.com", "/demo/image.jpg", 80)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromHTTP(System.String,System.String,System.String)">
      <summary>
 Creates a new GdPicture Image from an image file stored in a distant server using HTTP protocol.
 </summary>
      <param name="Uri">The destination Uri. IE: http://www.gdpicture.com/demo/image.jpg.</param>
      <param name="Login">The login required to access the URI. Can be an empty string.</param>
      <param name="Password">The password required to access the URI. Can be an empty string.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed. If HTTP or FTP error status is returned the GetLastTransferError method can be used to diagnose the error.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.SetHttpTransfertBufferSize(System.Int32)" />
      <remarks>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 Notes for multipage images (TIFF and GIF):
 By default, the class loads multipage images (GIF and TIFF) in read &amp; write mode.
 To open multipage images in read-only mode call the TiffOpenMultiPageForWrite() method specifying False for tiff images or the GifOpenMultiFrameForWrite() method for gif images.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetLastTransferError" />
      <example>
        <code description="Loading an image stored in a server using HTTP protocol, and then saving it on desk" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromHTTP("http://www.gdpicture.com/demo/image.jpg", "", "")
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateNewGdPictureImage(System.Int32,System.Int32,System.Int16,System.Drawing.Color)">
      <summary>
 Creates a new empty GdPicture Image with specific dimensions, bits per pixel, and Color.
 </summary>
      <param name="Width">The width, in pixel, of the image.</param>
      <param name="Height">The height, in pixel, of the image.</param>
      <param name="BitDepth">Bit depth of the image.</param>
      <param name="BackColor">Background color of the image. This parameter is ignored for indexed bitmap.
 A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="How to create a new GdPicture Image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ResImg As Integer
 ResImg = oGdPictureImaging.CreateNewGdPictureImage(250, 250, 24, oGdPictureImaging.ARGB(255,0,0,0))
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateNewGdPictureImage(System.Int32,System.Int32,System.Int16,System.Int32)">
      <summary>
 Creates a new empty GdPicture Image.
 </summary>
      <param name="Width">The width, in pixel, of the image.</param>
      <param name="Height">The height, in pixel, of the image.</param>
      <param name="BitDepth">Bit depth of the image.</param>
      <param name="BackColor">A suitable color value can be obtained by using the ARGBI() method.
 Background color of the image. This parameter is ignored for indexed bitmap.
 </param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="How to create a new GdPicture Image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ResImg As Integer
 ResImg = oGdPictureImaging.CreateNewGdPictureImage(250, 250, 24, oGdPictureImaging.ARGB(255,0,0,0))
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateNewGdPictureImage(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.Drawing.Color)">
      <summary>
 Creates a new empty GdPicture Image, with specific dimensions, pixel format, and Color.
 </summary>
      <param name="Width">The width, in pixel, of the image.</param>
      <param name="Height">The height, in pixel, of the image.</param>
      <param name="PixelFormat">A member of the PixelFormat enumeration.</param>
      <param name="BackColor">Background color of the image. This parameter is ignored for indexed bitmap.
 A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="How to create a new GdPicture Image using Pixel Format" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ResImg As Integer
 ResImg = oGdPictureImaging.CreateNewGdPictureImage(250, 250, PixelFormat.Format24bppRgb, oGdPictureImaging.ARGB(255,0,0,0))
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateNewGdPictureImage(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.Int32)">
      <summary>
 Creates a new empty GdPicture Image, with specific dimensions, pixel format, and color specified via a color integer.
 </summary>
      <param name="Width">The width, in pixel, of the image.</param>
      <param name="Height">The height, in pixel, of the image.</param>
      <param name="PixelFormat">A member of the PixelFormat enumeration.</param>
      <param name="BackColor">A suitable color value can be obtained by using the ARGBI() method.
 Background color of the image. This parameter is ignored for indexed bitmap.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="How to create a new GdPicture Image using Pixel Format" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ResImg As Integer
 ResImg = oGdPictureImaging.CreateNewGdPictureImage(250, 250, PixelFormat.Format24bppRgb, oGdPictureImaging.ARGBI(255,0,0,0))
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DicomIsMultiPage(System.Int32)">
      <summary>
 Checks if a GdPicture image is a multipage DICOM image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image to check.</param>
      <returns>
 True if the image is a multipage DICOM image, else false.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.DicomGetPageCount(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.DicomSelectPage(System.Int32,System.Int32)" />
      <example>
        <code description="How to know whether a DICOM image is a multiple image or not." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("myfile.dcm")
 Dim MultiPageImage As Boolean = oGdPictureImaging.DicomIsMultiPage(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DicomGetPageCount(System.Int32)">
      <summary>
 Returns the number of pages currently available in a multipage DICOM image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multipage DICOM image.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.DicomIsMultiPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.DicomSelectPage(System.Int32,System.Int32)" />
      <returns>
 Number of pages currently available in the multipage DICOM image. Returns 0 if the image is not a
 multipage DICOM image.
 </returns>
      <example>
        <code description="How to obtain a multipage DICOM image page count." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("myfile.dcm")
 Dim PageCount As Integer = oGdPictureImaging.DicomGetPageCount(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DicomSelectPage(System.Int32,System.Int32)">
      <summary>
 Selects a page of a multipage DICOM image. The page can now be edited or saved to a different file.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multipage DICOM image.</param>
      <param name="Page">Page number between 1 and page count.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.DicomGetPageCount(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.DicomIsMultiPage(System.Int32)" />
      <example>
        <code description="Converting a multipage DICOM file to multipage TIFF file with JPEG compression." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim tiffImageID As Integer
 Dim dicomImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.dcm")
 Dim PageCount As Integer = oGdPictureImaging.DicomGetPageCount(dicomImageID)
 For i As Integer = 1 To PageCount
    If i = 1 Then
       tiffImageID = oGdPictureImaging.CreateClonedGdPictureImage(dicomImageID)
       oGdPictureImaging.TiffSaveAsMultiPageFile(tiffImageID, "multipage.tif", TiffCompression.TiffCompressionJPEG)
    Else
       oGdPictureImaging.DicomSelectPage(dicomImageID, i)
       oGdPictureImaging.TiffAddToMultiPageFile(tiffImageID, dicomImageID)
    End If
 Next
 oGdPictureImaging.TiffCloseMultiPageFile(tiffImageID)
 oGdPictureImaging.ReleaseGdPictureImage(tiffImageID)
 oGdPictureImaging.ReleaseGdPictureImage(dicomImageID)
 oGdPictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DicomGetTagsCount(System.Int32)">
      <summary>
 Returns the number of available tags in a DICOM image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The DICOM image.</param>
      <returns>
 0: No tag or error. Use the GetStat() method to determine the reason this method failed.
 Non-zero: The number of available tags.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DicomGetTagValue(System.Int32,System.Int32)">
      <summary>
 Returns the value, as string, of a specific tag available in a DICOM image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The DICOM image.</param>
      <param name="TagIdx">The tag index. Must be a value in the range 0 ; DicomGetTagsCount() -1.</param>
      <returns>The value of the specified tag.</returns>
      <remarks>Use the GetStat() method to determine if the method succeeded.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DicomGetTagDescription(System.Int32,System.Int32)">
      <summary>
 Returns the description, as string, of a specific tag available in a DICOM image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The DICOM image.</param>
      <param name="TagIdx">The tag index. Must be a value in the range 0 ; DicomGetTagsCount() -1.</param>
      <returns>The description of the specified tag.</returns>
      <remarks>Use the GetStat() method to determine if the method succeeded.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DicomGetTagGroup(System.Int32,System.Int32)">
      <summary>
 Returns the group identifier of a specific tag available in a DICOM image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The DICOM image.</param>
      <param name="TagIdx">The tag index. Must be a value in the range 0 ; DicomGetTagsCount() -1.</param>
      <returns>The group identifier of the specified tag.</returns>
      <remarks>Use the GetStat() method to determine if the method succeeded.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DicomGetTagElement(System.Int32,System.Int32)">
      <summary>
 Returns the element identifier of a specific tag available in a DICOM image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The DICOM image.</param>
      <param name="TagIdx">The tag index. Must be a value in the range 0 ; DicomGetTagsCount() -1.</param>
      <returns>The element identifier of the specified tag.</returns>
      <remarks>Use the GetStat() method to determine if the method succeeded.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DicomGetDefaultWindowLevel(System.Int32)">
      <summary>
 Returns the default window level of a DICOM image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The DICOM image.</param>
      <returns>The default window level.</returns>
      <remarks>Use the GetStat() method to determine if the method succeeded.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DicomGetLastWindowLevel(System.Int32)">
      <summary>
 Returns the last window level applied to a DICOM image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The DICOM image.</param>
      <returns>The  window level.</returns>
      <remarks>Use the GetStat() method to determine if the method succeeded.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DicomGetDefaultWindowWidth(System.Int32)">
      <summary>
 Returns the default window width of a DICOM image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The DICOM image.</param>
      <returns>The default window width.</returns>
      <remarks>Use the GetStat() method to determine if the method succeeded.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DicomGetLastWindowWidth(System.Int32)">
      <summary>
 Returns the last window width applied to a DICOM image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The DICOM image.</param>
      <returns>The last window width.</returns>
      <remarks>Use the GetStat() method to determine if the method succeeded.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DicomGetMaxWindowWidth(System.Int32)">
      <summary>
 Returns the maximum window width of a DICOM image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The DICOM image.</param>
      <returns>The maximum window width.</returns>
      <remarks>Use the GetStat() method to determine if the method succeeded.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DicomGetMaxWindowLevel(System.Int32)">
      <summary>
 Returns the maximum window level of a DICOM image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The DICOM image.</param>
      <returns>The maximum window level.</returns>
      <remarks>Use the GetStat() method to determine if the method succeeded.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DicomGetMinWindowLevel(System.Int32)">
      <summary>
 Returns the minimum window level of a DICOM image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The DICOM image.</param>
      <returns>The minimum window level.</returns>
      <remarks>Use the GetStat() method to determine if the method succeeded.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DicomSetWindowLevel(System.Int32,System.Single,System.Single)">
      <summary>
 Changes the current window level of a DICOM image by applying VOI LUT transformation.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The DICOM image.</param>
      <param name="WindowWidth">The window width. Should be a value in the range 1 ; DicomGetMaxWindowWidth().</param>
      <param name="WindowLevel">The window level. Should be a value in the range DicomGetMinWindowLevel() ; DicomGetMaxWindowLevel().</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <remarks>An example of this method can be seen on the DICOM Viewer demo application.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DWrite(System.Int32,GdPicture12.Barcode1DWriterType,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
 Draws a 1D barcode on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BarcodeType">A member of the Barcode1DWriterType enumeration.</param>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="DstLeft">Left pixel destination of to top-left corner of bounding box the barcode.</param>
      <param name="DstTop">Top pixel destination of to top-left corner of bounding box of the
 barcode.</param>
      <param name="DstWidth">Width of the bounding box of the barcode.</param>
      <param name="DstHeight">Height of the bounding box of the barcode.</param>
      <param name="FillColor">Color of the barcode. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a 1-D barcode onto an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Data As String = "978524"
    Dim DstLeft As Integer = 50
    Dim DstTop As Integer = 50
    Dim DstWidth As Integer = 200
    Dim DstHeight As Integer = 800
    Dim BarcodeType As Barcode1DWriterType = Barcode1DWriterType.Barcode1DWriterCode11
    oGdPictureImaging.Barcode1DWrite(ImageID, BarcodeType, Data, DstLeft, DstTop, DstWidth, DstHeight, Imaging1.ARGB(0, 0, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DWrite(System.Int32,GdPicture12.Barcode1DWriterType,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,GdPicture12.BarcodeAlign)">
      <summary>
 Draws a 1D barcode on a GdPicture image. This method accepts a parameter to specify the barcode
 alignment into the specified bounding box. The default alignment is centered.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BarcodeType">A member of the Barcode1DWriterType enumeration.</param>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="DstLeft">Left pixel destination of to top-left corner of bounding box the barcode.</param>
      <param name="DstTop">Top pixel destination of to top-left corner of bounding box of the
 barcode.</param>
      <param name="DstWidth">Width of the bounding box of the barcode.</param>
      <param name="DstHeight">Height of the bounding box of the barcode.</param>
      <param name="FillColor">Color of the barcode. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="Alignment">A member of the BarcodeAlign enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Writing a 1-D barcode onto an image with left alignment in the surrounding box." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Data As String = "978524"
    Dim DstLeft As Integer = 50
    Dim DstTop As Integer = 50
    Dim DstWidth As Integer = 200
    Dim DstHeight As Integer = 800
    Dim BarcodeType As Barcode1DWriterType = Barcode1DWriterType.Barcode1DWriterCode11
    Dim Alignment As BarcodeAlign = BarcodeAlign.BarcodeAlignLeft
    oGdPictureImaging.Barcode1DWrite(ImageID, BarcodeType, Data, DstLeft, DstTop, DstWidth, DstHeight, Imaging1.ARGB(0, 0, 0), Alignment)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DWrite(System.Int32,GdPicture12.Barcode1DWriterType,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.BarcodeAlign,System.Single)">
      <summary>
 Draws a 1D barcode on a GdPicture image. This method accepts a parameter to specify rotation and
 another to specify the barcode alignment with the specified bounding box. The default alignment is
 centered.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BarcodeType">A member of the Barcode1DWriterType enumeration.</param>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="DstLeft">Left pixel destination of to top-left corner of bounding box the
 barcode.</param>
      <param name="DstTop">Top pixel destination of to top-left corner of bounding box of the
 barcode.</param>
      <param name="DstWidth">Width of the bounding box of the barcode.</param>
      <param name="DstHeight">Height of the bounding box of the barcode.</param>
      <param name="FillColor">Color of the barcode. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="Alignment">A member of the BarcodeAlign enumeration.</param>
      <param name="Angle">The rotation of the barcode in degrees.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Writing a 1-D barcode onto an image with left alignment in the surrounding box and a 45 degree angle skew inside of it." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Data As String = "978524"
    Dim DstLeft As Integer = 50
    Dim DstTop As Integer = 50
    Dim DstWidth As Integer = 200
    Dim DstHeight As Integer = 800
    Dim BarcodeType As Barcode1DWriterType = Barcode1DWriterType.Barcode1DWriterCode11
    Dim Alignment As BarcodeAlign = BarcodeAlign.BarcodeAlignLeft
    Dim Angle As Single = 45.0
    oGdPictureImaging.Barcode1DWrite(ImageID, BarcodeType, Data, DstLeft, DstTop, DstWidth, DstHeight, Imaging1.ARGBI(255, 0, 0, 0), Alignment, Angle)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DWrite(System.Int32,GdPicture12.Barcode1DWriterType,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,GdPicture12.BarcodeAlign,System.Single)">
      <summary>
 Draws a 1D barcode on a GdPicture image. This method accepts a parameter to specify rotation and
 another to specify the barcode alignment with the specified bounding box. The default alignment is
 centered.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BarcodeType">A member of the Barcode1DWriterType enumeration.</param>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="DstLeft">Left pixel destination of to top-left corner of bounding box the
 barcode.</param>
      <param name="DstTop">Top pixel destination of to top-left corner of bounding box of the
 barcode.</param>
      <param name="DstWidth">Width of the bounding box of the barcode.</param>
      <param name="DstHeight">Height of the bounding box of the barcode.</param>
      <param name="FillColor">Color of the barcode. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="Alignment">A member of the BarcodeAlign enumeration.</param>
      <param name="Angle">The rotation of the barcode in degrees.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Writing a 1-D barcode onto an image with Left alignment in the surrounding Box and a 45 degree angle skew inside of it." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Data As String = "978524"
    Dim DstLeft As Integer = 50
    Dim DstTop As Integer = 50
    Dim DstWidth As Integer = 200
    Dim DstHeight As Integer = 800
    Dim BarcodeType As Barcode1DWriterType = Barcode1DWriterType.Barcode1DWriterCode11
    Dim Alignment As BarcodeAlign = BarcodeAlign.BarcodeAlignLeft
    Dim Angle As Single = 45.0
    oGdPictureImaging.Barcode1DWrite(ImageID, BarcodeType, Data, DstLeft, DstTop, DstWidth, DstHeight, Imaging1.ARGBI(255, 0, 0, 0), Alignment, Angle)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRGetSize(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeQRErrorCorrectionLevel,System.Int32@,System.Int32,System.Int32)">
      <summary>
 Returns the size, in pixel, required to render a QrCode on a Bitmap.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeQREncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">Ref. parameter. The version of the QrCode. In the range 0 - 40. Specifies the overall dimensions of the symbol.Use 0 to let the engine decide and return the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode.
 QR Code requires a four-module wide margin at all sides of a symbol. Consequently a value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in pixel. A value superior or equal to 4 is recommended.</param>
      <remarks>You can use the GetStat method to determine if the method succeeded.
 </remarks>
      <returns>The size, in pixel, required to render a QrCode.</returns>
      <example>
        <code description="Drawing a QrCode into a new GdPicture bitmap and save it as PNG image." lang="VB.NET">
 Const data As String = "abcdefghijklmnopqrstuvwxyz0123456789"
 Const moduleSize As Integer = 4
 Const quietZoneSize As Integer = 4
 Const correctionLevel As BarcodeQRErrorCorrectionLevel = BarcodeQRErrorCorrectionLevel.BarcodeQRErrorCorrectionLevelH
 Const encodingMode As BarcodeQREncodingMode = BarcodeQREncodingMode.BarcodeQREncodingModeUndefined
 Dim oGdPictureImaging As New GdPictureImaging
 Dim qrCodeVer As Integer = 0
 Dim codeSize As Integer = oGdPictureImaging.BarcodeQRGetSize(data, encodingMode, correctionLevel, qrCodeVer, quietZoneSize, moduleSize)
 Dim ImageID As Integer = oGdPictureImaging.CreateNewGdPictureImage(codeSize, codeSize, Imaging.PixelFormat.Format24bppRgb, Color.Transparent)
 oGdPictureImaging.BarcodeQRWrite(ImageID, data, encodingMode, correctionLevel, qrCodeVer, quietZoneSize, moduleSize, 0, 0, 0, Color.Red, Color.White)
 oGdPictureImaging.SaveAsPNG(ImageID, "qrcode.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.BarcodeQRWrite(System.Int32,System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeQRErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Drawing.Color,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRWrite(System.Int32,System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeQRErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32)">
      <summary>
 Draws a QrCode barcode on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeQREncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">The version of the QrCode. In the range 0 - 40. Specifies the overall dimensions of the symbol. Use 0 to let the engine decide the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode.
 QR Code requires a four-module wide margin at all sides of a symbol. Consequently a value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in pixel. A value superior or equal to 4 is recommended.</param>
      <param name="DstLeft">The left position, in pixel, of the QrCode.</param>
      <param name="DstTop">The top position, in pixel, of the QrCode.</param>
      <param name="Angle">The QrCode angle.</param>
      <param name="FillColor">Color of the symbols. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="BackColor">Color of the background. A suitable color value can be obtained by using the ARGBI() method.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a QrCode into a new GdPicture bitmap and save it as PNG image." lang="VB.NET">
 Const data As String = "abcdefghijklmnopqrstuvwxyz0123456789"
 Const moduleSize As Integer = 4
 Const quietZoneSize As Integer = 4
 Const correctionLevel As BarcodeQRErrorCorrectionLevel = BarcodeQRErrorCorrectionLevel.BarcodeQRErrorCorrectionLevelH
 Const encodingMode As BarcodeQREncodingMode = BarcodeQREncodingMode.BarcodeQREncodingModeUndefined
 Dim oGdPictureImaging As New GdPictureImaging
 Dim qrCodeVer As Integer = 0
 Dim codeSize As Integer = oGdPictureImaging.BarcodeQRGetSize(data, encodingMode, correctionLevel, qrCodeVer, quietZoneSize, moduleSize)
 Dim ImageID As Integer = oGdPictureImaging.CreateNewGdPictureImage(codeSize, codeSize, Imaging.PixelFormat.Format24bppRgb, Color.Transparent)
 oGdPictureImaging.BarcodeQRWrite(ImageID, data, encodingMode, correctionLevel, qrCodeVer, quietZoneSize, moduleSize, 0, 0, 0, oGdPictureImaging.ARGBI(255, 255, 0, 0), oGdPictureImaging.ARGBI(255, 255, 255, 255))
 oGdPictureImaging.SaveAsPNG(ImageID, "qrcode.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.BarcodeQRGetSize(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeQRErrorCorrectionLevel,System.Int32@,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeQRWrite(System.Int32,System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeQRErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Drawing.Color,System.Drawing.Color)">
      <summary>
 Draws a QrCode barcode on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeQREncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">The version of the QrCode. In the range 0 - 40. Specifies the overall dimensions of the symbol.  Use 0 to let the engine decide the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode.
 QR Code requires a four-module wide margin at all sides of a symbol. Consequently a value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in pixel. A value superior or equal to 4 is recommended.</param>
      <param name="DstLeft">The left position, in pixel, of the QrCode.</param>
      <param name="DstTop">The top position, in pixel, of the QrCode.</param>
      <param name="Angle">The QrCode angle.</param>
      <param name="FillColor">Color of the symbols. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="BackColor">Color of the background. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a QrCode into a new GdPicture bitmap and save it as PNG image." lang="VB.NET">
 Const data As String = "abcdefghijklmnopqrstuvwxyz0123456789"
 Const moduleSize As Integer = 4
 Const quietZoneSize As Integer = 4
 Const correctionLevel As BarcodeQRErrorCorrectionLevel = BarcodeQRErrorCorrectionLevel.BarcodeQRErrorCorrectionLevelH
 Const encodingMode As BarcodeQREncodingMode = BarcodeQREncodingMode.BarcodeQREncodingModeUndefined
 Dim oGdPictureImaging As New GdPictureImaging
 Dim qrCodeVer As Integer = 0
 Dim codeSize As Integer = oGdPictureImaging.BarcodeQRGetSize(data, encodingMode, correctionLevel, qrCodeVer, quietZoneSize, moduleSize)
 Dim ImageID As Integer = oGdPictureImaging.CreateNewGdPictureImage(codeSize, codeSize, Imaging.PixelFormat.Format24bppRgb, Color.Transparent)
 oGdPictureImaging.BarcodeQRWrite(ImageID, data, encodingMode, correctionLevel, qrCodeVer, quietZoneSize, moduleSize, 0, 0, 0, Color.Red, Color.White)
 oGdPictureImaging.SaveAsPNG(ImageID, "qrcode.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.BarcodeQRGetSize(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeQRErrorCorrectionLevel,System.Int32@,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRGetSize(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeMicroQRErrorCorrectionLevel,System.Int32@,System.Int32,System.Int32)">
      <summary>
 Returns the size, in pixel, required to render a Micro QrCode on a Bitmap.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeQREncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">Ref. parameter. The version of the QrCode. In the range 0 - 4. Specifies the overall dimensions of the symbol.Use 0 to let the engine decide and return the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode.
 QR Code requires a four-module wide margin at all sides of a symbol. Consequently a value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in pixel. A value superior or equal to 4 is recommended.</param>
      <remarks>You can use the GetStat method to determine if the method succeeded.
 </remarks>
      <returns>The size, in pixel, required to render a Micro QrCode.</returns>
      <example>
        <code description="Drawing a Micro QrCode into a new GdPicture bitmap and save it as PNG image." lang="VB.NET">
 Const data As String = "12344"
 Const moduleSize As Integer = 4
 Const quietZoneSize As Integer = 4
 Const correctionLevel As BarcodeMicroQRErrorCorrectionLevel = BarcodeMicroQRErrorCorrectionLevel.BarcodeMicroQRErrorCorrectionLevelL
 Const encodingMode As BarcodeQREncodingMode = BarcodeQREncodingMode.BarcodeQREncodingModeUndefined
 Dim oGdPictureImaging As New GdPictureImaging
 Dim qrCodeVer As Integer = 0
 Dim codeSize As Integer = oGdPictureImaging.BarcodeMicroQRGetSize(data, encodingMode, correctionLevel, qrCodeVer, quietZoneSize, moduleSize)
 Dim ImageID As Integer = oGdPictureImaging.CreateNewGdPictureImage(codeSize, codeSize, Imaging.PixelFormat.Format24bppRgb, Color.Transparent)
 oGdPictureImaging.BarcodeMicroQRWrite(ImageID, data, encodingMode, correctionLevel, qrCodeVer, quietZoneSize, moduleSize, 0, 0, 0, Color.Red, Color.White)
 oGdPictureImaging.SaveAsPNG(ImageID, "microqrcode.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.BarcodeMicroQRWrite(System.Int32,System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeMicroQRErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Drawing.Color,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRWrite(System.Int32,System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeMicroQRErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32)">
      <summary>
 Draws a Micro QrCode barcode on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeQREncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeMicroQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">The version of the QrCode. In the range 0 - 4. Specifies the overall dimensions of the symbol. Use 0 to let the engine decide the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode.
 QR Code requires a four-module wide margin at all sides of a symbol. Consequently a value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in pixel. A value superior or equal to 4 is recommended.</param>
      <param name="DstLeft">The left position, in pixel, of the QrCode.</param>
      <param name="DstTop">The top position, in pixel, of the QrCode.</param>
      <param name="Angle">The QrCode angle.</param>
      <param name="FillColor">Color of the symbols. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="BackColor">Color of the background. A suitable color value can be obtained by using the ARGBI() method.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a Micro QrCode into a new GdPicture bitmap and save it as PNG image." lang="VB.NET">
 Const data As String = "12344"
 Const moduleSize As Integer = 4
 Const quietZoneSize As Integer = 4
 Const correctionLevel As BarcodeMicroQRErrorCorrectionLevel = BarcodeMicroQRErrorCorrectionLevel.BarcodeMicroQRErrorCorrectionLevelL
 Const encodingMode As BarcodeQREncodingMode = BarcodeQREncodingMode.BarcodeQREncodingModeUndefined
 Dim oGdPictureImaging As New GdPictureImaging
 Dim qrCodeVer As Integer = 0
 Dim codeSize As Integer = oGdPictureImaging.BarcodeMicroQRGetSize(data, encodingMode, correctionLevel, qrCodeVer, quietZoneSize, moduleSize)
 Dim ImageID As Integer = oGdPictureImaging.CreateNewGdPictureImage(codeSize, codeSize, Imaging.PixelFormat.Format24bppRgb, Color.Transparent)
 oGdPictureImaging.BarcodeQRWrite(ImageID, data, encodingMode, correctionLevel, qrCodeVer, quietZoneSize, moduleSize, 0, 0, 0, oGdPictureImaging.ARGBI(255, 255, 0, 0), oGdPictureImaging.ARGBI(255, 255, 255, 255))
 oGdPictureImaging.SaveAsPNG(ImageID, "microqrcode.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.BarcodeMicroQRGetSize(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeMicroQRErrorCorrectionLevel,System.Int32@,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeMicroQRWrite(System.Int32,System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeMicroQRErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Drawing.Color,System.Drawing.Color)">
      <summary>
 Draws a Micro QrCode barcode on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeMicroQRErrorCorrectionLevel enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodeQRErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Version">The version of the QrCode. In the range 0 - 4. Specifies the overall dimensions of the symbol.  Use 0 to let the engine decide the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode.
 QR Code requires a four-module wide margin at all sides of a symbol. Consequently a value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in pixel. A value superior or equal to 4 is recommended.</param>
      <param name="DstLeft">The left position, in pixel, of the QrCode.</param>
      <param name="DstTop">The top position, in pixel, of the QrCode.</param>
      <param name="Angle">The QrCode angle.</param>
      <param name="FillColor">Color of the symbols. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="BackColor">Color of the background. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a Micro QrCode into a new GdPicture bitmap and save it as PNG image." lang="VB.NET">
 Const data As String = "12344"
 Const moduleSize As Integer = 4
 Const quietZoneSize As Integer = 4
 Const correctionLevel As BarcodeMicroQRErrorCorrectionLevel = BarcodeMicroQRErrorCorrectionLevel.BarcodeMicroQRErrorCorrectionLevelL
 Const encodingMode As BarcodeQREncodingMode = BarcodeQREncodingMode.BarcodeQREncodingModeUndefined
 Dim oGdPictureImaging As New GdPictureImaging
 Dim qrCodeVer As Integer = 0
 Dim codeSize As Integer = oGdPictureImaging.BarcodeMicroQRGetSize(data, encodingMode, correctionLevel, qrCodeVer, quietZoneSize, moduleSize)
 Dim ImageID As Integer = oGdPictureImaging.CreateNewGdPictureImage(codeSize, codeSize, Imaging.PixelFormat.Format24bppRgb, Color.Transparent)
 oGdPictureImaging.BarcodeMicroQRWrite(ImageID, data, encodingMode, correctionLevel, qrCodeVer, quietZoneSize, moduleSize, 0, 0, 0, Color.Red, Color.White)
 oGdPictureImaging.SaveAsPNG(ImageID, "microqrcode.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.BarcodeMicroQRGetSize(System.String,GdPicture12.BarcodeQREncodingMode,GdPicture12.BarcodeMicroQRErrorCorrectionLevel,System.Int32@,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417GetSize(System.String,GdPicture12.BarcodePDF417EncodingMode,GdPicture12.BarcodePDF417ErrorCorrectionLevel@,System.Int32@,System.Int32@,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>
 Returns the size, in pixel, required to render a PDF417 barcode on a Bitmap.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodePDF417EncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodePDF417ErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Rows">Defines the number of rows constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 90].</param>
      <param name="Cols">Defines the number of columns constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 30].</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode. A value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleWidth">The width of each module, in pixel. A value superior or equal to 4 is recommended.</param>
      <param name="RowHeight">The height of each row, in pixel. A value superior or equal to 10 is recommended.</param>
      <param name="Width">Output parameter. The width, in pixel, required to render the PDF417 barcode.</param>
      <param name="Height">Output parameter. The height, in pixel, required to render the PDF417 barcode.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a PDF417 barcode into a new GdPicture bitmap and save it as PNG image." lang="VB.NET">
 Const data As String = "abcdefghijklmnopqrstuvwxyz0123456789"
 Const moduleWidth As Integer = 4
 Const rowHeight As Integer = 10
 Const quietZoneSize As Integer = 4
 Const encodingMode As BarcodePDF417EncodingMode = BarcodePDF417EncodingMode.BarcodePDF417EncodingModeUndefined
 Dim ecc As BarcodePDF417ErrorCorrectionLevel = BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevelAuto
 Dim oGdPictureImaging As New GdPictureImaging
 Dim Rows As Integer = 0
 Dim Cols As Integer = 0
 Dim width, height As Integer
 If oGdPictureImaging.BarcodePDF417GetSize(data, encodingMode, ecc, Rows, Cols, quietZoneSize, moduleWidth, rowHeight, width, height) = GdPictureStatus.OK Then
    Dim ImageID As Integer = oGdPictureImaging.CreateNewGdPictureImage(width, height, Imaging.PixelFormat.Format24bppRgb, Color.Transparent)
    oGdPictureImaging.BarcodePDF417Write(ImageID, data, encodingMode, ecc, Rows, Cols, quietZoneSize, moduleWidth, rowHeight, 0, 0, 0, Color.Red, Color.White)
    oGdPictureImaging.SaveAsPNG(ImageID, "pdf417.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.BarcodePDF417Write(System.Int32,System.String,GdPicture12.BarcodePDF417EncodingMode,GdPicture12.BarcodePDF417ErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Drawing.Color,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417Write(System.Int32,System.String,GdPicture12.BarcodePDF417EncodingMode,GdPicture12.BarcodePDF417ErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32)">
      <summary>
 Draws a PDF417 barcode on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodePDF417EncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodePDF417ErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Rows">Defines the number of rows constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 90].</param>
      <param name="Cols">Defines the number of columns constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 30].</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode. A value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleWidth">The width of each module, in pixel. A value superior or equal to 4 is recommended.</param>
      <param name="RowHeight">The height of each row, in pixel. A value superior or equal to 10 is recommended.</param>
      <param name="DstLeft">The left position, in pixel, of the PDF417 barcode.</param>
      <param name="DstTop">The top position, in pixel, of the PDF417 barcode.</param>
      <param name="Angle">The PDF417 barcode angle.</param>
      <param name="FillColor">Color of the symbols. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="BackColor">Color of the background. A suitable color value can be obtained by using the ARGBI() method.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a PDF417 barcode into a new GdPicture bitmap and save it as PNG image." lang="VB.NET">
 Const data As String = "abcdefghijklmnopqrstuvwxyz0123456789"
 Const moduleWidth As Integer = 4
 Const rowHeight As Integer = 10
 Const quietZoneSize As Integer = 4
 Const encodingMode As BarcodePDF417EncodingMode = BarcodePDF417EncodingMode.BarcodePDF417EncodingModeUndefined
 Dim ecc As BarcodePDF417ErrorCorrectionLevel = BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevelAuto
 Dim oGdPictureImaging As New GdPictureImaging
 Dim Rows As Integer = 0
 Dim Cols As Integer = 0
 Dim width, height As Integer
 If oGdPictureImaging.BarcodePDF417GetSize(data, encodingMode, ecc, Rows, Cols, quietZoneSize, moduleWidth, rowHeight, width, height) = GdPictureStatus.OK Then
    Dim ImageID As Integer = oGdPictureImaging.CreateNewGdPictureImage(width, height, Imaging.PixelFormat.Format24bppRgb, Color.Transparent)
    oGdPictureImaging.BarcodePDF417Write(ImageID, data, encodingMode, ecc, Rows, Cols, quietZoneSize, moduleWidth, rowHeight, 0, 0, 0, oGdPictureImaging.ARGBI(255, 255, 0, 0), oGdPictureImaging.ARGBI(255, 255, 255, 255))
    oGdPictureImaging.SaveAsPNG(ImageID, "pdf417.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.BarcodePDF417GetSize(System.String,GdPicture12.BarcodePDF417EncodingMode,GdPicture12.BarcodePDF417ErrorCorrectionLevel@,System.Int32@,System.Int32@,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodePDF417Write(System.Int32,System.String,GdPicture12.BarcodePDF417EncodingMode,GdPicture12.BarcodePDF417ErrorCorrectionLevel,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Drawing.Color,System.Drawing.Color)">
      <summary>
 Draws a PDF417 barcode on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodePDF417EncodingMode enumeration. The encoding mode.</param>
      <param name="ErrorCorrectionLevel">A member of the BarcodePDF417ErrorCorrectionLevel enumeration. The error correction level.</param>
      <param name="Rows">Defines the number of rows constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 90].</param>
      <param name="Cols">Defines the number of columns constituting the barcode. Use 0 for automatic computation (recommended) or a value in the range [3 - 30].</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode. A value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleWidth">The width of each module, in pixel. A value superior or equal to 4 is recommended.</param>
      <param name="RowHeight">The height of each row, in pixel. A value superior or equal to 10 is recommended.</param>
      <param name="DstLeft">The left position, in pixel, of the PDF417 barcode.</param>
      <param name="DstTop">The top position, in pixel, of the PDF417 barcode.</param>
      <param name="Angle">The PDF417 barcode angle.</param>
      <param name="FillColor">Color of the symbols. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="BackColor">Color of the background. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a PDF417 barcode into a new GdPicture bitmap and save it as PNG image." lang="VB.NET">
 Const data As String = "abcdefghijklmnopqrstuvwxyz0123456789"
 Const moduleWidth As Integer = 4
 Const rowHeight As Integer = 10
 Const quietZoneSize As Integer = 4
 Const encodingMode As BarcodePDF417EncodingMode = BarcodePDF417EncodingMode.BarcodePDF417EncodingModeUndefined
 Dim ecc As BarcodePDF417ErrorCorrectionLevel = BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevelAuto
 Dim oGdPictureImaging As New GdPictureImaging
 Dim Rows As Integer = 0
 Dim Cols As Integer = 0
 Dim width, height As Integer
 If oGdPictureImaging.BarcodePDF417GetSize(data, encodingMode, ecc, Rows, Cols, quietZoneSize, moduleWidth, rowHeight, width, height) = GdPictureStatus.OK Then
    Dim ImageID As Integer = oGdPictureImaging.CreateNewGdPictureImage(width, height, Imaging.PixelFormat.Format24bppRgb, Color.Transparent)
    oGdPictureImaging.BarcodePDF417Write(ImageID, data, encodingMode, ecc, Rows, Cols, quietZoneSize, moduleWidth, rowHeight, 0, 0, 0, Color.Red, Color.White)
    oGdPictureImaging.SaveAsPNG(ImageID, "pdf417.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.BarcodePDF417GetSize(System.String,GdPicture12.BarcodePDF417EncodingMode,GdPicture12.BarcodePDF417ErrorCorrectionLevel@,System.Int32@,System.Int32@,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixGetSize(System.String,GdPicture12.BarcodeDataMatrixEncodingMode,GdPicture12.BarcodeDataMatrixVersion@,System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>
 Returns the size, in pixel, required to render a DataMatrix barcode on a Bitmap.
 </summary>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeDataMatrixEncodingMode enumeration. The encoding mode.</param>
      <param name="Version">A member of the BarcodeDataMatrixVersion enumeration. The version of the DataMatrix barcode. Use BarcodeDataMatrixVersionAuto to let the engine decide the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode. A value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in pixel. A value superior or equal to 4 is recommended.</param>
      <param name="Width">Output parameter. The width, in pixel, required to render the DataMatrix barcode.</param>
      <param name="Height">Output parameter. The height, in pixel, required to render the DataMatrix barcode.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a DataMatrix barcode into a new GdPicture bitmap and save it as PNG image." lang="VB.NET">
 Const data As String = "abcdefghijklmnopqrstuvwxyz0123456789"
 Const moduleSize As Integer = 4
 Const quietZoneSize As Integer = 4
 Const encodingMode As BarcodeDataMatrixEncodingMode = BarcodeDataMatrixEncodingMode.BarcodeDataMatrixEncodingModeUndefined
 Dim oGdPictureImaging As New GdPictureImaging
 Dim dmVersion As BarcodeDataMatrixVersion = BarcodeDataMatrixVersion.BarcodeDataMatrixVersionAuto
 Dim width, height As Integer
 If oGdPictureImaging.BarcodeDataMatrixGetSize(data, encodingMode, dmVersion, quietZoneSize, moduleSize, width, height) = GdPictureStatus.OK Then
    Dim ImageID As Integer = oGdPictureImaging.CreateNewGdPictureImage(width, height, Imaging.PixelFormat.Format24bppRgb, Color.Transparent)
    oGdPictureImaging.BarcodeDataMatrixWrite(ImageID, data, encodingMode, dmVersion, quietZoneSize, moduleSize, 0, 0, 0, Color.Red, Color.White)
    oGdPictureImaging.SaveAsPNG(ImageID, "datamatrix.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixWrite(System.Int32,System.String,GdPicture12.BarcodeDataMatrixEncodingMode,GdPicture12.BarcodeDataMatrixVersion@,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Drawing.Color,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixWrite(System.Int32,System.String,GdPicture12.BarcodeDataMatrixEncodingMode,GdPicture12.BarcodeDataMatrixVersion@,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32)">
      <summary>
 Draws a DataMatrix barcode on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeDataMatrixEncodingMode enumeration. The encoding mode.</param>
      <param name="Version">A member of the BarcodeDataMatrixVersion enumeration. The version of the DataMatrix barcode. Use BarcodeDataMatrixVersionAuto to let the engine decide the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode. A value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in pixel. A value superior or equal to 4 is recommended.</param>
      <param name="DstLeft">The left position, in pixel, of the DataMatrix barcode.</param>
      <param name="DstTop">The top position, in pixel, of the DataMatrix barcode.</param>
      <param name="Angle">The QrCode angle.</param>
      <param name="FillColor">Color of the symbols. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="BackColor">Color of the background. A suitable color value can be obtained by using the ARGBI() method.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a DataMatrix barcode into a new GdPicture bitmap and save it as PNG image." lang="VB.NET">
 Const data As String = "abcdefghijklmnopqrstuvwxyz0123456789"
 Const moduleSize As Integer = 4
 Const quietZoneSize As Integer = 4
 Const encodingMode As BarcodeDataMatrixEncodingMode = BarcodeDataMatrixEncodingMode.BarcodeDataMatrixEncodingModeUndefined
 Dim oGdPictureImaging As New GdPictureImaging
 Dim dmVersion As BarcodeDataMatrixVersion = BarcodeDataMatrixVersion.BarcodeDataMatrixVersionAuto
 Dim width, height As Integer
 If oGdPictureImaging.BarcodeDataMatrixGetSize(data, encodingMode, dmVersion, quietZoneSize, moduleSize, width, height) = GdPictureStatus.OK Then
    Dim ImageID As Integer = oGdPictureImaging.CreateNewGdPictureImage(width, height, Imaging.PixelFormat.Format24bppRgb, Color.Transparent)
    oGdPictureImaging.BarcodeDataMatrixWrite(ImageID, data, encodingMode, dmVersion, quietZoneSize, moduleSize, 0, 0, 0, oGdPictureImaging.ARGBI(255, 255, 0, 0), oGdPictureImaging.ARGBI(255, 255, 255, 255))
    oGdPictureImaging.SaveAsPNG(ImageID, "datamatrix.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixGetSize(System.String,GdPicture12.BarcodeDataMatrixEncodingMode,GdPicture12.BarcodeDataMatrixVersion@,System.Int32,System.Int32,System.Int32@,System.Int32@)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixWrite(System.Int32,System.String,GdPicture12.BarcodeDataMatrixEncodingMode,GdPicture12.BarcodeDataMatrixVersion@,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Drawing.Color,System.Drawing.Color)">
      <summary>
 Draws a DataMatrix barcode on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">The data of the barcode to encode.</param>
      <param name="EncodingMode">A member of the BarcodeDataMatrixEncodingMode enumeration. The encoding mode.</param>
      <param name="Version">A member of the BarcodeDataMatrixVersion enumeration. The version of the DataMatrix barcode. Use BarcodeDataMatrixVersionAuto to let the engine decide the minimum version required to encode all data.</param>
      <param name="QuietZone">The number of modules composing the quiet zone. The quiet zone defines the margin around the barcode. A value superior or equal to 4 is highly suggested.</param>
      <param name="ModuleSize">The size of each module, in pixel. A value superior or equal to 4 is recommended.</param>
      <param name="DstLeft">The left position, in pixel, of the DataMatrix barcode.</param>
      <param name="DstTop">The top position, in pixel, of the DataMatrix barcode.</param>
      <param name="Angle">The QrCode angle.</param>
      <param name="FillColor">Color of the symbols.</param>
      <param name="BackColor">Color of the background.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Drawing a DataMatrix barcode into a new GdPicture bitmap and save it as PNG image." lang="VB.NET">
 Const data As String = "abcdefghijklmnopqrstuvwxyz0123456789"
 Const moduleSize As Integer = 4
 Const quietZoneSize As Integer = 4
 Const encodingMode As BarcodeDataMatrixEncodingMode = BarcodeDataMatrixEncodingMode.BarcodeDataMatrixEncodingModeUndefined
 Dim oGdPictureImaging As New GdPictureImaging
 Dim dmVersion As BarcodeDataMatrixVersion = BarcodeDataMatrixVersion.BarcodeDataMatrixVersionAuto
 Dim width, height As Integer
 If oGdPictureImaging.BarcodeDataMatrixGetSize(data, encodingMode, dmVersion, quietZoneSize, moduleSize, width, height) = GdPictureStatus.OK Then
    Dim ImageID As Integer = oGdPictureImaging.CreateNewGdPictureImage(width, height, Imaging.PixelFormat.Format24bppRgb, Color.Transparent)
    oGdPictureImaging.BarcodeDataMatrixWrite(ImageID, data, encodingMode, dmVersion, quietZoneSize, moduleSize, 0, 0, 0, Color.Red, Color.White)
    oGdPictureImaging.SaveAsPNG(ImageID, "datamatrix.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.BarcodeDataMatrixGetSize(System.String,GdPicture12.BarcodeDataMatrixEncodingMode,GdPicture12.BarcodeDataMatrixVersion@,System.Int32,System.Int32,System.Int32@,System.Int32@)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Barcode1DWriteGetMinWidth(GdPicture12.Barcode1DWriterType,System.String)">
      <summary>
 Gets for the minimum width required to draw a specific barcode on a GdPicture image using one of the Barcode1DWrite
 methods.
 </summary>
      <param name="BarcodeType">A member of the Barcode1DWriterType enumeration.</param>
      <param name="Data">The data of the barcode to encode.</param>
      <returns>
 The minimum width required to draw the barcode. If 0, you can use the GetStat method to get the
 reason the method failed.
 </returns>
      <example>
        <code description="Writing a 1-D Barcode onto an image and making its width twice the size of the minimum width required for the barcode to be visible." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim Data As String = "978524"
 Dim DstLeft As Integer
 Dim DstTop As Integer
 Dim DstWidth As Integer
 Dim DstHeight As Integer
 Dim Alignment As BarcodeAlign
 Dim Angle As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 BarcodeType = Barcode1DWriterType.Barcode1DWriterCode11
 DstLeft = 100
 DstTop = 100
 Alignment = BarcodeAlign.BarcodeAlignLeft
 DstWidth = oGdPictureImaging.Barcode1DWriteGetMinWidth(BarcodeType, Data)
 DstWidth = 2 * DstWidth
 DstHeight = CInt(DstWidth / 3)
 oGdPictureImaging.Barcode1DWrite(ImageID, BarcodeType, Data, DstLeft, DstTop, DstWidth, DstHeight, Imaging1.ARGB(0, 0, 0), Alignment)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGdPictureImageTransparency(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Draws a GdPicture image into another GdPicture image applying a transparency effect.
 </summary>
      <param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn from.</param>
      <param name="DstImage">GdPicture Image Identifier. specifies the image to draw on.</param>
      <param name="Transparency">Transparency to apply to the drawn image [0 ; 255]. 0 means full
 opacity and 255 full transparency.</param>
      <param name="DstLeft">Specifies the x-coordinate in pixels of the upper-left corner of
 the destination rectangle at which to draw the image.</param>
      <param name="DstTop">Specifies the y-coordinate in pixels of the upper-left corner of
 the destination rectangle at which to draw the image.</param>
      <param name="DstWidth">Specifies the width in pixels of the destination rectangle at which
 to draw the image.</param>
      <param name="DstHeight">Specifies the height in pixels of the destination rectangle at which
 to draw the image.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Watermark an image to another image" lang="VB.NET">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 Dim ImageBackID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image1.jpg")
 Dim ImageWatermarkID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image2.jpg")
 ' Drawing ImageBackID to the top left corner of ImageBackID.
 oGdPictureImaging.DrawGdPictureImageTransparency(ImageWatermarkID, ImageBackID, 150, 0, 0, 200, 200, Drawing2D.InterpolationMode.HighQualityBicubic)
 oGdPictureImaging.SaveAsJPEG(ImageBackID, "image3.jpg", 75)
 oGdPictureImaging.ReleaseGdPictureImage(ImageBackID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageWatermarkID)
 End Sub
 </code>
      </example>
      <example>
        <code description="Copying one image onto a section of another and setting the opacity to half." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim SrcImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("srcImage.png")
 Dim DstImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("destImage.png")
 oGdPictureImaging.DrawGdPictureImageTransparency(SrcImage, DstImage, 128, 0, 0, 100, 100, Drawing2D.InterpolationMode.Bicubic)
 oGdPictureImaging.SaveAsPNG(DstImage, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(DstImage)
 oGdPictureImaging.ReleaseGdPictureImage(SrcImage)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGdPictureImageTransparencyColor(System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Draws a GdPicture image into another GdPicture image setting a specific color of the image to draw as
 transparent.
 </summary>
      <param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn from.</param>
      <param name="DstImage">GdPicture Image Identifier. specifies the image to draw to.</param>
      <param name="TransparentColor">The color to set as transparent. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="DstLeft">Specifies the x-coordinate in pixels of the upper-left corner of
 the destination rectangle at which to draw the image.</param>
      <param name="DstTop">Specifies the y-coordinate in pixels of the upper-left corner of
 the destination rectangle at which to draw the image.</param>
      <param name="DstWidth">Specifies the width in pixels of the destination rectangle at which
 to draw the image.</param>
      <param name="DstHeight">Specifies the height in pixels of the destination rectangle at which
 to draw the image.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Copying one image onto a section of another and setting transparency color." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim SrcImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("srcImage.png")
 Dim DstImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("destImage.png")
 oGdPictureImaging.DrawGdPictureImageTransparency(SrcImage, DstImage, oGdPictureImaging.ARGB(255,120,50,60), 0, 0, 100, 100, Drawing2D.InterpolationMode.Bicubic)
 oGdPictureImaging.SaveAsPNG(DstImage, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(DstImage)
 oGdPictureImaging.ReleaseGdPictureImage(SrcImage)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGdPictureImageTransparencyColor(System.Int32,System.Int32,System.Drawing.Color,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Draws a GdPicture image into another GdPicture image setting a specific color of the image to draw as
 transparent. This method takes a percentage threshold parameter regarding the color to set as
 transparent.
 Ie: A threshold value of 90 means that all the color values which are within 90% of the color value
 parameter will be set as transparent.
 </summary>
      <param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn from.</param>
      <param name="DstImage">GdPicture Image Identifier. specifies the image to draw to.</param>
      <param name="TransparentColor">The color to set as transparent. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="Threshold">Percentage threshold between 0 and 100.</param>
      <param name="DstLeft">Specifies the x-coordinate in pixels of the upper-left corner of
 the destination rectangle at which to draw the image.</param>
      <param name="DstTop">Specifies the y-coordinate in pixels of the upper-left corner of
 the destination rectangle at which to draw the image.</param>
      <param name="DstWidth">Specifies the width in pixels of the destination rectangle at which
 to draw the image.</param>
      <param name="DstHeight">Specifies the height in pixels of the destination rectangle at which
 to draw the image.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Copying One Image onto another and setting transparency color and threshold value to half." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim SrcImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("srcImage.png")
 Dim DstImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("destImage.png")
 oGdPictureImaging.DrawGdPictureImageTransparency(SrcImage, DstImage, oGdPictureImaging.ARGB(255,120,50,60), 128, 0, 0, 100, 100, Drawing2D.InterpolationMode.Bicubic)
 oGdPictureImaging.SaveAsPNG(DstImage, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(DstImage)
 oGdPictureImaging.ReleaseGdPictureImage(SrcImage)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGdPictureImageClipped(System.Int32,System.Int32,System.Drawing.Point[])">
      <summary>
 Draws a clipped GdPicture image from several points of co-ordinates into another GdPicture image.
 </summary>
      <param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn from.</param>
      <param name="DstImage">GdPicture Image Identifier. specifies the image to draw to.</param>
      <param name="arPoints">Array of System.Drawing.Point that specifies the coordinates.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Drawing image1.jpg onto image2.jpg on a region defined by 3 points a(0, 0) b(700, 0) and c(700, 700)." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID1 As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image1.jpg")
 Dim ImageID2 As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image2.jpg")
 Dim arPoints(2) As System.Drawing.Point
 Dim m_Stat As GdPictureStatus
 arPoints(0).X = 0
 arPoints(0).Y = 0
 arPoints(1).X = 700
 arPoints(1).Y = 0
 arPoints(2).X = 700
 arPoints(2).Y = 700
 m_Stat = oGdPictureImaging.DrawGdPictureImageClipped(ImageID1, ImageID2, arPoints)
 If m_Stat &lt;&gt; GdPictureStatus.OK Then
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGdPictureImage(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Draws a GdPicture image into another GdPicture image.
 </summary>
      <param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn from.</param>
      <param name="DstImage">GdPicture Image Identifier. specifies the image to draw to.</param>
      <param name="DstLeft">Specifies the x-coordinate in pixels of the upper-left corner of
 the destination rectangle at which to draw the image.</param>
      <param name="DstTop">Specifies the y-coordinate in pixels of the upper-left corner of
 the destination rectangle at which to draw the image.</param>
      <param name="DstWidth">Specifies the width in pixels of the destination rectangle at which
 to draw the image.</param>
      <param name="DstHeight">Specifies the height in pixels of the destination rectangle at which
 to draw the image.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.DrawGdPictureImageRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)" />
      <example>
        <code description="Copying one image onto a section of another." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim SrcImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("srcImg.png")
 Dim DstImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("dstImg.png")
 oGdPictureImaging.DrawGdPictureImage(SrcImage, DstImage, 0, 0, 200, 200, System.Drawing.Drawing2D.InterpolationMode.Bicubic)
 oGdPictureImaging.SaveAsPNG(DstImage, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(DstImage)
 oGdPictureImaging.ReleaseGdPictureImage(SrcImage)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGdPictureImageRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Draws a portion of a GdPicture image into another GdPicture image.
 </summary>
      <param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn from.</param>
      <param name="DstImage">GdPicture Image Identifier. specifies the image to draw to.</param>
      <param name="DstLeft">Specifies the x-coordinate, in pixel, of the upper-left corner of
 the destination rectangle at which to draw the image.</param>
      <param name="DstTop">Specifies the y-coordinate in pixels of the upper-left corner of
 the destination rectangle at which to draw the image.</param>
      <param name="DstWidth">Specifies the width in pixels of the destination rectangle at which
 to draw the image.</param>
      <param name="DstHeight">Specifies the height in pixels of the destination rectangle at which
 to draw the image.</param>
      <param name="SrcLeft">Left pixel source of the image to draw.</param>
      <param name="SrcTop">Top pixel source of the image to draw.</param>
      <param name="SrcWidth">Width portion in pixels of the image to draw.</param>
      <param name="SrcHeight">Height portion in pixels of the image to draw.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Copying a part of one image onto a section of another specifying both the source and destination rectangles." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim SrcImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("srcImg.png")
 Dim DstImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("dstImg.png")
 oGdPictureImaging.DrawGdPictureImageRect(SrcImage, DstImage, 0, 0, 200, 200, 0, 0, 100, 100, System.Drawing.Drawing2D.InterpolationMode.Bicubic)
 oGdPictureImaging.SaveAsPNG(DstImage, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(DstImage)
 oGdPictureImaging.ReleaseGdPictureImage(SrcImage)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGdPictureImageOP(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.Operators,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Draws a GdPicture image into another GdPicture image using an operator of combination.
 </summary>
      <param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn from.</param>
      <param name="DstImage">GdPicture Image Identifier. specifies the image to draw tp.</param>
      <param name="DstLeft">Specifies the x-coordinate in pixels of the upper-left corner of
 the destination rectangle at which to draw the image.</param>
      <param name="DstTop">Specifies the y-coordinate in pixels of the upper-left corner of
 the destination rectangle at which to draw the image.</param>
      <param name="DstWidth">Specifies the width in pixels of the destination rectangle at which
 to draw the image.</param>
      <param name="DstHeight">Specifies the height in pixels of the destination rectangle at which
 to draw the image.</param>
      <param name="Op">A member of the Operators enumeration.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.DrawGdPictureImageRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)" />
      <example>
        <code description="Copying one image onto a section of another using OP operation AND." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim SrcImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("srcImg.png")
 Dim DstImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("dstImg.png")
 oGdPictureImaging.DrawGdPictureImageOP(SrcImage, DstImage, 0, 0, 200, 200, Operators.OperatorAnd, System.Drawing.Drawing2D.InterpolationMode.Bicubic)
 oGdPictureImaging.SaveAsPNG(DstImage, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(DstImage)
 oGdPictureImaging.ReleaseGdPictureImage(SrcImage)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGdPictureImageOPRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.Operators,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Draws a portion of a GdPicture image into another GdPicture image using an operator of combination.
 </summary>
      <param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn from.</param>
      <param name="DstImage">GdPicture Image Identifier. specifies the image to draw to.</param>
      <param name="DstLeft">Specifies the x-coordinate in pixels of the upper-left corner of
 the destination rectangle at which to draw the image.</param>
      <param name="DstTop">Specifies the y-coordinate in pixels of the upper-left corner of
 the destination rectangle at which to draw the image.</param>
      <param name="DstWidth">Specifies the width in pixels of the destination rectangle at which
 to draw the image.</param>
      <param name="DstHeight">Specifies the height in pixels of the destination rectangle at which
 to draw the image.</param>
      <param name="SrcLeft">Specifies the the x-coordinate in pixels of the upper-left corner
 of the portion of the source image to be drawn.</param>
      <param name="SrcTop">Specifies the the y-coordinate in pixels of the upper-left corner
 of the portion of the source image to be drawn.</param>
      <param name="SrcWidth">Specifies the width in pixels of the portion of the source image to
 be drawn.</param>
      <param name="SrcHeight">Specifies the height in pixels of the portion of the source image to
 be drawn.</param>
      <param name="Op">A member of the Operators enumeration.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Copying a section of one image onto a section of another using OP operation AND and specifying both the source and destination rectangles." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim SrcImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("srcImg.png")
 Dim DstImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("dstImg.png")
 oGdPictureImaging.DrawGdPictureImageOPRect(SrcImage, DstImage, 0, 0, 200, 200, 0, 0, 100, 100, Operators.OperatorAnd, System.Drawing.Drawing2D.InterpolationMode.Bicubic)
 oGdPictureImaging.SaveAsPNG(DstImage, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(DstImage)
 oGdPictureImaging.ReleaseGdPictureImage(SrcImage)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGdPictureImageSkewing(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode,System.Boolean)">
      <summary>
 Draws a skewed GdPicture image from 3 points of co-ordinates into another GdPicture image.
 </summary>
      <param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn from.</param>
      <param name="DstImage">GdPicture Image Identifier. specifies the image to draw to.</param>
      <param name="DstLeft1">Left pixel destination of the first point.</param>
      <param name="DstTop1">Top pixel destination of the first point.</param>
      <param name="DstLeft2">Left pixel destination of the second point.</param>
      <param name="DstTop2">Top pixel destination of the second point.</param>
      <param name="DstLeft3">Left pixel destination of the third point.</param>
      <param name="DstTop3">Left pixel destination of the third point.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Copying one image onto a section of another using skewing and applying antialiasing." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim SrcImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("srcImg.png")
 Dim DstImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("dstImg.png")
 oGdPictureImaging.DrawGdPictureImageSkewing(SrcImage, DstImage,0, 0, 700, 0, 700, 700, Drawing2D.InterpolationMode.Bicubic, True)
 oGdPictureImaging.SaveAsPNG(DstImage, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(DstImage)
 oGdPictureImaging.ReleaseGdPictureImage(SrcImage)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws an arc on a GdPicture image. The arc is part of an ellipse.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the bounding
 rectangle for the ellipse that contains the arc.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the bounding
 rectangle for the ellipse that contains the arc.</param>
      <param name="Width">Specifies the width of the ellipse that contains the arc.</param>
      <param name="Height">Specifies the height of the ellipse that contains the arc.</param>
      <param name="StartAngle">Specifies the angle between the x-axis and the starting point of the arc.</param>
      <param name="SweepAngle">Specifies the angle between the starting and ending points of the arc.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the arc.</param>
      <param name="PenColor">Color of the arc. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing an arc on an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawArc(ImageID, 0, 0, 500, 500, 20.0, 160.0, 10, oGdPictureImaging.ARGB(255, 0, 0, 0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws an arc on a GdPicture image. The arc is part of an ellipse. This method takes a color integer as the PenColor parameter.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the bounding
 rectangle for the ellipse that contains the arc.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the bounding
 rectangle for the ellipse that contains the arc.</param>
      <param name="Width">Specifies the width of the ellipse that contains the arc.</param>
      <param name="Height">Specifies the height of the ellipse that contains the arc.</param>
      <param name="StartAngle">Specifies the angle between the x-axis and the starting point of the arc.</param>
      <param name="SweepAngle">Specifies the angle between the starting and ending points of the arc.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the arc.</param>
      <param name="PenColor">Color of the arc. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing an arc on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawArc(ImageID, 0, 0, 500, 500, 20.0, 160.0, 10, oGdPictureImaging.ARGBI(255, 0, 0, 0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawBezier(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a bezier spline on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Left1">Specifies the x-coordinate of the starting point of the Bezier spline.</param>
      <param name="Top1">Specifies the y-coordinate of the starting point of the Bezier spline.</param>
      <param name="Left2">Specifies the x-coordinate of the first control point of the Bezier spline.
 </param>
      <param name="Top2">Specifies the y-coordinate of the first control point of the Bezier spline.
 </param>
      <param name="Left3">Specifies the x-coordinate of the second control point of the Bezier
 spline.</param>
      <param name="Top3">Specifies the y-coordinate of the second control point of the Bezier
 spline.</param>
      <param name="Left4">Specifies the x-coordinate of the ending point of the Bezier spline.</param>
      <param name="Top4">Specifies the y-coordinate of the ending point of the Bezier spline.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the arc.</param>
      <param name="PenColor">Color of the Bezier. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing an bezier curve on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawBezier(ImageID, 50, 50, 100, 120, 180, 60, 500, 50, 10, oGdPictureImaging.ARGB(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawBezier(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws a bezier spline on a GdPicture image. The drawing color is specified with an integer value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Left1">Specifies the x-coordinate of the starting point of the Bezier spline.</param>
      <param name="Top1">Specifies the y-coordinate of the starting point of the Bezier spline.</param>
      <param name="Left2">Specifies the x-coordinate of the first control point of the Bezier spline.
 </param>
      <param name="Top2">Specifies the y-coordinate of the first control point of the Bezier spline.
 </param>
      <param name="Left3">Specifies the x-coordinate of the second control point of the Bezier
 spline.</param>
      <param name="Top3">Specifies the y-coordinate of the second control point of the Bezier
 spline.</param>
      <param name="Left4">Specifies the x-coordinate of the ending point of the Bezier spline.</param>
      <param name="Top4">Specifies the y-coordinate of the ending point of the Bezier spline.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the arc.</param>
      <param name="PenColor">Color of the Bezier spline. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing an bezier curve on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawBezier(ImageID, 50, 50, 100, 120, 180, 60, 500, 50, 10, oGdPictureImaging.ARGBI(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawCircle(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Boolean)">
      <summary>
 Draws a circle on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the center of the circle.</param>
      <param name="DstTop">Specifies the y-coordinate of the center of the circle.</param>
      <param name="Diameter">Diameter of the circle in pixel.</param>
      <param name="PenColor">Color of the circle. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the circle.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a circle on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawCircle(ImageID, 50, 50, 80, oGdPictureImaging.ARGB(255,0,0,0), 10, True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawCircle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws a circle on a GdPicture image. The drawing color is specified with an integer value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the center of the circle.</param>
      <param name="DstTop">Specifies the y-coordinate of the center of the circle.</param>
      <param name="Diameter">Diameter of the circle in pixel.</param>
      <param name="PenColor">The circle color. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the circle.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a circle on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawCircle(ImageID, 50, 50, 80, oGdPictureImaging.ARGBI(255,0,0,0), 10, True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawCurve(System.Int32,System.Drawing.Point[],System.Int32,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a curve on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="arPoints">Array of System.Drawing.Point that specifies the coordinates that the
 cardinal spline passes through.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the curve.</param>
      <param name="PenColor">Color of the curve. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a curve on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Points(3) As Point
    Points(0).X = 50
    Points(0).Y = 50
    Points(1).X = 120
    Points(1).Y = 80
    Points(2).X = 260
    Points(2).Y = 20
    oGdPictureImaging.DrawCurve(ImageID, Points, 10, oGdPictureImaging.ARGB(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawFilledClosedCurve(System.Int32,System.Drawing.Point[],System.Drawing.Color,System.Single,System.Drawing.Drawing2D.FillMode,System.Boolean)">
      <summary>
 Draws a filled closed curve on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="arPoints">Array of System.Drawing.Point that specifies the coordinates that the
 cardinal spline passes through.</param>
      <param name="FillColor">Color of the filled curve. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="Tension">Nonnegative real number that specifies how tightly the spline bends as it
 passes through the points. A value of 0 specifies that the spline is a
 sequence of straight lines. As the value increases, the curve becomes
 fuller. The default value is 0.5f.</param>
      <param name="FillMD">Specifies how to fill a closed area that is within another closed area and
 that is created when the curve or path passes over itself. A member of the
 Drawing2D.FillMode enumeration.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <remarks>
 If the first and last coordinates in the points array are not identical, a line is drawn between them
 to close the polygon.
 </remarks>
      <example>
        <code description="Drawing a filled closed curve on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Points(3) As Point
    Points(0).X = 50
    Points(0).Y = 50
    Points(1).X = 120
    Points(1).Y = 80
    Points(2).X = 260
    Points(2).Y = 20
    oGdPictureImaging.DrawFilledClosedCurve(ImageID, Points, 10,oGdPictureImaging.ARGB(255,0,0,0), 0.5, Drawing2D.FillMode.Alternate, True)oGdPictureImaging.DrawCurve(ImageID, Points, 10, oGdPictureImaging.ARGB(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawClosedCurve(System.Int32,System.Drawing.Point[],System.Int32,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a closed curve on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="arPoints">Array of System.Drawing.Point that specifies the coordinates that the
 cardinal spline passes through.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the curve.</param>
      <param name="PenColor">Color of the curve. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Drawing a closed curve on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Points(3) As Point
    Points(0).X = 50
    Points(0).Y = 50
    Points(1).X = 120
    Points(1).Y = 80
    Points(2).X = 260
    Points(2).Y = 20
    oGdPictureImaging.DrawClosedCurve(ImageID, Points, 10, oGdPictureImaging.ARGB(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawPolygon(System.Int32,System.Drawing.Point[],System.Int32,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a polygon on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="arPoints">Array of System.Drawing.Point that specifies the vertices of the polygon.</param>
      <param name="PenWidth">The width in pixels of the pen used to draw the polygon.</param>
      <param name="PenColor">Color of the polygon. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <remarks>
 If the first and last coordinates in the points array are not identical, a line is drawn between them
 to close the polygon.
 </remarks>
      <example>
        <code description="Drawing a polygon on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Points(3) As Point
    Points(0).X = 50
    Points(0).Y = 50
    Points(1).X = 120
    Points(1).Y = 80
    Points(2).X = 260
    Points(2).Y = 20
    oGdPictureImaging.DrawPolygon(ImageID, Points, 2, oGdPictureImaging.ARGB(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawEllipse(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Boolean)">
      <summary>
 Draws an ellipse on a GdPicture image.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse.</param>
      <param name="Width">Specifies the width of the rectangle that bounds the ellipse.</param>
      <param name="Height">Specifies the height of the rectangle that bounds the ellipse.</param>
      <param name="PenColor">Color of the ellipse. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the ellipse.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a ellipse on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawEllipse(ImageID, 50, 50, 25, 40, oGdPictureImaging.ARGB(255,0,0,0), 10, True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawEllipse(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws an ellipse on a GdPicture image. The drawing color is specified with an integer value.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse.</param>
      <param name="Width">Specifies the width of the rectangle that bounds the ellipse.</param>
      <param name="Height">Specifies the height of the rectangle that bounds the ellipse.</param>
      <param name="PenColor">The ellipse color. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the ellipse.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a ellipse on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawEllipse(ImageID, 50, 50, 25, 40, oGdPictureImaging.ARGBI(255,0,0,0), 10, True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawRotatedEllipse(System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a rotated ellipse on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Angle">Angle of rotation in degrees.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse.</param>
      <param name="Width">Specifies the width of the rectangle that bounds the ellipse.</param>
      <param name="Height">Specifies the height of the rectangle that bounds the ellipse.</param>
      <param name="PenWidth">Width, in pixel, of the pen used to draw the rectangle.</param>
      <param name="PenColor">Color of the ellipse. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a rotated ellipse on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawRotatedEllipse(ImageID, 50.0, 50, 50, 50, 100, oGdPictureImaging.ARGB(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawRotatedEllipse(System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws a rotated ellipse on a GdPicture image. It takes a color integer as a PenColor parameter.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Angle">Angle of rotation in degrees.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse.</param>
      <param name="Width">Specifies the width of the rectangle that bounds the ellipse.</param>
      <param name="Height">Specifies the height of the rectangle that bounds the ellipse.</param>
      <param name="PenWidth">Width, in pixel, of the pen used to draw the rectangle.</param>
      <param name="PenColor">The ellipse color. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a rotated ellipse on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawRotatedEllipse(ImageID, 50.0, 50, 50, 50, 100, oGdPictureImaging.ARGBI(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawRotatedFilledEllipse(System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a rotated and filled ellipse on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Angle">Angle of rotation in degrees.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse.</param>
      <param name="Width">Specifies the width of the rectangle that bounds the ellipse.</param>
      <param name="Height">Specifies the height of the rectangle that bounds the ellipse.</param>
      <param name="FillColor">Color of the rectangle. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Drawing a rotated filled ellipse on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawRotatedFilledEllipse(ImageID, 50.0, 50, 50, 50, 100, oGdPictureImaging.ARGB(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawFilledCircle(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a filled circle on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the center of the circle.</param>
      <param name="DstTop">Specifies the y-coordinate of the center of the circle.</param>
      <param name="Diameter">Diameter of the circle in pixel.</param>
      <param name="FillColor">Color of the circle. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a filled circle on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawFilledCircle(ImageID, 50, 50, 25,  oGdPictureImaging.ARGB(255,0,0,0),  True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawFilledCircle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws a filled circle on a GdPicture image. The filling color is specified with an integer value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the center of the circle.</param>
      <param name="DstTop">Specifies the y-coordinate of the center of the circle.</param>
      <param name="Diameter">Diameter of the circle in pixel.</param>
      <param name="FillColor">Color of the filled circle. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a filled circle on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawFilledCircle(ImageID, 50, 50, 25,  oGdPictureImaging.ARGBI(255,0,0,0),  True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawFilledCircleTextureFromGdPictureImage(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws a filled circle on a GdPicture image using a texture from a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ImageTexture">GdPicture Image Identifier. Source image used for the texture.</param>
      <param name="DstLeft">Specifies the x-coordinate of the center of the circle.</param>
      <param name="DstTop">Specifies the y-coordinate of the center of the circle.</param>
      <param name="Diameter">Diameter of the circle in pixel.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Drawing a filled circle texture on the image from a GdPicture Image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim TextureImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("texture.tif")
    If TextureImage &lt;&gt; 0 Then
       oGdPictureImaging.DrawFilledCircleTextureFromGdPictureImage(ImageID, TextureImage, 50, 50, 25, True)
       oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
       oGdPictureImaging.ReleaseGdPictureImage(TextureImage)
    Else
       MessageBox.Show("Error: Cannot load texture file:" + oGdPictureImaging.GetStat().ToString())
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawFilledCircleTextureFromFile(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws a filled circle on a GdPicture image using a texture from a file.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TextureFilePath">The texture source file path. Can be an empty string. If empty, prompts the
 user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="DstLeft">Specifies the x-coordinate of the center of the circle.</param>
      <param name="DstTop">Specifies the y-coordinate of the center of the circle.</param>
      <param name="Diameter">Diameter of the circle in pixel.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Drawing a filled circle texture on the image from a texture file path." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawFilledCircleTextureFromFile(ImageID, "boxes.tif", 50, 50, 25, True)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawFilledPolygon(System.Int32,System.Drawing.Point[],System.Drawing.Color,System.Drawing.Drawing2D.FillMode,System.Boolean)">
      <summary>
 Draws a filled polygon on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="arPoints">Array of System.Drawing.Point that specifies the vertices of the polygon.</param>
      <param name="FillColor">Color of the filled polygon. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="FillMD">Specifies how to fill a closed area that is within another closed area and
 that is created when the polygon or path passes over itself.A member of the
 Drawing2D.FillMode enumeration.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <remarks>
 If the first and last coordinates in the points array are not identical, a line is drawn between them
 to close the polygon.
 </remarks>
      <example>
        <code description="Drawing a filled polygon on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Points(3) As Point
    Points(0).X = 50
    Points(0).Y = 50
    Points(1).X = 120
    Points(1).Y = 80
    Points(2).X = 260
    Points(2).Y = 20
    oGdPictureImaging.DrawFilledPolygon(ImageID, Points, oGdPictureImaging.ARGB(255,0,0,0), Drawing2D.FillMode.Alternate, True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawFilledPolygonTextureFromFile(System.Int32,System.String,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Boolean)">
      <summary>
 Draws a filled polygon on a GdPicture image using a texture from a file.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TextureFilePath">The texture source file path. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="arPoints">Array of System.Drawing.Point that specifies the vertices of the
 polygon.</param>
      <param name="FillMD">Specifies how to fill a closed area that is within another closed area
 and that is created when the polygon or path passes over itself.A
 member of the Drawing2D.FillMode enumeration.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 If the first and last coordinates in the points array are not identical, a line is drawn between them
 to close the polygon.
 </remarks>                                                                                           \
 <example><code description="Drawing a filled Polygon on the image with texture from file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Points(3) As Point
    Points(0).X = 50
    Points(0).Y = 50
    Points(1).X = 120
    Points(1).Y = 80
    Points(2).X = 260
    Points(2).Y = 20
    oGdPictureImaging.DrawFilledPolygonTextureFromFile(ImageID, "Boxes.tif", Points, Drawing2D.FillMode.Alternate, True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code></example></member>
    <member name="M:GdPicture12.GdPictureImaging.DrawFilledPolygonTextureFromGdPictureImage(System.Int32,System.Int32,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Boolean)">
      <summary>
 Draws a filled polygon on a GdPicture image using a texture from a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ImageTexture">GdPicture Image Identifier. Source image used for the texture.</param>
      <param name="arPoints">Array of System.Drawing.Point that specifies the vertices of the polygon.
 </param>
      <param name="FillMD">Specifies how to fill a closed area that is within another closed area
 and that is created when the polygon or path passes over itself.A member
 of the Drawing2D.FillMode enumeration.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 If the first and last coordinates in the points array are not identical, a line is drawn between them
 to close the polygon.
 </remarks>
      <example>
        <code description="Drawing a filled polygon on the image with texture from a GdPicture Image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim TextureImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("texture.tif")
    If TextureImage &lt;&gt; 0 Then
       Dim Points(3) As Point
       Points(0).X = 50
       Points(0).Y = 50
       Points(1).X = 120
       Points(1).Y = 80
       Points(2).X = 260
       Points(2).Y = 20
       oGdPictureImaging.DrawFilledPolygonTextureFromGdPictureImage(ImageID, TextureImage, Points, Drawing2D.FillMode.Alternate, True)
       oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
       oGdPictureImaging.ReleaseGdPictureImage(TextureImage)
    Else
       MessageBox.Show("Error: Cannot load texture file:" + oGdPictureImaging.GetStat().ToString())
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawFilledEllipse(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a filled ellipse on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse.</param>
      <param name="Width">Specifies the width of the rectangle that bounds the ellipse.</param>
      <param name="Height">Specifies the height of the rectangle that bounds the ellipse.</param>
      <param name="FillColor">Color of the filled ellipse.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a filled ellipse on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawFilledEllipse(ImageID, 50, 50, 25, 40, oGdPictureImaging.ARGB(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawFilledEllipse(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws a filled ellipse on a GdPicture image. The filling color is specified with an integer value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse.</param>
      <param name="Width">Specifies the width of the rectangle that bounds the ellipse.</param>
      <param name="Height">Specifies the height of the rectangle that bounds the ellipse.</param>
      <param name="FillColor">Color of the filled ellipse. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a filled ellipse on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawFilledEllipse(ImageID, 50, 50, 25, 40, oGdPictureImaging.ARGBI(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawFilledRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a filled rectangle on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="Width">Specifies the width of the rectangle.</param>
      <param name="Height">Specifies the height of the rectangle.</param>
      <param name="FillColor">Color of the filled rectangle. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a filled rectangle on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawFilledRectangle(ImageID, 50, 50, 50, 100, oGdPictureImaging.ARGB(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawFilledRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws a filled rectangle on a GdPicture image. The filling color is specified with an integer value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="Width">Specifies the width of the rectangle.</param>
      <param name="Height">Specifies the height of the rectangle.</param>
      <param name="FillColor">Color of the filled rectangle. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a filled rectangle on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawFilledRectangle(ImageID, 50, 50, 50, 100, oGdPictureImaging.ARGBI(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawFilledRectangleOP(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,GdPicture12.Operators)">
      <summary>
 Draws a filled rectangle on a GdPicture image using an operator of combination.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="DstWidth">Specifies the width of the rectangle.</param>
      <param name="DstHeight">Specifies the height of the rectangle.</param>
      <param name="FillColor">Color of the filled rectangle. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="OP">A member of the Operators enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a filled rectangle on the image using Multiply operator." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawFilledRectangleOP(ImageID, 50, 50, 50, 100, oGdPictureImaging.ARGB(255,255,255,0), Operators.OperatorMultiply)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGradientCurve(System.Int32,System.Drawing.Point[],System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a linear gradient curve on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="arPoints">Array of System.Drawing.Point that specifies the coordinates that the
 cardinal spline passes through.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the curve.</param>
      <param name="StartColor">Starting of the curve, as Color object. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="EndColor">Ending color of the gradient curve, as Color object. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a gradient curve on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Points(0 To 2) As Point
    Points(0).X = 50
    Points(0).Y = 50
    Points(1).X = 120
    Points(1).Y = 80
    Points(2).X = 260
    Points(2).Y = 20
    oGdPictureImaging.DrawGradientCurve(ImageID, Points, 10, oGdPictureImaging.ARGB(255,0,0,0), oGdPictureImaging.ARGB(255,255,255,255), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGradientLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a linear gradient line on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="SrcLeft">Specifies the x-coordinate of the starting point of the line.</param>
      <param name="SrcTop">Specifies the y-coordinate of the starting point of the line.</param>
      <param name="DstLeft">Specifies the x-coordinate of the ending point of the line.</param>
      <param name="DstTop">Specifies the y-coordinate of the ending point of the line.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the line.</param>
      <param name="StartColor">Starting color of the gradient line, as Color object. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="EndColor">Ending color of the gradient line, as Color object. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a gradient line on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawGradientLine(ImageID, 50, 10, 250, 200, 5, oGdPictureImaging.ARGB(255,0,0,0), oGdPictureImaging.ARGB(255,255,255,255), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGradientLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws a linear gradient line on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="SrcLeft">Specifies the x-coordinate of the starting point of the line.</param>
      <param name="SrcTop">Specifies the y-coordinate of the starting point of the line.</param>
      <param name="DstLeft">Specifies the x-coordinate of the ending point of the line.</param>
      <param name="DstTop">Specifies the y-coordinate of the ending point of the line.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the line.</param>
      <param name="StartColor">Starting color of the gradient line, as integer value. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="EndColor">Ending color of the gradient line, as integer value. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a gradient line on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawGradientLine(ImageID, 50, 10, 250, 200, 5, oGdPictureImaging.ARGBI(255,0,0,0), oGdPictureImaging.ARGBI(255,255,255,255), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGrid(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
 Draws a grid on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the starting point of the grid.</param>
      <param name="DstTop">Specifies the y-coordinate of the starting point of the grid.</param>
      <param name="Width">Width of the grid in pixel.</param>
      <param name="Height">Height of the grid in pixel.</param>
      <param name="HorizontalStep">Space, in pixel, between each columns.</param>
      <param name="VerticalStep">Space, in pixel, between each rows.</param>
      <param name="PenWidth">With of the pen (in pixel) used to draw the grid.</param>
      <param name="PenColor">Color of the grid. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a grid on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawGrid(ImageID, 50, 10, 250, 200, 10, 8, 2, oGdPictureImaging.ARGB(255,0,0,0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a line on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="SrcLeft">Specifies the x-coordinate of the starting point of the line.</param>
      <param name="SrcTop">Specifies the y-coordinate of the starting point of the line.</param>
      <param name="DstLeft">Specifies the x-coordinate of the ending point of the line.</param>
      <param name="DstTop">Specifies the y-coordinate of the ending point of the line.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the line.</param>
      <param name="PenColor">Color of the line. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Draws a Semi transparent Red line using 2 pixels pen size from (0,0) to (200,200) on a GdPicture image" lang="VB.NET">
 oGdPictureImaging.DrawLine(ImageID, 0, 0, 200, 200, 2, oGdPictureImaging.ARGB(125, 255, 0, 0), True)
 </code>
      </example>
      <example>
        <code description="Drawing a line on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawLine(ImageID, 50, 10, 250, 200, 2, oGdPictureImaging.ARGB(255,0,0,0), True )
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws a line on a GdPicture image. The drawing color is specified with an integer value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="SrcLeft">Specifies the x-coordinate of the starting point of the line.</param>
      <param name="SrcTop">Specifies the y-coordinate of the starting point of the line.</param>
      <param name="DstLeft">Specifies the x-coordinate of the ending point of the line.</param>
      <param name="DstTop">Specifies the y-coordinate of the ending point of the line.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the line.</param>
      <param name="PenColor">Color of the line. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Draws a Semi transparent Red line using 2 pixels pen size from (0,0) to (200,200) on a GdPicture image" lang="VB.NET">
 oGdPictureImaging.DrawLine(ImageID, 0, 0, 200, 200, 2, oGdPictureImaging.ARGBI(125, 255, 0, 0), True)
 </code>
      </example>
      <example>
        <code description="Drawing a line on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawLine(ImageID, 50, 10, 250, 200, 2, oGdPictureImaging.ARGBI(255,0,0,0), True )
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawLineArrow(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a line with an arrow at the end of it.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="SrcLeft">Specifies the x-coordinate of the starting point of the line.</param>
      <param name="SrcTop">Specifies the y-coordinate of the starting point of the line.</param>
      <param name="DstLeft">Specifies the x-coordinate of the ending point of the line.</param>
      <param name="DstTop">Specifies the y-coordinate of the ending point of the line.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the line.</param>
      <param name="PenColor">Color of the line. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a line arrow on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawLineArrow(ImageID, 50, 10, 250, 200, 2, oGdPictureImaging.ARGB(255,0,0,0), True )
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawRoundedRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a rounded rectangle on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="Width">Specifies the width of the rectangle.</param>
      <param name="Height">Specifies the height of the rectangle.</param>
      <param name="Radius">Size of the radius in pixel.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the rectangle.</param>
      <param name="PenColor">Color of the rectangle. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a rounded rectangle on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawRoundedRectangle(ImageID, 50, 50, 50, 100, 30.0, oGdPictureImaging.ARGB(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawRotatedRectangle(System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a rotated rectangle on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Angle">Angle of rotation in degrees.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="Width">Specifies the width of the rectangle.</param>
      <param name="Height">Specifies the height of the rectangle.</param>
      <param name="PenWidth">Width, in pixel, of the pen used to draw the rectangle.</param>
      <param name="PenColor">Color of the rectangle. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a rotated rectangle on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawRotatedRectangle(ImageID, 50.0, 50, 50, 50, 100, oGdPictureImaging.ARGB(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawRotatedRectangle(System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws a rotated rectangle on a GdPicture image. The drawing color is specified with an integer value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Angle">Angle of rotation in degrees.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="Width">Specifies the width of the rectangle.</param>
      <param name="Height">Specifies the height of the rectangle.</param>
      <param name="PenWidth">Width, in pixel, of the pen used to draw the rectangle.</param>
      <param name="PenColor">Color of the rectangle. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a Rotated Rectangle on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.DrawRotatedRectangle(ImageID, 50.0, 50, 50, 50, 100, oGdPictureImaging.ARGBI(255,0,0,0), True)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawFilledRoundedRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a filled and rounded rectangle on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="Width">Specifies the width of the rectangle.</param>
      <param name="Height">Specifies the height of the rectangle.</param>
      <param name="Radius">Radius value between 0 and 90.</param>
      <param name="FillColor">Color of the filled circle. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a Filled Rounded Rectangle on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawFilledRoundedRectangle(ImageID, 50, 50, 50, 100, 30.0, oGdPictureImaging.ARGB(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawFilledRoundedRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Boolean)">
      <summary>
 Draws a filled and rounded rectangle on a GdPicture image. The filling color is specified with an integer value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="Width">Specifies the width of the rectangle.</param>
      <param name="Height">Specifies the height of the rectangle.</param>
      <param name="Radius">Radius value between 0 and 90.</param>
      <param name="FillColor">Color of the filled circle. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a filledrounded rectangle on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawFilledRoundedRectangle(ImageID, 50, 50, 50, 100, 30.0, oGdPictureImaging.ARGBI(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a rectangle on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="Width">Specifies the width of the rectangle.</param>
      <param name="Height">Specifies the height of the rectangle.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the rectangle.</param>
      <param name="PenColor">Color of the rectangle. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Draws a semi transparent green rectangle using 2 pixels pen size from (0,0) to (200,200)" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawRectangle(ImageID, 0, 0, 200, 200, 2, oGdPictureImaging.ARGB(125, 0, 255, 0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws a rectangle on a GdPicture image. The drawing color is specified with an integer value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="Width">Specifies the width of the rectangle.</param>
      <param name="Height">Specifies the height of the rectangle.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the rectangle.</param>
      <param name="PenColor">Color of the rectangle. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Draws a semi transparent green rectangle using 2 pixels pen size from (0,0) to (200,200)" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawRectangle(ImageID, 0, 0, 200, 200, 2, oGdPictureImaging.ARGBI(125, 0, 255, 0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a pie on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse in which to draw the pie.</param>
      <param name="DstTop">The y-coordinate of the upper-left corner of the rectangle that bounds
 the ellipse in which to draw the pie.</param>
      <param name="Width">Specifies the width of the rectangle that bounds the ellipse in which to
 draw the pie.</param>
      <param name="Height">Specifies the height of the rectangle that bounds the ellipse in which to
 draw the pie.</param>
      <param name="StartAngle">Specifies the angle, in degrees, between the x-axis and the starting point
 of the arc that defines the pie. A positive value specifies clockwise
 rotation.</param>
      <param name="SweepAngle">The angle, in degrees, between the starting and ending points of the arc
 that defines the pie. A positive value specifies clockwise rotation.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the rectangle.</param>
      <param name="PenColor">Color of the pie. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a pie on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawPie(ImageID, 50, 10, 250, 200, 20.0, 90.0, 10, oGdPictureImaging.ARGB(255,0,0,0), True )
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws a pie on a GdPicture image. The drawing color is specified with an integer value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse in which to draw the pie.</param>
      <param name="DstTop">The y-coordinate of the upper-left corner of the rectangle that bounds
 the ellipse in which to draw the pie.</param>
      <param name="Width">Specifies the width of the rectangle that bounds the ellipse in which to
 draw the pie.</param>
      <param name="Height">Specifies the height of the rectangle that bounds the ellipse in which to
 draw the pie.</param>
      <param name="StartAngle">Specifies the angle, in degrees, between the x-axis and the starting point
 of the arc that defines the pie. A positive value specifies clockwise
 rotation.</param>
      <param name="SweepAngle">The angle, in degrees, between the starting and ending points of the arc
 that defines the pie. A positive value specifies clockwise rotation.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the rectangle.</param>
      <param name="PenColor">Color of the pie. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a pie on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawPie(ImageID, 50, 10, 250, 200, 20.0, 90.0, 10, oGdPictureImaging.ARGBI(255,0,0,0), True )
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawFilledPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a filled pie on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse in which to draw the pie.</param>
      <param name="DstTop">The y-coordinate of the upper-left corner of the rectangle that bounds
 the ellipse in which to draw the pie.</param>
      <param name="Width">Specifies the width of the rectangle that bounds the ellipse in which to
 draw the pie.</param>
      <param name="Height">Specifies the height of the rectangle that bounds the ellipse in which to
 draw the pie.</param>
      <param name="StartAngle">Specifies the angle, in degrees, between the x-axis and the starting point
 of the arc that defines the pie. A positive value specifies clockwise
 rotation.</param>
      <param name="SweepAngle">The angle, in degrees, between the starting and ending points of the arc
 that defines the pie. A positive value specifies clockwise rotation.</param>
      <param name="FillColor">Color of the filled pie. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a filled pie on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawFilledPie(ImageID, 50, 50, 25, 25, 25.0, 90.0, oGdPictureImaging.ARGB(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawFilledPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Boolean)">
      <summary>
 Draws a filled pie on a GdPicture image. The filling color is specified with an integer value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the ellipse in which to draw the pie.</param>
      <param name="DstTop">The y-coordinate of the upper-left corner of the rectangle that bounds
 the ellipse in which to draw the pie.</param>
      <param name="Width">Specifies the width of the rectangle that bounds the ellipse in which to
 draw the pie.</param>
      <param name="Height">Specifies the height of the rectangle that bounds the ellipse in which to
 draw the pie.</param>
      <param name="StartAngle">Specifies the angle, in degrees, between the x-axis and the starting point
 of the arc that defines the pie. A positive value specifies clockwise
 rotation.</param>
      <param name="SweepAngle">The angle, in degrees, between the starting and ending points of the arc
 that defines the pie. A positive value specifies clockwise rotation.</param>
      <param name="FillColor">Color of the filled pie. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Drawing a filled pie on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawFilledPie(ImageID, 50, 50, 25, 25, 25.0, 90.0, oGdPictureImaging.ARGBI(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawRotatedFilledRectangle(System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
      <summary>
 Draws a rotated and filled rectangle on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Angle">Angle of rotation in degrees.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="Width">Specifies the width of the rectangle.</param>
      <param name="Height">Specifies the height of the rectangle.</param>
      <param name="FillColor">Color of the filled rectangle. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Drawing a Rotated Filled Rectangle on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawRotatedFilledRectangle(ImageID, 50.0, 50, 50, 50, 100, oGdPictureImaging.ARGB(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawRotatedFilledRectangle(System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws a rotated and filled rectangle on a GdPicture image. The filling color is specified with an integer value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Angle">Angle of rotation in degrees.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="Width">Specifies the width of the rectangle.</param>
      <param name="Height">Specifies the height of the rectangle.</param>
      <param name="FillColor">Color of the filled rectangle. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Drawing a rotated filled rectangle on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawRotatedFilledRectangle(ImageID, 50.0, 50, 50, 50, 100, oGdPictureImaging.ARGBI(255,0,0,0), True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawLineTextureFromFile(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws a textured line on a GdPicture image using a texture from a file.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TextureFilePath">The texture source file path. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="SrcLeft">Specifies the x-coordinate of the starting point of the line.</param>
      <param name="SrcTop">Specifies the y-coordinate of the starting point of the line.</param>
      <param name="DstLeft">Specifies the x-coordinate of the ending point of the line.</param>
      <param name="DstTop">Specifies the y-coordinate of the ending point of the line.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the line.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
      <example>
        <code description="Drawing a line on the image with texture from a file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawLineArrow(ImageID, "Texture.tif", 50, 10, 250, 200, 10, True )
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawLineTextureFromGdPictureImage(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Draws a textured line on a GdPicture image using a texture from a GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ImageTexture">GdPicture Image Identifier. Source image used for the texture.</param>
      <param name="SrcLeft">Specifies the x-coordinate of the starting point of the line.</param>
      <param name="SrcTop">Specifies the y-coordinate of the starting point of the line.</param>
      <param name="DstLeft">Specifies the x-coordinate of the ending point of the line.</param>
      <param name="DstTop">Specifies the y-coordinate of the ending point of the line.</param>
      <param name="PenWidth">The width, in pixel, of the pen used to draw the line.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
      <example>
        <code description="Drawing a Line on the image with Texture from a path." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim TextureImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("texture.tif")
    If TextureImage &lt;&gt; 0 Then
       oGdPictureImaging.DrawLineTextureFromGdPictureImage(ImageID, TextureImage, 50, 10, 250, 200, 10, True )
       oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
       oGdPictureImaging.ReleaseGdPictureImage(TextureImage)
    Else
       MessageBox.Show("Error: Cannot load texture file:" + oGdPictureImaging.GetStat().ToString())
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FontSetUnit(GdPicture12.UnitMode)">
      <summary>
 Sets the font size unit used in the Drawing text methods.
 </summary>
      <param name="UnitMode">A member of the UnitMode enumeration.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetUnit" />
      <example>
        <code description="Setting the unit used in drawing text on an image to pixels." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FontSetUnit(UnitMode.UnitPixel)
    oGdPictureImaging.DrawText(ImageID, "GdPicture Imaging", 50, 50, 9.0, FontStyle.FontStyleRegular, oGdPictureImaging.ARGBI(255,0,0,0), "Arial", True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FontGetUnit">
      <summary>
 Retrieves the font size unit used in the Drawing text methods.
 </summary>
      <returns>
 A member of the UnitMode enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontSetUnit(GdPicture12.UnitMode)" />
      <example>
        <code description="Retrieving the unit size of a font used in drawing text on an image. The following code assumes a certain font along with its unit has been set and is used to draw text on an image with." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim Size As UnitMode
 Size = oGdPictureImaging.FontGetUnit()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FontGetCount">
      <summary>
 Retrieves the number of fonts available.
 </summary>
      <returns>
 The number of fonts available.
 </returns>
      <example>
        <code description="Retrieving how many fonts available." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 'Here we assume that a number of fonts has been added to the oGdPictureImaging instance
 Dim Number As Integer
 Number = oGdPictureImaging.FontGetCount()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FontGetName(System.Int32)">
      <summary>
 Retrieves the name of an available font.
 </summary>
      <param name="FontNo">Value between 1 and FontGetCount().</param>
      <returns>
 A font name.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetCount" />
      <example>
        <code description="Retrieving a font's name available. The following code assumes at least 21 fonts are available." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 'We assume that the adding of the fonts is done here
 Dim Name As String
 Name = oGdPictureImaging.FontGetName(21)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FontIsStyleAvailable(System.String,GdPicture12.FontStyle)">
      <summary>
 Determines whether the specified style is available for this font family.
 </summary>
      <param name="FontName">The font family name. ("Arial" or "Helvetica"...).</param>
      <param name="FontStyle">A member of the FontStyle enumeration.</param>
      <returns>
 True if the font style is available else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetName(System.Int32)" />
      <example>
        <code description="Determinning whether a certain font has a specified style" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim HasStyle As Boolean
 HasStyle = oGdPictureImaging.FontIsStyleAvailable("Ariel", FontStyle.FontStyleRegular)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawRotatedText(System.Int32,System.Single,System.String,System.Int32,System.Int32,System.Single,GdPicture12.FontStyle,System.Drawing.Color,System.String,System.Boolean)">
      <summary>
 Draws a rotated text on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Angle">Angle of rotation in degrees.</param>
      <param name="Text">Text to draw.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle
 that bounds the.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle
 that bounds the.</param>
      <param name="FontSize">The font size in units specified by the FontSetUnit() method.</param>
      <param name="FontStyle">A member of the FontStyle enumeration.</param>
      <param name="TextColor">Color of the text. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="FontName">The name of the font. IE: "Arial".</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontSetUnit(GdPicture12.UnitMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetUnit" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255.
 </remarks>
      <example>
        <code description="Drawing a rotated text on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawRotatedText(ImageID, 45, "GdPicture Imaging", 50, 50, 9.0, FontStyle.FontStyleRegular, oGdPictureImaging.ARGB(255,0,0,0), "Arial", True)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawRotatedText(System.Int32,System.Single,System.String,System.Int32,System.Int32,System.Single,GdPicture12.FontStyle,System.Int32,System.String,System.Boolean)">
      <summary>
 Draws a rotated text on a GdPicture image. The drawing color is specified with an integer value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Angle">Angle of rotation in degrees.</param>
      <param name="Text">Text to draw.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle
 that bounds the.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle
 that bounds the.</param>
      <param name="FontSize">The font size in units specified by the FontSetUnit() method.</param>
      <param name="FontStyle">A member of the FontStyle enumeration.</param>
      <param name="TextColor">Color of the text. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="FontName">The name of the font. IE: "Arial".</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontSetUnit(GdPicture12.UnitMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetUnit" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255.
 </remarks>
      <example>
        <code description="Drawing a rotated text on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawRotatedText(ImageID, 45, "GdPicture Imaging", 50, 50, 9.0, FontStyle.FontStyleRegular, oGdPictureImaging.ARGBI(255,0,0,0), "Arial", True)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawRotatedTextBackColor(System.Int32,System.Single,System.String,System.Int32,System.Int32,System.Single,GdPicture12.FontStyle,System.Drawing.Color,System.Drawing.Color,System.String,System.Boolean)">
      <summary>
 Draws a rotated text with background color on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Angle">Angle of rotation in degrees.</param>
      <param name="Text">Text to draw.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
 bounds the.</param>
      <param name="FontSize">The font size in units specified by the FontSetUnit() method.</param>
      <param name="FontStyle">A member of the FontStyle enumeration.</param>
      <param name="TextColor">Color of the text. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="BackColor">Color of the background. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="FontName">The name of the font. IE: "Arial".</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontSetUnit(GdPicture12.UnitMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetUnit" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255.
 </remarks>
      <example>
        <code description="Drawing a rotated text with specified back color on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawRotatedTextBackColor(ImageID, 45, "GdPicture Imaging", 50, 50, 9.0, FontStyle.FontStyleRegular, oGdPictureImaging.ARGB(255,0,0,0), oGdPictureImaging.ARGB(255,0,255,0), "Arial", True)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawText(System.Int32,System.String,System.Int32,System.Int32,System.Single,GdPicture12.FontStyle,System.Drawing.Color,System.String,System.Boolean)">
      <summary>
 Draws a text on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Text">Text to draw.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
 bounds the.</param>
      <param name="FontSize">The font size in units specified by the FontSetUnit() method.</param>
      <param name="FontStyle">A member of the FontStyle enumeration.</param>
      <param name="TextColor">Color of the text. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="FontName">The name of the font. IE: "Arial".</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontSetUnit(GdPicture12.UnitMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetUnit" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255.
 </remarks>
      <example>
        <code description="Drawing text on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawText(ImageID, "GdPicture Imaging", 50, 50, 9.0, FontStyle.FontStyleRegular, oGdPictureImaging.ARGB(255,0,0,0), "Arial", True)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawText(System.Int32,System.String,System.Int32,System.Int32,System.Single,GdPicture12.FontStyle,System.Int32,System.String,System.Boolean)">
      <summary>
 Draws a text on a GdPicture image. The drawing color is specified with an integer value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Text">Text to draw.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
 bounds the.</param>
      <param name="FontSize">The font size in units specified by the FontSetUnit() method.</param>
      <param name="FontStyle">A member of the FontStyle enumeration.</param>
      <param name="TextColor">Color of the text. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="FontName">The name of the font. IE: "Arial".</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontSetUnit(GdPicture12.UnitMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetUnit" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255.
 </remarks>
      <example>
        <code description="Drawing text on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawText(ImageID, "GdPicture Imaging", 50, 50, 9.0, FontStyle.FontStyleRegular, oGdPictureImaging.ARGBI(255,0,0,0), "Arial", True)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetTextHeight(System.Int32,System.String,System.String,System.Single,GdPicture12.FontStyle)">
      <summary>
 Calculate the height of the specified text, based on the specified font, font size and font style.
 The result is measured in units specified by the FontSetUnit() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Text">Text to draw.</param>
      <param name="FontName">The name of the font. IE: "Arial".</param>
      <param name="FontSize">The font size in units specified by the FontSetUnit() method.</param>
      <param name="FontStyle">A member of the FontStyle enumeration.</param>
      <returns>
 The height of the text measured in units specified by the FontSetUnit() method.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontSetUnit(GdPicture12.UnitMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetUnit" />
      <example>
        <code description="Retrieving the minimal height required to write a certain text on an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim Height As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 Height = oGdPictureImaging.GetTextHeight(ImageID,  "GdPicture Imaging", "Arial",10.0, FontStyle.FontStyleRegular)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetTextWidth(System.Int32,System.String,System.String,System.Single,GdPicture12.FontStyle)">
      <summary>
 Calculate the width of the specified text, based on the specified font, font size and font style. The
 result is measured in units specified by the FontSetUnit() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Text">Text to draw.</param>
      <param name="FontName">The name of the font. IE: "Arial".</param>
      <param name="FontSize">The font size in units specified by the FontSetUnit() method.</param>
      <param name="FontStyle">A member of the FontStyle enumeration.</param>
      <returns>
 The width of the text measured in units specified by the FontSetUnit() method.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontSetUnit(GdPicture12.UnitMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetUnit" />
      <example>
        <code description="Retrieving the minimal width required to write a certain text on an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim Width As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 Width = oGdPictureImaging.GetTextWidth(ImageID,  "GdPicture Imaging", "Arial",10.0, FontStyle.FontStyleRegular)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawTextBackColor(System.Int32,System.String,System.Int32,System.Int32,System.Single,GdPicture12.FontStyle,System.Drawing.Color,System.Drawing.Color,System.String,System.Boolean)">
      <summary>
 Draws a text with background color on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Text">Text to draw.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
 bounds the.</param>
      <param name="FontSize">The font size in units specified by the FontSetUnit() method.</param>
      <param name="FontStyle">A member of the FontStyle enumeration.</param>
      <param name="TextColor">Color of the text. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="BackColor">Color of the background. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="FontName">The name of the font. IE: "Arial".</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontSetUnit(GdPicture12.UnitMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetUnit" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255.
 </remarks>
      <example>
        <code description="Drawing text with specified back color on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawTextBackColor(ImageID, "GdPicture Imaging", 50, 50, 9.0, FontStyle.FontStyleRegular, oGdPictureImaging.ARGB(255,0,0,0), oGdPictureImaging.ARGBI(255,0,255,0), "Arial", True)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawTextBackColor(System.Int32,System.String,System.Int32,System.Int32,System.Single,GdPicture12.FontStyle,System.Int32,System.Int32,System.String,System.Boolean)">
      <summary>
 Draws a text with background color on a GdPicture image. The drawing color is specified with an integer value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Text">Text to draw.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
 bounds the.</param>
      <param name="FontSize">The font size in units specified by the FontSetUnit() method.</param>
      <param name="FontStyle">A member of the FontStyle enumeration.</param>
      <param name="TextColor">Color of the text. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="BackColor">Color of the background. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="FontName">The name of the font. IE: "Arial".</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontSetUnit(GdPicture12.UnitMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetUnit" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255.
 </remarks>
      <example>
        <code description="Drawing text with specified back color on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawTextBackColor(ImageID, "GdPicture Imaging", 50, 50, 9.0, FontStyle.FontStyleRegular, oGdPictureImaging.ARGBI(255,0,0,0), oGdPictureImaging.ARGBI(255,0,255,0), "Arial", True)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawTextBox(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,GdPicture12.TextAlignment,GdPicture12.FontStyle,System.Drawing.Color,System.String,System.Boolean,System.Boolean)">
      <summary>
 Draws an aligned text into a bounding box on a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Text">Text to draw.</param>
      <param name="Left">Specifies the x-coordinate of the upper-left corner of the text box.</param>
      <param name="Top">Specifies the y-coordinate of the upper-left corner of the text box.</param>
      <param name="Width">Specifies the width in pixels of the text box.</param>
      <param name="Height">Specifies the height in pixels of the text box.</param>
      <param name="FontSize">The font size in units specified by the FontSetUnit() method.</param>
      <param name="Alignment">A member of the TextAlign enumeration.</param>
      <param name="FontStyle">A member of the FontStyle enumeration.</param>
      <param name="TextColor">Color of the text. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="FontName">The name of the font. IE: "Arial".</param>
      <param name="DrawBox">Set this parameter to True to draw the textbox that bounds the text.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontSetUnit(GdPicture12.UnitMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetUnit" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255.
 </remarks>
      <example>
        <code description="Drawing a text box on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawTextBox(ImageID, "GdPicture Imaging", 50, 50, 200, 50, 10.0, TextAlign.TextAlignCenter, FontStyle.FontStyleRegular, oGdPictureImaging.ARGB(255, 0, 0, 0), "Arial", True, True)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawTextBox(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,GdPicture12.TextAlignment,GdPicture12.FontStyle,System.Int32,System.String,System.Boolean,System.Boolean)">
      <summary>
 Draws an aligned text into a bounding box on a GdPicture image. The drawing color is specified with an integer value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Text">Text to draw.</param>
      <param name="Left">Specifies the x-coordinate of the upper-left corner of the text box.</param>
      <param name="Top">Specifies the y-coordinate of the upper-left corner of the text box.</param>
      <param name="Width">Specifies the width in pixels of the text box.</param>
      <param name="Height">Specifies the height in pixels of the text box.</param>
      <param name="FontSize">The font size in units specified by the FontSetUnit() method.</param>
      <param name="Alignment">A member of the TextAlign enumeration.</param>
      <param name="FontStyle">A member of the FontStyle enumeration.</param>
      <param name="TextColor">Color of the text. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="FontName">The name of the font. IE: "Arial".</param>
      <param name="DrawBox">Set this parameter to True to draw the textbox that bounds the text.</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontSetUnit(GdPicture12.UnitMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetUnit" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255.
 </remarks>
      <example>
        <code description="Drawing a text box on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawTextBox(ImageID, "GdPicture Imaging", 50, 50, 200, 50, 10.0, TextAlign.TextAlignCenter, FontStyle.FontStyleRegular, oGdPictureImaging.ARGBI(255, 0, 0, 0), "Arial", True, True)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawTextGradient(System.Int32,System.String,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Single,GdPicture12.FontStyle,System.String,System.Boolean)">
      <summary>
 Draws a text on a GdPicture image using a linear gradient Imaging.Colors.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Text">Text to draw.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
 bounds the.</param>
      <param name="StartColor">Starting color of the gradient. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="EndColor">Ending color of the gradient. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="FontSize">The font size in units specified by the FontSetUnit() method.</param>
      <param name="FontStyle">A member of the FontStyle enumeration.</param>
      <param name="FontName">The name of the font. IE: "Arial".</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontSetUnit(GdPicture12.UnitMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetUnit" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255.
 </remarks>
      <example>
        <code description="Drawing gradient text on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawTextGradient(ImageID, "GdPicture Imaging", 50, 50, oGdPictureImaging.ARGB(255, 0, 0, 0), oGdPictureImaging.ARGB(255, 255,255,255), 10.0, FontStyle.FontStyleRegular, "Arial",  True)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawTextGradient(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,GdPicture12.FontStyle,System.String,System.Boolean)">
      <summary>
 Draws a text on a GdPicture image using a linear gradient Imaging.Colors. The drawing colors are specified with integer values.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Text">Text to draw.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
 bounds the.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
 bounds the.</param>
      <param name="StartColor">Starting color of the gradient. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="EndColor">Ending color of the gradient. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="FontSize">The font size in units specified by the FontSetUnit() method.</param>
      <param name="FontStyle">A member of the FontStyle enumeration.</param>
      <param name="FontName">The name of the font. IE: "Arial".</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontSetUnit(GdPicture12.UnitMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetUnit" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255.
 </remarks>
      <example>
        <code description="Drawing gradient text on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawTextGradient(ImageID, "GdPicture Imaging", 50, 50, oGdPictureImaging.ARGBI(255, 0, 0, 0), oGdPictureImaging.ARGBI(255, 255,255,255), 10.0, FontStyle.FontStyleRegular, "Arial",  True)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawTextTextureFromFile(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Single,GdPicture12.FontStyle,System.String,System.Boolean)">
      <summary>
 Draws a textured text on a GdPicture image using a texture from a file.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TextureFilePath">The texture source file path. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Text">Text to draw.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle
 that bounds the.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle
 that bounds the.</param>
      <param name="FontSize">The font size in units specified by the FontSetUnit() method.</param>
      <param name="FontStyle">A member of the FontStyle enumeration.</param>
      <param name="FontName">The name of the font. IE: "Arial".</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontSetUnit(GdPicture12.UnitMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetUnit" />
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
      <example>
        <code description="Drawing text on the image with texture loaded from file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.DrawTextTextureFromFile(ImageID, "Texture.tif", "GdPicture Imaging", 50, 50, 10.0, FontStyle.FontStyleRegular, "Arial",  True)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawTextTextureFromGdPictureImage(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Single,GdPicture12.FontStyle,System.String,System.Boolean)">
      <summary>
 Draws a textured text on a GdPicture image using a texture from a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ImageTexture">GdPicture Image Identifier. Source image used for the texture.</param>
      <param name="Text">Text to draw.</param>
      <param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle
 that bounds the.</param>
      <param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle
 that bounds the.</param>
      <param name="FontSize">The font size in units specified by the FontSetUnit() method.</param>
      <param name="FontStyle">A member of the FontStyle enumeration.</param>
      <param name="FontName">The name of the font. IE: "Arial".</param>
      <param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.FontSetUnit(GdPicture12.UnitMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FontGetUnit" />
      <example>
        <code description="Drawing yext on the image with texture loaded from a GdPicture Image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim TextureImage As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("texture.tif")
    If TextureImage &lt;&gt; 0 Then
       oGdPictureImaging.DrawTextTextureFromFile(ImageID, TextureImage, "GdPicture Imaging", 50, 50, 10.0, FontStyle.FontStyleRegular, "Arial",  True)
       oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
       oGdPictureImaging.ReleaseGdPictureImage(TextureImage)
    Else
       MessageBox.Show("Error: Cannot load texture file:" + oGdPictureImaging.GetStat().ToString())
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FloodFill(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Fills an area of unified color in a GdPicture image with a specific color.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="XStart">Specifies the x-coordinate, in pixel, of the point where filling is to
 start.</param>
      <param name="YStart">Specifies the y-coordinate, in pixel, of the point where filling is to
 start.</param>
      <param name="FillColor">The filling color. A suitable color value can be obtained by using the ARGBI() method.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method or an overload of it is used in the "Image Processing" VB.NET Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <example>
        <code description="Applying floodfill on image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FloodFill(ImageID, 120, 65, oGdPictureImaging.ARGBI(255, 255, 0, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FloodFill(System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
 Fills an area of unified color in a GdPicture image with a specific color.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="XStart">Specifies the x-coordinate, in pixel, of the point where filling is to
 start.</param>
      <param name="YStart">Specifies the y-coordinate, in pixel, of the point where filling is to
 start.</param>
      <param name="FillColor">Color to use for the filling operation. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method or an overload of it is used in the "Image Processing" VB.NET Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <example>
        <code description="Applying floodfill on image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FloodFill(ImageID, 120, 65, oGdPictureImaging.ARGB(255, 255, 0, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxTwirl(System.Int32,System.Single)">
      <summary>
 Performs a twirl effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Factor">Twirl Factor between 0 and 100.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a twirl effect on the image with a set factor." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxTwirl(ImageID, 30)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxSwirl(System.Int32,System.Single)">
      <summary>
 Performs a swirl effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Factor">Swirl Factor between 1 and 100.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a swirl effect on the image with a set factor." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxSwirl(ImageID, 30)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxMirrorRounded(System.Int32)">
      <summary>
 Performs a rounded mirror effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a mirror rounded effect on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxMirrorRounded(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxhWaves(System.Int32,System.Int32,System.Int32)">
      <summary>
 Performs horizontal wave effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="WidthWave">Width of the wave in pixels.</param>
      <param name="HeightWave">Height of the wave in pixels.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a horizontal waves effect on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxhWaves(ImageID, 10, 20)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxvWaves(System.Int32,System.Int32,System.Int32)">
      <summary>
 Performs vertical wave effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="WidthWave">Width of the wave in pixels.</param>
      <param name="HeightWave">Height of the wave in pixels.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a vertical waves effect on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxvWaves(ImageID, 10, 20)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBlur(System.Int32)">
      <summary>
 Performs blur effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a blur effect on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBlur(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxSubtractBackground(System.Int32,System.Int32,System.Boolean)">
      <summary>
 Performs a Subtract Background (RollingBall) algorithm. It mainly is used for Medical Images like
 images of cells. The two parameters in the algorithm give you control over the size of the
 subtraction and the color of it. For more information please revise Stanley Sternberg's, “Biomedical
 Image Processing”, IEEE Computer, January 1983.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="RollingBallSize">Size of ball rolled under the image. Controlled the amount of
 subtraction. Value &gt;= 50.</param>
      <param name="LightBackground">Whether a background is lighter or not than the foreground. Value &gt;=
 true.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxDespeckle(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxDespeckleMore(System.Int32)" />
      <example>
        <code description="Subtracting an image's background." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim RollingBallSize As Integer =50
    Dim LightBackground As Boolean = True
    oGdPictureImaging.FxSubtractBackground(ImageID, RollingBallSize, LightBackground)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxScanLine(System.Int32)">
      <summary>
 Performs scan line effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a scanLine effect on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxScanLine(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxSepia(System.Int32)">
      <summary>
 Performs sepia effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a sepia effect on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxSepia(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxColorize(System.Int32,System.Single,System.Single,System.Single)">
      <summary>
 Performs "colorization" effect on a GdPicture image or on an area of a GdPicture image
 defined by SetROI().
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Hue">Hue [0 - 100].</param>
      <param name="Saturation">Saturation [0 - 100].</param>
      <param name="Luminosity">Luminosity [0 - 100].</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a colorize effect on the image using set hue, saturation, and luminosity values." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Hue As Integer = 50
    Dim Saturation As Integer = 50
    Dim Luminosity As Integer = 25
    oGdPictureImaging.FxColorize(ImageID, Hue, Saturation, Luminosity)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxDilate(System.Int32)">
      <summary>
 Performs Dilate effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxMax(System.Int32,System.Int32)" />
      <example>
        <code description="Applying a dilate effect on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxDilate(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxStretchContrast(System.Int32)">
      <summary>
 Performs a contrast histogram stretch filter on a GdPicture image or on an area of a GdPicture image
 defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Stretching the image's contrast." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxStretchContrast(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxEqualizeIntensity(System.Int32)">
      <summary>
 Performs an automatic contrast enhancement  on a GdPicture image or on an area of a GdPicture image
 defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Equalizing the image's histogram intensities" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxEqualizeIntensity(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxNegative(System.Int32)">
      <summary>
 Performs a negative effect (color inversion) on a GdPicture image or on an area of a GdPicture image
 defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Inverting the colors of a document image if the background is black and the text is white." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) = 1 Then
       If oGdPictureImaging.IsNegative(ImageID) Then
          oGdPictureImaging.FxNegative(ImageID)
          oGdPictureImaging.SaveAsTIFF(ImageID, "inverted.tif", TiffCompression.TiffCompressionCCITT4)
       End If
    Else
       MessageBox.Show("Error: The document is not of a 1 bpp indexed (Format1bppIndexed) image.")
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxFire(System.Int32)">
      <summary>
 Performs a fire effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a fire effect on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxFire(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxHalo(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Performs a halo effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Left">The left destination of the halo.</param>
      <param name="Top">The top destination of the halo.</param>
      <param name="Radius">The halo radius.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a halo effect on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxHalo(ImageID, 50, 100, 30)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxRedEyesCorrection(System.Int32)">
      <summary>
 Performs red eyes correction filter on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Correting the red eyes in captured images." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxRedEyesCorrection(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxSoften(System.Int32,System.Int32)">
      <summary>
 Performs a soften filter on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="SoftenValue">Factor between 1 and 100.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a soften effect on the image, with a set factor" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxSoften(ImageID, 25)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxDespeckle(System.Int32)">
      <summary>
 Performs a 3x3 despeckle filter (also known as median filter) on a GdPicture image or on an area of a
 GdPicture image defined by SetROI() method. It works as a noise removal filter, for Salt-And-Pepper
 like-noise, or varied dots around a document.
 It can remove black noise pixels from white backgrounds and visa versa. It also can remove random noise from multicolored backgrounds.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxDespeckleMore(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxMedian(System.Int32,System.Int32)" />
      <example>
        <code description="Removing noise from an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxDespeckle(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalDespeckle(System.Int32,System.Boolean)">
      <summary>
 Performs a 3x3 despeckle filter on a GdPicture image or on an area of a GdPicture image defined by SetROI() method.
 It works as a noise removal filter, for Salt-And-Pepper like-noise, or varied dots around a document.
 It can remove black noise pixels from white backgrounds and visa versa.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Only 1 bit per pixel images with black and white palette are supported.</param>
      <param name="FixText">Option to make sure text in small documents was not affected. Only set to True if image DPI is less than 200. Otherwise, set to False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the C# "Document Clean Up" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxDespeckleMore(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxMedian(System.Int32,System.Int32)" />
      <example>
        <code description="Removing noise from a bitonal image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) &lt;&gt; 1 Then
       oGdPictureImaging.ConvertTo1BppAT(ImageID)
    End If
    oGdPictureImaging.FxBitonalDespeckle(ImageID, False)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionCCITT4)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalVigorousDespeckle(System.Int32,System.Boolean)">
      <summary>
 Performs an extreme despeckle filter on a GdPicture image or on an area of a GdPicture image defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Only 1 bit per pixel images with black and white palette are supported.</param>
      <param name="CheckForDotOfI">Option to try to detect the dots of i and j letters in the text and not remove it as part of noise. If set to true, will slow down the filter a little.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxDespeckleMore(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxMedian(System.Int32,System.Int32)" />
      <example>
        <code description="Removing noise from a bitonal image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) &lt;&gt; 1 Then
       oGdPictureImaging.ConvertTo1BppAT(ImageID)
    End If
    oGdPictureImaging.FxBitonalVigorousDespeckle(ImageID, False)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionCCITT4)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalSkeletonize(System.Int32,System.Int32)">
      <summary>
 Performs a skeletonize (thinning) algorithm on a bitonal GdPicture Image or part of it by using SetROI().
 This method reduces edges sizes, it can reduce edges to 1 pixel in thickness.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Repetition">Number of passes the algorithm should run. The higher the passes, the thinner the originally thick edges will be. If -1 is used, the
 algorithm will run until all edges are 1 pixel thick. Range from 1 - 10. If you do not know what to use, a value of 4 is suggested.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 This method supports only 1 bpp indexed (Format1bppIndexed) images.
 </para>
        <para>
 It is suggested that for noisy images a call to FxBitonalDepeckle() or FxBitonalDespeckleMore() is made before the use of this method to yield better results
 and so that noise is not thinned out.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDespeckle(System.Int32,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDespeckleMore(System.Int32,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalOutline(System.Int32)" />
      <example>
        <code description="Thinning the content of a bitnal image to 1 pixel width." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) &lt;&gt; 1 Then
       oGdPictureImaging.ConvertTo1BppAT(ImageID)
    End If
    oGdPictureImaging.FxBitonalSkeletonize(ImageID, 4)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionCCITT4)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalOutline(System.Int32)">
      <summary>
 Performs an outline effect on a bitonal GdPicture image or on an area of a GdPicture image defined by
 SetROI() method. The effect trims regions that are at least 3 pixels thick into their outer edges.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 This method supports only 1 bpp indexed (Format1bppIndexed) images.
 </para>
        <para>
 It is suggested that for noisy images a call to FxBitonalDepeckle() or FxBitonalDespeckleMore() is made before the use of this method to yield better results
 and so that noise is not outlined.
 </para>
        <para>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDespeckle(System.Int32,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDespeckleMore(System.Int32,System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalSkeletonize(System.Int32,System.Int32)" />
      <example>
        <code description="Thinning the contents of a bitonal image to its edges (outline)." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) &lt;&gt; 1 Then
       oGdPictureImaging.ConvertTo1BppAT(ImageID)
    End If
    oGdPictureImaging.FxBitonalOutline(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionCCITT4)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalDespeckleMore(System.Int32,System.Boolean)">
      <summary>
 Performs a 5x5 despeckle filter on a GdPicture image or on an area of a GdPicture image defined by SetROI() method.
 It works as a noise removal filter, for Salt-And-Pepper like-noise, or varied dots around a document.
 It can remove black noise pixels from white backgrounds and visa versa.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Only 1 bit per pixel images with black and white palette are supported.</param>
      <param name="FixText">Option to make sure text in small documents was not affected. Only set to True if image DPI is less than 200. Otherwise, set to False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Document Clean Up" C# Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxDespeckleMore(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxMedian(System.Int32,System.Int32)" />
      <example>
        <code description="Removing noise from a bitonal image by using FxBitonalDespeckleMore." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) &lt;&gt; 1 Then
       oGdPictureImaging.ConvertTo1BppAT(ImageID)
    End If
    oGdPictureImaging.FxBitonalDespeckleMore(ImageID, False)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionCCITT4)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxMedian(System.Int32,System.Int32)">
      <summary>
 Performs a median filter of any size of kernel (amount of pixels included in operation) on a
 GdPicture image or on an area of a GdPicture image defined by SetROI() method.
 This method clears the image of Salt and Pepper noise, which is random dot like noise of white and black color.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="KernelSize">Level corresponding to number of pixels to include in the median operation,
 where Level = n, corresponds to (n*2+1)^2 pixels to be included. For
 Example, KernelSize = 1 includes 9 pixels in the median operation,
 KernelSize = 2 includes 25 pixels in the median operation. Range from 1 to 60.
 If value supplied is out of range the method will return GdPictureStatus.InvalidParameter.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" and the "Document Clean Up" C# Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxDespeckle(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxDespeckleMore(System.Int32)" />
      <example>
        <code description="Applying a median filter on image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim KernelSize As Integer = 4
    oGdPictureImaging.FxMedian(ImageID, KernelSize)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxGaussian(System.Int32,System.Int32)">
      <summary>
 Performs a Gaussian (blur via Gaussian deviation formula)filter of any size of kernel (amount of
 pixels included in operation) on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="KernelSize">The size of the square kernel to use. Should be a odd value. For example, a size of 3 will involve 3 * 3 pixels in each pass. The larger the value
 the more blur you get. The range is larger or equal than 3, and less than the Image's Smaller Dimension (Width, Height) divided by 2.
 Suggested value is 3 for a [96-120] DPI image and 5 for a [200-250] dpi bitmap.
 If the value supplied is our of range the method will return GdPictureStatus.InvalidParameter.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" and the "Document Clean Up" C# Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxDespeckle(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxDespeckleMore(System.Int32)" />
      <example>
        <code description="Applying gaussian filter on image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim KernelSize As Integer = 3
    oGdPictureImaging.FxGaussian(ImageID, KernelSize)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxSobelEdgeDetect(System.Int32)">
      <summary>
 Performs a Edge Detection via the Sobel Operator on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxPrewittEdgeDetect(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxEdgeEnhance(System.Int32)" />
      <example>
        <code description="Applying Sobel edge detection filter on image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxSobelEdgeDetect(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxPrewittEdgeDetect(System.Int32)">
      <summary>
 Performs a Edge Detection via the Prewitt Operator on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxSobelEdgeDetect(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxEdgeEnhance(System.Int32)" />
      <example>
        <code description="Applying Prewitt edge detection filter on image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxPrewittEdgeDetect(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxUnsharpMask(System.Int32,System.Int32,System.Double,System.Int32)">
      <summary>
 Performs an Unsharp Mask effect which is a Sharpen effect via subtracting a Gaussian mask of the
 image, on a GdPicture image or on an area of a GdPicture image defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Radius">Size of Edges to become after the effect is applies. It controls how wide
 they get after the filter is applied. Radius and Amount interact, reducing
 one, allows more of the other. Minimum Value of Radius should be 3 or more
 to allow for enough pixels surrounding the edge to be investigated. If value
 passed less than 3 is passed it will be ammended automatically to 3. Proper
 value is 5. Value &gt;= 3.</param>
      <param name="Amount">Amount of Contrast to be added to areas of edges where filter will be
 applies. It controls how much darker and how much brighter the edges become.
 Proper value is 0.5, Value between 0.0-5.0.</param>
      <param name="Threshold">It controls the amount of edges to be sharpened. Smaller values sharpen
 more, higher values exclude the subtle edges from being sharpened. Proper
 value is 40. Value between 0-255.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Document Clean Up" C# Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxDespeckle(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxDespeckleMore(System.Int32)" />
      <example>
        <code description="Sharpenning an image by applying an unsharpmask on it." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Amount As Double = 4.5
    Dim Threshold As Integer = 40
    Dim Radius As Integer = 5
    oGdPictureImaging.FxUnsharpMask(ImageID, Radius, Amount, Threshold)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxMax(System.Int32,System.Int32)">
      <summary>
 Performs a Maximum filter (Dilate Filter)of any size of kernel (amount of pixels included in
 operation) on a GdPicture image or on an area of a GdPicture image defined by SetROI() method. It
 selects the Maximum value or the neighboring pixels to each pixel and gives it that value.
 Basically, in binary images, it makes objects in the become smaller, and in colored images it makes the image brighter because the darker objects shrink.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="KernelSize">How much smaller should objects become in each direction of the four directions, left, right, top, and bottom.
 This value should be larger than 1 and smaller than Image's Smaller Dimension (Width or Height) divided by 2.
 If a value entered is out of range, the method return value will be GdPictureStatus.InvalidParameter.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxDilate(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxMin(System.Int32,System.Int32)" />
      <example>
        <code description="Applying a maximum filter on image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim KernelSize As Integer = 4
    oGdPictureImaging.FxMax(ImageID, KernelSize)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxMin(System.Int32,System.Int32)">
      <summary>
 Performs a Minimum filter (Erode Filter)of any size of kernel (amount of pixels included in
 operation) on a GdPicture image or on an area of a GdPicture image defined by SetROI() method. It
 selects the Minimum value or the neighboring pixels to each pixel and gives it that value.
 Basically, in binary images, it makes objects in the image grow larger, and in colored images it makes the image darker because the darker objects grow.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="KernelSize">How large should objects grow in each direction of the four directions, left, right, top, and bottom
 This value should be larger than 1 and smaller than Image's Smaller Dimension (Width or Height) divided by 2.
 If a value entered is out of range, the method return value will be GdPictureStatus.InvalidParameter.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxErode(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxMax(System.Int32,System.Int32)" />
      <example>
        <code description="Applying a minimum filter on image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim KernelSize As Integer = 4
    oGdPictureImaging.FxMin(ImageID, KernelSize)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxDespeckleMore(System.Int32)">
      <summary>
 Performs a 5x5 despeckle filter (also known as median filter) on a GdPicture image or into an area of
 a GdPicture image defined by SetROI() method. It works as a noise removal filter, for
 Salt-And-Pepper like-noise, or varied dots around a document.
 It can remove black noise pixels from white backgrounds and visa versa. It also can remove random noise from multicolored backgrounds.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxDespeckle(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxMedian(System.Int32,System.Int32)" />
      <example>
        <code description="Removing more noise from an image than that removed by FxDespeckle()." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxDespeckleMore(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxEmboss(System.Int32)">
      <summary>
 Performs emboss effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying an emboss effect on an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxEmboss(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxEmboss(System.Int32,System.Drawing.Color)">
      <summary>
 Performs emboss effect specifying a background color on a GdPicture image or on an area of a
 GdPicture image defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BackColor">Background color. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying an emboss effect on the image with specifying the backgroundcolor." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxEmboss(ImageID, oGdPictureImaging.ARGB(255, 40, 255, 128))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxEmbossMore(System.Int32)">
      <summary>
 Performs emboss more effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() method. Same as Emboss effect but to more of a degree.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying an emboss effect on the image to a bigger degree than that of FxEmboss()." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxEmbossMore(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxEmbossMore(System.Int32,System.Drawing.Color)">
      <summary>
 Performs emboss more effect specifying a background color on a GdPicture image or on an area of a
 GdPicture image defined by SetROI() method. Same as emboss effect but to more of a degree.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BackColor">Color of the background. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying an emboss effect to a larger degree than that of FxEmboss() on the image with specifying the backgroundcolor." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxEmbossMore(ImageID, oGdPictureImaging.ARGB(255, 40, 255, 128))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxEngrave(System.Int32)">
      <summary>
 Performs engrave effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying an engrave effect on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxEngrave(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxEngrave(System.Int32,System.Drawing.Color)">
      <summary>
 Performs engrave effect specifying a background color on a GdPicture image or on an area of a
 GdPicture image defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BackColor">Background color. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying an engrave effect on the image with specifying the backgroundcolor." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxEngrave(ImageID, oGdPictureImaging.ARGB(255, 40, 255, 128))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxEngraveMore(System.Int32)">
      <summary>
 Performs engrave more effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() method. Same as Engrave effect but to more of a degree.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying an engrave effect on the image to more of a degree than that of FxEngrave()." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxEngraveMore(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxEngraveMore(System.Int32,System.Drawing.Color)">
      <summary>
 Performs engrave more effect specifying a background color on a GdPicture image or on an area of a
 GdPicture image defined by SetROI() method. Same as the Engrave effect but to more of a degree.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BackColor">Background color. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying an engrave effect on the image to a larger degree than that of FxEngrave() with specifying the backgroundcolor." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxEngraveMore(ImageID, oGdPictureImaging.ARGB(255, 40, 255, 128))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxEdgeEnhance(System.Int32)">
      <summary>
 Performs edge enhance effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Enhancing the edges of the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxEdgeEnhance(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxConnectedContour(System.Int32)">
      <summary>
 Performs connected contour effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a connected contour effect on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxConnectedContour(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxAddNoise(System.Int32)">
      <summary>
 Performs noise effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Adding noise to the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxAddNoise(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxContour(System.Int32)">
      <summary>
 Performs contour effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a contour effect on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxContour(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxRelief(System.Int32)">
      <summary>
 Performs relief effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a relief effect on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxRelief(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxErode(System.Int32)">
      <summary>
 Performs erode effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxMin(System.Int32,System.Int32)" />
      <example>
        <code description="Applying Erode on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxErode(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxSharpen(System.Int32)">
      <summary>
 Performs sharpen effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Sharpening the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxSharpen(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxSharpenMore(System.Int32)">
      <summary>
 Performs sharpen more effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() method. Same effect as Sharpen but to a larger degree.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Sharpening the image to a greater degree than that created by FxSharpen()." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxSharpenMore(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxDiffuse(System.Int32)">
      <summary>
 Performs diffuse effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a diffuse effect on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxDiffuse(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxDiffuseMore(System.Int32)">
      <summary>
 Performs DiffuseMore effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() method. It is the same as a Diffuse effect but to more of a degree.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a diffuse effect on the image to a larger degree than that of FxDiffuse()." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxDiffuseMore(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxSmooth(System.Int32)">
      <summary>
 Performs smooth effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Smoothing the image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxSmooth(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxAqua(System.Int32)">
      <summary>
 Performs aqua effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying aqua effect on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxAqua(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.fxRemoveBackgroundChromaKey(System.Int32,GdPicture12.ColorKey,System.Int32,System.Int32)">
      <summary>
 Sets the Red, Green or Blue background color as transparent in a GdPicture image or in area of a
 GdPicture image defined by SetROI() method. This method is particularly accurate to remove the
 Green, Blue or Red background of a photo.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Component">A member of the ColorKey enumeration defining the color to remove (can be
 Red, Blue or Green).</param>
      <param name="Variation">Variation between 0 and 512. 0 means no possible variation of the color
 key. Suggest value is 240, higher can result with non removed background
 space.</param>
      <param name="MinKeyValue">Defines the minimum value of the component. Must be a value between 0 and
 255. Default value is 25 for dark background, 50 for standard background
 and 80 for background with high luminosity.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Setting a certain background color of an image to transparent." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.fxRemoveBackgroundChromaKey(ImageID, ColorKey.ColorKeyGreen,  240, 25)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxPixelize(System.Int32)">
      <summary>
 Performs "pixelize" effect on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() method. This filter makes the image appear as pixelated.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Pixelating an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxPixelize(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxGrayscale(System.Int32)">
      <summary>
 Performs grayscale effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <example>
        <code description="Applying a grayScale effect on the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxGrayscale(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture12.BitonalReduction)">
      <summary>
 Performs black &amp; white effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Mode">A member of the BitonalReduction enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1Bpp(System.Int32)" />
      <example>
        <code description="Applying black and white effect on the image using Burke's method." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBlackNWhite(ImageID, BitonalReduction.Burke)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture12.BitonalReduction,System.Int32)">
      <summary>
 Performs black &amp; white effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() method.
 This method takes a parameter to defines the palette color weight.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Mode">A member of the BitonalReduction enumeration.</param>
      <param name="PalWeight">The color palette weight. Range [1 - 255]. If the value selected is outside the range, minimum or maximum will be automatically selected.
 Suggested value is 15. Only available for Burke, Stucki &amp; FloydSteinberg Native.Filters.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1Bpp(System.Int32)" />
      <example>
        <code description="Applying black and white effect on the image using Stucki's method and a pallette weight of 15." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBlackNWhite(ImageID, BitonalReduction.Stucki, 15)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.p
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)">
      <summary>
 Performs black &amp; white effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() method using a specific threshold value. Values above or equal to the threshold value will
 be set white, and values lower than the threshold value will be set as black.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Threshold">Value between [1 and 254] The default value is 128 which means '50%'.pixel
 lighter than 50% =&gt; become white, darker =&gt; become black.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture12.BitonalReduction)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ConvertTo1Bpp(System.Int32)" />
      <example>
        <code description="Applying black and white effect on the image using a threshold of 128." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBlackNWhiteT(ImageID, 128)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetHBitmapFromGdPictureImage(System.Int32)">
      <summary>
 Exports a GdPicture image to a HBitmap.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to export as HBitmap.</param>
      <returns>
 A new HBitmap handle which will contain the specified GdPicture image data.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ReleaseHBitmap(System.IntPtr)" />
      <remarks>
 Use the GetStat() method to see if this method Succeeded.
 Do not forget to release the HBitmap object with the ReleaseHBitmap() method.
 </remarks>
      <example>
        <code description="How to import/export a GdPicture image from/to an HBITMAP." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim HBitmap As IntPtr = oGdPictureImaging.GetHBitmapFromGdPictureImage(ImageID)
    'doing some external processing on the HBitmap
    Dim ResImg As Integer = oGdPictureImaging.CreateGdPictureImageFromHBitmap(HBitmap)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    oGdPictureImaging.ReleaseHBitmap(HBitmap)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetHBitmapFromGdPictureImageI(System.Int32)">
      <summary>
 Exports a GdPicture image to a HBitmap.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to export as HBitmap.</param>
      <returns>
 A new HBitmap handle which will contain the specified GdPicture image data.
 </returns>
      <remarks>
 Use the GetStat() method to see if this method Succeeded.
 Do not forget to release the HBitmap object with the ReleaseHBitmapI() method.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ReleaseHBitmapI(System.Int32)" />
      <example>
        <code description="How to import/export a GdPicture image from/to an HBITMAP." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim HBitmap As IntPtr = oGdPictureImaging.GetHBitmapFromGdPictureImage(ImageID)
    'doing some external processing on the HBitmap
    Dim ResImg As Integer = oGdPictureImaging.CreateGdPictureImageFromHBitmapI(HBitmap)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    oGdPictureImaging.ReleaseHBitmapI(HBitmap)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetHICONFromGdPictureImage(System.Int32)">
      <summary>
 Exports a GdPicture image as HICON.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to export as HICON.</param>
      <returns>
 A new HICON handle which will contains the specified GdPicture image data as icon.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ReleaseHICON(System.IntPtr)" />
      <remarks>
 Do not forget to release the HICON object with the ReleaseHICON() method.
 </remarks>
      <example>
        <code description="How to import/export a GdPicture image from/to HICON" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim HICON As IntPtr = oGdPictureImaging.GetHICONFromGdPictureImage(ImageID)
    'doing some external processing on the HIcon
    Dim ResImg As Integer = oGdPictureImaging.CreateGdPictureImageFromHICON(HICON)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    oGdPictureImaging.ReleaseHICON(HBitmap)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ReleaseHBitmap(System.IntPtr)">
      <summary>
 This method deletes an HBitmap from the memory.
 </summary>
      <param name="HBitmap">The HBitmap handle to delete.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetHBitmapFromGdPictureImage(System.Int32)" />
      <example>
        <code description="How to import/export a GdPicture image from/to an HBITMAP." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim HBitmap As IntPtr = oGdPictureImaging.GetHBitmapFromGdPictureImage(ImageID)
    'doing some external processing on the HBitmap
    Dim ResImg As Integer = oGdPictureImaging.CreateGdPictureImageFromHBitmap(HBitmap)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    oGdPictureImaging.ReleaseHBitmap(HBitmap)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ReleaseHBitmapI(System.Int32)">
      <summary>
 This method deletes an HBitmap from the memory.
 </summary>
      <param name="HBitmap">The HBitmap handle to delete.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetHBitmapFromGdPictureImageI(System.Int32)" />
      <example>
        <code description="How to import/export a GdPicture image from/to an HBITMAP." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim HBitmap As IntPtr = oGdPictureImaging.GetHBitmapFromGdPictureImage(ImageID)
    'doing some external processing on the HBitmap
    Dim ResImg As Integer = oGdPictureImaging.CreateGdPictureImageFromHBitmapI(HBitmap)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    oGdPictureImaging.ReleaseHBitmapI(HBitmap)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ReleaseHICON(System.IntPtr)">
      <summary>
 This method deletes a HICON from the memory.
 </summary>
      <param name="HICON">The HICON handle to delete.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetHICONFromGdPictureImage(System.Int32)" />
      <example>
        <code description="How to import/export a GdPicture image from/to HICON" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim HICON As IntPtr = oGdPictureImaging.GetHICONFromGdPictureImage(ImageID)
    'doing some external processing on the HIcon
    Dim ResImg As Integer = oGdPictureImaging.CreateGdPictureImageFromHICON(HICON)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    oGdPictureImaging.ReleaseHICON(HBitmap)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetGraphicsFromGdPictureImage(System.Int32)">
      <summary>
 Gets the Graphics object associated with a GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The Image from the graphics will be associated.</param>
      <remarks>
        <para>Use the GetStat() method to see if this method Succeeded.</para>
        <para>A Graphics object cannot be created from an image that has an indexed pixel format.</para>
      </remarks>
      <returns>
 A Graphics Object associated with this GdPicture Image.
 </returns>
      <example>
        <code description="How to retrieve graphics object from a GdPicture image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim gr As Drawing.Graphics = oGdPictureImaging.GetGraphicsFromGdPictureImage(ImageID)
    'doing some external processing on the graphics object
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetDibFromGdPictureImage(System.Int32)">
      <summary>
 Exports a GdPicture image as Dib (Device Independent Bitmap).
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to export as Dib.</param>
      <returns>
 A new dib based on a GdPicture image.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ReleaseDib(System.Int32)" />
      <remarks>
 Use the GetStat() method to check if this method succeeded.
 Do not forget to release the dib with the ReleaseDib() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetDibFromGdPictureImageI(System.Int32)">
      <summary>
 Exports a GdPicture image as Dib (Device Independent Bitmap).
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to export as Dib.</param>
      <returns>
 A new dib based on a GdPicture image.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ReleaseDib(System.Int32)" />
      <remarks>
 Use the GetStat() method to check if this method succeeded.
 Do not forget to release the dib with the ReleaseDib() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ReleaseDib(System.Int32)">
      <summary>
 Deletes a Dib from memory.
 </summary>
      <param name="Dib">The Dib to release, as Integer value.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetDibFromGdPictureImageI(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ReleaseDib(System.IntPtr)">
      <summary>
 Deletes a Dib from memory.
 </summary>
      <param name="Dib">The Dib to release, as IntPtr value.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetDibFromGdPictureImage(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetGdiplusImageFromGdPictureImage(System.Int32)">
      <summary>
 Returns a gdiplus image handle from a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to export as gdiplus image
 handle.</param>
      <returns>
 The exported gdiplus image handle.
 </returns>
      <remarks>
        <para>
 The exported gdiplus image will have the same pixel source as the GdPicture image passed as a
 parameter. Therefore, if you remove the specified GdPicture image from memory you will remove at same time the
 exported gdiplus image data.
 </para>
        <para>
 Use the GetStat() method to check if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="How to import/export  a GdPicture Image from/to GdiPlus image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim GdiImg As IntPtr = oGdPictureImaging.GetGdiplusImageFromGdPictureImage(ImageID)
    'doing some external processing on the GdiPlus
    Dim ResImg As Integer = oGdPictureImaging.CreateGdPictureImageFromGdiplusImage(GdiImg)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetBitmapFromGdPictureImage(System.Int32)">
      <summary>
 Returns a Bitmap object from a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to export as Bitmap.</param>
      <returns>
 A Bitmap object. The exported Bitmap image.
 </returns>
      <remarks>
        <para>
 The exported Bitmap object will have the same pixel source as a GdPicture image.
 Therefore, if you remove the GdPicture image from memory you will remove at same time the exported
 Bitmap data.
 </para>
        <para>
 Use the GetStat() method to check if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="How to import/export Gdpicture image from/to Bitmap." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Bm As Bitmap = oGdPictureImaging.GetBitmapFromGdPictureImage(ImageID)
    'doing some external processing on the Bitmap
    Dim ResImg As Integer = oGdPictureImaging.CreateGdPictureImageFromBitmap(Bitmap)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetBitmapSourceFromGdPictureImage(System.Int32)">
      <summary>
 Returns a Bitmap object from a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to export as Bitmap.</param>
      <returns>
 A BitmapSource object. The exported Bitmap image.
 </returns>
      <remarks>
        <para>
 The exported Bitmap object will own its own pixel buffer.
 </para>
        <para>
 Use the GetStat() method to check if this method succeeded.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Creates an Anchor Template from a GdPicture image.
 Anchoring mechanism (or template recognition) can help to align area to be processed by filters, OMR,
 OCR or barcode recognition. For example, if several documents are scanned of the same form, and the
 scanning orientation or quality is not guaranteed, the GdPicture Anchoring System can be used to
 specify the orientation of each document and the translation made to each document from the one where
 the user selected their Areas (surrounding rectangles).
 Note: To maximize detection speed and accuracy, the Anchor region must contain less than 50% white pixel and should minimize white margins.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="PosLeft">The left position,, in pixel, (0-based), of the rectangle surrounding the
 template.</param>
      <param name="PosTop">The top position,, in pixel, (0-based), of the rectangle surrounding the
 template.</param>
      <param name="Width">The width, in pixel, of the rectangle surrounding the template.</param>
      <param name="Height">The height, in pixel, of the rectangle surrounding the template.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.FindAnchor(System.Int32,System.IntPtr,GdPicture12.OMRMode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.DeleteAnchorTemplate(System.IntPtr)" />
      <returns>
 An Anchor Template Identifier to be used with the FindAnchor and the DeleteAnchorTemplate method.
 </returns>
      <remarks>
 This method is used in the "OMR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 A result of 0 means that the method failed. Use the GetStat() method to determine if this method failed.
 </remarks>
      <example>
        <code description="Creating an anchor of a document, finding it in another document, and then deleting the anchor." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 'Image to set the coordinates of the anchor on
 Dim MainForm As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("form.tif")
 Dim Template As IntPtr
 Dim NewLeft As Integer
 Dim NewTop As Integer
 Dim NewWidth As Integer
 Dim NewHeight As Integer
 Dim Accuracy As Double
 'We know that the logo of Main form exists at the coordinates (20, 25,55, 75) and we will choose it to be our anchor
 Template = oGdPictureImaging.CreateAnchorTemplate(MainForm, 20, 25, 35, 50)
 'Image to search for Anchor in
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 oGdPictureImaging.FindAnchor(ImageID, Template, OMRMode.FavorSpeed, 10, 15, 70, 100, NewLeft, NewTop, NewWidth, NewHeight, Accuracy)
 If Accuracy &gt; 75 Then
    'Anchor has been found, you can do your processing here
 End If
 oGdPictureImaging.DeleteAnchorTemplate(Template)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DeleteAnchorTemplate(System.IntPtr)">
      <summary>
 Releases from the memory an Anchor Template previously created by the CreateAnchorTemplate
 method.
 </summary>
      <param name="AnchorTemplateID">The Anchor template identifier.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FindAnchor(System.Int32,System.IntPtr,GdPicture12.OMRMode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)" />
      <example>
        <code description="Creating an anchor of a document, finding it in another document, and then deleting the anchor." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 'Image to set the coordinates of the anchor on
 Dim MainForm As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("main.tif")
 Dim Template As IntPtr
 Dim NewLeft As Integer
 Dim NewTop As Integer
 Dim NewWidth As Integer
 Dim NewHeight As Integer
 Dim Accuracy As Double
 'We know that the logo of Main form exists at the coordinates (20, 25,55, 75) and we will choose it to be our anchor
 Template = oGdPictureImaging.CreateAnchorTemplate(MainForm, 20, 25, 35, 50)
 'Image to search for Anchor in
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 oGdPictureImaging.FindAnchor(ImageID, Template, OMRMode.FavorSpeed, 10, 15, 70, 100, NewLeft, NewTop, NewWidth, NewHeight, Accuracy)
 If Accuracy &gt; 75 Then
    'Anchor has been found, you can do your processing here
 End If
 oGdPictureImaging.DeleteAnchorTemplate(Template)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FindAnchor(System.Int32,System.IntPtr,GdPicture12.OMRMode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)">
      <summary>
 Tries to determine the position of a specific template on a region of interest of a GdPicture image.
 The sample application "OMR - Anchor" demonstrates clearly the usage of the Anchor Mechanism.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="AnchorTemplateID">An Anchor Template Identifier returned by the CreateAnchorTemplate
 method.</param>
      <param name="Mode">A member of the OMRMode enumeration. FavorSpeed is suggested since
 there is almost no accuracy difference between FavorSpeed and
 FavorQuality.</param>
      <param name="SearchLeft">The left position,, in pixel, (0-based), of the area to search the
 anchor template.</param>
      <param name="SearchTop">The top position,, in pixel, (0-based), of the area to search the
 anchor template.</param>
      <param name="SearchWidth">The width, in pixel, of the area to search the anchor template.</param>
      <param name="SearchHeight">The height, in pixel, of the area to search the anchor template.</param>
      <param name="PosLeft">Output parameter. Returns the left position,, in pixel, (0-based), of
 the detected anchor template.</param>
      <param name="PosTop">Output parameter. Returns the top position,, in pixel, (0-based), of
 the detected anchor template.</param>
      <param name="PosWidth">Output parameter. Returns the width, in pixel, of the detected
 anchor template.</param>
      <param name="PosHeight">Output parameter. Returns the height, in pixel, of the detected
 anchor template.</param>
      <param name="Accuracy">Output parameter. Accuracy in percentage [0 - 100].</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "OMR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <example>
        <code description="Creating an anchor of a document, finding it in another document, and then deleting the anchor." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 'Image to set the coordinates of the anchor on
 Dim MainForm As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("main.tif")
 Dim Template As IntPtr
 Dim NewLeft As Integer
 Dim NewTop As Integer
 Dim NewWidth As Integer
 Dim NewHeight As Integer
 Dim Accuracy As Double
 'We know that the logo of Main form exists at the coordinates (20, 25,55, 75) and we will choose it to be our anchor
 Template = oGdPictureImaging.CreateAnchorTemplate(MainForm, 20, 25, 35, 50)
 'Image to search for Anchor in
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 oGdPictureImaging.FindAnchor(ImageID, Template, OMRMode.FavorSpeed, 10, 15, 70, 100, NewLeft, NewTop, NewWidth, NewHeight, Accuracy)
 If Accuracy &gt; 75 Then
    'Anchor has been found, you can do your processing here
 End If
 oGdPictureImaging.DeleteAnchorTemplate(Template)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OMRDetectMarks(System.Int32,System.Drawing.Rectangle[],System.Int32)">
      <summary>
 Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not. This method is
 mainly used for Square and Perfectly Circular Fields. An OMR field can be a checkbox, a fill-in-area
 checkbox, areas on a multiple choice examination form, or any area where highlighting is required to
 indicate a certain choice.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Areas">Array of Rectangle. This parameter is used as a reference to the location
 of the OMR Fields. Where each Rectangle in the Areas, corresponds to a
 rectangle surrounding a single OMR field. For example, if 10 Rectangles
 exist in Areas, there will be 10 OMR Fields to be investigated whether they
 were checked (filled) or not.</param>
      <param name="AreasCount">Number of Rectangles sent to the method. Basically, the length of
 Areas().</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <returns>
 The method returns an Array of integers.
 If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
 the field was filled.
 The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
 Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
 rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
 array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
 </returns>
      <remarks>
        <para>
 All Rectangles sent to the method via array Areas can be of any size or location, as long as they:
 1. Surround the OMR Field completely.
 2. Do not intersect with borders of OMR field.
 3. Do not intersect with other objects in the document.
 </para>
        <para>
 Closer, more accurate selection of those rectangles will yield faster and more accurate results.
 </para>
        <para>
 If many documents are scanned of the same form, and the scanning position (due to translation) or quality is not
 guaranteed, the GdPicture Anchoring System can be used to specify the translation made to each document
 from the one where the user selected their Areas(surrounding rectangles). Then you can manually change the
 rectangle arrays to each document via the data provided.
 </para>
        <para>
 To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
 </para>
        <para>
 This method is used in the "OMR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Applying OMR with sensitivity and obtaining results of two OMR fields and then displays the results in consecutive MessageBox" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("OMRinput.png")
 Dim Rec(2) As Rectangle
 Rec(0) = New Rectangle(997, 242, 38, 33)
 Rec(1) = New Rectangle(762, 271, 53, 42)
 Dim Result() As Integer = oGdPictureImaging.OMRDetectMarks(ImageID, Rec, 2, True)
 MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OMRDetectMarks(System.Int32,System.Drawing.Rectangle[],System.Int32,System.Boolean)">
      <summary>
 Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not. This method is
 mainly used for Square and Perfectly Circular Fields. An OMR field can be a checkbox, a fill-in-area
 checkbox, areas on a multiple choice examination form, or any area where highlighting is required to
 indicate a certain choice.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Areas">Array of Rectangle. This parameter is used as a reference to the location
 of the OMR Fields. Where each Rectangle in the Areas, corresponds to a
 rectangle surrounding a single OMR field. For example, if 10 Rectangles
 exist in Areas, there will be 10 OMR Fields to be investigated whether they
 were checked (filled) or not.</param>
      <param name="AreasCount">Number of Rectangles sent to the method. Basically, the length of
 Areas().</param>
      <param name="HasCharacter">Whether the OMR field contains a character inside it or not.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <returns>
 The method returns an Array of integers.
 If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
 the field was filled.
 The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
 Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
 rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
 array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
 </returns>
      <remarks>
 All Rectangles sent to the method via array Areas can be of any size or location, as long as they:
 1. Surround the OMR Field completely.
 2. Do not intersect with borders of OMR field.
 3. Do not intersect with other objects in the document.
 <para>
 Closer, more accurate selection of those rectangles will yield faster and more accurate results.
 </para><para>
 If many documents are scanned of the same form, and the scanning position (due to translation) or quality is not
 guaranteed, the GdPicture Anchoring System can be used to specify the translation made to each document
 from the one where the user selected their Areas(surrounding rectangles). Then you can manually change the
 rectangle arrays to each document via the data provided.
 </para><para>
 To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
 </para><para>
 This method is used in the "OMR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para></remarks>
      <example>
        <code description="Applying OMR with sensitivity and obtaining results of two OMR fields and then displays the results in consecutive MessageBox" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("OMRinput.png")
 Dim Rec(2) As Rectangle
 Rec(0) = New Rectangle(997, 242, 38, 33)
 Rec(1) = New Rectangle(762, 271, 53, 42)
 Dim Result() As Integer = oGdPictureImaging.OMRDetectMarks(ImageID, Rec, 2, True)
 MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OMRDetectMarks(System.Int32,System.Drawing.Rectangle[],System.Int32,System.Double,System.Int32[])">
      <summary>
 Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not, with Sensitivity
 Control and Confidence Level returned. This method is mainly used for Square and Perfectly Circular
 Fields. An OMR field can be a checkbox, a fill-in-area checkbox, areas on a multiple choice
 examination form, or any area where highlighting is required to indicate a certain choice.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Areas">Array of Rectangle. This parameter is used as a reference to the location
 of the OMR Fields. Where each Rectangle in the Areas, corresponds to a
 rectangle surrounding a single OMR field. For example, if 10 Rectangles
 exist in Areas, there will be 10 OMR Fields to be investigated whether
 they were checked (filled) or not.</param>
      <param name="AreasCount">Number of Rectangles sent to the method. Basically, the length of
 Areas().</param>
      <param name="Sensitivity">How sensitive the method is to degree of filling of the OMR field in
 respect to the size of the field itself. Higher values will result in more
 tolerant results where semi filling of the field would yield positive
 results. Lower values will result in less tolerant results where maximum
 filling of the field only would yield positive results Sensitivity greatly
 affects the confidence value returned. Range from 0.0 to 1.0. If different
 values are entered, they will automatically be limited to this range.
 Default Value is 0.5.</param>
      <param name="Confidence">Reference to a 1-Dimensional array of Integers. Must be initialized and
 sent to method. After the method is called, the array elements would
 correspond to the confidence of the result returned by the method. For
 Examples, if Confidence[0] = 40, then the first OMR field result returned
 is 40% accurate. It is important to mark that Confidence is greatly
 affected by "Sensitivity". Confidence value is a mixture of how much the
 sensitivity standard was accomplished, how much was it exceeded or unmet.
 It also details the respect of the filling to the size of the border and
 the regularity of the border.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <returns>
 The method returns an Array of integers.
 If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
 the field was filled.
 The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
 Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
 rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
 array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
 </returns>
      <remarks>
        <para>
 All Rectangles sent to the method via array Areas can be of any size or location, as long as they:
 1. Surround the OMR Field completely.
 2. Do not intersect with borders of OMR field.
 3. Do not intersect with other objects in the document.
 </para>
        <para>
 Closer, more accurate selection of those rectangles will yield faster and more accurate results.
 </para>
        <para>
 "Sensitivity" affects the "Confidence" returned. Low Sensitivity would return high results of
 Confidence for empty fields, but low Confidence results for semi filled fields. High Sensitivity
 would return low results of Confidence for empty fields, but High Confidence results for semi filled
 fields. It is important to note that "Confidence" is the degree of confidence that sensitivity rules
 are met, and not the actual filling or not filling of the field. If sensitivity values do not
 correspond properly to the filling, the confidence would spell to the sensitivity value more than the
 actual filling or not filling of the field.
 </para>
        <para>
 If many documents are scanned of the same form, and the scanning orientation or quality is not guaranteed, the GdPicture Anchoring System can be used to
 specify the orientation of each document and the translation made to each document from the one where
 the user selected their Areas (surrounding rectangles). Then you can manually change the rectangle
 arrays to each document via the data provided.
 </para>
        <para>
 To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
 </para>
        <para>
 This method is used in the "OMR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Applying OMR with sensitivity and obtaining results of two OMR fields and their confidence and then displays the results and their confidence in consecutive MessageBox" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("OMRinput.png")
 Dim Confidence(2) As Integer
 Dim Rec(2) As Rectangle
 Rec(0) = New Rectangle(997, 242, 38, 33)
 Rec(1) = New Rectangle(762, 271, 53, 42)
 Dim Result() As Integer = oGdPictureImaging.OMRDetectMarks(ImageID, Rec, 2, 0.5, Confidence, True)
 MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Confidence(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Confidence(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OMRDetectMarks(System.Int32,System.Drawing.Rectangle[],System.Int32,System.Double,System.Int32[],System.Boolean)">
      <summary>
 Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not, with Sensitivity
 Control and Confidence Level returned. This method is mainly used for Square and Perfectly Circular
 Fields. An OMR field can be a checkbox, a fill-in-area checkbox, areas on a multiple choice
 examination form, or any area where highlighting is required to indicate a certain choice.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Areas">Array of Rectangle. This parameter is used as a reference to the location
 of the OMR Fields. Where each Rectangle in the Areas, corresponds to a
 rectangle surrounding a single OMR field. For example, if 10 Rectangles
 exist in Areas, there will be 10 OMR Fields to be investigated whether
 they were checked (filled) or not.</param>
      <param name="AreasCount">Number of Rectangles sent to the method. Basically, the length of
 Areas().</param>
      <param name="Sensitivity">How sensitive the method is to degree of filling of the OMR field in
 respect to the size of the field itself. Higher values will result in more
 tolerant results where semi filling of the field would yield positive
 results. Lower values will result in less tolerant results where maximum
 filling of the field only would yield positive results Sensitivity greatly
 affects the confidence value returned. Range from 0.0 to 1.0. If different
 values are entered, they will automatically be limited to this range.
 Default Value is 0.5.</param>
      <param name="Confidence">Reference to a 1-Dimensional array of Integers. Must be initialized and
 sent to method. After the method is called, the array elements would
 correspond to the confidence of the result returned by the method. For
 Examples, if Confidence[0] = 40, then the first OMR field result returned
 is 40% accurate. It is important to mark that Confidence is greatly
 affected by "Sensitivity". Confidence value is a mixture of how much the
 sensitivity standard was accomplished, how much was it exceeded or unmet.
 It also details the respect of the filling to the size of the border and
 the regularity of the border.</param>
      <param name="HasCharacter">Whether the OMR field contains a character inside it or not.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <returns>
 The method returns an Array of integers.
 If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
 the field was filled.
 The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
 Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
 rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
 array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
 </returns>
      <remarks>
        <para>
 All Rectangles sent to the method via array Areas can be of any size or location, as long as they:
 1. Surround the OMR Field completely.
 2. Do not intersect with borders of OMR field.
 3. Do not intersect with other objects in the document.
 </para>
        <para>
 Closer, more accurate selection of those rectangles will yield faster and more accurate results.
 </para>
        <para>
 "Sensitivity" affects the "Confidence" returned. Low Sensitivity would return high results of
 Confidence for empty fields, but low Confidence results for semi filled fields. High Sensitivity
 would return low results of Confidence for empty fields, but High Confidence results for semi filled
 fields. It is important to note that "Confidence" is the degree of confidence that sensitivity rules
 are met, and not the actual filling or not filling of the field. If sensitivity values do not
 correspond properly to the filling, the confidence would spell to the sensitivity value more than the
 actual filling or not filling of the field.
 </para>
        <para>
 If many documents are scanned of the same form, and the
 scanning orientation or quality is not guaranteed, the GdPicture Anchoring System can be used to
 specify the orientation of each document and the translation made to each document from the one where
 the user selected their Areas (surrounding rectangles). Then you can manually change the rectangle
 arrays to each document via the data provided.
 </para>
        <para>
 To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
 </para>
        <para>
 This method is used in the "OMR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Applying OMR with sensitivity and obtaining results of two OMR fields and their confidence and then displays the results and their confidence in consecutive MessageBox" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("OMRinput.png")
 Dim Confidence(2) As Integer
 Dim Rec(2) As Rectangle
 Rec(0) = New Rectangle(997, 242, 38, 33)
 Rec(1) = New Rectangle(762, 271, 53, 42)
 Dim Result() As Integer = oGdPictureImaging.OMRDetectMarks(ImageID, Rec, 2, 0.5, Confidence, True)
 MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Confidence(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Confidence(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OMRDetectOvalMarks(System.Int32,System.Drawing.Rectangle[],System.Int32)">
      <summary>
 Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not. This method is
 mainly used for Oval shaped Fields. An OMR field can be a checkbox, a fill-in-area checkbox, areas on
 a multiple choice examination form, or any area where highlighting is required to indicate a certain
 choice.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Areas">Array of Rectangle. This parameter is used as a reference to the location
 of the OMR Fields. Where each Rectangle in the Areas, corresponds to a
 rectangle surrounding a single OMR field. For example, if 10 Rectangles
 exist in Areas, there will be 10 OMR Fields to be investigated whether they
 were checked (filled) or not.</param>
      <param name="AreasCount">Number of Rectangles sent to the method. Basically, the length of
 Areas().</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <returns>
 The method returns an Array of integers.
 If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
 the field was filled.
 The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
 Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
 rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
 array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
 </returns>
      <remarks>
        <para>
 All Rectangles sent to the method via array Areas can be of any size or location, as long as they:
 1. Surround the OMR Field completely.
 2. Do not intersect with borders of OMR field.
 3. Do not intersect with other objects in the document.
 </para>
        <para>
 Closer, more accurate selection of those rectangles will yield faster and more accurate results.
 </para>
        <para>
 If many documents are scanned of the same form, and the scanning position (due to translation) or quality is not
 guaranteed, the GdPicture Anchoring System can be used to specify the translation made to each document
 from the one where the user selected their Areas(surrounding rectangles). Then you can manually change the
 rectangle arrays to each document via the data provided.
 </para>
        <para>
 To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
 </para>
        <para>
 This method is used in the "OMR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Applying OMR with sensitivity and obtaining results of two Oval OMR fields and then displays the results in consecutive MessageBox" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("OMRinput.png")
 Dim Result(2) As Integer
 Dim Rec(2) As Rectangle
 Rec(0) = New Rectangle(997, 242, 38, 33)
 Rec(1) = New Rectangle(762, 271, 53, 42)
 Result = oGdPictureImaging.OMRDetectOvalMarks(ImageID, Rec, 2, True)
 MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OMRDetectOvalMarks(System.Int32,System.Drawing.Rectangle[],System.Int32,System.Boolean)">
      <summary>
 Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not. This method is
 mainly used for Oval shaped Fields. An OMR field can be a checkbox, a fill-in-area checkbox, areas on
 a multiple choice examination form, or any area where highlighting is required to indicate a certain
 choice.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Areas">Array of Rectangle. This parameter is used as a reference to the location
 of the OMR Fields. Where each Rectangle in the Areas, corresponds to a
 rectangle surrounding a single OMR field. For example, if 10 Rectangles
 exist in Areas, there will be 10 OMR Fields to be investigated whether they
 were checked (filled) or not.</param>
      <param name="AreasCount">Number of Rectangles sent to the method. Basically, the length of
 Areas().</param>
      <param name="HasCharacter">Whether the OMR field contains a character inside it or not.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <returns>
 The method returns an Array of integers.
 If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
 the field was filled.
 The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
 Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
 rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
 array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
 </returns>
      <remarks>
        <para>
 All Rectangles sent to the method via array Areas can be of any size or location, as long as they:
 1. Surround the OMR Field completely.
 2. Do not intersect with borders of OMR field.
 3. Do not intersect with other objects in the document.
 </para>
        <para>
 Closer, more accurate selection of those rectangles will yield faster and more accurate results.
 </para>
        <para>
 If many documents are scanned of the same form, and the scanning position (due to translation) or quality is not
 guaranteed, the GdPicture Anchoring System can be used to specify the translation made to each document
 from the one where the user selected their Areas(surrounding rectangles). Then you can manually change the
 rectangle arrays to each document via the data provided.
 </para>
        <para>
 To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
 </para>
        <para>
 This method is used in the "OMR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Applying OMR with sensitivity and obtaining results of two Oval OMR fields and then displays the results in consecutive MessageBox" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("OMRinput.png")
 Dim Result(2) As Integer
 Dim Rec(2) As Rectangle
 Rec(0) = New Rectangle(997, 242, 38, 33)
 Rec(1) = New Rectangle(762, 271, 53, 42)
 Result = oGdPictureImaging.OMRDetectOvalMarks(ImageID, Rec, 2, True)
 MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OMRDetectOvalMarks(System.Int32,System.Drawing.Rectangle[],System.Int32,System.Double,System.Int32[])">
      <summary>
 Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not, with Sensitivity
 Control and Confidence Level returned. This method is mainly used for Oval shaped Fields. An OMR
 field can be a checkbox, a fill-in-area checkbox, areas on a multiple choice examination form, or any
 area where highlighting is required to indicate a certain choice.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Areas">Array of Rectangle. This parameter is used as a reference to the location
 of the OMR Fields. Where each Rectangle in the Areas, corresponds to a
 rectangle surrounding a single OMR field. For example, if 10 Rectangles
 exist in Areas, there will be 10 OMR Fields to be investigated whether
 they were checked (filled) or not.</param>
      <param name="AreasCount">Number of Rectangles sent to the method. Basically, the length of
 Areas().</param>
      <param name="Sensitivity">How sensitive the method is to degree of filling of the OMR field in
 respect to the size of the field itself. Higher values will result in more
 tolerant results where semi filling of the field would yield positive
 results. Lower values will result in less tolerant results where maximum
 filling of the field only would yield positive results Sensitivity greatly
 affects the confidence value returned. Range from 0.0 to 1.0. If different
 values are entered, they will automatically be limited to this range.
 Default Value is 0.5.</param>
      <param name="Confidence">Reference to a 1-Dimensional array of Integers. Must be initialized and
 sent to method. After the method is called, the array elements would
 correspond to the confidence of the result returned by the method. For
 Examples, if Confidence[0] = 40, then the first OMR field result returned
 is 40% accurate. It is important to mark that Confidence is greatly
 affected by "Sensitivity". Confidence value is a mixture of how much the
 sensitivity standard was accomplished, how much was it exceeded or unmet.
 It also details the respect of the filling to the size of the border and
 the regularity of the border.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <returns>
 The method returns an Array of integers.
 If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
 the field was filled.
 The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
 Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
 rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
 array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
 </returns>
      <remarks>
        <para>
 All Rectangles sent to the method via array Areas can be of any size or location, as long as they:
 1. Surround the OMR Field completely.
 2. Do not intersect with borders of OMR field.
 3. Do not intersect with other objects in the document.
 </para>
        <para>
 Closer, more accurate selection of those rectangles will yield faster and more accurate results.
 </para>
        <para>
 "Sensitivity" affects the "Confidence" returned. Low Sensitivity would return high results of
 Confidence for empty fields, but low Confidence results for semi filled fields. High Sensitivity
 would return low results of Confidence for empty fields, but High Confidence results for semi filled
 fields. It is important to note that "Confidence" is the degree of confidence that sensitivity rules
 are met, and not the actual filling or not filling of the field. If sensitivity values do not
 correspond properly to the filling, the confidence would spell to the sensitivity value more than the
 actual filling or not filling of the field.
 </para>
        <para>
 If many documents are scanned of the same form, and the scanning orientation or quality is not guaranteed, the GdPicture Anchoring System can be used to
 specify the orientation of each document and the translation made to each document from the one where
 the user selected their Areas (surrounding rectangles). Then you can manually change the rectangle
 arrays to each document via the data provided.
 </para>
        <para>
 To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
 </para>
        <para>
 This method is used in the "OMR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Applying OMR with sensitivity and obtaining results of two Oval OMR fields and their confidence and then displays the results and their confidence in consecutive MessageBox" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("OMRinput.png")
 Dim Result(2) As Integer
 Dim Confidence(2) As Integer
 Dim Rec(2) As Rectangle
 Rec(0) = New Rectangle(997, 242, 38, 33)
 Rec(1) = New Rectangle(762, 271, 53, 42)
 Result = oGdPictureImaging.OMRDetectOvalMarks(ImageID, Rec, 2, 0.5, Confidence, True)
 MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Confidence(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Confidence(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OMRDetectOvalMarks(System.Int32,System.Drawing.Rectangle[],System.Int32,System.Double,System.Int32[],System.Boolean)">
      <summary>
 Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not, with Sensitivity
 Control and Confidence Level returned. This method is mainly used for Oval shaped Fields. An OMR
 field can be a checkbox, a fill-in-area checkbox, areas on a multiple choice examination form, or any
 area where highlighting is required to indicate a certain choice.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Areas">Array of Rectangle. This parameter is used as a reference to the location
 of the OMR Fields. Where each Rectangle in the Areas, corresponds to a
 rectangle surrounding a single OMR field. For example, if 10 Rectangles
 exist in Areas, there will be 10 OMR Fields to be investigated whether
 they were checked (filled) or not.</param>
      <param name="AreasCount">Number of Rectangles sent to the method. Basically, the length of
 Areas().</param>
      <param name="Sensitivity">How sensitive the method is to degree of filling of the OMR field in
 respect to the size of the field itself. Higher values will result in more
 tolerant results where semi filling of the field would yield positive
 results. Lower values will result in less tolerant results where maximum
 filling of the field only would yield positive results Sensitivity greatly
 affects the confidence value returned. Range from 0.0 to 1.0. If different
 values are entered, they will automatically be limited to this range.
 Default Value is 0.5.</param>
      <param name="Confidence">Reference to a 1-Dimensional array of Integers. Must be initialized and
 sent to method. After the method is called, the array elements would
 correspond to the confidence of the result returned by the method. For
 Examples, if Confidence[0] = 40, then the first OMR field result returned
 is 40% accurate. It is important to mark that Confidence is greatly
 affected by "Sensitivity". Confidence value is a mixture of how much the
 sensitivity standard was accomplished, how much was it exceeded or unmet.
 It also details the respect of the filling to the size of the border and
 the regularity of the border.</param>
      <param name="HasCharacter">Whether the OMR field contains a character inside it or not.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <returns>
 The method returns an Array of integers.
 If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
 the field was filled.
 The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
 Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
 rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
 array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
 </returns>
      <remarks>
        <para>
 All Rectangles sent to the method via array Areas can be of any size or location, as long as they:
 1. Surround the OMR Field completely.
 2. Do not intersect with borders of OMR field.
 3. Do not intersect with other objects in the document.
 </para>
        <para>
 Closer, more accurate selection of those rectangles will yield faster and more accurate results.
 </para>
        <para>
 "Sensitivity" affects the "Confidence" returned. Low Sensitivity would return high results of
 Confidence for empty fields, but low Confidence results for semi filled fields. High Sensitivity
 would return low results of Confidence for empty fields, but High Confidence results for semi filled
 fields. It is important to note that "Confidence" is the degree of confidence that sensitivity rules
 are met, and not the actual filling or not filling of the field. If sensitivity values do not
 correspond properly to the filling, the confidence would spell to the sensitivity value more than the
 actual filling or not filling of the field.
 </para>
        <para>
 If many documents are scanned of the same form, and the scanning orientation or quality is not guaranteed, the GdPicture Anchoring System can be used to
 specify the orientation of each document and the translation made to each document from the one where
 the user selected their Areas (surrounding rectangles). Then you can manually change the rectangle
 arrays to each document via the data provided.
 </para>
        <para>
 To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
 </para>
        <para>
 This method is used in the "OMR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Applying OMR with sensitivity and obtaining results of two Oval OMR fields and their confidence and then displays the results and their confidence in consecutive MessageBox" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("OMRinput.png")
 Dim Result(2) As Integer
 Dim Confidence(2) As Integer
 Dim Rec(2) As Rectangle
 Rec(0) = New Rectangle(997, 242, 38, 33)
 Rec(1) = New Rectangle(762, 271, 53, 42)
 Result = oGdPictureImaging.OMRDetectOvalMarks(ImageID, Rec, 2, 0.5, Confidence, True)
 MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Confidence(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Confidence(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OMRDetectMarks(System.Int32,System.Int32[]@,System.Int32,System.Double,System.Int32[]@,System.Boolean)">
      <summary>
 Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not, with Sensitivity
 Control and Confidence Level returned. This method is mainly used for Square and Perfectly Circular
 Fields. An OMR field can be a checkbox, a fill-in-area checkbox, areas on a multiple choice
 examination form, or any area where highlighting is required to indicate a certain choice.
 This overload is for COM Interop purpose and takes an array of Integer for the Areas parameter.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Areas">Array of Integer. This parameter is used as a reference to the location
 of the OMR Fields. Where each quadruplet (left, top, width, height) corresponds to a
 rectangle surrounding a single OMR field. For example, if 40 entries
 exist in Areas, there will be 10 OMR Fields to be investigated whether
 they were checked (filled) or not.</param>
      <param name="AreasCount">Number of Rectangles sent to the method. Basically, the length of
 Areas().</param>
      <param name="Sensitivity">How sensitive the method is to degree of filling of the OMR field in
 respect to the size of the field itself. Higher values will result in more
 tolerant results where semi filling of the field would yield positive
 results. Lower values will result in less tolerant results where maximum
 filling of the field only would yield positive results Sensitivity greatly
 affects the confidence value returned. Range from 0.0 to 1.0. If different
 values are entered, they will automatically be limited to this range.
 Default Value is 0.5.</param>
      <param name="Confidence">Reference to a 1-Dimensional array of Integers. Must be initialized and
 sent to method. After the method is called, the array elements would
 correspond to the confidence of the result returned by the method. For
 Examples, if Confidence[0] = 40, then the first OMR field result returned
 is 40% accurate. It is important to mark that Confidence is greatly
 affected by "Sensitivity". Confidence value is a mixture of how much the
 sensitivity standard was accomplished, how much was it exceeded or unmet.
 It also details the respect of the filling to the size of the border and
 the regularity of the border.</param>
      <param name="HasCharacter">Whether the OMR field contains a character inside it or not.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <returns>
 The method returns an Array of integers.
 If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
 the field was filled.
 The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
 Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
 rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
 array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
 </returns>
      <remarks>
        <para>
 All Rectangles sent to the method via array Areas can be of any size or location, as long as they:
 1. Surround the OMR Field completely.
 2. Do not intersect with borders of OMR field.
 3. Do not intersect with other objects in the document.
 </para>
        <para>
 Closer, more accurate selection of those rectangles will yield faster and more accurate results.
 </para>
        <para>
 "Sensitivity" affects the "Confidence" returned. Low Sensitivity would return high results of
 Confidence for empty fields, but low Confidence results for semi filled fields. High Sensitivity
 would return low results of Confidence for empty fields, but High Confidence results for semi filled
 fields. It is important to note that "Confidence" is the degree of confidence that sensitivity rules
 are met, and not the actual filling or not filling of the field. If sensitivity values do not
 correspond properly to the filling, the confidence would spell to the sensitivity value more than the
 actual filling or not filling of the field.
 </para>
        <para>
 If many documents are scanned of the same form, and the
 scanning orientation or quality is not guaranteed, the GdPicture Anchoring System can be used to
 specify the orientation of each document and the translation made to each document from the one where
 the user selected their Areas (surrounding rectangles). Then you can manually change the rectangle
 arrays to each document via the data provided.
 </para>
        <para>
 To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
 </para>
        <para>
 This method is used in the "OMR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Applying OMR with sensitivity and obtaining results of two OMR fields and their confidence and then displays the results and their confidence in consecutive MessageBox" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("OMRinput.png")
 Dim Confidence(2) As Integer
 Dim Rec() As Integer = {997, 242, 38, 33, 762, 271, 53, 42}
 Dim Result() As Integer = oGdPictureImaging.OMRDetectMarks(ImageID, Rec, 2, 0.5, Confidence, True)
 MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Confidence(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Confidence(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OMRDetectOvalMarks(System.Int32,System.Int32[]@,System.Int32,System.Double,System.Int32[]@,System.Boolean)">
      <summary>
 Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not, with Sensitivity
 Control and Confidence Level returned. This method is mainly used for Oval shaped Fields. An OMR
 field can be a checkbox, a fill-in-area checkbox, areas on a multiple choice examination form, or any
 area where highlighting is required to indicate a certain choice.
 This overload is for COM Interop purpose and takes an array of Integer for the Areas parameter.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Areas">Array of Integer. This parameter is used as a reference to the location
 of the OMR Fields. Where each quadruplet (left, top, width, height) corresponds to a
 rectangle surrounding a single OMR field. For example, if 40 entries
 exist in Areas, there will be 10 OMR Fields to be investigated whether
 they were checked (filled) or not.</param>
      <param name="AreasCount">Number of Rectangles sent to the method. Basically, the length of
 Areas().</param>
      <param name="Sensitivity">How sensitive the method is to degree of filling of the OMR field in
 respect to the size of the field itself. Higher values will result in more
 tolerant results where semi filling of the field would yield positive
 results. Lower values will result in less tolerant results where maximum
 filling of the field only would yield positive results Sensitivity greatly
 affects the confidence value returned. Range from 0.0 to 1.0. If different
 values are entered, they will automatically be limited to this range.
 Default Value is 0.5.</param>
      <param name="Confidence">Reference to a 1-Dimensional array of Integers. Must be initialized and
 sent to method. After the method is called, the array elements would
 correspond to the confidence of the result returned by the method. For
 Examples, if Confidence[0] = 40, then the first OMR field result returned
 is 40% accurate. It is important to mark that Confidence is greatly
 affected by "Sensitivity". Confidence value is a mixture of how much the
 sensitivity standard was accomplished, how much was it exceeded or unmet.
 It also details the respect of the filling to the size of the border and
 the regularity of the border.</param>
      <param name="HasCharacter">Whether the OMR field contains a character inside it or not.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <returns>
 The method returns an Array of integers.
 If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
 the field was filled.
 The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
 Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
 rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
 array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
 </returns>
      <remarks>
        <para>
 All Rectangles sent to the method via array Areas can be of any size or location, as long as they:
 1. Surround the OMR Field completely.
 2. Do not intersect with borders of OMR field.
 3. Do not intersect with other objects in the document.
 </para>
        <para>
 Closer, more accurate selection of those rectangles will yield faster and more accurate results.
 </para>
        <para>
 "Sensitivity" affects the "Confidence" returned. Low Sensitivity would return high results of
 Confidence for empty fields, but low Confidence results for semi filled fields. High Sensitivity
 would return low results of Confidence for empty fields, but High Confidence results for semi filled
 fields. It is important to note that "Confidence" is the degree of confidence that sensitivity rules
 are met, and not the actual filling or not filling of the field. If sensitivity values do not
 correspond properly to the filling, the confidence would spell to the sensitivity value more than the
 actual filling or not filling of the field.
 </para>
        <para>
 If many documents are scanned of the same form, and the
 scanning orientation or quality is not guaranteed, the GdPicture Anchoring System can be used to
 specify the orientation of each document and the translation made to each document from the one where
 the user selected their Areas (surrounding rectangles). Then you can manually change the rectangle
 arrays to each document via the data provided.
 </para>
        <para>
 To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
 </para>
        <para>
 This method is used in the "OMR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Applying OMR with sensitivity and obtaining results of two OMR fields and their confidence and then displays the results and their confidence in consecutive MessageBox" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("OMRinput.png")
 Dim Result(2) As Integer
 Dim Confidence(2) As Integer
 Dim Rec() As Integer = {997, 242, 38, 33, 762, 271, 53, 42}
 Result = oGdPictureImaging.OMRDetectOvalMarks(ImageID, Rec, 2, 0.5, Confidence, True)
 MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Confidence(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 MessageBox.Show(Confidence(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetWidth(System.Int32)">
      <summary>
 Returns the width of a GdPicture image in pixels.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 Width in pixel.
 </returns>
      <example>
        <code description="Resizing the image to twice its size." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Width As Integer = oGdPictureImaging.GetWidth(ImageID)
    Dim Height As Integer = oGdPictureImaging.GetHeight(ImageID)
    oGdPictureImaging.Resize(ImageID, Width * 2, Height * 2, Drawing2D.InterpolationMode.Bicubic)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetHeight(System.Int32)">
      <summary>
 Returns the heightof a GdPicture image in pixels.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 Height in pixels.
 </returns>
      <example>
        <code description="Resizing the image to twice its size." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Width As Integer = oGdPictureImaging.GetWidth(ImageID)
    Dim Height As Integer = oGdPictureImaging.GetHeight(ImageID)
    oGdPictureImaging.Resize(ImageID, Width * 2, Height * 2, Drawing2D.InterpolationMode.Bicubic)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetHeightInches(System.Int32)">
      <summary>
 Returns the height of a GdPicture image in inches .
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 Height in inches.
 </returns>
      <example>
        <code description="Resizing the image to twice its size." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Width As Double = oGdPictureImaging.GetWidthInches(ImageID)
    Dim Height As Double = oGdPictureImaging.GetHeightInches(ImageID)
    Dim WidthPixels As Integer = CInt(Width * oGdPictureImaging.GetHorizontalResolution(ImageID))
    Dim HeightPixels As Integer = CInt(Height * oGdPictureImaging.GetVerticalResolution(ImageID))
    oGdPictureImaging.Resize(ImageID, WidthPixels * 2, HeightPixels * 2, Drawing2D.InterpolationMode.Bicubic)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetWidthInches(System.Int32)">
      <summary>
 Returns the width of a GdPicture image in inches.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 Width in inches.
 </returns>
      <example>
        <code description="Resizing the image to twice its size." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Width As Double = oGdPictureImaging.GetWidthInches(ImageID)
    Dim Height As Double = oGdPictureImaging.GetHeightInches(ImageID)
    Dim WidthPixels As Integer = CInt(Width * oGdPictureImaging.GetHorizontalResolution(ImageID))
    Dim HeightPixels As Integer = CInt(Height * oGdPictureImaging.GetVerticalResolution(ImageID))
    oGdPictureImaging.Resize(ImageID, WidthPixels * 2, HeightPixels * 2, Drawing2D.InterpolationMode.Bicubic)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetImageFormat(System.Int32)">
      <summary>
 Returns the format of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the DocumentFormat enumeration.
 </returns>
      <example>
        <code description="Retrieving the image's format." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim ImageFormat As DocumentFormat = oGdPictureImaging.GetImageFormat(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetPixelFormat(System.Int32)">
      <summary>
 Returns the pixel format of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the PixelFormat enumeration.
 </returns>
      <example>
        <code description="Retrieving the image's pixel format." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim ImagePixelFormat As PixelFormat = oGdPictureImaging.GetPixelFormat(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetImageColorSpace(System.Int32)">
      <summary>
 Returns the color space of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the ImageColorSpace enumeration.
 </returns>
      <example>
        <code description="Retrieving the image's color space." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim imageColorSpace As ImageColorSpace = oGdPictureImaging.GetImageColorSpace(ImageID)
    MessageBox.Show("Color Space: " + imageColorSpace.ToString())
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetBitDepth(System.Int32)">
      <summary>
 Returns the bit depth (Bits per Pixel) of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 Can be:
 1.  For 1 bit per pixel image.
 4.  For 4 bits per pixel image.
 8.  For 8 bits per pixel image.
 16. For 16 bits per pixel image.
 24. For 24 bits per pixel image.
 32. For 32 bits per pixel image.
 48. For 48 bits per pixel image.
 64. For 64 bits per pixel image.
 </returns>
      <example>
        <code description="Removing noise from a bitonal image, and checking that it is a 1 bit per pixel image with black and white palette." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) &lt;&gt; 1 Then
       oGdPictureImaging.ConvertTo1BppAT(ImageID)
    End If
    oGdPictureImaging.FxBitonalDespeckle(ImageID, False)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionCCITT4)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetTiffCompression(System.Int32)">
      <summary>
 Returns the compression scheme of a GdPicture image (TIFF format only).
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the TiffCompression enumeration
 </returns>
      <example>
        <code description="Retrieving the image's TiffCompression." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) = 1 Then
       Dim ImgTiffCompression As TiffCompression = oGdPictureImaging.GetTiffCompression(ImageID)
       oGdPictureImaging.FxBitonalDespeckle(ImageID, False)
       oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", ImgTiffCompression)
       oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    Else
       MessageBox.Show("Error: This image is not 1 bit per pixel!")
    End If
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IsPixelFormatIndexed(System.Int32)">
      <summary>
 Asks if the pixel format of a GdPicture image is indexed.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 True if the pixel format is indexed else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.IsPixelFormatHasAlpha(System.Int32)" />
      <example>
        <code description="Determining whether an image has an indexed pixel format, and if so, converts it to a 24 bit rgb image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim IndexedPixelFormat As Boolean
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 IndexedPixelFormat = oGdPictureImaging.IsPixelFormatIndexed(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IsPixelFormatHasAlpha(System.Int32)">
      <summary>
 Returns if the pixel format of a GdPicture image has an alpha component.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 True if the pixel format is indexed else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.IsPixelFormatIndexed(System.Int32)" />
      <example>
        <code description="Determining whether an image has an Alpha Channel." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim HasAlphaChannel As Boolean
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 HasAlphaChannel = oGdPictureImaging.IsPixelFormatHasAlpha(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetHorizontalResolution(System.Int32)">
      <summary>
 Gets the horizontal resolution of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 Horizontal resolution in Dot Per Inch (DPI).
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetVerticalResolution(System.Int32)" />
      <example>
        <code description="Retrieving the image's horizontal resolution." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim HRes As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 HRes = oGdPictureImaging.GetHorizontalResolution(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetVerticalResolution(System.Int32)">
      <summary>
 Gets the vertical resolution of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 Vertical resolution in Dot Per Inch (DPI).
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetHorizontalResolution(System.Int32)" />
      <example>
        <code description="Retrieving the image's vertical resolution." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim VRes As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 VRes = oGdPictureImaging.GetVerticalResolution(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetHorizontalResolution(System.Int32,System.Single)">
      <summary>
 Changes the horizontal resolution of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="HorizontalResolution">The new horizontal resolution in Dot Per Inch (DPI).</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetVerticalResolution(System.Int32,System.Single)" />
      <example>
        <code description="Setting the image's horizontal resolution." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim HRes As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 HRes = 200
 oGdPictureImaging.SetHorizontalResolution(ImageID, HRes)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetVerticalResolution(System.Int32,System.Single)">
      <summary>
 Changes the vertical resolution of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="VerticalResolution">The new vertical resolution in Dot Per Inch (DPI).</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetHorizontalResolution(System.Int32,System.Single)" />
      <example>
        <code description="Setting the image's vertical resolution." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim VRes As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 VRes = 200
 oGdPictureImaging.SetVerticalResolution(ImageID, VRes)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.HistogramGetRed(System.Int32,System.Int32[]@)">
      <summary>
 Computes the red channel histogram of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">Output parameter. Array of 256 entries containing the red channel
 histogram data.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Finding out the most used red channel value in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim arHistoR(255) As Integer
    oGdPictureImaging.HistogramGetRed(ImageID, arHistoR)
    Dim Max As Integer = -1
    For i As Integer = 0 To 255
       If Max &lt; arHistoR(i) Then
          Max = arHistoR(i)
       End If
    Next
    MessageBox.Show("The most frequent red value in the image is: " + Max.ToString())
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.HistogramGetGreen(System.Int32,System.Int32[]@)">
      <summary>
 Computes the green channel histogram of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">Output parameter. Array of 256 entries containing the green channel
 histogram data.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Finding out the most used green channel value in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim arHistoG(255) As Integer
    oGdPictureImaging.HistogramGetGreen(ImageID, arHistoG)
    Dim Max As Integer = -1
    For i As Integer = 0 To 255
       If Max &lt; arHistoG(i) Then
          Max = arHistoG(i)
       End If
    Next
    MessageBox.Show("The most frequent green value in the image is: " + Max.ToString())
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.HistogramGetBlue(System.Int32,System.Int32[]@)">
      <summary>
 Computes the blue channel histogram of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">Output parameter. Array of 256 entries containing the blue channel
 histogram data.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Finding out the most used blue channel value in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim arHistoB(255) As Integer
    oGdPictureImaging.HistogramGetBlue(ImageID, arHistoB)
    Dim Max As Integer = -1
    For i As Integer = 0 To 255
       If Max &lt; arHistoB(i) Then
          Max = arHistoB(i)
       End If
    Next
    MessageBox.Show("The most frequent blue value in the image is: " + Max.ToString())
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.HistogramGetAlpha(System.Int32,System.Int32[]@)">
      <summary>
 Computes the alpha channel histogram of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">Output parameter. Array of 256 entries containing the alpha channel
 histogram data.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Finding out the most used alpha channel value in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim arHistoA(255) As Integer
    oGdPictureImaging.HistogramGetAlpha(ImageID, arHistoA)
    Dim Max As Integer = -1
    For i As Integer = 0 To 255
       If Max &lt; arHistoA(i) Then
          Max = arHistoA(i)
       End If
    Next
    MessageBox.Show("The most frequent alpha value in the image is: " + Max.ToString())
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.HistogramGetARGB(System.Int32,System.Int32[]@,System.Int32[]@,System.Int32[]@,System.Int32[]@)">
      <summary>
 Computes in one call, alpha, red, green and blue channel histograms of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="HistoA">Output parameter. Array of 256 entries containing the alpha channel histogram
 data.</param>
      <param name="HistoR">Output parameter. Array of 256 entries containing the red channel histogram
 data.</param>
      <param name="HistoG">Output parameter. Array of 256 entries containing the green channel histogram
 data.</param>
      <param name="HistoB">Output parameter. Array of 256 entries containing the blue channel histogram
 data.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Finding out the most used value of each color in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim arHistoA(255) As Integer
    Dim arHistoR(255) As Integer
    Dim arHistoG(255) As Integer
    Dim arHistoB(255) As Integer
    Dim MaxR As Integer = -1
    Dim MaxG As Integer = -1
    Dim MaxB As Integer = -1
    Dim MaxA As Integer = -1
    oGdPictureImaging.HistogramGetARGB(ImageID, arHistoA, arHistoR, arHistoG, arHistoB)
    For i As Integer = 0 To 255
       If MaxA &lt; arHistoA(i) Then
          MaxA = arHistoA(i)
       End If
       If MaxR &lt; arHistoR(i) Then
          MaxR = arHistoR(i)
       End If
       If MaxG &lt; arHistoG(i) Then
          MaxG = arHistoG(i)
       End If
       If MaxB &lt; arHistoB(i) Then
          MaxB = arHistoB(i)
       End If
    Next
    MessageBox.Show("The most frequent alpha value in the image is: " + MaxA.ToString())
    MessageBox.Show("The most frequent red value in the image is: " + MaxR.ToString())
    MessageBox.Show("The most frequent green value in the image is: " + MaxG.ToString())
    MessageBox.Show("The most frequent blue value in the image is: " + MaxB.ToString())
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.HistogramGet8Bpp(System.Int32,System.Int32[]@)">
      <summary>
 Computes the colors histogram of a 8bpp indexed GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">Output parameter. Array of 256 entries containing the histogram data.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method works only with 8bpp image.
 </remarks>
      <example>
        <code description="Finding out the most frequent color value in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) &lt;&gt; 8 Then
       oGdPictureImaging.ConvertTo8BppGrayScale(ImageID)
    End If
    Dim arHisto(0 to 255) As Integer
    oGdPictureImaging.HistogramGet8Bpp(ImageID, arHisto)
    Dim Max As Integer = -1
    For i As Integer = 0 To 255
       If Max &lt; arHisto(i) Then
          Max = arHisto(i)
       End If
    Next
    MessageBox.Show("The most frequent value in the image is: " + Max.ToString())
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalRemoveIsolatedDots8(System.Int32)">
      <summary>
 Removes 1 pixel-sized isolated black dots in the 8 directions: E, NE, SE, S, SW, W, NW, N in a
 GdPicture image or in an area of a GdPicture image defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalRemoveIsolatedDots4(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalRemoveIsolatedDots2x2(System.Int32)" />
      <example>
        <code description="Using RemoveIsolatedDots8 to Remove Isolated dots with 1 pixels in size with 8 directions in a binary image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBitonalRemoveIsolatedDots8(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalRemoveIsolatedDots4(System.Int32)">
      <summary>
 Removes 1 pixel-sized isolated black dots the 4 directions: N, S, W, E in a GdPicture image or in an
 area of a GdPicture image defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalRemoveIsolatedDots8(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalRemoveIsolatedDots2x2(System.Int32)" />
      <example>
        <code description="Using RemoveIsolatedDots4 to Remove Isolated dots with 1 pixels in size in 4 directions in a binary image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBitonalRemoveIsolatedDots4(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalRemoveIsolatedDots2x2(System.Int32)">
      <summary>
 Removes 4 pixels-sized isolated black dots in the 8 directions: E, NE, SE, S, SW, W, NW, N in a
 GdPicture image or in an area of a GdPicture image defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalRemoveIsolatedDots8(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalRemoveIsolatedDots4(System.Int32)" />
      <example>
        <code description="Using RemoveIsolatedDots2x2 to Remove Isolated dots with 4 pixels in size using 8 directions in a binary image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBitonalRemoveIsolatedDots2x2(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalFillHolesV(System.Int32)">
      <summary>
 Fills the 1 pixel size holes in the vertical direction in a GdPicture image or in an area of a
 GdPicture image defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalFillHolesH(System.Int32)" />
      <example>
        <code description="Using FillHolesV on a binary image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.FxBitonalFillHolesV(ImageID)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalFillHolesHV(System.Int32)">
      <summary>
 Fills the 1 pixel size holes in the vertical and horizontal directions in a GdPicture image or in an
 area of a GdPicture image defined by SetROI() method. This methods is equivalent of 2 successive
 call of FxBitonalFillHolesV() and FxBitonalFillHolesH()
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalFillHolesH(System.Int32)" />
      <example>
        <code description="Using FillHolesV on a binary image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.FxBitonalFillHolesHV(ImageID)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalFillHolesH(System.Int32)">
      <summary>
 Fills the 1 pixel size holes in the horizontal direction in a GdPicture image or in an area of a
 GdPicture image defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Barcode Recognition" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalFillHolesV(System.Int32)" />
      <example>
        <code description="Using FillHolesH on a binary image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.FxBitonalFillHolesG(ImageID)
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalDilateH(System.Int32)">
      <summary>
 Dilates black pixels in a GdPicture image or in an area of a GdPicture image defined by SetROI()
 method.
 This filter helps to dilate black pixels in the 2 directions: W, E. The actions of this filter are
 less prominent than FxDilate4.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDilateV(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDilate4(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDilate8(System.Int32)" />
      <example>
        <code description="Using DilateH on a binary image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBitonalDilateH(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalDilateV(System.Int32)">
      <summary>
 Dilates black pixels in a GdPicture image or in an area of a GdPicture image defined by SetROI()
 method.
 This filter helps to dilate black pixels in the 2 directions: N, S. The actions of this filter are
 less prominent than FxDilate4.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDilateH(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDilate4(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDilate8(System.Int32)" />
      <example>
        <code description="Using DilateV on a binary image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBitonalDilateV(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalDilate4(System.Int32)">
      <summary>
 Dilates black pixels in a GdPicture image or in an area of a GdPicture image defined by SetROI()
 method.
 This filter helps to dilate black pixels in the 4 directions: N, S, W, E. The actions of this filter
 are less prominent than FxDilate8.
 It can be used used to improve very fine and degraded characters.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" and "Barcode Recognition"Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDilateH(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDilateV(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDilate8(System.Int32)" />
      <example>
        <code description="Using Dilate4 on a binary image to dilate black pixels and erode black ones." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBitonalDilate4(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalDilate8(System.Int32)">
      <summary>
 Dilates black pixels in a GdPicture image or in an area of a GdPicture image defined by SetROI()
 method.
 This filter helps to dilate black pixels in the 8 directions: E, NE, SE, S, SW, W, NW, N. The actions
 of this filter are more prominent than FxDilate4.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDilateH(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDilateV(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDilate4(System.Int32)" />
      <example>
        <code description="Using Dilate8 on a binary image in order to dilate black pixels and erode black ones." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBitonalDilate8(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalErodeH(System.Int32)">
      <summary>
 Erodes black pixels in a GdPicture image or in an area of a GdPicture image defined by SetROI()
 method.
 This filter retains the black pixels surrounded in the two cardinal directions: W, E.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErodeV(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErode4(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErode8(System.Int32)" />
      <example>
        <code description="Using BitonalErodeH on a binary image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBitonalErodeH(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalErodeV(System.Int32)">
      <summary>
 Erodes black pixels in a GdPicture image or in an area of a GdPicture image defined by SetROI()
 method.
 This filter retains the black pixels surrounded in the two cardinal directions: N, S. The actions of this filter are
 less prominent than FxBitonalErode4.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErodeH(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErode4(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErode8(System.Int32)" />
      <example>
        <code description="Using BitonalErodeV on a binary image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBitonalErodeV(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalErode4(System.Int32)">
      <summary>
 Erodes black pixels in a GdPicture image or in an area of a GdPicture image defined by SetROI()
 method.
 This filter retains the black pixels surrounded in the four cardinal directions: N, S, W, E.
 Very useful when the characters are bold and very close to each other.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" and "Barcode Recognition"Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErodeH(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErodeV(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErode8(System.Int32)" />
      <example>
        <code description="Using Erode4 on a binary image to erode black pixels and dilate black ones." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBitonalErode4(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalErode8(System.Int32)">
      <summary>
 Erodes black pixels in a GdPicture image or in an area of a GdPicture image defined by SetROI()
 method.
 This filter retains the black pixels surrounded in the 8 directions: E, NE, SE, S, SW, W, NW, N.
 The actions of this filter are more prominent than FxBitonalErode4.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErodeH(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErodeV(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErode4(System.Int32)" />
      <example>
        <code description="Using Erode8 on a binary image to erode black pixels and dilate black ones." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBitonalErode8(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalOpen8(System.Int32)">
      <summary>
 Performs a morphological open operation a GdPicture image or in an area of a GdPicture image defined by SetROI()
 method.
 An open morphological operation is an erosion operation followed a dilation operation.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErode4(System.Int32)" />
      <example>
        <code description="Using FxBitonalOpen8 on a binary image ." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBitonalOpen8(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalClose8(System.Int32)">
      <summary>
 Performs a morphological close operation a GdPicture image or in an area of a GdPicture image defined by SetROI()
 method.
 An open morphological operation is a dilation operation followed an erosion operation.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErode4(System.Int32)" />
      <example>
        <code description="Using FxBitonalClose8 on a binary image ." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBitonalClose8(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalErode(System.Int32,System.Int32)">
      <summary>
 Erodes black pixels in a GdPicture image or in an area of a GdPicture image defined by SetROI()
 method.
 This filter retains the black pixels surrounded in the 8 directions: E, NE, SE, S, SW, W, NW, N with an amount if pixels in each direction is specified by the user.
 Very useful when the characters are bold and very close to each other.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="KernelSize">This parameter is not used yet.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErodeH(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErodeV(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErode4(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalErode8(System.Int32)" />
      <example>
        <code description="Using Erode on a binary image to erode black pixels and dilate black ones." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBitonalErode(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FxBitonalDilate(System.Int32,System.Int32)">
      <summary>
 Dilates black pixels in a GdPicture image or in an area of a GdPicture image defined by SetROI()
 method.
 This filter helps dilates black pixels surrounded in the 8 directions: E, NE, SE, S, SW, W, NW, N with an amount if pixels specified by the user.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="KernelSize">This parameter is not used yet.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDilateH(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDilateV(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDilate4(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.FxBitonalDilate8(System.Int32)" />
      <example>
        <code description="Using Dilate on a binary image to dilate black pixels and erode black ones." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.FxBitonalDilate(ImageID, 5)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TransformJPEG(System.String,System.String,GdPicture12.JPEGTransformation)">
      <summary>
 Applies transformation to a JPEG image without loss of information.
 When a JPEG image is compressed, some of the information in the image is lost.
 If you open a JPEG file, modify the image, and save it to another JPEG file, the quality will
 decrease.
 This method allows to opening / modifying / saving JPEG images, without loss of information.
 </summary>
      <param name="InputFile">The path of the image to transform.</param>
      <param name="OutputFile">The path of the transformed image.</param>
      <param name="Transformation">The JPEG transformation to apply. A member of the JPEGTransformation enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 The image's width and height have to be divisible by 16, otherwise, and Invalid Parameter will be returned.
 </remarks>
      <example>
        <code description="Rotating the JPEG file 180 degress without loss of information." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 If oGdPictureImaging.TransformJPEG("input.jpg", "output.jpg", JPEGTransformation.JPEGTransformationRotate180) &lt;&gt; GdPictureStatus.OK Then
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.JPEGLosslessCrop(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Performs a lossless crop on a JPEG image.
 </summary>
      <param name="SrcFile">The source JPEG image.</param>
      <param name="DstFile">The destination JPEG image.</param>
      <param name="Left">The left position, in pixel, of the area to crop.</param>
      <param name="Top">The top position, in pixel, of the area to crop.</param>
      <param name="Width">The width, in pixel, of the area to crop.</param>
      <param name="Height">The height, in pixel, of the area to crop.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Cropping the JPEG file without loss of information." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 If oGdPictureImaging.JPEGLosslessCrop("input.jpg", "output.jpg", 0, 50, 150, 120) &lt;&gt; GdPictureStatus.OK Then
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TagGetXMLPacket(System.Int32)">
      <summary>
 Returns the XML Packet tag (code 700 (hex 0x02BC)) of a GdPicture Image as string.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 The XML tag content.
 </returns>
      <example>
        <code description="Getting XML tag content." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim XMLContent As String
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 XMLContent = oGdPictureImaging.TagGetXMLPacket(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TagSetXMLPacket(System.Int32,System.String)">
      <summary>
 Writes the XML Packet tag (code 700 (hex 0x02BC)) of a GdPicture Image as string.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="XMLPacket">The XML packet tag value as string.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TagSetXMLPacket(System.Int32,System.Byte[])">
      <summary>
 Writes the XML Packet tag (code 700 (hex 0x02BC)) of a GdPicture Image as byte.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="XMLPacket">The XML packet tag value as byte array.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TagsSetPreserve(System.Boolean)">
      <summary>
 Asks to the component to preserve or not the tags when a GdPicture image is edited.
 </summary>
      <param name="Preserve">True to preserve tags else False.</param>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TagCount(System.Int32)">
      <summary>
 Returns the number of tags attached to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 The number of tags attached to a GdPicture image.
 </returns>
      <example>
        <code description="Removing the exif tag UerComment of an image, if exists." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.jpg")
 Dim tagsCount As Integer = oGdPictureImaging.TagCount(ImageID)
 For i As Integer = 1 To tagsCount
    If oGdPictureImaging.TagGetID(ImageID, i) = Tags.TagExifUserComment Then
       oGdPictureImaging.TagDelete(ImageID, i)
       Exit For
    End If
 Next
 oGdPictureImaging.SaveAsJPEG(ImageID, "output.jpg", 90)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TagGetExifRotation(System.Int32)">
      <summary>
 Returns the kind of rotation, if any, defined by the exif orientation tag.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>A member of the GdPictureRotateFlipType enumeration.</returns>
      <remarks>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
        <para>
 GdPictureRotateFlipType.GdPictureRotateNoneFlipNone is returned in case of no orientation tag found on the specified GdPicture image.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IPTCCount(System.Int32)">
      <summary>
 Returns the number of IPTC tag attached to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 Number of IPTC tag.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TagDelete(System.Int32,System.Int32)">
      <summary>
 Deletes a tag attached to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TagNo">Must be a value between 1 and the number of  tags attached to a
 GdPicture image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TagCount(System.Int32)" />
      <example>
        <code description="Removing the exif tag UerComment of an image, if exists." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.jpg")
 Dim tagsCount As Integer = oGdPictureImaging.TagCount(ImageID)
 For i As Integer = 1 To tagsCount
    If oGdPictureImaging.TagGetID(ImageID, i) = Tags.TagExifUserComment Then
       oGdPictureImaging.TagDelete(ImageID, i)
       Exit For
    End If
 Next
 oGdPictureImaging.SaveAsJPEG(ImageID, "output.jpg", 90)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TagDeleteAll(System.Int32)">
      <summary>
 Deletes all tags attached to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.TagCount(System.Int32)" />
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Deleting all tag  attached to an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.TagDeleteAll(ImageID)
 oGdPictureImaging.SaveAsJpeg(ImageID, "output.jpg")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TagGetID(System.Int32,System.Int32)">
      <summary>
 Returns a tag ID attached to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TagNo">Must be a value between 1 and the number of  tags attached to a
 GdPicture image.</param>
      <returns>
 A member of the Tags enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TagCount(System.Int32)" />
      <example>
        <code description="Removing the exif tag UerComment of an image, if exists." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.jpg")
 Dim tagsCount As Integer = oGdPictureImaging.TagCount(ImageID)
 For i As Integer = 1 To tagsCount
    If oGdPictureImaging.TagGetID(ImageID, i) = Tags.TagExifUserComment Then
       oGdPictureImaging.TagDelete(ImageID, i)
       Exit For
    End If
 Next
 oGdPictureImaging.SaveAsJPEG(ImageID, "output.jpg", 90)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IPTCGetID(System.Int32,System.Int32)">
      <summary>
 Returns an IPTC tag ID attached to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TagNo">Must be a value between 1 and the number of IPTC TAGs attached to a
 GdPicture image.</param>
      <returns>
 The IPTC tag ID. A member of the IPTCTags enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.IPTCCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IPTCGetLength(System.Int32,System.Int32)">
      <summary>
 Returns the length in bytes of an IPTC tag attached to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TagNo">Must be a value between 1 and the number of IPTC TAGs attached to a
 GdPicture image.</param>
      <returns>
 The length of the tag.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.IPTCCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TagGetLength(System.Int32,System.Int32)">
      <summary>
 Returns the length in bytes of a tag attached to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TagNo">Must be a value between 1 and the number of  tags attached to a
 GdPicture image.</param>
      <returns>
 The length of the tag.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TagCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TagGetName(System.Int32,System.Int32)">
      <summary>
 Returns as string a tag name attached to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TagNo">Must be a value between 1 and the number of  tags attached to a
 GdPicture image.</param>
      <returns>
 The name of the tag.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TagCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TagGetType(System.Int32,System.Int32)">
      <summary>
 Returns the type of a tag attached to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TagNo">Must be a value between 1 and the number of  tags attached to a
 GdPicture image.</param>
      <returns>
 A member of the TagType enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TagCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IPTCGetType(System.Int32,System.Int32)">
      <summary>
 Returns the type of an IPTC tag attached to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TagNo">Must be a value between 1 and the number of IPTC TAGs attached to a
 GdPicture image.</param>
      <returns>
 A member of the TagType enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.IPTCCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TagGetValueString(System.Int32,System.Int32)">
      <summary>
 Returns as string, the value of a tag attached to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TagNo">Must be a value between 1 and the number of  tags attached to a
 GdPicture image.</param>
      <returns>
 The value of the tag.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TagCount(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TagSetValueString(System.Int32,GdPicture12.Tags,GdPicture12.TagType,System.String)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IPTCGetValueString(System.Int32,System.Int32)">
      <summary>
 Returns as string, the value of an IPTC tag attached to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TagNo">Must be a value between 1 and the number of IPTC TAGs attached to a
 GdPicture image.</param>
      <returns>
 The value of the tag.
 </returns>
      <remarks>IPTC tags reading is supported in TIFF and JPEG formats.</remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.IPTCCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IPTCSetValueString(System.Int32,GdPicture12.IPTCTags,System.String)">
      <summary>
 Writes an IPTC tag from data stored within formatted string.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="IPTCTagID">A member of the IPTCTags enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>IPTC tags writing is supported in TIFF and JPEG formats.</remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.IPTCGetValueString(System.Int32,System.Int32)" />
      <example>
        <code description="" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 ' Write IPTC writer tag
 oGdPictureImaging.IPTCSetValueString(ImageID,IPTCTags.IPTCTagWriter, "GdPicture.NET SDK")
 oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IPTCDeleteAll(System.Int32)">
      <summary>
 Deletes all IPTC tags attached to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.TagCount(System.Int32)" />
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Deleting all IPTC tags attached to an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.IPTCDeleteAll(ImageID)
 oGdPictureImaging.SaveAsJpeg(ImageID, "output.jpg")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IPTCDelete(System.Int32,System.Int32)">
      <summary>
 Deletes an IPTC tag attached to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TagNo">Must be a value between 1 and the number of IPTC tags attached to a
 GdPicture image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.IPTCCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TagGetValueBytes(System.Int32,System.Int32,System.Byte[]@)">
      <summary>
 Returns as bytes, the value of a tag attached to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TagNo">Must be a value between 1 and the number of  tags attached to a
 GdPicture image.</param>
      <param name="Data">Output parameter. Array where the tag value data will be stored.</param>
      <returns>
 The length of the Data array.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TagCount(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TagSetValueBytes(System.Int32,GdPicture12.Tags,GdPicture12.TagType,System.Byte[])" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IPTCGetValueBytes(System.Int32,System.Int32,System.Byte[]@)">
      <summary>
 Returns as bytes, the value of an IPTC tag attached to a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TagNo">Must be a value between 1 and the number of IPTC TAGs attached to a
 GdPicture image.</param>
      <param name="Data">Output parameter. Array where the tag value data will be stored.</param>
      <returns>
 The length of the Data array.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.IPTCCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TagSetValueBytes(System.Int32,GdPicture12.Tags,GdPicture12.TagType,System.Byte[])">
      <summary>
 Writes a tag from data stored within an array of bytes.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TagID">A member of the Tags enumeration.</param>
      <param name="TagType">Type of the tag to write. A member of the TagType enumeration.You
 can check the exif specifications to use the good type of tag.The
 EXIF specifications can be found at: http://www.exif.org.</param>
      <param name="Data">Array where the tag value data is stored.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TagGetValueBytes(System.Int32,System.Int32,System.Byte[]@)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TagSetValueString(System.Int32,GdPicture12.Tags,GdPicture12.TagType,System.String)">
      <summary>
 Writes a tag from data stored within formatted string.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TagID">A member of the Tags enumeration.</param>
      <param name="TagType">Type of the tag to write. A member of the TagType enumeration.You
 can check the exif specifications to use the good type of tag.The
 EXIF specifications can be found at: http://www.exif.org.</param>
      <param name="TagData">The formatted tag value.Notes for BYTE tags:BYTE
 tags will have this mask: "#,#,...,#".[#] : A component
 as unsigned 8-bit integer with a value between 0 and 255.[,] :
 A component delimiter.Notes for SHORT
 tags:SHORT tags will have this mask: "#,#,...,#".[#]
 : A component as unsigned 16-bit integer with a value between 0 and 65535.[,]
 : A component delimiter.Notes for
 Integer tags:Integer tags will have this mask: "#,#,...,#".[#]
 : A component as unsigned 32-bit integer with a value between 0 and
 4294967295.[,] : A component delimiter.Notes
 for SInteger tags:SInteger tags will have this mask: "#,#,...,#".[#]
 : A component as signed 32-bit integer with a value between -2147483648 and
 2147483647.[,] : A component delimiter.Notes
 for RATIONAL tags:RATIONAL tags will have this mask: "#/#,#/#,...,#/#".[#/#]
 : A component will consist of two unsigned 32-bit integers denoting the
 enumerator and denominator. Each integer will have a value between 0 and
 4294967295.[,] : A component delimiter.Notes
 for SRATIONAL tags:RATIONAL tags will have this mask: "#/#,#/#,...,#/#".[#/#]
 : A component will consist of two signed 32-bit integers denoting the
 enumerator and denominator. Each integer will have a value between -2147483648
 and 2147483647.[,] : A component delimiter.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TagGetValueString(System.Int32,System.Int32)" />
      <example>
        <code description="" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 ' Write SoftwareUsed tag
 oGdPictureImaging.TagSetValueString(ImageID, Tags.TagSoftwareUsed, TagType.TagTypeASCII, "mysoftware Vers. 1.2")
 ' Write Artist tag
 oGdPictureImaging.TagSetValueString(ImageID, Tags.TagArtist, TagType.TagTypeASCII, "MyCompany GmbH")
 ' Writes X &amp; Y resolution Tags (300 DPI)
 oGdPictureImaging.TagSetValueString(ImageID, Tags.tagXResolution, TagType.TagTypeRational, "300/1")
 oGdPictureImaging.TagSetValueString(ImageID, Tags.tagYResolution, TagType.TagTypeRational, "300/1")
 oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionAUTO)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.MICRDoMICR(System.Int32,GdPicture12.MICRFont,GdPicture12.MICRContext,System.String,System.Int32)">
      <summary>
 Starts a MICR recognition process on a GdPicture image or on an area of a GdPicture image defined by SetROI() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="SymbolsFont">A member of the MICRFont enumeration.</param>
      <param name="context">The MICR context. A member of the MICRContext enumeration.</param>
      <param name="WhiteList">This parameter can be used to specify your own white list of chars.
 Can be any members of "0123456789/&lt;#&gt;^ABCDEFGHIJKLMNOPQRSTUVWXYZ" for CMC7 symbols detection or "0123456789ABCD" for E-13B.
 Use empty string to recognize all characters.</param>
      <param name="ExpectedSymbols">The number of expected symbols to detect. Use 0 if this number is undefined.</param>
      <returns>The string representation of the detected symbols.</returns>
      <remarks>
        <para>
 This method is used in the "MICR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.MICRDoMICR(System.Int32,GdPicture12.MICRFont,GdPicture12.MICRContext,System.String,System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.MICRGetSymbolsCount">
      <summary>
 Returns the number of symbols recognized during the last MICR process done by the
 MICRDoMICR() method.
 </summary>
      <returns>The number of recognized symbols.</returns>
      <remarks>
        <para>
 This method is used in the "MICR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.MICRDoMICR(System.Int32,GdPicture12.MICRFont,GdPicture12.MICRContext,System.String,System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.MICRGetSymbolConfidence(System.Int32,System.Int32)">
      <summary>
 Returns the detection confidence, in percentage, of one of the symbols recognized during the
 last MICR process done by the MICRDoMICR() method.
 </summary>
      <param name="SymbolNo">The symbol index between 1 and the number of recognized symbols returned
 by the MICRGetSymbolsCount() method.</param>
      <param name="Candidate">The recognized candidate (1 or 2). 1 for the symbol with the best accuracy or 2 for the one with the next-lower level.</param>
      <returns>The confidence, in the range 0-100.</returns>
      <remarks>
        <para>
 This method is used in the "MICR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.MICRDoMICR(System.Int32,GdPicture12.MICRFont,GdPicture12.MICRContext,System.String,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.MICRGetSymbolsCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.MICRGetSymbolValue(System.Int32,System.Int32)">
      <summary>
 Returns the character representation of one of the symbols recognized during the
 last MICR process done by the MICRDoMICR() method.
 </summary>
      <param name="SymbolNo">The symbol index between 1 and the number of recognized symbols returned
 by the MICRGetSymbolsCount() method.</param>
      <param name="Candidate">The recognized candidate (1 or 2). 1 for the symbol with the best accuracy or 2 for the one with the next-lower level.</param>
      <remarks>
        <para>
 This method is used in the "MICR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <returns>The symbol representation. Can be a member of "0123456789/&lt;#&gt;^ABCDEFGHIJKLMNOPQRSTUVWXYZ" for CMC7 symbols or "0123456789ABCD" for E-13B.</returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.MICRDoMICR(System.Int32,GdPicture12.MICRFont,GdPicture12.MICRContext,System.String,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.MICRGetSymbolsCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.MICRGetSymbolLeft(System.Int32)">
      <summary>
 Returns the left position, in pixel, of one of the symbols recognized during the
 last MICR process done by the MICRDoMICR() method.
 </summary>
      <param name="SymbolNo">The symbol index between 1 and the number of recognized symbols returned
 by the MICRGetSymbolsCount() method.</param>
      <returns>The left position in pixel.</returns>
      <remarks>
        <para>
 This method is used in the "MICR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.MICRDoMICR(System.Int32,GdPicture12.MICRFont,GdPicture12.MICRContext,System.String,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.MICRGetSymbolsCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.MICRGetSymbolTop(System.Int32)">
      <summary>
 Returns the top position, in pixel, of one of the symbols recognized during the
 last MICR process done by the MICRDoMICR() method.
 </summary>
      <param name="SymbolNo">The symbol index between 1 and the number of recognized symbols returned
 by the MICRGetSymbolsCount() method.</param>
      <returns>The top position in pixel.</returns>
      <remarks>
        <para>
 This method is used in the "MICR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.MICRDoMICR(System.Int32,GdPicture12.MICRFont,GdPicture12.MICRContext,System.String,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.MICRGetSymbolsCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.MICRGetSymbolRight(System.Int32)">
      <summary>
 Returns the right position, in pixel, of one of the symbols recognized during the
 last MICR process done by the MICRDoMICR() method.
 </summary>
      <param name="SymbolNo">The symbol index between 1 and the number of recognized symbols returned
 by the MICRGetSymbolsCount() method.</param>
      <returns>The right position in pixel.</returns>
      <remarks>
        <para>
 This method is used in the "MICR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.MICRDoMICR(System.Int32,GdPicture12.MICRFont,GdPicture12.MICRContext,System.String,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.MICRGetSymbolsCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.MICRGetSymbolBottom(System.Int32)">
      <summary>
 Returns the bottom position, in pixel, of one of the symbols recognized during the
 last MICR process done by the MICRDoMICR() method.
 </summary>
      <param name="SymbolNo">The symbol index between 1 and the number of recognized symbols returned
 by the MICRGetSymbolsCount() method.</param>
      <returns>The bottom position in pixel.</returns>
      <remarks>
        <para>
 This method is used in the "MICR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.MICRDoMICR(System.Int32,GdPicture12.MICRFont,GdPicture12.MICRContext,System.String,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.MICRGetSymbolsCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.MICRGetSymbolLine(System.Int32)">
      <summary>
 Returns the line position of one of the symbols recognized during the last MICR
 process done by the MICRDoMICR() method.
 </summary>
      <param name="SymbolNo">The symbol index between 1 and the number of recognized symbols returned
 by the MICRGetSymbolsCount() method.</param>
      <returns>The line on which the symbol has been detected.</returns>
      <remarks>
        <para>
 This method is used in the "MICR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.MICRDoMICR(System.Int32,GdPicture12.MICRFont,GdPicture12.MICRContext,System.String,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.MICRGetSymbolsCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.MICRClear">
      <summary>
 Releases from memory all information about the last MICR process done by the MICRDoMICR() method.
 </summary>
      <remarks>
        <para>
 This method is used in the "MICR" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.MICRDoMICR(System.Int32,GdPicture12.MICRFont,GdPicture12.MICRContext,System.String,System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetSelectedPage(System.Int32)">
      <summary>
 Returns the number of the selected page.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>The number of the selected page.</returns>
      <remarks>Use the GetStat() method to determine if this method succeeded.</remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.SelectPage(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GetPageCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SelectPage(System.Int32,System.Int32)">
      <summary>
 Selects a page in a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="PageNo">The page number in the range [1 - GetPageCount()].</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetSelectedPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GetPageCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SelectPage(System.Int32,System.Int32,System.Boolean)">
      <summary>
 Selects a page in a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="PageNo">The page number in the range [1 - GetPageCount()].</param>
      <param name="DirectAccess">When True, only image properties, metadata and embedded thumbnail will be loaded.
 This parameter is particularly useful to obtain image information's without decoding it. Be careful not to call subsequent methods that need to access pixel data if this parameter is set to True</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetSelectedPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GetPageCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetPageCount(System.Int32)">
      <summary>
 Returns the page count in a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>The page count in a GdPicture image.</returns>
      <remarks>Use the GetStat() method to determine if this method succeeded.</remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetSelectedPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.SelectPage(System.Int32,System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifSetTransparency(System.Int32,System.Drawing.Color)">
      <summary>
 Sets the transparency color for a Gif GdPicture image.
 If the specified GdPicture image is an editable multiframe gif image,
 you should use this method for each frame of the image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="TransparentColor">Color to set as transparent. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Setting the transparency of a gif image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.gif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.GifSetTransparency(ImageID, oGdPictureImaging.ARGB(255, 0, 255, 0))
    oGdPictureImaging.SaveAsGIF (ImageID, "output.gif")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifCreateMultiFrameFromFile(System.String)">
      <summary>
 Creates a new editable multiframe Gif image based on an
 image file.
 </summary>
      <param name="FilePath">The path of the file to open.Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 0: The image could not created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created editable multiframe gif image.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
      <example>
        <code description="Apply negative effect on all frames of an animated gif image." lang="VB.NET">
 Dim i As Integer
 Dim GifImageID As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("input.gif")
 Dim FrameCount As Integer = oGdPictureImaging.GifGetFrameCount(GifImageID)
 For i = 1 To FrameCount
    oGdPictureImaging.GifSelectFrame(GifImageID, i)
    oGdPictureImaging.FxNegative(GifImageID)
 Next i
 oGdPictureImaging.GifSaveMultiFrameToFile(GifImageID,  "output.gif")
 oGdPictureImaging.ReleaseGdPictureImage(GifImageID)
 </code>
      </example>
      <example>
        <code description="Creating an animated gif from separated image frames." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim multiGif As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("frames\frame1.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame2.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame3.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame4.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame5.jpg")
 oGdPictureImaging.GifSetLoopCount(multiGif, -1)
 'Set frames time to 1 second.
 For i As Integer = 1 To oGdPictureImaging.GifGetFrameCount(multiGif)
    oGdPictureImaging.GifSetFrameTime(multiGif, i, 100)
 Next i
 oGdPictureImaging.GifSaveMultiFrameToFile(multiGif, "frames\animated.gif")
 oGdPictureImaging.ReleaseGdPictureImage(multiGif)
 oGdPictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifCreateMultiFrameFromGdPictureImage(System.Int32)">
      <summary>
 Creates a new editable multiframe gif image based from
 a GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image from which the new multiframe gif image
 will be created.</param>
      <returns>
 0: The image could not created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created editable multiframe gif image.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
      <example>
        <code description="Apply negative effect on all frames of an animated gif image" lang="VB.NET">
 Dim i As Integer
 Dim GifImageID As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("input.gif")
 Dim FrameCount As Integer = oGdPictureImaging.GifGetFrameCount(GifImageID)
 For i = 1 To FrameCount
    oGdPictureImaging.GifSelectFrame(GifImageID, i)
    oGdPictureImaging.FxNegative(GifImageID)
 Next i
 oGdPictureImaging.GifSaveMultiFrameToFile(GifImageID,  "output.gif")
 oGdPictureImaging.ReleaseGdPictureImage(GifImageID)
 </code>
      </example>
      <example>
        <code description="Creating an animated gif from separated image frames." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim multiGif As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("frames\frame1.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame2.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame3.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame4.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame5.jpg")
 oGdPictureImaging.GifSetLoopCount(multiGif, -1)
 'Set frames time to 1 second.
 For i As Integer = 1 To oGdPictureImaging.GifGetFrameCount(multiGif)
    oGdPictureImaging.GifSetFrameTime(multiGif, i, 100)
 Next i
 oGdPictureImaging.GifSaveMultiFrameToFile(multiGif, "frames\animated.gif")
 oGdPictureImaging.ReleaseGdPictureImage(multiGif)
 oGdPictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifGetLoopCount(System.Int32)">
      <summary>
 Returns the "Loop Count" of a multiframe gif image.
 A Loop Count is the number of times an animation of the multiframe gif should be played.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.GifIsMultiFrame(System.Int32)" />
      <param name="ImageID">GdPicture Image Identifier. The multiframe gif image. (Can be an editable
 multiframe gif or a read only gif image.).</param>
      <returns>
 The number of times the animation should be played. 0 = infinite.
 </returns>
      <remarks>
 This method works with both editable multiframe gif images and ones opened as read only.
 </remarks>
      <example>
        <code description="Obtaining a multiframe gif image loop count." lang="VB.NET">
 Dim i As Integer
 Dim GifImageID As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("input.gif")
 Dim LoopCount As Integer = oGdPictureImaging.GifGetLoopCount(GifImageID)
 MessageBox.Show("The image's loop count is: " + LoopCount.ToString())
 oGdPictureImaging.ReleaseGdPictureImage(GifImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifSetLoopCount(System.Int32,System.Int32)">
      <summary>
 Sets the "Loop Count" of a multiframe gif image.
 A Loop Count is the number of times an animation of the multiframe gif should be played.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.GifIsMultiFrame(System.Int32)" />
      <param name="ImageID">GdPicture Image Identifier. The multiframe gif image. (Can be an editable
 multiframe gif or a read only gif image.).</param>
      <param name="LoopCount">The number of times the animation should be played. Between 0 and 65536. 0 =
 infinite.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method works with both editable multiframe gif images and ones opened as read only.
 </remarks>
      <example>
        <code description="Making the gif animation run infinitely." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("animated.gif")
 oGdPictureImaging.GifSetLoopCount(ImageID, 0)
 oGdPictureImaging.GifSaveMultiFrameToFile(ImageID, "output.gif")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <example>
        <code description="Creating an animated gif from separated image frames." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim multiGif As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("frames\frame1.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame2.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame3.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame4.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame5.jpg")
 oGdPictureImaging.GifSetLoopCount(multiGif, -1)
 'Set frames time to 1 second.
 For i As Integer = 1 To oGdPictureImaging.GifGetFrameCount(multiGif)
    oGdPictureImaging.GifSetFrameTime(multiGif, i, 100)
 Next i
 oGdPictureImaging.GifSaveMultiFrameToFile(multiGif, "frames\animated.gif")
 oGdPictureImaging.ReleaseGdPictureImage(multiGif)
 oGdPictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifSelectFrame(System.Int32,System.Int32)">
      <summary>
 Selects a frame of a multiframe gif image. The frame can now be edited or saved to a different file.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multiframe gif image. (Can be an editable
 multiframe gif or a read only gif image.).</param>
      <param name="Frame">Frame no between 1 and frame count.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GifGetFrameCount(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GifIsMultiFrame(System.Int32)" />
      <remarks>
 This method works with both editable multiframe gif images and ones opened as read-only
 </remarks>
      <example>
        <code description="Applying negative effect on all frames of an animated gif image" lang="VB.NET">
 Dim i As Integer
 Dim GifImageID As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("input.gif")
 Dim FrameCount As Integer = oGdPictureImaging.GifGetFrameCount(GifImageID)
 For i = 1 To FrameCount
    oGdPictureImaging.GifSelectFrame(GifImageID, i)
    oGdPictureImaging.FxNegative(GifImageID)
 Next i
 oGdPictureImaging.GifSaveMultiFrameToFile(GifImageID,  "output.gif")
 oGdPictureImaging.ReleaseGdPictureImage(GifImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifGetFrameTime(System.Int32,System.Int32)">
      <summary>
 Returns the "frame time" of a frame of a multiframe gif image.
 Frame time is the amount of time in ms to display the frame for (GIF specific - the value stored in
 the file is centiseconds (1/100th of a second)).
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.GifIsMultiFrame(System.Int32)" />
      <param name="ImageID">GdPicture Image Identifier. The multiframe gif image.</param>
      <param name="Frame">Frame no between 1 and frame count.</param>
      <returns>
 The frame time of the selected frame of the multiframe gif image.
 </returns>
      <remarks>
 This method works with both editable multiframe gif images and ones opened as read-only.
 </remarks>
      <example>
        <code description="Obtaining a multiframe gif image certain frame's frametime." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("animated.gif")
 Dim FrameTime As Integer = oGdPictureImaging.GifGetFrameTime(ImageID, 3)
 If FrameTime &lt;&gt; 1 Then
    oGdPictureImaging.GifSetFrameTime(ImageID, 3, 1)
    oGdPictureImaging.GifSaveMultiFrameToFile(ImageID,  "output.gif")
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifSetFrameTime(System.Int32,System.Int32,System.Int32)">
      <summary>
 Sets the "frame time" of a frame of a multiframe gif image.
 Frame time is the amount of time in ms to display the frame for (GIF specific - the value stored in
 the file is centiseconds (1/100th of a second)).
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.GifIsMultiFrame(System.Int32)" />
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <param name="ImageID">GdPicture Image Identifier. The multiframe gif image.</param>
      <param name="Frame">Frame no between 1 and frame count.</param>
      <param name="FrameTime">Frame time is the amount of time in ms to display the frame for (GIF
 specific - the value stored in the file is centiseconds (1/100th of a
 second)).</param>
      <remarks>
 This method works with both editable multiframe gif images and ones opened as read only.
 </remarks>
      <example>
        <code description="Setting the frame time of a certain fram in a gif multiframe image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("animated.gif")
 Dim FrameTime As Integer = oGdPictureImaging.GifGetFrameTime(ImageID, 3)
 If FrameTime &lt;&gt; 1 Then
    oGdPictureImaging.GifSetFrameTime(ImageID, 3, 1)
    oGdPictureImaging.GifSaveMultiFrameToFile(ImageID,  "output.gif")
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <example>
        <code description="Creating an animated gif from separated image frames." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim multiGif As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("frames\frame1.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame2.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame3.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame4.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame5.jpg")
 oGdPictureImaging.GifSetLoopCount(multiGif, -1)
 'Set frames time to 1 second.
 For i As Integer = 1 To oGdPictureImaging.GifGetFrameCount(multiGif)
    oGdPictureImaging.GifSetFrameTime(multiGif, i, 100)
 Next i
 oGdPictureImaging.GifSaveMultiFrameToFile(multiGif, "frames\animated.gif")
 oGdPictureImaging.ReleaseGdPictureImage(multiGif)
 oGdPictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifSetFrameDisposal(System.Int32,System.Int32,System.Int32)">
      <summary>
 Sets the "Frame disposal method" of a  frame of an editable multiframe gif image.
 This method should be called before saving using the GifSaveMultiFrameToFile() method.
 This defines what to do with the logical canvas area after displaying this image.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GifSaveMultiFrameToFile(System.Int32,System.String)" />
      <param name="ImageID">GdPicture Image Identifier. The multiframe gif image.</param>
      <param name="Frame">Frame no between 1 and frame count.</param>
      <param name="FrameDisposal">Can be:1: Leave. Will leave the image in place to be
 entirely or partially overdrawn by the next image.2:
 Background. Will blank out the area used by the frame with the
 background color.3: Previous. Will return the logical
 canvas to the previous state before the image was drawn.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method works only with editable multiframe gif images.
 </remarks>
      <example>
        <code description="Using GifSetFrameDisposal to leave the image in place to be entirely or partially overdrawn by the next image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("animated.gif")
 oGdPictureImaging.GifSetFrameDisposal(ImageID, 3, 1)
 oGdPictureImaging.GifSaveMultiFrameToFile(ImageID,  "output.gif")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifGetFrameCount(System.Int32)">
      <summary>
 Returns the number of frames in a multiframe gif image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multiframe gif image.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.GifIsMultiFrame(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GifSelectFrame(System.Int32,System.Int32)" />
      <returns>
 Number of frames in the multiframe gif image.
 Returns 0 if the image is not a multiframe gif image.
 </returns>
      <remarks>
 This method works with both editable multiframe gif images and ones opened as read only.
 </remarks>
      <example>
        <code description="Applying negative effect on all frames of an animated gif image" lang="VB.NET">
 Dim i As Integer
 Dim GifImageID As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("input.gif")
 Dim FrameCount As Integer = oGdPictureImaging.GifGetFrameCount(GifImageID)
 For i = 1 To FrameCount
    oGdPictureImaging.GifSelectFrame(GifImageID, i)
    oGdPictureImaging.FxNegative(GifImageID)
 Next i
 oGdPictureImaging.GifSaveMultiFrameToFile(GifImageID,  "output.gif")
 oGdPictureImaging.ReleaseGdPictureImage(GifImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifGetCurrentFrame(System.Int32)">
      <summary>
 Gets the current frame (or selected frame) in a multiframe gif image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multiframe gif image.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.GifIsMultiFrame(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GifSelectFrame(System.Int32,System.Int32)" />
      <returns>
 Returns the current frame of the multiframe gif image.
 Returns 0 if the image have not frame selected.
 </returns>
      <remarks>
 This method works with both editable multiframe gif images and ones opened as read only.
 </remarks>
      <example>
        <code description="Obtaining a certain frame from a gif image, adjusting its red, green, blue color channels, and saving it seperately as a png file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim Frame Integer = oGdPictureImaging.GifGetCurrentFrame(ImageID)
    If Frame &lt;&gt; 0 Then
       oGdPictureImaging.AdjustRGB(Frame, 25, 100, 76)
       oGdPictureImaging.SaveAsPNG(Frame, "output.png")
       oGdPictureImaging.ReleaseGdPictureImage(Frame)
    Else
       MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifIsMultiFrame(System.Int32)">
      <summary>
 Checks whether an image is a multiframe gif image or not.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image to check.</param>
      <returns>
 True if the image is a multiframe gif image, else false.
 </returns>
      <remarks>
 This method works with both editable multiframe gif images and ones opened as read only.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GifGetFrameCount(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GifSelectFrame(System.Int32,System.Int32)" />
      <example>
        <code description="Determining whether a gif image is multiframe or not." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("animated.gif")
 Dim MultiFrame As Boolean = oGdPictureImaging.GifIsMultiFrame(ImageID)
 If imageId &lt;&gt; 0 Then
    Dim MultiFrame As Boolean = GdPictureImaging.GifIsMultiFrame(ImageID)
    MessageBox.Show("Is multiframe: " + MultiFrame.ToString())
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)">
      <summary>
 Determines whether an image is an editable multiframe gif image or not.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image to check.</param>
      <returns>
 True if the image is an editable multiframe gif image, else false.
 </returns>
      <example>
        <code description="Determining whether a gif image is multiframe or not.." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim Editable As Boolean
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 Editable = oGdPictureImaging.GifIsEditableMultiFrame(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifDeleteFrame(System.Int32,System.Int32)">
      <summary>
 Deletes the frame of an editable multiframe gif image at a selected position.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The editable multiframe gif image in which a frame
 will be deleted.</param>
      <param name="Frame">The position of the frame to delete. Must be a value from 1 to the current
 number of frames available in the multiframe gif image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GifSaveMultiFrameToFile(System.Int32,System.String)" />
      <remarks>
        <para>
 This method can only be used with an editable multiframe gif image.
 </para>
        <para>
 To check if an image is an editable multiframe gif image you can use the GifIsEditableMultiFrame()
 method.
 </para>
        <para>
 To save modifications brought to the multiframe gif image you need to use the
 GifSaveMultiFrameToFile() method.
 </para>
      </remarks>
      <example>
        <code description="How to delete a Frame in a gif image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 oGdPictureImaging.GifDeleteFrame(ImageID, 5)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifOpenMultiFrameForWrite(System.Boolean)">
      <summary>
 This method controls the way of multiframe gif image loading.
 By default, the class loads multiframe gif images in read and write mode through the following methods:
 CreateGdPictureImageFromByteArray
 CreateGdPictureImageFromFile
 CreateGdPictureImageFromStream
 CreateGdPictureImageFromString
 CreateGdPictureImageFromFTP
 CreateGdPictureImageFromHTTP
 If you want to open multiframe gif images as read only,
 you should this method using False for the WriteAccess parameter.
 </summary>
      <param name="WriteAccess">True to load the multiframe gif images for reading and writing,
 else False to open them as read-only.</param>
      <example>
        <code description="Openning a Multiframe Image for either writing or reading-only, the following code assumes a MultiFrame image is already loaded" lang="VB.NET">
 m_Stat = GifOpenMultiFrameForWrite(True)'Opens an image for Writing and Reading
 m_Stat = GifOpenMultiFrameForWrite(False)'Opens an image for reading-only
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifSaveMultiFrameToFile(System.Int32,System.String)">
      <summary>
 Saves an editable multiframe gif image to a file.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The editable multiframe gif image to save as
 file.</param>
      <param name="FilePath">The path to save the image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)" />
      <remarks>
        <para>
 This method can only be used with an editable multiframe gif image.
 </para>
        <para>
 To check if an image is an editable multiframe gif image you can use the GifIsEditableMultiFrame()
 method.
 </para>
        <para>
 This method must only be used to save an editable multiframe gif image.
 </para>
      </remarks>
      <example>
        <code description="Apply negative effect on all frames of an animated gif image" lang="VB.NET">
 Dim i As Integer
 Dim GifImageID As Integer
 Dim FrameCount As Integer
 GifImageID = oGdPictureImaging.GifCreateMultiFrameFromFile("input.gif")
 FrameCount = oGdPictureImaging.GifGetFrameCount(GifImageID)
 For i = 1 To FrameCount
    oGdPictureImaging.GifSelectFrame(GifImageID, i)
    oGdPictureImaging.FxNegative(GifImageID)
 Next i
 oGdPictureImaging.GifSaveMultiFrameToFile(GifImageID,  "output.gif")
 oGdPictureImaging.ReleaseGdPictureImage(GifImageID)
 </code>
      </example>
      <example>
        <code description="Creating an animated gif from separated image frames." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim multiGif As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("frames\frame1.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame2.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame3.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame4.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame5.jpg")
 oGdPictureImaging.GifSetLoopCount(multiGif, -1)
 'Set frames time to 1 second.
 For i As Integer = 1 To oGdPictureImaging.GifGetFrameCount(multiGif)
    oGdPictureImaging.GifSetFrameTime(multiGif, i, 100)
 Next i
 oGdPictureImaging.GifSaveMultiFrameToFile(multiGif, "frames\animated.gif")
 oGdPictureImaging.ReleaseGdPictureImage(multiGif)
 oGdPictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifAppendFrameFromFile(System.Int32,System.String)">
      <summary>
 Appends a new frame from file to the end of an editable multiframe gif image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The editable multiframe gif image in which the
 frame will be added.</param>
      <param name="FilePath">The path of the image to append within the editable multiframe gif image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GifSaveMultiFrameToFile(System.Int32,System.String)" />
      <remarks>
 -This method can only be used with an editable multiframe gif image.
 <para>
 To check if an image is an editable multiframe gif image you can use the GifIsEditableMultiFrame()
 method.
 </para><para>
 To save modifications brought to the multiframe gif image you need to use the
 GifSaveMultiFrameToFile() method.
 </para><para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para></remarks>
      <example>
        <code description="Adding a new frame to the end of a gif file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("animated.gif")
 If imageId &lt;&gt; 0 Then
    GdPictureImaging.GifAppendFrameFromFile(ImageID, "addition.jpg")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
      <example>
        <code description="Creating an animated gif from separated image frames." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim multiGif As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("frames\frame1.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame2.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame3.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame4.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame5.jpg")
 oGdPictureImaging.GifSetLoopCount(multiGif, -1)
 'Set frames time to 1 second.
 For i As Integer = 1 To oGdPictureImaging.GifGetFrameCount(multiGif)
    oGdPictureImaging.GifSetFrameTime(multiGif, i, 100)
 Next i
 oGdPictureImaging.GifSaveMultiFrameToFile(multiGif, "frames\animated.gif")
 oGdPictureImaging.ReleaseGdPictureImage(multiGif)
 oGdPictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifAppendFrameFromGdPictureImage(System.Int32,System.Int32)">
      <summary>
 Appends a new frame from a GdPicture Image to the end of an editable multiframe gif image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The editable multiframe gif image in which
 the frame will be added.</param>
      <param name="ImageToAddID">GdPicture Image Identifier. The image to append within the editable
 multiframe gif image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GifSaveMultiFrameToFile(System.Int32,System.String)" />
      <remarks>
        <para>
 This method can only be used with an editable multiframe gif image.
 </para>
        <para>
 To check if an image is an editable multiframe gif image you can use the GifIsEditableMultiFrame()
 method.
 </para>
        <para>
 To save modifications brought to the multiframe gif image you need to use the
 GifSaveMultiFrameToFile() method.
 </para>
      </remarks>
      <example>
        <code description="Creating an animated gif from separated image frames." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim multiGif As Integer = oGdPictureImaging.GifCreateMultiFrameFromFile("frames\frame1.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame2.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame3.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame4.jpg")
 oGdPictureImaging.GifAppendFrameFromFile(multiGif, "frames\frame5.jpg")
 oGdPictureImaging.GifSetLoopCount(multiGif, -1)
 'Set frames time to 1 second.
 For i As Integer = 1 To oGdPictureImaging.GifGetFrameCount(multiGif)
    oGdPictureImaging.GifSetFrameTime(multiGif, i, 100)
 Next i
 oGdPictureImaging.GifSaveMultiFrameToFile(multiGif, "frames\animated.gif")
 oGdPictureImaging.ReleaseGdPictureImage(multiGif)
 oGdPictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifInsertFrameFromFile(System.Int32,System.Int32,System.String)">
      <summary>
 Inserts a new frame from file at the selected position an editable multiframe gif image.
 The Frame position has to be a number smaller or equal than the current number of frames available in the
 multiframe gif image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The editable multiframe gif image in which the
 frame will be inserted.</param>
      <param name="Position">The position to add the new frame. Must be a value from 1 to the current
 number of frames available in the multiframe gif image.</param>
      <param name="FilePath">The path of the image to append within the editable multiframe gif image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GifSaveMultiFrameToFile(System.Int32,System.String)" />
      <remarks>
        <para>
 This method can only be used with an editable multiframe gif image.
 </para>
        <para>
 To check if an image is an editable multiframe gif image you can use the GifIsEditableMultiFrame()
 method.
 </para>
        <para>
 To save modifications brought to the multiframe gif image you need to use the
 GifSaveMultiFrameToFile() method.
 </para>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
      </remarks>
      <example>
        <code description="How to use GifInsertFrameFromFile." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("animated.gif")
 oGdPictureImaging.GifInsertFrameFromFile(ImageID, 3, "addition.jpg")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifInsertFrameFromGdPictureImage(System.Int32,System.Int32,System.Int32)">
      <summary>
 Inserts a new frame from a GdPicture Image at the given position in an editable multiframe gif image.
 The frameposition has to be a number smaller or equal than the current number of frames available in the
 multiframe gif image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The editable multiframe gif image in which
 the frame will be inserted.</param>
      <param name="Position">The position to add the new frame. Must be a value from 1 to the current
 number of frames available in the multiframe gif image.</param>
      <param name="ImageToAddID">GdPicture Image Identifier. The image to append within the editable
 multiframe gif image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GifSaveMultiFrameToFile(System.Int32,System.String)" />
      <remarks>
        <para>
 This method can only be used with an editable multiframe gif image.
 </para>
        <para>
 To check if an image is an editable multiframe gif image you can use the GifIsEditableMultiFrame()
 method.
 </para>
        <para>
 To save modifications brought to the multiframe gif image you need to use the
 GifSaveMultiFrameToFile() method.
 </para>
      </remarks>
      <example>
        <code description="How to use GifInsertFrameFromGdPictureImage." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim AddImgID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("animated.gif")
 AddImgID = oGdPictureImaging.CreateGdPictureImageFromFile("addition.jpg")
 oGdPictureImaging.GifInsertFrameFromGdPictureImage(ImageID, 3, AddImgID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(AddImgID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GifSwapFrames(System.Int32,System.Int32,System.Int32)">
      <summary>
 Swaps two frames in an editable multiframe gif image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The editable multiframe gif image in which frames
 will be swapped.</param>
      <param name="Frame1">The position of the first frame to swap with the second. Must be a value from
 1 to the current number of frames available in the multiframe gif image.</param>
      <param name="Frame2">The position of the second frame to swap with the first one. Must be a value
 from 1 to the current number of frames available in the multiframe gif image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GifSaveMultiFrameToFile(System.Int32,System.String)" />
      <remarks>
        <para>
 This method can only be used with an editable multiframe gif image.
 </para>
        <para>
 To check if an image is an editable multiframe gif image you can use the GifIsEditableMultiFrame()
 method.
 </para>
        <para>
 To save modifications brought to the multiframe gif image you need to use the
 GifSaveMultiFrameToFile() method.
 </para>
      </remarks>
      <example>
        <code description="Swaping two frames in a gif multiframe image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 oGdPictureImaging.GifSwapFrames(ImageID, 3, 5)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.JBIG2SaveAsMultiPageFile(System.Int32,System.String)">
      <summary>
 Stores a GdPicture image as first page of a new multipage JBIG2 file.
 You will be able to append new page to the created file using the JBIG2AddToMultiPageFile() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to store as the first page
 of the multipage JBIG2 file.Do not release this image
 before ending the multipage JBIG2 file with the JBIG2CloseMultiPageFile()
 method. (see example).</param>
      <param name="FilePath">The path of the multipage tiff file to create.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.JBIG2AddToMultiPageFile(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.JBIG2CloseMultiPageFile(System.Int32)" />
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converts multipage TIFF to multipage JBIG2" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim TiffID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 Dim Jbig2ID As Integer = 0
 For i As Integer = 1 To oGdPictureImaging.TiffGetPageCount(TiffID)
    If i = 1 Then
       Jbig2ID = oGdPictureImaging.CreateClonedGdPictureImage(TiffID)
       oGdPictureImaging.JBIG2SaveAsMultiPageFile(Jbig2ID, "multipage.jb2")
    Else
       oGdPictureImaging.TiffSelectPage(TiffID, i)
       oGdPictureImaging.JBIG2AddToMultiPageFile(Jbig2ID, TiffID)
    End If
 Next
 oGdPictureImaging.JBIG2CloseMultiPageFile(Jbig2ID)
 oGdPictureImaging.ReleaseGdPictureImage(TiffID)
 oGdPictureImaging.ReleaseGdPictureImage(Jbig2ID)
 MessageBox.show("done")
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.JBIG2AddToMultiPageFile(System.Int32,System.Int32)">
      <summary>
 Adds a page to a multipage JBIG2 file created with the JBIG2SaveAsMultiPageFile() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image used with the
 JBIG2SaveAsMultiPageFile() method. This must be the first image ot the
 file.</param>
      <param name="ImageToAddID">GdPicture Image Identifier. The image to append within multipage JBIG2
 file. You will be able to release this image after calling this
 method.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.JBIG2SaveAsMultiPageFile(System.Int32,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.JBIG2CloseMultiPageFile(System.Int32)" />
      <remarks>
 Use the JBIG2CloseMultiPageFile() method when you don't want to append new page to the multipage
 JBIG2 file.
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converts multipage TIFF to multipage JBIG2" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim TiffID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 Dim Jbig2ID As Integer = 0
 For i As Integer = 1 To oGdPictureImaging.TiffGetPageCount(TiffID)
    If i = 1 Then
       Jbig2ID = oGdPictureImaging.CreateClonedGdPictureImage(TiffID)
       oGdPictureImaging.JBIG2SaveAsMultiPageFile(Jbig2ID, "multipage.jb2")
    Else
       oGdPictureImaging.TiffSelectPage(TiffID, i)
       oGdPictureImaging.JBIG2AddToMultiPageFile(Jbig2ID, TiffID)
    End If
 Next
 oGdPictureImaging.JBIG2CloseMultiPageFile(Jbig2ID)
 oGdPictureImaging.ReleaseGdPictureImage(TiffID)
 oGdPictureImaging.ReleaseGdPictureImage(Jbig2ID)
 MessageBox.show("done")
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.JBIG2CloseMultiPageFile(System.Int32)">
      <summary>
 Terminates and closes a multipage JBIG2 file created with the JBIG2SaveAsMultiPageFile() method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image stored as the first page of
 the multipage JBIG2 file. You will be able to release this image after calling
 this method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.JBIG2SaveAsMultiPageFile(System.Int32,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.JBIG2AddToMultiPageFile(System.Int32,System.Int32)" />
      <example>
        <code description="Converts multipage TIFF to multipage JBIG2" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim TiffID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 Dim Jbig2ID As Integer = 0
 For i As Integer = 1 To oGdPictureImaging.TiffGetPageCount(TiffID)
    If i = 1 Then
       Jbig2ID = oGdPictureImaging.CreateClonedGdPictureImage(TiffID)
       oGdPictureImaging.JBIG2SaveAsMultiPageFile(Jbig2ID, "multipage.jb2")
    Else
       oGdPictureImaging.TiffSelectPage(TiffID, i)
       oGdPictureImaging.JBIG2AddToMultiPageFile(Jbig2ID, TiffID)
    End If
 Next
 oGdPictureImaging.JBIG2CloseMultiPageFile(Jbig2ID)
 oGdPictureImaging.ReleaseGdPictureImage(TiffID)
 oGdPictureImaging.ReleaseGdPictureImage(Jbig2ID)
 MessageBox.show("done")
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.JBIG2IsMultiPage(System.Int32)">
      <summary>
 Checks if a GdPicture image is a multipage JBIG2 image
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image to check.</param>
      <returns>
 True if the image is a multipage JBIG2 image, else false.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.JBIG2GetPageCount(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.JBIG2SelectPage(System.Int32,System.Int32)" />
      <example>
        <code description="Knowing whether a JBIG2 file is a multipage file" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim PageCount As Integer
 Dim Multipage As Boolean
 Multipage = oGdPictureImaging.JBIG2IsMultiPage(Jbig2ID)
 oGdPictureImaging.JBIG2CloseMultiPageFile(Jbig2ID)
 oGdPictureImaging.ReleaseGdPictureImage(Jbig2ID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.JBIG2SelectPage(System.Int32,System.Int32)">
      <summary>
 Selects a page of a multipage JBIG2 image. The page can now be edited or saved to a different file.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multipage JBIG2 image.</param>
      <param name="Page">Page number between 1 and page count.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.JBIG2GetPageCount(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.JBIG2IsMultiPage(System.Int32)" />
      <example>
        <code description="Selecting a certain page in a Jbig2 Multipage file making is ready for editing" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim PageCount As Integer
 oGdPictureImaging.JBIG2SelectPage(Jbig2ID)
 oGdPictureImaging.JBIG2CloseMultiPageFile(Jbig2ID)
 oGdPictureImaging.ReleaseGdPictureImage(Jbig2ID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.JBIG2GetPageCount(System.Int32)">
      <summary>
 Returns the number of pages currently available in a multipage JBIG2 image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multipage JBIG2 image.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.JBIG2IsMultiPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.JBIG2SelectPage(System.Int32,System.Int32)" />
      <returns>
 Number of pages currently available in the multipage JBIG2 image. Returns 0 if the image is not a
 multipage JBIG2 image.
 </returns>
      <example>
        <code description="Retrieving the number of pages in a JBIG2 file" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim PageCount As Integer
 Dim Jbig2ID As Integer
 PageCount = oGdPictureImaging.JBIG2GetPageCount(Jbig2ID)
 oGdPictureImaging.JBIG2CloseMultiPageFile(Jbig2ID)
 oGdPictureImaging.ReleaseGdPictureImage(Jbig2ID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffGetPageCount(System.Int32)">
      <summary>
 Returns the number of pages currently available in a multipage tiff image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multipage tiff image.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffIsMultiPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffSelectPage(System.Int32,System.Int32)" />
      <returns>
 Number of pages currently available in the multipage tiff image. Returns 0 if the image is not a
 multipage tiff image.
 </returns>
      <remarks>
 This method works with Editable multipage tiff image and with multipage tiff images opened as read
 only.
 </remarks>
      <example>
        <code description="How to obtain a multipage tiff image page count." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim PageCount As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 PageCount = oGdPictureImaging.TiffGetPageCount(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffGetCurrentPage(System.Int32)">
      <summary>
 Returns the current page (or selected page) in a multipage tiff image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multipage tiff image.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffIsMultiPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffSelectPage(System.Int32,System.Int32)" />
      <returns>
 Returns the current page of the multipage tiff image. Returns 0 if the image have not page selected.
 </returns>
      <remarks>
 This method works with Editable multipage tiff image and with multipage tiff images opened as read
 only.
 </remarks>
      <example>
        <code description="How to obtain a certain page from a multipage tiff image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim Page As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 Page = oGdPictureImaging.TiffGetCurrentPage(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffSelectPage(System.Int32,System.Int32)">
      <summary>
 Selects a page of a multipage tiff image. The page can now be edited or saved to a different file.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multipage tiff image. (Can be an editable
 multipage tiff or a read only tiff image.).</param>
      <param name="Page">Page number between 1 and page count.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffGetPageCount(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffIsMultiPage(System.Int32)" />
      <remarks>
 This method works with editable multipage tiff image
 and with multipage tiff images opened as read only.
 </remarks>
      <example>
        <code description="Draw page number on each page of a multipage tiff image" lang="VB.NET">
 Dim i As Integer
 Dim TiffImageID As Integer
 Dim PageCount As Integer
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPictureImaging.TiffOpenMultiPageForWrite(True)
 TiffImageID = oGdPictureImaging.TiffCreateMultiPageFromFile("input.tif", True)
 Dim ImgTiffCompression As TiffCompression = oGdPictureImaging.GetTiffCompression(ImageID)
 PageCount = oGdPictureImaging.TiffGetPageCount(TiffImageID)
 For i = 1 To PageCount
    oGdPictureImaging.TiffSelectPage(TiffImageID, i)
    oGdPictureImaging.DrawText(TiffImageID, "Page " &amp; CStr(i) &amp; " / " &amp; CStr(PageCount), 50, 50, 10, FontStyle.FontStyleRegular, Color.Black, "Arial", True)
    'Comment the following method to keep original compression
    'If you do use the following method, use TiffCompression.TiffCompressionCCITT4 or TiffCompression.TiffCompressionCCITT3 for saving
    oGdPictureImaging.ConvertTo1Bpp(TiffImageID)
 Next i
 oGdPictureImaging.TiffSaveMultiPageToFile(TiffImageID, "input.tif", ImgTiffCompression)
 oGdPictureImaging.ReleaseGdPictureImage(TiffImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffExtractPage(System.Int32,System.Int32,System.String)">
      <summary>
 In GdPicture editable multipage TIFF format, pages created from individual GdPicture images are compressed in memory in tiff CCITT 4 when they are bitonal and in tiff LZW otherwise.
 This method permits to directly extracts a specific page into a TIFF image without the need to decode and re-encode the bitmap.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multipage tiff image. (Can be an editable multipage tiff or a read only tiff image.).</param>
      <param name="Page">Page number between 1 and page count.</param>
      <param name="FilePath">The file path to store the tiff image data.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffGetPageCount(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffIsMultiPage(System.Int32)" />
      <remarks>
 This method works with editable multipage tiff image
 and with multipage tiff images opened as read only.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffExtractPage(System.Int32,System.Int32,System.IO.Stream)">
      <summary>
 In GdPicture editable multipage TIFF format, pages created from individual GdPicture images are compressed in memory in tiff CCITT 4 when they are bitonal and in tiff LZW otherwise.
 This method permits to directly extracts a specific page into a TIFF image without the need to decode and re-encode the bitmap.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multipage tiff image. (Can be an editable multipage tiff or a read only tiff image.).</param>
      <param name="Page">Page number between 1 and page count.</param>
      <param name="Stream">The Stream object to store the tiff image data.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffGetPageCount(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffIsMultiPage(System.Int32)" />
      <remarks>
 This method works with editable multipage tiff image
 and with multipage tiff images opened as read only.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffIsMultiPage(System.Int32)">
      <summary>
 Checks if a GdPicture image is a multipage tiff image. This image can be a read only multipage tiff image or
 an editable multipage tiff image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image to check.</param>
      <returns>
 True if the image is a multipage tiff image, else false.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffGetPageCount(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffSelectPage(System.Int32,System.Int32)" />
      <example>
        <code description="How to know whether a tiff image is a multiple image or not." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim MultiPageImage As Boolean
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("myfile.tif")
 MultiPageImage = oGdPictureImaging.TiffIsMultiPage(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffOpenMultiPageForWrite(System.Boolean)">
      <summary>
 This method controls the way of multipage tiff image loading.
 By default, the class loads multipage TIFF images int read and write mode through the following methods:
 CreateGdPictureImageFromByteArray
 CreateGdPictureImageFromFile
 CreateGdPictureImageFromStream
 CreateGdPictureImageFromString
 CreateGdPictureImageFromFTP
 CreateGdPictureImageFromHTTP
 If you want to open multipage TIFF images as read only mode, you should use this method specifying False for the WriteAccess parameter.
 </summary>
      <param name="WriteAccess">True to load the multipage tiff images for reading and writing,
 else False to open them as read-only.</param>
      <example>
        <code description="Openning a MultiPagefile for either writing or reading-only, the following code assumes a multipage image is already loaded" lang="VB.NET">
 m_Stat = TiffOpenMultiPageForWrite(True)'Opens an image for Writing and Reading
 m_Stat = TiffOpenMultiPageForWrite(False)'Opens an image for reading-only
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffCreateMultiPageFromFile(System.String)">
      <summary>
 Creates a new editable multipage tiff image based
 on an image file.
 </summary>
      <param name="FilePath">The path of the file to open.Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 0: The image could not created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created editable multipage tiff image.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
      <example>
        <code description="Draw page number on each page of a multipage tiff image" lang="VB.NET">
 Dim i As Integer
 Dim TiffImageID As Integer
 Dim PageCount As Integer
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPictureImaging.TiffOpenMultiPageForWrite(True)
 TiffImageID = oGdPictureImaging.TiffCreateMultiPageFromFile("input.tif", True)
 Dim ImgTiffCompression As TiffCompression = oGdPictureImaging.GetTiffCompression(ImageID)
 PageCount = oGdPictureImaging.TiffGetPageCount(TiffImageID)
 For i = 1 To PageCount
    oGdPictureImaging.TiffSelectPage(TiffImageID, i)
    oGdPictureImaging.DrawText(TiffImageID, "Page " &amp; CStr(i) &amp; " / " &amp; CStr(PageCount), 50, 50, 10, FontStyle.FontStyleRegular, Color.Black, "Arial", True)
    'Comment the following method to keep original compression
    'If you do use the following method, use TiffCompression.TiffCompressionCCITT4 or TiffCompression.TiffCompressionCCITT3 for saving
    oGdPictureImaging.ConvertTo1Bpp(TiffImageID)
 Next i
 oGdPictureImaging.TiffSaveMultiPageToFile(TiffImageID, "input.tif", ImgTiffCompression)
 oGdPictureImaging.ReleaseGdPictureImage(TiffImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffCreateMultiPageFromFile(System.String,System.Boolean)">
      <summary>
 Creates a new editable multipage tiff image based
 on an image file.
 </summary>
      <param name="FilePath">The path of the file to open.Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="LoadInMemory">Specifies if the content of the document must be loaded in memory.
 Loading document in memory results on a better manipulation performance but consumes more memory.
 This also permits to subsequently overwrite or delete the input file. Default value is False.</param>
      <returns>
 0: The image could not created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created editable multipage tiff image.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
      <example>
        <code description="Draw page number on each page of a multipage tiff image" lang="VB.NET">
 Dim i As Integer
 Dim TiffImageID As Integer
 Dim PageCount As Integer
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPictureImaging.TiffOpenMultiPageForWrite(True)
 TiffImageID = oGdPictureImaging.TiffCreateMultiPageFromFile("input.tif", True)
 Dim ImgTiffCompression As TiffCompression = oGdPictureImaging.GetTiffCompression(ImageID)
 PageCount = oGdPictureImaging.TiffGetPageCount(TiffImageID)
 For i = 1 To PageCount
    oGdPictureImaging.TiffSelectPage(TiffImageID, i)
    oGdPictureImaging.DrawText(TiffImageID, "Page " &amp; CStr(i) &amp; " / " &amp; CStr(PageCount), 50, 50, 10, FontStyle.FontStyleRegular, Color.Black, "Arial", True)
    'Comment the following method to keep original compression
    'If you do use the following method, use TiffCompression.TiffCompressionCCITT4 or TiffCompression.TiffCompressionCCITT3 for saving
    oGdPictureImaging.ConvertTo1Bpp(TiffImageID)
 Next i
 oGdPictureImaging.TiffSaveMultiPageToFile(TiffImageID, "input.tif", ImgTiffCompression)
 oGdPictureImaging.ReleaseGdPictureImage(TiffImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffCreateMultiPageFromGdPictureImage(System.Int32)">
      <summary>
 Creates a new editable multipage tiff image from a GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image from which the new multipage tiff image
 will be created.</param>
      <returns>
 0: The image could not created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The created editable multipage tiff image.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
      <example>
        <code description="Draw page number on each page of a multipage tiff image" lang="VB.NET">
 Dim i As Integer
 Dim TiffImageID As Integer
 Dim PageCount As Integer
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPictureImaging.TiffOpenMultiPageForWrite(True)
 TiffImageID = oGdPictureImaging.TiffCreateMultiPageFromFile("input.tif", True)
 Dim ImgTiffCompression As TiffCompression = oGdPictureImaging.GetTiffCompression(ImageID)
 PageCount = oGdPictureImaging.TiffGetPageCount(TiffImageID)
 For i = 1 To PageCount
    oGdPictureImaging.TiffSelectPage(TiffImageID, i)
    oGdPictureImaging.DrawText(TiffImageID, "Page " &amp; CStr(i) &amp; " / " &amp; CStr(PageCount), 50, 50, 10, FontStyle.FontStyleRegular, Color.Black, "Arial", True)
    'Comment the following method to keep original compression
    'If you do use the following method, use TiffCompression.TiffCompressionCCITT4 or TiffCompression.TiffCompressionCCITT3 for saving
    oGdPictureImaging.ConvertTo1Bpp(TiffImageID)
 Next i
 oGdPictureImaging.TiffSaveMultiPageToFile(TiffImageID, "input.tif", ImgTiffCompression)
 oGdPictureImaging.ReleaseGdPictureImage(TiffImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)">
      <summary>
 Checks if an image is an editable multipage tiff image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image to check.</param>
      <returns>
 True if the image is an editable multipage tiff image, else false.
 </returns>
      <example>
        <code description="How to know whether a multipage tiff image is editable or not." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim Editable As Boolean
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 Editable = oGdPictureImaging.TiffIsEditableMultiPage(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffAppendPageFromFile(System.Int32,System.String)">
      <summary>
 Appends a new page from file to the end of an editable multipage tiff image.
 </summary>
      <param name="EditableTiffID">GdPicture Image Identifier. The editable multipage tiff image in which the
 page will be added.</param>
      <param name="FilePath">The path of the image to append within the editable multipage tiff image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture12.TiffCompression)" />
      <remarks>
 This method can only be used with an editable multipage tiff image.
 To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
 method.
 To save modifications brought to the multipage tiff image you need to use the
 TiffSaveMultiPageToFile() method.
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
      <example>
        <code description="How to use TiffAppendPageFromFile." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 oGdPictureImaging.TiffAppendPageFromFile(ImageID, "addition.tif")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffAppendPageFromGdPictureImage(System.Int32,System.Int32)">
      <summary>
 Appends a new page from a GdPicture Image to the end of an editable multipage tiff image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The editable multipage tiff image in which
 the page will be added.</param>
      <param name="ImageToAddID">GdPicture Image Identifier. The image to append within the editable
 multipage tiff image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture12.TiffCompression)" />
      <remarks>
 This method can only be used with an editable multipage tiff image.
 To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
 method.
 To save modifications brought to the multipage tiff image you need to use the
 TiffSaveMultiPageToFile() method.
 </remarks>
      <example>
        <code description="How to use TiffAppendPageFromGdPictureImage." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim AddImgID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 AddImgID = oGdPictureImaging.CreateGdPictureImageFromFile("addition.tif")
 oGdPictureImaging.TiffAppendPageFromGdPictureImage(ImageID, AddImgID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(AddImgID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffInsertPageFromFile(System.Int32,System.Int32,System.String)">
      <summary>
 Inserts a new page from file at the given position an editable multipage tiff image.
 Page has to be a number smaller or equal than the current number of pages available in the multipage
 tiff image.
 </summary>
      <param name="EditableTiffID">GdPicture Image Identifier. The editable multipage tiff image in which the
 page will be inserted.</param>
      <param name="Position">The position to add the new page. Must be a value from 1 to the current
 number of pages available in the multipage tiff image.</param>
      <param name="FilePath">The path of the image to append within the editable multipage tiff image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture12.TiffCompression)" />
      <remarks>
 This method can only be used with an editable multipage tiff image.
 To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
 method.
 To save modifications brought to the multipage tiff image you need to use the
 TiffSaveMultiPageToFile() method.
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
      <example>
        <code description="How to use TiffInsertPageFromFile." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 oGdPictureImaging.TiffInsertPageFromFile(ImageID, 3, "addition.tif")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffInsertPageFromGdPictureImage(System.Int32,System.Int32,System.Int32)">
      <summary>
 Inserts a new page from a GdPicture Image at the given position in an editable multipage tiff image.
 Page has to be a number smaller or equal than the current number of pages available in the multipage
 tiff image.
 </summary>
      <param name="EditableTiffID">GdPicture Image Identifier. The editable multipage tiff image in which
 the page will be inserted.</param>
      <param name="Position">The position to add the new page. Must be a value from 1 to the current
 number of pages available in the multipage tiff image.</param>
      <param name="ImageToAddID">GdPicture Image Identifier. The image to append within the editable
 multipage tiff image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture12.TiffCompression)" />
      <remarks>
 This method can only be used with an editable multipage tiff image.
 To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
 method.
 To save modifications brought to the multipage tiff image you need to use the
 TiffSaveMultiPageToFile() method.
 </remarks>
      <example>
        <code description="How to use TiffInsertPageFromGdPictureImage." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim AddImgID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 AddImgID = oGdPictureImaging.CreateGdPictureImageFromFile("addition.tif")
 oGdPictureImaging.TiffInsertPageFromGdPictureImage(ImageID, 3, AddImgID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(AddImgID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffSwapPages(System.Int32,System.Int32,System.Int32)">
      <summary>
 Swaps two pages in an editable multipage tiff image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The editable multipage tiff image in which pages
 will be swapped.</param>
      <param name="Page1">The position of the first page to swap with the second. Must be a value from 1
 to the current number of pages available in the multipage tiff image.</param>
      <param name="Page2">The position of the second page to swap with the first one. Must be a value
 from 1 to the current number of pages available in the multipage tiff image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture12.TiffCompression)" />
      <remarks>
 This method can only be used with an editable multipage tiff image.
 To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
 method.
 To save modifications brought to the multipage tiff image you need to use the
 TiffSaveMultiPageToFile() method.
 </remarks>
      <example>
        <code description="How to swap two pages in a multipage tiff image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 oGdPictureImaging.TiffSwapPages(ImageID, 3, 5)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffMovePage(System.Int32,System.Int32,System.Int32)">
      <summary>
 Moves one page in an editable multipage tiff image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The editable multipage tiff image identifier to move the page.</param>
      <param name="PageNo">The position of the page to move. Must be a value from 1
 to the current number of pages available in the multipage tiff image.</param>
      <param name="Destination">The destination of the page to move. Must be a value
 from 1 to the current number of pages available in the multipage tiff image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture12.TiffCompression)" />
      <remarks>
 This method can only be used with an editable multipage tiff image.
 To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
 method.
 To save modifications brought to the multipage tiff image you need to use the
 TiffSaveMultiPageToFile() method.
 </remarks>
      <example>
        <code description="How to move a page in a multipage tiff image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 oGdPictureImaging.TiffMovePage(ImageID, 1, 2)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffDeletePage(System.Int32,System.Int32)">
      <summary>
 Deletes the page of an editable multipage tiff image on the given position.
 </summary>
      <param name="EditableTiffID">GdPicture Image Identifier. The editable multipage tiff image in which a page
 will be deleted.</param>
      <param name="Page">The position of the page to delete. Must be a value from 1 to the current
 number of pages available in the multipage tiff image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture12.TiffCompression)" />
      <remarks>
 This method can only be used with an editable multipage tiff image.
 To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
 method.
 To save modifications brought to the multipage tiff image you need to use the
 TiffSaveMultiPageToFile() method.
 </remarks>
      <example>
        <code description="How to delete a page in a multipage tiff image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 oGdPictureImaging.TiffDeletePage(ImageID, 5)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture12.TiffCompression)">
      <summary>
 Saves an editable multipage tiff image to a multipage tiff file.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The editable multipage tiff image to save as
 file.</param>
      <param name="FilePath">The path to save the image.</param>
      <param name="Compression">A member of the TiffCompression enumeration.
 Note: In case of JPEG compression, the quality factor used by default is 90. Use the overloaded method taking a JpegQuality parameter to specify a custom value.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)" />
      <remarks>
        <para>
 This method can only be used with an editable multipage tiff image.
 </para>
        <para>
 To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
 method.
 </para>
        <para>
 Warning for multipage tiff documents: If the file destination is the same as the input document a GdPictureStatus.AccessDenied error will be returned unless
 the document was loaded in memory through setting the LoadInMemory parameter in TiffCreateMultiPageFromFile() to true.
 </para>
        <para>
 If you are using CCITT3 or CCITT4 compression scheme, make sure to have only 1bpp page within your
 multipage tiff image (else LZW compression will be used).
 </para>
      </remarks>
      <example>
        <code description="Draw page number on each page of a multipage tiff image" lang="VB.NET">
 Dim i As Integer
 Dim TiffImageID As Integer
 Dim PageCount As Integer
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPictureImaging.TiffOpenMultiPageForWrite(True)
 TiffImageID = oGdPictureImaging.TiffCreateMultiPageFromFile("input.tif", True)
 Dim ImgTiffCompression As TiffCompression = oGdPictureImaging.GetTiffCompression(ImageID)
 PageCount = oGdPictureImaging.TiffGetPageCount(TiffImageID)
 For i = 1 To PageCount
    oGdPictureImaging.TiffSelectPage(TiffImageID, i)
    oGdPictureImaging.DrawText(TiffImageID, "Page " &amp; CStr(i) &amp; " / " &amp; CStr(PageCount), 50, 50, 10, FontStyle.FontStyleRegular, Color.Black, "Arial", True)
    'Comment the following method to keep original compression
    'If you do use the following method, use TiffCompression.TiffCompressionCCITT4 or TiffCompression.TiffCompressionCCITT3 for saving
    oGdPictureImaging.ConvertTo1Bpp(TiffImageID)
 Next i
 oGdPictureImaging.TiffSaveMultiPageToFile(TiffImageID, "input.tif", ImgTiffCompression)
 oGdPictureImaging.ReleaseGdPictureImage(TiffImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture12.TiffCompression,System.Int32)">
      <summary>
 Saves an editable multipage tiff image to a multipage tiff file.
 This methods takes a jpeg quality parameter.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The editable multipage tiff image to save
 as file.</param>
      <param name="FilePath">The path to save the image.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <param name="JpegQuality">Defines the compression quality, between 1 (worst quality) and 100 (better quality). This parameter is ignored when the specified compression scheme is different than JPEG.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)" />
      <remarks>
        <para>
 This method can only be used with an editable multipage tiff image.
 </para>
        <para>
 To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
 method.
 </para>
        <para>
 Warning for multipage tiff documents: If the file destination is the same as the input document a GdPictureStatus.AccessDenied error will be returned unless
 the document was loaded in memory through setting the LoadInMemory parameter in TiffCreateMultiPageFromFile() to true.
 </para>
        <para>
 If you are using CCITT3 or CCITT4 compression scheme, make sure to have only 1bpp page within your
 multipage tiff image (else LZW compression will be used).
 </para>
      </remarks>
      <example>
        <code description="Drawing page number on each page of a multipage tiff image and saving as multipage tiff with jpeg compression." lang="VB.NET">
 Dim i As Integer
 Dim TiffImageID As Integer
 Dim PageCount As Integer
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPictureImaging.TiffOpenMultiPageForWrite(True)
 TiffImageID = oGdPictureImaging.TiffCreateMultiPageFromFile("input.tif", True)
 PageCount = oGdPictureImaging.TiffGetPageCount(TiffImageID)
 For i = 1 To PageCount
    oGdPictureImaging.TiffSelectPage(TiffImageID, i)
    oGdPictureImaging.DrawText(TiffImageID, "Page " &amp; CStr(i) &amp; " / " &amp; CStr(PageCount), 50, 50, 10, FontStyle.FontStyleRegular, Color.Black, "Arial", True)
 Next i
 oGdPictureImaging.TiffSaveMultiPageToFile(TiffImageID, "output.tif", TiffCompression.TiffCompressionJPEG, 90)
 oGdPictureImaging.ReleaseGdPictureImage(TiffImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffMerge2Files(System.String,System.String,System.String,GdPicture12.TiffCompression)">
      <summary>
 Merge two image files together and save them as multipage tiff image.
 </summary>
      <param name="FilePath1">The first image file path to merge.</param>
      <param name="FilePath2">The second image file path to merge.</param>
      <param name="FileDest">The destination image file path to create.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 If you are using CCITT3 or CCITT4 compression scheme, make sure to have only 1bpp input images
 (else LZW compression will be used).
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffMergeFiles(System.String[],System.String,GdPicture12.TiffCompression)" />
      <example>
        <code description="Merge file1.tif and file2.tif to output.tif" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim status As GdPictureStatus =  oGdPictureImaging.TiffMerge2Files("file1.tif", "file2.tif", "output.tif", TiffCompression.CompressionLZW)
 If status &lt;&gt; GdPictureStatus.OK Then
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffMergeFiles(System.String[],System.String,GdPicture12.TiffCompression)">
      <summary>
 Merges 2 or more image files together and save them as multipage tiff image.
 </summary>
      <param name="FilePath">Array of String representing the paths of the images to merge.</param>
      <param name="FileDest">The destination image file path to create.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </para>
        <para>
 If you are using CCITT3 or CCITT4 compression scheme, make sure to have only 1bpp input images
 (else LZW compression will be used).
 </para>
      </remarks>
      <example>
        <code description="Merging 3 JPEG bitmap to tiff document." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim status As GdPictureStatus =  oGdPictureImaging.TiffMergeFiles(New String() {"image1.jpg", "image2.jpg", "image3.jpg"}, "output.tif", TiffCompression.CompressionLZW)
 If status &lt;&gt; GdPictureStatus.OK Then
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffMergeFileList(System.String,System.String,GdPicture12.TiffCompression)">
      <summary>
 Merge a list of files into a multipage tiff image.
 </summary>
      <param name="FilesList">Input The list of files. Each file must be separated with a comma.</param>
      <param name="FileDest">The destination image file path to create.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
      <example>
        <code description="Merge file1.jpg, file2.jpg, file3.tif &amp; file4.gif images" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim status As GdPictureStatus = oGdPictureImaging.TiffMergeFileList("imagesfile1.jpg,c:\imagesfile2.jpg;c:\imagesfile3.tif,c:\imagesfile4.gif", "imagesoutput.tif", CompressionLZW)
 If status &lt;&gt; GdPictureStatus.OK Then
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffSaveAsMultiPageFile(System.Int32,System.String,GdPicture12.TiffCompression)">
      <summary>
 Stores a GdPicture image as first page of a new multipage tiff file.
 You will be able to append new page to the created file using the TiffAddToMultiPageFile() method.
 This is the faster way to create multipage tiff image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to store as the first page
 of the multipage tiff file.Do not release this image
 before ending the multipage tiff file with the TiffCloseMultiPageFile()
 method. (see example).</param>
      <param name="FilePath">The path of the multipage tiff file to create.</param>
      <param name="Compression">A member of the TiffCompression enumeration.
 Note: In case of JPEG compression, the quality factor used by default is 90. Use the overloaded method taking a JpegQuality parameter to specify a custom value.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffAddToMultiPageFile(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffCloseMultiPageFile(System.Int32)" />
      <remarks>
 Use the TiffCloseMultiPageFile() method when you don't want to append new page to the multipage
 tiff file.
 To access to the data of the new created image file you need first to save &amp; close it using the
 ReleaseGdPictureImage() method, then reload it using the CreateGdPictureImageFromFile() method.
 </remarks>
      <example>
        <code description="Creating a multipage tiff image from 3 separated tiff images." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID, TiffID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image1.tif")
 oGdPictureImaging.TiffSaveAsMultiPageFile(ImageID, "multipage.tif", TiffCompression.TiffCompressionAUTO)
 'At this step ImageID1 handles a reference to the multipage tiff stream.
 TiffID = ImageID
 'ading a second page in the multipage stream from image2.tif
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image2.tif")
 oGdPictureImaging.TiffAddToMultiPageFile(TiffID, ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 'adding a third page in the multipage stream from image3.tif
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image3.tif")
 oGdPictureImaging.TiffAddToMultiPageFile(TiffID, ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.TiffCloseMultiPageFile(TiffID) 'end the file
 oGdPictureImaging.ReleaseGdPictureImage(TiffID) 'releasing the input bitmap from the memory
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffSaveAsMultiPageFile(System.Int32,System.IO.Stream,GdPicture12.TiffCompression)">
      <summary>
 Stores a GdPicture image as first page of a new multipage tiff file.
 You will be able to append new page to the created file using the TiffAddToMultiPageFile() method.
 This is the faster way to create multipage tiff image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to store as the first page
 of the multipage tiff file.Do not release this image
 before ending the multipage tiff file with the TiffCloseMultiPageFile()
 method. (see example).</param>
      <param name="Stream">The stream object storing the multipage tiff file to create.</param>
      <param name="Compression">A member of the TiffCompression enumeration.
 Note: In case of JPEG compression, the quality factor used by default is 90. Use the overloaded method taking a JpegQuality parameter to specify a custom value.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffAddToMultiPageFile(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffCloseMultiPageFile(System.Int32)" />
      <remarks>
 Use the TiffCloseMultiPageFile() method when you don't want to append new page to the multipage
 tiff file.
 To access to the data of the new created image file you need first to save &amp; close it using the
 ReleaseGdPictureImage() method, then reload it using the CreateGdPictureImageFromFile() method.
 </remarks>
      <example>
        <code description="Creating a multipage tiff image from 3 separated tiff images." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim fs As New FileStream("multipage.tif", FileMode.Create)
 Dim ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image1.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.TiffSaveAsMultiPageFile(ImageID, fs, TiffCompression.TiffCompressionAUTO)
    'At this step ImageID1 handles a reference to the multipage tiff stream.
    Dim TiffID As Integer = ImageID
    'ading a second page in the multipage stream from image2.tif
    ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image2.tif")
    oGdPictureImaging.TiffAddToMultiPageFile(TiffID, ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    'ading a third page in the multipage stream from image3.tif
    ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image3.tif")
    oGdPictureImaging.TiffAddToMultiPageFile(TiffID, ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    oGdPictureImaging.TiffCloseMultiPageFile(TiffID) 'end the file
    oGdPictureImaging.ReleaseGdPictureImage(TiffID) 'releasing the input bitmap from the memory
 End If
 fs.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffSaveAsMultiPageFile(System.Int32,System.IO.Stream,GdPicture12.TiffCompression,System.Int32)">
      <summary>
 Stores a GdPicture image as first page of a new multipage tiff file.
 You will be able to append new page to the created file using the TiffAddToMultiPageFile() method.
 This methods takes a jpeg quality parameter.
 This is the faster way to create multipage tiff image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to store as the first page
 of the multipage tiff file. Do not release this image
 before ending the multipage tiff file with the TiffCloseMultiPageFile()
 method. (see example).</param>
      <param name="Stream">The stream object storing the multipage tiff file to create.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <param name="JpegQuality">Defines the compression quality, between 1 (worst quality) and 100 (better quality). This parameter is ignored when the specified compression scheme is different than JPEG.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffAddToMultiPageFile(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffCloseMultiPageFile(System.Int32)" />
      <remarks>
 Use the TiffCloseMultiPageFile() method when you don't want to append new page to the multipage
 tiff file.
 To access to the data of the new created image file you need first to save &amp; close it using the
 ReleaseGdPictureImage() method, then reload it using the CreateGdPictureImageFromFile() method.
 </remarks>
      <example>
        <code description="Creating a multipage tiff image with jpeg compression from 3 separated tiff images." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim fs As New FileStream("multipage.tif", FileMode.Create)
 Dim ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image1.tif")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.TiffSaveAsMultiPageFile(ImageID, fs, TiffCompression.TiffCompressionJPEG, 90)
    'At this step ImageID1 handles a reference to the multipage tiff stream.
    Dim TiffID As Integer = ImageID
    'ading a second page in the multipage stream from image2.tif
    ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image2.tif")
    oGdPictureImaging.TiffAddToMultiPageFile(TiffID, ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    'ading a third page in the multipage stream from image3.tif
    ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image3.tif")
    oGdPictureImaging.TiffAddToMultiPageFile(TiffID, ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    oGdPictureImaging.TiffCloseMultiPageFile(TiffID) 'end the file
    oGdPictureImaging.ReleaseGdPictureImage(TiffID) 'releasing the input bitmap from the memory
 End If
 fs.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffSaveAsMultiPageFile(System.Int32,System.String,GdPicture12.TiffCompression,System.Int32)">
      <summary>
 Stores a GdPicture image as first page of a new multipage tiff file.
 You will be able to append new page to the created file using the TiffAddToMultiPageFile() method.
 This methods takes a jpeg quality parameter.
 This is the faster way to create multipage tiff image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to store as the first page
 of the multipage tiff file. Do not release this image
 before ending the multipage tiff file with the TiffCloseMultiPageFile()
 method. (see example).</param>
      <param name="FilePath">The path of the multipage tiff file to create.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <param name="JpegQuality">Defines the compression quality, between 1 (worst quality) and 100 (better quality). This parameter is ignored when the specified compression scheme is different than JPEG.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffAddToMultiPageFile(System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffCloseMultiPageFile(System.Int32)" />
      <remarks>
 Use the TiffCloseMultiPageFile() method when you don't want to append new page to the multipage
 tiff file.
 To access to the data of the new created image file you need first to save &amp; close it using the
 ReleaseGdPictureImage() method, then reload it using the CreateGdPictureImageFromFile() method.
 </remarks>
      <example>
        <code description="Creating a multipage tiff image from 3 separated tiff images." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID, TiffID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image1.tif")
 oGdPictureImaging.TiffSaveAsMultiPageFile(ImageID, "multipage.tif", TiffCompression.TiffCompressionAUTO)
 'At this step ImageID1 handles a reference to the multipage tiff stream.
 TiffID = ImageID
 'adding a second page in the multipage stream from image2.tif
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image2.tif")
 oGdPictureImaging.TiffAddToMultiPageFile(TiffID, ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 'adding a third page in the multipage stream from image3.tif
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image3.tif")
 oGdPictureImaging.TiffAddToMultiPageFile(TiffID, ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.TiffCloseMultiPageFile(TiffID) 'end the file
 oGdPictureImaging.ReleaseGdPictureImage(TiffID) 'releasing the input bitmap from the memory
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffAddToMultiPageFile(System.Int32,System.Int32)">
      <summary>
 Adds a page to a multipage tiff file created with the TiffSaveAsMultiPageFile() method.
 </summary>
      <param name="TiffImageID">GdPicture Image Identifier. The GdPicture image used with the
 TiffSaveAsMultiPageFile() method. This must be the first image ot the
 file.</param>
      <param name="ImageID">GdPicture Image Identifier. The image to append within multipage tiff
 file. You will be able to release this image after calling this
 method.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffSaveAsMultiPageFile(System.Int32,System.IO.Stream,GdPicture12.TiffCompression)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffCloseMultiPageFile(System.Int32)" />
      <remarks>
 Use the TiffCloseMultiPageFile() method when you don't want to append new page to the multipage
 tiff file.
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Creating a multipage tiff image from 3 separated tiff images." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID, TiffID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image1.tif")
 oGdPictureImaging.TiffSaveAsMultiPageFile(ImageID, "multipage.tif", TiffCompression.TiffCompressionAUTO)
 'At this step ImageID1 handles a reference to the multipage tiff stream.
 TiffID = ImageID
 'adding a second page in the multipage stream from image2.tif
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image2.tif")
 oGdPictureImaging.TiffAddToMultiPageFile(TiffID, ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 'adding a third page in the multipage stream from image3.tif
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image3.tif")
 oGdPictureImaging.TiffAddToMultiPageFile(TiffID, ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.TiffCloseMultiPageFile(TiffID) 'end the file
 oGdPictureImaging.ReleaseGdPictureImage(TiffID) 'releasing the input bitmap from the memory
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffAddToMultiPageFile(System.Int32,System.Int32,GdPicture12.TiffCompression)">
      <summary>
 Adds a page to a multipage tiff file created with the TiffSaveAsMultiPageFile() method.
 </summary>
      <param name="TiffImageID">GdPicture Image Identifier. The GdPicture image used with the
 TiffSaveAsMultiPageFile() method. This must be the first image ot the
 file.</param>
      <param name="ImageID">GdPicture Image Identifier. The image to append within multipage tiff
 file. You will be able to release this image after calling this
 method.</param>
      <param name="PageCompression">A member of the TiffCompression enumeration. The scheme to use for compressing the page.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffSaveAsMultiPageFile(System.Int32,System.IO.Stream,GdPicture12.TiffCompression)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffCloseMultiPageFile(System.Int32)" />
      <remarks>
 Use the TiffCloseMultiPageFile() method when you don't want to append new page to the multipage
 tiff file.
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Creating a multipage tiff image from 3 separated tiff images." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID, TiffID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image1.tif")
 oGdPictureImaging.TiffSaveAsMultiPageFile(ImageID, "multipage.tif", TiffCompression.TiffCompressionAUTO)
 'At this step ImageID1 handles a reference to the multipage tiff stream.
 TiffID = ImageID
 'adding a second page in the multipage stream from image2.tif
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image2.tif")
 oGdPictureImaging.TiffAddToMultiPageFile(TiffID, ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 'adding a third page in the multipage stream from image3.tif
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image3.tif")
 oGdPictureImaging.TiffAddToMultiPageFile(TiffID, ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.TiffCloseMultiPageFile(TiffID) 'end the file
 oGdPictureImaging.ReleaseGdPictureImage(TiffID) 'releasing the input bitmap from the memory
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffAddToMultiPageFile(System.Int32,System.Int32,GdPicture12.TiffCompression,System.Int32)">
      <summary>
 Adds a page to a multipage tiff file created with the TiffSaveAsMultiPageFile() method.
 </summary>
      <param name="TiffImageID">GdPicture Image Identifier. The GdPicture image used with the
 TiffSaveAsMultiPageFile() method. This must be the first image ot the
 file.</param>
      <param name="ImageID">GdPicture Image Identifier. The image to append within multipage tiff
 file. You will be able to release this image after calling this
 method.</param>
      <param name="PageCompression">A member of the TiffCompression enumeration. The scheme to use for compressing the page.</param>
      <param name="JpegQuality">Defines the compression quality, between 1 (worst quality) and 100 (better quality). This parameter is ignored when the specified compression scheme is different than JPEG.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffSaveAsMultiPageFile(System.Int32,System.IO.Stream,GdPicture12.TiffCompression)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffCloseMultiPageFile(System.Int32)" />
      <remarks>
 Use the TiffCloseMultiPageFile() method when you don't want to append new page to the multipage
 tiff file.
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Creating a multipage tiff image from 3 separated tiff images." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID, TiffID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image1.tif")
 oGdPictureImaging.TiffSaveAsMultiPageFile(ImageID, "multipage.tif", TiffCompression.TiffCompressionAUTO)
 'At this step ImageID1 handles a reference to the multipage tiff stream.
 TiffID = ImageID
 'adding a second page in the multipage stream from image2.tif
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image2.tif")
 oGdPictureImaging.TiffAddToMultiPageFile(TiffID, ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 'adding a third page in the multipage stream from image3.tif
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image3.tif")
 oGdPictureImaging.TiffAddToMultiPageFile(TiffID, ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.TiffCloseMultiPageFile(TiffID) 'end the file
 oGdPictureImaging.ReleaseGdPictureImage(TiffID) 'releasing the input bitmap from the memory
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TiffCloseMultiPageFile(System.Int32)">
      <summary>
 Terminates and closes a multipage tiff file created with the TiffSaveAsMultiPageFile() method.
 </summary>
      <param name="TiffImageID">GdPicture Image Identifier. The GdPicture image stored as the first page of
 the multipage tiff file. You will be able to release this image after calling this method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffSaveAsMultiPageFile(System.Int32,System.IO.Stream,GdPicture12.TiffCompression)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TiffAddToMultiPageFile(System.Int32,System.Int32)" />
      <example>
        <code description="Creating a multipage tiff image from 3 separated tiff images." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID, TiffID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image1.tif")
 oGdPictureImaging.TiffSaveAsMultiPageFile(ImageID, "multipage.tif", TiffCompression.TiffCompressionAUTO)
 'At this step ImageID1 handles a reference to the multipage tiff stream.
 TiffID = ImageID
 'adding a second page in the multipage stream from image2.tif
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image2.tif")
 oGdPictureImaging.TiffAddToMultiPageFile(TiffID, ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 'adding a third page in the multipage stream from image3.tif
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image3.tif")
 oGdPictureImaging.TiffAddToMultiPageFile(TiffID, ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.TiffCloseMultiPageFile(TiffID) 'end the file
 oGdPictureImaging.ReleaseGdPictureImage(TiffID) 'releasing the input bitmap from the memory
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharConfidence(System.Int32)">
      <summary>
 Returns the confidence of one of the characters recognized during the last OCR process
 done by the OCRTesseractDoOCR() method.
 </summary>
      <param name="CharNo">The character index between 1 and the number of recognized characters returned
 by the OCRTesseractGetCharCount() method.</param>
      <returns>
 Confidence between 0 and 100. 0=rejected, 100=perfect
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharCount" />
      <remarks>
        <para>
 This method must be used only after the OCRTesseractDoOCR() method.
 </para>
        <para>
 By default the engine set the level confidence to word level. 
 Turning it to character level can be achieved by calling OCRTesseractSetVariable("save_blob_choices", "T") before starting the recognition process.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="Using OCR and storing confidence of characters in an array" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 Dim ncpt As Integer
 Dim sOCR As String
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    Dim Confidence(oGdPictureImaging.OCRTesseractGetCharCount) As Single
    If CheckBox1.Checked = False Then
       For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
          Confidence(ncpt) = oGdPictureImaging.OCRTesseractGetCharConfidence(ncpt)
       Next ncpt
    End If
    oGdPictureImaging.OCRTesseractClear()
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharSpaces(System.Int32)">
      <summary>
 Returns the number of spaces detected before a character recognized during the last OCR
 process done by the OCRTesseractDoOCR() method.
 </summary>
      <param name="CharNo">The character index between 1 and the number of recognized characters returned
 by the OCRTesseractGetCharCount() method.</param>
      <returns>
 The number of spaces detected before the character.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharCount" />
      <remarks>
        <para>
 This method must be used only after the OCRTesseractDoOCR() method.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="Retrieving the number of spaces before the 26th recognized character and displaying that number in a message box." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 Dim ncpt As Integer
 Dim sOCR As String
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    Dim CharSpace As Integer
    CharSpace = oGdPictureImaging.OCRTesseractGetCharSpaces(26)
    MessageBox.Show("Number of spaces before the 26th character are: " + CharSpace.ToString())
    oGdPictureImaging.OCRTesseractClear()
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharLine(System.Int32)">
      <summary>
 Returns the line position of one of the characters recognized during the last OCR
 process done by the OCRTesseractDoOCR() method.
 </summary>
      <param name="CharNo">The character index between 1 and the number of recognized characters returned
 by the OCRTesseractGetCharCount() method.</param>
      <returns>
 The line number on which the character has been detected.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharCount" />
      <remarks>
        <para>
 This method must be used only after the OCRTesseractDoOCR() method.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="Displaying the number of the line the 26th character recognized by the OCR is in." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 Dim ncpt As Integer
 Dim sOCR As String
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    Dim CharLine As Integer
    CharLine = oGdPictureImaging.OCRTesseractGetCharLine(26)
    MessageBox.Show("The 26th character is located in line number: " + CharLine.ToString())
    oGdPictureImaging.OCRTesseractClear()
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharWord(System.Int32)">
      <summary>
 Returns the word position of one of the characters recognized during the last OCR
 process done by the OCRTesseractDoOCR() method.
 </summary>
      <param name="CharNo">The character index between 1 and the number of recognized characters returned
 by the OCRTesseractGetCharCount() method.</param>
      <returns>
 The word number on which the character has been detected.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharCount" />
      <remarks>
        <para>
 This method must be used only after the OCRTesseractDoOCR() method.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="Displaying the number of the word the 26th character recognized by the OCR is in." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 Dim ncpt As Integer
 Dim sOCR As String
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    Dim CharWord As Integer = oGdPictureImaging.OCRTesseractGetCharWord(26)
    MessageBox.Show("The 26th character is located in word number: " + CharWord.ToString())
    oGdPictureImaging.OCRTesseractClear()
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharCode(System.Int32)">
      <summary>
 Returns the Unicode character code of one of the characters recognized during the last OCR process
 done by the OCRTesseractDoOCR() method.
 </summary>
      <param name="CharNo">The character index between 1 and the number of recognized characters returned
 by the OCRTesseractGetCharCount() method.</param>
      <returns>
 The Unicode char code.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharCount" />
      <remarks>
        <para>
 This method must be used only after the OCRTesseractDoOCR() method.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="Retrieving the unicode character code of the 26th character recognized in a document." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 Dim ncpt As Integer
 Dim sOCR As String
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    Dim CharCode As Integer
    CharCode = oGdPictureImaging.OCRTesseractGetCharCode(26)
    MessageBox.Show("The 26th character is: " + CharCode.ToString())
    oGdPictureImaging.OCRTesseractClear()
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharLeft(System.Int32)">
      <summary>
 Returns the left position, in pixel, of one of the characters recognized during the last
 OCR process done by the OCRTesseractDoOCR() method.
 </summary>
      <param name="CharNo">The character index between 1 and the number of recognized characters returned
 by the OCRTesseractGetCharCount() method.</param>
      <returns>
 The left position in pixel.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharRight(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharBottom(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharTop(System.Int32)" />
      <remarks>
        <para>
 This method must be used only after the OCRTesseractDoOCR() method.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="Using OCR and drawing rectangles around Text areas" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim ncpt As Integer
 Dim sOCR As String
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    If CheckBox1.Checked = False Then
       For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
          Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
          oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
          1, oGdPictureImaging.ARGB(255,255,0,0), False)
       Next ncpt
    End If
    oGdPictureImaging.OCRTesseractClear()
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharRight(System.Int32)">
      <summary>
 Returns the right position, in pixel, of one of the characters recognized during the last
 OCR process done by the OCRTesseractDoOCR() method.
 </summary>
      <param name="CharNo">The character index between 1 and the number of recognized characters returned
 by the OCRTesseractGetCharCount() method.</param>
      <returns>
 The right position in pixel.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharLeft(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharBottom(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharTop(System.Int32)" />
      <remarks>
        <para>
 This method must be used only after the OCRTesseractDoOCR() method.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="Using OCR and drawing rectangles around Text areas" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim ncpt As Integer
 Dim sOCR As String
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    If CheckBox1.Checked = False Then
       For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
          Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
          oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
          1, oGdPictureImaging.ARGB(255,255,0,0), False)
       Next ncpt
    End If
    oGdPictureImaging.OCRTesseractClear()
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharBottom(System.Int32)">
      <summary>
 Returns the bottom position, in pixel, of one of the characters recognized during the
 last OCR process done by the OCRTesseractDoOCR() method.
 </summary>
      <param name="CharNo">The character index between 1 and the number of recognized characters returned
 by the OCRTesseractGetCharCount() method.</param>
      <returns>
 The bottom position in pixel.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharLeft(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharRight(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharTop(System.Int32)" />
      <remarks>
        <para>
 This method must be used only after the OCRTesseractDoOCR() method.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="Using OCR and drawing rectangles around Text areas" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim ncpt As Integer
 Dim sOCR As String
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    If CheckBox1.Checked = False Then
       For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
          Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
          oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
          1, oGdPictureImaging.ARGB(255,255,0,0), False)
       Next ncpt
    End If
    oGdPictureImaging.OCRTesseractClear()
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharTop(System.Int32)">
      <summary>
 Returns the top position, in pixel, of one of the characters recognized during the last
 OCR process done by the OCRTesseractDoOCR() method.
 </summary>
      <param name="CharNo">The character index between 1 and the number of recognized characters returned
 by the OCRTesseractGetCharCount() method.</param>
      <returns>
 The bottom position in pixel.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharLeft(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharRight(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharBottom(System.Int32)" />
      <remarks>
        <para>
 This method must be used only after the OCRTesseractDoOCR() method.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="Using OCR and drawing rectangles around Text areas" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim ncpt As Integer
 Dim sOCR As String
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    If CheckBox1.Checked = False Then
       For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
          Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
          oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
          1, oGdPictureImaging.ARGB(255,255,0,0), False)
       Next ncpt
    End If
    oGdPictureImaging.OCRTesseractClear()
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharCount">
      <summary>
 Returns the number of characters recognized during the last OCR process done by the
 OCRTesseractDoOCR() method.
 </summary>
      <returns>
 The number of characters recognized.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)" />
      <remarks>
        <para>
 This method must be used only after the OCRTesseractDoOCR() method.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="Using OCR and drawing rectangles around Text areas" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim ncpt As Integer
 Dim sOCR As String
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    If CheckBox1.Checked = False Then
       For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
          Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
          oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
          1, oGdPictureImaging.ARGB(255,255,0,0), False)
       Next ncpt
    End If
    oGdPictureImaging.OCRTesseractClear()
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)">
      <summary>
 Starts a character recognition process on a GdPicture image or on an area of a GdPicture image defined by SetROI() method.
 For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for Spanish, "eng" for English, "fra" for French...
 The name of a dictionary file has a predefined structure: [LANGUAGE].traineddata, where [LANGUAGE] defines the language.
 Multiple dictionaries may be combined with the "+" separator, for instance English with French is "eng+fra".
 Check appendix Tesseract OCR Language Dictionaries for additional information.</param>
      <param name="DictionaryPath">The path into which the engine can find the dictionary files.</param>
      <param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
 * If you want to recognize only numeric you can use "0123456789".
 * If you want to recognize only uppercase alpha you can use
 "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
 Use empty string to recognize all characters.</param>
      <returns>
 The recognized text.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)" />
      <remarks>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="Using OCR and storing confidence of characters in an array" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 Dim ncpt As Integer
 Dim sOCR As String
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    Dim Confidence(oGdPictureImaging.OCRTesseractGetCharCount) As Single
    If CheckBox1.Checked = False Then
       For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
          Confidence(ncpt) = oGdPictureImaging.OCRTesseractGetCharConfidence(ncpt)
       Next ncpt
    End If
    oGdPictureImaging.OCRTesseractClear()
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String,System.Int32)">
      <summary>
 Starts a character recognition process on a GdPicture image or on an area of a GdPicture image
 defined by SetROI() method.
 For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
 This method takes a timeout parameter.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for Spanish, "eng" for English, "fra" for French...
 The name of a dictionary file has a predefined structure: [LANGUAGE].traineddata, where [LANGUAGE] defines the language.
 Multiple dictionaries may be combined with the "+" separator, for instance English with French is "eng+fra".
 Check appendix Tesseract OCR Language Dictionaries for additional information.</param>
      <param name="DictionaryPath">The path into which the engine can find the dictionary files.</param>
      <param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
 * If you want to recognize only numeric you can use "0123456789".
 * If you want to recognize only uppercase alpha you can use
 "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
 Use empty string to recognize all characters.</param>
      <param name="Timeout">Timeout of the engine, in milliseconds. Set 0 for no timeout.</param>
      <returns>
 The recognized text.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractGetCharCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)" />
      <remarks>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="Using OCR and storing confidence of characters in an array, with a time out of the engine equal to one second." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 Dim ncpt As Integer
 Dim sOCR As String
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "", 1000)
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    Dim Confidence(oGdPictureImaging.OCRTesseractGetCharCount) As Single
    If CheckBox1.Checked = False Then
       For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
          Confidence(ncpt) = oGdPictureImaging.OCRTesseractGetCharConfidence(ncpt)
       Next ncpt
    End If
    oGdPictureImaging.OCRTesseractClear()
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractSetOCRContext(GdPicture12.OCRContext)">
      <summary>
 Defines the context of the next OCR process.
 </summary>
      <param name="Context">A member of the OCRContext enumeration. Default value is OCRContextDocument.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)" />
      <example>
        <code description="Using OCR and storing confidence of characters in an array, with an OCR context of single column." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 Dim ncpt As Integer
 Dim sOCR As String
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 oGdPictureImaging.OCRTesseractSetOCRContext(OCRContext.OCRContextSingleColumn)
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    Dim Confidence(oGdPictureImaging.OCRTesseractGetCharCount) As Single
    If CheckBox1.Checked = False Then
       For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
          Confidence(ncpt) = oGdPictureImaging.OCRTesseractGetCharConfidence(ncpt)
       Next ncpt
    End If
    oGdPictureImaging.OCRTesseractClear()
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractSetVariable(System.String,System.String)">
      <summary>
 Tesseract engine has a large number of control parameters to modify its behavior. This method permits to assign them.
 </summary>
      <param name="Name">The name of the parameter. Possible values are listed here: https://code.google.com/p/tesseract-ocr/wiki/ControlParams and here http://www.sk-spell.sk.cx/tesseract-ocr-parameters-in-302-version.</param>
      <param name="Value">The value to apply.</param>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractGetOrientation(System.Int32,System.String,System.String)">
      <summary>
 Tries to determine the orientation of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for Spanish, "eng" for English, "fra" for French...
 The name of a dictionary file has a predefined structure: [LANGUAGE].traineddata, where [LANGUAGE] defines the language.
 Multiple dictionaries may be combined with the "+" separator, for instance English with French is "eng+fra".
 Check appendix Tesseract OCR Language Dictionaries for additional information.</param>
      <param name="DictionaryPath">The path into which the engine can find the dictionary files.</param>
      <returns>
 0 if no rotation has been detected, 90 if the document has a 90° rotation, 180 if the document has a 180° rotation or 270 if the document has a 270° rotation.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method succeeded. A status of 9 (Aborted) indicates that too few characters have been detected to determine the page orientation.
 </remarks>
      <example>
        <code description="Determines the orientation of a document" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ncpt As Integer
 Dim sOCR As String
 Dim rotation As Integer
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 ocrRotateFileType = oGdPictureImaging.OCRTesseractGetOrientation(ImageID, "eng", "Dictionaries")
 MessageBox,Show("This page has a rotation of " + str(rotation) + " deg.")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractGetOrientation(System.Int32,System.String,System.String,System.Single)">
      <summary>
 Tries to determine the orientation of a GdPicture image. This
 method allows to define a level of accuracy.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for Spanish, "eng" for English, "fra" for French...
 The name of a dictionary file has a predefined structure: [LANGUAGE].traineddata, where [LANGUAGE] defines the language.
 Multiple dictionaries may be combined with the "+" separator, for instance English with French is "eng+fra".
 Check appendix Tesseract OCR Language Dictionaries for additional information.</param>
      <param name="DictionaryPath">The path into which the engine can find the dictionary files.</param>
      <param name="AccuracyLevel">Level of accuracy from 0 (Poor accuracy, hight speed) to 10 (best accuracy, low speed). Default value is 5.</param>
      <returns>
 0 if no rotation has been detected, 90 if the document has a 90° rotation, 180 if the document has a 180° rotation or 270 if the document has a 270° rotation.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method succeeded. A status of 9 (Aborted) indicates that too few characters have been detected to determine the page orientation.
 </remarks>
      <example>
        <code description="Determines the orientation of a document with accuracy level of 8." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 Dim ncpt As Integer
 Dim sOCR As String
 Dim rotation As Integer
 ocrRotateFileType = oGdPictureImaging.OCRTesseractGetOrientation(ImageID, "eng", "Dictionaries", 8)
 MessageBox.Show("This page has a rotation of " + rotation.ToString() + " deg.")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractClear">
      <summary>
 This method to release from memory all information about the last OCR process done by the
 OCRTesseractDoOCR() method.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)" />                                                                                   \
 <example><code description="Using OCR and drawing rectangles around Text areas" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim ncpt As Integer
 Dim sOCR As String
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    If CheckBox1.Checked = False Then
       For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
          Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
          oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
          1, oGdPictureImaging.ARGB(255,255,0,0), False)
       Next ncpt
    End If
    oGdPictureImaging.OCRTesseractClear()
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code></example></member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)">
      <summary>
 Set the number of 'learning pass' for each recognition process.
 </summary>
      <param name="PassCount">The number of passes. Use 0 for automatic (defaut value). Use 1 to obtain the best speed. Use 2 to favor accuracy (slower).</param>
      <remarks>
        <para>
 This method has incidence on SaveAsPDFOCR, PdfAddGdPictureImageToPdfOCR, PdfOCRCreateFromMultipageTIFF
 &amp; OCRTesseractDoOCR.
 </para>
      </remarks>
      <example>
        <code description="Using OCR and drawing rectangles around Text areas" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim ncpt As Integer
 Dim sOCR As String
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    If CheckBox1.Checked = False Then
       For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
          Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
          oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
          1, oGdPictureImaging.ARGB(255,255,0,0), False)
       Next ncpt
    End If
    oGdPictureImaging.OCRTesseractClear()
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractSetMinCharHeight(System.Int32)">
      <summary>
 Defines a minimum height for recognized characters.
 </summary>
      <param name="MinCharHeight">The minimum height. Use 0 for no filter.</param>
      <remarks>
        <para>
 This method has incidence on SaveAsPDFOCR, PdfAddGdPictureImageToPdfOCR, PdfOCRCreateFromMultipageTIFF
 &amp; OCRTesseractDoOCR.
 </para>
      </remarks>
      <example>
        <code description="Using OCR and drawing rectangles around Text areas, and setting the maximum and minimum height and width of the characters to be recognized." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim ncpt As Integer
 Dim sOCR As String
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 oGdPictureImaging.OCRTesseractSetMaxCharHeight(25)
 oGdPictureImaging.OCRTesseractSetMaxCharWidth(25)
 oGdPictureImaging.OCRTesseractSetMinCharHeight(25)
 oGdPictureImaging.OCRTesseractSetMinCharWidth(25)
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    If CheckBox1.Checked = False Then
       For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
          Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
          oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
          1, oGdPictureImaging.ARGB(255,255,0,0), False)
       Next ncpt
    End If
    oGdPictureImaging.OCRTesseractClear()
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractSetMinCharWidth(System.Int32)">
      <summary>
 Defines a minimum width for recognized characters.
 </summary>
      <param name="MinCharWidth">The minimum width. Use 0 for no filter.</param>
      <remarks>
        <para>
 This method has incidence on SaveAsPDFOCR, PdfAddGdPictureImageToPdfOCR, PdfOCRCreateFromMultipageTIFF
 &amp; OCRTesseractDoOCR.
 </para>
      </remarks>
      <example>
        <code description="Using OCR and drawing rectangles around Text areas, and setting the maximum and minimum height and width of the characters to be recognized." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim ncpt As Integer
 Dim sOCR As String
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 oGdPictureImaging.OCRTesseractSetMaxCharHeight(25)
 oGdPictureImaging.OCRTesseractSetMaxCharWidth(25)
 oGdPictureImaging.OCRTesseractSetMinCharHeight(25)
 oGdPictureImaging.OCRTesseractSetMinCharWidth(25)
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    If CheckBox1.Checked = False Then
       For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
          Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
          oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
          1, oGdPictureImaging.ARGB(255,255,0,0), False)
       Next ncpt
    End If
    oGdPictureImaging.OCRTesseractClear()
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractSetMaxCharHeight(System.Int32)">
      <summary>
 Defines a maximum height for recognized characters.
 </summary>
      <param name="MaxCharHeight">The maximum height. Use 0 for no filter.</param>
      <remarks>
        <para>
 This method has incidence on SaveAsPDFOCR, PdfAddGdPictureImageToPdfOCR, PdfOCRCreateFromMultipageTIFF
 &amp; OCRTesseractDoOCR.
 </para>
      </remarks>
      <example>
        <code description="Using OCR and drawing rectangles around Text areas, and setting the maximum and minimum height and width of the characters to be recognized." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim ncpt As Integer
 Dim sOCR As String
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 oGdPictureImaging.OCRTesseractSetMaxCharHeight(25)
 oGdPictureImaging.OCRTesseractSetMaxCharWidth(25)
 oGdPictureImaging.OCRTesseractSetMinCharHeight(25)
 oGdPictureImaging.OCRTesseractSetMinCharWidth(25)
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    If CheckBox1.Checked = False Then
       For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
          Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
          oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
          1, oGdPictureImaging.ARGB(255,255,0,0), False)
       Next ncpt
    End If
    oGdPictureImaging.OCRTesseractClear()
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractSetMaxCharWidth(System.Int32)">
      <summary>
 Defines a maximum height for recognized characters.
 </summary>
      <param name="MaxCharWidth">The maximum width. Use 0 for no filter.</param>
      <remarks>
        <para>
 This method has incidence on SaveAsPDFOCR, PdfAddGdPictureImageToPdfOCR, PdfOCRCreateFromMultipageTIFF
 &amp; OCRTesseractDoOCR.
 </para>
      </remarks>
      <example>
        <code description="Using OCR and drawing rectangles around Text areas, and setting the maximum and minimum height and width of the characters to be recognized." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim ncpt As Integer
 Dim sOCR As String
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 oGdPictureImaging.OCRTesseractSetMaxCharHeight(25)
 oGdPictureImaging.OCRTesseractSetMaxCharWidth(25)
 oGdPictureImaging.OCRTesseractSetMinCharHeight(25)
 oGdPictureImaging.OCRTesseractSetMinCharWidth(25)
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    If CheckBox1.Checked = False Then
       For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
          Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
          oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
          1, oGdPictureImaging.ARGB(255,255,0,0), False)
       Next ncpt
    End If
    oGdPictureImaging.OCRTesseractClear()
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.OCRTesseractReinit">
      <summary>
 The tesseract engine is based on a learning algorithm. Therefore, accuracy of a character recognition
 process can depend on previous OCR process.
 Call this method to reinitialize the Tesseract engine in its default configuration and clear the adaptive data.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)" />
      <remarks>
        <para>
 This method has incidence on SaveAsPDFOCR, PdfAddGdPictureImageToPdfOCR, PdfOCRCreateFromMultipageTIFF
 &amp; OCRTesseractDoOCR.
 </para>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="Using OCR and drawing rectangles around Text areas" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim ncpt As Integer
 Dim sOCR As String
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.OCRTesseractReinit()
 oGdPictureImaging.OCRTesseractSetPassCount(1) 'favoring speed. Use 2 to favor quality.
 sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "Dictionaries", "")
 If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
    MessageBox.show("Needed dictionary is not into the specified path! ")
 Else
    If CheckBox1.Checked = False Then
       For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
          Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
          oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
          oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
          1, oGdPictureImaging.ARGB(255,255,0,0), False)
       Next ncpt
    End If
    oGdPictureImaging.OCRTesseractClear()
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsPDFOCR(System.Int32,System.IO.Stream,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
      <summary>
 Saves a GdPicture image as single page searchable PDF stream and performs an OCR recognition.
 The recognized text is written invisibly to the PDF in order to simplify indexing and search.
 For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="PDFStream">The Stream object to save a GdPicture image.</param>
      <param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for Spanish, "eng" for English, "fra" for French...
 The name of a dictionary file has a predefined structure: [LANGUAGE].traineddata, where [LANGUAGE] defines the language.
 Multiple dictionaries may be combined with the "+" separator, for instance English with French is "eng+fra".
 Check appendix Tesseract OCR Language Dictionaries for additional information.</param>
      <param name="DictionaryPath">The path into which the engine can find the dictionary files.</param>
      <param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
 * If you want to recognize only numeric you can use "0123456789".
 * If you want to recognize only uppercase alpha you can use
 "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
 Use empty string to recognize all characters.</param>
      <param name="PDFA">True to generate PDF in PDF/A 1-b format else False.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <returns>
 The recognized text.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)" />
      <remarks>
        <para>Use the GetStat() method to determine if this method succeeded.</para>
        <para>The resulting document will be compressed using JPEG with a quality set to 75.</para>
      </remarks>
      <example>
        <code description="Saving an image as a single page searchable PDF stream file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim PDFStream As IO.Stream = New IO.MemoryStream
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsPDFOCR(ImageID, PDFStream, "eng", "dictionaries", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", True, "GdPicturePDFFile", "GdPicture",
    "MultiPage Searchable PDF", "", "User")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsPDFOCR(System.Int32,System.IO.Stream,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,GdPicture12.PdfEncryption,GdPicture12.PdfRight,System.String,System.String)">
      <summary>
 Saves a GdPicture image as single page searchable PDF stream with encryption and performs an OCR
 recognition.
 The recognized text is written invisibly to the PDF in order to simplify indexing and search.
 For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="PDFStream">The Stream object to save a GdPicture image.</param>
      <param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for Spanish, "eng" for English, "fra" for French...
 The name of a dictionary file has a predefined structure: [LANGUAGE].traineddata, where [LANGUAGE] defines the language.
 Multiple dictionaries may be combined with the "+" separator, for instance English with French is "eng+fra".
 Check appendix Tesseract OCR Language Dictionaries for additional information.</param>
      <param name="DictionaryPath">The path into which the engine can find the dictionary files.</param>
      <param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
 * If you want to recognize only numeric you can use "0123456789".
 * If you want to recognize only uppercase alpha you can use
 "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
 Use empty string to recognize all characters.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is not
 yet available.</param>
      <param name="Rights">A value returned by the PdfCreateRights method.</param>
      <param name="UserPassword">The user password for the PDF. Can be an empty string.</param>
      <param name="OwnerPassword">The owner password for the PDF. Can be an empty string.</param>
      <returns>
 The recognized text.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)" />
      <remarks>
        <para>Use the GetStat() method to determine if this method succeeded.</para>
        <para>The resulting document will be compressed using JPEG with a quality set to 75.</para>
      </remarks>
      <example>
        <code description="Saving an image as a single page searchable PDF stream file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim PDFStream As IO.Stream = New IO.MemoryStream
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsPDFOCR(ImageID, PDFStream, "eng", "dictionaries", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "GdPicturePDFFile", "GdPicture",
    "MultiPage Searchable PDF", "", "User", PdfEncryption.PdfEncryption128BitAES,
    PdfRight.PdfRightCanAddNotes, "Password1", "Password2")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsPDFOCR(System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
      <summary>
 Saves a GdPicture image as single page searchable PDF and performs an OCR recognition.
 The recognized text is written invisibly to the PDF in order to simplify indexing and search.
 For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">The complete PDF file path to save a GdPicture image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for Spanish, "eng" for English, "fra" for French...
 The name of a dictionary file has a predefined structure: [LANGUAGE].traineddata, where [LANGUAGE] defines the language.
 Multiple dictionaries may be combined with the "+" separator, for instance English with French is "eng+fra".
 Check appendix Tesseract OCR Language Dictionaries for additional information.</param>
      <param name="DictionaryPath">The path into which the engine can find the dictionary files.</param>
      <param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
 * If you want to recognize only numeric you can use "0123456789".
 * If you want to recognize only uppercase alpha you can use
 "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
 Use empty string to recognize all characters.</param>
      <param name="PDFA">True to generate PDF in PDF/A 1-b format else False.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <returns>
 The recognized text.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)" />
      <remarks>
        <para>Use the GetStat() method to determine if this method succeeded.</para>
        <para>The resulting document will be compressed using JPEG with a quality set to 75.</para>
      </remarks>
      <example>
        <code description="Saving an image as a single page searchable PDF file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsPDFOCR(ImageID, "output.pdf", "eng", "dictionaries", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", True, "GdPicturePDFFile", "GdPicture",
    "MultiPage Searchable PDF", "", "User")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsPDFOCR(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,GdPicture12.PdfEncryption,GdPicture12.PdfRight,System.String,System.String)">
      <summary>
 Saves a GdPicture image as single page searchable PDF with encryption and performs an OCR
 recognition.
 The recognized text is written invisibly to the PDF in order to simplify indexing and search.
 For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">The complete PDF file path to save a GdPicture image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for Spanish, "eng" for English, "fra" for French...
 The name of a dictionary file has a predefined structure: [LANGUAGE].traineddata, where [LANGUAGE] defines the language.
 Multiple dictionaries may be combined with the "+" separator, for instance English with French is "eng+fra".
 Check appendix Tesseract OCR Language Dictionaries for additional information.</param>
      <param name="DictionaryPath">The path into which the engine can find the dictionary files.</param>
      <param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
 * If you want to recognize only numeric you can use "0123456789".
 * If you want to recognize only uppercase alpha you can use
 "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
 Use empty string to recognize all characters.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is not
 yet available.</param>
      <param name="Rights">A value returned by the PdfCreateRights method.</param>
      <param name="UserPassword">The user password for the PDF. Can be an empty string.</param>
      <param name="OwnerPassword">The owner password for the PDF. Can be an empty string.</param>
      <returns>
 The recognized text.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)" />
      <remarks>
        <para>Use the GetStat() method to determine if this method succeeded.</para>
        <para>The resulting document will be compressed using JPEG with a quality set to 75.</para>
      </remarks>
      <example>
        <code description="Saving an image as a single page searchable PDF file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsPDFOCR(ImageID, "output.pdf", "eng", "dictionaries", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "GdPicturePDFFile", "GdPicture",
    "MultiPage Searchable PDF", "", "User", PdfEncryption.PdfEncryption128BitAES,
    PdfRight.PdfRightCanAddNotes, "Password1", "Password2")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PdfAddGdPictureImageToPdfOCR(System.Int32,System.Int32,System.String,System.String,System.String)">
      <summary>
 Important: Here for backward compatibility. This method is obsolete, please use the GdPicturePDF class instead.
 Appends a GdPicture Image into the multipage PDF file created by the PdfOCRStart() or
 PdfOCRStart() method.
 For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
 </summary>
      <param name="PdfID">A PDF identifier returned by the PdfOCRStart() method.</param>
      <param name="ImageID">The GdPicture Image to add to the multipage PDF.</param>
      <param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for Spanish, "eng" for English, "fra" for French...
 The name of a dictionary file has a predefined structure: [LANGUAGE].traineddata, where [LANGUAGE] defines the language.
 Multiple dictionaries may be combined with the "+" separator, for instance English with French is "eng+fra".
 Check appendix Tesseract OCR Language Dictionaries for additional information.</param>
      <param name="DictionaryPath">The path into which the engine can find the dictionary files.</param>
      <param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
 * If you want to recognize only numeric you can use "0123456789".
 * If you want to recognize only uppercase alpha you can use
 "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
 Use empty string to recognize all characters.</param>
      <returns>
 The recognized text.
 </returns>
      <remarks>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.PdfOCRStart(System.IO.Stream,System.Boolean,System.String,System.String,System.String,System.String,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.PdfOCRStop(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)" />
      <example>
        <code description="How to scan pages of a document feeder to a multipage searchable PDF file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim bContinue As Boolean = True
 Dim PdfID As Integer
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainSetAutoFeed(True)
 oGdPictureImaging.TwainSetAutoScan(True)
 PdfID = oGdPictureImaging.PdfOCRStart("output.pdf", True, "", "", "", "", "")
 If PdfID &lt;&gt; 0 Then
    While bContinue
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       oGdPictureImaging.PdfAddGdPictureImageToPdfOCR(PdfID, ImageID, "eng", "Program FilesGdPicture.NETRedistOCR", "")
       oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       bContinue = (oGdPictureImaging.TwainGetState &gt; TwainStatus.TWAIN_SOURCE_ENABLED)
    End While
    oGdPictureImaging.PdfOCRStop(PdfID)
 End If
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PdfAddGdPictureImageToPdfOCR(System.Int32,System.Int32,System.String,System.String,System.String,System.Int32)">
      <summary>
 Important: Here for backward compatibility. This method is obsolete, please use the GdPicturePDF class instead.
 Appends a GdPicture Image into the multipage PDF file created by the PdfOCRStart() or
 PdfOCRStart() method. This method takes a time-out parameter.
 For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
 </summary>
      <param name="PdfID">A PDF identifier returned by the PdfOCRStart() method.</param>
      <param name="ImageID">The GdPicture Image to add to the multipage PDF.</param>
      <param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for Spanish, "eng" for English, "fra" for French...
 The name of a dictionary file has a predefined structure: [LANGUAGE].traineddata, where [LANGUAGE] defines the language.
 Multiple dictionaries may be combined with the "+" separator, for instance English with French is "eng+fra".
 Check appendix Tesseract OCR Language Dictionaries for additional information.</param>
      <param name="DictionaryPath">The path into which the engine can find the dictionary files.</param>
      <param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
 * If you want to recognize only numeric you can use "0123456789".
 * If you want to recognize only uppercase alpha you can use
 "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
 Use empty string to recognize all characters.</param>
      <param name="Timeout">Timeout of the engine, in milliseconds. Set 0 for no timeout.</param>
      <returns>
 The recognized text.
 </returns>
      <remarks>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.PdfOCRStart(System.IO.Stream,System.Boolean,System.String,System.String,System.String,System.String,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.PdfOCRStop(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)" />
      <example>
        <code description="How to scan pages of a document feeder to a multipage searchable PDF file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim bContinue As Boolean = True
 Dim PdfID As Integer
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainSetAutoFeed(True)
 oGdPictureImaging.TwainSetAutoScan(True)
 PdfID = oGdPictureImaging.PdfOCRStart("output.pdf", True, "", "", "", "", "")
 If PdfID &lt;&gt; 0 Then
    While bContinue
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       oGdPictureImaging.PdfAddGdPictureImageToPdfOCR(PdfID, ImageID, "eng", "Program FilesGdPicture.NETRedistOCR", "")
       oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       bContinue = (oGdPictureImaging.TwainGetState &gt; TwainStatus.TWAIN_SOURCE_ENABLED)
    End While
    oGdPictureImaging.PdfOCRStop(PdfID)
 End If
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PdfOCRStop(System.Int32)">
      <summary>
 Important: Here for backward compatibility. This method is obsolete, please use the GdPicturePDF class instead.
 Saves and closes the PDF file created by the PdfOCRStart() method. If the source of the PDF is a Stream object it remains open.
 </summary>
      <param name="PdfID">A PDF identifier returned by the PdfOCRStart() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to scan pages of a document feeder to a multipage searchable PDF file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim bContinue As Boolean = True
 Dim PdfID As Integer
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainSetAutoFeed(True)
 oGdPictureImaging.TwainSetAutoScan(True)
 PdfID = oGdPictureImaging.PdfOCRStart("output.pdf", True, "", "", "", "", "")
 If PdfID &lt;&gt; 0 Then
    While bContinue
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       oGdPictureImaging.PdfAddGdPictureImageToPdfOCR(PdfID, ImageID, "eng", "Program FilesGdPicture.NETRedistOCR", "")
       oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       bContinue = (oGdPictureImaging.TwainGetState &gt; TwainStatus.TWAIN_SOURCE_ENABLED)
    End While
    oGdPictureImaging.PdfOCRStop(PdfID)
 End If
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.PdfOCRStart(System.IO.Stream,System.Boolean,System.String,System.String,System.String,System.String,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.PdfAddGdPictureImageToPdfOCR(System.Int32,System.Int32,System.String,System.String,System.String)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PdfOCRStart(System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
      <summary>
 Important: Here for backward compatibility. This method is obsolete, please use the GdPicturePDF class instead.
 Creates an empty searchable PDF file in order to transfer multiple page using the
 PdfAddGdPictureImageToPdfOCR() until the PdfOCRStop() method is called.
 The recognized text will be written invisibly to the PDF in order to simplify indexing and search.
 </summary>
      <param name="FilePath">The path of the PDF to create. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="PDFA">True to generate PDF in PDF/A 1-b format else False.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <returns>
 0: The PDF could not created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: A PDF Identifier.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.PdfAddGdPictureImageToPdfOCR(System.Int32,System.Int32,System.String,System.String,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.PdfOCRStop(System.Int32)" />
      <example>
        <code description="How to scan pages of a document feeder to a multipage searchable PDF file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim bContinue As Boolean = True
 Dim PdfID As Integer
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainSetAutoFeed(True)
 oGdPictureImaging.TwainSetAutoScan(True)
 PdfID = oGdPictureImaging.PdfOCRStart("output.pdf", True, "", "", "", "", "")
 If PdfID &lt;&gt; 0 Then
    While bContinue
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       oGdPictureImaging.PdfAddGdPictureImageToPdfOCR(PdfID, ImageID, "eng", "Program FilesGdPicture.NETRedistOCR", "")
       oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       bContinue = (oGdPictureImaging.TwainGetState &gt; TwainStatus.TWAIN_SOURCE_ENABLED)
    End While
    oGdPictureImaging.PdfOCRStop(PdfID)
 End If
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
      <remarks>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PdfOCRStart(System.String,System.String,System.String,System.String,System.String,System.String,GdPicture12.PdfEncryption,GdPicture12.PdfRight,System.String,System.String)">
      <summary>
 Important: Here for backward compatibility. This method is obsolete, please use the GdPicturePDF class instead.
 Creates an empty searchable PDF file with encryption in order to transfer multiple page using the
 PdfAddGdPictureImageToPdfOCR() until the PdfOCRStop() method is called.
 The recognized text will be written invisibly to the PDF in order to simplify indexing and search.
 </summary>
      <param name="FilePath">The path of the PDF to create. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is
 not yet available.</param>
      <param name="Rights">A value returned by the PdfCreateRights method.</param>
      <param name="UserPassword">The user password for the PDF. Can be an empty string.</param>
      <param name="OwnerPassword">The owner password for the PDF. Can be an empty string.</param>
      <returns>
 0: The PDF could not created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: A PDF Identifier.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.PdfAddGdPictureImageToPdfOCR(System.Int32,System.Int32,System.String,System.String,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.PdfOCRStop(System.Int32)" />
      <example>
        <code description="How to scan pages of a document feeder to a multipage searchable PDF file with 128 bits RC4 encryption." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim bContinue As Boolean = True
 Dim PdfID As Integer
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainSetAutoFeed(True)
 oGdPictureImaging.TwainSetAutoScan(True)
 PdfID = oGdPictureImaging.PdfOCRStart("output.pdf", "", "", "", "", "", PdfEncryption.PdfEncryption128BitRC4,PdfRight.PdfRightCanView or PdfRight.PdfRightCanPrint,"UserPass", OwnerPass")
 If PdfID &lt;&gt; 0 Then
    While bContinue
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       oGdPictureImaging.PdfAddGdPictureImageToPdfOCR(PdfID, ImageID, "eng", "Program FilesGdPicture.NETRedistOCR", "")
       oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       bContinue = (oGdPictureImaging.TwainGetState &gt; TwainStatus.TWAIN_SOURCE_ENABLED)
    End While
    oGdPictureImaging.PdfOCRStop(PdfID)
 End If
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
      <remarks>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PdfOCRStart(System.IO.Stream,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
      <summary>
 Important: Here for backward compatibility. This method is obsolete, please use the GdPicturePDF class instead.
 Creates an empty searchable PDF stream in order to transfer multiple page using the
 PdfAddGdPictureImageToPdfOCR() until the PdfOCRStop() method is called.
 The recognized text will be written invisibly to the PDF in order to simplify indexing and search.
 </summary>
      <param name="PDFStream">The Stream object to save the PDF.</param>
      <param name="PDFA">True to generate PDF in PDF/A 1-b format else False.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <returns>
 0: The PDF could not created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: A PDF Identifier.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.PdfAddGdPictureImageToPdfOCR(System.Int32,System.Int32,System.String,System.String,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.PdfOCRStop(System.Int32)" />
      <example>
        <code description="How to scan pages of a document feeder to a multipage searchable PDF file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim PDFStream As IO.Stream = New IO.MemoryStream
 Dim bContinue As Boolean = True
 Dim PdfID As Integer
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainSetAutoFeed(True)
 oGdPictureImaging.TwainSetAutoScan(True)
 PdfID = oGdPictureImaging.PdfOCRStart(PDFStream, True, "", "", "", "", "")
 If PdfID &lt;&gt; 0 Then
    While bContinue
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       oGdPictureImaging.PdfAddGdPictureImageToPdfOCR(PdfID, ImageID, "eng", "Program FilesGdPicture.NETRedistOCR", "")
       oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       bContinue = (oGdPictureImaging.TwainGetState &gt; TwainStatus.TWAIN_SOURCE_ENABLED)
    End While
    oGdPictureImaging.PdfOCRStop(PdfID)
 End If
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
      <remarks>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PdfOCRStart(System.IO.Stream,System.String,System.String,System.String,System.String,System.String,GdPicture12.PdfEncryption,GdPicture12.PdfRight,System.String,System.String)">
      <summary>
 Important: Here for backward compatibility. This method is obsolete, please use the GdPicturePDF class instead.
 Creates an empty searchable PDF stream with encryption in order to transfer multiple page using the
 PdfAddGdPictureImageToPdfOCR() until the PdfOCRStop() method is called.
 The recognized text will be written invisibly to the PDF in order to simplify indexing and search.
 </summary>
      <param name="PDFStream">The Stream object to save the PDF.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is
 not yet available.</param>
      <param name="Rights">A value returned by the PdfCreateRights method.</param>
      <param name="UserPassword">The user password for the PDF. Can be an empty string.</param>
      <param name="OwnerPassword">The owner password for the PDF. Can be an empty string.</param>
      <returns>
 0: The PDF could not created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: A PDF Identifier.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.PdfAddGdPictureImageToPdfOCR(System.Int32,System.Int32,System.String,System.String,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.PdfOCRStop(System.Int32)" />
      <example>
        <code description="How to scan pages of a document feeder to a multipage searchable PDF file with 128 bits RC4 encryption." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim PDFStream As IO.Stream = New IO.MemoryStream
 Dim bContinue As Boolean = True
 Dim PdfID As Integer
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainSetAutoFeed(True)
 oGdPictureImaging.TwainSetAutoScan(True)
 PdfID = oGdPictureImaging.PdfOCRStart(PDFStream, "", "", "", "", "", PdfEncryption.PdfEncryption128BitRC4,PdfRight.PdfRightCanView or PdfRight.PdfRightCanPrint,"UserPass", OwnerPass")
 If PdfID &lt;&gt; 0 Then
    While bContinue
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       oGdPictureImaging.PdfAddGdPictureImageToPdfOCR(PdfID, ImageID, "eng", "Program FilesGdPicture.NETRedistOCR", "")
       oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       bContinue = (oGdPictureImaging.TwainGetState &gt; TwainStatus.TWAIN_SOURCE_ENABLED)
    End While
    oGdPictureImaging.PdfOCRStop(PdfID)
 End If
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
      <remarks>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PdfOCRCreateFromMultipageTIFF(System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
      <summary>
 Creates a multipage searchable PDF from a multipage tiff image and performs an OCR recognition. This
 image can be a read only multipage tiff image or an editable multipage tiff image. The recognized
 text is written invisibly to the PDF in order to simplify indexing and search.
 For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multipage tiff image to save as PDF.</param>
      <param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for Spanish, "eng" for English, "fra" for French...
 The name of a dictionary file has a predefined structure: [LANGUAGE].traineddata, where [LANGUAGE] defines the language.
 Multiple dictionaries may be combined with the "+" separator, for instance English with French is "eng+fra".
 Check appendix Tesseract OCR Language Dictionaries for additional information.</param>
      <param name="DictionaryPath">The path into which the engine can find the dictionary files.</param>
      <param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
 * If you want to recognize only numeric you can use "0123456789".
 * If you want to recognize only uppercase alpha you can use
 "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
 Use empty string to recognize all characters.</param>
      <param name="FilePath">The complete PDF file path to save a GdPicture image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="PDFA">True to generate PDF in PDF/A 1-b format else False.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <returns>
 The recognized text.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)" />
      <remarks>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="Creating an searchable multipage pdf based on an a multipage tiff that is processed through the OCR engine." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.TiffIsMultiPage(ImageID) Then
       oGdPictureImaging.PdfOCRCreateFromMultipageTIFF(ImageID, "eng", "dictionaries", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "output.pdf", true, "GdPicturePDFFile",
       "GdPicture", "MultiPage Searchable PDF", "", "User")
       oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    Else
       MessageBox.Show("The image is not a multipage tiff image")
    End If
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PdfOCRCreateFromMultipageTIFF(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,GdPicture12.PdfEncryption,GdPicture12.PdfRight,System.String,System.String)">
      <summary>
 Creates a multipage searchable PDF with encryption from a multipage tiff image and performs an OCR
 recognition. This image can be a read only multipage tiff image or an editable multipage tiff image.
 The recognized text is written invisibly to the PDF in order to simplify indexing and search.
 For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multipage tiff image to save as PDF.</param>
      <param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for Spanish, "eng" for English, "fra" for French...
 The name of a dictionary file has a predefined structure: [LANGUAGE].traineddata, where [LANGUAGE] defines the language.
 Multiple dictionaries may be combined with the "+" separator, for instance English with French is "eng+fra".
 Check appendix Tesseract OCR Language Dictionaries for additional information.</param>
      <param name="DictionaryPath">The path into which the engine can find the dictionary files.</param>
      <param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
 * If you want to recognize only numeric you can use "0123456789".
 * If you want to recognize only uppercase alpha you can use
 "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
 Use empty string to recognize all characters.</param>
      <param name="FilePath">The complete PDF file path to save a GdPicture image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is not
 yet available.</param>
      <param name="Rights">A value returned by the PdfCreateRights method.</param>
      <param name="UserPassword">The user password for the PDF. Can be an empty string.</param>
      <param name="OwnerPassword">The owner password for the PDF. Can be an empty string.</param>
      <returns>
 The recognized text.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)" />
      <remarks>
        <para>
 Use the GetStat() method to determine if this method succeeded.
 </para>
        <para>
 You can catch the OCRTesseractProgress event to get the progession. Use the GetStat() method to determine if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="Creating an searchable multipage pdf based on an a multipage tiff that is processed through the OCR engine." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.TiffIsMultiPage(ImageID) Then
       oGdPictureImaging.PdfOCRCreateFromMultipageTIFF(ImageID, "eng", "dictionaries", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "output.pdf", "GdPicturePDFFile",
       "GdPicture", "MultiPage Searchable PDF", "", "User", PdfEncryption.PdfEncryption128BitAES,
       PdfRight.PdfRightCanAddNotes, "Password1", "Password2")
       oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    Else
       MessageBox.Show("The image is not a multipage tiff image")
    End If
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PdfSetJpegQuality(System.Int32,System.Int32)">
      <summary>
 Important: Here for backward compatibility. This method is obsolete, please use the GdPicturePDF class instead.
 Changes the level of quality used to compress true color image data within a PDF.
 </summary>
      <param name="PdfID">A PDF identifier returned by the PdfOCRStart() method.</param>
      <param name="Quality">Compression level [0 to 100]. 0: worse quality and better compression, 100:
 best quality and worse compression.</param>
      <remarks>
        <para>
 Jpeg quality level is available only for 8bpp grayscale and non indexed color image. This method
 has not effect on 1, 4 &amp; 8 bpp (non grayscale) image compression.
 </para>
        <para>
 Use the GetStat() method to check if this method succeeded.
 </para>
      </remarks>
      <example>
        <code description="How to scan pages of a document feeder to a multipage searchable PDF file and compress true color images with JPEG compression using 75% quality." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim PDFStream As IO.Stream = New IO.MemoryStream
 Dim bContinue As Boolean = True
 Dim PdfID As Integer
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainSetAutoFeed(True)
 oGdPictureImaging.TwainSetAutoScan(True)
 oGdPictureImaging.TwainSetPixelType(TwainPixelType.TWPT_RGB)
 oGdPictureImaging.TwainSetBitDepth(24)
 PdfID = oGdPictureImaging.PdfOCRStart(PDFStream, "", "", "", "", "", PdfEncryption.PdfEncryptionNone,PdfRight.PdfRightCanView or PdfRight.PdfRightCanPrint,"UserPass", OwnerPass")
 If PdfID &lt;&gt; 0 Then
    PdfSetJpegQuality(PdfID, 75)
    While bContinue
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       oGdPictureImaging.PdfAddGdPictureImageToPdfOCR(PdfID, ImageID, "eng", "Program FilesGdPicture.NETRedistOCR", "")
       oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       bContinue = (oGdPictureImaging.TwainGetState &gt; TwainStatus.TWAIN_SOURCE_ENABLED)
    End While
    oGdPictureImaging.PdfOCRStop(PdfID)
 End If
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PdfSetCompressionForBitonalImage(System.Int32,GdPicture12.PdfCompression)">
      <summary>
 Important: Here for backward compatibility. This method is obsolete, please use the GdPicturePDF class instead.
 Changes the scheme to use to compress bitonal image data within a PDF. Default is
 PdfCompressionJBIG2 if the optional GdPicture JBIG2 Encoder Plugin has been unlocked, else
 PdfCompressionCCITT4.
 </summary>
      <param name="PdfID">A PDF identifier returned by the PdfOCRStart() method.</param>
      <param name="Compression">A member of the PdfCompression enumeration.</param>
      <remarks>Use the GetStat() method to check if this method succeeded.</remarks>
      <example>
        <code description="How to scan pages of a document feeder to a multipage searchable PDF file and compress bitonal images with JBIG2 compression." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim PDFStream As IO.Stream = New IO.MemoryStream
 Dim bContinue As Boolean = True
 Dim PdfID As Integer
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainSetAutoFeed(True)
 oGdPictureImaging.TwainSetAutoScan(True)
 oGdPictureImaging.TwainSetPixelType(TwainPixelType.TWPT_BW)
 oGdPictureImaging.TwainSetBitDepth(1)
 PdfID = oGdPictureImaging.PdfOCRStart(PDFStream, "", "", "", "", "", PdfEncryption.PdfEncryptionNone,PdfRight.PdfRightCanView or PdfRight.PdfRightCanPrint,"UserPass", OwnerPass")
 If PdfID &lt;&gt; 0 Then
    PdfSetCompressionForBitonalImage(PdfID, PdfCompression.PdfCompressionJBIG2)
    While bContinue
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       oGdPictureImaging.PdfAddGdPictureImageToPdfOCR(PdfID, ImageID, "eng", "Program FilesGdPicture.NETRedistOCR", "")
       oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       bContinue = (oGdPictureImaging.TwainGetState &gt; TwainStatus.TWAIN_SOURCE_ENABLED)
    End While
    oGdPictureImaging.PdfOCRStop(PdfID)
 End If
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PdfSetCompressionForColorImage(System.Int32,GdPicture12.PdfCompression)">
      <summary>
 Important: Here for backward compatibility. This method is obsolete, please use the GdPicturePDF class instead.
 Changes the scheme to use to compress color image data within a PDF. Default is PdfCompressionJPEG.
 PdfCompressionCCITT4 and PdfCompressionJBIG2 are not allowed.
 </summary>
      <param name="PdfID">A PDF identifier returned by the PdfOCRStart() method.</param>
      <param name="Compression">A member of the PdfCompression enumeration.</param>
      <remarks>Use the GetStat() method to check if this method succeeded.</remarks>
      <example>
        <code description="How to scan pages of a document feeder to a multipage searchable PDF file and compress colors images with JPEG compression." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim PDFStream As IO.Stream = New IO.MemoryStream
 Dim bContinue As Boolean = True
 Dim PdfID As Integer
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainSetAutoFeed(True)
 oGdPictureImaging.TwainSetAutoScan(True)
 oGdPictureImaging.TwainSetPixelType(TwainPixelType.TWPT_RGB)
 oGdPictureImaging.TwainSetBitDepth(24)
 PdfID = oGdPictureImaging.PdfOCRStart(PDFStream, "", "", "", "", "", PdfEncryption.PdfEncryptionNone,PdfRight.PdfRightCanView or PdfRight.PdfRightCanPrint,"UserPass", OwnerPass")
 If PdfID &lt;&gt; 0 Then
    PdfSetCompressionForColorImage(PdfID, PdfCompression.PdfCompressionJPEG)
    While bContinue
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       oGdPictureImaging.PdfAddGdPictureImageToPdfOCR(PdfID, ImageID, "eng", "Program FilesGdPicture.NETRedistOCR", "")
       oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       bContinue = (oGdPictureImaging.TwainGetState &gt; TwainStatus.TWAIN_SOURCE_ENABLED)
    End While
    oGdPictureImaging.PdfOCRStop(PdfID)
 End If
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetPixelArrayByte8bpp(System.Int32,System.Byte[]@,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Stores into an array of bytes the pixel indexes of an area of a paletized 8bpp GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">Output parameter. Array of pixel indexes. each entry of the array is a
 reference to a palette index [0 - 255].</param>
      <param name="SrcLeft">The left source pixel of the area.</param>
      <param name="SrcTop">The top source pixel of the area.</param>
      <param name="Width">The width of the area in pixel.</param>
      <param name="Height">The height of the area in pixel.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetPixelArrayByte8bpp(System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)" />
      <remarks>
 This method works only with 8bpp image.
 </remarks>
      <example>
        <code description="Usage of GetPixelArrayByte8bpp() and SetPixelArrayByte8bpp() methods to apply negative effect on a 8bpp grayscale GdPicture image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim arPixel() As Byte
 Dim X As Integer
 Dim Y As Integer
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("8bppimage.tif")
 If oGdPictureImaging.GetBitDepth(ImageID) = 8 Then
    Dim ImageHeight As Integer = oGdPictureImaging.GetHeight(ImageID)
    Dim ImageWidth As Integer = oGdPictureImaging.GetWidth(ImageID)
    ReDim arPixel(ImageWidth * ImageHeight)
    oGdPictureImaging.GetPixelArrayByte8bpp(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
    For X = 0 To ImageWidth - 1
       For Y = 0 To ImageHeight - 1
          arPixel((Y * ImageWidth) + X) = Not arPixel((Y * ImageWidth) + X)
       Next Y
    Next X
    oGdPictureImaging.SetPixelArrayByte8bpp(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
    oGdPictureImaging.SaveAsTIFF(ImageID, "8bppimageneg.tif", TiffCompression.TiffCompressionAUTO)
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetPixelArrayByte8bpp(System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Set pixel indexes from an array of bytes to an area of a paletized 8bpp GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">Array of pixel indexes. each entry of the array is a reference to a
 palette index [0 - 255].</param>
      <param name="SrcLeft">The left source pixel of the area.</param>
      <param name="SrcTop">The top source pixel of the area.</param>
      <param name="Width">The width of the area in pixel.</param>
      <param name="Height">The height of the area in pixel.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetPixelArrayByte8bpp(System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)" />
      <remarks>
 This method works only with 8bpp image.
 </remarks>
      <example>
        <code description="Usage of GetPixelArrayByte8bpp() and SetPixelArrayByte8bpp() methods to apply negative effect on a 8bpp grayscale GdPicture image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim arPixel() As Byte
 Dim X As Integer
 Dim Y As Integer
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("8bppimage.tif")
 If oGdPictureImaging.GetBitDepth(ImageID) = 8 Then
    Dim ImageHeight As Integer = oGdPictureImaging.GetHeight(ImageID)
    Dim ImageWidth As Integer = oGdPictureImaging.GetWidth(ImageID)
    ReDim arPixel(ImageWidth * ImageHeight)
    oGdPictureImaging.GetPixelArrayByte8bpp(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
    For X = 0 To ImageWidth - 1
       For Y = 0 To ImageHeight - 1
          arPixel((Y * ImageWidth) + X) = Not arPixel((Y * ImageWidth) + X)
       Next Y
    Next X
    oGdPictureImaging.SetPixelArrayByte8bpp(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
    oGdPictureImaging.SaveAsTIFF(ImageID, "8bppimageneg.tif", TiffCompression.TiffCompressionAUTO)
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetPixelArrayInteger(System.Int32,System.Int32[]@,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Stores into an array of Integer the ARGB pixel values of an area of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">Output parameter. Array of pixel data.</param>
      <param name="SrcLeft">The left source pixel of the area.</param>
      <param name="SrcTop">The top source pixel of the area.</param>
      <param name="Width">The width of the area in pixel.</param>
      <param name="Height">The height of the area in pixel.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetPixelArrayInteger(System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)" />
      <example>
        <code description="Usage of GetPixelArrayInteger() and SetPixelArrayInteger() methods to apply negative effect on a GdPicture image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim arPixel() As Integer
 Dim X As Integer
 Dim Y As Integer
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
 Dim ImageHeight As Integer = oGdPictureImaging.GetHeight(ImageID)
 Dim ImageWidth As Integer = oGdPictureImaging.GetWidth(ImageID)
 ReDim arPixel(ImageWidth * ImageHeight)
 oGdPictureImaging.GetPixelArrayInteger(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
 For X = 0 To ImageWidth - 1
    For Y = 0 To ImageHeight - 1
       arPixel((Y * ImageWidth) + X) = Not arPixel((Y * ImageWidth) + X)
    Next Y
 Next X
 oGdPictureImaging.SetPixelArrayInteger(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
 oGdPictureImaging.SaveAsTIFF(ImageID, "imageneg.tif", TiffCompression.TiffCompressionAUTO)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetPixelArrayInteger(System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Changes the pixel values contained into an area of a GdPicture image from an array which contains
 Integer ARBG color values.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">Array of pixel data.</param>
      <param name="DstLeft">The left destination pixel of the area.</param>
      <param name="DstTop">The top destination pixel of the area.</param>
      <param name="Width">The width of the destination area in pixel.</param>
      <param name="Height">The height of the destination area in pixel.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 The method automatically converts image pixel format to PixelFormat.Format32bppArgb.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetPixelArrayInteger(System.Int32,System.Int32[]@,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <example>
        <code description="Usage of GetPixelArrayInteger() and SetPixelArrayInteger() methods to apply negative effect on a GdPicture image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim arPixel() As Integer
 Dim X As Integer
 Dim Y As Integer
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
 Dim ImageHeight As Integer = oGdPictureImaging.GetHeight(ImageID)
 Dim ImageWidth As Integer = oGdPictureImaging.GetWidth(ImageID)
 ReDim arPixel(ImageWidth * ImageHeight)
 oGdPictureImaging.GetPixelArrayInteger(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
 For X = 0 To ImageWidth - 1
    For Y = 0 To ImageHeight - 1
       arPixel((Y * ImageWidth) + X) = Not arPixel((Y * ImageWidth) + X)
    Next Y
 Next X
 oGdPictureImaging.SetPixelArrayInteger(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
 oGdPictureImaging.SaveAsTIFF(ImageID, "imageneg.tif", TiffCompression.TiffCompressionAUTO)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetPixelArrayByte(System.Int32,System.Byte[]@,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Stores into an array of byte each Blue, Green, Red and Alpha components of the pixel contained into
 an area of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">Output parameter. Array of pixel data.</param>
      <param name="SrcLeft">The left source pixel of the area.</param>
      <param name="SrcTop">The top source pixel of the area.</param>
      <param name="Width">The width of the area in pixel.</param>
      <param name="Height">The height of the area in pixel.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetPixelArrayByte(System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)" />
      <returns>
 A member of the GdPictureStatus enumeration.
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Usage of GetPixelArrayByte() and SetPixelArrayByte() methods to apply negative effect on a GdPicture image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim arPixel() As Byte
 Dim X As Integer
 Dim Y As Integer
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
 Dim ImageHeight As Integer = oGdPictureImaging.GetHeight(ImageID)
 Dim ImageWidth As Integer = oGdPictureImaging.GetWidth(ImageID)
 ReDim arPixel(ImageWidth * ImageHeight * 4)
 oGdPictureImaging.GetPixelArrayByte(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
 For X = 0 To ImageWidth - 1
    For Y = 0 To ImageHeight - 1
       arPixel((Y * 4 * ImageWidth) + X * 4) = Not arPixel((Y * 4 * ImageWidth) + X * 4) 'Blue channel
       arPixel((Y * 4 * ImageWidth) + X * 4 + 1) = Not arPixel((Y * 4 * ImageWidth) + X * 4 + 1) 'Green channel
       arPixel((Y * 4 * ImageWidth) + X * 4 + 2) = Not arPixel((Y * 4 * ImageWidth) + X * 4 + 2) 'Red channel
       arPixel((Y * 4 * ImageWidth) + X * 4 + 3) = 255 'Alpha chanel. Set 255 for full opacity
    Next Y
 Next X
 oGdPictureImaging.SetPixelArrayByte(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
 oGdPictureImaging.SaveAsTIFF(ImageID, "imageneg.tif", TiffCompression.TiffCompressionAUTO)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetPixelArrayByte(System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Changes the pixel values contained into an area of a GdPicture image from an array which contains
 each each Blue, Green, Red and Alpha components of pixel.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">Array of pixel data.</param>
      <param name="DstLeft">The left destination pixel of the area.</param>
      <param name="DstTop">The top destination pixel of the area.</param>
      <param name="Width">The width of the destination area in pixel.</param>
      <param name="Height">The height of the destination area in pixel.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 The method automatically converts all images PixelFormat to PixelFormat.Format32bppPArgb..
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetPixelArrayByte(System.Int32,System.Byte[]@,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <example>
        <code description="Usage of GetPixelArrayByte() and SetPixelArrayByte() methods to apply negative effect on a GdPicture image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim arPixel() As Byte
 Dim X As Integer
 Dim Y As Integer
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
 Dim ImageHeight As Integer = oGdPictureImaging.GetHeight(ImageID)
 Dim ImageWidth As Integer = oGdPictureImaging.GetWidth(ImageID)
 ReDim arPixel(ImageWidth * ImageHeight * 4)
 oGdPictureImaging.GetPixelArrayByte(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
 For X = 0 To ImageWidth - 1
    For Y = 0 To ImageHeight - 1
       arPixel((Y * 4 * ImageWidth) + X * 4) = Not arPixel((Y * 4 * ImageWidth) + X * 4) 'Blue channel
       arPixel((Y * 4 * ImageWidth) + X * 4 + 1) = Not arPixel((Y * 4 * ImageWidth) + X * 4 + 1) 'Green channel
       arPixel((Y * 4 * ImageWidth) + X * 4 + 2) = Not arPixel((Y * 4 * ImageWidth) + X * 4 + 2) 'Red channel
       arPixel((Y * 4 * ImageWidth) + X * 4 + 3) = 255 'Alpha chanel. Set 255 for full opacity
    Next Y
 Next X
 oGdPictureImaging.SetPixelArrayByte(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
 oGdPictureImaging.SaveAsTIFF(ImageID, "imageneg.tif", TiffCompression.TiffCompressionAUTO)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PixelGetColor(System.Int32,System.Int32,System.Int32)">
      <summary>
 Gets the color of a specified pixel in a GdPicture image, as Color object.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="SrcLeft">Value that specifies the x-coordinate (column) of the pixel.</param>
      <param name="SrcTop">Value that specifies the y-coordinate (row) of the pixel.</param>
      <returns>
 The pixel color, as Color object.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.PixelSetColor(System.Int32,System.Int32,System.Int32,System.Drawing.Color)" />
      <example>
        <code description="Retrieving a certain pixel's color." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim PixelColor As Color
 If imageId &lt;&gt; 0 Then
    PixelColor = oGdPictureImaging.PixelGetColor(ImageID, 50, 75)
    MessageBox.Show("Color of Pixel 50, 75 is: " + PixelColor.ToString())
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PixelGetColorI(System.Int32,System.Int32,System.Int32)">
      <summary>
 Gets the color of a specified pixel in a GdPicture image, as 32-bit integer value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="SrcLeft">Value that specifies the x-coordinate (column) of the pixel.</param>
      <param name="SrcTop">Value that specifies the y-coordinate (row) of the pixel.</param>
      <returns>
 The pixel color as 32-bit integer value.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.PixelSetColorI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <example>
        <code description="Retrieving a certain pixel's color." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim PixelColor As Color
 If imageId &lt;&gt; 0 Then
    PixelColor = oGdPictureImaging.PixelGetColorI(ImageID, 50, 75)
    MessageBox.Show("Color of Pixel 50, 75 is: " + PixelColor.ToString())
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PixelSetColor(System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
 Sets the color of a specified pixel in a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Value that specifies the x-coordinate (column) of the pixel.</param>
      <param name="DstTop">Value that specifies the y-coordinate (row) of the pixel.</param>
      <param name="PixelColor">The color to apply, as Color object. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.PixelGetColor(System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Setting an image's certain pixel's color to red." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.PixelSetColor(ImageID, 50, 75, oGdPictureImaging.ARGB(255, 255, 0, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PixelSetColorI(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Sets the color of a specified pixel in a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Value that specifies the x-coordinate (column) of the pixel.</param>
      <param name="DstTop">Value that specifies the y-coordinate (row) of the pixel.</param>
      <param name="PixelColor">The color to apply, as 32-bit integer value. A suitable color value can be obtained by using the ARGBI() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.PixelGetColorI(System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Setting an image's certain pixel's color to red." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.PixelSetColorI(ImageID, 50, 75, oGdPictureImaging.ARGBI(255, 255, 0, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetStride(System.Int32)">
      <summary>
 Returns the width, in bytes, of a single row of pixel data of a GdPicture image.
 Also known as pitch or scan width, this width is a multiple, or possibly sub-multiple, of the pixel
 dimensions of the image and may be padded out to include a few more bytes.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 If success, non 0: a GdPicture image stride. If fail, 0: Use the GetStat() method to determine the
 reason this method failed.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <example>
        <code description="Retrieving the image's stride." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim ImgStride As Integer
 If imageId &lt;&gt; 0 Then
    ImgStride = oGdPictureImaging.GetStride(ImageID)
    MessageBox.Show("The stride is: " + ImgStride.ToString())
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetBits(System.Int32)">
      <summary>
 Returns a pointer to the data-bits of a GdPicture Image.
 It is up to you to interpret these bytes correctly, according to the results of GetBitDepth() and
 GetStride() methods.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 If success, non 0: A pointer to the data-bits of the bitmap. If fail, 0: Use the GetStat() method
 to determine the reason this method failed.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStride(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GetBitDepth(System.Int32)" />
      <example>
        <code description="Retrieving the image's bits." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim ImgBits As IntPtr
 If imageId &lt;&gt; 0 Then
    ImgBits = oGdPictureImaging.GetBits(ImageID)
    'You can do your processing on the bits here
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetScanLines(System.Int32)">
      <summary>
 Returns an array of pointers of all GdPicture Image scanlines.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 An array of bitmap scanlines pointer; First entry is the top scanline and latest is the bottom.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStride(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GetBitDepth(System.Int32)" />
      <example>
        <code description="Retrieving the image Array of IntPtr to scanlines.." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 Dim ScanLines() As IntPtr
 If imageId &lt;&gt; 0 Then
    ScanLines = oGdPictureImaging.GetScanLines(ImageID)
    'You can do your processing on the scanlines here
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetColorMode">
      <summary>
 Returns the active printer color Mode.
 </summary>
      <returns>
 A member of the PrinterColorMode enumeration.
 </returns>
      <example>
        <code description="Obtaining the active color mode." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 'We assume that a printer color mode has been added to oGdPictureImaging
 Dim PrinterClrMod As PrinterColorMode
 PrinterClrMod = oGdPictureImaging.PrintGetColorMode()
 'Here we can check your if the color mode is what we want and change it if needed
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetColorMode(GdPicture12.PrinterColorMode)">
      <summary>
 Sets to the active printer the color mode for the print process.
 </summary>
      <param name="ColorMode">A member of the PrinterColorMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Setting the printing color mode to gray." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.PrintSetColorMode(PrinterColorMode.PrinterColorModeGray)
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetDocumentName">
      <summary>
 Gets the document name to display during the next print process (for example, in a print status
 dialog box or printer queue) while printing the document.
 </summary>
      <returns>
 The document name to display.
 </returns>
      <example>
        <code description="Obtaining the Document Name" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 'we assume that a print document name has been set
 Dim DocumentName As String
 DocumentName = oGdPictureImaging.PrintGetDocumentName()
 'here we can change the print document name if we do not like it
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetDocumentName(System.String)">
      <summary>
 Sets the document name to display during the next print process (for example, in a print status
 dialog box or printer queue) while printing the document.
 </summary>
      <param name="DocumentName">The document name to display.</param>
      <example>
        <code description="Setting document name and printing it." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.PrintSetDocumentName("GdPicture Document")
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetShowPrintingProgress(System.Boolean)">
      <summary>
 Tells the component to show or hide progress indicator during printing (showed by default).
 </summary>
      <param name="Show">True to show progress indicators printing, else False.</param>
      <example>
        <code description="Hiding the printing progress during printing." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.PrintSetShowPrintingProgress(False)
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetPaperBin(System.Int32)">
      <summary>
 Sets the paper bin used by the active printer.
 </summary>
      <param name="PaperBin">The paper bin to use.Standard values are:
 - 1: Upper
 - 2: Lower
 - 3: Middle
 - 4: Manual
 - 5: Envelope
 - 6: ManualFeed
 - 7: AutomaticFeed
 - 8: TractorFeed
 - 9: SmallFormat
 - 10: LargeFormat
 - 11: LargeCapacity
 - 14: Cassette
 - 15: FormSource
 - 256 or higher: Custom.</param>
      <returns>
 True if the paper bin has been selected else false (unsupported paper bin).
 </returns>
      <example>
        <code description="Printing from the lower paper bin." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.PrintSetPaperBin(2)
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetPaperBin(System.Drawing.Printing.PaperSource)">
      <summary>
 Sets the paper bin to be used by the active printer.
 </summary>
      <param name="PaperBin">The paper bin to use. A PaperSource object.</param>
      <returns>
 True if the paper bin has been selected else false (unsupported paper bin).
 </returns>
      <example>
        <code description="Printing from the lower paper bin." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.PrintSetPaperBin(PapeSource.Lower)
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetPaperBin">
      <summary>
 Returns the paperbin used by the active printer.
 </summary>
      <returns>The paperbin used. Standard values are:
 - 1: Upper
 - 2: Lower
 - 3: Middle
 - 4: Manual
 - 5: Envelope
 - 6: ManualFeed
 - 7: AutomaticFeed
 - 8: TractorFeed
 - 9: SmallFormat
 - 10: LargeFormat
 - 11: LargeCapacity
 - 14: Cassette
 - 15: FormSource
 - 256 or higher: Custom
 </returns>
      <example>
        <code description="Checking whether the lower paper bin is used, if not, setting it as the used paper bin, then printing." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.PrintGetPaperBin() &lt;&gt; 2 Then
       oGdPictureImaging.PrintSetPaperBin(2)
    End If
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetFromToPage(System.Int32,System.Int32)">
      <summary>
 Ask to the component for the next print process to print a range of page with multipage tif image.
 </summary>
      <param name="FromPage">First page to print.</param>
      <param name="ToPage">Last page to print.</param>
      <example>
        <code description="Printing pages 2 to 5." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.PrintSetFromToPage(2, 5)
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetQuality">
      <summary>
 Returns the current quality of the active printer.
 </summary>
      <returns>
 A member of the PrintQuality enumeration.
 </returns>
      <example>
        <code description="Printing with high quality after making sure that it is set as the print quality." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.PrintGetQuality() &lt;&gt; PrintQuality.PrintQualityHightResolution Then
       oGdPictureImaging.PrintSetQuality(PrintQuality.PrintQualityHightResolution)
    End If
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetQuality(GdPicture12.PrintQuality)">
      <summary>
 Sets the quality of the active printer.
 </summary>
      <param name="Quality">A member of the PrintQuality enumeration.</param>
      <example>
        <code description="Setting the printing quality to high resolution." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.PrintSetQuality(PrintQuality.PrintQualityHightResolution)
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetStat">
      <summary>
 Returns the last Printer status. In case of PrintingException status the PrintGetLastError() method can be used to get more details.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintGetLastError" />
      <example>
        <code description="Printing an image and checking the status of after printing method." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.Print(ImageID)
    Dim status As GdPictureStatus = oGdPictureImaging.PrintGetStat()
    If  status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("Error: " + PrintGetLastError.ToString())
    Else
       MessageBox.Show("Printing Success!")
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetLastError">
      <summary>
 Returns the last Printer error description, if any.
 </summary>
      <returns>
 The description of the last printing error.
 </returns>
      <example>
        <code description="Printing an image and checking the status of after printing method." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.Print(ImageID)
    Dim status As GdPictureStatus = oGdPictureImaging.PrintGetStat()
    If  status &lt;&gt; GdPictureStatus.OK Then
       MessageBox.Show("Error: " + PrintGetLastError.ToString())
    Else
       MessageBox.Show("Printing Success!")
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetCopies(System.Int16)">
      <summary>
 Tell to the active printer the number of copies to print.
 </summary>
      <param name="Copies">The number of copies to print.</param>
      <example>
        <code description="Setting the number of copies to print" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.PrintSetCopies(2)
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetCopies">
      <summary>
 Returns the number of copies to print with the selected printer.
 </summary>
      <returns>
 Number of copies to print.
 </returns>
      <example>
        <code description="Printing five copies of the document." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    If  oGdPictureImaging.PrintGetCopies() &lt;&gt; 5 Then
       oGdPictureImaging.PrintSetCopies(5)
    End If
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetDuplexMode(System.Drawing.Printing.Duplex)">
      <summary>
 Sets duplex mode for the selected printer.
 </summary>
      <param name="DuplexMode">A member of the Duplex enumeration.</param>
      <example>
        <code description="Printing using a horizontal duplex mode." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    If  oGdPictureImaging.PrintGetDuplexMode() &lt;&gt; Duplex.Horizontal Then
       oGdPictureImaging.PrintSetDuplexMode(Duplex.Horizontal)
    End If
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetDuplexMode">
      <summary>
 Returns the print duplex mode for the selected printer.
 </summary>
      <returns>
 A member of the Duplex enumeration.
 </returns>
      <example>
        <code description="Obtaining the duplex mode for the selected printer" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    If  oGdPictureImaging.PrintGetDuplexMode() &lt;&gt; Duplex.Horizontal Then
       oGdPictureImaging.PrintSetDuplexMode(Duplex.Horizontal)
    End If
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetCollate(System.Boolean)">
      <summary>
 Sets document collate mode for the selected printer.
 </summary>
      <param name="Collate">True is the printed document is collated, False otherwise..</param>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetCollate">
      <summary>
 Returns whether the printed document is collated.
 </summary>
      <returns>
 True is the printed document is collated, False otherwise.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintShowPrinterSettingsDialog(System.IntPtr)">
      <summary>
 Prompts the selected printer driver settings dialog.
 </summary>
      <param name="HANDLE">A handle to the parent window of the printer-configuration property sheet.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetOrientation(GdPicture12.PrinterOrientation)">
      <summary>
 Defines the page orientation when printing.
 </summary>
      <param name="Orientation">A member of the PrinterOrientation enumeration.</param>
      <example>
        <code description="Setting the print orientation to portrait." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    If  oGdPictureImaging.PrintGetOrientation() &lt;&gt; PrinterOrientation.PrinterOrientationPortrait Then
       oGdPictureImaging.PrintSetOrientation(PrinterOrientation.PrinterOrientationPortrait)
    End If
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetOrientation">
      <summary>
 Returns the page orientation when printing.
 </summary>
      <returns>
 A member of the PrinterOrientation enumeration.
 </returns>
      <example>
        <code description="Obtaining the orientation of the page when printing." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    If  oGdPictureImaging.PrintGetOrientation() &lt;&gt; PrinterOrientation.PrinterOrientationPortrait Then
       oGdPictureImaging.PrintSetOrientation(PrinterOrientation.PrinterOrientationPortrait)
    End If
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetActivePrinter">
      <summary>
 Returns the selected printer name.
 </summary>
      <returns>
 The name of the selected printer.
 </returns>
      <example>
        <code description="Obtaining the active printer's name." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 'we assume that an active printer is set
 Dim sPrinter As String
 sPrinter = oGdPictureImaging.PrintGetActivePrinter()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetActivePrinter(System.String)">
      <summary>
 Changes the active printer.
 </summary>
      <param name="PrinterName">The name of the new active printer.</param>
      <returns>
 True if success, else False.
 </returns>
      <example>
        <code description="Setting the active printer." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim sPrinter As String
 Dim ActiveFound As Boolean
 sPrinter = "GdPicture Printer"
 ActiveFound = oGdPictureImaging.PrintSetActivePrinter(sPrinter)
 If ActiveFound = True Then
    Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
    If imageId &lt;&gt; 0 Then
       oGdPictureImaging.Print(ImageID)
       oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    Else
       MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
    End If
 Else
    MessageBox.show("Printer Not Found")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetPrinterSettings(System.Drawing.Printing.PrinterSettings)">
      <summary>
 Sets the current printer settings.
 </summary>
      <param name="PS">A System.Drawing.Printing.PrinterSettings object. The printer settings.</param>
      <example>
        <code description="Setting printer settings." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("intput.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.PrintSetPrinterSettings(Drawing.Printing.PrinterSettings.PaperSizeCollection)
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetPrinterSettings">
      <summary>
 Returns the current printer settings.
 </summary>
      <returns>
 A System.Drawing.Printing.PrinterSettings object. The current printer settings.
 </returns>
      <example>
        <code description="Obtaining the current printer's settings." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 'We assume that the printer settings are set here
 Dim pSettings As Drawing.Printing.PrinterSettings
 pSettings = oGdPictureImaging.PrintGetPrinterSettings()
 'here we can change the printer settings to what we want
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetPrintersCount">
      <summary>
 Returns the number of available printers.
 </summary>
      <returns>
 Number of printers.
 </returns>
      <example>
        <code description="Obtaining the number of available printers." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim PrintersCount As Integer
 PrintersCount = oGdPictureImaging.PrintGetPrintersCount()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetPrinterName(System.Int32)">
      <summary>
 Returns the name of an available printer.
 </summary>
      <param name="PrinterNo">Value between 1 and printer count.</param>
      <returns>
 The name of the printer.
 </returns>
      <example>
        <code description="Obtaining the name of an available printer" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim PrinterName As String
 PrinterName = oGdPictureImaging.PrintGetPrinterName(3)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintDialog(System.Int32)">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 True if success, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintGetStat" />
      <example>
        <code description="Printing image through the system printing dialog box." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    oGdPictureImaging.PrintSetAutoRotation(True)
    oGdPictureImaging.PrintSetAlignment(PrintAlignment.PrintAlignmentMiddleCenter)
    oGdPictureImaging.PrintDialog(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintDialog(System.Int32,System.Windows.Forms.IWin32Window)">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints a GdPicture image.
 This method allows to specify the top-level window that will own the modal dialog box.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="owner">Represents the top-level window that will own the modal dialog box.</param>
      <returns>
 True if success, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintGetStat" />
      <example>
        <code description="Printing image through the system printing dialog box." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    oGdPictureImaging.PrintSetAutoRotation(True)
    oGdPictureImaging.PrintSetAlignment(PrintAlignment.PrintAlignmentMiddleCenter)
    oGdPictureImaging.PrintDialog(ImageID, Me)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintDialogFit(System.Int32)">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints a GdPicture image adjusting the picture size to the default paper size.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 True if success, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintGetStat" />
      <example>
        <code description="Printing image with fit mode and automatic rotation through the system printing dialog box." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    oGdPictureImaging.PrintSetAutoRotation(True)
    oGdPictureImaging.PrintSetAlignment(PrintAlignment.PrintAlignmentMiddleCenter)
    oGdPictureImaging.PrintDialogFit(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintDialogFit(System.Int32,System.Windows.Forms.IWin32Window)">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints a GdPicture image adjusting the picture size to the default paper size.
 This method allows to specify the top-level window that will own the modal dialog box.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="owner">Represents the top-level window that will own the modal dialog box.</param>
      <returns>
 True if success, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintGetStat" />
      <example>
        <code description="Printing image with fit mode and automatic rotation through the system printing dialog box." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    oGdPictureImaging.PrintSetAutoRotation(True)
    oGdPictureImaging.PrintSetAlignment(PrintAlignment.PrintAlignmentMiddleCenter)
    oGdPictureImaging.PrintDialogFit(ImageID, Me)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintDialogBySize(System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints a GdPicture image with specific size and position.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate (in inches) of the upper-left corner of the image
 into the paper.</param>
      <param name="DstTop">Specifies the y-coordinate (in inches) of the upper-left corner of the image
 into the paper.</param>
      <param name="Width">Specifies the width (in inches) of image into the paper.</param>
      <param name="Height">Specifies the height (in inches) of image into the paper.</param>
      <returns>
 True if success, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintGetStat" />
      <example>
        <code description="Printing image through the system printing dialog box, in A4 format." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    oGdPictureImaging.PrintSetAutoRotation(True)
    oGdPictureImaging.PrintSetAlignment(PrintAlignment.PrintAlignmentMiddleCenter)
    oGdPictureImaging.PrintDialog(ImageID, 0, 0, 8.27, 11.69)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintDialogBySize(System.Int32,System.Windows.Forms.IWin32Window,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints a GdPicture image with specific size and position.
 This method allows to specify the top-level window that will own the modal dialog box.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="owner">Represents the top-level window that will own the modal dialog box.</param>
      <param name="DstLeft">Specifies the x-coordinate (in inches) of the upper-left corner of the image
 into the paper.</param>
      <param name="DstTop">Specifies the y-coordinate (in inches) of the upper-left corner of the image
 into the paper.</param>
      <param name="Width">Specifies the width (in inches) of image into the paper.</param>
      <param name="Height">Specifies the height (in inches) of image into the paper.</param>
      <returns>
 True if success, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintGetStat" />
      <example>
        <code description="Printing image through the system printing dialog box, in A4 format." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    oGdPictureImaging.PrintSetAutoRotation(True)
    oGdPictureImaging.PrintSetAlignment(PrintAlignment.PrintAlignmentMiddleCenter)
    oGdPictureImaging.PrintDialog(ImageID, Me, 0, 0, 8.27, 11.69)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Print(System.Int32)">
      <summary>
 Prints a GdPicture image to the active printer.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintGetStat" />
      <example>
        <code description="Printing image with fit mode and automatic rotation." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    oGdPictureImaging.PrintSetAutoRotation(True)
    oGdPictureImaging.PrintSetAlignment(PrintAlignment.PrintAlignmentMiddleCenter)
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintFit(System.Int32)">
      <summary>
 Prints a GdPicture image to the active printer. Adjusts the picture size to the default paper size.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintGetStat" />
      <example>
        <code description="Printing image with fit mode and automatic rotation." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    oGdPictureImaging.PrintSetAutoRotation(True)
    oGdPictureImaging.PrintSetAlignment(PrintAlignment.PrintAlignmentMiddleCenter)
    oGdPictureImaging.PrintFit(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintBySize(System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Prints a GdPicture image to the active printer with specific size and position.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="DstLeft">Specifies the x-coordinate (in inches) of the upper-left corner of the image
 into the paper.</param>
      <param name="DstTop">Specifies the y-coordinate (in inches) of the upper-left corner of the image
 into the paper.</param>
      <param name="Width">Specifies the width (in inches) of image into the paper.</param>
      <param name="Height">Specifies the height (in inches) of image into the paper.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintGetStat" />
      <example>
        <code description="Printing image in A4." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    oGdPictureImaging.PrintSetAutoRotation(True)
    oGdPictureImaging.PrintSetAlignment(PrintAlignment.PrintAlignmentMiddleCenter)
    oGdPictureImaging.PrintDialog(ImageID, 50, 50, 150, 200)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetStdPaperSize(System.Int32)">
      <summary>
 Sets a standard paper size to use by the active printer.
 </summary>
      <param name="PaperSize">
        <list type="bullet">
          <item>
            <term>1</term>
            <description>Letter, 8½ x 11 in.</description>
          </item>
          <item>
            <term>2</term>
            <description>Letter Small, 8½ x 11 in.</description>
          </item>
          <item>
            <term>3</term>
            <description>Tabloid, 11 x 17 in.</description>
          </item>
          <item>
            <term>4</term>
            <description>Ledger, 17 x 11 in.</description>
          </item>
          <item>
            <term>5</term>
            <description>Legal, 8 ½ x 14 in.</description>
          </item>
          <item>
            <term>6</term>
            <description>Statement, 5 1/2 x 8 1/2 in.</description>
          </item>
          <item>
            <term>7</term>
            <description>Executive, 7 1/2 x 10 1/2 in.</description>
          </item>
          <item>
            <term>8</term>
            <description>A3, 297 x 420 mm</description>
          </item>
          <item>
            <term>9</term>
            <description>A4, 210 x 297 mm</description>
          </item>
          <item>
            <term>10</term>
            <description>A4 Small, 210 x 297 mm</description>
          </item>
          <item>
            <term>11</term>
            <description>A5, 148 x 210 mm</description>
          </item>
          <item>
            <term>12</term>
            <description>B4, 250 x 354 mm</description>
          </item>
          <item>
            <term>13</term>
            <description>B5, 182 x 257 mm</description>
          </item>
          <item>
            <term>14</term>
            <description>Folio, 8 ½ x 13 in.</description>
          </item>
          <item>
            <term>15</term>
            <description>Quarto, 215 x 275 mm</description>
          </item>
          <item>
            <term>16</term>
            <description>10 x 14 in.</description>
          </item>
          <item>
            <term>17</term>
            <description>11 x 17 in.</description>
          </item>
          <item>
            <term>18</term>
            <description>Note, 8 ½ x 11 in.</description>
          </item>
          <item>
            <term>19</term>
            <description>Envelope #9, 3 7/8 x 8 7/8 in.</description>
          </item>
          <item>
            <term>20</term>
            <description>Envelope #10, 4 1/8 x 9 ½ in.</description>
          </item>
          <item>
            <term>21</term>
            <description>Envelope #11, 4 ½ x 10 3/8 in.</description>
          </item>
          <item>
            <term>22</term>
            <description>Envelope #12, 4 ½ x 11 in.</description>
          </item>
          <item>
            <term>23</term>
            <description>Envelope #14, 5 x 11 ½ in.</description>
          </item>
          <item>
            <term>24</term>
            <description>C size sheet</description>
          </item>
          <item>
            <term>25</term>
            <description>D size sheet</description>
          </item>
          <item>
            <term>26</term>
            <description>E size sheet</description>
          </item>
          <item>
            <term>27</term>
            <description>Envelope DL, 110 x 220 mm</description>
          </item>
          <item>
            <term>28</term>
            <description>Envelope C5, 162 x 229 mm</description>
          </item>
          <item>
            <term>29</term>
            <description>Envelope C3, 324 x 458 mm</description>
          </item>
          <item>
            <term>30</term>
            <description>Envelope C4, 229 x 324 mm</description>
          </item>
          <item>
            <term>31</term>
            <description>Envelope C6, 114 x 162 mm</description>
          </item>
          <item>
            <term>32</term>
            <description>Envelope C65, 114 x 229 mm</description>
          </item>
          <item>
            <term>33</term>
            <description>Envelope B4, 250 x 353 mm</description>
          </item>
          <item>
            <term>34</term>
            <description>Envelope B5, 176 x 250 mm</description>
          </item>
          <item>
            <term>35</term>
            <description>Envelope B6, 176 x 125 mm</description>
          </item>
          <item>
            <term>36</term>
            <description>Envelope, 110 x 230 mm</description>
          </item>
          <item>
            <term>37</term>
            <description>Envelope Monarch, 3 7/8 x 7 ½ in.</description>
          </item>
          <item>
            <term>38</term>
            <description>Envelope, 3 5/8 x 6 ½ in.</description>
          </item>
          <item>
            <term>39</term>
            <description>U.S. Standard Fanfold, 14 7/8 x 11 in.</description>
          </item>
          <item>
            <term>40</term>
            <description>German Standard Fanfold, 8 ½ x 12 in.</description>
          </item>
          <item>
            <term>41</term>
            <description>German Legal Fanfold, 8 1/2 x 13 in.</description>
          </item>
          <item>
            <term>42 to 68</term>
            <description>Less-common international sizes.</description>
          </item>
          <item>
            <term>Greater than 118</term>
            <description>A custom paper size.</description>
          </item>
        </list>
      </param>
      <example>
        <code description="Printing after seting paper size to ledger." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    oGdPictureImaging.PrintSetStdPaperSize(4)
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetPaperSize(System.Drawing.Printing.PaperSize)">
      <summary>
 Sets the paper size to be used by the active printer.
 </summary>
      <param name="PaperSize">Paper size. A PaperSize object.</param>
      <example>
        <code description="Printing a document on a A4 size paper." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    oGdPictureImaging.PrintSetPaperSize(PaperSize.PaperA4)
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetUserPaperSize(System.Single,System.Single)">
      <summary>
 Sets a custom paper size to use by the active printer.
 </summary>
      <param name="PaperWidth">Custom paper width in Inches.</param>
      <param name="PaperHeight">Custom paper height in Inches.</param>
      <example>
        <code description="Printing after seting the height and the width of the printing." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    oGdPictureImaging.PrintSetUserPaperSize(150.0, 300.0)
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetPaperHeight">
      <summary>
 Gets the paper height used by the active printer.
 </summary>
      <returns>
 The paper height in Inches.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintGetPaperSize" />
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintGetPaperWidth" />
      <example>
        <code description="Obtaining the height of the paper to be printed on." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    If oGdPictureImaging.PrintGetPaperHeight() &lt;&gt; 300.0 Or oGdPictureImaging.PrintGetPaperWidth() &lt;&gt; 150.0 Then
       oGdPictureImaging.PrintSetPaperSize(150.0, 300.0)
    End If
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetPaperWidth">
      <summary>
 Gets the paper width used by the active printer.
 </summary>
      <returns>
 The paper width in Inches.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintGetPaperSize" />
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintGetPaperHeight" />
      <example>
        <code description="Obtaining the width of the paper to be printed on." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    If oGdPictureImaging.PrintGetPaperHeight() &lt;&gt; 300.0 Or oGdPictureImaging.PrintGetPaperWidth() &lt;&gt; 150.0 Then
       oGdPictureImaging.PrintSetPaperSize(150.0, 300.0)
    End If
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetAlignment">
      <summary>
 Gets the image alignment into the page during a print process.
 </summary>
      <returns>
 A member of the PrintAlignment enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintSetAlignment(GdPicture12.PrintAlignment)" />
      <example>
        <code description="Making sure paper alignment is middle left, if not setting it to be so." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    If oGdPictureImaging.PrintGetPaperHeight() &lt;&gt; PrintAlignment.PrintAlignmentMiddleLeft Then
       oGdPictureImaging.PrintSetAlignment(PrintAlignment.PrintAlignmentMiddleLeft)
    End If
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetAlignment(GdPicture12.PrintAlignment)">
      <summary>
 Sets the image alignment into the page during a print process.
 </summary>
      <param name="Alignment">A member of the PrintAlignment enumeration.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintGetAlignment" />
      <example>
        <code description="Making sure paper alignment is middle left, if not setting it to be so." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    If oGdPictureImaging.PrintGetPaperHeight() &lt;&gt; PrintAlignment.PrintAlignmentMiddleLeft Then
       oGdPictureImaging.PrintSetAlignment(PrintAlignment.PrintAlignmentMiddleLeft)
    End If
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintSetAutoRotation(System.Boolean)">
      <summary>
 Determines if the object should rotate automatically the pages to fit on the output medium.
 </summary>
      <param name="AutoRotation">True for automatic rotation, else False.</param>
      <example>
        <code description="Setting AutoRotation for printing to true prior to printing document." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    oGdPictureImaging.PrintSetAutoRotation(True)
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetPaperSize">
      <summary>
 Returns the current paper size of the active printer.
 </summary>
      <returns>
 Paper size constant. Can be:
 <list type="bullet"><item><term>1</term><description>Letter, 8.5 x 11 in.</description></item><item><term>2</term><description>Letter Small, 8.5 x 11 in.</description></item><item><term>3</term><description>Tabloid, 11 x 17 in.</description></item><item><term>4</term><description>Ledger, 17 x 11 in.</description></item><item><term>5</term><description>Legal, 8.5 x 14 in.</description></item><item><term>6</term><description>Statement, 5 1/2 x 8 1/2 in.</description></item><item><term>7</term><description>Executive, 7 1/2 x 10 1/2 in.</description></item><item><term>8</term><description>A3, 297 x 420 mm</description></item><item><term>9</term><description>A4, 210 x 297 mm</description></item><item><term>10</term><description>A4 Small, 210 x 297 mm</description></item><item><term>11</term><description>A5, 148 x 210 mm</description></item><item><term>12</term><description>B4, 250 x 354 mm</description></item><item><term>13</term><description>B5, 182 x 257 mm</description></item><item><term>14</term><description>Folio, 8.5 x 13 in.</description></item><item><term>15</term><description>Quarto, 215 x 275 mm</description></item><item><term>16</term><description>10 x 14 in.</description></item><item><term>17</term><description>11 x 17 in.</description></item><item><term>18</term><description>Note, 8.5 x 11 in.</description></item><item><term>19</term><description>Envelope #9, 3 7/8 x 8 7/8 in.</description></item><item><term>20</term><description>Envelope #10, 4 1/8 x 9.5 in.</description></item><item><term>21</term><description>Envelope #11, 4.5 x 10 3/8 in.</description></item><item><term>22</term><description>Envelope #12, 4.5 x 11 in.</description></item><item><term>23</term><description>Envelope #14, 5 x 11.5 in.</description></item><item><term>24</term><description>C size sheet</description></item><item><term>25</term><description>D size sheet</description></item><item><term>26</term><description>E size sheet</description></item><item><term>27</term><description>Envelope DL, 110 x 220 mm</description></item><item><term>28</term><description>Envelope C5, 162 x 229 mm</description></item><item><term>29</term><description>Envelope C3, 324 x 458 mm</description></item><item><term>30</term><description>Envelope C4, 229 x 324 mm</description></item><item><term>31</term><description>Envelope C6, 114 x 162 mm</description></item><item><term>32</term><description>Envelope C65, 114 x 229 mm</description></item><item><term>33</term><description>Envelope B4, 250 x 353 mm</description></item><item><term>34</term><description>Envelope B5, 176 x 250 mm</description></item><item><term>35</term><description>Envelope B6, 176 x 125 mm</description></item><item><term>36</term><description>Envelope, 110 x 230 mm</description></item><item><term>37</term><description>Envelope Monarch, 3 7/8 x 7.5 in.</description></item><item><term>38</term><description>Envelope, 3 5/8 x 6.5 in.</description></item><item><term>39</term><description>U.S. Standard Fanfold, 14 7/8 x 11 in.</description></item><item><term>40</term><description>German Standard Fanfold, 8.5 x 12 in.</description></item><item><term>41</term><description>German Legal Fanfold, 8 1/2 x 13 in.</description></item><item><term>42 to 68</term><description>Less-common international sizes.</description></item><item><term>Greater than 118</term><description>A custom paper size.</description></item></list></returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintGetPaperWidth" />
      <seealso cref="M:GdPicture12.GdPictureImaging.PrintGetPaperHeight" />
      <example>
        <code description="Making sure print paper size is set to ledger, if not making it so." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim pageCount As Integer = oGdPictureImaging.TiffGetPageCount(ImageID)
    If pageCount &gt; 1 Then
       oGdPictureImaging.PrintSetFromToPage(1, pageCount)
    End If
    If oGdPictureImaging.PrintGetPaperSize() &lt;&gt; 4 Then
       oGdPictureImaging.PrintSetStdPaperSize(4)
    End If
    oGdPictureImaging.Print(ImageID)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PrintGetMargins(System.Single@,System.Single@)">
      <summary>
 Gets the physical margins of the active printer.
 </summary>
      <param name="LeftMargin">Returns the left physical margin in inches.</param>
      <param name="TopMargin">Returns the top physical margin in inches.</param>
      <example>
        <code description="Getting the margins of the parint paper." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim LeftMargin As Single
 Dim TopMargin As Single
 'Assume a paper size has been set
 oGdPictureImaging.PrintGetMargins(LeftMargin, TopMargin)
 'Here we can change the paper size if the margins are not suitable
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGdPictureImageOnHDC(System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Draws a GdPicture image into a HDC (Handle to Device Context).
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Image to draw.</param>
      <param name="hdc">Device Context destination.</param>
      <param name="DstLeft">Left pixel destination of the HDC.</param>
      <param name="DstTop">Top pixel destination of the HDC.</param>
      <param name="DstWidth">Width, in pixel, of the drawn image.</param>
      <param name="DstHeight">Height, in pixel, of the drawn image.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGdPictureImageOnGraphics(System.Int32,System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Draws a GdPicture image into a graphics object.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Image to draw.</param>
      <param name="g">Graphics destination.</param>
      <param name="DstLeft">Left pixel destination of the graphics.</param>
      <param name="DstTop">Top pixel destination of the graphics.</param>
      <param name="DstWidth">Width, in pixel, of the drawn image.</param>
      <param name="DstHeight">Height, in pixel, of the drawn image.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGdPictureImageOnHwnd(System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Draws a GdPicture image into a window defined by a Window Handle.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Image to draw.</param>
      <param name="HANDLE">Window Handle destination.</param>
      <param name="DstLeft">Left pixel destination of the window.</param>
      <param name="DstTop">Top pixel destination of the window.</param>
      <param name="DstWidth">Width, in pixel, of the drawn image.</param>
      <param name="DstHeight">Height, in pixel, of the drawn image.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetDesktopHwnd" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGdPictureImageRectOnHDC(System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Draws a portion of a GdPicture image into a HDC (Handle to Device Context).
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Image to draw.</param>
      <param name="hdc">Device Context destination.</param>
      <param name="DstLeft">Left pixel destination of the HDC.</param>
      <param name="DstTop">Top pixel destination of the HDC.</param>
      <param name="DstWidth">Width, in pixel, of the drawn image.</param>
      <param name="DstHeight">Height, in pixel, of the drawn image.</param>
      <param name="SrcLeft">Left pixel source of the image to draw.</param>
      <param name="SrcTop">Top pixel source of the image to draw.</param>
      <param name="SrcWidth">Width portion, in pixel, of the image to draw.</param>
      <param name="SrcHeight">Height portion, in pixel, of the image to draw.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGdPictureImageRectOnGraphics(System.Int32,System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Draws a portion of a GdPicture image into a graphics object.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Image to draw.</param>
      <param name="g">Graphics destination.</param>
      <param name="DstLeft">Left pixel destination of the graphics.</param>
      <param name="DstTop">Top pixel destination of the graphics.</param>
      <param name="DstWidth">Width, in pixel, of the drawn image.</param>
      <param name="DstHeight">Height, in pixel, of the drawn image.</param>
      <param name="SrcLeft">Left pixel source of the image to draw.</param>
      <param name="SrcTop">Top pixel source of the image to draw.</param>
      <param name="SrcWidth">Width portion, in pixel, of the image to draw.</param>
      <param name="SrcHeight">Height portion, in pixel, of the image to draw.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DrawGdPictureImageRectOnHwnd(System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Draws a portion of a GdPicture image into a window defined by a Window Handle.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Image to draw.</param>
      <param name="HANDLE">Window Handle destination.</param>
      <param name="DstLeft">Left pixel destination of the window.</param>
      <param name="DstTop">Top pixel destination of the window.</param>
      <param name="DstWidth">Width, in pixel, of the drawn image.</param>
      <param name="DstHeight">Height, in pixel, of the drawn image.</param>
      <param name="SrcLeft">Left pixel source of the image to draw.</param>
      <param name="SrcTop">Top pixel source of the image to draw.</param>
      <param name="SrcWidth">Width portion, in pixel, of the image to draw.</param>
      <param name="SrcHeight">Height portion, in pixel, of the image to draw.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetDesktopHwnd" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Crop(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Crops a custom area of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Left">Left source pixel.</param>
      <param name="Top">Top source pixel.</param>
      <param name="Width">Width in pixel.</param>
      <param name="Height">Height in pixel.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Cropping image after detecting the borders position." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Left As Integer
    Dim Top As Integer
    Dim Width As Integer
    Dim Height As Integer
    oGdPictureImaging.CropBorders(ImageID, 98, ReferencePoint.ReferencePointTopRight, Left, Top, Width, Height)
    oGdPictureImaging.Crop(ImageID, Left, Top, Width, Height) 'Crop
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropTop(System.Int32,System.Int32)">
      <summary>
 Crops the top of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Lines">Height, in pixel, to remove from the top of a GdPicture image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Cropping the image's top side." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CropTop(ImageID, 14)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropBottom(System.Int32,System.Int32)">
      <summary>
 Crops the bottom of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Lines">Height, in pixel, to remove from the bottom of a GdPicture image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Cropping the image's bottom side." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CropBottom(ImageID, 14)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropLeft(System.Int32,System.Int32)">
      <summary>
 Crops the left of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Lines">Width, in pixel, to remove from the left of a GdPicture image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Cropping the image's left side." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CropLeft(ImageID, 14)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropRight(System.Int32,System.Int32)">
      <summary>
 Crops the right of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Lines">Width, in pixel, to remove from the right of a GdPicture image.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Cropping the image's right side." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CropRight(ImageID, 14)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Rotate(System.Int32,System.Drawing.RotateFlipType)">
      <summary>
 Rotates clock-wise or flips a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Rotation">A member of the RotateFlipType enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Rotating an image 180 degrees." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.Rotate(ImageID, RotateFlipType.Rotate180FlipNone)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.RotateAnglePreserveDimensions(System.Int32,System.Single)">
      <summary>
 Rotates clockwise a GdPicture by a specific angle keeping the originals width and height of the
 picture.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Angle">Angle of rotation in degrees.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Rotating image and perserving dimensions." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.RotateAnglePreserveDimensions(ImageID, 30.0)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.RotateAnglePreserveDimensionsBackColor(System.Int32,System.Single,System.Drawing.Color)">
      <summary>
 Rotates clockwise a GdPicture by a specific angle and specific back color keeping the originals width
 and height of the picture.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Angle">Angle of rotation in degrees.</param>
      <param name="BackColor">Color of the background. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Rotating image and perserving dimensions and specifying black color." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.RotateAnglePreserveDimensionsBackColor(ImageID, 30.0, oGdPictureImaging.ARGB(255, 0, 0, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.RotateAnglePreserveDimensionsCenter(System.Int32,System.Single)">
      <summary>
 Rotates clockwise a GdPicture by a specific from the center with a specific angle keeping the originals width and
 height of the picture.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Angle">Angle of rotation in degrees.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Rotating image from the center and perserving dimensions." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.RotateAnglePreserveDimensionsCenter(ImageID, 30.0)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.RotateAnglePreserveDimensionsCenterBackColor(System.Int32,System.Single,System.Drawing.Color)">
      <summary>
 Rotates clockwise a GdPicture by a specific angle from the center with custom back color keeping the
 originals width and height of the picture.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Angle">Angle of rotation in degrees.</param>
      <param name="BackColor">Color of the background. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Rotating image from the center with specifying black color and perserving dimensions." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.RotateAnglePreserveDimensionsCenterBackColor(ImageID, 30.0, oGdPictureImaging.ARGB(255, 0, 0, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.RotateAngle(System.Int32,System.Single)">
      <summary>
 Rotates clockwise a GdPicture by a specific angle.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Angle">Angle of rotation in degrees.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Rotating an image 22.5 degrees." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.RotateAngle(ImageID, 22.5)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.RotateAngleBackColor(System.Int32,System.Single,System.Drawing.Color)">
      <summary>
 Rotates clockwise a GdPicture by a specific angle and a custom back color.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Angle">Angle of rotation in degrees.</param>
      <param name="BackColor">Color of the background. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Rotating image 30.0 degrees with specifying the back color as green." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.RotateAngleBackColor(ImageID, 30.0, oGdPictureImaging.ARGB(0, 0, 255, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Resize(System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Resizes a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="NewImageWidth">New image width in pixel.</param>
      <param name="NewImageHeight">New image height in pixel.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method automatically adjusts the vertical and horizontal image resolution in order to maintain the aspect ratio.
 If the intention is to change the aspect ratio, the SetVerticalResolution() and/or SetVHorizontalResolution() methods should be used instead.
 </remarks>
      <example>
        <code description="Resizing an image to half its original width and height using bicubic interpolation." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim ImageHeight As Integer = oGdPictureImaging.GetHeight(ImageID)
    Dim ImageWidth As Integer = oGdPictureImaging.GetWidth(ImageID)
    oGdPictureImaging.Resize(ImageID, ImageWidth/2, ImageHeight/2, Drawing2D.InterpolationMode.Bicubic)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetResizedGdPictureImage(System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Creates a resized GdPicture image from a GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image to release.</param>
      <param name="NewImageWidth">New image width in pixel.</param>
      <param name="NewImageHeight">New image height in pixel.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 - 0: Failure. Use the GetStat() method to determine the reason this method failed.
 - Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <remarks>
 This method automatically adjusts the vertical and horizontal image resolution in order to maintain the aspect ratio.
 If the intention is to change the aspect ratio, the SetVerticalResolution() and/or SetVHorizontalResolution() methods should be used instead.
 </remarks>
      <example>
        <code description="Creating a resized copy of an image that is equal to half the width and height of the original." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim ResizedImage As Integer
    ResizedImage = oGdPictureImaging.GetResizedGdPictureImage(ImageID, 50, 100, Drawing2D.InterpolationMode.Bicubic)
    If ResizedImage &lt;&gt; 0 Then
       oGdPictureImaging.SaveAsPNG(ResizedImage, "output.png")
       oGdPictureImaging.ReleaseGdPictureImage(ResizedImage)
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ResizeHeightRatio(System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Resizes a GdPicture image with custom height keeping the original aspect ratio for the new width
 value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="NewImageHeight">The new height of the image in pixel.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method automatically adjusts the vertical and horizontal image resolution in order to maintain the aspect ratio.
 If the intention is to change the aspect ratio, the SetVerticalResolution() and/or SetVHorizontalResolution() methods should be used instead.
 </remarks>
      <example>
        <code description="Resizing an image's height to become 500 pixels." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ResizeHeightRatio(ImageID, 500, Drawing2D.InterpolationMode.Bicubic)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ResizeWidthRatio(System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Resizes a GdPicture image with custom width keeping the original aspect ratio for the new height
 value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="NewImageWidth">The new image width in pixel.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method automatically adjusts the vertical and horizontal image resolution in order to maintain the aspect ratio.
 If the intention is to change the aspect ratio, the SetVerticalResolution() and/or SetVHorizontalResolution() methods should be used instead.
 </remarks>
      <example>
        <code description="Resizing an image's width to 500 pixels." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.ResizeWidthRatio(ImageID, 500, Drawing2D.InterpolationMode.Bicubic)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Scale(System.Int32,System.Single,System.Drawing.Drawing2D.InterpolationMode)">
      <summary>
 Resizes a GdPicture image image, keeping the same aspect ratio.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ScalePercent">Scale percentage value. ie: if ScalePercent = 50, the image is reduced to half size.</param>
      <param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method automatically adjusts the vertical and horizontal image resolution in order to maintain the aspect ratio.
 If the intention is to change the aspect ratio, the SetVerticalResolution() and/or SetVHorizontalResolution() methods should be used instead.
 </remarks>
      <example>
        <code description="Reducing the image size by half." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.Scale(ImageID, 50, Drawing2D.InterpolationMode.Bicubic)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AddBorders(System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
 Adds borders around a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BorderWidth">The width of the border in pixel.</param>
      <param name="BorderColor">Color of the borders. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Adding black borders to an image." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.AddBorders(ImageID, 5, oGdPictureImaging.ARGB(255, 0, 0, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AddBorders(System.Int32,System.Int32,System.Int32)">
      <summary>
 Adds borders around a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BorderWidth">The width of the border in pixel.</param>
      <param name="BorderColor">Color of the borders. A suitable color value can be obtained by using the ARGBI() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <example>
        <code description="Adding black borders to an image." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.AddBorders(ImageID, 5, oGdPictureImaging.ARGBI(255, 0, 0, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AddBorderTop(System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
 Adds border to the top of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BorderHeight">The height of the border in pixel.</param>
      <param name="BorderColor">Color of the border. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Adding a top border to an image." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.AddBorderTop(ImageID, 5, oGdPictureImaging.ARGB(255, 0, 0, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AddBorderTop(System.Int32,System.Int32,System.Int32)">
      <summary>
 Adds border to the top of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BorderHeight">The height of the border in pixel.</param>
      <param name="BorderColor">Color of the border. A suitable color value can be obtained by using the ARGBI() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Adding a top border to an image." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.AddBorderTop(ImageID, 5, oGdPictureImaging.ARGBI(255, 0, 0, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AddBorderBottom(System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
 Adds border to the bottom of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BorderHeight">The width of the border in pixel.</param>
      <param name="BorderColor">Color of the border. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Adding a bottom border to an image." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.AddBorderBottom(ImageID, 5, oGdPictureImaging.ARGB(255, 0, 0, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AddBorderBottom(System.Int32,System.Int32,System.Int32)">
      <summary>
 Adds border to the bottom of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BorderHeight">The width of the border in pixel.</param>
      <param name="BorderColor">Color of the border. A suitable color value can be obtained by using the ARGBI() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Adding a bottom border to an image." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.AddBorderBottom(ImageID, 5, oGdPictureImaging.ARGBI(255, 0, 0, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AddBorderLeft(System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
 Adds border to the left of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BorderWidth">The width of the border in pixel.</param>
      <param name="BorderColor">Color of the border. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Adding a left border to an image." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.AddBorderLeft(ImageID, 5, oGdPictureImaging.ARGB(255, 0, 0, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AddBorderLeft(System.Int32,System.Int32,System.Int32)">
      <summary>
 Adds border to the left of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BorderWidth">The width of the border in pixel.</param>
      <param name="BorderColor">Color of the border. A suitable color value can be obtained by using the ARGBI() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Adding a left border to an image." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.AddBorderLeft(ImageID, 5, oGdPictureImaging.ARGBI(255, 0, 0, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AddBorderRight(System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
 Adds border to the right of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BorderWidth">The width of the border in pixel.</param>
      <param name="BorderColor">Color of the border. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Adding a right border to an image." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.AddBorderRight(ImageID, 5, oGdPictureImaging.ARGB(255, 0, 0, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AddBorderRight(System.Int32,System.Int32,System.Int32)">
      <summary>
 Adds border to the right of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="BorderWidth">The width of the border in pixel.</param>
      <param name="BorderColor">Color of the border. A suitable color value can be obtained by using the ARGBI() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Adding a right border to an image." lang="VB.NET">
 Dim oGdPictureImaging As New oGdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.AddBorderRight(ImageID, 5, oGdPictureImaging.ARGBI(255, 0, 0, 0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsBMP(System.Int32,System.String)">
      <summary>
 Saves a GdPicture image as a windows or OS/2 bitmap image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert jpg file to bmp file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.jpg")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsBMP (ImageID, "image.bmp")
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsBMP(System.Int32,System.String,System.Boolean)">
      <summary>
 Saves a GdPicture image as a windows or OS/2 bitmap image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="UseRLE">Set true to compress the bitmap pixels with the RLE compression scheme. Only available for 8 bpp bitmap.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert jpg file to bmp file compressed with RLE compression scheme." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.jpg")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsBMP (ImageID, "image.bmp", True)
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsWBMP(System.Int32,System.String)">
      <summary>
 Saves a GdPicture image as wbmp (Wireless Bitmap) image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 WBMP format is a format used on WAP (Wireless Application Protocol).
 You can load WBMP images into mobile device which supports WAP (ie: cellular phones).
 This format supports only 1BPP image.
 </remarks>
      <example>
        <code description="How to convert jpg file to wbmp file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.jpg")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsWBBMP (ImageID, "image.wbmp")
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsXPM(System.Int32,System.String)">
      <summary>
 Saves a GdPicture image as x11 pixmap image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method works only with 8-bits and 24-bits images.
 </remarks>
      <example>
        <code description="How to convert jpg file to x11 pixmap file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.jpg")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsXPM (ImageID, "image.xpm")
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsICO(System.Int32,System.String,System.Drawing.Color)">
      <summary>
 Saves a GdPicture image as a window icon image format specifying a color to set as transparent.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image.</param>
      <param name="TransparentColor">This parameter defines the transparent color of the ICON. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to a window icon file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsICO (ImageID, "icon.ico", Color.White)
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsICO(System.Int32,System.String)">
      <summary>
 Saves a GdPicture image as a window icon image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to a window icon file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsICO (ImageID, "icon.ico")
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsICO(System.Int32,System.String,GdPicture12.IconSize)">
      <summary>
 Saves a GdPicture image as a window icon image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="IconSize">A member of the IconSize enumeration. The icons size.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to a window icon file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsICO (ImageID, "icon.ico", IconSize.IconSize16x16)
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsICO(System.Int32,System.String,System.Drawing.Color,GdPicture12.IconSize)">
      <summary>
 Saves a GdPicture image as a window icon image format specifying a color to set as transparent.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="TransparentColor">This parameter defines the transparent color of the icon. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="IconSize">A member of the IconSize enumeration. The icons size.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to a window icon file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsICO (ImageID, "icon.ico", oGdPictureImaging.ARGB(255, 0, 255, 0),IconSize.IconSize16x16)
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsICO(System.Int32,System.String,System.Boolean,System.Drawing.Color,GdPicture12.IconSize)">
      <summary>
 Saves a GdPicture image as a window icon image format specifying whether it has a transparent color and the color to set as transparent if so.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="HasTransparentColor">Whether the icon has a transparent color or not.</param>
      <param name="TransparentColor">This parameter defines the transparent color of the icon. A suitable color value can be obtained by using the ARGB() method. This parameter will be ignored if HasTransparentColor is set to false.</param>
      <param name="IconSize">A member of the IconSize enumeration. The icons size.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to a window icon file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsICO (ImageID, "icon.ico", True, Color.Black, IconSize.IconSize16x16)
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsGIF(System.Int32,System.String)">
      <summary>
 Saves a GdPicture image as Graphics Interchange Format image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to gif (Graphics interchange format) file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsGIF(ImageID, "image.gif")
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsPNG(System.Int32,System.String)">
      <summary>
 Saves a GdPicture image as Portable Network Graphics image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to a png (Portable network graphics) file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsPNG (ImageID, "image.png")
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsPNG(System.Int32,System.String,System.Int32,System.Boolean)">
      <summary>
 Saves a GdPicture image as Portable Network Graphics image. This overload supports interlacing and compression level customization.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="CompressionLevel">The level of compression to use, in the range 0 (no compression) to 9 (max compression). Suggested value is 6, using higer value should result in a smaller file size but also increases encoding time.</param>
      <param name="Interlaced">Specifies if the encoder must produce and interlaced version of the image. Interlacing increases file size.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to a png (Portable network graphics) file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsPNG (ImageID, "image.png")
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsJBIG2(System.Int32,System.String)">
      <summary>
 Saves a GdPicture image as JBIG2 image format with lossless compression.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to jbig2 file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsJBIG2 (ImageID, "image.jb2")
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsJPEG(System.Int32,System.String)">
      <summary>
 Saves a GdPicture image as jpeg image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to jpeg file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsJPEG (ImageID, "image.jpg")
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsJPEG(System.Int32,System.String,System.Int32)">
      <summary>
 Saves a GdPicture image as jpeg image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Quality">Defines the compression quality between between 1 (smallest file) and 100 (highest quality). Usually 75.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to jpeg file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsJPEG (ImageID, "image.jpg", 90)
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsJPEG(System.Int32,System.String,System.Int32,System.Boolean)">
      <summary>
 Saves a GdPicture image as jpeg image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Quality">Defines the compression quality between between 1 (smallest file) and 100 (highest quality). Usually 75.</param>
      <param name="Progressive">If True, saves as a progressive JPEG. False by default.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to progressive jpeg file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsJPEG (ImageID, "image.jpg", 90, True)
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsWEBP(System.Int32,System.String,System.Single,System.Int32)">
      <summary>
 Saves a GdPicture image as WebP image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Quality">Defines the compression quality between 1 (smallest file) and 100 (highest quality). Usually 75. Value &gt;= 100 will perform lossless encoding.</param>
      <param name="Method">Defines quality/speed trade-off between 0 (fast) and 6 (slower-better). Usually 6.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to progressive jpeg file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsWEBP (ImageID, "image.webp", 75, 6)
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsTGA(System.Int32,System.String)">
      <summary>
 Saves a GdPicture image as Truevision TARGA image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method works only with 8-bits, 16-bits, 24-bits and 32-bits images.
 Use the IsPixelFormatHasAlpha(ImageID) method to check if a GdPicture image has an alpha component.
 </remarks>
      <example>
        <code description="How to convert bmp file to true vision TARGA image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsTGA (ImageID, "image.tga")
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsPBM(System.Int32,System.String)">
      <summary>
 Saves a GdPicture image as Portable Bitmap image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method works only with 1-bit, 8-bits grayscale and 24-bits images.
 Use the IsPixelFormatHasAlpha(ImageID) method to check if a GdPicture image has an alpha component.
 </remarks>
      <example>
        <code description="How to convert bmp file to a pbm (Portable bitmap) image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsPBM (ImageID, "image.pbm")
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsWMF(System.Int32,System.String)">
      <summary>
 Saves a GdPicture image as WMF image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to wmf file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsWMF (ImageID, "image.wmf")
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsEXR(System.Int32,System.String,GdPicture12.ExrCompression)">
      <summary>
 Saves a GdPicture image in high dynamic-range image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Compression">A combination of members of the ExrCompression enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to hdr (High dynamic-range) file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsEXR (ImageID, "image.webp",, 75, 3)
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsJ2K(System.Int32,System.String)">
      <summary>
 Saves a GdPicture image as JPEG-2000 codestream image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to jpeg2000 codestream file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsJ2K (ImageID, "image.j2k")
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsJ2K(System.Int32,System.String,System.Int32)">
      <summary>
 Saves a GdPicture image as JPEG-2000 codestream image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Rate">Defines the compression rate Between [1(MaxQuality - Lossless) ... 512(Poor quality)]. Default value is 16.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to jpeg2000 codestream file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsJ2K (ImageID, "image.j2k", 16)
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsJP2(System.Int32,System.String)">
      <summary>
 Saves a GdPicture image as JPEG-2000 File image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to jpeg2000 file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsJP2 (ImageID, "image.jp2")
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsJP2(System.Int32,System.String,System.Int32)">
      <summary>
 Saves a GdPicture image as JPEG-2000 File image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Rate">Defines the compression rate Between [1(MaxQuality - Lossless) ... 512(Poor quality)]. Default value is 16.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert bmp file to jpeg2000 file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsJP2 (ImageID, "image.jp2", 16)
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetLastTransferError">
      <summary>
 Returns, if any, the last HTTP or FTP transfer error description.
 </summary>
      <returns>
 The error description.
 </returns>
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
 oGdPictureImaging.SaveToFTP (ImageID, DocumentFormat.DocumentFormatJPEG, 75, "ftp.com", "/demo/image.jpg", "user", "password, 21")
 Dim status As GdPictureStatus = oGdPictureImaging.GetLastTransferError()
 If  status &lt;&gt; GdPictureStatus.OK Then
 MessageBox.Show("Error: " +status.ToString() )
 End If
 oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
 MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
</member>
    <member name="M:GdPicture12.GdPictureImaging.SaveToFTP(System.Int32,GdPicture12.DocumentFormat,System.Int32,System.String,System.String,System.String,System.String,System.Int32)">
      <summary>
 Saves a GdPicture image into a FTP server.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ImageFormat">A member of the DocumentFormat enumeration. Currently supported formats are:
 <para>DocumentFormatBMP.</para><para>DocumentFormatJPEG.</para><para>DocumentFormatPNG.</para><para>DocumentFormatTIFF.</para><para>DocumentFormatGIF.</para><para>DocumentFormatJ2K (JPEG2000 codestream).</para><para>DocumentFormatJP2 (JPEG2000) </para><para>DocumentFormatTARGA.</para><para>DocumentFormatEXR.</para><para>DocumentFormatWBMP.</para><para>DocumentFormatXPM.</para><para>DocumentFormatPBM.</para><para>DocumentFormatWMF.</para><para>DocumentFormatWEBP.</para></param>
      <param name="EncoderParameter">Compression or encoding quality to use.
 <para>For JPEG format: the parameter defines the quality between 1 (lower) and 100 (higher).</para><para>For WebP format: the parameter defines the quality between 1 (lower) and 100 (higher - lossless encoding).</para><para>For TIFF format: the parameter defines the compression scheme to be used: 1 for none, 2 for RLE, 3 for CCITT3, 4 for CCITT4, 5 for LZW, 7 for JPEG, 32946 for Deflate  and 65536 for automatic compression adjustment. For more options the SaveAsTiff() method taking a Stream object as parameter can be used.</para><para>For JPEG2000 format: the parameter defines the compression rate Between [1(MaxQuality - Lossless) ... 512(Poor quality)]. Default value is 16.</para><para>For PNG format: the parameter defines the compression level Between [0(no compression - faster encoding) ... 9(max compression - slower encoding)]. Default value is 6.</para><para>For other formats use 0.</para></param>
      <param name="Host">The host server ie: ftp.com.</param>
      <param name="Path">The image file path to create into the distant server ie:
 /demo/image.jpg.</param>
      <param name="Login">User Login.</param>
      <param name="Password">User Password.</param>
      <param name="FTPPort">The FTP port number used. Usually 21.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetLastTransferError" />
      <returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError method can be used to diagnose the error.
 </returns>
      <example>
        <code description="How to save an image as jpeg to an ftp server." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveToFTP (ImageID, DocumentFormat.DocumentFormatJPEG, 75, "ftp.com", "/demo/image.jpg", "user", "password, 21")
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveToHTTP(System.Int32,GdPicture12.DocumentFormat,System.Int32,System.String)">
      <summary>
 Saves a GdPicture image into a HTTP server. This method uses HTTP PUT protocol method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ImageFormat">A member of the DocumentFormat enumeration. Currently supported formats are:
 <para>DocumentFormatBMP.</para><para>DocumentFormatJPEG.</para><para>DocumentFormatPNG.</para><para>DocumentFormatTIFF.</para><para>DocumentFormatGIF.</para><para>DocumentFormatJ2K (JPEG2000 codestream).</para><para>DocumentFormatJP2 (JPEG2000) </para><para>DocumentFormatTARGA.</para><para>DocumentFormatEXR.</para><para>DocumentFormatWBMP.</para><para>DocumentFormatXPM.</para><para>DocumentFormatPBM.</para><para>DocumentFormatWMF.</para><para>DocumentFormatWEBP.</para></param>
      <param name="EncoderParameter">Compression or encoding quality to use.
 <para>For JPEG format: the parameter defines the quality between 1 (lower) and 100 (higher).</para><para>For WebP format: the parameter defines the quality between 1 (lower) and 100 (higher - lossless encoding).</para><para>For TIFF format: the parameter defines the compression scheme to be used: 1 for none, 2 for RLE, 3 for CCITT3, 4 for CCITT4, 5 for LZW, 7 for JPEG, 32946 for Deflate  and 65536 for automatic compression adjustment. For more options the SaveAsTiff() method taking a Stream object as parameter can be used.</para><para>For JPEG2000 format: the parameter defines the compression rate Between [1(MaxQuality - Lossless) ... 512(Poor quality)]. Default value is 16.</para><para>For PNG format: the parameter defines the compression level Between [0(no compression - faster encoding) ... 9(max compression - slower encoding)]. Default value is 6.</para><para>For other formats use 0.</para></param>
      <param name="Address">Address of destination. IE:
 http://www.google.com/uploads/myimage.jpg.</param>
      <returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError method can be used to diagnose the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetLastTransferError" />
      <example>
        <code description="How to save an image as jpeg to an http server." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveToHTTP (ImageID, DocumentFormat.DocumentFormatJPEG, 75, "http://www.google.com/uploads/myimage.jpg")
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveToHTTP(System.Int32,GdPicture12.DocumentFormat,System.Int32,System.String,System.String,System.String)">
      <summary>
 Saves a GdPicture image into a HTTP server using authentication. This method uses HTTP PUT protocol method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ImageFormat">A member of the DocumentFormat enumeration. Currently supported formats are:
 <para>DocumentFormatBMP.</para><para>DocumentFormatJPEG.</para><para>DocumentFormatPNG.</para><para>DocumentFormatTIFF.</para><para>DocumentFormatGIF.</para><para>DocumentFormatJ2K (JPEG2000 codestream).</para><para>DocumentFormatJP2 (JPEG2000) </para><para>DocumentFormatTARGA.</para><para>DocumentFormatEXR.</para><para>DocumentFormatWBMP.</para><para>DocumentFormatXPM.</para><para>DocumentFormatPBM.</para><para>DocumentFormatWMF.</para><para>DocumentFormatWEBP.</para></param>
      <param name="EncoderParameter">Compression or encoding quality to use.
 <para>For JPEG format: the parameter defines the quality between 1 (lower) and 100 (higher).</para><para>For WebP format: the parameter defines the quality between 1 (lower) and 100 (higher - lossless encoding).</para><para>For TIFF format: the parameter defines the compression scheme to be used: 1 for none, 2 for RLE, 3 for CCITT3, 4 for CCITT4, 5 for LZW, 7 for JPEG, 32946 for Deflate  and 65536 for automatic compression adjustment. For more options the SaveAsTiff() method taking a Stream object as parameter can be used.</para><para>For JPEG2000 format: the parameter defines the compression rate Between [1(MaxQuality - Lossless) ... 512(Poor quality)]. Default value is 16.</para><para>For PNG format: the parameter defines the compression level Between [0(no compression - faster encoding) ... 9(max compression - slower encoding)]. Default value is 6.</para><para>For other formats use 0.</para></param>
      <param name="Address">Address of destination. IE:
 http://www.google.com/uploads/myimage.jpg.</param>
      <param name="Login">User Login.</param>
      <param name="Password">User Password.</param>
      <returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError method can be used to diagnose the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetLastTransferError" />
      <example>
        <code description="How to save an image as jpeg to an http server." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveToHTTP (ImageID, DocumentFormat.DocumentFormatJPEG, 75, "http://www.google.com/uploads/myimage.jpg", "user", "password")
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsTIFF(System.Int32,System.String,GdPicture12.TiffCompression)">
      <summary>
 Saves a GdPicture image as Tagged Image File Format.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 If the specified GdPicture image is an editable multipage tiff image, this method will save only
 the selected page.
 To save an editable multipage tiff image use the TiffSaveMultiPageToFile() method.
 </remarks>
      <example>
        <code description="How to convert bmp file to a tif file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsTIFF (ImageID, "image.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsTIFF(System.Int32,System.String,GdPicture12.TiffCompression,System.Int32)">
      <summary>
 Saves a GdPicture image as Tagged Image File Format.
 This methods takes a jpeg quality parameter.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <param name="JpegQuality">Defines the compression quality, between 1 (worst quality) and 100 (better quality). This parameter is ignored when the specified compression scheme is different than JPEG.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 If the specified GdPicture image is an editable multipage tiff image, this method will save only
 the selected page.
 To save an editable multipage tiff image use the TiffSaveMultiPageToFile() method.
 </remarks>
      <example>
        <code description="How to convert bmp file to a tif file using jpeg compression with a specified jpeg quality." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsTIFF (ImageID, "image.tif", TiffCompression.TiffCompressionJPEG, 90)
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsTIFF(System.Int32,System.String,System.Boolean,GdPicture12.TiffCompression)">
      <summary>
 Saves a GdPicture image as Tagged Image File Format.
 This methods takes a parameter to save tiff in CMYK color space.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="CMYKMode">Set True to save tiff in CMYK color space, else False.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 If the specified GdPicture image is an editable multipage tiff image, this method will save only
 the selected page.
 To save an editable multipage tiff image use the TiffSaveMultiPageToFile() method.
 </remarks>
      <example>
        <code description="How to convert bmp file to cmyk tif file using jpeg compression." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsTIFF (ImageID, "imagecmyk.tif", True, TiffCompression.TiffCompressionJPEG)
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsTIFF(System.Int32,System.String,System.Boolean,GdPicture12.TiffCompression,System.Int32)">
      <summary>
 Saves a GdPicture image as Tagged Image File Format.
 This methods takes a parameter to save tiff in CMYK color space and another parameter to defines jpeg quality .
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="CMYKMode">Set True to save tiff in CMYK color space, else False.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <param name="JpegQuality">Defines the compression quality, between 1 (worst quality) and 100 (better quality). This parameter is ignored when the specified compression scheme is different than JPEG..</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 If the specified GdPicture image is an editable multipage tiff image, this method will save only
 the selected page.
 To save an editable multipage tiff image use the TiffSaveMultiPageToFile() method.
 </remarks>
      <example>
        <code description="How to convert a bmp file to cmyk tif file using jpef compression with specified jpef quality." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsTIFF (ImageID, "imagecmyk.tif", True, TiffCompression.TiffCompressionJPEG, 90)
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsTIFF(System.Int32,System.IO.Stream,System.Boolean,GdPicture12.TiffCompression,System.Int32)">
      <summary>
 Saves a GdPicture image as Tagged Image File Format.
 This methods takes a parameter to save tiff in CMYK color space and another parameter to defines jpeg quality .
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Stream">A stream object to save the image file.</param>
      <param name="CMYKMode">Set True to save tiff in CMYK color space, else False.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <param name="JpegQuality">Defines the compression quality, between 1 (worst quality) and 100 (better quality). This parameter is ignored when the specified compression scheme is different than JPEG.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 If the specified GdPicture image is an editable multipage tiff image, this method will save only the selected page.
 </remarks>
      <example>
        <code description="How to convert a bmp file to cmyk tif stream file using jpef compression with specified jpef quality." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim memoryStream As New MemoryStream()
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsTIFF (ImageID, memoryStream, True, TiffCompression.TiffCompressionJPEG, 90)
    oGdPictureImaging.ReleaseGdPictureImage (ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsByteArray(System.Int32,System.Byte[]@,System.Int32@,GdPicture12.DocumentFormat,System.Int32)">
      <summary>
 Saves a GdPicture image to a byte array. This methods can generate multipage tiff file if the input GdPicture image is an editable multipage tiff.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Data">Output parameter. The image data.</param>
      <param name="Length">Output parameter. The number of bytes wrote into the Data array.</param>
      <param name="ImageFormat">A member of the DocumentFormat enumeration. Currently supported formats are:
 <para>DocumentFormatBMP.</para><para>DocumentFormatJPEG.</para><para>DocumentFormatPNG.</para><para>DocumentFormatTIFF.</para><para>DocumentFormatGIF.</para><para>DocumentFormatJ2K (JPEG2000 codestream).</para><para>DocumentFormatJP2 (JPEG2000) </para><para>DocumentFormatTARGA.</para><para>DocumentFormatEXR.</para><para>DocumentFormatWBMP.</para><para>DocumentFormatXPM.</para><para>DocumentFormatPBM.</para><para>DocumentFormatWMF.</para><para>DocumentFormatWEBP.</para></param>
      <param name="EncoderParameter">Compression or encoding quality to use.
 <para>For JPEG format: the parameter defines the quality between 1 (lower) and 100 (higher).</para><para>For WebP format: the parameter defines the quality between 1 (lower) and 100 (higher - lossless encoding).</para><para>For TIFF format: the parameter defines the compression scheme to be used: 1 for none, 2 for RLE, 3 for CCITT3, 4 for CCITT4, 5 for LZW, 7 for JPEG, 32946 for Deflate  and 65536 for automatic compression adjustment. For more options the SaveAsTiff() method taking a Stream object as parameter can be used.</para><para>For JPEG2000 format: the parameter defines the compression rate Between [1(MaxQuality - Lossless) ... 512(Poor quality)]. Default value is 16.</para><para>For PNG format: the parameter defines the compression level Between [0(no compression - faster encoding) ... 9(max compression - slower encoding)]. Default value is 6.</para><para>For other formats use 0.</para></param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Saving an image into an array of bytes." lang="VB.NET">
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
 Dim ImageBytes As Byte() = Nothing
 Dim Length As Integer
 oGdPictureImaging.SaveAsByteArray(ImageID, ImageBytes, Length, DocumentFormat.DocumentFormatJPEG, 90)
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromByteArray(System.Byte[])" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsStream(System.Int32,System.IO.Stream,GdPicture12.DocumentFormat,System.Int32)">
      <summary>
 Saves a GdPicture image to a stream. This methods can generate multipage tiff file if the input GdPicture image is an editable multipage tiff.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Stream">The strem objet to save the image.</param>
      <param name="ImageFormat">A member of the DocumentFormat enumeration. Currently supported formats are:
 <para>DocumentFormatBMP.</para><para>DocumentFormatJPEG.</para><para>DocumentFormatPNG.</para><para>DocumentFormatTIFF.</para><para>DocumentFormatGIF.</para><para>DocumentFormatJ2K (JPEG2000 codestream).</para><para>DocumentFormatJP2 (JPEG2000) </para><para>DocumentFormatTARGA.</para><para>DocumentFormatEXR.</para><para>DocumentFormatWBMP.</para><para>DocumentFormatXPM.</para><para>DocumentFormatPBM.</para><para>DocumentFormatWMF.</para><para>DocumentFormatWEBP.</para></param>
      <param name="EncoderParameter">Compression or encoding quality to use.
 <para>For JPEG format: the parameter defines the quality between 1 (lower) and 100 (higher).</para><para>For WebP format: the parameter defines the quality between 1 (lower) and 100 (higher - lossless encoding).</para><para>For TIFF format: the parameter defines the compression scheme to be used: 1 for none, 2 for RLE, 3 for CCITT3, 4 for CCITT4, 5 for LZW, 7 for JPEG, 32946 for Deflate  and 65536 for automatic compression adjustment. For more options the SaveAsTiff() method taking a Stream object as parameter can be used.</para><para>For JPEG2000 format: the parameter defines the compression rate Between [1(MaxQuality - Lossless) ... 512(Poor quality)]. Default value is 16.</para><para>For PNG format: the parameter defines the compression level Between [0(no compression - faster encoding) ... 9(max compression - slower encoding)]. Default value is 6.</para><para>For other formats use 0.</para></param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Saving an image to a stream object in tiff format." lang="VB.NET">
 Using oGdPictureImaging as new GdPictureImaging
    Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
    Dim MyStream As System.IO.Stream = New MemoryStream
    oGdPictureImaging.SaveAsStream(ImageID, MyStream, DocumentFormat.DocumentFormatJPEG, 90)
 End Using
 </code>
      </example>
      <example>
        <code description="Combining 3 existing single page tiff documents to a multipage tiff stored in a MemoryStream object." lang="VB.NET">
 Dim memoryStream As New MemoryStream()
 Dim oGdPictureImaging As New GdPictureImaging
 Dim MultipageTiffID As Integer = oGdPictureImaging.TiffCreateMultiPageFromFile("image1.tif")
 oGdPictureImaging.TiffAppendPageFromFile(MultipageTiffID, "image2.tif")
 oGdPictureImaging.TiffAppendPageFromFile(MultipageTiffID, "image3.tif")
 oGdPictureImaging.SaveAsStream(MultipageTiffID, memoryStream, DocumentFormat.DocumentFormatTIFF, 65536)
 oGdPictureImaging.ReleaseGdPictureImage(MultipageTiffID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsIStream(System.Int32,System.Runtime.InteropServices.ComTypes.IStream,GdPicture12.DocumentFormat,System.Int32)">
      <summary>
 Saves a GdPicture image to an IStream. This methods can generate multipage tiff file if the input GdPicture image is an editable multipage tiff.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Stream">The strem objet to save the image.</param>
      <param name="ImageFormat">A member of the DocumentFormat enumeration. Currently supported formats are:
 <para>DocumentFormatBMP.</para><para>DocumentFormatJPEG.</para><para>DocumentFormatPNG.</para><para>DocumentFormatTIFF.</para><para>DocumentFormatGIF.</para><para>DocumentFormatJ2K (JPEG2000 codestream).</para><para>DocumentFormatJP2 (JPEG2000) </para><para>DocumentFormatTARGA.</para><para>DocumentFormatEXR.</para><para>DocumentFormatWBMP.</para><para>DocumentFormatXPM.</para><para>DocumentFormatPBM.</para><para>DocumentFormatWMF.</para><para>DocumentFormatWEBP.</para></param>
      <param name="EncoderParameter">Compression or encoding quality to use.
 <para>For JPEG format: the parameter defines the quality between 1 (lower) and 100 (higher).</para><para>For WebP format: the parameter defines the quality between 1 (lower) and 100 (higher - lossless encoding).</para><para>For TIFF format: the parameter defines the compression scheme to be used: 1 for none, 2 for RLE, 3 for CCITT3, 4 for CCITT4, 5 for LZW, 7 for JPEG, 32946 for Deflate  and 65536 for automatic compression adjustment. For more options the SaveAsTiff() method taking a Stream object as parameter can be used.</para><para>For JPEG2000 format: the parameter defines the compression rate Between [1(MaxQuality - Lossless) ... 512(Poor quality)]. Default value is 16.</para><para>For PNG format: the parameter defines the compression level Between [0(no compression - faster encoding) ... 9(max compression - slower encoding)]. Default value is 6.</para><para>For other formats use 0.</para></param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsString(System.Int32,GdPicture12.DocumentFormat,System.Int32)">
      <summary>
 Saves a GdPicture image to a string. This methods can generate multipage tiff file if the input GdPicture image is an editable multipage tiff.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ImageFormat">A member of the DocumentFormat enumeration. Currently supported formats are:
 <para>DocumentFormatBMP.</para><para>DocumentFormatJPEG.</para><para>DocumentFormatPNG.</para><para>DocumentFormatTIFF.</para><para>DocumentFormatGIF.</para><para>DocumentFormatJ2K (JPEG2000 codestream).</para><para>DocumentFormatJP2 (JPEG2000) </para><para>DocumentFormatTARGA.</para><para>DocumentFormatEXR.</para><para>DocumentFormatWBMP.</para><para>DocumentFormatXPM.</para><para>DocumentFormatPBM.</para><para>DocumentFormatWMF.</para><para>DocumentFormatWEBP.</para></param>
      <param name="EncoderParameter">Compression or encoding quality to use.
 <para>For JPEG format: the parameter defines the quality between 1 (lower) and 100 (higher).</para><para>For WebP format: the parameter defines the quality between 1 (lower) and 100 (higher - lossless encoding).</para><para>For TIFF format: the parameter defines the compression scheme to be used: 1 for none, 2 for RLE, 3 for CCITT3, 4 for CCITT4, 5 for LZW, 7 for JPEG, 32946 for Deflate  and 65536 for automatic compression adjustment. For more options the SaveAsTiff() method taking a Stream object as parameter can be used.</para><para>For JPEG2000 format: the parameter defines the compression rate Between [1(MaxQuality - Lossless) ... 512(Poor quality)]. Default value is 16.</para><para>For PNG format: the parameter defines the compression level Between [0(no compression - faster encoding) ... 9(max compression - slower encoding)]. Default value is 6.</para><para>For other formats use 0.</para></param>
      <returns>
 A string (encoding 1252) containing the saved image.
 </returns>
      <remarks>It is recommended to subsequently encode the returned string into Base64 string to facilitate transfer by using the Encode64String() method (see example).</remarks>
      <example>
        <code description="Loading an image, saving it as base64 encoded string and reloading it." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim imageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png") 'Prompt the user to select a file
 If oGdPictureImaging.GetStat = GdPictureStatus.OK Then
    Dim fileString As String = oGdPictureImaging.Encode64String(oGdPictureImaging.SaveAsString(imageID, DocumentFormat.DocumentFormatTIFF, 65536))
    oGdPictureImaging.ReleaseGdPictureImage(imageID)
    'Now reload the saved file from fileString
    imageID = oGdPictureImaging.CreateGdPictureImageFromString(oGdPictureImaging.Decode64String(fileString))
    If oGdPictureImaging.GetStat = GdPictureStatus.OK Then
       oGdPictureImaging.SaveAsPNG(imageID, "output.png")
       oGdPictureImaging.ReleaseGdPictureImage(imageID)
    End If
 End If
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.Encode64String(System.String)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PdfCreateFromMultipageTIFF(System.Int32,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
      <summary>
 Creates a multipage PDF from a multipage tiff image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multipage tiff image to save as PDF.</param>
      <param name="PdfFileDest">The destination of the pdf to create.</param>
      <param name="PDFA">True to generate PDF in PDF/A 1-b format else False.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting a tif image to a pdf." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging()
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
 If oGdPictureImaging.TiffIsMultiPage(ImageID) Then
    oGdPictureImaging.PdfCreateFromMultipageTIFF(MultipageImageID, "multipage.pdf", True, "MyPdfTitle", "MyPdfAuthor", "MyPdfSubject", "MyPdfKeywords", "MyPdfCreator")
 Else
    oGdPictureImaging.SaveAsPDF(ImageID, "singlepage.pdf", True, "MyPdfTitle", "MyPdfAuthor", "MyPdfSubject", "MyPdfKeywords", "MyPdfCreator")
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PdfCreateFromMultipageTIFF(System.Int32,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,GdPicture12.PdfCompression,GdPicture12.PdfCompression)">
      <summary>
 Creates a multipage PDF from a multipage tiff image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multipage tiff image to save as PDF.</param>
      <param name="PdfFileDest">The destination of the pdf to create.</param>
      <param name="PDFA">True to generate PDF in PDF/A 1-b format else False.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <param name="BitonalCompressionScheme">A member of the PdfCompression enumeration. The scheme to use to compress bitonal bitmap within the PDF.</param>
      <param name="ColorCompressionScheme">A member of the PdfCompression enumeration. The scheme to use to compress color bitmap within the PDF.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting a tif image to a pdf." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging()
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
 If oGdPictureImaging.TiffIsMultiPage(ImageID) Then
    oGdPictureImaging.PdfCreateFromMultipageTIFF(MultipageImageID, "multipage.pdf", True, "MyPdfTitle", "MyPdfAuthor", "MyPdfSubject", "MyPdfKeywords", "MyPdfCreator", PdfCompression.PdfCompressionJBIG2, PdfCompression.PdfCompressionJPEG)
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PdfCreateFromMultipageTIFF(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,GdPicture12.PdfEncryption,GdPicture12.PdfRight,System.String,System.String)">
      <summary>
 Creates a multipage PDF with encryption from a multipage tiff image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multipage tiff image to save as PDF.</param>
      <param name="PdfFileDest">The destination of the pdf to create.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is not yet available.</param>
      <param name="Rights">A value returned by the PdfCreateRights method.</param>
      <param name="UserPassword">The user password for the PDF. Can be an empty string.</param>
      <param name="OwnerPassword">The owner password for the PDF. Can be an empty string.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting a tif image to a pdf with 128 bit encryption." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging()
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
 If oGdPictureImaging.TiffIsMultiPage(ImageID) Then
    oGdPictureImaging.PdfCreateFromMultipageTIFF(ImageID, "multipage.pdf", "MyPdfTitle", "MyPdfAuthor", "MyPdfSubject", "MyPdfKeywords", "MyPdfCreator", PdfEncryption.PdfEncryption128BitRC4, PdfRight.PdfRightCanView Or PdfRight.PdfRightCanPrint, "UserPass", "OwnerPass")
 Else
    oGdPictureImaging.SaveAsPDF(ImageID, "singlepage.pdf", "MyPdfTitle", "MyPdfAuthor", "MyPdfSubject", "MyPdfKeywords", "MyPdfCreator", PdfEncryption.PdfEncryption128BitRC4, PdfRight.PdfRightCanView Or PdfRight.PdfRightCanPrint, "UserPass", "OwnerPass")
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PdfCreateFromMultipageTIFF(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,GdPicture12.PdfEncryption,GdPicture12.PdfRight,System.String,System.String,GdPicture12.PdfCompression,GdPicture12.PdfCompression)">
      <summary>
 Creates a multipage PDF with encryption from a multipage tiff image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The multipage tiff image to save as PDF.</param>
      <param name="PdfFileDest">The destination of the pdf to create.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is not yet available.</param>
      <param name="Rights">A value returned by the PdfCreateRights method.</param>
      <param name="UserPassword">The user password for the PDF. Can be an empty string.</param>
      <param name="OwnerPassword">The owner password for the PDF. Can be an empty string.</param>
      <param name="BitonalCompressionScheme">A member of the PdfCompression enumeration. The scheme to use to compress bitonal bitmap within the PDF.</param>
      <param name="ColorCompressionScheme">A member of the PdfCompression enumeration. The scheme to use to compress color bitmap within the PDF.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting a tif image to a pdf with 128 bit encryption." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging()
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
 If oGdPictureImaging.TiffIsMultiPage(ImageID) Then
    oGdPictureImaging.PdfCreateFromMultipageTIFF(ImageID, "multipage.pdf", "MyPdfTitle", "MyPdfAuthor", "MyPdfSubject", "MyPdfKeywords", "MyPdfCreator", PdfEncryption.PdfEncryption128BitRC4, PdfRight.PdfRightCanView Or PdfRight.PdfRightCanPrint, "UserPass", "OwnerPass", PdfCompression.PdfCompressionJBIG2, PdfCompression.PdfCompressionJPEG)
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsPDF(System.Int32,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
      <summary>
 Saves a GdPicture image as single page pdf.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">The complete PDF file path to save a GdPicture image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="PDFA">True to generate PDF in PDF/A 1-b format else False.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting a tif image to a pdf." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging()
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
 If oGdPictureImaging.TiffIsMultiPage(ImageID) Then
    oGdPictureImaging.PdfCreateFromMultipageTIFF(MultipageImageID, "multipage.pdf", True, "MyPdfTitle", "MyPdfAuthor", "MyPdfSubject", "MyPdfKeywords", "MyPdfCreator")
 Else
    oGdPictureImaging.SaveAsPDF(ImageID, "singlepage.pdf", True, "MyPdfTitle", "MyPdfAuthor", "MyPdfSubject", "MyPdfKeywords", "MyPdfCreator")
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsPDF(System.Int32,System.IO.Stream,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
      <summary>
 Saves a GdPicture image as single page pdf stream.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="PDFStream">The Stream object to save a GdPicture image.</param>
      <param name="PDFA">True to generate PDF in PDF/A 1-b format else False.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert JPEG file to PDF/A 1-b" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim PDFStream As IO.Stream = New IO.MemoryStream
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.jpg")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsPDF(ImageID, PDFStream, True, "PDF Title", "PDF Author", "PDF Subject", "key1;key2;key3", "The Creator")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsPDF(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,GdPicture12.PdfEncryption,GdPicture12.PdfRight,System.String,System.String)">
      <summary>
 Saves a GdPicture image as single page pdf with encryption.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="FilePath">The complete PDF file path to save a GdPicture image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is
 not yet available.</param>
      <param name="Rights">A value returned by the PdfCreateRights method.</param>
      <param name="UserPassword">The user password for the PDF. Can be an empty string.</param>
      <param name="OwnerPassword">The owner password for the PDF. Can be an empty string.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Converting a tif image to a pdf with 128 bit encryption." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging()
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
 If oGdPictureImaging.TiffIsMultiPage(ImageID) Then
    oGdPictureImaging.PdfCreateFromMultipageTIFF(ImageID, "multipage.pdf", "MyPdfTitle", "MyPdfAuthor", "MyPdfSubject", "MyPdfKeywords", "MyPdfCreator", PdfEncryption.PdfEncryption128BitRC4, PdfRight.PdfRightCanView Or PdfRight.PdfRightCanPrint, "UserPass", "OwnerPass")
 Else
    oGdPictureImaging.SaveAsPDF(ImageID, "singlepage.pdf", "MyPdfTitle", "MyPdfAuthor", "MyPdfSubject", "MyPdfKeywords", "MyPdfCreator", PdfEncryption.PdfEncryption128BitRC4, PdfRight.PdfRightCanView Or PdfRight.PdfRightCanPrint, "UserPass", "OwnerPass")
 End If
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsPDF(System.Int32,System.IO.Stream,System.String,System.String,System.String,System.String,System.String,GdPicture12.PdfEncryption,GdPicture12.PdfRight,System.String,System.String)">
      <summary>
 Saves a GdPicture image as single page pdf stream with encryption.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="PDFStream">The Stream object to save a GdPicture image.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is
 not yet available.</param>
      <param name="Rights">A value returned by the PdfCreateRights method.</param>
      <param name="UserPassword">The user password for the PDF. Can be an empty string.</param>
      <param name="OwnerPassword">The owner password for the PDF. Can be an empty string.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="How to convert JPEG file to encrypted PDF" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim Rights As Right = oGdPictureImaging.PdfCreateRights(True, True, True, True, True, True, True, True)
 Dim PDFStream As IO.Stream = New IO.MemoryStream
 Dim ImageID As Integer= oGdPictureImaging.CreateGdPictureImageFromFile("image.jpg")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsPDF(ImageID, PDFStream, "PDF Title", "PDF Author", "PDF Subject", "key1;key2;key3", "The Creator", PdfEncryption.PdfEncryption128BitRC4, Rights, "userpass", "ownerpass")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SaveAsPDF(System.Int32,System.Runtime.InteropServices.ComTypes.IStream,System.String,System.String,System.String,System.String,System.String,GdPicture12.PdfEncryption,GdPicture12.PdfRight,System.String,System.String)">
      <summary>
 Saves a GdPicture image as single page pdf stream with encryption.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="PDFStream">The IStream object to save a GdPicture image.</param>
      <param name="Title">The title of the PDF.</param>
      <param name="Author">The PDF Author.</param>
      <param name="Subject">The PDF Subject.</param>
      <param name="Keywords">The PDF Keywords.</param>
      <param name="Creator">The name of the application which creates the PDF.</param>
      <param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is
 not yet available.</param>
      <param name="Rights">A value returned by the PdfCreateRights method.</param>
      <param name="UserPassword">The user password for the PDF. Can be an empty string.</param>
      <param name="OwnerPassword">The owner password for the PDF. Can be an empty string.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IsNegative(System.Int32)">
      <summary>
 Determines whether a GdPicture image (document) is negative.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 True if it is a Negative image, else False.
 </returns>
      <remarks>
 Use the GetStat() method to check if this method has completed successfully.
 </remarks>
      <example>
        <code description="Determining whether a document is negative." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    Dim Negative As Boolean = oGdPictureImaging.IsNegative(ImageID)
    MessageBox.Show("Is Negative: " + Negative.ToString())
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IsBlank(System.Int32)">
      <summary>
 Returns True if a GdPicture image(document) is Blank.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 True if it is a blank image, else False.
 </returns>
      <remarks>
 Use the GetStat() method to check if this method has completed successfully.
 </remarks>
      <example>
        <code description="Determining whether an image is blank or not ." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    Dim Blank As Boolean = oGdPictureImaging.IsBlank(ImageID)
    MessageBox.Show("Is Blank: " + Blank.ToString())
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IsBlank(System.Int32,System.Single)">
      <summary>
 Detects if a GdPicture image (document) is Blank.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Confidence">Maximum percentage of blank pixels. Suggested value is in the range [99.0 - 99.5]. Most of the
 time, we consider that a page with more than 99% of Blank pixels is blank.</param>
      <returns>
 True if it is a blank image, else False.
 </returns>
      <remarks>
 Use the GetStat() method to check if this method has completed successfully.
 </remarks>
      <example>
        <code description="Determining whether an image is blank or not by using a confidence value within the suggested range." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    Dim Blank As Boolean = oGdPictureImaging.IsBlank(ImageID, 98)
    MessageBox.Show("Is Blank: " + Blank.ToString())
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IsBlank(System.Int32,System.Single,System.Boolean)">
      <summary>
 Detects if a GdPicture image (document) is Blank, with option to account for margins.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Confidence">Maximum percentage of blank pixels. Suggested value is in the range [99.0 - 99.5]. Most of the
 time, we consider that a page with more than 99% of Blank pixels is blank.</param>
      <param name="AccountForMargins">Specifies if the algorithm must drop the margins during the calculation. Yields more accurate results for images with margins. Default value is False.</param>
      <returns>
 True if it is a blank image, else False.
 </returns>
      <remarks>
 Use the GetStat() method to check if this method has completed successfully.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IsBlank(System.Int32,System.Single,System.Boolean,System.Double@)">
      <summary>
 Detects if a GdPicture image (document) is Blank, with parameters to account for margins and for computed confidence limit.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Confidence">Maximum percentage of blank pixels. Suggested value is in the range [99.0 - 99.5]. Most of the
 time, we consider that a page with more than 99% of Blank pixels is blank.</param>
      <param name="AccountForMargins">Specifies if the algorithm must drop the margins during the calculation. Yields more accurate results for images with margins. Default value is False.</param>
      <param name="ConfidenceOut">Returns the confidence limit computed by the algorithm.</param>
      <returns>
 True if it is a blank image, else False.
 </returns>
      <remarks>
 Use the GetStat() method to check if this method has completed successfully.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.FormDropOut(System.Int32,System.Int32,System.Boolean)">
      <summary>
 Removes empty form information and keeps the entered information only. Highly useful for better and
 faster OCR processing, and reducing the image compression size.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The Filled Form.</param>
      <param name="TemplateID">GdPicture Image Identifier. The Empty Template Form Document.Has to be the same Height and Width as ImageID.</param>
      <param name="UseGapCorrection">Whether or not to try to fix gaps of interaction between form and
 data.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 The Filled Form Image and the Empty Template image have to be the same height and width, or else an
 Invalid Parameter will be returned.
 </para>
        <para>
 Setting UseGapCorrection to True, will slow the speed of the algorithm, but will result in much more
 accurate characters and filled data. Nonetheless, most applications will not need it. If accuracy is
 what is sought after, set it to true, but make sure the process is called after the scan process and
 not during to avoid any delays. The slowing of the UseGapCorrection option should be overlooked when
 considering the tremendous outcomes of FormDropOut mentioned above on the application in general.
 </para>
      </remarks>
      <example>
        <code description="Dropping out an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    Dim TemplateID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("template.tif")
    If TemplateID &lt;&gt; 0 Then
       oGdPictureImaging.FormDropOut(ImageID, TemplateID, True)
       oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionCCITT4)
       oGdPictureImaging.ReleaseGdPictureImage(TemplateID)
    Else
       MessageBox.Show("Error: Cannot load template: " + oGdPictureImaging.GetStat().ToString())
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.RemoveBlob(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.BlobRemoveMode)">
      <summary>
 Removes blobs and ink blobs with a specified size margin. 
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Only 1 bit per pixel images with black and white palette are supported.</param>
      <param name="MinBlobWidth">Minimum Width of Blob considered for removal.</param>
      <param name="MinBlobHeight">Minimum Height of Blob considered for removal.</param>
      <param name="MaxBlobWidth">Maximum Width of Blob considered for removal.</param>
      <param name="MaxBlobHeight">Maximum Height of Blob considered for removal.</param>
      <param name="Mode">Can be any value, not used internally starting V11.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 This method is used in the "Document Clean Up" C# Demo. Please check appendix "Finding Demo Applications" for more information.
 </para>
        <para>
 This method will remove blobs with black pixels being at least 60% of the bounding rectangle of the blob. 
 </para>
      </remarks>
      <example>
        <code description="Removing blobs of minimum 20 pixels in any dimension and maximum 100 pixels in any dimension." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) &lt;&gt; 1 Then
       oGdPictureImaging.ConvertTo1BppAT(ImageID)
    End If
    oGdPictureImaging.RemoveBlob(ImageID, 20, 20, 100, 100, BlobRemoveMode.FavorSpeed)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionCCITT4)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.RemoveBlob(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Removes blobs and ink blobs with a specified size margin. It is a very powerful tool for despeckling (removing parasites) from images without affecting the content.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Only 1 bit per pixel images with black and white palette are supported.</param>
      <param name="MinBlobWidth">Minimum Width of Blob considered for removal.</param>
      <param name="MinBlobHeight">Minimum Height of Blob considered for removal.</param>
      <param name="MaxBlobWidth">Maximum Width of Blob considered for removal.</param>
      <param name="MaxBlobHeight">Maximum Height of Blob considered for removal.</param>
      <param name="MinFillPercent">Minimum percentage of black pixels within blob compared to blob bounding rectangle. Range [1-99]</param>
      <param name="MaxFillPercent">Maximum percentage of black pixels within blob compared to blob bounding rectangle. Range [2-100]</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 This method is used in the "Document Clean Up" C# Demo. Please check appendix "Finding Demo Applications" for more information.
 </para>
        <para>
 To use it as a despeckling method you need to:
 1. Know the range of the noise size (which is usually smaller than a character size).
 2. Set the MinFillPercent and MaxFillPercent to 1 and 100 respectively.
 3. Set MinBlobWidth and MinBlobHeight to 1 and 2 respectively.
 4. Set MaxBlobWidth and MaxBlobHeight to a value smaller than the size of a character in your image.
 The size of the character is highly dependent on the dpi of the image and the content. The higher the dpi, the higher the MaxBlobWidth and MaxBlobHeight should be.
 </para>
      </remarks>
      <example>
        <code description="Removing blobs of minimum 20 pixels in any dimension and maximum 100 pixels in any dimension with minimum 75% filling." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) &lt;&gt; 1 Then
       oGdPictureImaging.ConvertTo1BppAT(ImageID)
    End If
    oGdPictureImaging.RemoveBlob(ImageID, 20, 20, 100, 100, 75, 100)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionCCITT4)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.RemoveHolePunch(System.Int32)">
      <summary>
 Removes punch holes on the left side of the image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Only 1 bit per pixel images with black and white palette are supported.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" and "Document Clean Up" C# Demo. Please check appendix "Finding Demo Applications" for more information.
 </remarks>
      <example>
        <code description="Removing punch holes on the left margin of the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) &lt;&gt; 1 Then
       oGdPictureImaging.ConvertTo1BppAT(ImageID)
    End If
    oGdPictureImaging.RemoveHolePunch(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionCCITT4)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.RemoveHolePunch(System.Int32,GdPicture12.HolePunchMargins)">
      <summary>
 Removes punch holes on any specified margin of the image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Only 1 bit per pixel images with black and white palette are supported.</param>
      <param name="Margins">A member of the HolePunchMargins enumeration. You can combine margins using the or operator.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 Binary operator "OR" can be used with HolePunch Enumerations to specify more than one margin at the same time.
 </para>
        <para>
 This method is used in the "Image Processing" and "Document Clean Up" C# Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Removing punch holes from all margins of the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) &lt;&gt; 1 Then
       oGdPictureImaging.ConvertTo1BppAT(ImageID)
    End If
    oGdPictureImaging.RemoveHolePunch(ImageID, HolePunchMargins.MarginBottom Or HolePunchMargins.MarginLeft Or HolePunchMargins.MarginRight Or HolePunchMargins.MarginTop)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionCCITT4)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.RemoveStapleMark(System.Int32)">
      <summary>
 Removes the staples marks on the image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Only 1 bit per pixel images with black and white palette are supported.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Removing staple marks from the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) &lt;&gt; 1 Then
       oGdPictureImaging.ConvertTo1BppAT(ImageID)
    End If
    oGdPictureImaging.RemoveStapleMark(ImageID)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionCCITT4)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AutoTextInvert(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
      <summary>
 Inverts white text with black background to become black text with white background.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Only 1 bit per pixel images with black and white palette are supported.</param>
      <param name="MinObjectWidth">Minimum width of the black background object.</param>
      <param name="MinObjectHeight">Minimum height of the black background object.</param>
      <param name="MinBlackPercent">Minimum percent of black pixels within the background object. Can be thought of as how much black space there needs to be
 where there is no white text.</param>
      <param name="MaxBlackPercent">Maximum percent of black pixels within the background object. Can be thought of as how much white text there needs to be
 in the black object.</param>
      <param name="FixBackground">Whether or not to despeckle the background after inverting it. Black objects are usually imperfectly scanned in low DPIs, resulting in holes
 which would appear as noise once inverted. Setting this to True would clean up this noise, but would also eliminate some characters if they are too small.</param>
      <param name="ConnectedToLines">Whether or not the object is connected to lines as part of a table for example.</param>
      <param name="MaxLinesThickness">If ConnectedToLines is True, then you would need to specify the max thickness of those lines. A value between 1-5 is suggested.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Auto inverting white text." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) &lt;&gt; 1 Then
       oGdPictureImaging.ConvertTo1BppAT(ImageID)
    End If
    oGdPictureImaging.AutoTextInvert(ImageID, 50, 20, 60, 95, True, False, 0)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionCCITT4)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DeleteBlackBorders(System.Int32,System.Int32,System.Boolean)">
      <summary>
 Deletes black borders of the binary document image by replacing them with white content.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Only 1 bit per pixel images with black and white palette are supported.</param>
      <param name="Margin">Max distance in pixels from edges of image a border is allowed to start. Suggested value is 10.</param>
      <param name="SkewedBorders">Whether the borders are skewed or not. Meaning if the borders are not uniform in size,
  such that their width changes along the y-axis if they are vertical borders,
  or their height changes along the x-axis if they are horizontal borders, or both. Suggested value is False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 This method is used in the "Image Processing" and "Document Clean Up" C# Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
        <para>
 It is highly suggested to use AutoDeskew() before calling this method if the image or the borders are skewed, 
 if that is not an option, setting this parameter to True will try to overcome the borders without overcoming the document content. But as skewed borders could easily
 overlap with document content, the method might become overzealous and delete some document content.
 </para>
      </remarks>
      <example>
        <code description="Autodeskew image and delete the black borders " lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) &lt;&gt; 1 Then
       oGdPictureImaging.ConvertTo1BppAT(ImageID)
    End If
    oGdPictureImaging.AutoDeskew(ImageID)
    oGdPictureImaging.DeleteBlackBorders(ImageID, 10, False)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionCCITT4)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.RemoveLines(System.Int32,GdPicture12.LineRemoveOrientation)">
      <summary>
 Performs line removal on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Only 1 bit per pixel images with black and white palette are supported.</param>
      <param name="Orientation">A member of LineRemoveOrientation enumeration specifying whether to remove horizontal or vertical lines.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <remarks>
        <para>
 You can make the method remove both Vertical and Horizontal Lines by using a binary OR between LineRemoveOrientation.Horizontal and LineRemoveOrientation.Vertical
 </para>
        <para>
 This method is used in the "Document Clean Up" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Removing horizontal lines from an Image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) &lt;&gt; 1 Then
       oGdPictureImaging.ConvertTo1BppAT(ImageID)
    End If
    oGdPictureImaging.RemoveLines(ImageID, LineRemoveOrientation.Horizontal)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionCCITT4)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.RemoveLines(System.Int32,GdPicture12.LineRemoveOrientation,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
 Performs line removal on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 method.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. Only 1 bit per pixel images with black and white palette are supported.</param>
      <param name="Orientation">A member of LineRemoveOrientation enumeration specifying whether to remove horizontal or vertical lines.</param>
      <param name="MaxLineGap">Maximum Gap size in the line for the line to still be considered a line. If set to 0, no gaps are allowed in the line. If set to -1,
 gaps calculation are not considered in the line equation. Default valus is -1.</param>
      <param name="MaxLineThickness">Maximum thickness of a line allowed at any area of the line. If the line is thicker than this value, the line will not be removed. Range from 1 to 50. Default value is 8.</param>
      <param name="MinLineLength">Minimum Length allowed for the line to be removed. Only lines equal to or longer than this value will be removed. Range from 1 to Image Width if Horizontal, and from 1 to Image Height if Vertical Line. Default valus is 75.</param>
      <param name="MaxInterception">Maximum Character Interception of the Line. If characters intercepting the line have a size of interception larger than
 this value, the line will not be removed. Range from 0 to MinLineLength / 2. Default value is 8.</param>
      <param name="ReConnectBrokenCharacters">Whether to reconnect characters that are broken upon the removal of the line, or keep the gaps where the line was in them. Default value is False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <remarks>
        <para>
 You can make the method remove both Vertical and Horizontal Lines by using a binary OR between LineRemoveOrientation.Horizontal and LineRemoveOrientation.Vertical
 </para>
        <para>
 If you are using Line Removal to help better your OCR result, set ReConnectBrokenCharacters to True.
 </para>
        <para>
 If MaxLineGap is set to -1, its formulas will not be used in the calculation of the line, thus some lines removed will have gaps. If you
 do not want gaps at all, set it to -1.
 </para>
        <para>
 This method is used in the "Document Clean Up" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <example>
        <code description="Removing horizontal lines from an Image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.tif")
 If imageId &lt;&gt; 0 Then
    If oGdPictureImaging.GetBitDepth(ImageID) &lt;&gt; 1 Then
       oGdPictureImaging.ConvertTo1BppAT(ImageID)
    End If
    oGdPictureImaging.RemoveLines(ImageID, LineRemoveOrientation.Horizontal)
    oGdPictureImaging.SaveAsTIFF(ImageID, "test.tif", TiffCompression.TiffCompressionCCITT4)
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AutoDeskew(System.Int32)">
      <summary>
 Tries to deskew a GdPicture image to about ± 15 degrees.
 Deskewing an image can help a lot to do OCR, OMR, barcode detection or just improve the readability
 of an image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetSkewAngle(System.Int32,System.Single)" />
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <example>
        <code description="Using AutoDeskew on an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.AutoDeskew(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AutoDeskew(System.Int32,System.Single)">
      <summary>
 Tries to deskew a GdPicture image to about ± specified degrees.
 Deskewing an image can help a lot to do OCR, OMR, barcode detection or just improve the readability
 of an image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="MaxAngleOfResearch">Maximum angle of research. IE: set 10 to perform a skew research
 about ±10 degrees. A value lower than 15 is suggested. Value used by other overloads is 15.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetSkewAngle(System.Int32,System.Single)" />
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method is useful when you suspect some images to be skewed, but you do not want completely rotated
 images to be deskewed. It offers control and limitation over the deskew operation.
 </remarks>
      <example>
        <code description="Using AutoDeskew on an image with max angle of 10 is considered for investigation." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.AutoDeskew(ImageID, 15)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AutoDeskew(System.Int32,System.Single,System.Drawing.Color)">
      <summary>
 Tries to deskew a GdPicture image to about ± specified degrees. This method enables to specify the
 background color to use.
 Deskewing an image can help a lot to do OCR, OMR, barcode detection or just improve the readability
 of an image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="MaxAngleOfResearch">Maximum angle of research. IE: set 10 to perform a skew research
 about ±10 degrees. A value lower than 15 is suggested. Value used by other overloads is 15.</param>
      <param name="BackColor">Color to use to fill background. A suitable color value can be obtained by using the ARGB() method.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetSkewAngle(System.Int32,System.Single)" />
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Deskewing often results in "padding" surrounding the image where the dimensions of the image were extended because of the rotation.
 This method offers a fill color for this padding, so that if you specify it to be the same as the original background color, the deformities
 would not show.
 </remarks>
      <example>
        <code description="Using AutoDeskew on an image with max angle of 10 is considered for investigation with green as a background color." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.AutoDeskew(ImageID, 10, oGdPictureImaging.ARGB(255,0,255,0))
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AutoDeskew(System.Int32,System.Single,System.Int32,System.Single,System.Boolean)">
      <summary>
 Tries to deskew a GdPicture image to about ± specified degrees. This method enables to specify the
 background color to use as a Color Integer Value. It also enables you to put a cut off value where slight skewing of image is allowed.
 Deskewing an image can help a lot to do OCR, OMR, barcode detection or just improve the readability
 of an image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="MaxAngleOfResearch">Maximum angle of research. IE: set 10 to perform a skew research
 about ±10 degrees. A value lower than 15 is suggested. Value used by other overloads is 15.</param>
      <param name="BackColor">Color to use to fill background. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="AngleStep">Determines the smallest angle of skew to detect. 0.25 is suggested. Higher value results in faster detection and vice-versa. Value used by other overloads is 0.25.</param>
      <param name="Optimistic">Determines if the engine must be otpimistic in the skew detection. For example, set true when you know the image has a skew and false otherwise. Value used by other overloads is False.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetSkewAngle(System.Int32,System.Single)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 When minor skewing of images does not affect the subsequent processes, sometimes it is perferred not to deskew the image,
 could be for quality or timesaving. This method offers the input of a cutt off value, where slight skewing is allowed.
 </para>
        <para>
 Be aware: If the skew angle is larger than the cutt off value, the returned value will be rounded to the nearest  multiple of (AngleStep)
 </para>
      </remarks>
      <example>
        <code description="Using AutoDeskew on an image with max angle of 10 is considered for investigation with green as a background color." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.AutoDeskew(ImageID, 10, oGdPictureImaging.ARGBI(255, 0,255,0), 0.25, True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AutoDeskew(System.Int32,System.Single,System.Drawing.Color,System.Single,System.Boolean)">
      <summary>
 Tries to deskew a GdPicture image to about ± specified degrees. This method enables to specify the
 background color to use as a Color Object. It also enables you to put a cut off value where slight skewing of image is allowed.
 Deskewing an image can help a lot to do OCR, OMR, barcode detection or just improve the readability
 of an image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="MaxAngleOfResearch">Maximum angle of research. IE: set 10 to perform a skew research
 about ±10 degrees. A value lower tha 15 is suggested.</param>
      <param name="BackColor">Color to use to fill background. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="AngleStep">Determines the smallest angle of skew to detect. 0.25 is suggested. Higher value results in faster detection and vice-versa.</param>
      <param name="Optimistic">Determines if the engine must be otpimistic in the skew detection. For example, set true when you know the image has a skew and false otherwise. Default value is True.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetSkewAngle(System.Int32,System.Single)" />
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>
 When minor skewing of images does not affect the subsequent processes, sometimes it is perferred not to deskew the image,
 could be for quality or timesaving. This method offers the input of a cutt off value, where slight skewing is allowed.
 </para>
        <para>
 Be aware: If the skew angle is larger than the cutt off value, the returned value will be rounded to the nearest  multiple of (AngleStep)
 </para>
      </remarks>
      <example>
        <code description="Using AutoDeskew on an image with max angle of 10 is considered for investigation with green as a background color." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.AutoDeskew(ImageID, 10, oGdPictureImaging.ARGB(255, 0,255,0), 0.25, True)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetSkewAngle(System.Int32,System.Single)">
      <summary>
 Determines the skew angle of an image in degrees.
 It has a parameter for max angle of research.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.AutoDeskew(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="MaxAngleOfResearch">Maximum angle of research. IE: set 10 to perform a skew research
 about ±10 degrees. A value lower than 15 is suggested.</param>
      <returns>
 Image skew in degrees.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method has succeeded.
 </remarks>
      <example>
        <code description="Obtaining the skew angle." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Angle As Single = oGdPictureImaging.GetSkewAngle(ImageID, 15)
    oGdPictureImaging.RotateAnglePreserveDimensionsCenterBackColor(ImageID, -Angle, Color.White)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetSkewAngle(System.Int32,System.Single,System.Single,System.Boolean)">
      <summary>
 Determines the skew angle of an image in degrees.
 It has a parameter for max angle of research.
 It also has a minimum angle cut off value where smaller angles will be tolerated.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.AutoDeskew(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="MaxAngleOfResearch">Maximum angle of research. IE: set 10 to perform a skew research
 about ±10 degrees. A value lower than 15 is suggested.</param>
      <param name="AngleStep">Determines the smallest angle of skew to detect. 0.25 is suggested. Higher value results in faster detection and vice-versa.</param>
      <param name="Optimistic">Determines if the engine must be otpimistic in the skew detection. For example, set true when you know the image has a skew and false otherwise.
 If you do not know which to choose, suggested value is True.</param>
      <returns>
 Image skew in degrees.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method has succeeded.
 </remarks>
      <example>
        <code description="Obtaining the skew angle." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Angle As Single = oGdPictureImaging.GetSkewAngle(ImageID, 15, 0.25, True)
    oGdPictureImaging.RotateAnglePreserveDimensionsCenterBackColor(ImageID, -Angle, Color.White)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropWhiteBorders(System.Int32)">
      <summary>
 Detects and removes margins consisting of white color around a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method or an overload of it is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <example>
        <code description="Cropping the white borders of the image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CropWhiteBorders(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropWhiteBorders(System.Int32,System.Single)">
      <summary>
 Detects and removes margins consisting of white color around a GdPicture image.
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be removed, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Confidence">Confidence threshold in percentage. Default value is 98.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method or an overload of it is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <example>
        <code description="Cropping the white borders of the image that have a detection confidence of more than 98%." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CropWhiteBorders(ImageID, 98)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropWhiteBorders(System.Int32,System.Single,System.Int32)">
      <summary>
 Detects and removes margins consisting of white color around a GdPicture image.
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be removed, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 It also has a SkipLinesCount which is the number of lines surrounding the image to be skipped and not
 considered as borders and removed.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Confidence">Confidence threshold in percentage. Default value is 98.</param>
      <param name="SkipLinesCount">Specifies the number of lines around the image which must be
 ignored.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method or an overload of it is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </remarks>
      <example>
        <code description="Cropping the white borders of the image that have a detection confidence of more than 98% and skipping three lines that should not be counted as borders." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CropWhiteBorders(ImageID, 98, 3)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropBlackBorders(System.Int32)">
      <summary>
 Detects and removes margins consisting of black color around a GdPicture image.
 This method only detects rectangular borders, for all types of borders, please use DeleteBlackBorders() instead.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>This method or an overload of it is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
        <para>
 This method only detects rectangular borders, for all types of borders, including ones that are resultant from deskewing, or bad scanning, please use DeleteBlackBorders() instead.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.DeleteBlackBorders(System.Int32,System.Int32,System.Boolean)" />
      <example>
        <code description="Cropping the black borders of the image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CropBlackBorders(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropBlackBorders(System.Int32,System.Single)">
      <summary>
 Detects and removes margins consisting of black color around a GdPicture image.
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be removed, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 This method only detects rectangular borders, for all types of borders, please use DeleteBlackBorders() instead.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>This method or an overload of it is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
        <para>
 This method only detects rectangular borders, for all types of borders, including ones that are resultant from deskewing, or bad scanning, please use DeleteBlackBorders() instead.
 </para>
      </remarks>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Confidence">Confidence threshold in percentage 0-100. Default value is 98.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.DeleteBlackBorders(System.Int32,System.Int32,System.Boolean)" />
      <example>
        <code description="Cropping the black borders of the Image that have a detection confidence of more than 98%" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CropBlackBorders(ImageID, 98.0)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropBlackBorders(System.Int32,System.Single,System.Int32)">
      <summary>
 Detects and  removes margins consisting of black color around a GdPicture image.
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be removed, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 It also has a SkipLinesCount which is the number of lines surrounding the image to be skipped and not
 considered as borders and removed.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>This method or an overload of it is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
        <para>
 This method only detects rectangular borders, for all types of borders, including ones that are resultant from deskewing, or bad scanning, please use DeleteBlackBorders() instead.
 </para>
      </remarks>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Confidence">Confidence threshold in percentage 0-100. Default value is 98.</param>
      <param name="SkipLinesCount">Specifies the number of lines around the image which must be
 ignored.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.DeleteBlackBorders(System.Int32,System.Int32,System.Boolean)" />
      <example>
        <code description="Cropping the black borders of the Image that have a detection confidence of more than 98% and skipping the first three lines on the sides." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CropBlackBorders(ImageID, 98.0, 3)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropBlackBordersEx(System.Int32)">
      <summary>
 Detects and sets to White, margins consisting of black color around a GdPicture image.
 This method does not have the same behavior as the CropBlackBorders() method: The black borders
 are not removed but are set to blank. Therefore, the image dimensions are kept the same.
 This method only detects rectangular borders, for all types of borders, please use DeleteBlackBorders() instead.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
        <para>This method or an overload of it is used in the "Image Processing" Demo. Please check appendix
 "Finding Demo Applications" for more information.
 </para>
        <para>
 This method only detects rectangular borders, for all types of borders, including ones that are resultant from deskewing, or bad scanning, please use DeleteBlackBorders() instead.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.DeleteBlackBorders(System.Int32,System.Int32,System.Boolean)" />
      <example>
        <code description="Cropping the black borders of the image by setting them to blank." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CropBlackBordersEx(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropBlackBordersEx(System.Int32,System.Single)">
      <summary>
 Detects and sets to White, margins consisting of black color around a GdPicture image.
 This method does not have the same behavior as the CropBlackBorders() method: The black borders
 are not removed but are set to blank. Therefore, the image dimensions are kept the same.
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be set as blank, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 This method only detects rectangular borders, for all types of borders, please use DeleteBlackBorders() instead.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Confidence">Confidence threshold in percentage. Default value is 98.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method only detects rectangular borders, for all types of borders, including ones that are resultant from deskewing, or bad scanning, please use DeleteBlackBorders() instead.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.DeleteBlackBorders(System.Int32,System.Int32,System.Boolean)" />
      <example>
        <code description="Cropping the borders of the Image that have a detection confidence of more than 98%. Those borders will be set to blank and not removed." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CropBlackBordersEx(ImageID, 98.0)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropBlackBordersEx(System.Int32,System.Single,System.Int32)">
      <summary>
 Detects and sets to White, margins consisting of black color around a GdPicture image.
 This method does not have the same behavior as the CropBlackBorders() method: The black borders
 are not removed but are set to blank. Therefore, the image dimensions are kept.
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be set as blank, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 It also has a SkipLinesCount which is the number of lines surrounding the image to be skipped and not
 considered as borders to be set as blanked.
 This method only detects rectangular borders, for all types of borders, please use DeleteBlackBorders() instead.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Confidence">Confidence threshold in percentage. Default value is 98.</param>
      <param name="SkipLinesCount">Specifies the number of lines around the image which must be
 ignored.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 This method only detects rectangular borders, for all types of borders, including ones that are resultant from deskewing, or bad scanning, please use DeleteBlackBorders() instead.
 </remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.DeleteBlackBorders(System.Int32,System.Int32,System.Boolean)" />
      <example>
        <code description="Cropping the borders of the Image that have a detection confidence of more than 98%. Those borders will be set to blank and not removed. Three lines will be ignored and not considered as borders." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CropBlackBordersEx(ImageID, 98.0, 3)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropBorders(System.Int32,GdPicture12.ImagingContext)">
      <summary>
 Detects and removes margins consisting of constant color around a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Context">A member of the ImagingContext enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Using CropBorders" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CropBorders(ImageID, ImagingContext.ContextDocument)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropBorders(System.Int32,System.Single,GdPicture12.ImagingContext)">
      <summary>
 Detects and removes margins consisting of constant color around a GdPicture image.
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be removed, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Confidence">Confidence threshold in percentage. Default value is 98 for documents and
 92 for digital photo.</param>
      <param name="Context">A member of the ImagingContext enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Using CropBorders with confidence value of 98%" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CropBorders(ImageID, 98.0, ImagingContext.ContextDocument)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropBorders(System.Int32,System.Single,GdPicture12.ReferencePoint,GdPicture12.ImagingContext)">
      <summary>
 Detects and removes margins consisting of constant color around a GdPicture image.
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be removed, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Confidence">Confidence threshold in percentage. Default value is 98 for documents
 and 92 for digital photo.</param>
      <param name="PixelReference">A member of the ReferencePoint enumeration. Default value is
 ReferencePoint.ReferencePointTopLeft.</param>
      <param name="Context">A member of the ImagingContext enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Using CropBorders with confidence value of 98% and a Reference Point of Top_Right" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.CropBorders(ImageID, 98.0, ReferencePoint.ReferencePointTopRight, ImagingContext.ContextDocument)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropBorders(System.Int32,System.Single,GdPicture12.ReferencePoint,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
 Detects margins consisting of constant color around a GdPicture image.
 Returns the coordinate of the cropping selection which can be used by the Crop
 method.
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be removed, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Confidence">Confidence threshold in percentage. Default value is 98 for documents
 and 92 for digital photo.</param>
      <param name="PixelReference">A member of the ReferencePoint enumeration. Default value is
 ReferencePoint.ReferencePointTopLeft.</param>
      <param name="Left">Returns the left coordinate, in pixel, of the area without margins.</param>
      <param name="Top">Returns the top coordinate, in pixel, of the area without margins.</param>
      <param name="Width">Returns the width, in pixel, of the area without margins.</param>
      <param name="Height">Returns the height, in pixel, of the area without margins.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Detecting and then cropping  borders around an image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("input.png")
 If imageId &lt;&gt; 0 Then
    Dim Left As Integer
    Dim Top As Integer
    Dim Width As Integer
    Dim Height As Integer
    oGdPictureImaging.CropBorders(ImageID, 98, ReferencePoint.ReferencePointTopRight, Left, Top, Width, Height)
    oGdPictureImaging.Crop(ImageID, Left, Top, Width, Height) 'Crop
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CropBorders(System.Int32,System.Single,GdPicture12.ReferencePoint,System.Int32@,System.Int32@,System.Int32@,System.Int32@,GdPicture12.ImagingContext)">
      <summary>
 Detects margins consisting of constant color around a GdPicture image.
 Returns the coordinate of the cropping selection which can be used by the Crop
 method.
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be removed, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Confidence">Confidence threshold in percentage. Default value is 98 for documents
 and 92 for digital photo.</param>
      <param name="PixelReference">A member of the ReferencePoint enumeration. Default value is
 ReferencePoint.ReferencePointTopLeft.</param>
      <param name="Left">Returns the left coordinate, in pixel, of the area without margins.</param>
      <param name="Top">Returns the top coordinate, in pixel, of the area without margins.</param>
      <param name="Width">Returns the width, in pixel, of the area without margins.</param>
      <param name="Height">Returns the height, in pixel, of the area without margins.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Detecting and then cropping  borders around an image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("document.tif")
 If imageId &lt;&gt; 0 Then
    Dim Left As Integer
    Dim Top As Integer
    Dim Width As Integer
    Dim Height As Integer
    oGdPictureImaging.CropBorders(ImageID, 92, ReferencePoint.ReferencePointTopRight, Left, Top, Width, Height, Context.ContextDocument)
    oGdPictureImaging.Crop(ImageID, Left, Top, Width, Height) 'Crop
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetCacheMode(GdPicture12.PageCacheMode)">
      <summary>
 Specify the way that GdPicture handles bitmap caching.
 </summary>
      <param name="CacheMode">A member of the PageCacheMode enumeration.</param>
      <remarks>Default cache mode used is memory.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.PdfCreateRights(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
 Create a value to be used with the "Rights" parameter of PDF methods for saving with encryption.
 </summary>
      <param name="CanPrint">Allows the user to print the document.</param>
      <param name="CanModify">Allows the user to edit the document.</param>
      <param name="CanCopy">Allows the user to copy text and graphics from the document.</param>
      <param name="CanAddNotes">Allows the user to add annotations.</param>
      <param name="CanFillFields">Allows the user to fill in form fields. Only works with 128-bit
 encryption.</param>
      <param name="CanCopyAccess">Enables copying for use with accessibility features. Only works with
 128-bit encryption.</param>
      <param name="CanAssemble">Allows the user to assemble the document. Only works with 128-bit
 encryption.</param>
      <param name="CanPrintFull">Allows high resolution printing of the document. Only works with 128-bit
 encryption.</param>
      <returns>
 A combination of members of the Right enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ColorRGBtoCMY(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
 Converts RBG color from a set of red, green, and blue color components to CMY: a set of
 Cyan, Magenta and Yellow components.
 </summary>
      <param name="Red">Input red component value [0 - 255].</param>
      <param name="Green">Input green component value [0 - 255].</param>
      <param name="Blue">Input blue component value [0 - 255].</param>
      <param name="Cyan">Output parameter. Cyan component value [0 - 255].</param>
      <param name="Magenta">Output parameter. Magenta component value [0 - 255].</param>
      <param name="Yellow">Output parameter. Yellow component value [0 - 255].</param>
      <example>
        <code description="Using ColorRGBtoCMYK." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim Cyan As Integer
 Dim Magenta As Integer
 Dim Yellow As Integer
 oGdPictureImaging.ColorRGBtoCMY(255, 0, 128, 0, Cyan, Magenta, Yellow)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ColorRGBtoCMYK(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
 Converts RBG color from a set of red, green, and blue color components to CMYK color: a set of
 Cyan, Magenta, Yellow and Black (Key) components.
 </summary>
      <param name="Red">Input red component value [0 - 255].</param>
      <param name="Green">Input green component value [0 - 255].</param>
      <param name="Blue">Input blue component value [0 - 255].</param>
      <param name="Cyan">Output parameter. Cyan component value [0 - 255].</param>
      <param name="Magenta">Output parameter. Magenta component value [0 - 255].</param>
      <param name="Yellow">Output parameter. Yellow component value [0 - 255].</param>
      <param name="Black">Output parameter. Black component (Key) value [0 - 255].</param>
      <example>
        <code description="Using ColorRGBtoCMYK." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim Cyan As Integer
 Dim Magenta As Integer
 Dim Yellow As Integer
 Dim Black As Integer
 oGdPictureImaging.ColorRGBtoCMYK(255, 0, 128, 0, Cyan, Magenta, Yellow, Black)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ColorCMYKtoRGB(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
 Converts CMYK color from a set of Cyan, Magenta, Yellow and Black (Key) color components to RGB color:
 a set of red, green, and blue components.
 </summary>
      <param name="Cyan">Input Cyan component value [0 - 255].</param>
      <param name="Magenta">Input Magenta component value [0 - 255].</param>
      <param name="Yellow">Input Yellow component value [0 - 255].</param>
      <param name="Black">Input Black component (Key) value [0 - 255].</param>
      <param name="Red">Output parameter. Red component value [0 - 255].</param>
      <param name="Green">Output parameter. Green component value [0 - 255].</param>
      <param name="Blue">Output parameter. Blue component value [0 - 255].</param>
      <example>
        <code description="Using ColorCMYKtoRGB." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim Red As Integer
 Dim Green As Integer
 Dim Blue As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.ColorCMYKtoRGB(255, 0, 128, 0, Red, Green, Blue)
 oGdPictureImaging.ClearImage(ImageID, oGdPictureImaging.ARGB(255, Red, Green, Blue))
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ColorCMYtoRGB(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
 Converts CMY color from a set of Cyan, Magenta and Yellow color components to RGB color: a set of
 red, green, and blue components.
 </summary>
      <param name="Cyan">Input Cyan component value [0 - 255].</param>
      <param name="Magenta">Input Magenta component value [0 - 255].</param>
      <param name="Yellow">Input Yellow component value [0 - 255].</param>
      <param name="Red">Output parameter. Red component value [0 - 255].</param>
      <param name="Green">Output parameter. Green component value [0 - 255].</param>
      <param name="Blue">Output parameter. Blue component value [0 - 255].</param>
      <example>
        <code description="Using ColorCMYtoRGB." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim Red As Integer
 Dim Green As Integer
 Dim Blue As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.ColorCMYtoRGB(255, 0, 128, Red, Green, Blue)
 oGdPictureImaging.ClearImage(ImageID, oGdPictureImaging.ARGB(255, Red, Green, Blue))
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ColorRGBtoHSL(System.Byte,System.Byte,System.Byte,System.Single@,System.Single@,System.Single@)">
      <summary>
 Converts RBG color from a set of red, green, and blue color components to HSL color: a set of
 hue, saturation and lightness components.
 </summary>
      <param name="Red">Input red component value [0 - 255].</param>
      <param name="Green">Input green component value [0 - 255].</param>
      <param name="Blue">Input blue component value [0 - 255].</param>
      <param name="Hue">Output parameter. Hue component value [-1 ; 5].</param>
      <param name="Saturation">Output parameter. Saturation component value [0 ; 1].</param>
      <param name="Lightness">Output parameter. Lightness component value [0 ; 1].</param>
      <example>
        <code description="Using ColorRGBtoHSL." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim Hue As Single
 Dim Saturation As Single
 Dim Lightness As Single
 oGdPictureImaging.ColorRGBtoHSL(255, 0, 128, Hue, Saturation, Lightness)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ColorHSLtoRGB(System.Single,System.Single,System.Single,System.Byte@,System.Byte@,System.Byte@)">
      <summary>
 Converts HSL color from a set of hue, saturation and lightness components to RGB color: a set of
 red, green, and blue color components.
 </summary>
      <param name="Hue">Input hue component value [-1 ; 5].</param>
      <param name="Saturation">Input saturation component value [0 ; 1].</param>
      <param name="Lightness">Input lightness component value [0 ; 1].</param>
      <param name="Red">Output parameter. Red component value [0 - 255].</param>
      <param name="Green">Output parameter. Green component value [0 - 255].</param>
      <param name="Blue">Output parameter. Blue component value [0 - 255].</param>
      <example>
        <code description="Using ColorHSLtoRGB." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim Red As Byte
 Dim Green As Byte
 Dim Blue As Byte
 oGdPictureImaging.ColorCMYtoRGB(2.5, 0.5, 0.5, Red, Green, Blue)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Creates a Color Object from a set of alpha, red, green, and blue color component values.
 </summary>
      <param name="Alpha">The alpha component (also called transparency). Valid values are 0 (full
 transparency) to 255 (full opacity).</param>
      <param name="Red">The red component. Valid values are 0 to 255.</param>
      <param name="Green">The green component. Valid values are 0 to 255.</param>
      <param name="Blue">The blue component. Valid values are 0 to 255.</param>
      <returns>
 A Color Object.
 </returns>
      <example>
        <code description="Swaping Red with Green using ARGB" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.SwapColor(ImageID, oGdPictureImaging.ARGB(255,255,0,0),oGdPictureImaging.ARGB(255,0,255,0))
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)">
      <summary>
 Creates a Color Object from a set of red, green, and blue color component values.
 </summary>
      <param name="Red">The red component. Valid values are 0 to 255.</param>
      <param name="Green">The green component. Valid values are 0 to 255.</param>
      <param name="Blue">The blue component. Valid values are 0 to 255.</param>
      <returns>
 A Color Object.
 </returns>
      <example>
        <code description="Swaping Red with Green using ARGB" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.SwapColor(ImageID, oGdPictureImaging.ARGB(255,0,0),oGdPictureImaging.ARGB(0,255,0))
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ARGB(System.Int32)">
      <summary>
 Creates a Color Object from a 32-bit ARGB value.
 </summary>
      <param name="iargb">A value specifying the 32-bit ARGB value.</param>
      <returns>
 A Color Object.
 </returns>
      <example>
        <code description="Swaping Red with Green using ARGB" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.SwapColor(ImageID, oGdPictureImaging.ARGB(16711680),oGdPictureImaging.ARGB(65280))
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Creates a 32-bit Color Integer-Value from a set of alpha, red, green, and blue color component values.
 </summary>
      <param name="Alpha">The alpha component (also called transparency). Valid values are 0 (full
 transparency) to 255 (full opacity).</param>
      <param name="Red">The red component. Valid values are 0 to 255.</param>
      <param name="Green">The green component. Valid values are 0 to 255.</param>
      <param name="Blue">The blue component. Valid values are 0 to 255.</param>
      <returns>
 A 32-bit Color value.
 </returns>
      <example>
        <code description="Getting ARGB Red color Using ARGBI." lang="VB.NET">
 Integer RedColor = object.ARGBI(255, 255, 0, 0) ' A = 255; R = 255:  G = 0: B = 0
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetLastPath">
      <summary>
 Returns the path of the latest loaded or saved file.
 </summary>
      <returns>
 The latest loaded or saved file path.
 </returns>
      <example>
        <code description="Prompt the user to select a bitmap to open and retrieve the path of the selected file." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID as Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Specifying empty string prompts the user to select a file
 If imageId &lt;&gt; 0 Then
    MessageBox.Show("File loaded: " + oGdPictureImaging.GetLastPath())
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.IsCMYKFile(System.String)">
      <summary>
 Checks if an image file is CMYK color space based.
 </summary>
      <param name="FilePath">The path of the file to open.</param>
      <returns>
 True if the specified image file is using CMYK color space, else False.
 </returns>
      <example>
        <code description="Knowing whether an image file uses CMYK color profile." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImgIsCMYK As Boolean
 ImgIsCMYK = oGdPictureImaging.IsCMYKFile("image.jpg")
 MessageBox.Show(ImgIsCMYK.ToString())
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetDocumentFormatFromFile(System.String)">
      <summary>
 Important: Here for backward compatibility. This method is obsolete, please use the GdPictureDocumentUtilities.GetDocumentFormatFromFile() method instead.
 Returns the format of a document from a file.
 </summary>
      <param name="FilePath">The file path.</param>
      <returns>
 A member of the DocumentFormat enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetDocumentFormatFromStream(System.IO.Stream)">
      <summary>
 Important: Here for backward compatibility. This method is obsolete, please use the GdPictureDocumentUtilities.GetDocumentFormatFromStream() method instead.
 Returns the format of a document from a stream.
 </summary>
      <param name="Stream">System.IO.Stream object storing the document.</param>
      <returns>
 A member of the DocumentFormat enumeration.
 </returns>
      <remarks>- The provided strem must support seeking, otherwise the returned value will be DocumentFormat.DocumentFormatUNKNOWN.
 <para></para>
 WMF, EMF and ICO files are not  yet supported by this method.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetDocumentFormatFromStream(System.IO.Stream,System.String)">
      <summary>
 Important: Here for backward compatibility. This method is obsolete, please use the GdPictureDocumentUtilities.GetDocumentFormatFromStream() method instead.
 Returns the format of a document from a stream.
 </summary>
      <param name="Stream">System.IO.Stream object storing the document.</param>
      <param name="FileName">The name of the original file. This parameter can help the format detection algorithm to distinguish format using the same signature pattern.</param>
      <returns>
 A member of the DocumentFormat enumeration.
 </returns>
      <remarks>- The provided strem must support seeking, otherwise the returned value will be DocumentFormat.DocumentFormatUNKNOWN.
 <para></para>
 WMF, EMF and ICO files are not  yet supported by this method.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ClearGdPicture">
      <summary>
 Forces GdPicture to release all Bitmap and all memory used by GdPicture.NET.
 </summary>
      <remarks>
 This method is not thread-safe and should be used only for debugging purpose in order to detect memory leak.
 </remarks>
      <example>
        <code description="Using ClearGdPicture()" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 'Processing and use of the oGdPictureImaging object is done here
 GdPictureImaging.ClearGdPicture()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SupportFunc(System.Int32,System.Int32,System.Double@,System.Double@,System.Double@,System.Int32@,System.Int32@,System.Int32@,System.String@,System.String@,System.String@)">
      <summary>
 Used for GdPicture technical support purpose.
 </summary>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ResetROI">
      <summary>
 Resets the region of interest.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Defines the current region of interest.
 </summary>
      <param name="Left">Left pixel position of the region of interest.</param>
      <param name="Top">Top pixel position of the region of interest.</param>
      <param name="Width">Width, in pixel, of the region of interest.</param>
      <param name="Height">Height, in pixel, pixel position of the region of interest.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.ResetROI" />
      <remarks>
 The upper-left corner of the image have (0, 0) coordinate.
 </remarks>
      <example>
        <code description="Setting ROI to specify area of image processing to add noise." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("input.jpg")
 If imageId &lt;&gt; 0 Then
    oGdPictureImaging.SetROI(0, 0, 200, 200)
    oGdPictureImaging.FxAddNoise(ImageID)
    oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetVersion">
      <summary>
 Returns the GdPicture source code version used in the following format M.mrr where 'M' describes the major version, 'm' the medium version and 'rr' the release number.
 </summary>
      <returns>
 Double.
 </returns>
      <example>
        <code description="Retrieving the version of the GdPicture source code used." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim Version As Double
 Version = oGdPictureImaging.GetVersion()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Encode64String(System.String)">
      <summary>
 Returns an encoded string using the base 64 encoding algorithm.
 </summary>
      <param name="StringToEncode">The string to encode.</param>
      <returns>
 The encoded string.
 </returns>
      <example>
        <code description="Loading an image, saving it as base64 encoded string and reloading it." lang="VB.NET">
 Using oGdPictureImaging As New GdPictureImaging
    Dim imageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select a file
    If oGdPictureImaging.GetStat = GdPictureStatus.OK Then
       Dim fileString As String = oGdPictureImaging.Encode64String(oGdPictureImaging.SaveAsString(imageID, DocumentFormat.DocumentFormatTIFF, 65536))
       oGdPictureImaging.ReleaseGdPictureImage(imageID)
       'Now reload the saved file from fileString
       imageID = oGdPictureImaging.CreateGdPictureImageFromString(oGdPictureImaging.Decode64String(fileString))
       If oGdPictureImaging.GetStat = GdPictureStatus.OK Then
          oGdPictureImaging.SaveAsPNG(imageID, "myimage.png")
          oGdPictureImaging.ReleaseGdPictureImage(imageID)
       End If
    End If
 End Using
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.Decode64String(System.String)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Decode64String(System.String)">
      <summary>
 Returns a decoded string using the base 64 encoding algorithm.
 </summary>
      <param name="StringToDecode">The string to decode.</param>
      <returns>
 The decoded string.
 </returns>
      <example>
        <code description="Loading an image, saving it as base64 encoded string and reloading it." lang="VB.NET">
 Using oGdPictureImaging As New GdPictureImaging
    Dim imageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select a file
    If oGdPictureImaging.GetStat = GdPictureStatus.OK Then
       Dim fileString As String = oGdPictureImaging.Encode64String(oGdPictureImaging.SaveAsString(imageID, DocumentFormat.DocumentFormatTIFF, 65536))
       oGdPictureImaging.ReleaseGdPictureImage(imageID)
       'Now reload the saved file from fileString
       imageID = oGdPictureImaging.CreateGdPictureImageFromString(oGdPictureImaging.Decode64String(fileString))
       If oGdPictureImaging.GetStat = GdPictureStatus.OK Then
          oGdPictureImaging.SaveAsPNG(imageID, "myimage.png")
          oGdPictureImaging.ReleaseGdPictureImage(imageID)
       End If
    End If
 End Using
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.Encode64String(System.String)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetDistance(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Returns the distance in inches between 2 points of a GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Left1">Specifies the x-coordinate of the first point in pixel.</param>
      <param name="Top1">Specifies the y-coordinate of the first point in pixel.</param>
      <param name="Left2">Specifies the x-coordinate of the second point in pixel.</param>
      <param name="Top2">Specifies the y-coordinate of the second point in pixel.</param>
      <returns>
 Double.
 </returns>
      <example>
        <code description="Calculating the distance between two points in an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim Distance As Double
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 Distance = oGdPictureImaging.GetDistance(ImageID, 50, 100, 64, 215)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.UploadFileToFTP(System.String,System.String,System.String,System.String,System.String,System.Int32)">
      <summary>
 Uploads a file to a distant FTP server.
 </summary>
      <param name="FilePath">The path of the file to upload into the distant ftp server.</param>
      <param name="Host">The host server ie: ftp.com.</param>
      <param name="Path">The image file path to create into the distant server ie:
 /demo/image.jpg.</param>
      <param name="Login">User Login.</param>
      <param name="Password">User Password.</param>
      <param name="FTPPort">The FTP port number used. Usually 21.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Uploading Image to a distant FTP Server" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPictureImaging.UploadFileToFTP("/images", "ftp.com", "d:/images/img.jpg", "GdPictureUser", "Password123", 21 )
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetHttpTransfertBufferSize(System.Int32)">
      <summary>
 Changes the default buffer size used by the CreateGdPictureImageFromHTTP() method. Default used is  4096.
 </summary>
      <param name="Buffersize">New buffer size. ex 1024, 2048, 4096, 8192 etc.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromHTTP(System.String,System.String,System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ClearImage(System.Int32,System.Int32)">
      <summary>
 Clears a GdPicture image with a custom color.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Color">Color to set as background. A suitable color value can be obtained by using the ARGBI() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Using ClearImage with Color Green." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.ClearImage(ImageID, oGdPictureImaging.ARGBI(255, 0, 255, 0))
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.ClearImage(System.Int32,System.Drawing.Color)">
      <summary>
 Clears a GdPicture image with a custom color.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Color">Color to set as background. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Using ClearImage with Green color." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 oGdPictureImaging.ClearImage(ImageID, oGdPictureImaging.ARGB(255, 0, 255, 0))
 oGdPictureImaging.SaveAsPNG(ImageID, "output.png")
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.SetFtpPassiveMode(System.Boolean)">
      <summary>
 Specifies if the FTP transfer mode is Passive or not.
 </summary>
      <param name="PassiveMode">True for passive FTP transfer mode, else False.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.CreateGdPictureImageFromFTP(System.String,System.String,System.String,System.String,System.Int32)" />
      <example>
        <code description="Defining FTP transfer mode as Passive" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 oGdPictureImaging.SetFtpPassiveMode(True)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetStat">
      <summary>
 Returns the last GdPicture Status.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Using GetStat to validate image creation" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 ImageID = oGdPictureImaging.CreateGdPictureImageFromClipboard()
 If Imaging1.GetStat() &gt; GdPictureStatus.OK Then
    MessageBox.Show("There is no bitmap in the clipboard")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.HasGrayPalette256(System.Int32)">
      <summary>
 Determines whether a GdPicture image has a standard 8-bit gray palette.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 True if the image has a standard 8-bit gray palette, else False.
 </returns>
      <remarks>
 Use the GetStat() method to check if this method has completed successfully.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetDesktopHwnd">
      <summary>
 Returns the handle of the Windows desktop window. The desktop window is the one which covers the
 entire screen. The desktop window is the area on top of which all icons and other windows are
 painted.
 </summary>
      <returns>
 The desktop Windows handle, as IntPtr value.
 </returns>
      <example>
        <code description="Creating a GdPicture Image of the Desktop." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim Desktop As IntPtr
 Desktop = oGdPictureImaging.GetDesktopHwnd()
 ImageID = oGdPictureImaging.CreateGdPictureImageFromHwnd(Desktop)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetDesktopHwndI">
      <summary>
 Returns the handle of the Windows desktop window. The desktop window is the one which covers the
 entire screen. The desktop window is the area on top of which all icons and other windows are
 painted.
 </summary>
      <returns>
 The desktop Windows handle, as Integer value.
 </returns>
      <example>
        <code description="Creating a GdPicture Image of the Desktop." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim Desktop As Integer = oGdPictureImaging.GetDesktopHwnd()
 ImageID = oGdPictureImaging.CreateGdPictureImageFromHwnd(Desktop)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateThumbnail(System.Int32,System.Int32,System.Int32)">
      <summary>
 Creates thumbnail of custom size from a GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image from which the thumbnail must be
 done.</param>
      <param name="Width">The width of the thumbnail to create.</param>
      <param name="Height">The height of the thumbnail to create.</param>
      <remarks>
 If both of Width and Height parameters are 0, a system-defined size is used.
 </remarks>
      <returns>
 GdPicture Image Identifier. The thumbnail Image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <example>
        <code description="Creating a thumbnail from an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("")
 If imageId &lt;&gt; 0 Then
    Dim ThumbnailImg As Integer = oGdPictureImaging.CreateThumbnail(ImageID, 20, 20)
    If ThumbnailImg &lt;&gt; 0 Then
       oGdPictureImaging.SaveAsPNG(ThumbnailImg, "thumbnail.png")
       oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImg)
    Else
       MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateThumbnailHQ(System.Int32,System.Int32,System.Int32)">
      <summary>
 Creates a High Quality thumbnail of custom size from a GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image from which the HQ thumbnail must be created.</param>
      <param name="Width">The width of the thumbnail to create.</param>
      <param name="Height">The height of the thumbnail to create.</param>
      <returns>
 GdPicture Image Identifier. The thumbnail Image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <example>
        <code description="Creating a high quality thumbnail from an image." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("")
 If imageId &lt;&gt; 0 Then
    Dim ThumbnailImg As Integer = oGdPictureImaging.CreateThumbnailHQ(ImageID, 20, 20)
    If ThumbnailImg &lt;&gt; 0 Then
       oGdPictureImaging.SaveAsPNG(ThumbnailImg, "thumbnail.png")
       oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImg)
    Else
       MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateThumbnailHQ(System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
 Creates a High Quality thumbnail of custom size from a GdPicture Image.
 This method fits the image thumbnail within a rectangle of specified dimensions having a specified
 background color.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image from which the HQ thumbnail must be created.</param>
      <param name="Width">The width of the thumbnail to create.</param>
      <param name="Height">The height of the thumbnail to create.</param>
      <param name="BackColor">Background color of the thumbnail. A suitable color value can be obtained by using the ARGB() method.</param>
      <returns>
 GdPicture Image Identifier. The thumbnail Image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <example>
        <code description="Creating a high quality thumbnail from an image with specifying back color as red." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("")
 If imageId &lt;&gt; 0 Then
    Dim ThumbnailImg As Integer = oGdPictureImaging.CreateThumbnailHQ(ImageID, 20, 20, oGdPictureImaging.ARG(255, 0, 0))
    If ThumbnailImg &lt;&gt; 0 Then
       oGdPictureImaging.SaveAsPNG(ThumbnailImg, "thumbnail.png")
       oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImg)
    Else
       MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateThumbnailHQ(System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean)">
      <summary>
 Creates a High Quality thumbnail of custom size from a GdPicture Image.
 This method fits the image thumbnail within a rectangle of specified dimensions having a specified
 background color.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image from which the HQ thumbnail must be created.</param>
      <param name="Width">The width of the thumbnail to create.</param>
      <param name="Height">The height of the thumbnail to create.</param>
      <param name="BackColor">Background color of the thumbnail. A suitable color value can be obtained by using the ARGB() method.</param>
      <param name="PageNo">The page number to render, in the range [1 - PageCount]. Use 0 to render the currently selected page.</param>
      <param name="BurnXMPAnnotations">Specifies if GdPicture/XMP annotations must be rendered on the thumbnail.</param>
      <param name="RotateExif">Specifies if the generated thumbnail must be rotated according the internal ExifRotate tag.</param>
      <returns>
 GdPicture Image Identifier. The thumbnail Image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <example>
        <code description="Creating a high quality thumbnail from an image with specifying back color as red." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("")
 If imageId &lt;&gt; 0 Then
    Dim ThumbnailImg As Integer = oGdPictureImaging.CreateThumbnailHQ(ImageID, 20, 20, oGdPictureImaging.ARG(255, 0, 0))
    If ThumbnailImg &lt;&gt; 0 Then
       oGdPictureImaging.SaveAsPNG(ThumbnailImg, "thumbnail.png")
       oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImg)
    Else
       MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateThumbnailHQ(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Creates a High Quality thumbnail of custom size from a GdPicture Image.
 This method fits the image thumbnail within a rectangle of specified dimensions having a specified
 background color.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The image from which the HQ thumbnail must be created.</param>
      <param name="Width">The width of the thumbnail to create.</param>
      <param name="Height">The height of the thumbnail to create.</param>
      <param name="BackColor">A suitable color value can be obtained by using the ARGBI() method.
 Background color of the thumbnail.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <returns>
 GdPicture Image Identifier. The thumbnail Image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <example>
        <code description="Creating a high quality thumbnail from an image with specifying back color as red." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("")
 If imageId &lt;&gt; 0 Then
    Dim ThumbnailImg As Integer = oGdPictureImaging.CreateThumbnailHQ(ImageID, 20, 20, oGdPictureImaging.ARGBI(255, 255, 0, 0))
    If ThumbnailImg &lt;&gt; 0 Then
       oGdPictureImaging.SaveAsPNG(ThumbnailImg, "thumbnail.png")
       oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImg)
    Else
       MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
    End If
    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateThumbnailHQ(System.String,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
 Creates a High Quality thumbnail of custom size from a file. This method tries to extract the embedded thumbnail from file metadata, if it is available.
 It is particularly recommended to use this method to generate thumbnail from RAW image file.
 The thumbnail can be fitted within a rectangle of specific dimensions having a specific background color.
 </summary>
      <param name="FilePath">The path of the file to open.Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Width">The width of the thumbnail to create. Use 0 to keep the embedded thumbnail width, if available, otherwise uses the initial bitmap width.</param>
      <param name="Height">The height of the thumbnail to create. Use 0 to keep the embedded thumbnail height, if available, otherwise uses the initial bitmap height.</param>
      <param name="BackColor">A suitable color value can be obtained by using the ARGB() method. The background color of the thumbnail if width and height parameters are provided.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <returns>
 GdPicture Image Identifier. The thumbnail Image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <example>
        <code description="Creating a high quality thumbnail from an image with specifying back color as red." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ThumbnailImg As Integer = oGdPictureImaging.CreateThumbnailHQ("image.png", 20, 20, oGdPictureImaging.ARGB(255, 255, 0, 0))
 If ThumbnailImg &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsPNG(ThumbnailImg, "thumbnail.png")
    oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImg)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateThumbnailHQ(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
 Creates a High Quality thumbnail of custom size from a file. This method tries to extract the embedded thumbnail from file metadata, if it is available.
 It is particularly recommended to use this method to generate thumbnail from RAW image file.
 The thumbnail can be fitted within a rectangle of specific dimensions having a specific background color.
 </summary>
      <param name="FilePath">The path of the file to open.Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Width">The width of the thumbnail to create. Use 0 to keep the embedded thumbnail width, if available, otherwise uses the initial bitmap width.</param>
      <param name="Height">The height of the thumbnail to create. Use 0 to keep the embedded thumbnail height, if available, otherwise uses the initial bitmap height.</param>
      <param name="BackColor">A suitable color value can be obtained by using the ARGBI() method. The background color of the thumbnail if width and height parameters are provided.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <returns>
 GdPicture Image Identifier. The thumbnail Image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <example>
        <code description="Creating a high quality thumbnail from an image with specifying back color as red." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ThumbnailImg As Integer = oGdPictureImaging.CreateThumbnailHQ("image.png", 20, 20, oGdPictureImaging.ARGBI(255, 255, 0, 0))
 If ThumbnailImg &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsPNG(ThumbnailImg, "thumbnail.png")
    oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImg)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateThumbnailHQ(System.IO.Stream,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
 Creates a High Quality thumbnail of custom size from a stream. This method tries to extract the embedded thumbnail from file metadata, if it is available.
 It is particularly recommended to use this method to generate thumbnail from RAW image file.
 The thumbnail can be fitted within a rectangle of specific dimensions having a specific background color.
 </summary>
      <param name="Stream">System.IO.Stream object storing the image data.</param>
      <param name="Width">The width of the thumbnail to create. Use 0 to keep the embedded thumbnail width, if available, otherwise uses the initial bitmap width.</param>
      <param name="Height">The height of the thumbnail to create. Use 0 to keep the embedded thumbnail height, if available, otherwise uses the initial bitmap height.</param>
      <param name="BackColor">A suitable color value can be obtained by using the ARGB() method. The background color of the thumbnail if width and height parameters are provided.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)" />
      <returns>
 GdPicture Image Identifier. The thumbnail Image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <example>
        <code description="Creating a high quality thumbnail from an image with specifying back color as red." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim fs As New FileStream("image.png", FileMode.Open)
 Dim ThumbnailImg As Integer = oGdPictureImaging.CreateThumbnailHQ(fs, 20, 20, oGdPictureImaging.ARGB(255, 255, 0, 0))
 If ThumbnailImg &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsPNG(ThumbnailImg, "thumbnail.png")
    oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImg)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 fs.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.CreateThumbnailHQ(System.IO.Stream,System.Int32,System.Int32,System.Int32)">
      <summary>
 Creates a High Quality thumbnail of custom size from a stream. This method tries to extract the embedded thumbnail from file metadata, if it is available.
 It is particularly recommended to use this method to generate thumbnail from RAW image file.
 The thumbnail can be fitted within a rectangle of specific dimensions having a specific background color.
 </summary>
      <param name="Stream">System.IO.Stream object storing the image data.</param>
      <param name="Width">The width of the thumbnail to create. Use 0 to keep the embedded thumbnail width, if available, otherwise uses the initial bitmap width.</param>
      <param name="Height">The height of the thumbnail to create. Use 0 to keep the embedded thumbnail height, if available, otherwise uses the initial bitmap height.</param>
      <param name="BackColor">A suitable color value can be obtained by using the ARGBI() method. The background color of the thumbnail if width and height parameters are provided.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
      <returns>
 GdPicture Image Identifier. The thumbnail Image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <example>
        <code description="Creating a high quality thumbnail from an image with specifying back color as red." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim fs As New FileStream("image.png", FileMode.Open)
 Dim ThumbnailImg As Integer = oGdPictureImaging.CreateThumbnailHQ(fs, 20, 20, oGdPictureImaging.ARGBI(255, 255, 0, 0))
 If ThumbnailImg &lt;&gt; 0 Then
    oGdPictureImaging.SaveAsPNG(ThumbnailImg, "thumbnail.png")
    oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImg)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 fs.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.HasAttachedThumbnail(System.Int32)">
      <summary>
 Some images embed a thumbnail bitmap for previewing purpose. This method helps to determine if a specific GdPicture image has one.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>True if a thumbnail bitmap is attached to the image, False otherwise.</returns>
      <remarks>Use the GetStat() method to check if this method has completed successfully.</remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetAttachedThumbnail(System.Int32)" />
      <example>
        <code description="Dealing with attached thumbnails." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("myphoto.jpg")
 'Detach existing thumbnail, if any.
 oGdPictureImaging.DetachThumbnail(ImageID)
 'Generates a HQ thumbnail.
 Dim ThumbnailImageID As Integer = oGdPictureImaging.CreateThumbnailHQ(ImageID, CInt(oGdPictureImaging.GetWidth(ImageID) / 10), CInt(oGdPictureImaging.GetHeight(ImageID) / 10))
 'Attach the generated thumbnail to the bitmap.
 oGdPictureImaging.AttachThumbnail(ImageID, ThumbnailImageID)
 'Releasing GdPicture thumbnail bitmap.
 oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImageID)
 'Saving image to jpeg format.
 oGdPictureImaging.SaveAsJPEG(ImageID, "imagewiththumbnail.jpg")
 'Releasing input image.
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 'Now extracting the thumbnail from the created bitmap.
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("imagewiththumbnail.jpg")
 ThumbnailImageID = oGdPictureImaging.GetAttachedThumbnail(ImageID)
 'Saving thumbnail as PNG
 oGdPictureImaging.SaveAsPNG(ThumbnailImageID, "thumbnail.png")
 'Releasing images from the memory
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImageID)
 'We're done with the oGdPictureImaging object.
 oGdPictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.GetAttachedThumbnail(System.Int32)">
      <summary>
 Returns, if available, the tumbnail attached to a specific GdPicture image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 0: The image could not be created. Use the GetStat() method to determine the reason this method
 failed.
 Non-zero: GdPicture Image Identifier. The thumbnail Image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <remarks>The HasAttachedThumbnail() should be used prior in order to check that the image has a thumbnail attachment.</remarks>
      <seealso cref="M:GdPicture12.GdPictureImaging.HasAttachedThumbnail(System.Int32)" />
      <example>
        <code description="Dealing with attached thumbnails." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("myphoto.jpg")
 'Detach existing thumbnail, if any.
 oGdPictureImaging.DetachThumbnail(ImageID)
 'Generates a HQ thumbnail.
 Dim ThumbnailImageID As Integer = oGdPictureImaging.CreateThumbnailHQ(ImageID, CInt(oGdPictureImaging.GetWidth(ImageID) / 10), CInt(oGdPictureImaging.GetHeight(ImageID) / 10))
 'Attach the generated thumbnail to the bitmap.
 oGdPictureImaging.AttachThumbnail(ImageID, ThumbnailImageID)
 'Releasing GdPicture thumbnail bitmap.
 oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImageID)
 'Saving image to jpeg format.
 oGdPictureImaging.SaveAsJPEG(ImageID, "imagewiththumbnail.jpg")
 'Releasing input image.
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 'Now extracting the thumbnail from the created bitmap.
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("imagewiththumbnail.jpg")
 ThumbnailImageID = oGdPictureImaging.GetAttachedThumbnail(ImageID)
 'Saving thumbnail as PNG
 oGdPictureImaging.SaveAsPNG(ThumbnailImageID, "thumbnail.png")
 'Releasing images from the memory
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImageID)
 'We're done with the oGdPictureImaging object.
 oGdPictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.AttachThumbnail(System.Int32,System.Int32)">
      <summary>
 Attaches a thumbnail bitmap to a GdPicture Image. If the GdPicture image already embeds a thumbnail it will be replaced.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="ThumbnailImageID">GdPicture Image Identifier. The thumbnail bitmap.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.HasAttachedThumbnail(System.Int32)" />
      <example>
        <code description="Dealing with attached thumbnails." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("myphoto.jpg")
 'Detach existing thumbnail, if any.
 oGdPictureImaging.DetachThumbnail(ImageID)
 'Generates a HQ thumbnail.
 Dim ThumbnailImageID As Integer = oGdPictureImaging.CreateThumbnailHQ(ImageID, CInt(oGdPictureImaging.GetWidth(ImageID) / 10), CInt(oGdPictureImaging.GetHeight(ImageID) / 10))
 'Attach the generated thumbnail to the bitmap.
 oGdPictureImaging.AttachThumbnail(ImageID, ThumbnailImageID)
 'Releasing GdPicture thumbnail bitmap.
 oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImageID)
 'Saving image to jpeg format.
 oGdPictureImaging.SaveAsJPEG(ImageID, "imagewiththumbnail.jpg")
 'Releasing input image.
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 'Now extracting the thumbnail from the created bitmap.
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("imagewiththumbnail.jpg")
 ThumbnailImageID = oGdPictureImaging.GetAttachedThumbnail(ImageID)
 'Saving thumbnail as PNG
 oGdPictureImaging.SaveAsPNG(ThumbnailImageID, "thumbnail.png")
 'Releasing images from the memory
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImageID)
 'We're done with the oGdPictureImaging object.
 oGdPictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.DetachThumbnail(System.Int32)">
      <summary>
 Detaches a thumbnail bitmap to a GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.HasAttachedThumbnail(System.Int32)" />
      <example>
        <code description="Dealing with attached thumbnails." lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("myphoto.jpg")
 'Detach existing thumbnail, if any.
 oGdPictureImaging.DetachThumbnail(ImageID)
 'Generates a HQ thumbnail.
 Dim ThumbnailImageID As Integer = oGdPictureImaging.CreateThumbnailHQ(ImageID, CInt(oGdPictureImaging.GetWidth(ImageID) / 10), CInt(oGdPictureImaging.GetHeight(ImageID) / 10))
 'Attach the generated thumbnail to the bitmap.
 oGdPictureImaging.AttachThumbnail(ImageID, ThumbnailImageID)
 'Releasing GdPicture thumbnail bitmap.
 oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImageID)
 'Saving image to jpeg format.
 oGdPictureImaging.SaveAsJPEG(ImageID, "imagewiththumbnail.jpg")
 'Releasing input image.
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 'Now extracting the thumbnail from the created bitmap.
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("imagewiththumbnail.jpg")
 ThumbnailImageID = oGdPictureImaging.GetAttachedThumbnail(ImageID)
 'Saving thumbnail as PNG
 oGdPictureImaging.SaveAsPNG(ThumbnailImageID, "thumbnail.png")
 'Releasing images from the memory
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImageID)
 'We're done with the oGdPictureImaging object.
 oGdPictureImaging.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableBarCodeTypeCount">
      <summary>
 If barcode detection is available, returns the number of bar code types that can be detected.
 </summary>
      <returns>
 If Success, non zero: the number of bar code types that can be detected. Else 0 if fail. Use
 TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableBarCodeTypeNo(System.Int32)" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableBarCodeTypeNo(System.Int32)">
      <summary>
 Returns a supported bar code type which can be detected by the opened source.
 </summary>
      <param name="Number">Index of the available bar code type. Must be a value between 1 and
 TwainGetAvailableBarCodeTypeCount() returned value.</param>
      <returns>
 A member of the TwainBarCodeType enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableBarCodeTypeCount" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainBarCodeGetCount">
      <summary>
 If barcode detection is enabled, returns the number of bar codes found on the last acquired image.
 </summary>
      <returns>
 The number of bar codes found on the document image.
 A value of 0 means the bar code engine was enabled but that no bar codes were found.
 A value of -1 means the bar code engine was not enabled.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)" />
      <remarks>
 Before using this method make sure that the barcode detection was enabled by the
 TwainSetBarcodeDetection() method.
 Use the TwainBarCodeGetCount() method to determine how many barcodes have been detected on the last
 acquired image.
 </remarks>
      <example>
        <code description="Acquire single image and detect its barcodes" lang="VB.NET">
 Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
 Dim ImageID As Integer
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
    If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
       oGdPictureImaging.TwainSetBarcodeDetection(True)
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       If imageId &lt;&gt; 0 Then
          Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
          MessageBox.show(Str(BarCodeCount) + " barcode has been found in the scanned image")
          For i As Integer = 1 To BarCodeCount
             MessageBox.show("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
             MessageBox.show("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
          Next
          oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       End If
    Else
       MessageBox.show("Error: Barcode detection is not available on this scanner")
    End If
    oGdPictureImaging.TwainCloseSource()
    MessageBox.show("Done !")
 Else
    MessageBox.show("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
 End If
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainBarCodeGetValue(System.Int32)">
      <summary>
 Returns the text of a bar code found on the last acquired image.
 </summary>
      <param name="BarCodeNo">The barcode number. Must be value between 1 and the number of detected
 barcodes.</param>
      <returns>
 The barcode text.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainBarCodeGetCount" />
      <remarks>
 Before using this method make sure that the barcode detection was enabled by the
 TwainSetBarcodeDetection() method.
 Use the TwainBarCodeGetCount() method to determine how many barcodes have been detected on the last
 acquired image.
 </remarks>
      <example>
        <code description="Acquire single image and detect its barcodes" lang="VB.NET">
 Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
 Dim ImageID As Integer
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
    If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
       oGdPictureImaging.TwainSetBarcodeDetection(True)
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       If imageId &lt;&gt; 0 Then
          Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
          MessageBox.show(Str(BarCodeCount) + " barcode has been found in the scanned image")
          For i As Integer = 1 To BarCodeCount
             MessageBox.show("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
             MessageBox.show("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
          Next
          oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       End If
    Else
       MessageBox.show("Error: Barcode detection is not available on this scanner")
    End If
    oGdPictureImaging.TwainCloseSource()
    MessageBox.show("Done !")
 Else
    MessageBox.show("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
 End If
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainBarCodeGetType(System.Int32)">
      <summary>
 Returns the type of a bar code found on the last acquired image.
 </summary>
      <param name="BarCodeNo">The barcode number. Must be value between 1 and the number of detected
 barcodes.</param>
      <returns>
 A member of the TwainBarCodeType enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainBarCodeGetCount" />
      <remarks>
 Before using this method make sure that the barcode detection was enabled by the
 TwainSetBarcodeDetection() method.
 Use the TwainBarCodeGetCount() method to determine how many barcodes have been detected on the last
 acquired image.
 </remarks>
      <example>
        <code description="Acquire single image and detect its barcodes" lang="VB.NET">
 Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
 Dim ImageID As Integer
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
    If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
       oGdPictureImaging.TwainSetBarcodeDetection(True)
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       If imageId &lt;&gt; 0 Then
          Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
          MessageBox.show(Str(BarCodeCount) + " barcode has been found in the scanned image")
          For i As Integer = 1 To BarCodeCount
             MessageBox.show("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
             MessageBox.show("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
          Next
          oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       End If
    Else
       MessageBox.show("Error: Barcode detection is not available on this scanner")
    End If
    oGdPictureImaging.TwainCloseSource()
    MessageBox.show("Done !")
 Else
    MessageBox.show("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
 End If
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainBarCodeGetXPos(System.Int32)">
      <summary>
 Returns the X coordinate of a bar code found on the last acquired image.
 </summary>
      <param name="BarCodeNo">The barcode number. Must be value between 1 and the number of detected
 barcodes.</param>
      <returns>
 The barcode X coordinate. Return -1 if current source does not support X coordinate reporting.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainBarCodeGetCount" />
      <remarks>
 Before using this method make sure that the barcode detection was enabled by the
 TwainSetBarcodeDetection() method.
 Use the TwainBarCodeGetCount() method to determine how many barcodes have been detected on the last
 acquired image.
 </remarks>
      <example>
        <code description="Acquire single image and detect its barcodes" lang="VB.NET">
 Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
 Dim ImageID As Integer
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
    If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
       oGdPictureImaging.TwainSetBarcodeDetection(True)
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       If imageId &lt;&gt; 0 Then
          Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
          MessageBox.show(Str(BarCodeCount) + " barcode has been found in the scanned image")
          For i As Integer = 1 To BarCodeCount
             MessageBox.show("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
             MessageBox.show("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
          Next
          oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       End If
    Else
       MessageBox.show("Error: Barcode detection is not available on this scanner")
    End If
    oGdPictureImaging.TwainCloseSource()
    MessageBox.show("Done !")
 Else
    MessageBox.show("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
 End If
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainBarCodeGetYPos(System.Int32)">
      <summary>
 Returns the Y coordinate of a bar code found on the last acquired image.
 </summary>
      <param name="BarCodeNo">The barcode number. Must be value between 1 and the number of detected
 barcodes.</param>
      <returns>
 The barcode Y coordinate. Return -1 if current source does not support Y coordinate reporting.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainBarCodeGetCount" />
      <remarks>
 Before using this method make sure that the barcode detection was enabled by the
 TwainSetBarcodeDetection() method.
 Use the TwainBarCodeGetCount() method to determine how many barcodes have been detected on the last
 acquired image.
 </remarks>
      <example>
        <code description="Acquire single image and detect its barcodes" lang="VB.NET">
 Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
 Dim ImageID As Integer
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
    If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
       oGdPictureImaging.TwainSetBarcodeDetection(True)
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       If imageId &lt;&gt; 0 Then
          Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
          MessageBox.show(Str(BarCodeCount) + " barcode has been found in the scanned image")
          For i As Integer = 1 To BarCodeCount
             MessageBox.show("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
             MessageBox.show("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
          Next
          oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       End If
    Else
       MessageBox.show("Error: Barcode detection is not available on this scanner")
    End If
    oGdPictureImaging.TwainCloseSource()
    MessageBox.show("Done !")
 Else
    MessageBox.show("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
 End If
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainBarCodeGetConfidence(System.Int32)">
      <summary>
 Returns the degree of certainty of a bar code the engine has in the accuracy of the information
 obtained on the last acquired image.
 </summary>
      <param name="BarCodeNo">The barcode number. Must be value between 1 and the number of detected
 barcodes.</param>
      <returns>
 The barcode confidence. From 0 (no confidence) to 100 (supreme confidence). Return -1 if current
 source does not support confidence reporting.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainBarCodeGetCount" />
      <remarks>
 Before using this method make sure that the barcode detection was enabled by the
 TwainSetBarcodeDetection() method.
 Use the TwainBarCodeGetCount() method to determine how many barcodes have been detected on the last
 acquired image.
 </remarks>
      <example>
        <code description="Acquire single image and detect its barcodes" lang="VB.NET">
 Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
 Dim ImageID As Integer
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
    If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
       oGdPictureImaging.TwainSetBarcodeDetection(True)
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       If imageId &lt;&gt; 0 Then
          Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
          MessageBox.show(Str(BarCodeCount) + " barcode has been found in the scanned image")
          For i As Integer = 1 To BarCodeCount
             MessageBox.show("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
             MessageBox.show("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
          Next
          oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       End If
    Else
       MessageBox.show("Error: Barcode detection is not available on this scanner")
    End If
    oGdPictureImaging.TwainCloseSource()
    MessageBox.show("Done !")
 Else
    MessageBox.show("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
 End If
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainBarCodeGetRotation(System.Int32)">
      <summary>
 Returns the orientation of a bar code found on the last acquired image.
 </summary>
      <param name="BarCodeNo">The barcode number. Must be value between 1 and the number of detected
 barcodes.</param>
      <returns>
 A member of the TwainBarCodeRotation enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainBarCodeGetCount" />
      <remarks>
 Before using this method make sure that the barcode detection was enabled by the
 TwainSetBarcodeDetection() method.
 Use the TwainBarCodeGetCount() method to determine how many barcodes have been detected on the last
 acquired image.
 </remarks>
      <example>
        <code description="Acquire single image and detect its barcodes" lang="VB.NET">
 Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
 Dim ImageID As Integer
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
    If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
       oGdPictureImaging.TwainSetBarcodeDetection(True)
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       If imageId &lt;&gt; 0 Then
          Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
          MessageBox.show(Str(BarCodeCount) + " barcode has been found in the scanned image")
          For i As Integer = 1 To BarCodeCount
             MessageBox.show("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
             MessageBox.show("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
          Next
          oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       End If
    Else
       MessageBox.show("Error: Barcode detection is not available on this scanner")
    End If
    oGdPictureImaging.TwainCloseSource()
    MessageBox.show("Done !")
 Else
    MessageBox.show("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
 End If
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainEnableMemoryTransferMode(System.Boolean)">
      <summary>
 Specifies if the memory transfer mode shoud be used during acquisition processes.
 </summary>
      <param name="Enabled">True to enable memory transfer mode, False otherwise. Default value is False.</param>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainAcquireToGdPictureImage(System.IntPtr)">
      <summary>
 Acquires a single image, from the currently selected Data Source.
 </summary>
      <remarks>
 If success, set the created GdPicture Image as a GdPicture image.
 By default, the default data source (DS) is opened, displays its dialog, and determines all the
 parameters of the acquisition and transfer.
 If you want to (try to) hide the DS dialog, see TwainSetHideUI.
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 To set the TWAIN state to 4, use the TwainOpenDefaultSource() or TwainOpenSource() method.
 </remarks>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 0: The image could not created. Use the GetStat(), TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainLastXferFail" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainUserClosedSource" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetHideUI(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainOpenDefaultSource(System.Int32)" />
      <example>
        <code description="Acquire multiple image from the document feeder to a multipage tiff image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim bContinue As Boolean = True
 Dim MultipageHandle As Integer
 Dim ImageCount As Integer
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainSetAutoFeed(True) 'Enable AutoFeed
 oGdPictureImaging.TwainSetAutoScan(True) 'To  achieve the maximum scanning rate
 oGdPictureImaging.TwainSetPixelType(TwainPixelType.TWPT_BW) '1 bit bw image
 oGdPictureImaging.TwainEnableDuplex(True) 'Duplex acquisition if supported
 oGdPictureImaging.TwainSetHideUI(True) 'Asks to the device to hide his GUI
 ImageCount = 0
 Do
    ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
    If imageId &lt;&gt; 0 Then
       ImageCount = ImageCount + 1
       If ImageCount = 1 Then
          MultipageHandle = ImageID
          oGdPictureImaging.TiffSaveAsMultiPageFile(MultipageHandle, "multipage.tif", TiffCompression.TiffCompressionAUTO)
       Else
          oGdPictureImaging.TiffAddToMultiPageFile(MultipageHandle, ImageID)
          oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       End If
    End If
 Loop While oGdPictureImaging.TwainGetState() &gt; TwainStatus.TWAIN_SOURCE_ENABLED
 oGdPictureImaging.TiffCloseMultiPageFile(MultipageHandle)
 oGdPictureImaging.ReleaseGdPictureImage(MultipageHandle)
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainAcquireToGdPictureImage(System.Int32)">
      <summary>
 Acquires a single image, from the currently selected Data Source.
 </summary>
      <remarks>
 If success, set the created GdPicture Image as a GdPicture image.
 By default, the default data source (DS) is opened, displays its dialog, and determines all the
 parameters of the acquisition and transfer.
 If you want to (try to) hide the DS dialog, see TwainSetHideUI.
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 To set the TWAIN state to 4, use the TwainOpenDefaultSource() or TwainOpenSource() method.
 </remarks>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 0: The image could not created. Use the GetStat(), TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainLastXferFail" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainUserClosedSource" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetHideUI(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainOpenDefaultSource(System.Int32)" />
      <example>
        <code description="Acquire multiple image from the document feeder to a multipage tiff image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim bContinue As Boolean = True
 Dim MultipageHandle As Integer
 Dim ImageCount As Integer
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainSetAutoFeed(True) 'Enable AutoFeed
 oGdPictureImaging.TwainSetAutoScan(True) 'To  achieve the maximum scanning rate
 oGdPictureImaging.TwainSetPixelType(TwainPixelType.TWPT_BW) '1 bit bw image
 oGdPictureImaging.TwainEnableDuplex(True) 'Duplex acquisition if supported
 oGdPictureImaging.TwainSetHideUI(True) 'Asks to the device to hide his GUI
 ImageCount = 0
 Do
    ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
    If imageId &lt;&gt; 0 Then
       ImageCount = ImageCount + 1
       If ImageCount = 1 Then
          MultipageHandle = ImageID
          oGdPictureImaging.TiffSaveAsMultiPageFile(MultipageHandle, "multipage.tif", TiffCompression.TiffCompressionAUTO)
       Else
          oGdPictureImaging.TiffAddToMultiPageFile(MultipageHandle, ImageID)
          oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       End If
    End If
 Loop While oGdPictureImaging.TwainGetState() &gt; TwainStatus.TWAIN_SOURCE_ENABLED
 oGdPictureImaging.TiffCloseMultiPageFile(MultipageHandle)
 oGdPictureImaging.ReleaseGdPictureImage(MultipageHandle)
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainAcquireToDib(System.IntPtr)">
      <summary>
 Acquires a single image, from the currently selected Data Source to a DIB handle.
 </summary>
      <remarks>
 By default, the default data source (DS) is opened, displays its dialog, and determines all the
 parameters of the acquisition and transfer.
 If you want to (try to) hide the DS dialog, see TwainSetHideUI.
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 To set the TWAIN state to 4, use the TwainOpenDefaultSource() or TwainOpenSource() method.
 </remarks>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 0: The bitmap could not created. Use the GetStat(), TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 Non-zero: DIB handle. This handle must be subsequently released using the Marshal.FreeHGlobal() method.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.GetStat" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainLastXferFail" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainUserClosedSource" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetHideUI(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainOpenDefaultSource(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainAcquireToFile(System.String,System.IntPtr)">
      <summary>
 Acquires a single image, from the currently selected Data Source to a file.
 This method uses only the File transfer mode.
 The disk file mode is ideal when transferring large images that might encounter memory limitations
 with Native or memory mode.
 However, Disk File mode is a bit slower than other transfer mode.
 </summary>
      <remarks>
        <para>
 By default, the default data source (DS) is opened, displays its dialog, and determines all the
 parameters of the acquisition and transfer.
 </para>
        <para>
 If you want to (try to) hide the DS dialog, see TwainSetHideUI.
 </para>
        <para>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 </para>
        <para>
 To get the TWAIN state, use the TwainGetState() method.
 </para>
        <para>
 To set the TWAIN state to 4, use the TwainOpenDefaultSource() or TwainOpenSource() method.
 </para>
        <para>
 Warning: To works, this method requires that the current Data source allows file transfer mode.
 </para>
        <para>
 Use the TwainIsFileTransferModeAvailable() to check if the source support this mode of transfer.
 </para>
        <para>
 The output image format should be negotiated with the TwainSetImageFileFormat() method.
 </para>
        <para>
 The output image compression should be negotiated with the TwainSetCompression() method.
 </para>
      </remarks>
      <param name="FilePath">The path of the image file to create.</param>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
 on Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainLastXferFail" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainUserClosedSource" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetHideUI(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainOpenDefaultSource(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImageFileFormat(GdPicture12.TwainImageFileFormats)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetCompression(GdPicture12.TwainCompression)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsFileTransferModeAvailable" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainAcquireToFile(System.String,System.Int32)">
      <summary>
 Acquires a single image, from the currently selected Data Source to a file.
 This method uses only the File transfer mode.
 The disk file mode is ideal when transferring large images that might encounter memory limitations
 with Native or memory mode.
 However, Disk File mode is a bit slower than other transfer mode.
 -&gt; The output image format should be negotiated with the TwainSetImageFileFormat() method.
 -&gt; The output image compression should be negotiated with the TwainSetCompression() method.
 </summary>
      <remarks>
 By default, the default data source (DS) is opened, displays its dialog, and determines all the
 parameters of the acquisition and transfer.
 If you want to (try to) hide the DS dialog, see TwainSetHideUI.
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 To set the TWAIN state to 4, use the TwainOpenDefaultSource() or TwainOpenSource() method.
 Warning: To works, this method requires that the current Data source allows file transfer mode.
 Use the TwainIsFileTransferModeAvailable() to check if the source support this mode of transfer.
 </remarks>
      <param name="FilePath">The path of the image file to create.</param>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
 on Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainLastXferFail" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainUserClosedSource" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetHideUI(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainOpenDefaultSource(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImageFileFormat(GdPicture12.TwainImageFileFormats)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetCompression(GdPicture12.TwainCompression)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsFileTransferModeAvailable" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetInternalBehaviour(System.Int32,System.Boolean)">
      <summary>
 Changes a specific TWAIN handling behaviour of the SDK. This method is experimental and should be used on GdPicture staff advice only!
 </summary>
      <param name="OptionID">The ID of the behaviour to control. Supported options are:
 - 1: FORWARD_ALL_MSG. Forces the control to translate and dispatch all messages sent to the data source manager.
 - 2: NEW_CALLBACK_MODEL. Enables the new callback model defined in the TWAIN 2.0 specifications.
 - 3: FORCE_PROXY_WINDOWS. Forces the control to use it's own proxy windows to intercept windows messages.
 - 4: NEW_CALLBACK_NO_HOOK. If NEW_CALLBACK_MODEL is activated, no message will be forwarded to the Data Source manager throught the DG_CONTROL/DAT_EVENT/MSG_PROCESSEVENT sequence.</param>
      <param name="Enable">True to enable the specified option, else False (default value for all options).</param>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainLogStart(System.String)">
      <summary>
 Starts to log twain operations into file.
 </summary>
      <param name="LogPath">The path of the log file to create / append.</param>
      <returns>
 True if success, else False (can't create or access to the log file).
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainLogStop">
      <summary>
 Stops to log twain operations previously started by the TwainLogStart() method.
 </summary>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSaveConfiguration(System.String)">
      <summary>
 Saves to a file the current settings of the opened source, e.g. DPI, paper size, color format.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainLoadConfiguration(System.Byte[])" />
      <param name="FilePath">The file to save the current device configuration.</param>
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if successful, FALSE otherwise -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <example>
        <code description="Open device &amp; save its current configuration to a file" lang="VB.NET">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
 Dim oGdPictureImaging As New GdPictureImaging
 If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
    If Not oGdPictureImaging.TwainSaveConfiguration("config1.cdd") = True Then
       MessageBox.show("Can't save current configuration. This capability is probably unsupported by the TWAIN device")
    End If
 Else
    MessageBox.show("Can't open default source")
 End If
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSaveConfiguration(System.Byte[]@)">
      <summary>
 Saves to an array of bytes the current settings of the opened source, e.g. DPI, paper size, color format.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainLoadConfiguration(System.Byte[])" />
      <param name="Data">The array of bytes save the current device configuration.</param>
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if successful, FALSE otherwise -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <example>
        <code description="Open device &amp; save its current configuration to an array of bytes" lang="VB.NET">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
 Dim oGdPictureImaging As New GdPictureImaging
 If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
    Dim Data() as Byte = Nothing
    If Not oGdPictureImaging.TwainSaveConfiguration(Data) = True Then
       MessageBox.show("Can't save current configuration. This capability is probably unsupported by the TWAIN device")
    End If
 Else
    MessageBox.show("Can't open default source")
 End If
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainLoadConfiguration(System.String)">
      <summary>
 Loads from a file, settings of the opened source, e.g. DPI, paper size, color format.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSaveConfiguration(System.Byte[]@)" />
      <param name="FilePath">The file containing the current device configuration data.</param>
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if successful, FALSE otherwise -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <example>
        <code description="Open device &amp; load previously saved configuration from file" lang="VB.NET">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
 Dim oGdPictureImaging As New GdPictureImaging
 If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
    If Not oGdPictureImaging.TwainLoadConfiguration("config1.cdd") = True Then
       MessageBox.show("Can't load current configuration. This capability is probably unsupported by the TWAIN device")
    End If
    ''' You can start acquisition process here!
 Else
    MessageBox.show("Can't open default source")
 End If
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainLoadConfiguration(System.Byte[])">
      <summary>
 Loads from an array of bytes, settings of the opened source, e.g. DPI, paper size, color format.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSaveConfiguration(System.Byte[]@)" />
      <param name="Data">The array of bytes containing the current device configuration data.</param>
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if successful, FALSE otherwise -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <example>
        <code description="Open device &amp; load previously saved configuration from file" lang="VB.NET">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
 Dim oGdPictureImaging As New GdPictureImaging
 If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
    If Not oGdPictureImaging.TwainLoadConfiguration(Data) = True Then
       MessageBox.show("Can't load current configuration. This capability is probably unsupported by the TWAIN device")
    End If
    ''' You can start acquisition process here !
 Else
    MessageBox.show("Can't open default source")
 End If
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainCloseSource">
      <summary>
 Closes the open Data Source, if any.
 If the source is enabled, disables it first.
 </summary>
      <returns>
 True if success, else False. If there is not an open source, does nothing and returns TRUE.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 This method should be called only if the TWAIN state is 4 (TWAIN_SOURCE_OPEN) or 5
 (TWAIN_SOURCE_ENABLED).
 If success, the TWAIN state must be &lt;= 3 (TWAIN_SM_OPEN).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainCloseSourceManager(System.IntPtr)">
      <summary>
 Closes the Data Source Manager.
 If a source is open, disables and closes it as needed.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 If the Source Manager is not open, does nothing and returns TRUE.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 If success, the twain state must be &lt;= 2 (TWAIN_SM_LOADED).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainCloseSourceManager(System.Int32)">
      <summary>
 Closes the Data Source Manager.
 If a source is open, disables and closes it as needed.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 If the Source Manager is not open, does nothing and returns TRUE.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 If success, the twain state must be &lt;= 2 (TWAIN_SM_LOADED).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetAutoSourceClose(System.Boolean)">
      <summary>
 Tells to the control to close or not the opened source after a scan process.
 </summary>
      <param name="AutoSourceClose">Set True to tell to the control to close the opened source after an
 scan process, else False.</param>
      <remarks>
 By default, the opened source is closed after a scan process. TwainSetAutoSourceClose(False) to
 change this Behavior.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainDisableSource">
      <summary>
 Disables the open Data Source, if any.
 This closes the source's user interface.
 </summary>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 If there is not an enabled source, does nothing and returns TRUE.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 Before using this method check that the TWAIN state is 5 (TWAIN_SOURCE_ENABLED).
 If success, the twain state must be 4 (TWAIN_SOURCE_OPEN).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainEnableDuplex(System.Boolean)">
      <summary>
 Asks to the opened source to enable or disable the duplex scanning mode.
 </summary>
      <param name="Duplex">Set True to enable duplex mode else False.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetDuplexMode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsDuplexEnabled" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN).
 To get the back of the acquired image, just another time an acquisition method.
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <example>
        <code description="" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageSide1 As Integer, ImageSide2 As Integer
 oGdPictureImaging.TwainSelectSource(Me.Handle)
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 If oGdPictureImaging.TwainEnableDuplex(True) Then
    ImageSide1 = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
    oGdPictureImaging.SaveAsTIFF(ImageSide1, "side1.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage(ImageSide1)
    ImageSide2 = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
    oGdPictureImaging.SaveAsTIFF(ImageSide2, "side2.tif", TiffCompression.TiffCompressionAUTO)
    oGdPictureImaging.ReleaseGdPictureImage(ImageSide2)
 Else
    MessageBox.show("Duplex Scanning mode is not supported!")
 End If
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainEnableImprinter(System.Boolean)">
      <summary>
 Ask to the opened source to enable or not imprinter capability.
 </summary>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterMode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterMode(GdPicture12.TwainPrinterMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterString" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterString(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterSuffix" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterSuffix(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterIndex(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterIndex" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN). To get the
 TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetApplicationInfo(System.Int32,System.Int32,GdPicture12.TwainLanguage,GdPicture12.TwainCountry,System.String,System.String,System.String,System.String)">
      <summary>
 Asks to the component to register your application into TWAIN.
 </summary>
      <param name="MajorNumVersion">Your application major number version.</param>
      <param name="MinorNumVersion">Your application minor number version.</param>
      <param name="LanguageID">The language ID of your application.</param>
      <param name="CountryID">The country ID of your application.</param>
      <param name="VersionInfo">\Version informations of your application.</param>
      <param name="CompanyName">The company name which provides the application.</param>
      <param name="ProductFamily">The product family name.</param>
      <param name="ProductName">The product name.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
        <para>
 This method only if Twain state &lt; 3 (TWAIN_SM_OPEN).
 </para>
        <para>
 Use the GetStat() method to check if this method succeeded.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainUserClosedSource">
      <summary>
 Asks if during the last acquisition process the user asked to close the device.
 </summary>
      <returns>
 True if during the last acquisition process the user asked to close the device, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainLastXferFail" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainLastXferFail">
      <summary>
 Asks if the last acquisition process failed.
 </summary>
      <returns>
 True if the last acquisition process failed , else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainUserClosedSource" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainEndAllXfers">
      <summary>
 Signals the Data Source to stop all the transfers.
 </summary>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 Before using this method check that the TWAIN state is 7 (TWAIN_TRANSFERRING) or 6
 (TWAIN_TRANSFER_READY).
 If success, the twain state must be 5 (TWAIN_SOURCE_ENABLED).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainEndXfer">
      <summary>
 Signals the Data Source to stop the current transfer.
 Go to either State 6 (TWAIN_TRANSFER_READY) if it has more transfers ready, or to State 5
 (TWAIN_SOURCE_ENABLED) if it does not.
 </summary>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 Before using this method check that the TWAIN state is 7 (TWAIN_TRANSFERRING).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainStopFeeder">
      <summary>
 If auto scan is turned ON, this command will stop the operation of the scanner’s automatic feeder. No
 other action is taken. The application may then continue to transfer any images that have been
 captured by the scanner.
 </summary>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutoScan(System.Boolean)" />
      <remarks>
 Before using this method check that the TWAIN state is 6 (TWAIN_TRANSFER_READY).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeCount">
      <summary>
 Returns the number of available printer mode.
 </summary>
      <returns>
 If Success, non zero: The number of available printer mode. Else 0 if fail. Use
 TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainEnableImprinter(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterMode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterMode(GdPicture12.TwainPrinterMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterString" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterString(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterSuffix" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterSuffix(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterIndex(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterIndex" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)">
      <summary>
 Returns an available printer mode which can be used by the opened source in its current configuration.
 </summary>
      <param name="Number">Index of the available printer mode. Must be a value between 1 and
 TwainGetAvailableImprinterModeCount() returned value.</param>
      <returns>
 If fail, returns -1 else if success, The selected file format value. A member of the
 TwainPrinterModes enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainEnableImprinter(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterMode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterMode(GdPicture12.TwainPrinterMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterString" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterString(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterSuffix" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterSuffix(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterIndex(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterIndex" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetImprinterMode(GdPicture12.TwainPrinterMode)">
      <summary>
 Sets the current imprinter mode, if supported.
 Top/Bottom refer to duplex devices, and indicate if the printer is writing on the top or the bottom of the sheet of paper.
 Simplex devices use the top settings.
 Before/After indicates whether printing occurs before or after the sheet of paper has been scanned.
 </summary>
      <param name="PrinterMode">Printer mode. A member of the TwainPrinterMode enumeration.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterMode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterString" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterString(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterSuffix" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterSuffix(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterIndex(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterIndex" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetImprinterMode">
      <summary>
 Returns the current imprinter mode, if any.
 Top/Bottom refer to duplex devices, and indicate if the printer is writing on the top or the bottom of the sheet of paper.
 Simplex devices use the top settings.
 Before/After indicates whether printing occurs before or after the sheet of paper has been scanned.
 </summary>
      <returns>
 A member of the TwainPrinterMode enumeration. If TWPR_UNSUPPORTED is returned, the capability is probably not supported by the current device -&gt; Use
 TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainEnableImprinter(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterMode(GdPicture12.TwainPrinterMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterString" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterString(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterSuffix" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterSuffix(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterIndex(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterIndex" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsImprinterEnabled">
      <summary>
 Ask to the opened source if imprinter capability is currently enabled or not.
 </summary>
      <returns>
 True if imprinter is currently enabled else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainEnableImprinter(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterMode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterMode(GdPicture12.TwainPrinterMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterString" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterString(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterSuffix" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterSuffix(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterIndex(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterIndex" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsImprinterAvailable">
      <summary>
 Ask to the opened source if imprinter capability is supported or not.
 </summary>
      <returns>
 True if imprinter is supported else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainEnableImprinter(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterMode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterMode(GdPicture12.TwainPrinterMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterString" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterString(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterSuffix" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterSuffix(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterIndex(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterIndex" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetImprinterIndex">
      <summary>
 Returns the starting page number with the current imprinter mode.
 </summary>
      <returns>
 The starting page number.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainEnableImprinter(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterMode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterMode(GdPicture12.TwainPrinterMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterString" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterString(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterSuffix" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterSuffix(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterIndex(System.Int32)" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetImprinterIndex(System.Int32)">
      <summary>
 Defines the starting page number with the current imprinter mode.
 </summary>
      <param name="Index">The starting page for the current imprinter mode.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainEnableImprinter(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterMode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterMode(GdPicture12.TwainPrinterMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterString" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterString(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterSuffix" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterIndex(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterIndex" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetImprinterSuffix(System.String)">
      <summary>
 Specifies the string that shall be used as suffix with the current imprinter mode.
 </summary>
      <param name="Suffix">The suffix to be used.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainEnableImprinter(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterMode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterMode(GdPicture12.TwainPrinterMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterString" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterString(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterSuffix" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterIndex(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterIndex" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetImprinterSuffix">
      <summary>
 Returns the string that shall be used as suffix with the current imprinter mode.
 </summary>
      <returns>
 The string to be used as suffix with the current imprinter mode.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainEnableImprinter(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterMode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterMode(GdPicture12.TwainPrinterMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterString" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterString(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterSuffix(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterIndex(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterIndex" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetImprinterString(System.String)">
      <summary>
 Specifies the string that shall be used for printing with the current imprinter mode.
 </summary>
      <param name="Suffix">The string to be used for printing.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainEnableImprinter(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterMode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterMode(GdPicture12.TwainPrinterMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterString" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterSuffix" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterSuffix(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterIndex(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterIndex" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetImprinterString">
      <summary>
 Returns the string that shall be used for printing with the current imprinter mode.
 </summary>
      <returns>
 The string to be used for printing with the current imprinter mode.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainEnableImprinter(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImprinterModeCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsImprinterEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterMode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterMode(GdPicture12.TwainPrinterMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterString(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterSuffix" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterSuffix(System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImprinterIndex(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImprinterIndex" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableImageFileFormatCount">
      <summary>
 Returns the number of available file format values which can be used by the opened source in its
 current configuration for file transfer mode.
 </summary>
      <returns>
 If Success, non zero: The number of available file format values. Else 0 if fail. Use
 TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImageFileFormatNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableImageFileFormatNo(System.Int32)">
      <summary>
 Returns an available image file format value which can be used by the opened source in its current
 configuration for file transfer mode.
 </summary>
      <param name="Number">Index of the available file format value. Must be a value between 1 and
 TwainGetAvailableImageFileFormatCount() returned value.</param>
      <returns>
 If fail, returns -1 else if success, The selected file format value. A member of the
 TwainImageFileFormats enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableImageFileFormatCount" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetImageFileFormat(GdPicture12.TwainImageFileFormats)">
      <summary>
 Tries to set the current image file format to use by the selected twain source for file transfer
 mode.
 </summary>
      <param name="ImageFileFormat">Image file format. A member of the TwainImageFileFormats enumeration.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImageFileFormat" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetImageFileFormat">
      <summary>
 Returns the current image file format used by the selected twain source for file transfer mode.
 </summary>
      <returns>
 If fail, TWFF_UNSUPPORTED : probably not supported by the current device -&gt; Use
 TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.
 If success, Current file format to use in file transfer mode. A member of the GdPicture enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImageFileFormat(GdPicture12.TwainImageFileFormats)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetBitDepthReduction(GdPicture12.TwainBitDepthReduction)">
      <summary>
 Tries to specifies the Reduction Method the Source should use to reduce the bit depth of the data.
 </summary>
      <param name="BitDepthReduction">Bit Depth reduction. A member of the TwainBitDepthReduction
 enumeration.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetBitDepthReduction" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetBitDepthReduction">
      <summary>
 Returns Reduction Method the Source should use to reduce the bit depth of the data.
 </summary>
      <returns>
 Bit Depth reduction. A member of the TwainBitDepthReduction enumeration. TWBR_UNSUPPORTED If it is
 not supported by the current device (Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.)
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetBitDepthReduction(GdPicture12.TwainBitDepthReduction)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetCompression(GdPicture12.TwainCompression)">
      <summary>
 Tries to set the current image compression to use by the selected twain source for file transfer
 mode.
 Since only certain file formats support compression, this capability must be negotiated after setting
 the desired file format with the TwainSetImageFileFormat() method.
 </summary>
      <param name="Compression">Image compression. A member of the TwainCompression enumeration.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetCompression" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImageFileFormat(GdPicture12.TwainImageFileFormats)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetCompression">
      <summary>
 Returns the current image compression used by the selected twain source for file transfer mode.
 </summary>
      <returns>
 Current file format to use in file transfer mode. A member of the TwainCompression enumeration.
 TWCP_UNSUPPORTED If it is not supported by the current device (Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.)
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetCompression(GdPicture12.TwainCompression)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableCompressionCount">
      <summary>
 Returns the number of available compression values which can be used by the opened source in its
 current configuration for file transfer mode.
 </summary>
      <returns>
 If Success, non zero: The number of available compression values. Else 0 if fail. Use
 TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableCompressionNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableCompressionNo(System.Int32)">
      <summary>
 Returns an available compression value which can be used by the opened source in its current
 configuration for file transfer mode.
 </summary>
      <param name="Number">Index of the available file format value. Must be a value between 1 and
 TwainGetAvailableCompressionCount() returned value.</param>
      <returns>
 If fail, returns -1 else if success, The selected compression value. A member of the TwainCompression
 enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableCompressionCount" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableBrightnessCount">
      <summary>
 Returns the number of available brightness values which can be used by the opened source in its
 current configuration.
 </summary>
      <returns>
 If Success, non zero: The number of available brightness values. Else 0 if fail. Use
 TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableBrightnessNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableBrightnessNo(System.Int32)">
      <summary>
 Returns an available brightness value which can be used by the opened source in its current
 configuration.
 </summary>
      <param name="Number">Index of the available brightness value. Must be a value between 1 and
 TwainGetAvailableBrightnessCount() returned value.</param>
      <returns>
 The selected brightness value. Else 0 if fail.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableBrightnessCount" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableContrastCount">
      <summary>
 Returns the number of available contrast values which can be used by the opened source in its
 current configuration.
 </summary>
      <returns>
 If Success, non zero: The number of available contrast values. Else 0 if fail -&gt; Use
 TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableContrastNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableContrastNo(System.Int32)">
      <summary>
 Returns an available contrast value which can be used by the opened source in its current
 configuration.
 </summary>
      <param name="Number">Index of the available contrast value. Must be a value between 1 and
 TwainGetAvailableContrastCount() returned value.</param>
      <returns>
 The selected contrast value.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableContrastCount" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableBitDepthCount">
      <summary>
 Returns the number of available bit depths values which can be used by the opened source in its
 current configuration.
 </summary>
      <returns>
 If Success, non zero: The number of available bit depths values. Else 0 if fail -&gt; Use
 TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableBitDepthNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableBitDepthNo(System.Int32)">
      <summary>
 Returns an available bit depth value which can be used by the opened source in its current
 configuration.
 </summary>
      <param name="Number">Index of the available bit depth value. Must be a value between 1 and
 TwainGetAvailableBitDepthCount() returned value.</param>
      <returns>
 The selected bit depth value.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableBitDepthCount" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailablePixelTypeCount">
      <summary>
 Returns the number of available pixel types values which can be used by the opened source in its
 current configuration.
 </summary>
      <returns>
 If Success, non zero: The number of available pixel types values. Else 0 if fail -&gt; Use
 TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailablePixelTypeNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailablePixelTypeNo(System.Int32)">
      <summary>
 Returns an available pixel type value which can be used by the opened source in its current
 configuration.
 </summary>
      <param name="Number">Index of the available pixel type value. Must be a value between 1 and
 TwainGetAvailablePixelTypeCount() returned value.</param>
      <returns>
 TwainPixelType. The selected pixel type value. A member of the TwainPixelType enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailablePixelTypeCount" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableXResolutionCount">
      <summary>
 Returns the number of available X Resolutions values which can be used by the opened source in its
 current configuration.
 </summary>
      <returns>
 If Success, non zero: The number of available X Resolutions values. Else 0 if fail -&gt; Use
 TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableXResolutionNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableXResolutionNo(System.Int32)">
      <summary>
 Returns an available X Resolution value which can be used by the opened source in its current
 configuration.
 </summary>
      <param name="No">Index of the available X Resolution. Must be a value between 1 and TwainGetAvailableXResolutionCount() returned value.</param>
      <returns>
 The X Resolution.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableXResolutionCount" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableYResolutionCount">
      <summary>
 Returns the number of available Y Resolutions values which can be used by the opened source in its
 current configuration.
 </summary>
      <returns>
 If Success, non zero: The number of available Y Resolutions values. Else 0 if fail -&gt; Use
 TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableYResolutionNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableYResolutionNo(System.Int32)">
      <summary>
 Returns an available Y Resolution value which can be used by the opened source in its current
 configuration.
 </summary>
      <param name="No">Index of the available Y Resolution. Must be a value between 1 and TwainGetAvailableYResolutionCount() returned value.</param>
      <returns>
 The X Resolution.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableYResolutionCount" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableCapValuesCount(GdPicture12.TwainCapabilities)">
      <summary>
 Returns the number of available values for the selected TWAIN capability which can be used with it
 by the opened source in its current configuration.
 </summary>
      <param name="Cap">A member of the TwainCapabilities enumeration.</param>
      <returns>
 If Success, non zero: Number of values available for the selected TWAIN capability. Else 0 if fail -&gt;
 Use TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableCapValueNoNumeric(GdPicture12.TwainCapabilities,System.Int32)">
      <summary>
 Returns an available numeric value for the selected TWAIN capability which can be used by the opened
 source in its current configuration.
 This method should be used to determine what are the supported value which can be used with the
 TwainSetCapCurrentNumeric() method.
 </summary>
      <param name="Cap">A member of the TwainCapabilities enumeration.</param>
      <param name="Number">Index of the available value. Must be a value between 1 and
 TwainGetAvailableCapValuesCount() returned value.</param>
      <returns>
 The selected available value of the selected TWAIN capability.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableCapValuesCount(GdPicture12.TwainCapabilities)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetCapCurrentNumeric(GdPicture12.TwainCapabilities,GdPicture12.TwainItemTypes,System.Double)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetCapItemType(GdPicture12.TwainCapabilities)" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 This method can be used to set the following types of capabilities: TWTY_INT8 , TWTY_INT16,
 TWTY_INT32, TWTY_UINT8, TWTY_UINT16, TWTY_UINT32, TWTY_BOOL, TWTY_FIX32, TWTY_FRAME.
 You can determine the type of each TWAIN capability using the TwainGetCapItemType method or looking
 the twain references from http://www.twain.org
 </remarks>
      <example>
        <code description="List all supported X resolution of the default source" lang="VB.NET">
 Dim i As Integer
 Dim AvailableCapValue As Double
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 For i = 1 To oGdPictureImaging.TwainGetAvailableCapValuesCount(TwainCapabilities.ICAP_XRESOLUTION)
    AvailableCapValue = oGdPictureImaging.TwainGetAvailableCapValueNoNumeric(TwainCapabilities.ICAP_XRESOLUTION, i)
    MessageBox.show("Supported value no: " + Str(i) + " is: " + Str(AvailableCapValue))
 Next i
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailableCapValueNoString(GdPicture12.TwainCapabilities,System.Int32)">
      <summary>
 Returns an available string value for the selected TWAIN capability which can be used by the opened
 source in its current configuration.
 This method should be used to determine what are the supported value which can be used with the
 TwainSetCapCurrentString() method.
 </summary>
      <param name="Cap">A member of the TwainCapabilities enumeration.</param>
      <param name="Number">Index of the available value. Must be a value between 1 and
 TwainGetAvailableCapValuesCount() returned value.</param>
      <returns>
 The selected available value of the selected TWAIN capability.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableCapValuesCount(GdPicture12.TwainCapabilities)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetCapCurrentString(GdPicture12.TwainCapabilities,GdPicture12.TwainItemTypes,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetCapItemType(GdPicture12.TwainCapabilities)" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 This method can be used to set the following types of capabilities: TWTY_STR32, TWTY_STR64,
 TWTY_STR128, TWTY_STR255 .
 You can determine the type of each TWAIN capability using the TwainGetCapItemType method or looking
 the twain references from http://www.twain.org
 </remarks>
      <example>
        <code description="List names of the halftone patterns supported by the default source" lang="VB.NET">
 Dim i As Integer
 Dim AvailableCapValue As Double
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 For i = 1 To oGdPictureImaging.TwainGetAvailableCapValuesCount(TwainCapabilities.ICAP_HALFTONES)
    AvailableCapValue = oGdPictureImaging.TwainGetAvailableCapValueNoString(TwainCapabilities.ICAP_HALFTONES, i)
    MessageBox.show("Supported value no: " + Str(i) + " is: " + Str(AvailableCapValue))
 Next i
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetCapQuerySupport(GdPicture12.TwainCapabilities,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
      <summary>
 Returns the Source’s support status of a specific TWAIN capability.
 </summary>
      <param name="Cap">A member of the TwainCapabilities enumeration.</param>
      <param name="SupportGet">Returns if the source supports Get query with the specified capability.See TwainGetCapCurrentNumeric() and TwainGetCapCurrentString().</param>
      <param name="SupportSet">Returns if the source supports Set query with the specified capability. See TwainSetCapCurrentNumeric() and TwainSetCapCurrentString().</param>
      <param name="SupportGetDefault">Returns if the source supports GetDefault query with the specified capability.  See TwainGetCapDefaultNumeric() and TwainGetCapDefaultString().</param>
      <param name="SupportGetCurrent">Returns if the source supports GetCurrent query with the specified capability. See TwainGetCapCurrentNumeric() and TwainGetCapCurrentString().</param>
      <param name="SupportReset">Returns if the source supports Reset query with the specified capability. See: TwainResetCap().</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetCapCurrentNumeric(GdPicture12.TwainCapabilities,GdPicture12.TwainItemTypes,System.Double)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetCapCurrentNumeric(GdPicture12.TwainCapabilities,System.Double@)">
      <summary>
 Returns as numeric, the current value of a TWAIN capability.
 </summary>
      <param name="Cap">A member of the TwainCapabilities enumeration.</param>
      <param name="CurrentValue">Returns the current value of the specified TWAIN capability.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetCapItemType(GdPicture12.TwainCapabilities)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetCapCurrentNumeric(GdPicture12.TwainCapabilities,GdPicture12.TwainItemTypes,System.Double)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 This method can be used to retrieve the following types of capabilities: TWTY_INT8 , TWTY_INT16,
 TWTY_INT32, TWTY_UINT8, TWTY_UINT16, TWTY_UINT32, TWTY_BOOL, TWTY_FIX32, TWTY_FRAME.
 You can determine the type of each TWAIN capability using the TwainGetCapItemType method or looking
 the twain references from http://www.twain.org
 </remarks>
      <example>
        <code description="Catch the acquisition bit depth used by the default source" lang="VB.NET">
 Dim CurrentCapValue As Double
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainGetCapCurrentNumeric(TwainCapabilities.ICAP_BITDEPTH, CurrentCapValue)
 MessageBox.Show("The current bit depth is: " + CurrentCapValue.ToString())
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetCapDefaultNumeric(GdPicture12.TwainCapabilities,System.Double@)">
      <summary>
 Returns as numeric, the default value of a TWAIN capability.
 </summary>
      <param name="Cap">A member of the TwainCapabilities enumeration.</param>
      <param name="CurrentValue">Returns the default value of the specified TWAIN capability.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetCapItemType(GdPicture12.TwainCapabilities)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetCapCurrentNumeric(GdPicture12.TwainCapabilities,GdPicture12.TwainItemTypes,System.Double)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 This method can be used to retrieve the following types of capabilities: TWTY_INT8 , TWTY_INT16,
 TWTY_INT32, TWTY_UINT8, TWTY_UINT16, TWTY_UINT32, TWTY_BOOL, TWTY_FIX32, TWTY_FRAME.
 You can determine the type of each TWAIN capability using the TwainGetCapItemType method or looking
 the twain references from http://www.twain.org
 </remarks>
      <example>
        <code description="Gets the default the acquisition bit depth used by the default source" lang="VB.NET">
 Dim DefaultCapValue As Double
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainGetCapDefaultNumeric(TwainCapabilities.ICAP_BITDEPTH, DefaultCapValue)
 MessageBox.Show("The default bit depth is: " + DefaultCapValue.ToString())
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetCapRangeNumeric(GdPicture12.TwainCapabilities,System.Double@,System.Double@,System.Double@)">
      <summary>
 Returns the three parameters that define a Range for a TWAIN capability. Many capabilities allow
 users to select their current value from a range of regularly spaced values. The capability can
 specify the minimum and maximum acceptable values and the incremental step size between values. For
 example, resolution might be supported from 100 to 600 in steps of 50 (100, 150, 200, ..., 550,
 600).
 </summary>
      <param name="Cap">A member of the TwainCapabilities enumeration.</param>
      <param name="nMinValue">Output parameter. Starting value in the range.</param>
      <param name="nMaxValue">Output parameter. Final value in the range.</param>
      <param name="nStepValue">Output parameter. Increment from nMinValue to nMaxValue.</param>
      <returns>
 True if success, else False -&gt; use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetCapCurrentNumeric(GdPicture12.TwainCapabilities,GdPicture12.TwainItemTypes,System.Double)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetCapItemType(GdPicture12.TwainCapabilities)" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 This method can be used to set the following types of capabilities: TWTY_INT8 , TWTY_INT16,
 TWTY_INT32, TWTY_UINT8, TWTY_UINT16, TWTY_UINT32, TWTY_BOOL, TWTY_FIX32, TWTY_FRAME.
 You can determine the type of each TWAIN capability using the TwainGetCapItemType method or looking
 the twain references from http://www.twain.org
 </remarks>
      <example>
        <code description="Gets supported Brightness values" lang="VB.NET">
 Dim bSuccess As Boolean
 Dim MinValue As Double, MaxValue As Double, StepValue As Double
 Dim i As Integer
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 bSuccess = oGdPictureImaging.TwainGetCapRangeNumeric(TwainCapabilities.ICAP_BRIGHTNESS, MinValue, MaxValue, StepValue)
 If bSuccess Then
    For i = CInt(MinValue) To CInt(MaxValue) Step CInt(StepValue)
       'Here, you can catch &amp; store the i value somewhere
       MessageBox.show("A supported value is: " + Str(i))
    Next i
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetCapCurrentString(GdPicture12.TwainCapabilities,System.String@)">
      <summary>
 Returns as string, the current value of a TWAIN capability.
 </summary>
      <param name="Cap">A member of the TwainCapabilities enumeration.</param>
      <param name="CurrentValue">Returns the current value of the specified TWAIN capability.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetCapItemType(GdPicture12.TwainCapabilities)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetCapCurrentString(GdPicture12.TwainCapabilities,GdPicture12.TwainItemTypes,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 This method can be used to retrieve the following types of capabilities: TWTY_STR32, TWTY_STR64,
 TWTY_STR128, TWTY_STR255 .
 You can determine the type of each TWAIN capability using the TwainGetCapItemType method or looking
 the twain references from http://www.twain.org
 </remarks>
      <example>
        <code description="Gets the current halftone pattern used by the default source" lang="VB.NET">
 Dim CurrentCapValue As String=""
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainGetCapCurrentString(TwainCapabilities.ICAP_HALFTONES, CurrentCapValue)
 MessageBox.Show("The current halftone pattern used: " + CurrentCapValue)
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetCapDefaultString(GdPicture12.TwainCapabilities,System.String@)">
      <summary>
 Returns as string, the default value of a TWAIN capability.
 </summary>
      <param name="Cap">A member of the TwainCapabilities enumeration.</param>
      <param name="CurrentValue">Returns the default value of the specified TWAIN capability.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetCapItemType(GdPicture12.TwainCapabilities)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetCapCurrentString(GdPicture12.TwainCapabilities,GdPicture12.TwainItemTypes,System.String)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 This method can be used to retrieve the following types of capabilities: TWTY_STR32, TWTY_STR64,
 TWTY_STR128, TWTY_STR255 .
 You can determine the type of each TWAIN capability using the TwainGetCapItemType method or looking
 the twain references from http://www.twain.org
 </remarks>
      <example>
        <code description="Gets the default halftone pattern used by the default source" lang="VB.NET">
 Dim DefaultCapValue As String=""
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainGetCapDefaultString(TwainCapabilities.ICAP_HALFTONES, DefaultCapValue)
 MessageBox.Show("The default halftone pattern used: " + DefaultCapValue)
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainHasFeeder">
      <summary>
 Asks to the opened source if it has a document feeder.
 </summary>
      <returns>
 True if the source indicates it has a document feeder else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 This method can returns FALSE with HP scanners with ADF.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainHasFlatBed">
      <summary>
 Asks to the opened source if it has a flatbed.
 </summary>
      <returns>
 True if the source indicates it has a flatbed else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsFeederSelected">
      <summary>
 Asks to the opened source if the document feeder is selected.
 </summary>
      <returns>
 True if the document feeder is selected, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsDeviceOnline">
      <summary>
 Returns the online statue of the current data source.
 If TRUE, the physical hardware (e.g., scanner, digital camera, image database, etc.) that
 represents the image source is attached, powered on, and communicating.
 </summary>
      <returns>
 True if the current data source is powered on and communicating, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 This method can be issued at any time to determine the availability of the image source
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSelectFeeder(System.Boolean)">
      <summary>
 Asks to the opened source to select or deselect the document feeder.
 </summary>
      <param name="SelectFeeder">If TRUE, Source must acquire data from the document feeder acquire area.If
 FALSE, Source must acquire data from the non-feeder acquire area like
 flatbed area.</param>
      <returns>
 True if success, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsFeederSelected" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsFeederLoaded">
      <summary>
 Asks to the opened source if there are documents in the feeder.
 </summary>
      <returns>
 True if there are documents, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSelectFeeder(System.Boolean)" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 The document feeder must be selected to use this method. To enable the document feeder you need to
 TwainSelectFeeder(True).
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetCapCurrentNumeric(GdPicture12.TwainCapabilities,GdPicture12.TwainItemTypes,System.Double)">
      <summary>
 Changes the current value of a TWAIN capability from a numeric value.
 The TwainGetAvailableCapValueNoNumeric() method should be used to determine what are the supported
 value which can be used with this method.
 </summary>
      <param name="Cap">A member of the TwainCapabilities enumeration.</param>
      <param name="ItemType">A member of the TwainItemTypes enumeration.You can determine the
 type of each TWAIN capability using the TwainGetCapItemType method or
 looking the twain references from http://www.twain.org.</param>
      <param name="NewValue">New value (as numeric) to set to the selected TWAIN capability.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetCapItemType(GdPicture12.TwainCapabilities)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableCapValuesCount(GdPicture12.TwainCapabilities)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableCapValueNoNumeric(GdPicture12.TwainCapabilities,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetCapCurrentNumeric(GdPicture12.TwainCapabilities,System.Double@)" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <example>
        <code description="To set the X resolution to 100 DPI" lang="VB.NET">
 bSuccess = oGdPictureImaging.TwainSetCapCurrentNumeric(TwainCapabilities.ICAP_XRESOLUTION, oGdPictureImaging.TwainGetCapItemType(TwainCapabilities.ICAP_XRESOLUTION), 100)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetCapCurrentString(GdPicture12.TwainCapabilities,GdPicture12.TwainItemTypes,System.String)">
      <summary>
 Changes the current value of a TWAIN capability.
 </summary>
      <param name="Cap">A member of the TwainCapabilities enumeration.</param>
      <param name="ItemType">A member of the TwainItemTypes enumeration.You can determine the
 type of each TWAIN capability using the TwainGetCapItemType method or
 looking the twain references from http://www.twain.org.</param>
      <param name="NewValue">New value to set to the selected TWAIN capability.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetCapItemType(GdPicture12.TwainCapabilities)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableCapValuesCount(GdPicture12.TwainCapabilities)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableCapValueNoString(GdPicture12.TwainCapabilities,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetCapCurrentString(GdPicture12.TwainCapabilities,System.String@)" />
      <example>
        <code description="To set the ORDERED halftone mode" lang="VB.NET">
 bSuccess = oGdPictureImaging.TwainSetCapCurrentString(TwainCapabilities.ICAP_HALFTONES, oGdPictureImaging.TwainGetCapItemType(TwainCapabilities.ICAP_HALFTONES), "ORDERED")
 </code>
      </example>
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 This method can be used to set the following types of capabilities: TWTY_STR32, TWTY_STR64,
 TWTY_STR128, TWTY_STR255.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainResetCap(GdPicture12.TwainCapabilities)">
      <summary>
 Sets the current TWAIN capability value to default value.
 </summary>
      <param name="Cap">A member of the TwainCapabilities enumeration.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetCapItemType(GdPicture12.TwainCapabilities)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableCapValuesCount(GdPicture12.TwainCapabilities)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailableCapValueNoNumeric(GdPicture12.TwainCapabilities,System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetCapCurrentNumeric(GdPicture12.TwainCapabilities,System.Double@)" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetCapItemType(GdPicture12.TwainCapabilities)">
      <summary>
 Returns the Item type used by a TWAIN capability.
 </summary>
      <param name="Cap">A member of the TwainCapabilities enumeration.</param>
      <returns>
 A member of the Tags enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetCapCurrentNumeric(GdPicture12.TwainCapabilities,GdPicture12.TwainItemTypes,System.Double)" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetBitDepth">
      <summary>
 Returns the number of bit per pixel for the current value of PixelType.
 </summary>
      <returns>
 If success: bit depth value. Else 0 if fail -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
        <para>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 </para>
        <para>
 Ambiguity in the Specification prior to version 2.2 may result in some Data Sources reporting just the depth-per-channel.
 In the majority of cases a value of 8 for ICAP_BITDEPTH when ICAP_PIXELTYPE is TWPT_RGB may be treated as if the bit depth is really 24.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetThreshold">
      <summary>
 Returns the dividing line between black and white. This is the value the Source will use to
 threshold, if needed, when scanning B&amp;W image.
 </summary>
      <returns>
 Current threshold value between 0 and 255. -1 If it is not supported by the current device (Use
 TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.)
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetThreshold(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetThreshold(System.Int32)">
      <summary>
 Try to specify the dividing line between black and white. This is the value the Source will use to
 threshold, if needed, when scanning B&amp;W image.
 </summary>
      <param name="Threshold">Threshold value between 0 and 255.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetThreshold" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainHasCameraPreviewUI">
      <summary>
 Queries the current device for UI support for preview mode.
 </summary>
      <returns>
 True if the Source supports preview UI else False: Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetPlanarChunky">
      <summary>
 Returns the color data formats There are two Options, "planar" And "chunky."
 </summary>
      <returns>
 0 for Chunky or 1 for planar. -1 If it is not supported by the current device -&gt; Use
 TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetPlanarChunky(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetPlanarChunky(System.Int32)">
      <summary>
 Try to specify the color data formats There are two Options, "planar" And "chunky".
 </summary>
      <param name="PlanarChunky">0 for Chunky or 1 for Planar.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetPlanarChunky" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetPixelFlavor">
      <summary>
 Returns the pixel 'flavor' (0 is black or white).
 CHOCOLATE means this pixel represents the darkest data value that can be generated by the device (the
 darkest available optical value may measure greater than 0).
 VANILLA means this pixel represents the lightest data value that can be generated by the device (the
 lightest available optical value may measure greater than 0).
 </summary>
      <returns>
 A member of the TwainPixelFlavor enumeration. returns TwainPixelFlavorUndefined (-1) if it is not
 supported by the current device -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetPixelFlavor(GdPicture12.TwainPixelFlavor)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetPixelFlavor(GdPicture12.TwainPixelFlavor)">
      <summary>
 Try to specify the pixel 'flavor' (0 is black or white).
 CHOCOLATE means this pixel represents the darkest data value that can be generated by the device (the
 darkest available optical value may measure greater than 0).
 VANILLA means this pixel represents the lightest data value that can be generated by the device (the
 lightest available optical value may measure greater than 0).
 </summary>
      <param name="PixelFlavor">A member of the TwainPixelFlavor enumeraion.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetPixelFlavor" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetBrightness">
      <summary>
 Returns the current brightness.
 </summary>
      <returns>
 If success: The TWAIN standard *says* that the range for this cap is -1000 ... +1000. If fail,
 Returns -99999 -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode() methods for
 diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetContrast">
      <summary>
 Returns the current contrast.
 </summary>
      <returns>
 If Success: The TWAIN standard *says* that the range for this cap is -1000 ... +1000. If fail,
 Returns -99999 -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode() methods for
 diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetPixelType">
      <summary>
 Asks the source for the current pixel type.
 </summary>
      <returns>
 TwainPixelType. A member of the TwainPixelType enumeration. -1 If fail -&gt; Use
 TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsPixelTypeAvailable(GdPicture12.TwainPixelType)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetPixelType(GdPicture12.TwainPixelType)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetResolution">
      <summary>
 Returns the current resolution in Dot per inch of the selected scanner.
 </summary>
      <returns>
 If success, non-zero value. If fail, -1 -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetCurrentSourceName(System.IntPtr)">
      <summary>
 Returns the name of the opened source.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 The current source name.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetCurrentSourceName(System.Int32)">
      <summary>
 Returns the name of the opened source.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 The current source name.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetDefaultSourceName(System.IntPtr)">
      <summary>
 Returns the name of the default TWAIN source into the dialog of source selection.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window. Returns the name of the default source: the source selected in the
 Select Source dialog.</param>
      <returns>
 The default source name.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetDefaultSourceName(System.Int32)">
      <summary>
 Returns the name of the default TWAIN source into the dialog of source selection.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window. Returns the name of the default source: the source selected in the
 Select Source dialog.</param>
      <returns>
 The default source name.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetDuplexMode">
      <summary>
 Returns the duplex scanning support.
 </summary>
      <returns>
 Can be:
 0 = no support (or error) -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode() methods
 for diagnosing the error.
 1 = 1-pass duplex
 2 = 2-pass duplex
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainEnableDuplex(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsDuplexEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetHideUI">
      <summary>
 Asks if the user interface should be hidden or not during an acquisition process.
 </summary>
      <returns>
 True if the user interface is hidden, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetHideUI(System.Boolean)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetModalUI">
      <summary>
 Asks if the TWAIN Source's GUI runs as modal or modeless.
 </summary>
      <returns>
 True if the TWAIN Source's GUI runs as modal else False (modless).
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetModalUI(System.Boolean)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode">
      <summary>
 Returns the last condition code from the last message sent to TWAIN.
 </summary>
      <returns>
 A member of the TwainConditionCode enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode">
      <summary>
 Returns the last result code from the last message sent to TWAIN.
 </summary>
      <returns>
 A member of the TwainResultCode enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 If the result is not TWRC_SUCCESS, you can use the TwainGetLastConditionCode() method to check the
 reason on this result.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetPaperSize">
      <summary>
 Gets the current paper size.
 </summary>
      <returns>
 A member of the TwainPaperSize enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetPaperSize(GdPicture12.TwainPaperSize)" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 NONE (0) indicates that the maximum image size supported by the device is to be used.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetPendingXfersCount">
      <summary>
 Gets the the number of pending transfers from the current TWAIN device.
 </summary>
      <returns>
 The number of pending transfers from the TWAIN device.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailablePaperSizeCount">
      <summary>
 Returns the number of available paper size values which can be used by the opened source.
 </summary>
      <returns>
 If Success, non zero: The number of available paper size values. Else 0 if fail -&gt; Use
 TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailablePaperSizeNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastConditionCode" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetLastResultCode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetAvailablePaperSizeNo(System.Int32)">
      <summary>
 Returns an available paper size value which can be used by the opened source.
 </summary>
      <param name="Number">Index of the available paper size value. Must be a value between 1 and
 TwainGetAvailablePaperSizeCount() returned value.</param>
      <returns>
 A member of the TwainPaperSize enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetAvailablePaperSizeCount" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetPhysicalHeight">
      <summary>
 Returns the maximum height of the scanning area (in inches).
 </summary>
      <returns>
 Double.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetPhysicalWidth">
      <summary>
 Returns the maximum width of the scanning area (in inches).
 </summary>
      <returns>
 Double.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetSourceCount(System.IntPtr)">
      <summary>
 Returns the number of sources available.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 Number of sources available.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetSourceName(System.Int32,System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetSourceCount(System.Int32)">
      <summary>
 Returns the number of sources available.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 Number of sources available.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetSourceName(System.Int32,System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetSourceName(System.IntPtr,System.Int32)">
      <summary>
 Returns the name of an available TWAIN source.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
 on Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <param name="SourceNo">The number of the source. Must be value between 1 and TwainGetSourceCount()
 return. If the value provided in not in the expected range a TwainError
 status is returned by a subsequent call of the GetStat() method.</param>
      <returns>
 The name of the source.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetSourceCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetSourceName(System.Int32,System.Int32)">
      <summary>
 Returns the name of an available TWAIN source.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
 on Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <param name="SourceNo">The number of the source. Must be value between 1 and TwainGetSourceCount()
 return. If the value provided in not in the expected range a TwainError
 status is returned by a subsequent call of the GetStat() method.</param>
      <returns>
 The name of the source.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetSourceCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetSourceFamily(System.IntPtr,System.Int32)">
      <summary>
 Returns the family name of an available TWAIN source.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
 on Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <param name="SourceNo">The number of the source. Must be value between 1 and TwainGetSourceCount()
 return. If the value provided in not in the expected range a TwainError
 status is returned by a subsequent call of the GetStat() method.</param>
      <returns>
 The name of the source.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetSourceCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetSourceFamily(System.Int32,System.Int32)">
      <summary>
 Returns the family name of an available TWAIN source.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
 on Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <param name="SourceNo">The number of the source. Must be value between 1 and TwainGetSourceCount()
 return. If the value provided in not in the expected range a TwainError
 status is returned by a subsequent call of the GetStat() method.</param>
      <returns>
 The name of the source.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetSourceCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetSourceManufacturer(System.IntPtr,System.Int32)">
      <summary>
 Returns the manufacturer of an available TWAIN source.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
 on Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <param name="SourceNo">The number of the source. Must be value between 1 and TwainGetSourceCount()
 return. If the value provided in not in the expected range a TwainError
 status is returned by a subsequent call of the GetStat() method.</param>
      <returns>
 The name of the source.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetSourceCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetSourceManufacturer(System.Int32,System.Int32)">
      <summary>
 Returns the manufacturer of an available TWAIN source.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
 on Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <param name="SourceNo">The number of the source. Must be value between 1 and TwainGetSourceCount()
 return. If the value provided in not in the expected range a TwainError
 status is returned by a subsequent call of the GetStat() method.</param>
      <returns>
 The name of the source.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetSourceCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetSourceVersionInfo(System.IntPtr,System.Int32,System.Int32@,System.Int32@,GdPicture12.TwainLanguage@,GdPicture12.TwainCountry@,System.String@)">
      <summary>
 Returns the version information of an available TWAIN source.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
 on Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <param name="SourceNo">The number of the source. Must be value between 1 and TwainGetSourceCount()
 return. If the value provided in not in the expected range a TwainError
 status is returned by a subsequent call of the GetStat() method.</param>
      <param name="MajorNum">Returns Major revision number of the software.</param>
      <param name="MinorNum">Incremental revision number of the software.</param>
      <param name="Language">Returns the language of the driver. A member of the TwainLanguage
 enumeration.</param>
      <param name="Country">Returns the origin country of the diver. A member of the TwainCountry
 enumeration.</param>
      <param name="Info">Returns the driver info. IE: "1.0b3 Beta release".</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetSourceCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetSourceVersionInfo(System.Int32,System.Int32,System.Int32@,System.Int32@,GdPicture12.TwainLanguage@,GdPicture12.TwainCountry@,System.String@)">
      <summary>
 Returns the version information of an available TWAIN source.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
 on Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <param name="SourceNo">The number of the source. Must be value between 1 and TwainGetSourceCount()
 return. If the value provided in not in the expected range a TwainError
 status is returned by a subsequent call of the GetStat() method.</param>
      <param name="MajorNum">Returns Major revision number of the software.</param>
      <param name="MinorNum">Incremental revision number of the software.</param>
      <param name="Language">Returns the language of the driver. A member of the TwainLanguage
 enumeration.</param>
      <param name="Country">Returns the origin country of the diver. A member of the TwainCountry
 enumeration.</param>
      <param name="Info">Returns the driver info. IE: "1.0b3 Beta release".</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetSourceCount(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetState">
      <summary>
 Returns the last Twain status.
 </summary>
      <returns>
 A member of the TwainStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAvailable">
      <summary>
 This method find out if TWAIN is installed on the system.
 It takes a little time on the first call.
 </summary>
      <returns>
 True if twain is available else False
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsDuplexEnabled">
      <summary>
 Ask to the opened source if duplex scanning is currently enabled or not.
 </summary>
      <returns>
 True if duplex is currently enabled else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainEnableDuplex(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetDuplexMode" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsFileTransferModeAvailable">
      <summary>
 Asks to the opened source if the current data source supports file transfer mode.
 </summary>
      <returns>
 True if the current data source supports file transfer, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainAcquireToFile(System.String,System.Int32)" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsPixelTypeAvailable(GdPicture12.TwainPixelType)">
      <summary>
 Ask to the opened source if the device supports a kind of pixel type.
 </summary>
      <param name="PixelType">A member of the TwainPixelType enumeration.</param>
      <returns>
 True if the (PixelType) pixel type is available else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetPixelType(GdPicture12.TwainPixelType)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetPixelType" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainOpenDefaultSource(System.IntPtr)">
      <summary>
 This opens the source selected in the Select Source dialog.
 If some source is already open, does nothing and returns TRUE.
 Call this method for each scanning process or to set the TWAIN state to 4 (TWAIN_SOURCE_OPEN) when
 the TWAIN state is 3 (TWAIN_SM_OPEN) or 2 (TWAIN_SM_LOADED) or 1 (TWAIN_PRESESSION).
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetDefaultSourceName(System.Int32)" />
      <remarks>
 If this returns TRUE, TWAIN is in STATE 4 (TWAIN_SOURCE_OPEN).
 </remarks>
      <example>
        <code description="Acquire multiple image from the document feeder to a multipage tiff image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim bContinue As Boolean = True
 Dim MultipageHandle As Integer
 Dim ImageCount As Integer
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainSetAutoFeed(True) 'Enable AutoFeed
 oGdPictureImaging.TwainSetAutoScan(True) 'To  achieve the maximum scanning rate
 oGdPictureImaging.TwainSetPixelType(TwainPixelType.TWPT_BW) '1 bit bw image
 oGdPictureImaging.TwainEnableDuplex(True) 'Duplex acquisition if supported
 oGdPictureImaging.TwainSetHideUI(True) 'Asks to the device to hide his GUI
 ImageCount = 0
 Do
    ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
    If imageId &lt;&gt; 0 Then
       ImageCount = ImageCount + 1
       If ImageCount = 1 Then
          MultipageHandle = ImageID
          oGdPictureImaging.TiffSaveAsMultiPageFile(MultipageHandle, "multipage.tif", TiffCompression.TiffCompressionAUTO)
       Else
          oGdPictureImaging.TiffAddToMultiPageFile(MultipageHandle, ImageID)
          oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       End If
    End If
 Loop While oGdPictureImaging.TwainGetState() &gt; TwainStatus.TWAIN_SOURCE_ENABLED
 oGdPictureImaging.TiffCloseMultiPageFile(MultipageHandle)
 oGdPictureImaging.ReleaseGdPictureImage(MultipageHandle)
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainOpenDefaultSource(System.Int32)">
      <summary>
 This opens the source selected in the Select Source dialog.
 If some source is already open, does nothing and returns TRUE.
 Call this method for each scanning process or to set the TWAIN state to 4 (TWAIN_SOURCE_OPEN) when
 the TWAIN state is 3 (TWAIN_SM_OPEN) or 2 (TWAIN_SM_LOADED) or 1 (TWAIN_PRESESSION).
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetDefaultSourceName(System.Int32)" />
      <remarks>
 If this returns TRUE, TWAIN is in STATE 4 (TWAIN_SOURCE_OPEN).
 </remarks>
      <example>
        <code description="Acquire multiple image from the document feeder to a multipage tiff image" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer
 Dim bContinue As Boolean = True
 Dim MultipageHandle As Integer
 Dim ImageCount As Integer
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainSetAutoFeed(True) 'Enable AutoFeed
 oGdPictureImaging.TwainSetAutoScan(True) 'To  achieve the maximum scanning rate
 oGdPictureImaging.TwainSetPixelType(TwainPixelType.TWPT_BW) '1 bit bw image
 oGdPictureImaging.TwainEnableDuplex(True) 'Duplex acquisition if supported
 oGdPictureImaging.TwainSetHideUI(True) 'Asks to the device to hide his GUI
 ImageCount = 0
 Do
    ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
    If imageId &lt;&gt; 0 Then
       ImageCount = ImageCount + 1
       If ImageCount = 1 Then
          MultipageHandle = ImageID
          oGdPictureImaging.TiffSaveAsMultiPageFile(MultipageHandle, "multipage.tif", TiffCompression.TiffCompressionAUTO)
       Else
          oGdPictureImaging.TiffAddToMultiPageFile(MultipageHandle, ImageID)
          oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       End If
    End If
 Loop While oGdPictureImaging.TwainGetState() &gt; TwainStatus.TWAIN_SOURCE_ENABLED
 oGdPictureImaging.TiffCloseMultiPageFile(MultipageHandle)
 oGdPictureImaging.ReleaseGdPictureImage(MultipageHandle)
 oGdPictureImaging.TwainCloseSource()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainOpenSource(System.IntPtr,System.String)">
      <summary>
 Opens the source with the given name.
 If another source is open, closes it and attempts to open the specified source.
 First this method for each scanning process or to set the TWAIN state to 4 (TWAIN_SOURCE_OPEN) when
 the TWAIN state is 3 (TWAIN_SM_OPEN) or 2 (TWAIN_SM_LOADED) or 1 (TWAIN_PRESESSION).
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing
 but on Citrix and WTS, this must be a top-level window or a child of a top
 level window.</param>
      <param name="SourceName">The name of the source to open.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetDefaultSourceName(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetDSMPath(System.String)" />
      <remarks>
 If this returns TRUE, TWAIN is in STATE 4 (TWAIN_SOURCE_OPEN).
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainOpenSource(System.Int32,System.String)">
      <summary>
 Opens the source with the given name.
 If another source is open, closes it and attempts to open the specified source.
 First this method for each scanning process or to set the TWAIN state to 4 (TWAIN_SOURCE_OPEN) when
 the TWAIN state is 3 (TWAIN_SM_OPEN) or 2 (TWAIN_SM_LOADED) or 1 (TWAIN_PRESESSION).
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing
 but on Citrix and WTS, this must be a top-level window or a child of a top
 level window.</param>
      <param name="SourceName">The name of the source to open.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetDefaultSourceName(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetDSMPath(System.String)" />
      <remarks>
 If this returns TRUE, TWAIN is in STATE 4 (TWAIN_SOURCE_OPEN).
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainResetImageLayout">
      <summary>
 Asks to the opened device to reset the area to scan, sometimes called the ROI (Region of Interest).
 </summary>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImageLayout(System.Double,System.Double,System.Double,System.Double)" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSelectSource(System.IntPtr)">
      <summary>
 Select twain device for capture. This method posts the Source Manager's Select Source dialog box.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 True if success, else False.
 False indicates:
 1- The user canceled the dialog.
 2- The Source Manager found no data sources installed.
 3- There was a failure before the Select Source dialog could be posted.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSelectSource(System.Int32)">
      <summary>
 Select twain device for capture. This method posts the Source Manager's Select Source dialog box.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 True if success, else False.
 False indicates:
 1- The user canceled the dialog.
 2- The Source Manager found no data sources installed.
 3- There was a failure before the Select Source dialog could be posted.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetAutoBrightness(System.Boolean)">
      <summary>
 Try to enable or disable autobrightness scanning.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutoBrightnessAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutoBrightnessEnabled" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <param name="AutoBrightness">True to enable autobrightness, else False.</param>
      <returns>
 TRUE if successful, FALSE otherwise -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetAutoFeed(System.Boolean)">
      <summary>
 Try to enable or disable the Source’s automatic document feeding process.
 If you enable auto feed scanning, this method selects the feeder.
 So to start scanning pages from an ADF, just do: TwainSetAutoFeed(TRUE).
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutoScan(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutoFeedEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutoFeedAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutoFeed(System.Boolean)" />
      <remarks>
 This method can returns FALSE with HP scanners with ADF.
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <param name="AutoFeed">True to enable automatic document feeding, else False.</param>
      <returns>
 TRUE if successful, FALSE otherwise -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetAutomaticBorderDetection(System.Boolean)">
      <summary>
 If this option is available on opened source, try to enable or disable the automatic border
 detection. It reduces or removes the border generated around an image by the scanner scanning its own
 platen (the area not covered by the paper).
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticBorderDetectionAvailable" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <param name="AutoBorderDetect">True to enable automatic border detection, else False.</param>
      <returns>
 TRUE if successful, FALSE otherwise -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutoSizeAvailable">
      <summary>
 Asks to the opened source if she can support the auto-size images capability.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutoSize(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutoSizeEnabled" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if support the auto-size images, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsRotationAvailable">
      <summary>
 Asks to the opened source if she can support the image rotation capability.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetRotation(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetRotation" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if support image rotation, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetRotation(System.Int32)">
      <summary>
 Asks to the opened source to rotate the scanned image data prior to transfer.
 </summary>
      <param name="Rotation">The angle of rotation in degrees.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsRotationAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetRotation" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if success, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetRotation">
      <summary>
 Asks to the opened source for current rotation to apply to the scanned image data prior to transfer.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsRotationAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetRotation(System.Int32)" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 The image rotation in degrees.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsOrientationAvailable">
      <summary>
 Asks to the opened source if she can support the image orientation capability.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetOrientation(GdPicture12.TwainOrientation)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetOrientation" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if support image rotation, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetOrientation(GdPicture12.TwainOrientation)">
      <summary>
 Asks to the opened source to define which edge of the “paper” the image’s “top” is aligned with.
 This information is used to adjust the frames to match the scanning orientation of the paper.
 </summary>
      <param name="Orientation">The image orientation mode. A member of the TwainOrientation enumeration.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsOrientationAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetOrientation" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if success, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetOrientation">
      <summary>
 Asks to the opened source which edge of the “paper” the image’s “top” is aligned with.
 This information is used to adjust the frames to match the scanning orientation of the paper.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsOrientationAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetOrientation(GdPicture12.TwainOrientation)" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 The image orientation mode. A member of the TwainOrientation enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutoSizeEnabled">
      <summary>
 Asks to the opened source if the auto-size images capability is enabled or not.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutoSize(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutoSizeAvailable" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if the auto-size images is enabled, FALSE otherwise.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetAutoSize(System.Boolean)">
      <summary>
 If this option is available on opened source, try to enable or disable the auto-size images.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutoSizeAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutoSizeEnabled" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <param name="AutoSize">True to enable auto-size images, else False.</param>
      <returns>
 TRUE if successful, FALSE otherwise -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetXScaling">
      <summary>
 Asks to the opened source for current horizontal scaling to apply to the scanned image.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsXScalingAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetXScaling(System.Double)" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 The image horizontal scaling. A value of ‘1.0’ is equivalent to 100% scaling.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsXScalingAvailable">
      <summary>
 Asks to the opened source if she can support the image horizontal scaling capability.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetXScaling(System.Double)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetXScaling" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if support image XScaling, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetXScaling(System.Double)">
      <summary>
 Tries to set the current image horizontal scaling factor for the selected twain source.
 </summary>
      <param name="XScaling">The image horizontal scaling. A value of ‘1.0’ is equivalent to 100% scaling. Do not use values less than or equal to zero.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsXScalingAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetXScaling" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if success, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetNoiseFilter">
      <summary>
 Asks to the opened source for current algorithm used to remove noise for the selected twain source.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsNoiseFilterAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetNoiseFilter(GdPicture12.TwainNoiseFilterMode)" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 The noise filter mode. A member of the TwainNoiseFilterMode enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsNoiseFilterAvailable">
      <summary>
 Asks to the opened source if she can support the noise filter capability.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetNoiseFilter(GdPicture12.TwainNoiseFilterMode)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetNoiseFilter" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if support image Noise Filter, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetNoiseFilter(GdPicture12.TwainNoiseFilterMode)">
      <summary>
 Tries to set the current  algorithm used to remove noise for the selected twain source.
 </summary>
      <param name="NoiseFilter">The noise filter mode. A member of the TwainNoiseFilterMode enumeration.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsNoiseFilterAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetNoiseFilter" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if success, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetYScaling">
      <summary>
 Asks to the opened source for current vertical scaling to apply to the scanned image.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsYScalingAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetYScaling(System.Double)" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 The image vertical scaling. A value of ‘1.0’ is equivalent to 100% scaling.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsYScalingAvailable">
      <summary>
 Asks to the opened source if she can support the image vertical scaling capability.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetYScaling(System.Double)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetYScaling" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if support image YScaling, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetYScaling(System.Double)">
      <summary>
 Tries to set the current image vertical scaling factor for the selected twain source.
 </summary>
      <param name="YScaling">The image vertical scaling. A value of ‘1.0’ is equivalent to 100% scaling. Do not use values less than or equal to zero.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsYScalingAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetYScaling" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if success, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetGamma">
      <summary>
 Asks to the opened source for current Gamma correction value to apply to the scanned image.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsGammaAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetGamma(System.Double)" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 Gamma correction value for the image data.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsGammaAvailable">
      <summary>
 Asks to the opened source if she can support the gamma correction capability.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetGamma(System.Double)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetGamma" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if support gamma correction, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetGamma(System.Double)">
      <summary>
 Tries to set the current gamma correction value for the selected twain source.
 </summary>
      <param name="Gamma">Gamma correction value for the image data. Default value is 2.2.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsGammaAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetGamma" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if success, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutomaticBorderDetectionAvailable">
      <summary>
 Asks to the opened source if she can support the Automatic border detection capability.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutomaticBorderDetection(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticBorderDetectionEnabled" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if support the Automatic border detection, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutomaticBorderDetectionEnabled">
      <summary>
 Asks to the opened source if the Automatic border detection capability is enabled or not.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutomaticBorderDetection(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticBorderDetectionAvailable" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if the automatic border detection is enabled, FALSE otherwise.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)">
      <summary>
 If this option is available on opened source, try to enable or disable the barcode detection.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionAvailable" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <param name="bBarcodeDetection">Boolean. True to enable barcode detection, else False.</param>
      <returns>
 Boolean. TRUE if successful, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetAutomaticDeskew(System.Boolean)">
      <summary>
 If this option is available on opened source, try to enable or disable the automatic deskew
 correction of an image. It may also affect the dimensions of the image.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticDeskewAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticDeskewEnabled" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <param name="AutoDeskew">True to enable automatic deskew, else False.</param>
      <returns>
 TRUE if successful, FALSE otherwise -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutomaticDeskewAvailable">
      <summary>
 Asks to the opened source if she can support the Automatic Deskew capability.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutomaticDeskew(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticDeskewEnabled" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if support the Automatic Deskew, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsEndorserAvailable">
      <summary>
 Asks to the opened source if she can support endorser / imprinter capability.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetEndorserNumber(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetEndorserNumber" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if support endorser / imprinter, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetEndorserNumber(System.Int32)">
      <summary>
 Tries to specify the starting endorser / imprinter number for the next acquisition. All other
 endorser/imprinter properties should be handled through the data source’s user interface.
 </summary>
      <param name="Number">The starting number for the endorser.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsEndorserAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetEndorserNumber" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetEndorserNumber">
      <summary>
 Returns the starting endorser / imprinter number for the next acquisition.
 </summary>
      <returns>
 The starting number for the endorser. -999999 If it is not supported by the current device -&gt; Use
 TwainGetLastResultCode() and TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsEndorserAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetEndorserNumber(System.Int32)" />
      <remarks>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutomaticDeskewEnabled">
      <summary>
 Asks to the opened source if the Automatic Deskew capability is enabled or not.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutomaticDeskew(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticDeskewAvailable" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if the automatic deskew is enabled, FALSE otherwise.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutomaticDiscardBlankPagesAvailable">
      <summary>
 Asks to the opened source if she can support the Automatic discard blank images capability.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutomaticDiscardBlankPages(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticDiscardBlankPagesEnabled" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if support the Automatic discard blank images, FALSE otherwise -&gt; Use TwainGetLastResultCode()
 and TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutomaticDiscardBlankPagesEnabled">
      <summary>
 Asks to the opened source if the Automatic discard blank images capability is enabled or not.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutomaticDiscardBlankPages(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticDiscardBlankPagesAvailable" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if automatic discard blank page is enabled, FALSE otherwise.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetAutomaticDiscardBlankPages(System.Boolean)">
      <summary>
 If this option is available on opened source, try to enable or disable the automatic discard blank
 page capability.
 </summary>
      <param name="AutoDiscard">True to enable automatic discard blank images capability, else False.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticDiscardBlankPagesAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticDiscardBlankPagesEnabled" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetAutomaticRotation(System.Boolean)">
      <summary>
 If this option is available on opened source, try to enable or disable the automatic rotation of
 image capability.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticRotationAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticRotationEnabled" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 There are no criteria for how this automatic rotation is determined. A Source may use a field of
 text, or some distinguishing non-text field, such as a barcode or a logo, or it may rely on form
 recognition to help rotate the document.
 </remarks>
      <param name="AutoRotate">True to enable automatic rotation, else False.</param>
      <returns>
 TRUE if successful, FALSE otherwise -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutomaticRotationAvailable">
      <summary>
 Asks to the opened source if she can support the Automatic rotation of images capability.
 This capability depends on intelligent features within the Source to automatically rotate the image
 to the correct position.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutomaticRotation(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticRotationEnabled" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if support the Automatic rotation, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutomaticRotationEnabled">
      <summary>
 Asks to the opened source if the automatic rotation of images capability is enabled or not.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticRotationAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutomaticRotation(System.Boolean)" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if the automatic rotation is enabled, FALSE otherwise.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutoScanAvailable">
      <summary>
 Asks to the opened source if she can support the automatic scan capability.
 This capability is intended to boost the performance of a Source.
 The fundamental assumption behind AutoScan is that the device is able to capture images without
 waiting for the Application to request the image transfers.
 The default behavior is undefined, because some high volume devices are capable of anything but
 TwainIsAutoScanAvailable() return value being equal to TRUE.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutoScanEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutoScan(System.Boolean)" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if support the automatic scan, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutoScanEnabled">
      <summary>
 Asks to the opened source if the automatic scan capability is enabled or not.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutoScanAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutoScan(System.Boolean)" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if the automatic scan is enabled, FALSE otherwise.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionAvailable">
      <summary>
 Asks to the opened source if she can support the barcode detection capability.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionEnabled" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 Boolean. TRUE if support the barcode detection, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
      <example>
        <code description="Acquire single image and detect its barcodes" lang="VB.NET">
 Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
 Dim ImageID As Integer
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
    If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
       oGdPictureImaging.TwainSetBarcodeDetection(True)
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       If imageId &lt;&gt; 0 Then
          Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
          MessageBox.show(Str(BarCodeCount) + " barcode has been found in the scanned image")
          For i As Integer = 1 To BarCodeCount
             MessageBox.show("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
             MessageBox.show("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
          Next
          oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       End If
    Else
       MessageBox.show("Error: Barcode detection is not available on this scanner")
    End If
    oGdPictureImaging.TwainCloseSource()
    MessageBox.show("Done !")
 Else
    MessageBox.show("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
 End If
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionEnabled">
      <summary>
 Asks to the opened source if the barcode detection capability is enabled or not.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsBarcodeDetectionAvailable" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 Boolean. TRUE if the barcode detection is enabled, FALSE otherwise.
 </returns>
      <example>
        <code description="Acquire single image and detect its barcodes" lang="VB.NET">
 Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
 Dim ImageID As Integer
 Dim oGdPictureImaging As New GdPicture.GdPictureImaging
 If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
    If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
       oGdPictureImaging.TwainSetBarcodeDetection(True)
       ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
       If imageId &lt;&gt; 0 Then
          Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
          MessageBox.show(Str(BarCodeCount) + " barcode has been found in the scanned image")
          For i As Integer = 1 To BarCodeCount
             MessageBox.show("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
             MessageBox.show("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
          Next
          oGdPictureImaging.ReleaseGdPictureImage(ImageID)
       End If
    Else
       MessageBox.show("Error: Barcode detection is not available on this scanner")
    End If
    oGdPictureImaging.TwainCloseSource()
    MessageBox.show("Done !")
 Else
    MessageBox.show("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
 End If
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutoFeedAvailable">
      <summary>
 Asks to the opened source if she can support the automatic page feeding capability.
 When AutoFeed capability is enabled, the Source will automatically feed the next page from the
 document feeder after the number of frames negotiated for capture from each page are acquired.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutoFeedEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutoFeed(System.Boolean)" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if support the automatic page feeding, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutoFeedEnabled">
      <summary>
 Asks to the opened source if the automatic page feeding capability is enabled or not.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutoFeedAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutoFeed(System.Boolean)" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if the automatic page feeding is enabled, FALSE otherwise.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutoBrightnessAvailable">
      <summary>
 Asks to the opened source if she can support the auto-brightness images capability.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutoBrightnessEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutoBrightness(System.Boolean)" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if support the auto-brightness images, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutoBrightnessEnabled">
      <summary>
 Asks to the opened source if the auto-brightness images capability is enabled or not.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutoBrightnessAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutoBrightness(System.Boolean)" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if the auto-brightness images is enabled, FALSE otherwise.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetAutoScan(System.Boolean)">
      <summary>
 Tries to enable or disable the auto scan scanning capability. Setting this to TRUE gives the scanner
 permission to 'scan ahead'.
 i.e. to pull pages from the feeder and scan them before they have been requested.
 On high-speed scanners, you may have to enable auto scan to achieve the maximum scanning rate.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutoScanAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutoScanEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutoFeed(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainStopFeeder" />
      <remarks>
 This will fail on most flatbeds &amp; cameras, and some 'feeder'
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <param name="AutoScan">True to enable autoscan, else False.</param>
      <returns>
 TRUE if successful, FALSE otherwise -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutomaticColorAvailable">
      <summary>
 Asks to the opened source if she can support the automatic color detection capability.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticColorEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutomaticColor(System.Boolean)" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if support the automatic color detection, FALSE otherwise -&gt; Use TwainGetLastResultCode() and
 TwainGetLastConditionCode() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsAutomaticColorEnabled">
      <summary>
 Asks to the opened source if the automatic color detection capability is enabled or not.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticColorAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetAutomaticColor(System.Boolean)" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <returns>
 TRUE if the automatic color detection is enabled, FALSE otherwise.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetAutomaticColor(System.Boolean)">
      <summary>
 Tries to enable or disable the automatic color detection capability.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticColorAvailable" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsAutomaticColorEnabled" />
      <remarks>
 Before using this method check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
      <param name="AutomaticColor">True to enable autoscan, else False.</param>
      <returns>
 TRUE if successful, FALSE otherwise -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetBitDepth(System.Int32)">
      <summary>
 Specifies the number of bit per pixel for the current value of PixelType.
 </summary>
      <param name="BitDepth">Bit Depth.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetBitDepth" />
      <remarks>
        <para>
 Before using this method check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 </para>
        <para>
 Ambiguity in the Specification prior to version 2.2 may result in some Data Sources reporting just the depth-per-channel.
 In the majority of cases a value of 8 for ICAP_BITDEPTH when ICAP_PIXELTYPE is TWPT_RGB may be treated as if the bit depth is really 24.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetBrightness(System.Int32)">
      <summary>
 Tries to set the current brightness for the next acquisition.
 </summary>
      <param name="Brightness">The TWAIN standard *says* that the range for this cap is -1000 ... +1000.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetContrast(System.Int32)">
      <summary>
 Tries to set the current contrast for the next acquisition.
 </summary>
      <param name="Contrast">The TWAIN standard *says* that the range for this cap is -1000 ... +1000.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetPixelType(GdPicture12.TwainPixelType)">
      <summary>
 Tries to set the current pixel type for the selected twain source.
 </summary>
      <param name="PixelType">A member of the TwainPixelType enumeration.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsPixelTypeAvailable(GdPicture12.TwainPixelType)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetPixelType" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetResolution(System.Int32)">
      <summary>
 Tries to set the current resolution (in both x &amp; y).
 Resolution is in dots per inch.
 </summary>
      <param name="Resolution">The new resolution.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 'The source may select this resolution, but don't assume it will.
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetDebugMode(System.Boolean)">
      <summary>
 Turns On or Off the Debug Mode of GDTWAIN.
 Displays a message box for each step of the scanning process.
 </summary>
      <param name="DebugMode">True to turn ON else False.</param>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetDSMPath(System.String)">
      <summary>
 Specifies the path TWAIN Data Source Manager.
 The TWAIN DSM is the windows library (dll) providing support for the TWAIN standard.
 Can be TWAIN_32.DLL or TWAINDSM.DLL for TWAIN 2.0 support. By default, the toolkits searches the
 Windows path for the TWAIN DSM but on Citrix the Windows directory can be redirected for users.
 </summary>
      <param name="DSMPath">The path of the TWAIN Data Source Manager.</param>
      <example>
        <code description="Loading the TWAIN 2.0 DSM" lang="VB.NET">
 oGdPictureImaging.TwainSetDSMPath("Windows\TWAINDSM.DLL")
 oGdPictureImaging.TwainOpenDefaultSource
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetErrorMessage(System.Boolean)">
      <summary>
 Turns On or Off the error message box of GDTWAIN.
 Displays a message box for each error appends.
 </summary>
      <param name="ShowErrors">True to turn ON else False.</param>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetImageLayout(System.Double,System.Double,System.Double,System.Double)">
      <summary>
 Specifies the physical area (a rectangle) to be acquired during the next image transfer.
 </summary>
      <param name="Left">Value of the left-most edge of the area to scan measured in inches.</param>
      <param name="Top">Value of the top-most edge of the area to scan measured in inches.</param>
      <param name="Right">Value of the right-most edge of the area to scan measured in inches. Note:
 ImageWidth = Right - Left.</param>
      <param name="Bottom">Value of the bottom-most edge of the area to scan measured in inches. Note:
 ImageHeight = Bottom - Top.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetImageLayout(System.Double@,System.Double@,System.Double@,System.Double@)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainResetImageLayout" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainGetImageLayout(System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
 Returns the physical area (a rectangle) to be acquired during the next image transfer.
 </summary>
      <param name="Left">Value of the left-most edge of the area to scan measured in inches.</param>
      <param name="Top">Value of the top-most edge of the area to scan measured in inches.</param>
      <param name="Right">Value of the right-most edge of the area to scan measured in inches. Note:
 ImageWidth = Right - Left.</param>
      <param name="Bottom">Value of the bottom-most edge of the area to scan measured in inches. Note:
 ImageHeight = Bottom - Top.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainResetImageLayout" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetImageLayout(System.Double,System.Double,System.Double,System.Double)" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetHideUI(System.Boolean)">
      <summary>
 Tells the source to hide or show the user interface before acquisition.
 </summary>
      <param name="Hide">True to hide the UI, else False.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetHideUI" />
      <remarks>
 That this is only a request - some sources will ignore it!
 If the user interface is hidden, you will probably want to set at least some of the basic acquisition
 parameters yourself like resolution, Bit Depth...
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetModalUI(System.Boolean)">
      <summary>
 Set TRUE to run the TWAIN Source's GUI modal or FALSE to run it modeless. Please note that to
 successfully run modal, it may be necessary for the application to disable inputs to its windows
 while the Source’s GUI is running.
 </summary>
      <param name="ModalUI">True to run the source's GUI modal, else False.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetModalUI" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetIndicators(System.Boolean)">
      <summary>
 Tells the source to show or hide progress indicators during acquisition.
 </summary>
      <param name="ShowIndicator">True to show the progress indicators, else False.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetMultiTransfer(System.Boolean)">
      <summary>
 Changes the multiple transfers mode for acquisition.
 </summary>
      <param name="MultiTransfer">If set to False, all the pending transfers are canceled after the last
 acquisition process.</param>
      <remarks>
 The multiple transfers mode is automatically sets to True by the TwainSetAutoFeed(True) and the
 TwainEnableDuplex(True) calls.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetPaperSize(GdPicture12.TwainPaperSize)">
      <summary>
 Sets the current paper size.
 </summary>
      <param name="Size">A member of the TwainPaperSize enumeration.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetPaperSize" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 NONE (0) indicates that the maximum image size supported by the device is to be used.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainSetXferCount(System.Int32)">
      <summary>
 Negotiates with open Source the number of images application will accept.
 </summary>
      <param name="Xfers">Number of image to transfert. Xfers = -1 means all images.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainShowSetupDialogSource(System.IntPtr)">
      <summary>
 Starts the selected device's settings dialog, if this is supported.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsSetupDialogSourceAvailable" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 You can use the TwainUserClosedSource method to determine if the user pressed the Cancel button of
 the displayed interface.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainShowSetupDialogSource(System.Int32)">
      <summary>
 Starts the selected device's settings dialog, if this is supported.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainIsSetupDialogSourceAvailable" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 You can use the TwainUserClosedSource method to determine if the user pressed the Cancel button of
 the displayed interface.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainIsSetupDialogSourceAvailable">
      <summary>
 Queries the selected device's for settings dialog support.
 </summary>
      <returns>
 True if supported, else False
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainShowSetupDialogSource(System.Int32)" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainUnloadSourceManager(System.IntPtr)">
      <summary>
 Unloads the Data Source Manager and release the TWAIN32.DLL.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 This will fail if the Source Manager is open.
 If success, the twain state must be 1 (TWAIN_PRESESSION).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.TwainUnloadSourceManager(System.Int32)">
      <summary>
 Unloads the Data Source Manager and release the TWAIN32.DLL.
 </summary>
      <param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
 Citrix and WTS, this must be a top-level window or a child of a top level
 window.</param>
      <returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainGetState" />
      <remarks>
 This will fail if the Source Manager is open.
 If success, the twain state must be 1 (TWAIN_PRESESSION).
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaSelectSource(GdPicture12.WiaSourceType)">
      <summary>
 Select WIA device for capture. This method posts the WIA Source Manager's Select Source dialog box.
 </summary>
      <param name="SourceType">A member of the WiaSourceType enumeration. The type of source to select.</param>
      <returns>
 The WIA source identifier as string if success, else empty string. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetSourceCount">
      <summary>
 Returns the number of sources available.
 </summary>
      <returns>
 Number of sources available.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetSourceName(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetSourceID(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetSourceName(System.Int32)">
      <summary>
 Returns the name of an available WIA source.
 </summary>
      <param name="SourceNo">The number of the source. Must be value between 1 and WiaGetSourceCount()
 return.</param>
      <returns>
 The name of the source.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetSourceCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetSourceServer(System.Int32)">
      <summary>
 Returns the name of the server on which an available WIA source is connected.
 </summary>
      <param name="SourceNo">The number of the source. Must be value between 1 and WiaGetSourceCount()
 return.</param>
      <returns>
 The server name? Shoud be 'local' for local usage.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetSourceCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetSourceDriverVersion(System.Int32)">
      <summary>
 Returns the version of the driver of an available WIA source.
 </summary>
      <param name="SourceNo">The number of the source. Must be value between 1 and WiaGetSourceCount()
 return.</param>
      <returns>
 The driver version.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetSourceCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetSourceWIAVersion(System.Int32)">
      <summary>
 Returns the version of the WIA protocol used by an available WIA source.
 </summary>
      <param name="SourceNo">The number of the source. Must be value between 1 and WiaGetSourceCount()
 return.</param>
      <returns>
 The WIA version.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetSourceCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetSourceDescription(System.Int32)">
      <summary>
 Returns the description of an available WIA source.
 </summary>
      <param name="SourceNo">The number of the source. Must be value between 1 and WiaGetSourceCount()
 return.</param>
      <returns>
 The description of the source.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetSourceCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetSourceManufacturer(System.Int32)">
      <summary>
 Returns the manufacturer name of an available WIA source.
 </summary>
      <param name="SourceNo">The number of the source. Must be value between 1 and WiaGetSourceCount()
 return.</param>
      <returns>
 The manufacturer name of the source.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetSourceCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetSourceType(System.Int32)">
      <summary>
 Returns the type of an available WIA source.
 </summary>
      <param name="SourceNo">The number of the source. Must be value between 1 and WiaGetSourceCount()
 return.</param>
      <returns>
 A member of the WiaSourceType enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetSourceCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetSourceID(System.Int32)">
      <summary>
 Returns the ID of an available WIA source.
 </summary>
      <param name="SourceNo">The number of the source. Must be value between 1 and WiaGetSourceCount()
 return.</param>
      <returns>
 The name of the source.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetSourceCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetCurrentSourceID">
      <summary>
 Returns the ID of the opened source.
 </summary>
      <returns>
 The current source ID.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaOpenSource(System.String)">
      <summary>
 Opens a WIA source.
 </summary>
      <param name="SourceID">A WIA source identifier which can be retrieved with the WiaGetSourceID or the
 WiaSelectSource methods.</param>
      <returns>
 True if success, False otherwhise. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetSourceID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSelectSource(GdPicture12.WiaSourceType)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaCloseSource" />
      <example>
        <code description="Acquire multiple image from the flatbed to JPEG image. You can find more sophisticated samples in the package." lang="VB.NET">
 Dim ImageID As Integer
 Dim oGdPictureImaging As New GdPictureImaging
 Dim SourceID as string = oGdPictureImaging.WiaSelectSource
 If oGdPictureImaging.WiaOpenSource(SourceID) Then 'Open selected source
    oGdPictureImaging.WiaShowSetupDialogSource() 'Displays device configuration
    oGdPictureImaging.WiaSelectFeeder(False) 'Select flatbed
    ImageID = oGdPictureImaging.WiaAcquireToGdPictureImage()
    If imageId &lt;&gt; 0 Then
       Call oGdPictureImaging.SaveAsJPEG(ImageID, My.Application.Info.DirectoryPath &amp; "image.jpg", 75)
       Call oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    End If
    MessageBox.show("Done. WIA status: " + oGdPictureImaging.WiaGetLastError.ToString)
    oGdPictureImaging.WiaCloseSource()
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaCloseSource">
      <summary>
 \Closes the open Data Source, if any.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetSourceID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSelectSource(GdPicture12.WiaSourceType)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaAcquireToFile(System.String,GdPicture12.WiaImageFormat,System.Boolean)">
      <summary>
 \Acquires a single image, from the currently selected Data Source to a file.
 </summary>
      <param name="FilePath">The destination of the file.</param>
      <param name="ImageFormat">A member of the WiaImageFormat enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaOpenSource(System.String)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaAcquireToFile(System.String)">
      <summary>
 Acquires a single image, from the currently selected Data Source to a file, in the native format
 provided by the data source. The format of the image to be transferred can be determined calling the
 WiaGetImageExtension() method. '''
 </summary>
      <param name="FilePath">The destination of the file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaOpenSource(System.String)" />
      <example>
        <code description="Extract all available image from the memory card of a digital camera, in they native format." lang="VB.NET">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
 Dim oGdPictureImaging As New GdPictureImaging
 Dim WiaSourceID As String = oGdPictureImaging.WiaSelectSource(WiaSourceType.WiaSourceCamera)
 If WiaSourceID &lt;&gt; "" Then
    oGdPictureImaging.WiaOpenSource(WiaSourceID)
    Dim ImageCount As Integer = oGdPictureImaging.WiaGetImageCount
    If ImageCount &gt; 0 Then
       For i As Integer = 1 To ImageCount
          oGdPictureImaging.WiaSelectImageIdx(i)
          Dim FileExt As String = oGdPictureImaging.WiaGetImageExtension()
          oGdPictureImaging.WiaAcquireToFile("Picture" + Str(i) + "." + FileExt)
       Next
       MessageBox.show("Done")
    Else
       MessageBox.show("there is no image available for transfer")
    End If
 Else
    MessageBox.show("No source can be selected")
 End If
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaAcquireToGdPictureImage">
      <summary>
 Acquires a single image, from the currently selected Data Source to a file.
 </summary>
      <returns>
 0: The image could not created. Use the GetStat() and WiaGetLastError() methods for diagnosing the
 error.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaOpenSource(System.String)" />
      <example>
        <code description="Acquire multiple image from the flatbed to JPEG image. You can find more sophisticated samples in the package." lang="VB.NET">
 Dim ImageID As Integer
 Dim oGdPictureImaging As New GdPictureImaging
 Dim SourceID as string = oGdPictureImaging.WiaSelectSource
 If oGdPictureImaging.WiaOpenSource(SourceID) Then 'Open selected source
    oGdPictureImaging.WiaShowSetupDialogSource() 'Displays device configuration
    oGdPictureImaging.WiaSelectFeeder(False) 'Select flatbed
    ImageID = oGdPictureImaging.WiaAcquireToGdPictureImage()
    If imageId &lt;&gt; 0 Then
       Call oGdPictureImaging.SaveAsJPEG(ImageID, My.Application.Info.DirectoryPath &amp; "image.jpg", 75)
       Call oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    End If
    MessageBox.show("Done. WIA status: " + oGdPictureImaging.WiaGetLastError.ToString)
    oGdPictureImaging.WiaCloseSource()
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaTakePictureToGdPictureImage">
      <summary>
 Asks the the currently selected Data Source to acquire an image, the return it as a GdPicture Image. This method should be used with camera only.
 </summary>
      <returns>
 0: The image could not created. Use the GetStat() and WiaGetLastError() methods for diagnosing the
 error.
 Non-zero: GdPicture Image Identifier. The created image. The ReleaseGdPictureImage() method must be subsequently used to release the image from the memory.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaOpenSource(System.String)" />
      <example>
        <code description="Take a picture from a camera and save it to JPEG file." lang="VB.NET">
 Dim ImageID As Integer
 Dim oGdPictureImaging As New GdPictureImaging
 Dim SourceID as string = oGdPictureImaging.WiaSelectSource(WiaSourceType.WiaSourceCamera Or WiaSourceType.WiaSourceVideo)
 If oGdPictureImaging.WiaOpenSource(SourceID) Then 'Open selected source
    ImageID = oGdPictureImaging.WiaTakePictureToGdPictureImage()
    If imageId &lt;&gt; 0 Then
       Call oGdPictureImaging.SaveAsJPEG(ImageID, My.Application.Info.DirectoryPath &amp; "image.jpg", 75)
       Call oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    End If
    MessageBox.show("Done. WIA status: " + oGdPictureImaging.WiaGetLastError.ToString)
    oGdPictureImaging.WiaCloseSource()
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaSetDevicePropertyInt(System.Int32,System.Int32)">
      <summary>
 Undocumented method. Currently for support purpose only.
 </summary>
      <param name="PropertyID">The WIA device property identifier.</param>
      <param name="PropertyValue">The value of the property to set.</param>
      <returns>.</returns>
      <remarks>A member of the GdPictureStatus enumeration.</remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetDevicePropertyInt(System.Int32,System.Int32@)">
      <summary>
 Undocumented method. Currently for support purpose only.
 </summary>
      <param name="PropertyID">The WIA device property identifier.</param>
      <param name="PropertyValue">Returns the current value of the property.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaAcquireWizard">
      <summary>
 Launches the Microsoft Windows Scanner and Camera Wizard with the currently selected Data Source.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaOpenSource(System.String)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetLastError">
      <summary>
 Returns the last status of the currently selected Data Source.
 </summary>
      <returns>
 A member of the WiaStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaSelectFeeder(System.Boolean)">
      <summary>
 Asks to the opened source to select or deselect the document feeder.
 </summary>
      <param name="SelectFeeder">If TRUE, Source must acquire data from the document feeder acquire area.If
 FALSE, Source must acquire data from the non-feeder acquire area like
 flatbed area.</param>
      <returns>
 True if success, else False. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaIsFeederLoaded">
      <summary>
 Asks to the opened source if there are documents in the feeder.
 </summary>
      <returns>
 True if there are documents, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSelectFeeder(System.Boolean)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaIsFeederSelected">
      <summary>
 Asks to the opened source if the document feeder is selected.
 </summary>
      <returns>
 True if the document feeder is selected, else False.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaHasFeeder">
      <summary>
 Asks to the opened source if it has a document feeder.
 </summary>
      <returns>
 True if the source indicates it has a document feeder else False.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaHasFlatBed">
      <summary>
 Asks to the opened source if it has a flatbed.
 </summary>
      <returns>
 True if the source indicates it has a flatbed else False.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaIsDuplexAvailable">
      <summary>
 Ask to the opened source if duplex scanning is currently available or not.
 </summary>
      <returns>
 True if duplex is currently available else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaEnableDuplex(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaIsDuplexEnabled" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaIsDuplexEnabled">
      <summary>
 Ask to the opened source if duplex scanning is currently enabled or not.
 </summary>
      <returns>
 True if duplex is currently enabled else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaEnableDuplex(System.Boolean)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaIsDuplexAvailable" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaEnableDuplex(System.Boolean)">
      <summary>
 Ask to the opened source if duplex scanning is currently enabled or not.
 </summary>
      <param name="Enable">TRUE to enabled duplex scanning mode else FALSE.</param>
      <returns>
 True if success, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaIsDuplexEnabled" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaIsDuplexAvailable" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaShowSetupDialogSource">
      <summary>
 Starts the selected device's settings dialog.
 </summary>
      <seealso cref="M:GdPicture12.GdPictureImaging.TwainSetIndicators(System.Boolean)" />
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaSetIndicators(System.Boolean)">
      <summary>
 Tells the source to show or hide progress indicators during acquisition.
 </summary>
      <param name="ShowIndicator">True to show the progress indicators, else False.</param>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaShowSetupDialogSource" />
      <remarks>
 Before using this method check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
 To get the TWAIN state, use the TwainGetState() method.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaSetVerticalResolution(System.Int32)">
      <summary>
 Tries to set the current vertical resolution.
 Resolution is in dots per inch.
 </summary>
      <param name="Resolution">The new resolution.</param>
      <returns>
 True if success, else False. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetVerticalResolution" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableVerticalResolutionCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableVerticalResolutionNo(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetVerticalResolution">
      <summary>
 Returns the current vertical resolution in Dot per inch of the selected device.
 </summary>
      <returns>
 If success, non-zero value. If fail, -1. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSetVerticalResolution(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableVerticalResolutionCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableHorizontalResolutionNo(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetAvailableVerticalResolutionCount">
      <summary>
 Returns the number of supported vertical resolutions which can be used by the opened source in its
 current configuration.
 </summary>
      <returns>
 If Success, non zero: The number of supported vertical resolutions. Else 0 if fail. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetVerticalResolution" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSetVerticalResolution(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableHorizontalResolutionNo(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetAvailableVerticalResolutionNo(System.Int32)">
      <summary>
 Returns a supported vertical resolution which can be used by the opened source in its current configuration.
 </summary>
      <param name="ResNo">Index of the supported vertical resolution. Must be a value between 1 and  WiaGetAvailableVerticalResolutionCount() returned value.</param>
      <returns>
 The supported vertical resolution.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetVerticalResolution" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSetVerticalResolution(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableVerticalResolutionCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaSetHorizontalResolution(System.Int32)">
      <summary>
 Tries to set the current horizontal resolution.
 Resolution is in dots per inch.
 </summary>
      <param name="Resolution">The new resolution.</param>
      <returns>
 True if success, else False. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetHorizontalResolution" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableHorizontalResolutionNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableHorizontalResolutionCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetHorizontalResolution">
      <summary>
 Returns the current horizontal resolution in Dot per inch of the selected device.
 </summary>
      <returns>
 If success, non-zero value. If fail, -1.  Use WiaGetLastError() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSetHorizontalResolution(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableHorizontalResolutionNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableHorizontalResolutionCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetAvailableHorizontalResolutionCount">
      <summary>
 Returns the number of supported horizontal resolutions which can be used by the opened source in its current configuration.
 </summary>
      <returns>
 If Success, non zero: The number of supported horizontal resolutions. Else 0 if fail. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetHorizontalResolution" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSetHorizontalResolution(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableHorizontalResolutionNo(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetAvailableHorizontalResolutionNo(System.Int32)">
      <summary>
 Returns a supported horizontal resolution which can be used by the opened source in its current configuration.
 </summary>
      <param name="ResNo">Index of the supported horizontal resolution. Must be a value between 1 and  WiaGetAvailableHorizontalResolutionCount() returned value.</param>
      <returns>
 The supported horizontal resolution.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetHorizontalResolution" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSetHorizontalResolution(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableHorizontalResolutionCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetAvailableBrightnessCount">
      <summary>
 Returns the number of supported brightness values which can be used by the opened source in its current configuration.
 </summary>
      <returns>
 If Success, non zero: The number of supported brightness values. Else 0 if fail. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetBrightness" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSetBrightness(System.Double)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableBrightnessNo(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetBrightness">
      <summary>
 Returns the brightness value of the selected device.
 </summary>
      <returns>
 If success: The  standard *says* that the range for this cap is -1000 ... +1000. If fail,
 Returns -99999. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSetBrightness(System.Double)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableBrightnessCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableBrightnessNo(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaSetBrightness(System.Double)">
      <summary>
 Tries to set the current brightness.
 </summary>
      <param name="Brightness">The new brightness.</param>
      <returns>
 True if success, else False. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetVerticalResolution" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableBrightnessCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableBrightnessNo(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetAvailableBrightnessNo(System.Int32)">
      <summary>
 Returns a supported brightness value which can be used by the opened source in its current
 configuration.
 </summary>
      <param name="BrightnessNo">Index of the supported brightness value. Must be a value between 1 and
 WiaGetAvailableBrightnessCount() returned value.</param>
      <returns>
 The supported brightness value.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetBrightness" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSetBrightness(System.Double)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableBrightnessCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetAvailableContrastCount">
      <summary>
 Returns the number of supported contrast values which can be used by the opened source in its current configuration.
 </summary>
      <returns>
 If Success, non zero: The number of supported contrast values. Else 0 if fail. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetContrast" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSetContrast(System.Double)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableContrastNo(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetContrast">
      <summary>
 Returns the contrast value of the selected device.
 </summary>
      <returns>
 If success: The  standard *says* that the range for this cap is -1000 ... +1000. If fail,
 Returns -99999. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSetContrast(System.Double)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableContrastCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableContrastNo(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaSetContrast(System.Double)">
      <summary>
 Tries to set the current contrast.
 </summary>
      <param name="Contrast">The new contrast.</param>
      <returns>
 True if success, else False. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetVerticalResolution" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableContrastCount" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableContrastNo(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetAvailableContrastNo(System.Int32)">
      <summary>
 Returns a supported contrast value which can be used by the opened source in its current
 configuration.
 </summary>
      <param name="ContrastNo">Index of the supported contrast value. Must be a value between 1 and
 WiaGetAvailableContrastCount() returned value.</param>
      <returns>
 The supported contrast value.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetContrast" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSetContrast(System.Double)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableContrastCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetImageIntent">
      <summary>
 Returns the current image intent setting for the selected device.
 The driver chooses the bit depth, in dots per inch, and other settings that it determines are appropriate for the selected intent.
 </summary>
      <returns>
 A member of the WiaImageIntent enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSetImageIntent(GdPicture12.WiaImageIntent)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableImageIntentNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableImageIntentCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetImageCount">
      <summary>
 Returns the number of available image from the selected device, for example: the number of pictures
 stored on the memory card of a digital camera.
 </summary>
      <returns>
 A member of the WiaImageIntent enumeration.
 </returns>
      <example>
        <code description="Extract all available image from the memory card of a digital camera, in they native format." lang="VB.NET">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
 Dim oGdPictureImaging As New GdPictureImaging
 Dim WiaSourceID As String = oGdPictureImaging.WiaSelectSource(WiaSourceType.WiaSourceCamera)
 If WiaSourceID &lt;&gt; "" Then
    oGdPictureImaging.WiaOpenSource(WiaSourceID)
    Dim ImageCount As Integer = oGdPictureImaging.WiaGetImageCount
    If ImageCount &gt; 0 Then
       For i As Integer = 1 To ImageCount
          oGdPictureImaging.WiaSelectImageIdx(i)
          Dim FileExt As String = oGdPictureImaging.WiaGetImageExtension()
          oGdPictureImaging.WiaAcquireToFile("Picture" + Str(i) + "." + FileExt)
       Next
       MessageBox.show("Done")
    Else
       MessageBox.show("there is no image available for transfer")
    End If
 Else
    MessageBox.show("No source can be selected")
 End If
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaSelectImageIdx(System.Int32)">
      <summary>
 Sets the index of the image to be transferred from the selected device.
 </summary>
      <param name="ImageIdx">The index of the image to be acquired. Must be a value between 1 and
 WiaGetImageCount().</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Extract all available image from the memory card of a digital camera, in they native format." lang="VB.NET">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
 Dim oGdPictureImaging As New GdPictureImaging
 Dim WiaSourceID As String = oGdPictureImaging.WiaSelectSource(WiaSourceType.WiaSourceCamera)
 If WiaSourceID &lt;&gt; "" Then
    oGdPictureImaging.WiaOpenSource(WiaSourceID)
    Dim ImageCount As Integer = oGdPictureImaging.WiaGetImageCount
    If ImageCount &gt; 0 Then
       For i As Integer = 1 To ImageCount
          oGdPictureImaging.WiaSelectImageIdx(i)
          Dim FileExt As String = oGdPictureImaging.WiaGetImageExtension()
          oGdPictureImaging.WiaAcquireToFile("Picture" + Str(i) + "." + FileExt)
       Next
       MessageBox.show("Done")
    Else
       MessageBox.show("there is no image available for transfer")
    End If
 Else
    MessageBox.show("No source can be selected")
 End If
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetImageExtension">
      <summary>
 Gets the the extension of the image to be transferred from the selected device.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Extract all available image from the memory card of a digital camera, in they native format." lang="VB.NET">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
 Dim oGdPictureImaging As New GdPictureImaging
 Dim WiaSourceID As String = oGdPictureImaging.WiaSelectSource(WiaSourceType.WiaSourceCamera)
 If WiaSourceID &lt;&gt; "" Then
    oGdPictureImaging.WiaOpenSource(WiaSourceID)
    Dim ImageCount As Integer = oGdPictureImaging.WiaGetImageCount
    If ImageCount &gt; 0 Then
       For i As Integer = 1 To ImageCount
          oGdPictureImaging.WiaSelectImageIdx(i)
          Dim FileExt As String = oGdPictureImaging.WiaGetImageExtension()
          oGdPictureImaging.WiaAcquireToFile("Picture" + Str(i) + "." + FileExt)
       Next
       MessageBox.show("Done")
    Else
       MessageBox.show("there is no image available for transfer")
    End If
 Else
    MessageBox.show("No source can be selected")
 End If
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaSetImageIntent(GdPicture12.WiaImageIntent)">
      <summary>
 \Sets the current image intent setting for the selected device.
 The driver chooses the bit depth, in dots per inch, and other settings that it determines are appropriate for the selected intent.
 </summary>
      <param name="Intent">The image intent to set.</param>
      <returns>
 True if success, False otherwise. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSetImageIntent(GdPicture12.WiaImageIntent)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableImageIntentNo(System.Int32)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableImageIntentCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetAvailableImageIntentCount">
      <summary>
 Returns the number of supported image intents which can be used by the opened source in its current configuration.
 </summary>
      <returns>
 If Success, non zero: The number of supported image intents. Else 0 if fail. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSetImageIntent(GdPicture12.WiaImageIntent)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetImageIntent" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableImageIntentNo(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetAvailableImageIntentNo(System.Int32)">
      <summary>
 Returns a supported image intent which can be used by the opened source in its current configuration.
 </summary>
      <param name="IntentNo">Index of the supported image intent. Must be a value between 1 and  WiaGetAvailableImageIntentCount() returned value.</param>
      <returns>
 A member of the WiaImageIntent enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSetImageIntent(GdPicture12.WiaImageIntent)" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetImageIntent" />
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetAvailableImageIntentCount" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetBitsPerPixel">
      <summary>
 Returns the current bits per pixel setting for the selected device.
 </summary>
      <returns>
 The current bits per pixel setting.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaSetBitsPerPixel(System.Int32)">
      <summary>
 Sets the current bits per pixel setting for the selected device.
 </summary>
      <param name="bpp">The number of bits per pixel.</param>
      <returns>
 True if success, else False. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetChannelsPerPixel">
      <summary>
 Returns the current channels per pixel setting for the selected device.
 </summary>
      <returns>
 The current channels per pixel setting.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaSetChannelsPerPixel(System.Int32)">
      <summary>
 Sets the current channels per pixel setting for the selected device.
 </summary>
      <param name="n">The number of channels per pixel.</param>
      <returns>
 True if success, else False. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaSetImageLayout(System.Double,System.Double,System.Double,System.Double)">
      <summary>
 Specifies the physical area (a rectangle) to be acquired during the next image transfer.
 </summary>
      <param name="Left">Horizontal start position of the area to scan measured in inches.</param>
      <param name="Top">Vertical start position of the area to scan measured in inches.</param>
      <param name="Width">Width of the area to scan measured in inches.</param>
      <param name="Height">Height of the area to scan measured in inches.</param>
      <returns>
 True if success, else False. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetPaperSize">
      <summary>
 Gets the current paper size.
 </summary>
      <returns>
 A member of the WiaPageSize enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaSetPaperSize(GdPicture12.WiaPageSize)" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaSetPaperSize(GdPicture12.WiaPageSize)">
      <summary>
 Sets the current paper size.
 </summary>
      <param name="PageSize">Page size. A member of the WiaPageSize enumeration.</param>
      <returns>
 True if success, else False. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.GdPictureImaging.WiaGetPaperSize" />
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetImageLayout(System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
 Returns the physical area (a rectangle) to be acquired during the next image transfer.
 </summary>
      <param name="Left">Output parameter. Horizontal start position of the area to scan measured in inches.</param>
      <param name="Top">Output parameter. Vertical start position of the area to scan measured in inches.</param>
      <param name="Width">Output parameter. Width of the area to scan measured in inches.</param>
      <param name="Height">Output parameter. Height of the area to scan measured in inches.</param>
      <returns>
 True if success, else False. Use WiaGetLastError() methods for diagnosing the error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetVerticalBedSize">
      <summary>
 Returns the height of the bed of the current device.
 </summary>
      <returns>
 The height of the bed in inches.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetHorizontalBedSize">
      <summary>
 Returns the width of the bed of the current device.
 </summary>
      <returns>
 The width of the bed in inches.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetVerticalSheetFeedSize">
      <summary>
 Returns the height of the feeder of the current device.
 </summary>
      <returns>
 The height of the feeder in inches.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.WiaGetHorizontalSheetFeedSize">
      <summary>
 Returns the width of the feeder of the current device.
 </summary>
      <returns>
 The width of the feeder in inches.
 </returns>
    </member>
    <member name="M:GdPicture12.GdPictureImaging.Dispose">
      <summary>
 This method disposes the GdPictureImaging object, by closing and releasing all related resources.
 All non released GdPicture Images allocated by this object will remain available into the memory until they will be destroyed by the ReleaseGdPictureImage() method of any other GdPictureImaging object.
 </summary>
    </member>
    <member name="E:GdPicture12.GdPictureImaging.OCRTesseractProgress">
      <summary>
 Occurs on OCR processing progression.
 </summary>
      <param name="Progress">The Progression between 0 and 100.</param>
      <remarks>
 This event is raised by the following method: PdfOCRCreateFromMultipageTIFF
 </remarks>
    </member>
    <member name="M:GdPicture12.AnnotationManager.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Returns a 32-bit Color value from a set of alpha, red, green, and blue color components.
 </summary>
      <param name="Alpha">The alpha component (also called transparency). Valid values are 0 (full
 transparency) to 255 (full opacity).</param>
      <param name="Red">The red component. Valid values are 0 to 255.</param>
      <param name="Green">The green component. Valid values are 0 to 255.</param>
      <param name="Blue">The blue component. Valid values are 0 to 255.</param>
      <returns>
 A 32-bit Color value.
 </returns>
      <example>
        <code description="Getting ARGB Red color Using ARGBI." lang="VB.NET">
 Integer RedColor = object.ARGBI(255, 255, 0, 0) ' A = 255; R = 255:  G = 0: B = 0
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.AnnotationManager.SelectPage(System.Int32)">
      <summary>
 Changes the current page of the native document.
 </summary>
      <param name="PageNo">Page number between 1 and page count.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Opens a PDF, draws a rubber stamp annotation, then displays the stamped document on a GdViewer object." lang="VB.NET">
 'The following code assumes that a GdViewer called GdViewer1 has been painted on the form.
 Dim oGdPicturePDF As New GdPicturePDF
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim oAnnotationManager As New AnnotationManager
 oAnnotationManager.InitFromGdPicturePDF(oGdPicturePDF)
 oAnnotationManager.SelectPage(1)
 Dim annot As AnnotationRubberStamp = oAnnotationManager.AddRubberStampAnnot(Color.Red, 0, 0, oGdPicturePDF.GetPageWidth / 72, oGdPicturePDF.GetPageHeight / 72, "APPROVED")
 annot.Rotation = 20
 oAnnotationManager.SaveAnnotationsToPage()
 oAnnotationManager.Close()
 GdViewer1.DisplayFromGdPicturePDF(oGdPicturePDF)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.AnnotationManager.Close">
      <summary>
 Closes the annotation manager object. Call this method when you are done with annotation handling
 of the document.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Opens a PDF, draws a rubber stamp annotation, then displays the stamped document on a GdViewer object." lang="VB.NET">
 'The following code assumes that a GdViewer called GdViewer1 has been painted on the form.
 Dim oGdPicturePDF As New GdPicturePDF
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim oAnnotationManager As New AnnotationManager
 oAnnotationManager.InitFromGdPicturePDF(oGdPicturePDF)
 oAnnotationManager.SelectPage(1)
 Dim annot As AnnotationRubberStamp = oAnnotationManager.AddRubberStampAnnot(Color.Red, 0, 0, oGdPicturePDF.GetPageWidth / 72, oGdPicturePDF.GetPageHeight / 72, "APPROVED")
 annot.Rotation = 20
 oAnnotationManager.SaveAnnotationsToPage()
 oAnnotationManager.Close()
 GdViewer1.DisplayFromGdPicturePDF(oGdPicturePDF)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.AnnotationManager.InitFromGdPicturePDF(GdPicture12.GdPicturePDF)">
      <summary>
 Initialize the annotation manager object from a PDF document handled by a GdPicturePDF object.
 </summary>
      <param name="PDF">The PDF document.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Opens a PDF, draws a rubber stamp annotation, then displays the stamped document on a GdViewer object." lang="VB.NET">
 'The following code assumes that a GdViewer called GdViewer1 has been painted on the form.
 Dim oGdPicturePDF As New GdPicturePDF
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim oAnnotationManager As New AnnotationManager
 oAnnotationManager.InitFromGdPicturePDF(oGdPicturePDF)
 oAnnotationManager.SelectPage(1)
 Dim annot As AnnotationRubberStamp = oAnnotationManager.AddRubberStampAnnot(Color.Red, 0, 0, oGdPicturePDF.GetPageWidth / 72, oGdPicturePDF.GetPageHeight / 72, "APPROVED")
 annot.Rotation = 20
 oAnnotationManager.SaveAnnotationsToPage()
 oAnnotationManager.Close()
 GdViewer1.DisplayFromGdPicturePDF(oGdPicturePDF)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.AnnotationManager.InitFromGdViewer(System.Object)">
      <summary>
 Initialize the annotation manager object from a GdViewer object.
 </summary>
      <param name="Viewer">The GdViewer object.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Opens a PDF, laods it onto a GdViewer, initialize the AnnotationManager from the GdViewer, then draw a rubber stamp annotation." lang="VB.NET">
 'The following code assumes that a GdViewer called GdViewer1 has been painted on the form.
 Dim oGdPicturePDF As New GdPicturePDF
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 GdViewer1.DisplayFromGdPicturePDF(oGdPicturePDF)
 Dim oAnnotationManager As New AnnotationManager
 oAnnotationManager.InitFromGdViewer(GdViewer1)
 oAnnotationManager.SelectPage(1)
 Dim annot As AnnotationRubberStamp = oAnnotationManager.AddRubberStampAnnot(Color.Red, 0, 0, oGdPicturePDF.GetPageWidth / 72, oGdPicturePDF.GetPageHeight / 72, "APPROVED")
 annot.Rotation = 20
 oAnnotationManager.SaveAnnotationsToPage()
 oAnnotationManager.Close()
 GdViewer1.Redraw()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.AnnotationManager.InitFromGdPictureImage(System.Int32)">
      <summary>
 Initialize the annotation manager object from a GdPicture Image.
 </summary>
      <param name="ImageID">A GdPicture Image identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Opens a multipage tiff image, drawn a rubber stamp annot, then display the stamped document into a GdViewer object" lang="VB.NET">
 Dim oGdPictureImaging As New GdPictureImaging
 Dim imageId As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 If imageId &lt;&gt; 0 Then
    Dim oAnnotationManager As New AnnotationManager
    oAnnotationManager.InitFromGdPictureImage(ImageID)
    oAnnotationManager.SelectPage(1)
    Dim annot As AnnotationRubberStamp = oAnnotationManager.AddRubberStampAnnot(Color.Red, 0, 0, CSng(oGdPictureImaging.GetWidthInches(ImageID)), CSng(oGdPictureImaging.GetHeightInches(ImageID)), "APPROVED")
    annot.Rotation = 20
    oAnnotationManager.SaveAnnotationsToPage()
    GdViewer1.DisplayFromGdPictureImage(ImageID)
 Else
    MessageBox.Show("Error: " + oGdPictureImaging.GetStat().ToString())
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.AnnotationManager.GetAnnotationCount">
      <summary>
 Returns the number of GdPicture/XMP annotations available on the current page of the native document.
 </summary>
      <returns>
 The number of available annotations.
 </returns>
      <example>
        <code description="Displays creation data and author of all available annotations in a PDF document after displaying it in a GdViewer object." lang="VB.NET">
 'The following code assumes that a GdViewer called GdViewer1 has been painted on the form.
 Dim oGdPicturePDF As New GdPicturePDF
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 GdViewer1.DisplayFromGdPicturePDF(oGdPicturePDF)
 Dim oAnnotationManager As New AnnotationManager
 oAnnotationManager.InitFromGdPicturePDF(oGdPicturePDF)
 oAnnotationManager.SelectPage(1)
 For i As Integer = 0 To oAnnotationManager.GetAnnotationCount() - 1
    Dim Annot As GdPicture.Annotation = oAnnotationManager.GetAnnotationFromIdx(i)
    MessageBox.show("Author: " + Annot.Author)
    MessageBox.show("Creation time: " + Annot.CreationTime.ToString)
 Next
 oAnnotationManager.Close()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.AnnotationManager.GetAnnotationFromIdx(System.Int32)">
      <summary>
 Returns a GdPicture/XMP annotations available on the current page of the native document.
 </summary>
      <returns>
 An Annotation object.
 </returns>
      <param name="AnnotationIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
      <example>
        <code description="Displays creation data and author of all available annotations in a PDF document after displaying it in a GdViewer object." lang="VB.NET">
 'The following code assumes that a GdViewer called GdViewer1 has been painted on the form.
 Dim oGdPicturePDF As New GdPicturePDF
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 GdViewer1.DisplayFromGdPicturePDF(oGdPicturePDF)
 Dim oAnnotationManager As New AnnotationManager
 oAnnotationManager.InitFromGdPicturePDF(oGdPicturePDF)
 oAnnotationManager.SelectPage(1)
 For i As Integer = 0 To oAnnotationManager.GetAnnotationCount() - 1
    Dim Annot As GdPicture.Annotation = oAnnotationManager.GetAnnotationFromIdx(i)
    MessageBox.Show("Author: " + Annot.Author)
    MessageBox.Show("Creation time: " + Annot.CreationTime.ToString)
 Next
 oAnnotationManager.Close()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.AnnotationManager.GetAnnotationIdx(GdPicture12.Annotations.Annotation)">
      <summary>
 Returns the index of a GdPicture/XMP annotations available on the current page of the native document.
 </summary>
      <returns>
 The annotation index. A value between 0 and GetAnnotationCount() - 1.
 </returns>
      <param name="Annot">The annotation object.</param>
    </member>
    <member name="M:GdPicture12.AnnotationManager.GetOrderedAnnotations">
      <summary>
 Returns an array of GdPicture/XMP annotations available on the current page of the native document, sorted by they z-order.
 </summary>
      <returns>
 An array of sortedAnnotation object.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.SetAnnotationPropertyValue(System.Int32,System.String,System.Object)">
      <summary>
 Changes the value of a specific annotation property by its name.
 This method has been initially introduced for COM interop usage.
 To determine properties that may be used, refer to the Annotations Namespace for the .NET edition and examine the "Properties" of each class.
 All annotations classes share the properties in the Annotation class and add the properties of the individual class.
 </summary>
      <param name="AnnotationIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
      <param name="Name">The name of the annotation property. IE: FillColor.</param>
      <param name="Value">The new value to apply to the property.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Change to filling color of all annotations in a pdf to a semi transparent red color, then displaying it in a GdViewer object." lang="VB.NET">
 'The following code assumes that a GdViewer called GdViewer1 has been painted on the form.
 Dim oGdPicturePDF As New GdPicturePDF
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 Dim oAnnotationManager As New AnnotationManager
 oAnnotationManager.InitFromGdPicturePDF(oGdPicturePDF)
 oAnnotationManager.SelectPage(1)
 Dim annotationManager As New AnnotationManager = GdViewer1.GetAnnotationManager()
 For i As Integer = 0 To annotationManager.GetAnnotationCount() - 1
    annotationManager.SetAnnotationPropertyValue(i, "FillColor", annotationManager.ARGBI(100, 255, 255, 255))
 Next
 oAnnotationManager.Close()
 GdViewer1.DisplayFromGdPicturePDF(oGdPicturePDF)
 </code>
      </example>
      <seealso cref="M:GdPicture12.AnnotationManager.GetAnnotationPropertyValue(System.Int32,System.String)" />
    </member>
    <member name="M:GdPicture12.AnnotationManager.GetAnnotationPropertyValue(System.Int32,System.String)">
      <summary>
 Get the value of a specific annotation property by its name.
 This method has been initially introduced for COM interop usage.
 To determine properties that may be used, refer to the Annotations Namespace for the .NET edition and examine the "Properties" of each class.
 All annotations classes share the properties in the Annotation class and add the properties of the individual class. .
 </summary>
      <param name="AnnotationIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
      <param name="Name">The name of the annotation property. IE: FillColor.</param>
      <returns>
 The  value of the specified property. An empty object is returned in case the method failed.
 </returns>
      <example>
        <code description="Displays the annotation's type and color of all available annotations in a PDF document after displaying it in a GdViewer object." lang="VB.NET">
 'The following code assumes that a GdViewer called GdViewer1 has been painted on the form.
 Dim oGdPicturePDF As New GdPicturePDF
 oGdPicturePDF.LoadFromFile("test.pdf", False)
 GdViewer1.DisplayFromGdPicturePDF(oGdPicturePDF)
 Dim oAnnotationManager As New AnnotationManager
 oAnnotationManager.InitFromGdPicturePDF(oGdPicturePDF)
 oAnnotationManager.SelectPage(1)
 For i As Integer = 0 To oAnnotationManager.GetAnnotationCount() - 1
    Dim name As String = oAnnotationManager.GetAnnotationPropertyValue(i, "Name")
    MessageBox.Show("Name: " + name)
    Dim fillColor As Color = oAnnotationManager.GetAnnotationPropertyValue(i, "FillColor")
    MessageBox.Show("Fill Color: " + fillColor.Name.ToString())
 Next
 oAnnotationManager.Close()
 </code>
      </example>
      <seealso cref="M:GdPicture12.AnnotationManager.SetAnnotationPropertyValue(System.Int32,System.String,System.Object)" />
    </member>
    <member name="M:GdPicture12.AnnotationManager.GetAnnotationType(System.Int32)">
      <summary>
 Returns the type of an annotation.
 </summary>
      <param name="AnnotationIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
      <returns>
 A member of the GdPictureAnnotationType enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.GetAnnotationFlipState(System.Int32,System.Boolean@,System.Boolean@)">
      <summary>
 Returns the horizontal and vertical flip state of a specific annotation.
 </summary>
      <param name="AnnotationIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
      <param name="FlipX">Output parameter. Specifies if the annotation has been flipped horizontally.</param>
      <param name="FlipY">Output parameter. Specifies if the annotation has been flipped vertically.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.SetAnnotationFlipState(System.Int32,System.Boolean,System.Boolean)">
      <summary>
 Sets the horizontal and vertical flip state of a specific annotation.
 </summary>
      <param name="AnnotationIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
      <param name="FlipX"> Specifies if the annotation must be flipped horizontally.</param>
      <param name="FlipY"> Specifies if the annotation must be flipped vertically.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.DeleteAnnotation(System.Int32)">
      <summary>
 Removes a GdPicture/XMP annotation on the current page of the native document.
 </summary>
      <param name="AnnotationIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Remove all available annotations" lang="VB.NET">
 For i As Integer = 1 To oAnnotationManager.GetAnnotationCount()
    oAnnotationManager.DeleteAnnotation(0)
 Next
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddAnnotationFromXML(System.String)">
      <summary>
 Adds a new annotation from a XML definition.
 </summary>
      <param name="XML">String containing the annotation definition in XML format.</param>
      <returns>An Annotation object. The new added annotation.</returns>
      <seealso cref="M:GdPicture12.AnnotationManager.GetAnnotationXML(System.Int32)" />
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddCustomAnnot(System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Adds a new custom annotation on the current page of the native document.
 </summary>
      <param name="ModelID">A private identifier defining the model of the annotation to add. This identifier should be subsequently used in the OnCustomAnnotationPaint event to render the desired custom annotation appearance.</param>
      <param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
      <param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
      <param name="Width">The width of the annotation, in inches.</param>
      <param name="Height">The height of the annotation, in inches.</param>
      <returns>An AnnotationCustom object. The new added annotation.</returns>
      <remarks>
        <para>
 This method is not supported by the COM Interop edition.
 </para>
        <para>
 This method is used in the "Annotations" Demo. Please check appendix "Finding Demo Applications" for more information.
 </para>
      </remarks>
      <seealso cref="E:GdPicture12.AnnotationManager.OnCustomAnnotationPaint" />
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddRectangleAnnot(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Adds a new rectangle annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="BackColor">The color to be used for filling the annotation. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
      <param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
      <param name="Width">The width of the annotation, in inches.</param>
      <param name="Height">The height of the annotation, in inches.</param>
      <returns>An AnnotationRectangle object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddRectangleAnnot(System.Drawing.Color,System.Drawing.Color,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Adds a new rectangle annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation.</param>
      <param name="BackColor">The color to be used for filling the annotation.</param>
      <param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
      <param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
      <param name="Width">The width of the annotation, in inches.</param>
      <param name="Height">The height of the annotation, in inches.</param>
      <returns>An AnnotationRectangle object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddRectangleHighlighterAnnot(System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Adds a new rectangle highlighter annotation on the current page of the native document.
 </summary>
      <param name="BackColor">The color to be used for filling the annotation. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
      <param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
      <param name="Width">The width of the annotation, in inches.</param>
      <param name="Height">The height of the annotation, in inches.</param>
      <returns>An AnnotationRectangleHighlighter object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddRectangleHighlighterAnnot(System.Drawing.Color,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Adds a new rectangle highlighter annotation on the current page of the native document.
 </summary>
      <param name="BackColor">The color to be used for filling the annotation.</param>
      <param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
      <param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
      <param name="Width">The width of the annotation, in inches.</param>
      <param name="Height">The height of the annotation, in inches.</param>
      <returns>An AnnotationRectangleHighlighter object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddEllipseAnnot(System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Adds a new ellipse annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
      <param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
      <param name="Width">The width of the annotation, in inches.</param>
      <param name="Height">The height of the annotation, in inches.</param>
      <returns>An AnnotationEllipse object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddEllipseAnnot(System.Drawing.Color,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Adds a new ellipse annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation.</param>
      <param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
      <param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
      <param name="Width">The width of the annotation, in inches.</param>
      <param name="Height">The height of the annotation, in inches.</param>
      <returns>An AnnotationEllipse object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddLineAnnot(System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Adds a new line annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="SrcLeft">The left position, in inches, of the starting point of the annotation.</param>
      <param name="SrcTop">The top position, in inches, of the starting point of the annotation.</param>
      <param name="DstLeft">The left position, in inches, of the ending point of the annotation.</param>
      <param name="DstTop">The top position, in inches, of the ending point of the annotation.</param>
      <returns>An AnnotationLine object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddLineAnnot(System.Drawing.Color,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Adds a new line annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation.</param>
      <param name="SrcLeft">The left position, in inches, of the starting point of the annotation.</param>
      <param name="SrcTop">The top position, in inches, of the starting point of the annotation.</param>
      <param name="DstLeft">The left position, in inches, of the ending point of the annotation.</param>
      <param name="DstTop">The top position, in inches, of the ending point of the annotation.</param>
      <returns>An AnnotationLine object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddRulerAnnot(System.Int32,System.Single,System.Single,System.Single,System.Single,GdPicture12.Annotations.Annotation.UnitMode)">
      <summary>
 Adds a new ruler annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="SrcLeft">The left position, in inches, of the starting point of the annotation.</param>
      <param name="SrcTop">The top position, in inches, of the starting point of the annotation.</param>
      <param name="DstLeft">The left position, in inches, of the ending point of the annotation.</param>
      <param name="DstTop">The top position, in inches, of the ending point of the annotation.</param>
      <param name="MeasurementUnit">The measurement unit of the ruler.</param>
      <returns>An AnnotationRuler object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddRulerAnnot(System.Drawing.Color,System.Single,System.Single,System.Single,System.Single,GdPicture12.Annotations.Annotation.UnitMode)">
      <summary>
 Adds a new ruler annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation.</param>
      <param name="SrcLeft">The left position, in inches, of the starting point of the annotation.</param>
      <param name="SrcTop">The top position, in inches, of the starting point of the annotation.</param>
      <param name="DstLeft">The left position, in inches, of the ending point of the annotation.</param>
      <param name="DstTop">The top position, in inches, of the ending point of the annotation.</param>
      <param name="MeasurementUnit">The measurement unit of the ruler.</param>
      <returns>An AnnotationRuler object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddPolyRulerAnnot(System.Int32,System.Drawing.PointF[],GdPicture12.Annotations.Annotation.UnitMode)">
      <summary>
 Adds a new poly ruler annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="Points">An array of line segments points, in inches.</param>
      <param name="MeasurementUnit">The measurement unit of the ruler.</param>
      <returns>An AnnotationPolyRuler object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddPolyRulerAnnot(System.Drawing.Color,System.Drawing.PointF[],GdPicture12.Annotations.Annotation.UnitMode)">
      <summary>
 Adds a new poly ruler annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation.</param>
      <param name="Points">An array of line segments points, in inches.</param>
      <param name="MeasurementUnit">The measurement unit of the ruler.</param>
      <returns>An AnnotationPolyRuler object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddLineArrowAnnot(System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Adds a new line arrow annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="SrcLeft">The left position, in inches, of the starting point of the annotation.</param>
      <param name="SrcTop">The top position, in inches, of the starting point of the annotation.</param>
      <param name="DstLeft">The left position, in inches, of the ending point of the annotation.</param>
      <param name="DstTop">The top position, in inches, of the ending point of the annotation.</param>
      <returns>An AnnotationLineArrow object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddLineArrowAnnot(System.Drawing.Color,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Adds a new line arrow annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation.</param>
      <param name="SrcLeft">The left position, in inches, of the starting point of the annotation.</param>
      <param name="SrcTop">The top position, in inches, of the starting point of the annotation.</param>
      <param name="DstLeft">The left position, in inches, of the ending point of the annotation.</param>
      <param name="DstTop">The top position, in inches, of the ending point of the annotation.</param>
      <returns>An AnnotationLineArrow object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddFreeHandAnnot(System.Int32,System.Drawing.PointF[])">
      <summary>
 Adds a new free hand annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="Points">An array of the annotation points, in inches.</param>
      <returns>An AnnotationFreeHand object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddFreeHandAnnot(System.Drawing.Color,System.Drawing.PointF[])">
      <summary>
 Adds a new free hand annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation.</param>
      <param name="Points">An array of the annotation points, in inches.</param>
      <returns>An AnnotationFreeHand object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddFreeHandHighlighterAnnot(System.Int32,System.Drawing.PointF[])">
      <summary>
 Adds a new free hand highlighter annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="Points">An array of polygon points, in inches.</param>
      <returns>An AnnotationFreeHandHighlighter object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddFreeHandHighlighterAnnot(System.Drawing.Color,System.Drawing.PointF[])">
      <summary>
 Adds a new free hand highlighter annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation.</param>
      <param name="Points">An array of polygon points, in inches.</param>
      <returns>An AnnotationFreeHandHighlighter object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddPolygonAnnot(System.Int32,System.Int32,System.Drawing.PointF[])">
      <summary>
 Adds a new polygon annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="BackColor">The color to be used for filling the annotation.</param>
      <param name="Points">An array of polygon points, in inches.</param>
      <returns>An AnnotationPolygon object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddPolygonAnnot(System.Drawing.Color,System.Drawing.Color,System.Drawing.PointF[])">
      <summary>
 Adds a new polygon annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation.</param>
      <param name="BackColor">The color to be used for filling the annotation.</param>
      <param name="Points">An array of polygon points, in inches.</param>
      <returns>An AnnotationPolygon object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddFreeHandPolygonAnnot(System.Int32,System.Int32,System.Drawing.PointF[])">
      <summary>
 Adds a new free-hand polygon annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="BackColor">The color to be used for filling the annotation.</param>
      <param name="Points">An array of polygon points, in inches.</param>
      <returns>An AnnotationPolygon object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddFreeHandPolygonAnnot(System.Drawing.Color,System.Drawing.Color,System.Drawing.PointF[])">
      <summary>
 Adds a new free-hand polygon annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation.</param>
      <param name="BackColor">The color to be used for filling the annotation.</param>
      <param name="Points">An array of polygon points, in inches.</param>
      <returns>An AnnotationPolygon object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddConnectedLinesAnnot(System.Int32,System.Drawing.PointF[])">
      <summary>
 Adds a new connected lines annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="Points">An array of line segments points, in inches.</param>
      <returns>An AnnotationConnectedLines object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddConnectedLinesAnnot(System.Drawing.Color,System.Drawing.PointF[])">
      <summary>
 Adds a new connected lines annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation.</param>
      <param name="Points">An array of line segments points, in inches.</param>
      <returns>An AnnotationConnectedLines object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddRubberStampAnnot(System.Int32,System.Single,System.Single,System.Single,System.Single,System.String)">
      <summary>
 Adds a new rubber stamp annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation. A suitable color value can be obtained by using the ARGBI() method.</param>
      <param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
      <param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
      <param name="Width">The width of the annotation, in inches.</param>
      <param name="Height">The height of the annotation, in inches.</param>
      <param name="Text">The text of the annotation.</param>
      <returns>An AnnotationRubberStamp object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddRubberStampAnnot(System.Drawing.Color,System.Single,System.Single,System.Single,System.Single,System.String)">
      <summary>
 Adds a new rubber stamp annotation on the current page of the native document.
 </summary>
      <param name="BorderColor">The color to be used for line painting of the annotation.</param>
      <param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
      <param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
      <param name="Width">The width of the annotation, in inches.</param>
      <param name="Height">The height of the annotation, in inches.</param>
      <param name="Text">The text of the annotation.</param>
      <returns>An AnnotationRubberStamp object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddLinkAnnot(System.Single,System.Single,System.Single,System.Single,System.String,System.String)">
      <summary>
 Adds a new link annotation on the current page of the native document.
 </summary>
      <param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
      <param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
      <param name="Width">The width of the annotation, in inches.</param>
      <param name="Height">The height of the annotation, in inches.</param>
      <param name="Text">The text of the annotation.</param>
      <param name="Link">The destination of the link.</param>
      <returns>An AnnotationLink object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddTextAnnot(System.Single,System.Single,System.Single,System.Single,System.String)">
      <summary>
 Adds a new text annotation on the current page of the native document.
 </summary>
      <param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
      <param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
      <param name="Width">The width of the annotation, in inches.</param>
      <param name="Height">The height of the annotation, in inches.</param>
      <param name="Text">The text of the annotation.</param>
      <returns>An AnnotationText object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddStickyNoteAnnot(System.Single,System.Single,System.Single,System.Single,System.String)">
      <summary>
 Adds a new sticky note annotation on the current page of the native document.
 </summary>
      <param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
      <param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
      <param name="Width">The width of the annotation, in inches.</param>
      <param name="Height">The height of the annotation, in inches.</param>
      <param name="Text">The text of the annotation.</param>
      <returns>An AnnotationStickyNote object. The new added annotation.</returns>
      <example>
        <code description="Creating a new GdPicture bitmap, adding a sticky-note annot on it and display the image on a GdViewer object." lang="VB.NET">
 Using Imaging As New GdPictureImaging
    Dim ImageID As Integer = Imaging.CreateNewGdPictureImage(1000, 1600, 32, Color.White)
    Using annotsMgr As New AnnotationManager
       annotsMgr.InitFromGdPictureImage(ImageID)
       Dim annot As AnnotationStickyNote = annotsMgr.AddStickyNoteAnnot(1, 1, 3, 4, "Hello World")
       annot.FontSize = 20
       annot.Opacity = 0.7
       annot.Rotation = 20
       annotsMgr.SaveAnnotationsToPage()
    End Using
    GdViewer1.DisplayFromGdPictureImage(ImageID)
 End Using
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddEmbeddedImageAnnot(System.Drawing.Bitmap,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Adds a new embedded image annotation on the current page of the native document, from a Bitmap object.
 </summary>
      <param name="Image">A Bitmap object. The image of the annotation.</param>
      <param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
      <param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
      <param name="Width">The width of the annotation, in inches.</param>
      <param name="Height">The height of the annotation, in inches.</param>
      <returns>An AnnotationEmbeddedImage object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddEmbeddedImageAnnotFromBase64(System.String,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Adds a new embedded image annotation on the current page of the native document, from a bitma file stored in base64 string.
 </summary>
      <param name="Base64Image">A base64 encoded string containing the image data</param>
      <param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
      <param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
      <param name="Width">The width of the annotation, in inches.</param>
      <param name="Height">The height of the annotation, in inches.</param>
      <returns>An AnnotationEmbeddedImage object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddEmbeddedImageAnnot(System.String,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Adds a new embedded image annotation on the current page of the native document, from a file.
 </summary>
      <param name="ImagePath">The path of the image to render. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
      <param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
      <param name="Width">The width of the annotation, in inches.</param>
      <param name="Height">The height of the annotation, in inches.</param>
      <returns>An AnnotationEmbeddedImage object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.AddEmbeddedImageAnnot(System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Adds a new embedded image annotation on the current page of the native document, from a GdPicture Image.
 </summary>
      <param name="ImageID">A GdPicture Image identifier. The image to render.</param>
      <param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
      <param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
      <param name="Width">The width of the annotation, in inches.</param>
      <param name="Height">The height of the annotation, in inches.</param>
      <returns>An AnnotationEmbeddedImage object. The new added annotation.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.SaveDocumentToPDF(System.String)">
      <summary>
 Saves the native document in PDF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
      <param name="FilePath">The path of the PDF to create.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.SaveDocumentToPDF(System.IO.Stream)">
      <summary>
 Saves the native document to a stream in PDF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
      <param name="Stream">The stream to save the document.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.SaveDocumentToTIFF(System.String,GdPicture12.TiffCompression)">
      <summary>
 Saves the native document in TIFF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
      <param name="FilePath">The path of the TIFF to create.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.SaveDocumentToTIFF(System.IO.Stream,GdPicture12.TiffCompression)">
      <summary>
 Saves the native document to a Stream, in TIFF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
      <param name="Stream">The stream to save the TIFF image.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.SaveDocumentToJPEG(System.String,System.Int32)">
      <summary>
 Saves the native document in JPEG format with GdPicture/XMP annotation support.
 </summary>
      <param name="FilePath">The path of JPEG to create.</param>
      <param name="Quality">Compression level [0 to 100]. 0: worse quality and better compression, 100: best quality and worse compression. usually 75.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.SaveDocumentToJPEG(System.IO.Stream,System.Int32)">
      <summary>
 Saves the native document in JPEG format with GdPicture/XMP annotation support.
 </summary>
      <param name="Stream">The stream to save the JPEG image.</param>
      <param name="Quality">Compression level [0 to 100]. 0: worse quality and better compression, 100: best quality and worse compression. Usually 75.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.SaveAnnotationsToXMP(System.String)">
      <summary>
 Saves the GdPicture/XMP annotation part of the current page of the native document to a XML file.
 </summary>
      <param name="FilePath">The path of XML file to create.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.SaveAnnotationsToXMP(System.IO.Stream)">
      <summary>
 Saves the GdPicture/XMP annotation part of the current page of the native document to a stream.
 </summary>
      <param name="Stream">The stream to save the annotations.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Save annotations to stream and load them back." lang="VB.NET">
 'Part 1: Open image, add annot and save annotation to Stream object
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("001.tif")
 Dim oAnnotationManager As New AnnotationManager
 Dim annotStream As New IO.MemoryStream()
 oAnnotationManager.InitFromGdPictureImage(ImageID)
 Dim annot As AnnotationStickyNote = oAnnotationManager.AddStickyNoteAnnot(0, 0, 3, 3, "To Be Investigated")
 annot.CanSelect = False
 annot.Author = "John"
 oAnnotationManager.SaveAnnotationsToXMP(annotStream)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 'Part 2 open a new image and load the previously saved annotation from the Stream object
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("002.tif")
 oAnnotationManager.InitFromGdPictureImage(ImageID)
 oAnnotationManager.LoadAnnotationsFromXMP(annotStream)
 GdViewer1.DisplayFromGdPictureImage(ImageID) 'Display the image including annotation into a GdViewer object
 annotStream.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.AnnotationManager.GetAnnotationXML(System.Int32)">
      <summary>
 Saves a specific GdPicture/XMP annotation as XML format.
 </summary>
      <param name="AnnotationIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
      <returns>
 A string containing the annotation definition in XML format.
 </returns>
      <seealso cref="M:GdPicture12.AnnotationManager.AddAnnotationFromXML(System.String)" />
    </member>
    <member name="M:GdPicture12.AnnotationManager.SaveAnnotationsToXMPBase64">
      <summary>
 Saves the GdPicture/XMP annotation part of the current page of the native document to a Base64 encoded string.
 </summary>
      <returns>
 A Base64 encoded string containing the annotations data of the page.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.SaveAnnotationsToXMPBase64Ex">
      <summary>
 Saves the GdPicture/XMP annotation part of all pages of the native document to a Base64 encoded string.
 </summary>
      <returns>
 A Base64 encoded string containing the annotations data of the all the pages.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.SaveAnnotationsToXMPEx(System.String)">
      <summary>
 Saves the GdPicture/XMP annotation part of all pages of the native document to a XML file.
 </summary>
      <param name="FilePath">The path of XML file to create.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.SaveAnnotationsToXMPEx(System.IO.Stream)">
      <summary>
 Saves the GdPicture/XMP annotation part of all pages of the native document to a stream.
 </summary>
      <param name="Stream">The stream to save the annotations.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Save annotations to stream and load them back." lang="VB.NET">
 'Part 1: Open image, add annot and save annotation to Stream object
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
 Dim oAnnotationManager As New AnnotationManager
 Dim annotStream As New IO.MemoryStream()
 oAnnotationManager.InitFromGdPictureImage(ImageID)
 Dim annot As AnnotationStickyNote = oAnnotationManager.AddStickyNoteAnnot(0, 0, 3, 3, "To Be Investigated")
 annot.CanSelect = False
 annot.Author = "John"
 oAnnotationManager.SaveAnnotationsToXMP(annotStream)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 'Part 2 open a new image and load the previously saved annotation from the Stream object
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("002.tif")
 oAnnotationManager.InitFromGdPictureImage(ImageID)
 oAnnotationManager.LoadAnnotationsFromXMP(annotStream)
 GdViewer1.DisplayFromGdPictureImage(ImageID) 'Display the image including annotation into a GdViewer object
 annotStream.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.AnnotationManager.LoadAnnotationsFromXMPBase64(System.String)">
      <summary>
 Loads and applies to the native document GdPicture/XMP annotation from a base64 encoded string previously generated by the SaveAnnotationsToXMPBase64 or SaveAnnotationsToXMPBase64Ex methods.
 </summary>
      <param name="Content">A Base64 encoded string of the annotations data.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.LoadAnnotationsFromXMP(System.String)">
      <summary>
 Loads and applies to the native document GdPicture/XMP annotation from a XML file previously generated by the SaveAnnotationsToXMP or SaveAnnotationsToXMPEx methods.
 </summary>
      <param name="FilePath">The path of XML file to load.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.LoadAnnotationsFromXMP(System.IO.Stream)">
      <summary>
 Loads and applies to the native document GdPicture/XMP annotation from a stream containing data previously generated by the SaveAnnotationsToXMP or SaveAnnotationsToXMPEx methods.
 </summary>
      <param name="Stream">The Stream object containing the annotations data.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Save annotations to stream and load them back." lang="VB.NET">
 'Part 1: Open image, add annot and save annotation to Stream object
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("001.tif")
 Dim oAnnotationManager As New AnnotationManager
 Dim annotStream As New IO.MemoryStream()
 oAnnotationManager.InitFromGdPictureImage(ImageID)
 Dim annot As AnnotationStickyNote = oAnnotationManager.AddStickyNoteAnnot(0, 0, 3, 3, "To Be Investigated")
 annot.CanSelect = False
 annot.Author = "John"
 oAnnotationManager.SaveAnnotationsToXMP(annotStream)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 'Part 2 open a new image and load the previously saved annotation from the Stream object
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("002.tif")
 oAnnotationManager.InitFromGdPictureImage(ImageID)
 oAnnotationManager.LoadAnnotationsFromXMP(annotStream)
 GdViewer1.DisplayFromGdPictureImage(ImageID) 'Display the image including annotation into a GdViewer object
 annotStream.Dispose()
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.AnnotationManager.ValidateAnnotations(System.IO.Stream)">
      <summary>
 Validates GdPicture/XMP annotation from a stream containing data previously generated by the SaveAnnotationsToXMP or SaveAnnotationsToXMPEx methods.
 </summary>
      <param name="Stream">The Stream object containing the annotations data.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.RotateAnnotations(System.Int32)">
      <summary>
 Rotates all annotations (use the page coordinate system) by a specific angle.
 </summary>
      <param name="Angle">The angle of rotation. Supported values are 90, 180 and 270.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.BurnAnnotationsToPage(System.Boolean)">
      <summary>
 Burns (or flatten) the GdPicture/XMP annotation of the current page of the native document.
 To burn custom annotations you need to use the overload taking a VectorMode parameter set to False.
 </summary>
      <param name="RemoveInitialAnnots">True to remove annotation blob content from the file, else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.BurnAnnotationsToPage(System.Boolean,GdPicture12.GdPictureOutputIntent)">
      <summary>
 Burns (or flatten) the GdPicture/XMP annotation of the current page of the native document.
 This overload doesn't support custom annotation burning.
 </summary>
      <param name="RemoveInitialAnnots">True to remove annotation blob content from the file, else False.</param>
      <param name="Intent">A member of the GdPictureOutputIntent enumeration. Defines the intent of the produced page. Default value is IntentColor. Other intents produce smaller page size.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.BurnAnnotationsToPage(System.Boolean,System.Boolean)">
      <summary>
 Burns (or flatten) the GdPicture/XMP annotation of the current page of the native document.
 </summary>
      <param name="RemoveInitialAnnots">True to remove annotation blob content from the file, else False.</param>
      <param name="VectorMode">Determines if annotations data must be renderd in vector format. This parameter is only suitable for PDF annotations burning. Custom annotations can be burned only when VectorMode is set to False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.GetStat">
      <summary>
 Returns the last status of the AnnotationManager object.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.AnnotationManager.SaveAnnotationsToPage">
      <summary>
 Forces the object to save the annotations to the current page. This method is automatically called internally on page change.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="P:GdPicture12.AnnotationManager.PageCount">
      <summary>
 Number of pages in the handled document.
 </summary>
    </member>
    <member name="E:GdPicture12.AnnotationManager.SavingProgress">
      <summary>
 Occurs when a document is being saved.
 </summary>
      <param name="PageNo">The number of the page (1-based) that is currently in creation.</param>
      <param name="PageCount">The total number of pages to be saved.</param>
    </member>
    <member name="E:GdPicture12.AnnotationManager.OnCustomAnnotationPaint">
      <summary>
 Occurs when a custom annotation must be rendered.
 </summary>
      <param name="Annot">The custom annotation object to render.</param>
      <param name="g">The graphics object to render the custom annotation appearance.</param>
      <remarks>
        <para>
 This event is not supported by the COM Interop edition.
 </para>
        <para>
 This event is used in the "Annotations" Demo. Please check appendix "Finding Demo Applications" for more information.
 </para>
        <para>
 The measurement unit, for dimensions and sizes, is expressed in inches.
 </para>
        <para>
 The rotation, if any, is handled by the component which automatically set to required transformation.
 </para>
        <para>
 You have to render the annotation's appearance in the bounding box defined by [x, y, w, h], where x and y define the coordinates of the top-left corner of the box  equal to (Annot.Left - Annot.Width / 2, Annot.Top - Annot.Height / 2), w defines the width equal to Annot.Width and y the height equal to Annot.Height.
 </para>
      </remarks>
      <example>
        <code description="Rendering custom annotations." lang="VB.NET">
 Private Sub oAnnotationManager_OnCustomAnnotationPaint(ByVal Annot As AnnotationCustom, ByVal g As System.Drawing.Graphics) Handles oAnnotationManager.OnCustomAnnotationPaint
 Select Case Annot.ModelID
 Case 1 'triangle annotation, previously defined by the AddCustomAnnot() method.
 Using gp As New Drawing.Drawing2D.GraphicsPath
    gp.AddLine(New PointF(Annot.Left - Annot.Width / 2, Annot.Top + Annot.Height / 2), New PointF(Annot.Left, Annot.Top - Annot.Height / 2))
    gp.AddLine(New PointF(Annot.Left, Annot.Top - Annot.Height / 2), New PointF(Annot.Left + Annot.Width / 2, Annot.Top + Annot.Height / 2))
    gp.CloseFigure()
    g.DrawPath(New Pen(Brushes.Red, 0.1), gp)
 End Using
 Case 2 'cross annotation, previously defined by the AddCustomAnnot() method.
 g.DrawLine(New Pen(Brushes.Red, 0.1), New PointF(Annot.Left - Annot.Width / 2, Annot.Top - Annot.Height / 2), New PointF(Annot.Left + Annot.Width / 2, Annot.Top + Annot.Height / 2))
 g.DrawLine(New Pen(Brushes.Red, 0.1), New PointF(Annot.Left - Annot.Width / 2, Annot.Top + Annot.Height / 2), New PointF(Annot.Left + Annot.Width / 2, Annot.Top - Annot.Height / 2))
 End Select
 End Sub
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.LicenseManager.RegisterKEY(System.String)">
      <summary>
 Unlocks the toolkit with a commercial key or a demo key. You can subsequently use this method to
 register any Plugin or Toolkit core keys. To register a license upgrade, you have to call first this
 method passing the previous ordered key, then call it again with the upgrade key.
 </summary>
      <param name="Key">The license key.</param>
      <returns>
 True if Success, else False (invalid license KEY).
 </returns>
      <example>
        <code description="Example of how to use RegisterKEY to unlock a plugin and to unlock the toolkit core with an upgrade key." lang="VB.NET">
 Dim LicMgr As New LicenseManager
 LicMgr.RegisterKEY(MY_GDPICTURENET_KEY)
 LicMgr.RegisterKEY(MY_PLUGIN_KEY)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.LicenseManager.GetVersion">
      <summary>
 Returns the GdPicture source code version used in the following format M.mrr where 'M' describes the major version, 'm' the medium version and 'rr' the release number.
 </summary>
      <returns>
 The GdPicture core version.
 </returns>
    </member>
    <member name="M:GdPicture12.LicenseManager.GetRedistPath">
      <summary>
 Returns the Redist path of the GdPicture SDK. For demonstration purpose only. Do not use this method in custom project.
 </summary>
      <returns>The Redist path of the GdPicture SDK.</returns>
    </member>
    <member name="M:GdPicture12.LicenseManager.Internal(System.Int32,System.Object)">
      <summary>
 Do not use. Here for internal usage only.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.Dispose">
      <summary>
 This method disposes the GdViewer object, by closing and releasing all related resources.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.GetAnnotationCount">
      <summary>
 Returns the number of GdPicture/XMP annotations available on the current page of the displayed document.
 </summary>
      <returns>
 The number of available annotations.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <example>
        <code description="Displays creation data and author of all available annotations" lang="VB.NET">
 For i As Integer = 0 To GdViewer1.GetAnnotationCount() - 1
    Dim Annot As GdPicture.Annotation = GdViewer1.GetAnnotationFromIdx(i)
    MessageBox.show("Author: " + Annot.Author)
    MessageBox.show("Creation time: " + Annot.CreationTime.ToString)
 Next
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.GetAnnotationFromIdx(System.Int32)">
      <summary>
 Returns a GdPicture/XMP annotations available on the current page of the displayed document.
 </summary>
      <returns>
 An Annotation object.
 </returns>
      <param name="AnnotationIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <example>
        <code description="Displays creation data and author of all available annotations" lang="VB.NET">
 For i As Integer = 0 To GdViewer1.GetAnnotationCount() - 1
    Dim Annot As GdPicture.Annotation = GdViewer1.GetAnnotationFromIdx(i)
    MessageBox.show("Author: " + Annot.Author)
    MessageBox.show("Creation time: " + Annot.CreationTime.ToString)
 Next
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.DeleteAnnotation(System.Int32)">
      <summary>
 Removes a GdPicture/XMP annotation on the current page of the displayed document.
 </summary>
      <param name="AnnotationIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <example>
        <code description="Remove all available annotations" lang="VB.NET">
 For i As Integer = 1 To GdViewer1.GetAnnotationCount()
    GdViewer1.DeleteAnnotation(0)
 Next
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.GetSelectedAnnotationIdx">
      <summary>
 Returns the index of the selected GdPicture/XMP annotation.
 </summary>
      <returns>
 An Annotation object index. Must be a value between 0 and GetAnnotationCount() - 1 if an annotation is selected, else -1.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <example>
        <code description="Displays creation data and author of the selected annotation" lang="VB.NET">
 Dim AnnotationIdx as integer = GdViewer1.GetSelectedAnnotationIdx()
 If AnnotationIdx &gt;= 0 Then
    Dim Annot As GdPicture.Annotation = GdViewer1.GetAnnotationFromIdx(AnnotationIdx)
    MessageBox.show("Author: " + Annot.Author)
    MessageBox.show("Creation time: " + Annot.CreationTime.ToString)
 Else
    Msgbox "There is no annotation selected"
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.SelectAnnotation(System.Int32)">
      <summary>
 Selects a GdPicture/XMP annotation.
 </summary>
      <param name="AnnotationIdx">An Annotation object index. Must be a value between 0 and GetAnnotationCount() - 1, or -1 to deselect all annotations.</param>
      <returns>A  member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Makes selected the first available annotation" lang="VB.NET">
 GdViewer1.SelectAnnotation(0)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.SetAnnotationEditorMode(System.Boolean)">
      <summary>
 Defines the "editor mode" for the GdPicture/XMP annotation support.
 </summary>
      <param name="EditorMode">True to let the user to edit available GdPicture/XMP annotations, else
 False (all annotations locked).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.IsAnnoationVisibleAt(System.Int32,System.Int32,System.Int32)">
      <summary>
 Indicates whether the specified point, in the control space, is contained within a specific annotation bounding box.
 </summary>
      <param name="AnnotationIdx">An Annotation object index. Must be a value between 0 and GetAnnotationCount() - 1.</param>
      <param name="X">Specifies the x-coordinate of the point, in the control space.</param>
      <param name="Y">Specifies the y-coordinate of the point, in the control space.</param>
      <returns>True is the point if contained within the annotation, False otherwise.</returns>
    </member>
    <member name="M:GdPicture12.GdViewer.CancelLastAnnotInteractiveAdd">
      <summary>
 Asks to the control to ignore the latest request of interactive annotation creation.
 </summary>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.SaveAnnotationsToPage">
      <summary>
 Forces the viewer to save the annotations to the current page. This method is automatically called internally on page change.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.RotateAnnotations(System.Int32)">
      <summary>
 Rotates all annotations (use the page coordinate system) by a specific angle. A call to the Redraw method is needed to refresh the screen.
 </summary>
      <param name="Angle">The angle of rotation. Supported values are 90, 180 and 270.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.ReloadAnnotations">
      <summary>
 Forces the viewer to reload the annotations of the current page.
 Use this method only if the displayed image has been edited by another object. A call to the Redraw method is needed to refresh the screen.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.AddCustomAnnotInteractive(System.Int32)">
      <summary>
 Allows the user to add a new custom annotation using the mouse.
 </summary>
      <param name="ModelID">A private identifier defining the model of the annotation to add. This identifier should be subsequently used in the OnCustomAnnotationPaint event to render the desired custom annotation appearance.</param>
      <remarks>
        <para>
 This method is not supported by the COM Interop edition.
 </para>
        <para>
 This method is used in the "Annotations" Demo. Please check appendix "Finding Demo Applications" for more information.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
      <seealso cref="E:GdPicture12.GdViewer.OnCustomAnnotationPaint" />
    </member>
    <member name="M:GdPicture12.GdViewer.AddRulerAnnotInteractive(System.Drawing.Color,System.Single,System.Single,GdPicture12.Annotations.Annotation.UnitMode)">
      <summary>
 Allows the user to add a new ruler annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <param name="MeasurementUnit">The measurement unit of the ruler.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddPolyRulerAnnotInteractive(System.Drawing.Color,System.Single,System.Single,GdPicture12.Annotations.Annotation.UnitMode)">
      <summary>
 Allows the user to add a new poly ruler annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the lines. Use ARGB method to get a valid value.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <param name="MeasurementUnit">The measurement unit of the ruler.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddLineArrowAnnotInteractive(System.Drawing.Color,System.Single,System.Single,System.Single,System.Boolean,System.Single)">
      <summary>
 Allows the user to add a new line arrow annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="ArrowWidth">The arrow width, in inches.</param>
      <param name="ArrowHeight">The arrow height, in inches.</param>
      <param name="ArrowFilled">True if the arrow must be filled, else false (stroked only).</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0
 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddLineArrowAnnotInteractive(System.Drawing.Color,System.Single,System.Single,System.Single,System.Boolean,System.Single,System.Boolean)">
      <summary>
 Allows the user to add a new line arrow annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="ArrowWidth">The arrow width, in inches.</param>
      <param name="ArrowHeight">The arrow height, in inches.</param>
      <param name="ArrowFilled">True if the arrow must be filled, else false (stroked only).</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0
 (full transparency) and 1 (full opacity).</param>
      <param name="Reversed">Specifies if the starting and ending points of the annotation are inverted during the user drawing. This produces the effect to render the arrow at the first mouse down position. False by default.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddPolygonAnnotInteractive(System.Drawing.Color,System.Single,System.Drawing.Color,System.Single)">
      <summary>
 Allows the user to add a new polygon annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="BackColor">The background color.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddFreeHandPolygonAnnotInteractive(System.Drawing.Color,System.Single,System.Drawing.Color,System.Single)">
      <summary>
 Allows the user to add a new free-hand polygon annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="BackColor">The background color.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddConnectedLinesAnnotInteractive(System.Drawing.Color,System.Single,System.Single)">
      <summary>
 Allows the user to add a new connected lines annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddRectangleAnnotInteractive(System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Single,System.Single)">
      <summary>
 Allows the user to add a new rectangle annotation using the mouse.
 </summary>
      <param name="Fill">Specifies if the rectangle must be filled.</param>
      <param name="Stroke">Specifies if the rectangle must be stroked.</param>
      <param name="BackColor">The background color to use if the rectangle must be filled.</param>
      <param name="BorderColor">The border color to use if the rectangle must be stroked.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddRectangleHighlighterAnnotInteractive(System.Drawing.Color)">
      <summary>
 Allows the user to add a new Highlighter rectangle annotation using the mouse.
 </summary>
      <param name="BackColor">The background color to use.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddTextAnnotationInteractive(System.String,System.Drawing.Color,System.String,System.Drawing.FontStyle,System.Single,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Single,System.Single)">
      <summary>
 Allows the user to add a new text annotation using the mouse.
 </summary>
      <param name="Text">The text to render.</param>
      <param name="ForeColor">The color of the font.</param>
      <param name="FontName">The name of the font, IE: Arial.</param>
      <param name="FontStyle">The style of the font.</param>
      <param name="FontSize">The size of the font, in points.</param>
      <param name="Fill">Specifies if the annotation must be filled or not.</param>
      <param name="BorderColor">The color of the border.</param>
      <param name="BackColor">The background color.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <param name="Rotation">The rotation of the annotation, in degrees.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddLinkAnnotationInteractive(System.String,System.String,System.Drawing.Color,System.Drawing.Color,System.String,System.Drawing.FontStyle,System.Drawing.FontStyle,System.Single,System.Single)">
      <summary>
 Allows the user to add a new link annotation using the mouse.
 </summary>
      <param name="Text">The text to render.</param>
      <param name="Link">The destination of the annotation. IE: http://www.gdpicture.com.</param>
      <param name="ForeColor">The color of the font.</param>
      <param name="HoverForeColor">The color of the font when the mouse if over the annotation.</param>
      <param name="FontName">The name of the font, IE: Arial.</param>
      <param name="FontStyle">The style of the font.</param>
      <param name="HoverFontStyle">The style of the font when the mouse if over the annotation.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full
 transparency) and 1 (full opacity).</param>
      <param name="Rotation">The rotation of the annotation, in degrees.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddStickyNoteAnnotationInteractive(System.String,System.Drawing.Color,System.String,System.Drawing.FontStyle,System.Int32,System.Single,System.Single)">
      <summary>
 Allows the user to add a new sticky note annotation using the mouse.
 </summary>
      <param name="Text">The text to render.</param>
      <param name="ForeColor">The color of the font.</param>
      <param name="FontName">The name of the font, IE: Arial.</param>
      <param name="FontStyle">The style of the font.</param>
      <param name="FontSize">The size of the font, in points.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <param name="Rotation">The rotation of the annotation, in degrees.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddRubberStampAnnotInteractive(System.String,System.Drawing.Color,System.String,System.Drawing.FontStyle,System.Drawing.Color,System.Single,System.Single,System.Single)">
      <summary>
 Allows the user to add a new rubber stamp annotation using the mouse.
 </summary>
      <param name="Text">The text to render.</param>
      <param name="ForeColor">The color of the font.</param>
      <param name="FontName">The name of the font, IE: Arial.</param>
      <param name="FontStyle">The style of the font.</param>
      <param name="BorderColor">The border color.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <param name="Rotation">The rotation of the annotation, in degrees.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddEllipseAnnotInteractive(System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Single,System.Single)">
      <summary>
 Allows the user to add a new ellipse annotation using the mouse.
 </summary>
      <param name="Fill">Specifies if the ellipse must be filled.</param>
      <param name="Stroke">Specifies if the ellipse must be stroked.</param>
      <param name="BackColor">The background color to use if the ellipse must be filled.</param>
      <param name="BorderColor">The border color to use if the ellipse must be stroked.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddEmbeddedImageAnnotInteractive(System.Int32,System.Boolean,System.Drawing.Color,System.Single,System.Single)">
      <summary>
 Allows the user to add a new embedded image annotation, from a GdPicture image, using the mouse.
 </summary>
      <param name="ImageID">A GdPicture Image identifier. The image to render.</param>
      <param name="Stroke">Specifies if the annotation must be stroked.</param>
      <param name="BorderColor">The border color to use if the annotation must be stroked.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddEmbeddedImageAnnotInteractive(System.String,System.Boolean,System.Drawing.Color,System.Single,System.Single)">
      <summary>
 Allows the user to add a new embedded image annotation, from a file, using the mouse.
 </summary>
      <param name="ImagePath">The path of the image to render. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Stroke">Specifies if the annotation must be stroked.</param>
      <param name="BorderColor">The border color to use if the annotation must be stroked.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.GetAnnotationManager">
      <summary>
 Gets the AnnotationManager object associated with the Viewer.
 </summary>
      <returns>An AnnotationManager object. It is important to do not dispose this object.</returns>
    </member>
    <member name="M:GdPicture12.GdViewer.AddLineAnnotInteractive(System.Int32,System.Single,System.Single)">
      <summary>
 Allows the user to add a new line annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border. Use ARGBI method to get a valid value.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddLineAnnotInteractive(System.Drawing.Color,System.Single,System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap,System.Single)">
      <summary>
 Allows the user to add a new line annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="StartCap">Defines the cap style used at the start of lines drawn.</param>
      <param name="EndCap">Defines the cap style used at the end of lines drawn.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddLineArrowAnnotInteractive(System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Single)">
      <summary>
 Allows the user to add a new line arrow annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border. Use ARGBI method to get a valid value.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="ArrowWidth">The arrow width, in inches.</param>
      <param name="ArrowHeight">The arrow height, in inches.</param>
      <param name="ArrowFilled">True if the arrow must be filled, else false (stroked only).</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0
 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddLineArrowAnnotInteractive(System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Single,System.Boolean)">
      <summary>
 Allows the user to add a new line arrow annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border. Use ARGBI method to get a valid value.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="ArrowWidth">The arrow width, in inches.</param>
      <param name="ArrowHeight">The arrow height, in inches.</param>
      <param name="ArrowFilled">True if the arrow must be filled, else false (stroked only).</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0
 (full transparency) and 1 (full opacity).</param>
      <param name="Reversed">Specifies if the starting and ending points of the annotation are inverted during the user drawing. This produces the effect to render the arrow at the first mouse down position. False by default.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddRulerAnnotInteractive(System.Int32,System.Single,System.Single,GdPicture12.Annotations.Annotation.UnitMode)">
      <summary>
 Allows the user to add a new ruler annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border. Use ARGBI method to get a valid value.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <param name="MeasurementUnit">The measurement unit of the ruler.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddPolyRulerAnnotInteractive(System.Int32,System.Single,System.Single,GdPicture12.Annotations.Annotation.UnitMode)">
      <summary>
 Allows the user to add a new poly ruler annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the lines. Use ARGBI method to get a valid value.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <param name="MeasurementUnit">The measurement unit of the ruler.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddFreeHandAnnotInteractive(System.Drawing.Color,System.Single,System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap,System.Single)">
      <summary>
 Allows the user to add a new free-hand annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="StartCap">Defines the cap style used at the start of lines drawn.</param>
      <param name="EndCap">Defines the cap style used at the end of lines drawn.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddFreeHandAnnotInteractive(System.Drawing.Color,System.Single,System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap,System.Single,System.Boolean)">
      <summary>
 Allows the user to add a new free-hand annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="StartCap">Defines the cap style used at the start of lines drawn.</param>
      <param name="EndCap">Defines the cap style used at the end of lines drawn.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <param name="ContinuousMode">When set to true multiple paths can be generated during the drawing operation. In such configuration the annotation will be ended on the first double-click operation.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddFreeHandHighlighterAnnotInteractive(System.Drawing.Color,System.Single)">
      <summary>
 Allows the user to add a new free-hand highlighter annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddFreeHandHighlighterAnnotInteractive(System.Drawing.Color,System.Single,System.Boolean)">
      <summary>
 Allows the user to add a new free-hand highlighter annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="ContinuousMode">When set to true multiple paths can be generated during the drawing operation. In such configuration the annotation will be ended on the first double-click operation.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddPolygonAnnotInteractive(System.Int32,System.Single,System.Int32,System.Single)">
      <summary>
 Allows the user to add a new polygon annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border. Use ARGBI method to get a valid value.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="BackColor">The background color. Use ARGBI method to get a valid value.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddFreeHandPolygonAnnotInteractive(System.Int32,System.Single,System.Int32,System.Single)">
      <summary>
 Allows the user to add a new free-hand polygon annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border. Use ARGBI method to get a valid value.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="BackColor">The background color. Use ARGBI method to get a valid value.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddConnectedLinesAnnotInteractive(System.Int32,System.Single,System.Single)">
      <summary>
 Allows the user to add a new connected lines annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border. Use ARGBI method to get a valid value.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddRectangleHighlighterAnnotInteractive(System.Int32)">
      <summary>
 Allows the user to add a new Highlighter rectangle annotation using the mouse.
 </summary>
      <param name="BackColor">The background color to use. Use ARGBI method to get a valid value.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddTextAnnotationInteractive(System.String,System.Int32,System.String,GdPicture12.FontStyle,System.Single,System.Boolean,System.Int32,System.Int32,System.Single,System.Single)">
      <summary>
 Allows the user to add a new text annotation using the mouse.
 </summary>
      <param name="Text">The text to render.</param>
      <param name="ForeColor">The color of the font. Use ARGBI method to get a valid value.</param>
      <param name="FontName">The name of the font, IE: Arial.</param>
      <param name="FontStyle">The style of the font.</param>
      <param name="FontSize">The size of the font, in points.</param>
      <param name="Fill">Specifies if the annotation must be filled or not.</param>
      <param name="BorderColor">The color of the border. Use ARGBI method to get a valid value.</param>
      <param name="BackColor">The background color.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <param name="Rotation">The rotation of the annotation, in degrees.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddLinkAnnotationInteractive(System.String,System.String,System.Int32,System.Int32,System.String,GdPicture12.FontStyle,GdPicture12.FontStyle,System.Single,System.Single)">
      <summary>
 Allows the user to add a new link annotation using the mouse.
 </summary>
      <param name="Text">The text to render.</param>
      <param name="Link">The destination of the annotation. IE: http://www.gdpicture.com.</param>
      <param name="ForeColor">The color of the font. Use ARGBI method to get a valid value.</param>
      <param name="HoverForeColor">The color of the font when the mouse if over the annotation. Use ARGBI method to get a valid value.</param>
      <param name="FontName">The name of the font, IE: Arial.</param>
      <param name="FontStyle">The style of the font.</param>
      <param name="HoverFontStyle">The style of the font when the mouse if over the annotation.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full
 transparency) and 1 (full opacity).</param>
      <param name="Rotation">The rotation of the annotation, in degrees.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddStickyNoteAnnotationInteractive(System.String,System.Int32,System.String,GdPicture12.FontStyle,System.Int32,System.Single,System.Single)">
      <summary>
 Allows the user to add a new sticky note annotation using the mouse.
 </summary>
      <param name="Text">The text to render.</param>
      <param name="ForeColor">The color of the font. Use ARGBI method to get a valid value.</param>
      <param name="FontName">The name of the font, IE: Arial.</param>
      <param name="FontStyle">The style of the font.</param>
      <param name="FontSize">The size of the font, in points.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <param name="Rotation">The rotation of the annotation, in degrees.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddRubberStampAnnotInteractive(System.String,System.Int32,System.String,GdPicture12.FontStyle,System.Int32,System.Single,System.Single,System.Single)">
      <summary>
 Allows the user to add a new rubber stamp annotation using the mouse.
 </summary>
      <param name="Text">The text to render.</param>
      <param name="ForeColor">The color of the font. Use ARGBI method to get a valid value.</param>
      <param name="FontName">The name of the font, IE: Arial.</param>
      <param name="FontStyle">The style of the font.</param>
      <param name="BorderColor">The border color. Use ARGBI method to get a valid value.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <param name="Rotation">The rotation of the annotation, in degrees.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddRectangleAnnotInteractive(System.Boolean,System.Boolean,System.Int32,System.Int32,System.Single,System.Single)">
      <summary>
 Allows the user to add a new rectangle annotation using the mouse.
 </summary>
      <param name="Fill">Specifies if the rectangle must be filled.</param>
      <param name="Stroke">Specifies if the rectangle must be stroked.</param>
      <param name="BackColor">The background color to use if the rectangle must be filled. Use ARGBI method to get a valid value.</param>
      <param name="BorderColor">The border color to use if the rectangle must be stroked. Use ARGBI method to get a valid value.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddEllipseAnnotInteractive(System.Boolean,System.Boolean,System.Int32,System.Int32,System.Single,System.Single)">
      <summary>
 Allows the user to add a new ellipse annotation using the mouse.
 </summary>
      <param name="Fill">Specifies if the ellipse must be filled.</param>
      <param name="Stroke">Specifies if the ellipse must be stroked.</param>
      <param name="BackColor">The background color to use if the ellipse must be filled. Use ARGBI method to get a valid value.</param>
      <param name="BorderColor">The border color to use if the ellipse must be stroked. Use ARGBI method to get a valid value.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddEmbeddedImageAnnotInteractive(System.Int32,System.Boolean,System.Int32,System.Single,System.Single)">
      <summary>
 Allows the user to add a new embedded image annotation, from a GdPicture image, using the mouse.
 </summary>
      <param name="ImageID">A GdPicture Image identifier. The image to render.</param>
      <param name="Stroke">Specifies if the annotation must be stroked.</param>
      <param name="BorderColor">The border color to use if the annotation must be stroked. Use ARGBI method to get a valid value.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.AddEmbeddedImageAnnotInteractive(System.String,System.Boolean,System.Int32,System.Single,System.Single)">
      <summary>
 Allows the user to add a new embedded image annotation, from a file, using the mouse.
 </summary>
      <param name="ImagePath">The path of the image to render. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Stroke">Specifies if the annotation must be stroked.</param>
      <param name="BorderColor">The border color to use if the annotation must be stroked. Use ARGBI method to get a valid value.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.SaveDocumentToPDF(System.String)">
      <summary>
 Saves the displayed document in PDF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
      <param name="FilePath">The path of PDF to create.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.SaveDocumentToPDF(System.IO.Stream)">
      <summary>
 Saves the displayed document into a stream, in PDF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
      <param name="Stream">The stream to save the PDF.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.SaveDocumentToPDF(System.String,System.String,System.String)">
      <summary>
 Saves the displayed document in PDF format with GdPicture/XMP annotation support on a distant server
 using HTTP or FTP transfer. In case of multipage document saving, the SavingProgress callback can be
 raised. The file transfer will be run synchronously.
 </summary>
      <param name="Uri">The full uri of the file to create. IE: ftp://ftp.gdpicture.com/upload/myfile.pdf
 or http://www.gdpicture.com/upload/myfile.pdf.</param>
      <param name="Login">The login required to be authenticated on the server. Can be an empty string.</param>
      <param name="Password">The password required to be authenticated on the server. Can be an empty
 string.</param>
      <seealso cref="M:GdPicture12.GdViewer.GetLastTransferError" />
      <returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError method can be used to diagnose the error.
 </returns>
      <remarks>This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.SaveDocumentToTIFF(System.String,GdPicture12.TiffCompression)">
      <summary>
 Saves the displayed document in TIFF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
      <param name="FilePath">The path of TIFF to create.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <remarks>- Warning for multipage tiff documents: If the file destination is the same as the input document a GdPictureStatus.AccessDenied error will be returned. To avoid such problem you can turn the ForceTemporaryModeForImage property to True.
 This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.SaveDocumentToTIFF(System.IO.Stream,GdPicture12.TiffCompression)">
      <summary>
 Saves the displayed document into a stream, in TIFF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
      <param name="Stream">The Stream to save the TIFF image.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.SaveDocumentToTIFF(System.String,System.String,System.String,GdPicture12.TiffCompression)">
      <summary>
 Saves the displayed document in TIFF format with GdPicture/XMP annotation support on a distant server
 using HTTP or FTP transfer. In case of multipage document saving, the SavingProgress callback can be
 raised. The file transfer will be run synchronously.
 </summary>
      <param name="Uri">The full uri of the file to create. IE: ftp://ftp.gdpicture.com/upload/myfile.tif
 or http://www.gdpicture.com/upload/myfile.tif.</param>
      <param name="Login">The login required to be authenticated on the server. Can be an empty
 string.</param>
      <param name="Password">The password required to be authenticated on the server. Can be an empty
 string.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <seealso cref="M:GdPicture12.GdViewer.GetLastTransferError" />
      <returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError method can be used to diagnose the error.
 </returns>
      <remarks>This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.SaveDocumentToJPEG(System.String,System.Int32)">
      <summary>
 Saves the displayed document in JPEG format with GdPicture/XMP annotation support.
 </summary>
      <param name="FilePath">The path of JPEG to create.</param>
      <param name="Quality">Compression level [0 to 100]. 0: worse quality and better compression, 100:
 best quality and worse compression.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.SaveDocumentToJPEG(System.IO.Stream,System.Int32)">
      <summary>
 Saves the displayed document into a stream, in JPEG format with GdPicture/XMP annotation support.
 </summary>
      <param name="Stream">The stream to save the JPEG image.</param>
      <param name="Quality">Compression level [0 to 100]. 0: worse quality and better compression, 100:
 best quality and worse compression.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.SaveDocumentToJPEG(System.String,System.String,System.String,System.Int32)">
      <summary>
 Saves the displayed document in JPEG format with GdPicture/XMP annotation support on a distant server
 using HTTP or FTP transfer. The file transfer will be run synchronously.
 </summary>
      <param name="Uri">The full uri of the file to create. IE: ftp://ftp.gdpicture.com/upload/myfile.jpg
 or http://www.gdpicture.com/upload/myfile.jpg.</param>
      <param name="Login">The login required to be authenticated on the server. Can be an empty string.</param>
      <param name="Password">The password required to be authenticated on the server. Can be an empty
 string.</param>
      <param name="Quality">Compression level [0 to 100]. 0: worse quality and better compression, 100:
 best quality and worse compression.</param>
      <seealso cref="M:GdPicture12.GdViewer.GetLastTransferError" />
      <returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError method can be used to diagnose the error.
 </returns>
      <remarks>This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.SaveAnnotationsToXMP(System.String)">
      <summary>
 Saves the GdPicture/XMP annotation part of the current page of the displayed document to a XML file.
 </summary>
      <param name="FilePath">The path of XML file to create.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.SaveAnnotationsToXMP(System.IO.Stream)">
      <summary>
 Saves the GdPicture/XMP annotation part of the current page of the displayed document to a stream.
 </summary>
      <param name="Stream">The stream to save the annotations.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Save annotations to stream." lang="VB.NET">
 Dim annotStream As New IO.MemoryStream
 GdViewer1.SaveAnnotationsToXMP(annotStream)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.SaveAnnotationsToXMPEx(System.String)">
      <summary>
 Saves the GdPicture/XMP annotation part of all pages of the displayed document to a XML file.
 </summary>
      <param name="FilePath">The path of XML file to create.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.SaveAnnotationsToXMPEx(System.IO.Stream)">
      <summary>
 Saves the GdPicture/XMP annotation part of all pages of the displayed document to a XML file.
 </summary>
      <param name="Stream">The stream to save the annotations.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Save annotations to stream." lang="VB.NET">
 Dim annotStream As New IO.MemoryStream
 GdViewer1.SaveAnnotationsToXMP(annotStream)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.LoadAnnotationsFromXMP(System.String)">
      <summary>
 Loads and applies GdPicture/XMP annotation from a XML file previously generated by the SaveAnnotationsToXMP or SaveAnnotationsToXMPEx methods.
 </summary>
      <param name="FilePath">The path of XML file to load.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.LoadAnnotationsFromXMP(System.IO.Stream)">
      <summary>
 Loads and applies GdPicture/XMP annotation from a stream containing data previously generated by the SaveAnnotationsToXMP or SaveAnnotationsToXMPEx methods.
 </summary>
      <param name="Stream">The Stream object containing the annotations data.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.BurnAnnotationsToPage(System.Boolean)">
      <summary>
 Burns (or flatten) the GdPicture/XMP annotation of the current page of the displayed document.
 To burn custom annotations you need to use the overload taking a VectorMode parameter set to False.
 </summary>
      <param name="RemoveInitialAnnots">True to remove annotation blob content from the file, else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.BurnAnnotationsToPage(System.Boolean,GdPicture12.GdPictureOutputIntent)">
      <summary>
 Burns (or flatten) the GdPicture/XMP annotation of the current page of the displayed document.
 This overload doesn't support custom annotation burning.
 </summary>
      <param name="RemoveInitialAnnots">True to remove annotation blob content from the file, else False.</param>
      <param name="Intent">A member of the GdPictureOutputIntent enumeration. Defines the intent of the produced page. Default value is IntentColor. Other intents produce smaller page size.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.BurnAnnotationsToPage(System.Boolean,System.Boolean)">
      <summary>
 Burns (or flatten) the GdPicture/XMP annotation of the current page of the displayed document.
 </summary>
      <param name="RemoveInitialAnnots">True to remove annotation blob content from the file, else False.</param>
      <param name="VectorMode">Determines if annotations data must be renderd in vector format. This parameter is only suitable for PDF annotations burning. Custom annotations can be burned only when VectorMode is set to False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayTextEditBox(System.Int32)">
      <summary>
 Prompts the annotation text modification dialog box to the user. Can be used with StickyNote and Text annotations only.
 This method is particularly useful if you want to let the user subsequently define the text of the annotation after having added it (see example).
 </summary>
      <param name="AnnotationIdx">The index of the annotation.</param>
      <example>
        <code description="Prompts the user to modify annotation text by intercepting the AnnotationAddedByUse event." lang="VB.NET">
 Private Sub GdViewer1_AnnotationAddedByUser(ByVal AnnotationIdx As Integer) Handles GdViewer1.AnnotationAddedByUser
 GdViewer1.DisplayTextEditBox(AnnotationIdx)
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdViewer.HideTextEditBox(System.Boolean)" />
    </member>
    <member name="M:GdPicture12.GdViewer.HideTextEditBox(System.Boolean)">
      <summary>
 Hides the text modification dialog box from the control. Can be used with StickyNote and Text annotations only.
 If the annotation text modification dialog is not displayed, this method returns a GdPictureStatus.Aborted status.
 </summary>
      <param name="SaveText">Set true to apply the current text to the annotation, else False.</param>
      <seealso cref="M:GdPicture12.GdViewer.DisplayTextEditBox(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdViewer.GetVersion">
      <summary>
 Returns the GdPicture source code version used in the following format M.mrr where 'M' describes the major version, 'm' the medium version and 'rr' the release number.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Returns a 32-bit Color value from a set of alpha, red, green, and blue color components.
 </summary>
      <param name="Alpha">The alpha component (also called transparency). Valid values are 0 (full
 transparency) to 255 (full opacity).</param>
      <param name="Red">The red component. Valid values are 0 to 255.</param>
      <param name="Green">The green component. Valid values are 0 to 255.</param>
      <param name="Blue">The blue component. Valid values are 0 to 255.</param>
      <returns>
 A 32-bit Color value.
 </returns>
      <example>
        <code description="Getting ARGB Red color Using ARGBI." lang="VB.NET">
 Integer RedColor = GdViewer1.ARGBI(255, 255, 0, 0) ' A = 255; R = 255:  G = 0: B = 0
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
 Returns a Color Object from a set of alpha, red, green, and blue color components.
 </summary>
      <param name="Alpha">The alpha component (also called transparency). Valid values are 0 (full
 transparency) to 255 (full opacity).</param>
      <param name="Red">The red component. Valid values are 0 to 255.</param>
      <param name="Green">The green component. Valid values are 0 to 255.</param>
      <param name="Blue">The blue component. Valid values are 0 to 255.</param>
      <returns>
 A Color Object.
 </returns>
      <example>
        <code description="Getting a Red color Object." lang="VB.NET">
 Color RedColor = GdViewer1.ARGB(255, 255, 0, 0) ' A = 255; R = 255:  G = 0: B = 0
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.ARGB(System.Byte,System.Byte,System.Byte)">
      <summary>
 Returns a Color Object from a set of red, green, and blue color components.
 </summary>
      <param name="Red">The red component. Valid values are 0 to 255.</param>
      <param name="Green">The green component. Valid values are 0 to 255.</param>
      <param name="Blue">The blue component. Valid values are 0 to 255.</param>
      <returns>
 A Color Object.
 </returns>
      <example>
        <code description="Getting a Red color Object." lang="VB.NET">
 Color RedColor = GdViewer1.ARGB(255, 0, 0) ' R = 255:  G = 0: B = 0
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.ARGB(System.Int32)">
      <summary>
 Returns a Color Object from a 32-bit ARGB value.
 </summary>
      <param name="iargb">A value specifying the 32-bit ARGB value.</param>
      <returns>
 A Color Object.
 </returns>
      <example>
        <code description="Getting a Red color Object." lang="VB.NET">
 Color RedColor = GdViewer1.ARGB(Color.Red.ToArgb())
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.GetLastPath">
      <summary>
 Returns the path of the latest loaded or saved file.
 </summary>
      <returns>
 The latest loaded or saved file path.
 </returns>
      <example>
        <code description="Prompt the user to select a document to display and retrieve the path of the selected file." lang="VB.NET">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
 GdViewer.DisplayFromFile("") 'Specifying empty string prompts the user to select a file
 Msgbox "File loaded: " + GdViewer.GetLastPath()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.ReleaseHdc(System.IntPtr)">
      <summary>
 Releases a device context obtained by a previous call to the GetHdc() method.
 </summary>
      <param name="Hdc">The handle to the device context associated to the viewer.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.GetStat">
      <summary>
 Returns the last viewer Status.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.GetHdc">
      <summary>
 Gets the handle to the device context associated to the viewer.
 </summary>
      <returns>The handle to the device context associated to the viewer.</returns>
    </member>
    <member name="M:GdPicture12.GdViewer.GetLastTransferError">
      <summary>
 Returns, if any, the last HTTP or FTP transfer error description.
 </summary>
      <returns>
 The error description.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.SetBackgroundColor(System.Int32)">
      <summary>
 Defines the background color of the Viewer.
 </summary>
      <param name="Color">The background color. A suitable color value can be obtained by using the ARGBI() method.</param>
      <example>
        <code description="Set background color to RED." lang="VB.NET">
 GdViewer1.SetBackgroundColor(GdViewer1.ARGBI(255, 255, 0, 0))
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.SupportFunc(System.Int32,System.Int32,System.Double@,System.Double@,System.Double@,System.Int32@,System.Int32@,System.Int32@,System.String@,System.String@,System.String@)">
      <summary>
 Here for GdPicture technical support purpose.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Int32)">
      <summary>
 Adds a region on the current page of the displayed document using pixels to specify the location and size.
 </summary>
      <param name="Name">The name of the region. Can be an empty string.</param>
      <param name="Left">Left pixel (0 based) position of the region on the page.</param>
      <param name="Top">Top pixel (0 based) position of the region on the page.</param>
      <param name="Width">Width, in pixel, of the rectangle of the region on the page.</param>
      <param name="Height">Height, in pixel, of the rectangle of the region on the page.</param>
      <param name="MixMode">A member of the ForegroundMixMode enumeration. Specifies the foreground
 mix mode to use to combine the region and the displayed image.</param>
      <param name="RegionColor">A suitable color value can be obtained by using the ARGBI() method. Color used to fill the rectangle.</param>
      <returns>
 The ID of the added region.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)">
      <summary>
 Adds a region on the current page of the displayed document using pixels to specify the location and size.
 </summary>
      <param name="Name">The name of the region. Can be an empty string.</param>
      <param name="Left">Left pixel (0 based) position of the region on the page.</param>
      <param name="Top">Top pixel (0 based) position of the region on the page.</param>
      <param name="Width">Width, in pixel, of the rectangle of the region on the page.</param>
      <param name="Height">Height, in pixel, of the rectangle of the region on the page.</param>
      <param name="MixMode">A member of the ForegroundMixMode enumeration. Specifies the foreground
 mix mode to use to combine the region and the displayed image.</param>
      <param name="RegionColor">Color Object. You can build a Color Object using the ARGB() method.
 Color used to fill the rectangle.</param>
      <returns>
 The ID of the added region.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.ARGB(System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Int32)">
      <summary>
 Adds a region on the current page of the displayed document using inches to specify the location and
 size.
 </summary>
      <param name="Name">The name of the region. Can be an empty string.</param>
      <param name="Left">Left position in inches of the region on the page.</param>
      <param name="Top">Top position in inches of the region on the page.</param>
      <param name="Width">Width, in inches, of the rectangle of the region on the page.</param>
      <param name="Height">Height, in inches, of the rectangle of the region on the page.</param>
      <param name="MixMode">A member of the ForegroundMixMode enumeration. Specifies the foreground
 mix mode to use to combine the region and the displayed image.</param>
      <param name="RegionColor">A suitable color value can be obtained by using the ARGBI() method.
 Color used to fill the rectangle.</param>
      <returns>
 The ID of the added region.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)">
      <summary>
 Adds a region on the current page of the displayed document using inches to specify the location and
 size.
 </summary>
      <param name="Name">The name of the region. Can be an empty string.</param>
      <param name="Left">Left position in inches of the region on the page.</param>
      <param name="Top">Top position in inches of the region on the page.</param>
      <param name="Width">Width, in inches, of the rectangle of the region on the page.</param>
      <param name="Height">Height, in inches, of the rectangle of the region on the page.</param>
      <param name="MixMode">A member of the ForegroundMixMode enumeration. Specifies the foreground
 mix mode to use to combine the region and the displayed image.</param>
      <param name="RegionColor">Color Object. You can build a Color Object using the ARGB() method.
 Color used to fill the rectangle.</param>
      <returns>
 The ID of the added region.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.ARGB(System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdViewer.RemoveRegionByID(System.Int32)">
      <summary>
 Remove a region using its ID.
 </summary>
      <param name="RegionID">A region ID returned by the AddRegion or the AddRegionInches method.</param>
      <returns>
 True if success, else False (region does not exist).
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.GetRegionID(System.Int32)">
      <summary>
 Returns a region ID.
 </summary>
      <param name="RegionNo">A region number. This number must be between 1 and the total number of
 regions which can be get using the RegionCount method.</param>
      <returns>
 A region ID. 0 if the RegionNo parameter is invalid, else the ID of the selected region.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.GetRegionName(System.Int32)">
      <summary>
 Retrieve the name of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The name of the region.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.GetRegionColor(System.Int32)">
      <summary>
 Retrieve the color of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The color of the region.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.GetRegionColorSelection(System.Int32)">
      <summary>
 Retrieve the color of a region, when it is selected by the user, from its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The color of the region when it is selected.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.GetRegionBorderColor(System.Int32)">
      <summary>
 Retrieve the border color of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The border color of the region.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.GetRegionBorderWidth(System.Int32)">
      <summary>
 Retrieve the border width of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The border width of the region.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.GetRegionPage(System.Int32)">
      <summary>
 Retrieve the page in a multipage document on which the region is drawn (set), by using the Region ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The page of the region.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.GetRegionSelected(System.Int32)">
      <summary>
 Gets the selection status of a region, by using the Region ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 True if the specified region is selected, else False.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.SetRegionSelected(System.Int32,System.Boolean)">
      <summary>
 Sets the selection status of a region, by using the Region ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 True if the success, else False.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.EnsureRegionVisibility(System.Int32)">
      <summary>
 Ensures that the specified region is visible within the control, changing page or scrolling the contents of the control if necessary.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdViewer.GetRegionLeft(System.Int32)">
      <summary>
 Retrieve the left position in inches on the document, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The left position in inches of the region. The returned value corresponds to the left position of the region on the actual document, and not on the GdViewer.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.GetRegionLeftPixels(System.Int32)">
      <summary>
 Retrieve the left position in pixels on the document, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The left position in pixels of the region. The returned value corresponds to the left position of the region on the actual document, and not on the GdViewer.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.GetRegionTop(System.Int32)">
      <summary>
 Retrieve the top position in inches on the document, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The top position in inches of the region. The returned value corresponds to the top position of the region on the actual document, and not on the GdViewer.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.GetRegionTopPixels(System.Int32)">
      <summary>
 Retrieve the top position in pixels on the document, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The top position in pixels of the region. The returned value corresponds to the top position of the region on the actual document, and not on the GdViewer.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.GetRegionWidth(System.Int32)">
      <summary>
 Retrieve the width in inches on the document, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The width in inches of the region. The returned value corresponds to the width of the region on the actual document, and not on the GdViewer.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.GetRegionWidthPixels(System.Int32)">
      <summary>
 Retrieve the width in pixels on the document, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The width in pixels of the region. The returned value corresponds to the width of the region on the actual document, and not on the GdViewer.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.GetRegionHeightPixels(System.Int32)">
      <summary>
 Retrieve the height in pixels on the document, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The height in pixels of the region. The returned value corresponds to the width of the region on the actual document, and not on the GdViewer.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.GetRegionHeight(System.Int32)">
      <summary>
 Retrieve the height in inches on the document, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The height in inches of the region. The returned value corresponds to the height of the region on the actual document, and not on the GdViewer.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.GetRegionMixMode(System.Int32)">
      <summary>
 Retrieve region's foreground mix mode using its id.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The foreground mix mode to use to combine the region and the displayed image. A member of the
 ForegroundMixMode enumeration.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.SetRegionName(System.Int32,System.String)">
      <summary>
 Sets the name of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="Name">The name of the region.</param>
      <returns>
 True if success, else False (Unknown Region).
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.SetRegionColor(System.Int32,System.Drawing.Color)">
      <summary>
 Sets the color of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="Color">The color of the region.</param>
      <returns>
 True if success, else False (Invalid region ID).
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.SetRegionColor(System.Int32,System.Int32)">
      <summary>
 Sets the color of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="Color">The color of the region. A suitable color value can be obtained by using the ARGBI() method.</param>
      <returns>
 True if success, else False (Invalid region ID).
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.SetRegionColorSelection(System.Int32,System.Drawing.Color)">
      <summary>
 Sets the color of a region, when it is selected by the user, using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="ColorSelection">The color of the region when it is selected.</param>
      <returns>
 True if success, else False (Invalid region ID).
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.SetRegionColorSelection(System.Int32,System.Int32)">
      <summary>
 Sets the color of a region, when it is selected by the user, using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="ColorSelection">The color of the region when it is selected. A suitable color value can be obtained by using the ARGBI() method.</param>
      <returns>
 True if success, else False (Invalid region ID).
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.SetRegionBorderColor(System.Int32,System.Drawing.Color)">
      <summary>
 Sets the border color of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="BorderColor">The border color of the region.</param>
      <returns>
 True if success, else False (Invalid region ID).
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.SetRegionBorderColor(System.Int32,System.Int32)">
      <summary>
 Sets the border color of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="BorderColor">The border color of the region. A suitable color value can be obtained by using the ARGBI() method.</param>
      <returns>
 True if success, else False (Invalid region ID).
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.SetRegionBorderWidth(System.Int32,System.Int32)">
      <summary>
 Sets the border width of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="BorderWidth">The border width of the region.</param>
      <returns>
 True if success, else False (Unknown Region).
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.SetRegionPage(System.Int32,System.Int32)">
      <summary>
 Sets the page on which the region is to be drawn (set) by using the region's ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="Page">The page of the region.</param>
      <returns>
 True if success, else False (Unknown Region).
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.SetRegionLeft(System.Int32,System.Single)">
      <summary>
 Sets the left position in inches, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="Left">The left position in inches of the region.</param>
      <returns>
 True if success, else False (Unknown Region).
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.SetRegionTop(System.Int32,System.Single)">
      <summary>
 Sets the top position in inches, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="Top">The top position in inches of the region.</param>
      <returns>
 True if success, else False (Unknown Region).
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.SetRegionWidth(System.Int32,System.Single)">
      <summary>
 Sets the width in inches, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="Width">The width in inches of the region.</param>
      <returns>
 True if success, else False (Unknown Region).
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.SetRegionHeight(System.Int32,System.Single)">
      <summary>
 Sets the height in inches, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="Height">The height in inches of the region.</param>
      <returns>
 True if success, else False (Unknown Region).
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.SetRegionEditable(System.Int32,System.Boolean)">
      <summary>
 Specifies if a region can be edited by user or not (can be by default).
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="Editable">True if the region can be edited by user, else False.</param>
      <returns>
 True if success, else False (Unknown Region).
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.SetRegionMixMode(System.Int32,GdPicture12.ForegroundMixMode)">
      <summary>
 Defines the foreground mix mode to use to combine the region and the displayed image.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="MixMode">The foreground mix mode to use to combine the region and the displayed image. A
 member of the ForegroundMixMode enumeration.</param>
      <returns>
 True if success, else False (Unknown Region).
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.RemoveRegionByName(System.String)">
      <summary>
 Remove a region by using its name.
 </summary>
      <param name="Name">The name of the region created using the AddRegion or the AddRegionInches method.
 </param>
      <returns>
 True if success, else False (region does not exist).
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.RemoveAllRegions">
      <summary>
 Remove all regions from the current document.
 </summary>
      <returns>
 True if success, else False (no region found).
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.RegionCount">
      <summary>
 Returns the number of regions on the displayed document.
 </summary>
      <seealso cref="M:GdPicture12.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
      <seealso cref="M:GdPicture12.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture12.ForegroundMixMode,System.Drawing.Color)" />
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayNextPage">
      <summary>
 Displays the next page of the current multipage document.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayPreviousPage">
      <summary>
 Displays the previous page of the current multipage document.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFirstPage">
      <summary>
 Displays the first page of the current multipage document.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayLastPage">
      <summary>
 Displays the last page of the current multipage document.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayPage(System.Int32)">
      <summary>
 Changes the displayed page of the current multipage document.
 </summary>
      <param name="Page">Page number between 1 and page count.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.ClearRect">
      <summary>
 Removes the rectangle of area selection from the viewer.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.IsRect">
      <summary>
 Returns True if the rectangle of area selection is drawn on the viewer, else false.
 </summary>
      <example>
        <code description="Determining whether the rectangle of selection is drawn on the viewer or not" lang="VB.NET">
 Dim RectDrawnOnViewer As Boolean
 RectDrawnOnViewer = oGdViewer.IsRect()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.IsRectDrawing">
      <summary>
 Returns True if the user is drawing the rectangle of area selection, else false.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.IsRectEditing">
      <summary>
 Returns True if the user is moving or editing the rectangle of area selection, else false.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.GetRectCoordinatesOnDocument(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
 Returns the coordinates, in pixel, of the rectangle of area selection over the page of the displayed
 document.
 </summary>
      <param name="Left">Returns Left pixel position (0 based) of the rectangle of area selection.</param>
      <param name="Top">Returns Top pixel position (0 based) of the rectangle of area selection.</param>
      <param name="Width">Returns Width of the rectangle of area selection in pixel.</param>
      <param name="Height">Returns Height of the rectangle of area selection in pixel.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.GetRectCoordinatesOnDocumentInches(System.Single@,System.Single@,System.Single@,System.Single@)">
      <summary>
 Returns the coordinates in inches of the rectangle of area selection over the page of the displayed
 document.
 </summary>
      <param name="Left">Returns Left position of the rectangle of area selection in inches.</param>
      <param name="Top">Returns Top position of the rectangle of area selection in inches.</param>
      <param name="Width">Returns Width of the rectangle of area selection in inches.</param>
      <param name="Height">Returns Height of the rectangle of area selection in inches.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.GetRectCoordinatesOnViewer(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
 Returns the coordinates, in pixel, of the rectangle of area selection over the viewer.
 </summary>
      <param name="Left">Returns Left pixel position of the rectangle of area selection.</param>
      <param name="Top">Returns Top pixel position of the rectangle of area selection.</param>
      <param name="Width">Returns Width of the rectangle of area selection in pixel.</param>
      <param name="Height">Returns Height of the rectangle of area selection in pixel.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.GetRectLeftOnDocument">
      <summary>
 Returns the left coordinate, in pixel, of the rectangle of area selection over the page of the
 displayed document.
 </summary>
      <returns>
 Left pixel position (0 based) of the rectangle of area selection.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.GetRectLeftOnViewer">
      <summary>
 Returns the left coordinate, in pixel, of the rectangle of area selection over the viewer.
 </summary>
      <returns>
 Left pixel position of the rectangle of area selection.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.GetRectTopOnDocument">
      <summary>
 Returns the top coordinate, in pixel, of the rectangle of area selection over the page of the
 displayed document.
 </summary>
      <returns>
 Top pixel position (0 based) of the rectangle of area selection.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.GetRectTopOnViewer">
      <summary>
 Returns the top coordinate, in pixel, of the rectangle of area selection over the viewer.
 </summary>
      <returns>
 Top pixel position of the rectangle of area selection.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.GetRectHeightOnDocument">
      <summary>
 Returns the height, in pixel, of the rectangle of area selection over the page of the displayed
 document.
 </summary>
      <returns>
 Height of the rectangle of area selection.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.GetRectWidthOnDocument">
      <summary>
 Returns the width, in pixel, of the rectangle of area selection over the page of the displayed
 document.
 </summary>
      <returns>
 Width of the rectangle of area selection.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.GetRectWidthOnViewer">
      <summary>
 Returns the width, in pixel, of the rectangle of area selection over the viewer.
 </summary>
      <returns>
 Width of the rectangle of area selection.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.GetRectHeightOnViewer">
      <summary>
 Returns the height, in pixel, of the rectangle of area selection over the viewer.
 </summary>
      <returns>
 Width of the rectangle of area selection.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.SetRectCoordinatesOnDocument(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Sets the coordinates, in pixel, of the rectangle of area selection over the page of the displayed
 document.
 </summary>
      <param name="Left">Left pixel (0 based) position of the rectangle of area selection.</param>
      <param name="Top">Top pixel (0 based) position of the rectangle of area selection.</param>
      <param name="Width">Width of the rectangle of area selection in pixel.</param>
      <param name="Height">Height of the rectangle of area selection in pixel.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.SetRectCoordinatesOnDocumentInches(System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Sets the coordinates in inches of the rectangle of area selection over the page of the displayed
 document.
 </summary>
      <param name="Left">Left position of the rectangle of area selection in inches.</param>
      <param name="Top">Top position of the rectangle of area selection in inches.</param>
      <param name="Width">Width of the rectangle of area selection in inches.</param>
      <param name="Height">Height of the rectangle of area selection in inches.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.SetRectCoordinatesOnViewer(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Sets the coordinates, in pixel, of the rectangle of area selection over the viewer.
 </summary>
      <param name="Left">Required. Long. Left pixel position of the rectangle of area selection.</param>
      <param name="Top">Required. Long. Top pixel position of the rectangle of area selection.</param>
      <param name="Width">Required. Long. Width of the rectangle of area selection in pixel.</param>
      <param name="Height">Required. Long. height of the rectangle of area selection in pixel.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.SetRectBorderColor(System.Int32)">
      <summary>
 Defines the color of the rectangle of area selection.
 </summary>
      <param name="Color">The color of the rectangle of area selection. A suitable color value can be obtained by using the ARGBI() method.</param>
      <example>
        <code description="Set the color of the rectangle of area selection color to RED." lang="VB.NET">
 GdViewer1.SetRectBorderColor(GdViewer1.ARGBI(255, 255, 0, 0))
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.GifPlay">
      <summary>
 Plays a GIF animation in loop.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.GifStop">
      <summary>
 Stops a GIF animation.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.GetDocumentType">
      <summary>
 Returns the type of the displayed document.
 </summary>
      <returns>
 A member of the DocumentType enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.CloseDocument">
      <summary>
 Closes the displayed document and clears the viewer.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.CloseDocument(System.Boolean)">
      <summary>
 Closes the displayed document specifying to clear the viewer or not.
 </summary>
      <param name="NoCLear">Specify if the viewer must be cleared or not.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromStream(System.IO.Stream)">
      <summary>
 Displays document from a Stream object.
 </summary>
      <param name="Stream">System.IO.Stream object storing the document.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromStream(System.IO.Stream,System.String)">
      <summary>
 Displays a document from a stream object specifying a password to uncrypt its content (required for encrypted PDF).
 </summary>
      <param name="Stream">System.IO.Stream object storing the document.</param>
      <param name="PassWord">Sets the password to use for reading the content of a PDF document.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromStream(System.IO.Stream,System.String,GdPicture12.DocumentFormat)">
      <summary>
 Displays a document from a stream object specifying a password to uncrypt its content (required for encrypted PDF).
 </summary>
      <param name="Stream">System.IO.Stream object storing the document.</param>
      <param name="PassWord">Sets the password to use for reading the content of a PDF document.</param>
      <param name="DocumentFormat">A member of the DocumentFormat enumeration specifying the input document format.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromStream(System.IO.Stream,System.String,System.String)">
      <summary>
 Displays a document from a stream object specifying a password to uncrypt its content (required for encrypted PDF).
 </summary>
      <param name="Stream">System.IO.Stream object storing the document.</param>
      <param name="PassWord">Sets the password to use for reading the content of a PDF document.</param>
      <param name="FileName">The initial name of the file stored in the Stream object. IE: myfile.tif. The document format will be automatically detected based on this file name.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromIStream(System.Runtime.InteropServices.ComTypes.IStream,System.String)">
      <summary>
 Displays a document from an IStream object.
 </summary>
      <param name="Stream">An IStream object storing the document.</param>
      <param name="PassWord">If any, defines the password to use to uncrypt the content of the document. Use empty string if no password is required.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromFTP(System.String,System.String,System.String,System.String,System.Int32)">
      <summary>
 Displays a document from a file stored in a distant server using FTP access. The document will be loaded in an asynchronous way. You can catch the TransferProgress and the TransferEnded events to monitor the transfer.
 </summary>
      <param name="Host">The host server IE: ftp.gdicture.com.</param>
      <param name="Path">The image file path into the distant server IE: /demo/image.jpg.</param>
      <param name="Login">User Login.</param>
      <param name="Password">User Password.</param>
      <param name="FTPPort">The FTP port number used. Usually 21.</param>
      <returns>
 A member of the GdPictureStatus enumeration. If non OK the GetLastTransferError() method can be used to diagnose the error.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.GetLastTransferError" />
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromFTP(System.String,System.String,System.String)">
      <summary>
 Displays a document from a file stored in a distant server using FTP access. The document will be loaded in an asynchronous way. You can catch the TransferProgress and the TransferEnded events to monitor the transfer.
 </summary>
      <param name="Uri">The path of the document. IE: ftp://ftp.mywebsite.com/mydocument.pdf.</param>
      <param name="Login">User Login.</param>
      <param name="Password">User Password.</param>
      <returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError method can be used to diagnose the error.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.GetLastTransferError" />
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.SetHttpTransfertBufferSize(System.Int32)">
      <summary>
 Changes the default packet size used by the DisplayFromHTTP() and DisplayFromFTP methods. Default value used is 4096.
 </summary>
      <param name="BufferSize">New buffer size. ex 1024, 2048, 4096, 8192 etc.</param>
      <seealso cref="M:GdPicture12.GdViewer.DisplayFromHTTP(System.String,System.String,System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdViewer.SetFtpPassiveMode(System.Boolean)">
      <summary>
 Specifies if the FTP transfer mode is Passive or not for the DisplayFromFTP() method. True by
 default.
 </summary>
      <param name="PassiveMode">True for passive FTP transfer mode, else Flase.</param>
      <seealso cref="M:GdPicture12.GdViewer.DisplayFromFTP(System.String,System.String,System.String)" />
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromHTTPStop">
      <summary>
 Avoids the downloading started by the DisplayFromHTTP() or DisplayFromFTP() method.
 </summary>
      <seealso cref="M:GdPicture12.GdViewer.DisplayFromHTTP(System.String,System.String,System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromHTTP(System.String,System.String,System.Int32)">
      <summary>
 Displays a document from a file stored in a distant server using HTTP. The document will be loaded in an asynchronous way. You can catch the TransferProgress and the TransferEnded events to monitor the transfer.
 </summary>
      <param name="Host">The host server. IE: http://www.gdpicture.com.</param>
      <param name="Path">The image file path into the distant server. IE: /demo/image.jpg.</param>
      <param name="HTTPPort">The HTTP port number used. Usually 80 or 443 to use https transfer mode.</param>
      <returns>
 A member of the GdPictureStatus enumeration. If non OK the GetLastTransferError() method can be used to diagnose the error.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.DisplayFromHTTPStop" />
      <seealso cref="M:GdPicture12.GdViewer.SetHttpTransfertBufferSize(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.GetLastTransferError" />
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromHTTP(System.String,System.String,System.String)">
      <summary>
 Displays a document from a file stored in a distant server using HTTP. The document will be loaded in an asynchronous way. You can catch the TransferProgress and the TransferEnded events to monitor the transfer.
 </summary>
      <param name="Uri">The destination Uri. IE: http://guides.gdpicture.com/v8/pdf/GdPicture.NET8.pdf.</param>
      <param name="Login">The login required to access the URI. Can be an empty string.</param>
      <param name="Password">The password required to access the URI. Can be an empty string.</param>
      <returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError method can be used to diagnose the error.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.DisplayFromHTTPStop" />
      <seealso cref="M:GdPicture12.GdViewer.SetHttpTransfertBufferSize(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.GetLastTransferError" />
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromByteArray(System.Byte[])">
      <summary>
 Displays a document from a file stored within an array of bytes.
 </summary>
      <param name="Data">The document data.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
      <example>
        <code description="Displaying an image on the GdViewer from a byte Array" lang="VB.NET">
 Dim oFile As System.IO.FileInfo
 oFile = New System.IO.FileInfo("myimage.gif")
 Dim oFileStream As System.IO.FileStream = oFile.OpenRead()
 Dim lBytes As Integer = CInt(oFileStream.Length)
 If (lBytes &gt; 0) Then
    Dim fileData(lBytes - 1) As Byte
    Dim ImageID As Integer
    oFileStream.Read(fileData, 0, lBytes)
    oFileStream.Close()
    oGdViewer.DisplayFromByteArray(fileData)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromMemory(System.IntPtr,System.Int32)">
      <summary>
 Displays a document from a file stored within an area of the memory.
 </summary>
      <param name="hMem">A pointer to the area of the memory which stores the document.</param>
      <param name="Length">The length in byte of the area.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromRawBits(System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.IntPtr)">
      <summary>
 Displays an Image from raw bitmap in memory.
 </summary>
      <remarks>
 Warning: Do not remove the raw bitmap from the memory until you closed the displayed document.
 </remarks>
      <param name="Width">Specifies the width, in pixels, of the bitmap.</param>
      <param name="Height">Specifies the height, in pixels, of the bitmap.</param>
      <param name="Stride">Specifies the byte offset between the beginning of one scan line and the
 next. This is usually (but not necessarily) the number of bytes in the
 pixel format (for example, 2 for 16 bits per pixel) multiplied by the
 width of the bitmap. The value passed to this parameter must be a multiple
 of four.</param>
      <param name="PixelFormat">Specifies the pixel format of the bitmap. A member of the PixelFormat
 enumeration.</param>
      <param name="Bits">Pointer to an array of bytes that contains the pixel data. The caller is
 responsible for allocating and freeing the block of memory pointed to by
 this parameter.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.GetStat" />
      <example>
        <code description="Using DisplayFromRawBits. The following code assumes that the bits of the image are stored in an IntPtr called iBits" lang="VB.NET">
 oGdViewer.DisplayFromRawBits(250, 250, 750, Imaging.PixelFormat.Format24bppRgb, iBits)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromString(System.String)">
      <summary>
 Displays a document from a file stored within string data (Encoding 1252).
 </summary>
      <param name="Data">String which contains the image file data.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromFile(System.String)">
      <summary>
 Displays a document from a file.
 </summary>
      <param name="FilePath">The path of the document to display. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromFile(System.String,System.String)">
      <summary>
 Displays a document from a file specifying a password to decrypt it (useful for encrypted PDF).
 </summary>
      <param name="FilePath">The path of the document to display. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="PassWord">Sets the password to use for reading the content of a PDF document.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromGdPictureImage(System.Int32)">
      <summary>
 Displays a GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier of the image to display.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromGdPicturePDF(GdPicture12.GdPicturePDF)">
      <summary>
 Displays a PDF document from a GdPicturePDF object.
 </summary>
      <param name="PDF">A GdPicturePDF object.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromHBitmap(System.IntPtr)">
      <summary>
 Displays an image from a handle to a Windows Microsoft Windows Graphics Device Interface (GDI).
 </summary>
      <param name="Hbitmap">Windows Microsoft Windows Graphics Device Interface (GDI).</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromBitmap(System.Drawing.Bitmap)">
      <summary>
 Displays an image from a System.Drawing.Bitmap object.
 </summary>
      <param name="bm">Bitmap object.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromHICON(System.IntPtr)">
      <summary>
 Displays an image from a handle to a Windows handle to icon.
 </summary>
      <param name="HICON">Windows handle to icon.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromClipboard">
      <summary>
 Displays an image stored into the clipboard.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.DisplayFromDIB(System.IntPtr)">
      <summary>
 Displays a Device Independent Bitmap handle (DIB).
 </summary>
      <param name="Dib">Pointer to a Microsoft® Windows® Graphics Device Interface (GDI) BITMAPINFO
 structure.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.ZoomRect">
      <summary>
 Adjusts zoom to the area covered by the rectangle of selection.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.ZoomArea(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Adjusts zoom and page position in order to display a specific area.
 </summary>
      <param name="Left">Left position of the area, over the document, in pixel.</param>
      <param name="Top">Top position of the area, over the document, in pixel.</param>
      <param name="Width">Width of the area, over the document, in pixel.</param>
      <param name="Height">Height of the area, over the document, in pixel.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.ZoomIN">
      <summary>
 Increases the current level of zoom.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.ZoomOUT">
      <summary>
 Decreases the current level of zoom.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.SetZoom100">
      <summary>
 Adjusts zoom level to 100% of the displayed document.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.SetZoomFitViewer">
      <summary>
 Fits the displayed document to the viewer (keep aspect ratio).
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.SetZoomWidthViewer">
      <summary>
 Fits the displayed document to the viewer width.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.SetZoomHeightViewer">
      <summary>
 Fits the displayed document to the viewer height.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.SetZoomViewer">
      <summary>
 Fits the displayed document to viewer area (don't keep aspect ratio).
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.Rotate(System.Drawing.RotateFlipType)">
      <summary>
 Rotates clockwise or flips the current page of the displayed document.
 </summary>
      <param name="Rotation">A member of the RotateFlipType enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.RotateView(System.Drawing.RotateFlipType)">
      <summary>
 Rotates clockwise or flips the global view.
 </summary>
      <param name="Rotation">A member of the RotateFlipType enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.GetHScrollBarMaxPosition">
      <summary>
 Returns the maximum position of the horizontal scrollbar.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.GetVScrollBarMaxPosition">
      <summary>
 Returns the maximum position of the vertical scrollbar.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.GetHScrollBarPosition">
      <summary>
 Returns the current position of the horizontal scrollbar.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.GetVScrollBarPosition">
      <summary>
 Returns the current position of the vertical scrollbar.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.SetHScrollBarPosition(System.Int32)">
      <summary>
 Moves to horizontal scrollbar to a specific position.
 </summary>
      <param name="NewPos">The position to move the scrollbar.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.SetVScrollBarPosition(System.Int32)">
      <summary>
 Moves to vertical scrollbar to a specific position.
 </summary>
      <param name="NewPos">The position to move the scrollbar.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.SetHVScrollBarPosition(System.Int32,System.Int32)">
      <summary>
 Moves in one shot the vertical and horizontal scrollbars to custom positions.
 </summary>
      <param name="NewPosH">The position to move the horizontal scrollbar.</param>
      <param name="NewPosV">The position to move the vertical scrollbar.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.GetDocumentTop">
      <summary>
 Returns the top coordinate, in pixel, of the current page of the displayed document within the viewer.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.GetDocumentLeft">
      <summary>
 Returns the left coordinate, in pixel, of the current page of the displayed document within the
 viewer.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.GetDisplayedArea(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
 Returns the coordinates, in pixel, of the visible area of the displayed document.
 </summary>
      <param name="Left">Returns Left pixel (0 based) position of the area.</param>
      <param name="Top">Returns Top pixel (0 based) position of the area.</param>
      <param name="Width">Returns Width of the area in pixel.</param>
      <param name="Height">Returns Height of the area in pixel.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.GetDisplayedAreaInches(System.Single@,System.Single@,System.Single@,System.Single@)">
      <summary>
 Returns the coordinates in inches of the visible area of the displayed document.
 </summary>
      <param name="Left">Returns Left position, in inches, of the area.</param>
      <param name="Top">Returns Top position, in inches, of the area.</param>
      <param name="Width">Returns Width, in inches, of the area.</param>
      <param name="Height">Returns Height, in inches, of the area.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.CenterOnRect">
      <summary>
 Moves the page of the displayed document to set the rectangle of selection at the middle of the viewer.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.ReleaseGdPictureImage(System.Int32)">
      <summary>
 Deletes a GdPicture Image from the memory.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to release.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.GetPageThumbnail(System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
 Creates a High Quality thumbnail (returns a GdPicture image) of custom size from a page of the
 displayed document.
 This method fits the image thumbnail within a rectangle of specified dimensions having a specified
 background color.
 This GdPicture image can be used by another GdPictureImaging or GdViewer object.
 </summary>
      <param name="Width">The width of the thumbnail to create.</param>
      <param name="Height">The height of the thumbnail to create.</param>
      <param name="Page">The page of the document.</param>
      <param name="BackColor">Color Object. Background color of the thumbnail.</param>
      <returns>
 GdPicture Image Identifier. The Image thumbnail.Returns 0 if method failed.
 </returns>
      <remarks>
        <para>To delete the created GdPicture image from the memory you must use the ReleaseGdPictureImage() method.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
      <example>
        <code description="Creates a thumbnail of the current page and save it to PNG image." lang="VB.NET">
 Dim ImageID As Integer = GdViewer1.GetPageThumbnail(256, 256, GdViewer1.CurrentPage, GdViewer1.ARGB(255, 180, 180, 180))
 Using oGdPictureImaging As New GdPictureImaging
    oGdPictureImaging.SaveAsPNG(ImageID, "thumbnail.png")
 End Using
 GdViewer1.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdViewer.ReleaseGdPictureImage(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdViewer.GetPageThumbnail(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Creates a High Quality thumbnail (returns a GdPicture image) of custom size from a page of the
 displayed document.
 This method fits the image thumbnail within a rectangle of specified dimensions having a specified
 background color.
 This GdPicture image can be used by another GdPictureImaging or GdViewer object.
 </summary>
      <param name="Width">The width of the thumbnail to create.</param>
      <param name="Height">The height of the thumbnail to create.</param>
      <param name="Page">The page of the document.</param>
      <param name="BackColor">Background color of the thumbnail, as Integer value. A suitable color value can be obtained by using the ARGBI() method.</param>
      <returns>
 GdPicture Image Identifier. The Image thumbnail.Returns 0 if method failed.
 </returns>
      <remarks>
        <para>To delete the created GdPicture image from the memory you must use the ReleaseGdPictureImage() method.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
      <example>
        <code description="Creates a thumbnail of the current page and save it to PNG image." lang="VB.NET">
 Dim ImageID As Integer = GdViewer1.GetPageThumbnail(256, 256, GdViewer1.CurrentPage, GdViewer1.ARGBI(255, 180, 180, 180))
 Using oGdPictureImaging As New GdPictureImaging
    oGdPictureImaging.SaveAsPNG(ImageID, "thumbnail.png")
 End Using
 GdViewer1.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <seealso cref="M:GdPicture12.GdViewer.ReleaseGdPictureImage(System.Int32)" />
      <seealso cref="M:GdPicture12.GdViewer.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)" />
    </member>
    <member name="M:GdPicture12.GdViewer.GetPageThumbnailAsBitmap(System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
 Creates a High Quality thumbnail (returns a Bitmap object) of custom size from a page of the
 displayed document.
 This method fits the image thumbnail within a rectangle of specified dimensions having a specified
 background color.
 </summary>
      <param name="Width">The width of the thumbnail to create.</param>
      <param name="Height">The height of the thumbnail to create.</param>
      <param name="Page">The page of the document.</param>
      <param name="BackColor">Color Object. Background color of the thumbnail.</param>
      <returns>
 The Image thumbnail.
 </returns>
      <example>
        <code description="Creates a thumbnail of the current page and save it to PNG image." lang="VB.NET">
 Using myBitmap As Bitmap = GdViewer1.GetPageThumbnailAsBitmap(256, 256, GdViewer1.CurrentPage, Color.Gray)
    myBitmap.Save("thumbnail.png")
 End Using
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfSearchText(System.String,System.Int32,System.Boolean)">
      <summary>
 Searches the current page of the displayed PDF for a given text string.
 </summary>
      <param name="Text">The text to search for.</param>
      <param name="Occurrence">Optional. The occurrence of the text to search for. 0 to search and
 highlight all occurrences found else 1 to search for the first
 occurrence, 2 for the second... If you specify a value
 different of 0 the area covered by the occurrence found is made the
 current selection.</param>
      <param name="CaseSensitive">True to apply case-sensitive search, else False.</param>
      <returns>
 True if the string has been found, else False.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <example>
        <code description="Searches the current page for a string and highlight the result" lang="VB.NET">
 Dim Text As String = InputBox("Search...")
 Dim Occurrence As Integer = 1
 Dim Left, Top, Width, Height As Single
 Dim TextFound As Boolean = False
 GdViewer1.RemoveAllRegions()
 While GdViewer1.PdfSearchText(GdViewer1.CurrentPage, Text, Occurrence, False, Left, Top, Width, Height)
    TextFound = True
    GdViewer1.AddRegionInches("Region" &amp; Str(Occurrence), Left, Top, Width, Height, ForegroundMixMode.ForegroundMixModeMASKPEN, GdViewer1.ARGB(255, 255, 255, 0))
    Occurrence = Occurrence + 1
 End While
 If TextFound Then
    GdViewer1.Redraw()
 Else
    MessageBox.show("Not found !")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfSearchText(System.String,System.Int32,System.Boolean,System.Boolean)">
      <summary>
 Searches the current page of the displayed PDF for a given text string.
 </summary>
      <param name="Text">The text to search for.</param>
      <param name="Occurrence">Optional. The occurrence of the text to search for. 0 to search and
 highlight all occurrences found else 1 to search for the first
 occurrence, 2 for the second... If you specify a value
 different of 0 the area covered by the occurrence found is made the
 current selection.</param>
      <param name="CaseSensitive">True to apply case-sensitive search, else False.</param>
      <param name="WholeWords">Searches for whole words only.</param>
      <returns>
 True if the string has been found, else False.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <example>
        <code description="Searches the current page for a string and highlight the result" lang="VB.NET">
 Dim Text As String = InputBox("Search...")
 Dim Occurrence As Integer = 1
 Dim Left, Top, Width, Height As Single
 Dim TextFound As Boolean = False
 GdViewer1.RemoveAllRegions()
 While GdViewer1.PdfSearchText(GdViewer1.CurrentPage, Text, Occurrence, False, Left, Top, Width, Height)
    TextFound = True
    GdViewer1.AddRegionInches("Region" &amp; Str(Occurrence), Left, Top, Width, Height, ForegroundMixMode.ForegroundMixModeMASKPEN, GdViewer1.ARGB(255, 255, 255, 0))
    Occurrence = Occurrence + 1
 End While
 If TextFound Then
    GdViewer1.Redraw()
 Else
    MessageBox.show("Not found !")
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfSearchText(System.Int32,System.String,System.Int32,System.Boolean,System.Single@,System.Single@,System.Single@,System.Single@)">
      <summary>
 Searches a specific page of the displayed PDF for an occurrence of a given text string and returns
 its bounding box.
 </summary>
      <param name="Page">The page to search.</param>
      <param name="Text">The text to search for.</param>
      <param name="Occurrence">The occurrence of the text to search for. 1 to search for the first
 occurrence, 2 for the second... 0 is not accepted.</param>
      <param name="CaseSensitive">True to apply case-sensitive search, else False.</param>
      <param name="Left">If the occurrence is found, returns the left position in inches of the
 area covering the text.</param>
      <param name="Top">If the occurrence is found, returns the top position in inches of the
 area covering the text.</param>
      <param name="Width">If the occurrence is found, returns the width in inches of the area
 covering the text.</param>
      <param name="Height">If the occurrence is found, returns the height in inches of the area
 covering the text.</param>
      <returns>
 True if the string has been found, else False.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfSearchText(System.Int32,System.String,System.Int32,System.Boolean,System.Boolean,System.Single@,System.Single@,System.Single@,System.Single@)">
      <summary>
 Searches a specific page of the displayed PDF for an occurrence of a given text string and returns
 its bounding box.
 </summary>
      <param name="Page">The page to search.</param>
      <param name="Text">The text to search for.</param>
      <param name="Occurrence">The occurrence of the text to search for. 1 to search for the first
 occurrence, 2 for the second... 0 is not accepted.</param>
      <param name="CaseSensitive">True to apply case-sensitive search, else False.</param>
      <param name="WholeWords">Searches for whole words only.</param>
      <param name="Left">If the occurrence is found, returns the left position in inches of the
 area covering the text.</param>
      <param name="Top">If the occurrence is found, returns the top position in inches of the
 area covering the text.</param>
      <param name="Width">If the occurrence is found, returns the width in inches of the area
 covering the text.</param>
      <param name="Height">If the occurrence is found, returns the height in inches of the area
 covering the text.</param>
      <returns>
 True if the string has been found, else False.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetTextOccurenceCount(System.Int32,System.String,System.Boolean,System.Boolean)">
      <summary>
 Searches a specific page of the displayed PDF for an occurrence of a given text string and returns the number of occurences found.
 </summary>
      <param name="Page">The page to search.</param>
      <param name="Text">The text to search for.</param>
      <param name="CaseSensitive">True to apply case-sensitive search, else False.</param>
      <param name="WholeWords">Searches for whole words only.</param>
      <returns>The number of occurences found.</returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.GetSelectedText">
      <summary>
 Returns the user selected text.
 </summary>
      <returns>The user selected text.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.GetSelectedTextRegions">
      <summary>
 Returns an array of rectangle which represent the regions bounding the selected text.
 </summary>
      <returns>The regions bounding the selected text.</returns>
      <remarks>Coordinates are expressed in inches starting from the most top-left position in the page.</remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.SelectAllText">
      <summary>
 Selects all text of the current page.
 </summary>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetPageText">
      <summary>
 Returns the text of the current page of the displayed PDF.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetPageText(System.Int32)">
      <summary>
 Returns the text of a specific page of the displayed PDF.
 </summary>
      <param name="Page">The page to extract the text.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetPageWidth">
      <summary>
 Returns the page width in PDF point unit of the selected page of the displayed PDF.
 </summary>
      <returns>
 The page width. Returns 0 if failed.
 </returns>
      <remarks>
        <para> 1 point = 1/72 inch.</para>
        <para> To get the page width in inches: Width = PdfGetPageWidth() / 72</para>
        <para> To get the page width in centimeters: Width = PdfGetPageWidth() / 72 * 2.54</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetPageHeight">
      <summary>
 Returns the page height in PDF point unit of the selected page of the displayed PDF.
 </summary>
      <returns>
 The page width. Returns 0 if failed.
 </returns>
      <remarks>
        <para>1 point = 1/72 inch.</para>
        <para>To get the page height in inches: Height = PdfGetPageHeight() / 72</para>
        <para>To get the page height in centimeters: Height = PdfGetPageHeight() / 72 * 2.54</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetPageTextArea(System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Returns the text in a specific rectangle in the current page of the displayed PDF.
 </summary>
      <param name="Left">Left position of the rectangle in inches.</param>
      <param name="Top">Top position of the rectangle in inches.</param>
      <param name="Width">Width of the rectangle in inches.</param>
      <param name="Height">Height of the rectangle in inches.</param>
      <returns>
 The text within the specified area.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetPageTextArea(System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
 Returns the text in a specific rectangle in a specific page of the displayed PDF.
 </summary>
      <param name="Page">The page to extract the text.</param>
      <param name="Left">Left position of the rectangle in inches.</param>
      <param name="Top">Top position of the rectangle in inches.</param>
      <param name="Width">Width of the rectangle in inches.</param>
      <param name="Height">Height of the rectangle in inches.</param>
      <returns>
 The text within the specified area.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetVersion">
      <summary>
 Returns the version of the displayed PDF.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetMetadata">
      <summary>
 Returns if any, the Metadata of the displayed PDF.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetEncryptionScheme">
      <summary>
 Returns if any, the mode of encryption of the displayed PDF.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetAuthor">
      <summary>
 Returns the author of the displayed PDF.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetTitle">
      <summary>
 Returns the title of the displayed PDF.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetSubject">
      <summary>
 Returns the subject of the displayed PDF.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetKeywords">
      <summary>
 Returns the keywords of the displayed PDF.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetCreator">
      <summary>
 Returns the creator of the displayed PDF.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetProducer">
      <summary>
 Returns the producer of the displayed PDF.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetCreationDate">
      <summary>
 Returns the date of creation of the displayed PDF.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.PdfGetModificationDate">
      <summary>
 Returns the date of modification of the displayed PDF.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.Clear">
      <summary>
 Clears the viewer.
 </summary>
    </member>
    <member name="M:GdPicture12.GdViewer.Redraw">
      <summary>
 Redraws the displayed document.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.CoordViewerToDocument(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>
 Makes a translation of a point coordinates from the viewer space to the document space, in pixel.
 </summary>
      <param name="ViewerLeft">The Left coordinate, in pixel, of the point over the viewer.</param>
      <param name="ViewerTop">The Top coordinate, in pixel, of the point over the viewer.</param>
      <param name="ImageLeft">Returns The Left coordinate, in pixel, of the point over the displayed document.</param>
      <param name="ImageTop">Returns The Top coordinate, in pixel, of the point over the displayed document.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.CoordViewerPixelToDocumentInch(System.Int32,System.Int32,System.Double@,System.Double@)">
      <summary>
 Makes a translation of a point coordinates from the viewer space, in pixel, to the document space, in inch.
 </summary>
      <param name="ViewerLeft">The Left coordinate, in pixel, of the point over the viewer.</param>
      <param name="ViewerTop">The Top coordinate, in pixel, of the point over the viewer.</param>
      <param name="DocumentLeft">Returns The Left coordinate, in inch, of the point over the displayed document.</param>
      <param name="DocumentTop">Returns The Top coordinate, in inch, of the point over the displayed document.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.CoordDocumentToViewer(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>
 Makes a translation of a point coordinates from the image space to the viewer space, in pixel.
 </summary>
      <param name="DocumentLeft">The Left coordinate, in pixel, of the point over the displayed document.</param>
      <param name="DocumentTop">The Top coordinate, in pixel, of the point over the displayed document.</param>
      <param name="ViewerLeft">Returns the Left coordinate, in pixel, of the point over the viewer.</param>
      <param name="ViewerTop">Returns the Top coordinate, in pixel, of the point over the viewer.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.CoordDocumentInchToViewerPixel(System.Double,System.Double,System.Int32@,System.Int32@)">
      <summary>
 Makes a translation of a point coordinates from the document space, in inches, to the viewer space, in pixel.
 </summary>
      <param name="DocumentLeft">The Left coordinate, in inches, of the point over the displayed document.</param>
      <param name="DocumentTop">The Top coordinate, in inches, of the point over the displayed document.</param>
      <param name="ViewerLeft">Returns the Left coordinate, in pixel, of the point over the viewer.</param>
      <param name="ViewerTop">Returns the Top coordinate, in pixel, of the point over the viewer.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.GetMouseLeftInDocument">
      <summary>
 Returns the left coordinate, in pixel, (0 based) of the mouse position over the page of the displayed
 document.
 </summary>
      <remarks>To get the position in inches, just divide the returned result by HorizontalResolution. IE: double posX = object.GetMouseLeftInDocument() / object.HorizontalResolution;.</remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.GetMouseTopInDocument">
      <summary>
 Returns the top coordinate, in pixel, (0 based) of the mouse position over the page of the displayed
 document.
 </summary>
      <remarks>To get the position in inches, just divide the returned result by VerticalResolution. IE: double posY = object.GetMouseTopInDocument() / object.VerticalResolution;.</remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.SetItemMenuCaption(System.Int32,System.String)">
      <summary>
 Changes the caption of an item of the contextual menu.
 </summary>
      <param name="MenuItemIdx">Item Index. Can be:
 <para>1: Pages / Frames</para><para>2: Pages / Frames -&gt; Goto First</para><para>3: Pages / Frames -&gt; Goto Previous</para><para>4: Pages / Frames -&gt; Goto Next</para><para>5: Pages / Frames -&gt; Goto Last</para><para>6: Play Gif</para><para>7: Stop Gif Animation</para><para>8: Rotations - Flips</para><para>9: Rotations - Flips -&gt; Rotate 90°</para><para>10: Rotations - Flips -&gt; Rotate 180°</para><para>11: Rotations - Flips -&gt; Rotate 270°</para><para>12: Rotations - Flips -&gt; Flip X</para><para>13: Rotations - Flips -&gt; RotateFlip 90°</para><para>14: Rotations - Flips -&gt; RotateFlip 180°</para><para>15: Rotations - Flips -&gt; RotateFlip 270°</para><para>16: ScrollBars</para><para>17: Copy Bitmap to Clipboard</para><para>18: Zoom</para><para>19: Zoom -&gt; Zoom in</para><para>20: Zoom -&gt; Zoom out</para><para>21: Zoom -&gt; Zoom 100%</para><para>22: Zoom -&gt; Zoom to selected area</para><para>23: Zoom -&gt; Fit image to viewer (keep aspect ratio)</para><para>24: Zoom -&gt; Fit image to viewer (don't keep aspect ratio)</para><para>25: Zoom -&gt; Fit image to viewer width</para><para>26: Zoom -&gt; Fit image to viewer height</para><para>27: Mouse Mode</para><para>28: Mouse Mode -&gt; Nothing</para><para>29: Mouse Mode -&gt; Hand Pan Tool</para><para>30: Mouse Mode -&gt; Area Selection Tool</para><para>31: Left Click -&gt; Area Zooming Tool</para><para>32: Viewer Quality</para><para>33: Viewer Quality -&gt; Automatic</para><para>34: Viewer Quality -&gt; Quality Low</para><para>35: Viewer Quality -&gt; Quality Bilinear</para><para>36: Viewer Quality -&gt; Quality Bicubic</para><para>37: Viewer Quality -&gt; Quality Bilinear HQ</para><para>38: Viewer Quality -&gt; Quality Bicubic HQ</para><para>39: Mouse Mode -&gt; Magnifier Tool</para><para>40: Copy Text to Clipboard</para></param>
    </member>
    <member name="M:GdPicture12.GdViewer.SetItemMenuEnabled(System.Int32,System.Boolean)">
      <summary>
 Enables or disables an item of the contextual menu.
 </summary>
      <param name="MenuItemIdx">Item Index. Can be:
 <para>1: Pages / Frames</para><para>2: Pages / Frames -&gt; Goto First</para><para>3: Pages / Frames -&gt; Goto Previous</para><para>4: Pages / Frames -&gt; Goto Next</para><para>5: Pages / Frames -&gt; Goto Last</para><para>6: Play Gif</para><para>7: Stop Gif Animation</para><para>8: Rotations - Flips</para><para>9: Rotations - Flips -&gt; Rotate 90°</para><para>10: Rotations - Flips -&gt; Rotate 180°</para><para>11: Rotations - Flips -&gt; Rotate 270°</para><para>12: Rotations - Flips -&gt; Flip X</para><para>13: Rotations - Flips -&gt; RotateFlip 90°</para><para>14: Rotations - Flips -&gt; RotateFlip 180°</para><para>15: Rotations - Flips -&gt; RotateFlip 270°</para><para>16: ScrollBars</para><para>17: Copy Bitmap to Clipboard</para><para>18: Zoom</para><para>19: Zoom -&gt; Zoom in</para><para>20: Zoom -&gt; Zoom out</para><para>21: Zoom -&gt; Zoom 100%</para><para>22: Zoom -&gt; Zoom to selected area</para><para>23: Zoom -&gt; Fit image to viewer (keep aspect ratio)</para><para>24: Zoom -&gt; Fit image to viewer (don't keep aspect ratio)</para><para>25: Zoom -&gt; Fit image to viewer width</para><para>26: Zoom -&gt; Fit image to viewer height</para><para>27: Mouse Mode</para><para>28: Mouse Mode -&gt; Nothing</para><para>29: Mouse Mode -&gt; Hand Pan Tool</para><para>30: Mouse Mode -&gt; Area Selection Tool</para><para>31: Left Click -&gt; Area Zooming Tool</para><para>32: Viewer Quality</para><para>33: Viewer Quality -&gt; Automatic</para><para>34: Viewer Quality -&gt; Quality Low</para><para>35: Viewer Quality -&gt; Quality Bilinear</para><para>36: Viewer Quality -&gt; Quality Bicubic</para><para>37: Viewer Quality -&gt; Quality Bilinear HQ</para><para>38: Viewer Quality -&gt; Quality Bicubic HQ</para><para>39: Mouse Mode -&gt; Magnifier Tool</para><para>40: Copy Text to Clipboard</para></param>
      <param name="Enable">True for enable menu item, else False.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.RemoveItemMenu(System.Int32)">
      <summary>
 Removes an item of the contextual menu.
 </summary>
      <param name="MenuItemIdx">Item Index. Can be:
 <para>1: Pages / Frames</para><para>2: Pages / Frames -&gt; Goto First</para><para>3: Pages / Frames -&gt; Goto Previous</para><para>4: Pages / Frames -&gt; Goto Next</para><para>5: Pages / Frames -&gt; Goto Last</para><para>6: Play Gif</para><para>7: Stop Gif Animation</para><para>8: Rotations - Flips</para><para>9: Rotations - Flips -&gt; Rotate 90°</para><para>10: Rotations - Flips -&gt; Rotate 180°</para><para>11: Rotations - Flips -&gt; Rotate 270°</para><para>12: Rotations - Flips -&gt; Flip X</para><para>13: Rotations - Flips -&gt; RotateFlip 90°</para><para>14: Rotations - Flips -&gt; RotateFlip 180°</para><para>15: Rotations - Flips -&gt; RotateFlip 270°</para><para>16: ScrollBars</para><para>17: Copy Bitmap to Clipboard</para><para>18: Zoom</para><para>19: Zoom -&gt; Zoom in</para><para>20: Zoom -&gt; Zoom out</para><para>21: Zoom -&gt; Zoom 100%</para><para>22: Zoom -&gt; Zoom to selected area</para><para>23: Zoom -&gt; Fit image to viewer (keep aspect ratio)</para><para>24: Zoom -&gt; Fit image to viewer (don't keep aspect ratio)</para><para>25: Zoom -&gt; Fit image to viewer width</para><para>26: Zoom -&gt; Fit image to viewer height</para><para>27: Mouse Mode</para><para>28: Mouse Mode -&gt; Nothing</para><para>29: Mouse Mode -&gt; Hand Pan Tool</para><para>30: Mouse Mode -&gt; Area Selection Tool</para><para>31: Left Click -&gt; Area Zooming Tool</para><para>32: Viewer Quality</para><para>33: Viewer Quality -&gt; Automatic</para><para>34: Viewer Quality -&gt; Quality Low</para><para>35: Viewer Quality -&gt; Quality Bilinear</para><para>36: Viewer Quality -&gt; Quality Bicubic</para><para>37: Viewer Quality -&gt; Quality Bilinear HQ</para><para>38: Viewer Quality -&gt; Quality Bicubic HQ</para><para>39: Mouse Mode -&gt; Magnifier Tool</para><para>40: Copy Text to Clipboard</para></param>
    </member>
    <member name="M:GdPicture12.GdViewer.CopyToClipboard">
      <summary>
 Copies the displayed document into the Clipboard.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.CopyRegionToClipboard(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Copies a region of the displayed document into the Clipboard.
 </summary>
      <param name="SrcLeft">The left source pixel.</param>
      <param name="SrcTop">The top source pixel.</param>
      <param name="Width">Width of the region in pixel.</param>
      <param name="Height">Height of the region in pixel.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.CopyRegionToGdPictureImage(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Copies a region of the displayed document into a GdPicture Image.
 </summary>
      <param name="SrcLeft">The left source pixel.</param>
      <param name="SrcTop">The top source pixel.</param>
      <param name="Width">Width of the region in pixel.</param>
      <param name="Height">Height of the region in pixel.</param>
      <returns>
 0: The image could not be created.
 failed.
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
      <remarks>
        <para>
 The exported GdPicture Image must be released from the memory by the user using the ReleaseGdPictureImage() method.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
      <seealso cref="M:GdPicture12.GdViewer.ReleaseGdPictureImage(System.Int32)" />
    </member>
    <member name="M:GdPicture12.GdViewer.TagCount">
      <summary>
 Returns the number of Tags (Exif, Extra, Thumbnails &amp; GPS) attached to the displayed document.
 </summary>
      <returns>
 The number of tags attached to the displayed document.
 </returns>
      <remarks>
        <para>
 Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
 Thumbnail related TAGs and Gps TAGs.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.IPTCCount">
      <summary>
 Returns the number of IPTC Tags attached to the displayed document.
 </summary>
      <returns>
 Number of IPTC tag.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.TagGetID(System.Int32)">
      <summary>
 Returns an Exif Tag ID attached to the displayed document.
 </summary>
      <param name="TagNo">Must be a value between 1 and the number of Exif TAGs attached to the displayed
 document.</param>
      <returns>
 A member of the Tags enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.TagCount" />
      <remarks>
        <para>
 Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
 Thumbnail related TAGs and Gps TAGs.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.IPTCGetID(System.Int32)">
      <summary>
 Returns an IPTC Tag ID attached to the displayed document.
 </summary>
      <param name="TagNo">Must be a value between 1 and the number of IPTC TAGs attached to the displayed
 document.</param>
      <returns>
 The IPTC tag ID. A member of the IPTCTags enumeration.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.IPTCCount" />
    </member>
    <member name="M:GdPicture12.GdViewer.TagGetName(System.Int32)">
      <summary>
 Returns as string a Tag name attached to the displayed document.
 </summary>
      <param name="TagNo">Must be a value between 1 and the number of Exif TAGs attached to the displayed
 document.</param>
      <returns>
 The name of the tag.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.TagCount" />
      <remarks>
        <para>
 Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
 Thumbnail related TAGs and Gps TAGs.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.TagGetValueString(System.Int32)">
      <summary>
 Returns as string, the value of a Tag attached to the displayed document.
 </summary>
      <param name="TagNo">Must be a value between 1 and the number of Exif TAGs attached to the displayed
 document.</param>
      <returns>
 The value of the tag.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.TagCount" />
      <remarks>
        <para>
 Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
 Thumbnail related TAGs and Gps TAGs
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.IPTCGetValueString(System.Int32)">
      <summary>
 Returns as string, the value of an IPTC Tag attached to the displayed document.
 </summary>
      <param name="TagNo">Must be a value between 1 and the number of IPTC TAGs attached to the displayed
 document.</param>
      <returns>
 The value of the tag.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.GdViewer.IPTCCount" />
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetColorMode">
      <summary>
 Returns the active printer color Mode.
 </summary>
      <returns>
 A member of the PrinterColorMode enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetColorMode(GdPicture12.PrinterColorMode)">
      <summary>
 Sets to the active printer the color mode for the print process.
 </summary>
      <param name="ColorMode">A member of the PrinterColorMode enumeration.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetDocumentName">
      <summary>
 Gets the document name to display during the next print process (for example, in a print status
 dialog box or printer queue) while printing the document.
 </summary>
      <returns>
 The document name to display.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetDocumentName(System.String)">
      <summary>
 Sets the document name to display during the next print process (for example, in a print status
 dialog box or printer queue) while printing the document.
 </summary>
      <param name="DocumentName">The document name to display.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetShowPrintingProgress(System.Boolean)">
      <summary>
 Tells the component to show or hide progress indicator during printing (showed by default).
 </summary>
      <param name="Show">True to show progress indicators printing, else False.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetPaperBin(System.Int32)">
      <summary>
 Sets the paper bin used by the active printer.
 </summary>
      <param name="PaperBin">The paper bin to use.Standard values are:
 - 1: Upper
 - 2: Lower
 - 3: Middle
 - 4: Manual
 - 5: Envelope
 - 6: ManualFeed
 - 7: AutomaticFeed
 - 8: TractorFeed
 - 9: SmallFormat
 - 10: LargeFormat
 - 11: LargeCapacity
 - 14: Cassette
 - 15: FormSource
 - 256 or higher: Custom.</param>
      <returns>
 True if the paper bin has been selected else false (unsupported paper bin).
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetPaperBin(System.Drawing.Printing.PaperSource)">
      <summary>
 Sets the paper bin to be used by the active printer.
 </summary>
      <param name="PaperBin">The paper bin to use. A PaperSource object.</param>
      <returns>
 True if the paper bin has been selected else false (unsupported paper bin).
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetPaperBin">
      <summary>
 Returns the paperbin used by the active printer.
 </summary>
      <returns>The paperbin used. Standard values are:
 - 1: Upper
 - 2: Lower
 - 3: Middle
 - 4: Manual
 - 5: Envelope
 - 6: ManualFeed
 - 7: AutomaticFeed
 - 8: TractorFeed
 - 9: SmallFormat
 - 10: LargeFormat
 - 11: LargeCapacity
 - 14: Cassette
 - 15: FormSource
 - 256 or higher: Custom
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetFromToPage(System.Int32,System.Int32)">
      <summary>
 Ask to the component for the next print process to print a range of page.
 </summary>
      <param name="FromPage">First page to print.</param>
      <param name="ToPage">Last page to print.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetPageSelection(System.String)">
      <summary>
 Ask to the component for the next print process to print a selection of pages.
 </summary>
      <param name="CustomRange">The custom page range. For example "1;4;5" to print pages 1, 4 and 5 or "1-5;10" to print pages from 1 to 5 and page 10. Use * to print all pages.</param>
      <remarks>This method is not compatible with PrintDialog() and PrintDialogFit().</remarks>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetQuality">
      <summary>
 Returns the current quality of the active printer.
 </summary>
      <returns>
 A member of the PrintQuality enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetQuality(GdPicture12.PrintQuality)">
      <summary>
 Sets the quality of the active printer.
 </summary>
      <param name="Quality">A member of the PrintQuality enumeration.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetStat">
      <summary>
 Returns the last Printer status. In case of PrintingException status the PrintGetLastError() method can be used to get more details.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.PrintGetLastError" />
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetLastError">
      <summary>
 Returns the last Printer error description, if any.
 </summary>
      <returns>
 The description of the last printing error.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetCopies(System.Int16)">
      <summary>
 Tell to the active printer the number of copies to print.
 </summary>
      <param name="Copies">The number of copies to print.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetCopies">
      <summary>
 Returns the number of copies to print with the selected printer.
 </summary>
      <returns>
 Number of copies to print.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetDuplexMode(System.Drawing.Printing.Duplex)">
      <summary>
 Sets duplex mode for the selected printer.
 </summary>
      <param name="DuplexMode">A member of the Duplex enumeration.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetDuplexMode">
      <summary>
 Returns the print duplex mode for the selected printer.
 </summary>
      <returns>
 A member of the Duplex enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetCollate(System.Boolean)">
      <summary>
 Sets document collate mode for the selected printer.
 </summary>
      <param name="Collate">True is the printed document is collated, False otherwise..</param>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetCollate">
      <summary>
 Returns whether the printed document is collated.
 </summary>
      <returns>
 True is the printed document is collated, False otherwise.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetOrientation(GdPicture12.PrinterOrientation)">
      <summary>
 Defines the page orientation when printing.
 </summary>
      <param name="Orientation">A member of the PrinterOrientation enumeration.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetOrientation">
      <summary>
 Returns the page orientation when printing.
 </summary>
      <returns>
 A member of the PrinterOrientation enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetActivePrinter">
      <summary>
 Returns the selected printer name.
 </summary>
      <returns>
 The name of the selected printer.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetActivePrinter(System.String)">
      <summary>
 Changes the active printer.
 </summary>
      <param name="PrinterName">The name of the new active printer.</param>
      <returns>
 True if success, else False.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetPrintersCount">
      <summary>
 Returns the number of available printers.
 </summary>
      <returns>
 Number of copies.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetPrinterName(System.Int32)">
      <summary>
 Returns the name of an available printer.
 </summary>
      <param name="PrinterNo">Value between 1 and printer count.</param>
      <returns>
 The name of the printer.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetPrinterSettings(System.Drawing.Printing.PrinterSettings)">
      <summary>
 Sets the current printer settings.
 </summary>
      <param name="PS">A System.Drawing.Printing.PrinterSettings object. The printer settings.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetPrinterSettings">
      <summary>
 Returns the current printer settings.
 </summary>
      <returns>
 A System.Drawing.Printing.PrinterSettings object. The current printer settings.
 </returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintShowPrinterSettingsDialog">
      <summary>
 Prompts the selected printer driver settings dialog.
 </summary>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintShowPrinterSettingsDialog(System.IntPtr)">
      <summary>
 Prompts the selected printer driver settings dialog.
 </summary>
      <param name="HANDLE">A handle to the parent window of the printer-configuration property sheet.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintDialog">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the displayed document.
 </summary>
      <returns>
 True if success, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.PrintGetStat" />
    </member>
    <member name="M:GdPicture12.GdViewer.PrintDialog(GdPicture12.PrintSizeOption)">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the displayed document.
 </summary>
      <param name="PrintSizeMode">A member of the PrintSizeOption specifying the printing size option.</param>
      <returns>
 True if success, else False.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.PrintGetStat" />
    </member>
    <member name="M:GdPicture12.GdViewer.PrintDialog(System.Windows.Forms.IWin32Window)">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the displayed document.
 This method allows to specify the top-level window that will own the modal dialog box.
 </summary>
      <param name="owner">Represents the top-level window that will own the modal dialog box.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintDialog(System.Windows.Forms.IWin32Window,GdPicture12.PrintSizeOption)">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the displayed document.
 This method allows to specify the top-level window that will own the modal dialog box.
 </summary>
      <param name="owner">Represents the top-level window that will own the modal dialog box.</param>
      <param name="PrintSizeMode">A member of the PrintSizeOption specifying the printing size option.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintDialogFit">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the displayed document adjusting pages size to the default paper size.
 </summary>
      <returns>
 True if success, else False.
 </returns>
      <remarks>This method is deprecated. Use PrintDialog(PrintSizeOption.PrintSizeOptionFit) instead.</remarks>
      <seealso cref="M:GdPicture12.GdViewer.PrintGetStat" />
    </member>
    <member name="M:GdPicture12.GdViewer.PrintDialogFit(System.Windows.Forms.IWin32Window)">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the displayed document adjusting pages size to the default paper size.
 This method allows to specify the top-level window that will own the modal dialog box.
 </summary>
      <param name="owner">Represents the top-level window that will own the modal dialog box.</param>
      <returns>
 True if success, else False.
 </returns>
      <remarks>This method is deprecated. Use PrintDialog(owner, PrintSizeOption.PrintSizeOptionFit) instead.</remarks>
      <seealso cref="M:GdPicture12.GdViewer.PrintGetStat" />
    </member>
    <member name="M:GdPicture12.GdViewer.Print">
      <summary>
 Prints the displayed document the active printer.
 </summary>
      <seealso cref="M:GdPicture12.GdViewer.PrintGetStat" />
    </member>
    <member name="M:GdPicture12.GdViewer.Print(GdPicture12.PrintSizeOption)">
      <summary>
 Prints the displayed document the active printer.
 </summary>
      <param name="PrintSizeMode">A member of the PrintSizeOption specifying the printing size option.</param>
      <seealso cref="M:GdPicture12.GdViewer.PrintGetStat" />
    </member>
    <member name="M:GdPicture12.GdViewer.PrintFit">
      <summary>
 Prints the displayed document to the active printer. Adjusts the pages size to the default paper
 size.
 </summary>
      <remarks>This method is deprecated. Use Print(PrintSizeOption.PrintSizeOptionFit) instead.</remarks>
      <seealso cref="M:GdPicture12.GdViewer.PrintGetStat" />
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetStdPaperSize(System.Int32)">
      <summary>
 Sets a standard paper size to use by the active printer.
 </summary>
      <param name="PaperSize">
        <list type="bullet">
          <item>
            <term>1</term>
            <description>Letter, 8.5 x 11 in.</description>
          </item>
          <item>
            <term>2</term>
            <description>Letter Small, 8.5 x 11 in.</description>
          </item>
          <item>
            <term>3</term>
            <description>Tabloid, 11 x 17 in.</description>
          </item>
          <item>
            <term>4</term>
            <description>Ledger, 17 x 11 in.</description>
          </item>
          <item>
            <term>5</term>
            <description>Legal, 8.5 x 14 in.</description>
          </item>
          <item>
            <term>6</term>
            <description>Statement, 5 1/2 x 8 1/2 in.</description>
          </item>
          <item>
            <term>7</term>
            <description>Executive, 7 1/2 x 10 1/2 in.</description>
          </item>
          <item>
            <term>8</term>
            <description>A3, 297 x 420 mm</description>
          </item>
          <item>
            <term>9</term>
            <description>A4, 210 x 297 mm</description>
          </item>
          <item>
            <term>10</term>
            <description>A4 Small, 210 x 297 mm</description>
          </item>
          <item>
            <term>11</term>
            <description>A5, 148 x 210 mm</description>
          </item>
          <item>
            <term>12</term>
            <description>B4, 250 x 354 mm</description>
          </item>
          <item>
            <term>13</term>
            <description>B5, 182 x 257 mm</description>
          </item>
          <item>
            <term>14</term>
            <description>Folio, 8.5 x 13 in.</description>
          </item>
          <item>
            <term>15</term>
            <description>Quarto, 215 x 275 mm</description>
          </item>
          <item>
            <term>16</term>
            <description>10 x 14 in.</description>
          </item>
          <item>
            <term>17</term>
            <description>11 x 17 in.</description>
          </item>
          <item>
            <term>18</term>
            <description>Note, 8.5 x 11 in.</description>
          </item>
          <item>
            <term>19</term>
            <description>Envelope #9, 3 7/8 x 8 7/8 in.</description>
          </item>
          <item>
            <term>20</term>
            <description>Envelope #10, 4 1/8 x 9.5 in.</description>
          </item>
          <item>
            <term>21</term>
            <description>Envelope #11, 4.5 x 10 3/8 in.</description>
          </item>
          <item>
            <term>22</term>
            <description>Envelope #12, 4.5 x 11 in.</description>
          </item>
          <item>
            <term>23</term>
            <description>Envelope #14, 5 x 11.5 in.</description>
          </item>
          <item>
            <term>24</term>
            <description>C size sheet</description>
          </item>
          <item>
            <term>25</term>
            <description>D size sheet</description>
          </item>
          <item>
            <term>26</term>
            <description>E size sheet</description>
          </item>
          <item>
            <term>27</term>
            <description>Envelope DL, 110 x 220 mm</description>
          </item>
          <item>
            <term>28</term>
            <description>Envelope C5, 162 x 229 mm</description>
          </item>
          <item>
            <term>29</term>
            <description>Envelope C3, 324 x 458 mm</description>
          </item>
          <item>
            <term>30</term>
            <description>Envelope C4, 229 x 324 mm</description>
          </item>
          <item>
            <term>31</term>
            <description>Envelope C6, 114 x 162 mm</description>
          </item>
          <item>
            <term>32</term>
            <description>Envelope C65, 114 x 229 mm</description>
          </item>
          <item>
            <term>33</term>
            <description>Envelope B4, 250 x 353 mm</description>
          </item>
          <item>
            <term>34</term>
            <description>Envelope B5, 176 x 250 mm</description>
          </item>
          <item>
            <term>35</term>
            <description>Envelope B6, 176 x 125 mm</description>
          </item>
          <item>
            <term>36</term>
            <description>Envelope, 110 x 230 mm</description>
          </item>
          <item>
            <term>37</term>
            <description>Envelope Monarch, 3 7/8 x 7.5 in.</description>
          </item>
          <item>
            <term>38</term>
            <description>Envelope, 3 5/8 x 6.5 in.</description>
          </item>
          <item>
            <term>39</term>
            <description>U.S. Standard Fanfold, 14 7/8 x 11 in.</description>
          </item>
          <item>
            <term>40</term>
            <description>German Standard Fanfold, 8.5 x 12 in.</description>
          </item>
          <item>
            <term>41</term>
            <description>German Legal Fanfold, 8 1/2 x 13 in.</description>
          </item>
          <item>
            <term>42 to 68</term>
            <description>Less-common international sizes.</description>
          </item>
          <item>
            <term>Greater than 118</term>
            <description>A custom paper size.</description>
          </item>
        </list>
      </param>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetPaperSize(System.Drawing.Printing.PaperSize)">
      <summary>
 Sets the paper size to be used by the active printer.
 </summary>
      <param name="PaperSize">Paper size. A PaperSize object.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetUserPaperSize(System.Single,System.Single)">
      <summary>
 Sets a custom paper size to use by the active printer.
 </summary>
      <param name="PaperWidth">Custom paper width in Inches.</param>
      <param name="PaperHeight">Custom paper height in Inches.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetPaperHeight">
      <summary>
 Gets the paper height used by the active printer.
 </summary>
      <returns>
 The paper height in Inches.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.PrintGetPaperSize" />
      <seealso cref="M:GdPicture12.GdViewer.PrintGetPaperWidth" />
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetPaperWidth">
      <summary>
 Gets the paper width used by the active printer.
 </summary>
      <returns>
 The paper width in Inches.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.PrintGetPaperSize" />
      <seealso cref="M:GdPicture12.GdViewer.PrintGetPaperHeight" />
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetAlignment">
      <summary>
 Gets the image alignment into the page during a print process .
 </summary>
      <returns>
 A member of the PrintAlignment enumeration.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.PrintSetAlignment(GdPicture12.PrintAlignment)" />
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetAlignment(GdPicture12.PrintAlignment)">
      <summary>
 Sets the image alignment into the page during a print process.
 </summary>
      <param name="ImageAlignment">A member of the PrintAlignment enumeration.</param>
      <seealso cref="M:GdPicture12.GdViewer.PrintGetAlignment" />
    </member>
    <member name="M:GdPicture12.GdViewer.PrintSetAutoRotation(System.Boolean)">
      <summary>
 Determines if the object rotate automatically pages to fit on the output medium.
 </summary>
      <param name="AutoRotation">True for automatic rotation, else False.</param>
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetPaperSize">
      <summary>
 Returns the current paper size of the active printer.
 </summary>
      <returns>
 Paper size constant. Can be:
 - 1: Letter, 8½ x 11 in.
 - 2: Letter Small, 8½ x 11 in.
 - 3: Tabloid, 11 x 17 in.
 - 4: Ledger, 17 x 11 in.
 - 5: Legal, 8 ½ x 14 in.
 - 6: Statement, 5 1/2 x 8 1/2 in.
 - 7: Executive, 7 1/2 x 10 1/2 in.
 - 8: A3, 297 x 420 mm
 - 9: A4, 210 x 297 mm
 - 10: A4 Small, 210 x 297 mm
 - 11: A5, 148 x 210 mm
 - 12: B4, 250 x 354 mm
 - 13: B5, 182 x 257 mm
 - 14: Folio, 8 ½ x 13 in.
 - 15: Quarto, 215 x 275 mm
 - 16: 10 x 14 in.
 - 17: 11 x 17 in.
 - 18: Note, 8 ½ x 11 in.
 - 19: Envelope #9, 3 7/8 x 8 7/8 in.
 - 20: Envelope #10, 4 1/8 x 9 ½ in.
 - 21: Envelope #11, 4 ½ x 10 3/8 in.
 - 22: Envelope #12, 4 ½ x 11 in.
 - 23: Envelope #14, 5 x 11 ½ in.
 - 24: C size sheet
 - 25: D size sheet
 - 26: E size sheet
 - 27: Envelope DL, 110 x 220 mm
 - 28: Envelope C5, 162 x 229 mm
 - 29: Envelope C3, 324 x 458 mm
 - 30: Envelope C4, 229 x 324 mm
 - 31: Envelope C6, 114 x 162 mm
 - 32: Envelope C65, 114 x 229 mm
 - 33: Envelope B4, 250 x 353 mm
 - 34: Envelope B5, 176 x 250 mm
 - 35: Envelope B6, 176 x 125 mm
 - 36: Envelope, 110 x 230 mm
 - 37: Envelope Monarch, 3 7/8 x 7 ½ in.
 - 38: Envelope, 3 5/8 x 6 ½ in.
 - 39: U.S. Standard Fanfold, 14 7/8 x 11 in.
 - 40: German Standard Fanfold, 8 ½ x 12 in.
 - 41: German Legal Fanfold, 8 1/2 x 13 in.
 - 42 to 68: Less-common international sizes.
 - Greater than 118: A custom paper size.
 </returns>
      <seealso cref="M:GdPicture12.GdViewer.PrintGetPaperWidth" />
      <seealso cref="M:GdPicture12.GdViewer.PrintGetPaperHeight" />
    </member>
    <member name="M:GdPicture12.GdViewer.PrintGetMargins(System.Single@,System.Single@)">
      <summary>
 Gets the physical margins of the active printer.
 </summary>
      <param name="LeftMargin">Returns the left physical margin in inches.</param>
      <param name="TopMargin">Returns the top physical margin in inches.</param>
    </member>
    <member name="P:GdPicture12.GdViewer.EnableTextSelection">
      <summary>
 Specifies if text selection is enabled. Holding Alt key during selection permits to switch to column selection mode instead of the default line selection mode.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.PdfRasterizerEngine">
      <summary>
 Defines the rasterizer engine to use for PDF rendering purposes.
 Default value is PdfRasterizerEngine.PdfRasterizerEngineHybrid.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.AnnotationDropShadow">
      <summary>
 Specifies if GdPicture/XMP annotation must be rendered with a drop shadow effect on the screen. Default value is false.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.AllowDropFile">
      <summary>
 Specifies if the user is able to drop files from the explorer to the control. Default value is false.
 </summary>
      <remarks>When set to true and when file is dropped within the viewer the DropFile event is raised.</remarks>
      <seealso cref="E:GdPicture12.GdViewer.DropFile" />
    </member>
    <member name="P:GdPicture12.GdViewer.HQAnnotationRendering">
      <summary>
 Specifies if annotations must be rendered in High Quality mode.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.EnableICM">
      <summary>
 Specifies if color correction is used for document embedding an icc profile. False by default.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.HScrollVisible">
      <summary>
 Returns if the horizontal scrollbar is visible or not.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.VScrollVisible">
      <summary>
 Returns if the vertical scrollbar is visible or not.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.ZoomCenterAtMousePosition">
      <summary>
 Specifies if during a zoom operation the document must be centered at the current mouse position.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.Graphics">
      <summary>
 The graphics object of the viewer.
 </summary>
      <remarks>The Graphics property is deprecated, please use the OnPaint event instead</remarks>
    </member>
    <member name="P:GdPicture12.GdViewer.EnabledProgressBar">
      <summary>
 Specifies if during a operation raising a progression callback (IE: saving document, loading from HTTP), a progress bar is displayed in the control.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.PdfShowDialogForPassword">
      <summary>
 If the PDF to open is protected, the control will prompt the user for a password. Turn this property
 to False to use your own dialog box (you will have to catch the PDFPasswordRequest event).
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.PdfShowOpenFileDialogForDecryption">
      <summary>
 If the PDF to open is protected by certificate, the control will prompt the user for certificate selection from a file. Turn this property
 to False to use your own dialog box (you will have to catch the PdfCertificateRequest event).
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.PdfEnableFileLinks">
      <summary>
 PDF documents are often designed to contain links to other PDF.
 Such option is usually provided through a GoToR action handled by special objects such as bookmarks and form field links.
 This property turned to True allows the viewer to automatically navigates to the linked document, if any.
 Such action can be performed when the user clicks a node of a linked BookmarkTree object or a form field on the Viewer. The PdfFileNavigation event is fired before displaying the new document.
 Default value is True.
 </summary>
      <seealso cref="E:GdPicture12.GdViewer.PdfFileNavigation" />
    </member>
    <member name="P:GdPicture12.GdViewer.PdfIncreaseTextContrast">
      <summary>
 Specifies if the rendering engine should increase text contrast on low zoom in order to enhance readability.
 This feature can decrease rendering speed performances on old machines.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.PdfVerifyDigitalCertificates">
      <summary>
 Specifies if the viewer is responsible to check digital certificate when rendering a PDF document containing a digital signature.
 Depending on the outcome of the certificate audit, the visible appearances associated to each digital signature could be adjusted.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.Cursor">
      <summary>
 The cursor that appears when the pointer moves over the viewer. It is recommended to not use this method.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.ScrollBars">
      <summary>
 Specifies if scrollbars can be displayed or not within the viewer.
 If true, scrollbars appears when the area to render is larger than the control.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.OptimizeDrawingSpeed">
      <summary>
 This property is obsolete, please use the DisplayQualityAuto instead.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.ForceScrollBars">
      <summary>
 Turn this property to True to force the viewer to always displaying scrollbars.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.EnableMenu">
      <summary>
 To enable or disable the viewer contextual menu.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.Zoom">
      <summary>
 The current factor of zoom applied during page rendering operations.
 1 for 100%, 1.5 for 150%, 2 for 200%...
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.ZoomMax">
      <summary>
 The maximum zoom factor which can be used with the displayed document.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.PageRotation">
      <summary>
 The current page rotation of the displayed document.
 </summary>
      <value>A member of the RotateFlipType enumeration.</value>
    </member>
    <member name="P:GdPicture12.GdViewer.ViewRotation">
      <summary>
 The current rotation of the control.
 </summary>
      <value>A member of the RotateFlipType enumeration.</value>
    </member>
    <member name="P:GdPicture12.GdViewer.PageRenderRotation">
      <summary>
 The current page rendering rotation of the displayed document.
 </summary>
      <remarks>This rotation is equal to ViewRotation + PageRotation.</remarks>
      <value>A member of the RotateFlipType enumeration.</value>
    </member>
    <member name="P:GdPicture12.GdViewer.PageWidth">
      <summary>
 Width, in pixel, of the current page of the displayed document.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.PageHeight">
      <summary>
 Height, in pixel, of the current page of the displayed document.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.MouseMode">
      <summary>
 Defines the viewer mouse mode.
 Default value is ViewerMouseMode.MouseModePan.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.MagnifierWidth">
      <summary>
 Defines the width, in pixel, of the magnifier.
 Default value is 160.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.MagnifierHeight">
      <summary>
 Defines the height, in pixel, of the magnifier.
 Default value is 90.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.MagnifierZoomX">
      <summary>
 Defines the horizontal zoom (or scale) of the, of the magnifier. IE: 2.0 defines a zoom of 200%.
 Default value is 2.0.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.MagnifierZoomY">
      <summary>
 Defines the vertical zoom (or scale) of the, of the magnifier. IE: 2.0 defines a zoom of 200%.
 Default value is 2.0.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.ZoomStep">
      <summary>
 Defines the percentage of increasing or decreasing of the level of zoom for Zoom In &amp; Zoom Out
 operations.
 Default value is 25.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.RectBorderSize">
      <summary>
 Defines the border size, in pixel, of the rectangle of area selection.
 Default value is 1.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.ScrollSmallChange">
      <summary>
 Gets or sets a value to be added to or subtracted from the Value property when a scrollbar is moved a small distance.
 Default value is 1.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.ScrollLargeChange">
      <summary>
 Gets or sets a value to be added to or subtracted from the Value property when a scrollbar is moved a large distance.
 Default value is 50.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.VerticalResolution">
      <summary>
 Vertical resolution in DPI (Dot Per Inch) of the current page of the displayed document.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.HorizontalResolution">
      <summary>
 Horizontal resolution in DPI (Dot Per Inch) of the current page of the displayed document.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.PageCount">
      <summary>
 Number of pages in the displayed document.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.CurrentPage">
      <summary>
 Current page of the displayed document. (Starts from 1).
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.SilentMode">
      <summary>
 Turn this property to True to deactivate error reporting through MessageBox.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.ForceTemporaryModeForPDF">
      <summary>
 Forces the viewer to use a temporary copy when it displays a PDF.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.ForceTemporaryModeForImage">
      <summary>
 Forces the viewer to use a temporary copy when it displays an image.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.IgnoreDocumentResolution">
      <summary>
 Set to True to ignore vertical &amp; horizontal resolutions measurement when the viewer displays an
 image.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.LockViewer">
      <summary>
 Turn this property to True to avoid viewer refreshes.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.ZoomMode">
      <summary>
 Zoom mode used by the viewer.
 Default value is ViewerZoomMode.ZoomMode100.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.EnableMouseWheel">
      <summary>
 Specifies whether the object can change zoom during to the mouse Wheel events.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.DocumentAlignment">
      <summary>
 Default page alignment within the viewer when the area of the viewer if smaller than the displayed document in its current zoom configuration.
 Setting this property to DocumentAlignmentTopLeft has the effect to display  the most top-left part of the displayed page during "Zoom In" operations.
 Default value is ViewerDocumentAlignment.DocumentAlignmentMiddleCenter.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.DocumentPosition">
      <summary>
 Default page position within the viewer when the rendering area of the displayed document in its current zoom configuration if smaller than then area of the viewer.
 Default value is ViewerDocumentPosition.DocumentPositionMiddleCenter.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.AnimateGIF">
      <summary>
 Specifies if by default the viewer must animate loaded multiframe GIF images.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.DisplayQuality">
      <summary>
 Defines the level of displaying quality.
 Default value is DisplayQuality.DisplayQualityBicubicHQ.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.DisplayQualityAuto">
      <summary>
 Specifies if the level of displaying quality is automatic or not.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.PdfDisplayFormField">
      <summary>
 Specifies if the viewer renders form fields and annotations included into PDF.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.PdfEnableLinks">
      <summary>
 By default, if a hyperlink of a PDF document is clicked, the control will follow the link. Turn this
 property to False to disable this behavior.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.KeepDocumentPosition">
      <summary>
 Specifies if the viewer must keep the page position when the displayed page changes or when a new document is loaded.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.MouseWheelMode">
      <summary>
 Defines the Mouse Wheel method.
 Default value is ViewerMouseWheelMode.MouseWheelModeZoom.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.Gamma">
      <summary>
 Defines the gamma value, which represents the brightness of the displayed document.
 Gamma values range from 0.1 to 5.0 (normally 0.1 to 2.2), where a value less than 1 lightens the
 image, a value of 1 leaves the image unaffected and an value greater than 1 darkens the image.
 Default value is 1.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.RectIsEditable">
      <summary>
 Determines if the rectangle of area selection can be moved and resized by the user.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.RegionsAreEditable">
      <summary>
 Determines if regions can be moved and resized by the user.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.ContinuousViewMode">
      <summary>
 For multipage documents viewing, determines if the viewer displays automatically the next or the
 previous page when the user scroll the current page.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.MouseButtonForMouseMode">
      <summary>
 Defines the mouse button used for the MouseMode configuration.
 Default value is MouseButton.MouseButtonLeft.
 </summary>
    </member>
    <member name="P:GdPicture12.GdViewer.RectBorderColor">
      <summary>
 Defines the color of the rectangle of area selection. For COM interop usage, please consider the SetRectBorderColor() method.
 Default value is Color.Black.
 </summary>
    </member>
    <member name="E:GdPicture12.GdViewer.DropFile">
      <summary>
 Occurs when a file is dropped in the Viewer.
 </summary>
      <remarks>The AllowDropFile property must be turned to True to use this event.</remarks>
      <param name="File">The path of the file dropped in the Viewer.</param>
      <seealso cref="E:GdPicture12.GdViewer.DropFile" />
    </member>
    <member name="E:GdPicture12.GdViewer.SavingProgress">
      <summary>
 Occurs when a document is being saved.
 </summary>
      <param name="PageNo">The number of the page (1-based) that is currently in creation.</param>
      <param name="PageCount">The total number of pages to be saved.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.OnCustomAnnotationPaint">
      <summary>
 Occurs when a custom annotation must be rendered.
 </summary>
      <param name="Annot">The custom annotation object to render.</param>
      <param name="g">The graphics object to render the custom annotation appearance.</param>
      <remarks>
        <para>
 This event is not supported by the COM Interop edition.
 </para>
        <para>
 This event is used in the "Annotations" Demo. Please check appendix "Finding Demo Applications" for more information.
 </para>
        <para>
 The measurement unit, for dimensions and sizes, is expressed in inches.
 </para>
        <para>
 The rotation, if any, is handled by the component which automatically set to required transformation.
 </para>
        <para>
 You have to render the annotation's appearance in the bounding box defined by [x, y, w, h], where x and y define the coordinates of the top-left corner of the box  equal to (Annot.Left - Annot.Width / 2, Annot.Top - Annot.Height / 2), w defines the width equal to Annot.Width and y the height equal to Annot.Height.
 </para>
      </remarks>
      <example>
        <code description="Rendering custom annotations." lang="VB.NET">
 Private Sub GdViewer1_OnCustomAnnotationPaint(ByVal Annot As GdPicture12.AnnotationCustom, ByVal g As System.Drawing.Graphics) Handles GdViewer1.OnCustomAnnotationPaint
 Select Case Annot.ModelID
 Case 1 'triangle annotation, previously defined by the AddCustomAnnotInteractive() method.
 Using gp As New Drawing.Drawing2D.GraphicsPath
    gp.AddLine(New PointF(Annot.Left - Annot.Width / 2, Annot.Top + Annot.Height / 2), New PointF(Annot.Left, Annot.Top - Annot.Height / 2))
    gp.AddLine(New PointF(Annot.Left, Annot.Top - Annot.Height / 2), New PointF(Annot.Left + Annot.Width / 2, Annot.Top + Annot.Height / 2))
    gp.CloseFigure()
    g.DrawPath(New Pen(Brushes.Red, 0.1), gp)
 End Using
 Case 2 'cross annotation, previously defined by the AddCustomAnnotInteractive() method.
 g.DrawLine(New Pen(Brushes.Red, 0.1), New PointF(Annot.Left - Annot.Width / 2, Annot.Top - Annot.Height / 2), New PointF(Annot.Left + Annot.Width / 2, Annot.Top + Annot.Height / 2))
 g.DrawLine(New Pen(Brushes.Red, 0.1), New PointF(Annot.Left - Annot.Width / 2, Annot.Top + Annot.Height / 2), New PointF(Annot.Left + Annot.Width / 2, Annot.Top - Annot.Height / 2))
 End Select
 End Sub
 </code>
      </example>
    </member>
    <member name="E:GdPicture12.GdViewer.AnnotationStartEditingText">
      <summary>
 Occurs when the user is editing the text content of a GdPicture/XMP annotation by double-clicking it.
 </summary>
      <param name="AnnotationIdx">The index of the selected annotation.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.AnnotationEndEditingText">
      <summary>
 Occurs when the user finished to edit the text content of a GdPicture/XMP annotation by leaving it.
 </summary>
      <param name="AnnotationIdx">The index of the selected annotation.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.AnnotationSelected">
      <summary>
 Occurs when a GdPicture/XMP annotation has been selected by the user.
 </summary>
      <param name="AnnotationIdx">The index of the selected annotation.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.AnnotationClicked">
      <summary>
 Occurs when a GdPicture/XMP annotation has been clicked by the user.
 </summary>
      <param name="AnnotationIdx">The index of the clicked annotation.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.BeforeAnnotationAddedByUser">
      <summary>
 Occurs when a GdPicture/XMP annotation has been added by the user. This event occurs in mouse down action,
 therefore it can be particularly useful to change some properties of the new annotation to add before rendering it to the screen. See example.
 </summary>
      <param name="AnnotationIdx">The index of the annotation.</param>
      <example>
        <code description="Catch the BeforeAnnotationAddedByUser event to modify the background color of the new added sticky-note annotations." lang="VB.NET">
 Private Sub GdViewer1_AnnotationAddedByUser(ByVal AnnotationIdx As Integer) Handles GdViewer1.BeforeAnnotationAddedByUser
 Dim annot As GdPicture.Annotation = GdViewer1.GetAnnotationFromIdx(AnnotationIdx)
 If TypeOf annot Is AnnotationStickyNote Then
    DirectCast(annot, AnnotationStickyNote).FillColor = Color.Beige
    GdViewer1.DisplayTextEditBox(AnnotationIdx)
 End If
 </code>
      </example>
    </member>
    <member name="E:GdPicture12.GdViewer.AnnotationAddedByUser">
      <summary>
 Occurs when a GdPicture/XMP annotation has been added  by the user.This event occurs in mouse up action.
 </summary>
      <param name="AnnotationIdx">The index of the annotation.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.AnnotationRotated">
      <summary>
 Occurs when a GdPicture/XMP annotation is rotated  by the user
 </summary>
      <param name="AnnotationIdx">The index of the annotation.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.AnnotationMoved">
      <summary>
 Occurs when a GdPicture/XMP annotation is moved  by the user
 </summary>
      <param name="AnnotationIdx">The index of the annotation.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.AnnotationResized">
      <summary>
 Occurs when a GdPicture/XMP annotation is resized  by the user
 </summary>
      <param name="AnnotationIdx">The index of the annotation.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.PdfPasswordRequest">
      <summary>
 Occurs if a password is needed to decrypt the loaded PDF. This event is raised when the
 PdfShowDialogForPassword property has been set to False.
 </summary>
      <param name="PassWord">The password to decrypt the PDF.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.PdfCertificateRequest">
      <summary>
 Occurs if a certificate is needed to decrypt the loaded PDF. This event is raised when the
 PdfShowDialogForPassword property has been set to False.
 </summary>
      <param name="PassWord">The password to decrypt the PDF.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.PdfFileNavigation">
      <summary>
 Occurs when a PDF GoToR action is triggered to open a new document.
 See the PdfEnableFileLinks property for more information.
 </summary>
      <param name="FilePath">The path of the file to navigate to.</param>
      <param name="Cancel">Allows to cancel the subsequent file navigation action when this parameter is turned to True.</param>
      <seealso cref="P:GdPicture12.GdViewer.PdfEnableFileLinks" />
    </member>
    <member name="E:GdPicture12.GdViewer.PdfLaunchAction">
      <summary>
 Occurs when a PDF launch action is triggered to start an application, usually to open a file.
 </summary>
      <param name="ActionType">The type the the launch action. A member of the PdfActionLaunchOperation enumeration. </param>
      <param name="FilePath">The path of the application to be launched or the document to be opened or printed.</param>
      <param name="Cancel">Allows to cancel the subsequent application launching action when this parameter is turned to True.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.PdfUriNavigation">
      <summary>
 Occurs when a PDF URI action is triggered to resolve a uniform resource identifier.
 See the PdfEnableFileLinks property for more information.
 </summary>
      <param name="URI">A uniform resource identifier (URI).
 A string that identifies a resource on the Internet—typically a file that is the destination of a hypertext link, although it can also resolve to a query or other entity.
 (URIs are described in Internet RFC 2396, Uniform Resource Identifiers (URI).</param>
      <param name="Cancel">Allows to cancel the subsequent URI navigation action when this parameter is turned to True.</param>
      <seealso cref="P:GdPicture12.GdViewer.PdfEnableFileLinks" />
    </member>
    <member name="E:GdPicture12.GdViewer.BeforePrintPage">
      <summary>
 Occurs before a page is printed.
 </summary>
      <param name="Page">The page to be print.</param>
      <param name="PageLeft">The number of page remaining.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.AfterPrintPage">
      <summary>
 Occurs after a page is printed.
 </summary>
      <param name="Page">The page to be print.</param>
      <param name="PageLeft">The number of page remaining.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.DataReceived">
      <summary>
 Occurs when data has received after a call of the DisplayFromHTTP() or DisplayFromFTP() method.
 </summary>
      <param name="PercentProgress">The percentage of the data transferred.</param>
      <param name="SizeLeft">The total size of the data left to transfer in byte.</param>
      <param name="TotalLength">The total size of the data to transfer in byte.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.TransferEnded">
      <summary>
 Occurs when the latest asynchronous web transfer is done.
 </summary>
      <param name="status">A member of the GdPictureStatus enumeration.</param>
      <param name="Download">True if latest transfer was a download, else False (upload).</param>
    </member>
    <member name="E:GdPicture12.GdViewer.AfterZoomChange">
      <summary>
 Occurs after changing level of zoom.
 </summary>
    </member>
    <member name="E:GdPicture12.GdViewer.BeforeZoomChange">
      <summary>
 Occurs before changing level of zoom.
 </summary>
    </member>
    <member name="E:GdPicture12.GdViewer.ScrollViewer">
      <summary>
 Occurs when the user scrolls through the client area using the vertical or the horizontal scrollbar.
 </summary>
    </member>
    <member name="E:GdPicture12.GdViewer.RectEditedByUser">
      <summary>
 Occurs when the rectangle of area selection is edited by the user.
 </summary>
    </member>
    <member name="E:GdPicture12.GdViewer.RegionEditedByUser">
      <summary>
 Occurs when a region is edited by the user.
 </summary>
      <param name="RegionID">The ID of the edited region.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.RegionSelectedByUser">
      <summary>
 Occurs when a region is selected by the user.
 </summary>
      <param name="RegionID">The ID of the edited region.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.Rotation">
      <summary>
 Occurs when the displayed document is rotated.
 </summary>
      <param name="Rotation">A member of the RotateFlipType enumeration.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.BeforeRotation">
      <summary>
 Occurs before the displayed document is rotated.
 </summary>
      <param name="Rotation">A member of the RotateFlipType enumeration.</param>
    </member>
    <member name="E:GdPicture12.GdViewer.PageChanged">
      <summary>
 Occurs when changing page of the displayed document.
 </summary>
    </member>
    <member name="E:GdPicture12.GdViewer.BeforeDocumentChange">
      <summary>
 Occurs before changing displayed document.
 </summary>
    </member>
    <member name="E:GdPicture12.GdViewer.AfterDocumentChange">
      <summary>
 Occurs after changing displayed document.
 </summary>
    </member>
    <member name="E:GdPicture12.GdViewer.DocumentClosed">
      <summary>
 Occurs when the displayed document is closed.
 </summary>
    </member>
    <member name="E:GdPicture12.GdViewer.PageDisplayed">
      <summary>
 Occurs when a page has been successfully displayed.
 </summary>
    </member>
    <member name="E:GdPicture12.GdViewer.ClickMenu">
      <summary>
 Occurs when an item of the contextual menu has been clicked.
 </summary>
      <param name="MenuItem">Item Index. Can be:
 <para>1: Pages / Frames</para><para>2: Pages / Frames -&gt; Goto First</para><para>3: Pages / Frames -&gt; Goto Previous</para><para>4: Pages / Frames -&gt; Goto Next</para><para>5: Pages / Frames -&gt; Goto Last</para><para>6: Play Gif</para><para>7: Stop Gif Animation</para><para>8: Rotations - Flips</para><para>9: Rotations - Flips -&gt; Rotate 90°</para><para>10: Rotations - Flips -&gt; Rotate 180°</para><para>11: Rotations - Flips -&gt; Rotate 270°</para><para>12: Rotations - Flips -&gt; Flip X</para><para>13: Rotations - Flips -&gt; RotateFlip 90°</para><para>14: Rotations - Flips -&gt; RotateFlip 180°</para><para>15: Rotations - Flips -&gt; RotateFlip 270°</para><para>16: ScrollBars</para><para>17: Copy Bitmap to Clipboard</para><para>18: Zoom</para><para>19: Zoom -&gt; Zoom in</para><para>20: Zoom -&gt; Zoom out</para><para>21: Zoom -&gt; Zoom 100%</para><para>22: Zoom -&gt; Zoom to selected area</para><para>23: Zoom -&gt; Fit image to viewer (keep aspect ratio)</para><para>24: Zoom -&gt; Fit image to viewer (don't keep aspect ratio)</para><para>25: Zoom -&gt; Fit image to viewer width</para><para>26: Zoom -&gt; Fit image to viewer height</para><para>27: Mouse Mode</para><para>28: Mouse Mode -&gt; Nothing</para><para>29: Mouse Mode -&gt; Hand Pan Tool</para><para>30: Mouse Mode -&gt; Area Selection Tool</para><para>31: Left Click -&gt; Area Zooming Tool</para><para>32: Viewer Quality</para><para>33: Viewer Quality -&gt; Automatic</para><para>34: Viewer Quality -&gt; Quality Low</para><para>35: Viewer Quality -&gt; Quality Bilinear</para><para>36: Viewer Quality -&gt; Quality Bicubic</para><para>37: Viewer Quality -&gt; Quality Bilinear HQ</para><para>38: Viewer Quality -&gt; Quality Bicubic HQ</para><para>39: Mouse Mode -&gt; Magnifier Tool</para><para>40: Copy Text to Clipboard</para></param>
    </member>
    <member name="M:GdPicture12.BookmarksTree.LoadFromGdViewer(System.Object)">
      <summary>
 Defines the GdViewer object to be linked with the control.
 This method is for COM interoperability purpose. It is equivalent to BookmarksTree.GdViewer = GdViewer.
 </summary>
      <param name="GdViewer">A GdViewer object.</param>
    </member>
    <member name="M:GdPicture12.BookmarksTree.ReloadBookmarks">
      <summary>
 Forces the control to reload all bookmarks from the currently handled document.
 </summary>
    </member>
    <member name="M:GdPicture12.BookmarksTree.SetNodesBitmap(System.Int32)">
      <summary>
 Changes the default nodes bitmap.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. This image can be subsequently released from the memory.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.BookmarksTree.ExpandAll">
      <summary>
 Open every node in the tree.
 </summary>
      <seealso cref="M:GdPicture12.BookmarksTree.CollapseAll" />
    </member>
    <member name="M:GdPicture12.BookmarksTree.CollapseAll">
      <summary>
 Close every node in the tree.
 </summary>
      <seealso cref="M:GdPicture12.BookmarksTree.ExpandAll" />
    </member>
    <member name="M:GdPicture12.BookmarksTree.SetDefaultText(System.Int32,System.String)">
      <summary>
 If the document do not contains outlines, the control will create a generic one.
 This method permits to change the default text used by the control in the produced outlines structure.
 </summary>
      <param name="StringID">The ID of the internal string to change: 0 for the default root name or 1 for the default nodes prefix.</param>
      <param name="Text">The new text to apply.</param>
    </member>
    <member name="M:GdPicture12.BookmarksTree.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
 Http://dev.nomad-net.info/articles/double-buffered-tree-and-list-views
 </summary>
    </member>
    <member name="P:GdPicture12.BookmarksTree.GdViewer">
      <summary>
 Defines the GdViewer object to be linked with the control.
 </summary>
      <example>
        <code description="" lang="VB.NET">
 BookmarksTree1.GdViewer = GdViewer1
 </code>
      </example>
    </member>
    <member name="P:GdPicture12.BookmarksTree.ItemHeight">
      <summary>
 Defines the height, in pixel, of each item in the control. Default value is 20.
 </summary>
    </member>
    <member name="P:GdPicture12.BookmarksTree.FontSize">
      <summary>
 Defines the size of the font used to display text nodes. Default value is 10.
 </summary>
    </member>
    <member name="P:GdPicture12.BookmarksTree.DisableZoomDestination">
      <summary>
 The PDF format specifies a parameter that allow to define a zoom level for a bookmark's page destination.
 Turning this property to True permits to ignore this information. Otherwise, the GdViewer object associated to the BookmarkTree will adjust the zoom accordingly. Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.BookmarksTree.FontName">
      <summary>
 Defines the name of the font used to display text nodes. Default value is Helvetica.
 </summary>
    </member>
    <member name="E:GdPicture12.BookmarksTree.NodeSelected">
      <summary>
 Occurs when a node is selected by the user.
 </summary>
      <param name="NodeText">The text of the selected node.</param>
      <param name="PDFBookmarkID">The ID of the associated PDF bookmark, if any.</param>
      <param name="CancelAction">Set true to cancel the associated action.</param>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.ClearAllItems">
      <summary>
 Reset the control and clear all generated thumbnails.
 </summary>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.ReloadThumbnails">
      <summary>
 Clear the ThumbnailEx control then reload all thumbnails.
 </summary>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.RedrawItem(System.Int32)">
      <summary>
 Redraws a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.EnsureVisibleItem(System.Int32)">
      <summary>
 Ensures that the specified item is visible within the control, scrolling the contents of the control if necessary.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.RemoveItem(System.Int32)">
      <summary>
 Removes a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.SwapItemsBitmap(System.Int32,System.Int32)">
      <summary>
 Swap two items bitmap in the thumbnail list.
 </summary>
      <param name="Item1Idx">The first item index. Between 0 and ItemCount - 1.</param>
      <param name="Item2Idx">The second item index. Between 0 and ItemCount - 1.</param>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.SwapItemsBitmap(System.Int32,System.Int32,System.Boolean)">
      <summary>
 Swap 2 items bitmap in the thumbnail list.
 </summary>
      <param name="Item1Idx">The first item index. Between 0 and ItemCount - 1.</param>
      <param name="Item2Idx">The second item index. Between 0 and ItemCount - 1.</param>
      <param name="SwapText">True to also swap item text, else False (default).</param>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.MoveItem(System.Int32,System.Int32)">
      <summary>
 Moves an item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <param name="DstIdx">The index of the item destination. Between 0 and ItemCount - 1.</param>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.SetItemsSize(System.Int32,System.Int32)">
      <summary>
 Change the size, in pixel, of each item.
 </summary>
      <param name="Width">Width in pixel.</param>
      <param name="Height">Height in pixel.</param>
      <remarks>This method is primarily intended for COM interop developers when ThumbnailSize property isn't reachable.</remarks>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.SetItemsSpacing(System.Int32,System.Int32)">
      <summary>
 Change the spacing between each item.
 </summary>
      <param name="Horizontal">Horizontal spacing in pixel.</param>
      <param name="Vertical">Vertical spacing in pixel.</param>
      <remarks>This method is primarily intended for COM interop developers when ThumbnailSpacing property isn't reachable.</remarks>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.SetItemsFont(System.String,System.Single,GdPicture12.FontStyle)">
      <summary>
 Change the font used to render the text of all items.
 </summary>
      <param name="FontName">The font family name.</param>
      <param name="FontSize">The font size.</param>
      <param name="FontStyle">The font style.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.SetItemText(System.Int32,System.String)">
      <summary>
 Changes the text of a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <param name="Text">The item text.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.SetItemTag(System.Int32,System.Object)">
      <summary>
 Changes the tag object associated with a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <param name="Tag">The item tag.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.GetItemTag(System.Int32)">
      <summary>
 Gets the tag object associated with a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <returns>
 The item tag object.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.SetItemBitmap(System.Int32,System.Int32)">
      <summary>
 Changes the bitmap of a specific item in the thumbnail list, from a GdPicture Image.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <param name="ImageID">A GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.SetItemBitmap(System.Int32,System.Drawing.Bitmap)">
      <summary>
 Changes the bitmap of a specific item in the thumbnail list, from a Bitmap object.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <param name="Image">A Bitmap object.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.SetItemBackgroundColor(System.Int32,System.Drawing.Color)">
      <summary>
 Changes the background color of a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <param name="Color">The bacgroud color to set. A Color object.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.SetItemCheckState(System.Int32,System.Boolean)">
      <summary>
 Changes the check state (if checked or not) of a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <param name="Checked">True for checked, else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.SetItemSelectState(System.Int32,System.Boolean)">
      <summary>
 Changes the select state (if selected or not) of a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <param name="Selected">True for selected, else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.GetItemCheckState(System.Int32)">
      <summary>
 Returns the check state (if checked or not) of a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <returns>
 True for checked, else False.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.GetItemFocusState(System.Int32)">
      <summary>
 Returns the focus state (if focused or not) of a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <returns>
 True for checked, else False.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.FindNearestItem(GdPicture12.SearchDirectionHint,System.Int32,System.Int32)">
      <summary>
 Returns the index of the nearest item at the given location, searching in the specified direction.
 </summary>
      <param name="Direction">A member of the SearchDirectionHint enumeration.</param>
      <param name="X">The x-coordinate of the point at which to begin searching.</param>
      <param name="Y">The x-coordinate of the point at which to begin searching.</param>
      <returns>
 The item index. -1 if the method failed or a value between 0 and ItemCount - 1.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.GetItemAt(System.Int32,System.Int32)">
      <summary>
 Returns the index of the item at the specified location.
 </summary>
      <param name="X">The x-coordinate of the point at which to begin searching.</param>
      <param name="Y">The x-coordinate of the point at which to begin searching.</param>
      <returns>
 If success returns the item index, value between 0 and ItemCount - 1. Otherwise returns -1: No item is available at the specified position.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.GetItemSelectState(System.Int32)">
      <summary>
 Returns the select state (if selected or not) of a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <returns>
 True for selected, else False.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.GetItemText(System.Int32)">
      <summary>
 Gets the text of a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <returns>
 The item text.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.GetItemBitmap(System.Int32)">
      <summary>
 Gets the bitmap of a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <returns>
 A GdPicture Image identifier.
 </returns>
      <remarks>The exported GdPicture Image must be released from the memory by the user using the ReleaseGdPictureImage() method.</remarks>
      <seealso cref="M:GdPicture12.ThumbnailEx.ReleaseGdPictureImage(System.Int32)" />
    </member>
    <member name="M:GdPicture12.ThumbnailEx.ReleaseGdPictureImage(System.Int32)">
      <summary>
 Deletes a GdPicture Image from the memory.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to release.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.GetItemFileSource(System.Int32)">
      <summary>
 Returns the file path of the item source in case the control has been loaded from a folder source
 by the LoadFromDirectory() method.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <returns>
 The item's file source path.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.SelectItem(System.Int32)">
      <summary>
 Selects and set the focus to a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.LoadNewThumbnails">
      <summary>
 Adds to the control items which have been appended to the source after the latest loading operation.
 Works only when source is a GdViewer object, GdPicture image or GdPicturePDF object. New thumbnails will be generated asynchronously.
 </summary>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.LoadFromGdPicturePDF(GdPicture12.GdPicturePDF)">
      <summary>
 Load thumbnails from PDF document loaded by a GdPictureImaging object. The ThumbnailEx control will generate a thumbnail for each page in the document.
 Thumbnails will be created asynchronously.
 </summary>
      <param name="PDF">A GdPicturePDF object.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.LoadFromGdViewer(System.Object)">
      <summary>
 Load thumbnails from a GdViewer object. If the GdViewer object handles a multipage document, the ThumbnailEx control will generate a thumbnail for each page.
 Thumbnails will be created asynchronously.
 </summary>
      <param name="GdViewer">A GdViewer object.</param>
      <remarks>When the user selects an item in the thumbnail list, the GdViewer will automatically displays  the corresponding page. And vice versa.
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.LoadFromGdPictureImage(System.Int32)">
      <summary>
 Load thumbnails from a GdPicture Image. If the GdPicture image is a multipage image, the ThumbnailEx control will generate a thumbnail for each page.
 Thumbnails will be created asynchronously.
 </summary>
      <param name="ImageID">A GdPicture Image identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.LoadFromDirectory(System.String,System.Boolean)">
      <summary>
 Load thumbnails from directory. The ThumbnailEx control will generate a thumbnail for each image or
 PDF document found in the directory. Thumbnails will be generated asynchronously.
 </summary>
      <param name="Path">The path from which thumbnail will be generated.</param>
      <param name="IncludeSubFolders">Set to True to include sub folders else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.LoadFromDirectory(System.String,System.Boolean,System.String)">
      <summary>
 Load thumbnails from directory. The ThumbnailEx control will generate a thumbnail for each image or
 PDF document found in the directory. Thumbnails will be generated asynchronously.
 </summary>
      <param name="Path">The path from which thumbnails will be generated.</param>
      <param name="IncludeSubFolders">Set to True to include sub folders else False.</param>
      <param name="SearchPattern">The search string to match against the names of files in path. IE: "*.tif"
 The parameter cannot end in two periods ("..") or contain two periods ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar,
 nor can it contain any of the characters in InvalidPathChars.
 Wildcard character:
 - * Zero or more characters.
 - ? Exactly one character.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.LoadFromDirectory(System.String,System.Boolean,System.String[])">
      <summary>
 Load thumbnails from directory. The ThumbnailEx control will generate a thumbnail for each image or
 PDF document found in the directory. Thumbnails will be generated asynchronously.
 </summary>
      <param name="Path">The path from which thumbnails will be generated.</param>
      <param name="IncludeSubFolders">Set to True to include sub folders else False.</param>
      <param name="SearchPatterns">An array of search strings to match against the names of files in path. IE: "*.tif"
 The parameter cannot end in two periods ("..") or contain two periods ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar,
 nor can it contain any of the characters in InvalidPathChars.
 Wildcard character:
 - * Zero or more characters.
 - ? Exactly one character.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.LoadFromFiles(System.String[])">
      <summary>
 Load thumbnails from an array of files.
 Thumbnails will be generated asynchronously.
 </summary>
      <param name="Files">An array of file path from which thumbnails will be generated.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.AddItemFromFile(System.String)">
      <summary>
 Adds a new thumbnail to the list from a file.
 </summary>
      <param name="FilePath">The path from which thumbnail will be generated.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.InsertItemFromFile(System.String,System.Int32)">
      <summary>
 Adds a new thumbnail to the list from a file.
 </summary>
      <param name="FilePath">The path from which thumbnail will be generated.</param>
      <param name="Position">The zero-based index position of the insertion. Between 0 and ItemCount - 1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.AddItemFromStream(System.IO.Stream)">
      <summary>
 Adds a new thumbnail to the list from a file.
 </summary>
      <param name="Stream">System.IO.Stream object storing the document.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.AddItemFromStream(System.IO.Stream,System.String)">
      <summary>
 Adds a new thumbnail to the list from a file.
 </summary>
      <param name="Stream">System.IO.Stream object storing the document.</param>
      <param name="Text">The item text.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.InsertItemFromStream(System.IO.Stream,System.String,System.Int32)">
      <summary>
 Inserts a new thumbnail to the list from a Stream.
 </summary>
      <param name="Stream">System.IO.Stream object storing the document.</param>
      <param name="Text">The item text.</param>
      <param name="Position">The zero-based index position of the insertion. Between 0 and ItemCount - 1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.AddItemFromGdPictureImage(System.Int32)">
      <summary>
 Adds a new thumbnail to the list from a GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.AddItemFromGdPictureImage(System.Int32,System.String)">
      <summary>
 Adds a new thumbnail to the list from a GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Text">The item text.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.ThumbnailEx.InsertItemFromGdPictureImage(System.Int32,System.String,System.Int32)">
      <summary>
 Inserts a new thumbnail to the list from a GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Text">The item text.</param>
      <param name="Position">The zero-based index position of the insertion. Between 0 and ItemCount - 1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.PdfRasterizerEngine">
      <summary>
 Defines the rasterizer engine to use for PDF rendering purposes.
 Default value is PdfRasterizerEngine.PdfRasterizerEngineHybrid.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.PdfIncreaseTextContrast">
      <summary>
 Specifies if the rendering engine should increase text contrast on low zoom in order to enhance readability.
 This feature can decrease rendering speed performances on old machines.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.RotateExif">
      <summary>
 Specifies if each item must be rotated according to Exif Orientation tag, if any.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.OwnDrop">
      <summary>
 Turn this property to True to implement your own drag and drop support.
 Default value is False.
 </summary>
      <remarks>Turning this property to True automatically switch AllowDropFiles and AllowMoveItems properties to false.</remarks>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.PauseThumbsLoading">
      <summary>
 Turn this property to True to pause the background process generating thumbnails.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.DisplayAnnotations">
      <summary>
 Specifies if annotations are displayed in each thumbnail. True by default.
 Annotations can be GdPicture/XMP annotations, PDF annotations and PDF FormFields.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.PreloadAllItems">
      <summary>
 Specifies if all items must be generated in background. If False, only visible items will be generated.
 False is recommended if the number of items exceed 1000.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.AllItemsLoaded">
      <summary>
 Returns true if all items have been loaded, else false.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.ThumbnailBackColor_Internal">
      <summary>
 Defines the background color of all thumbnails.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.ThumbnailForeColor_Internal">
      <summary>
 Defines the fore color of all thumbnails.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.ThumbnailBackColor">
      <summary>
 Specifies the default background color of thumbnails.
 Default color is Gray.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.ThumbnailForeColor">
      <summary>
 Specifies the default foreground color of thumbnails.
 Default color is Black.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.SelectedThumbnailBackColor">
      <summary>
 Defines the highlighting color of selected thumbnails.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.ThumbnailSize">
      <summary>
 The size, in pixel, of each thumbnail.
 Default value is (128, 128).
 </summary>
      <remarks>For COM version: this property might not be reachable within some environments, in this case use the SetItemsSize method instead.</remarks>
      <seealso cref="M:GdPicture12.ThumbnailEx.SetItemsSize(System.Int32,System.Int32)" />
    </member>
    <member name="P:GdPicture12.ThumbnailEx.ThumbnailSpacing">
      <summary>
 Sets the spacing between each thumbnail in the control. Set a size of (0, 0) to apply automatic spacing, otherwise a size larger than ThumbnailSize is suggested.
 Default value is (0, 0).
 </summary>
      <remarks>
 For COM version: this property might not be reachable within some environments, in this case use the SetItemsSpacing method instead.
 Values for are relative to the upper-left corner of an icon bitmap. Therefore, to set spacing between items that do not overlap, 
 the values must include the size of the icon, plus the amount of empty space desired between icons. Values that do not include the width of the icon will result in overlaps.
 </remarks>
      <seealso cref="M:GdPicture12.ThumbnailEx.SetItemsSpacing(System.Int32,System.Int32)" />
    </member>
    <member name="P:GdPicture12.ThumbnailEx.HorizontalTextAlignment">
      <summary>
 Defines the horizontal alignment of the text of each thumbnail.
 Default value is StringAlignment.Center.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.VerticalTextAlignment">
      <summary>
 Defines the vertical alignment of the text of each thumbnail.
 Default value is StringAlignment.Center.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.ThumbnailBorder">
      <summary>
 Specifies if thumbnails have border appearance.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.ThumbnailAlignment">
      <summary>
 Defines alignment of thumbnails in the control.
 Default value is ThumbnailAlignment.ThumbnailAlignmentVertical.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.ShowText">
      <summary>
 Specifies if a text is displayed near each thumbnail.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.ItemCount">
      <summary>
 The number of items in the control. Read only.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.CheckBoxes">
      <summary>
 Specifies if a check box appears next each item in the ThumbnailEx control.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.CheckBoxesMarginLeft">
      <summary>
 Defines custom checkboxes left margin. Negative margin is allowed.
 Default value is 0.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.CheckBoxesMarginTop">
      <summary>
 Defines custom checkboxes top margin. Negative margin is allowed.
 Default value is 0.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.TextMarginLeft">
      <summary>
 Defines custom text left margin. Negative margin is allowed.
 Default value is 0.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.TextMarginTop">
      <summary>
 Defines custom text top margin. Negative margin is allowed.
 Default value is 0.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.MultiSelect">
      <summary>
 Specifies if multiple items can be selected.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.AllowMoveItems">
      <summary>
 Specifies if the user is able to mode items by dragging operation. The event ItemMoved is raised for
 each item moving.
 Default value is False.
 </summary>
      <remarks>Turning this property to True automatically switch OwnDrop property to false.</remarks>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.AllowDropFiles">
      <summary>
 Specifies if the user is able to drop files from the explorer to the control.
 User will be allowed to drop files only if the items of the control has been loaded using LoadFromDirectory or if the control is empty.
 Default value is False.
 </summary>
      <remarks>Turning this property to True automatically switch OwnDrop property to false.</remarks>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.LockGdViewerEvents">
      <summary>
 Specifies if the ThumbnailEx control is reactive to the GdViewer events. This property is available
 only when thumbnails source is a GdViewer object passed to the LoadFromGdViewer method.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.ThumbnailEx.HotTracking">
      <summary>
 Specifies if an item has appearance of a hyperlink when the mouse pointer passes over it.
 Default value is False.
 </summary>
    </member>
    <member name="E:GdPicture12.ThumbnailEx.Scroll">
      <summary>
 Occurs when the control is scrolled.
 </summary>
      <param name="Min">Specifies the minimum scrolling position.</param>
      <param name="Max">Specifies the maximum scrolling position.</param>
      <param name="Page">Specifies the page size, in device units. A scroll bar uses this value to determine the appropriate size of the proportional scroll box.</param>
      <param name="Pos">Specifies the position of the scroll box.</param>
      <param name="TrackPos">Specifies the immediate position of a scroll box that the user is dragging.</param>
    </member>
    <member name="E:GdPicture12.ThumbnailEx.OnAllItemsLoaded">
      <summary>
 Occurs when all items of the controls has been loaded.
 </summary>
      <remarks>
      </remarks>
    </member>
    <member name="E:GdPicture12.ThumbnailEx.ItemChecked">
      <summary>
 Occurs when the check state of a thumbnail changes.
 </summary>
      <param name="Idx">The thumbnail index. A value between 0 and thumbnails count.</param>
      <param name="Checked">True is the thumbnail is checked, else False.</param>
    </member>
    <member name="E:GdPicture12.ThumbnailEx.ItemClicked">
      <summary>
 Occurs when a thumbnail is clicked.
 </summary>
      <param name="Idx">The thumbnail index. A value between 0 and thumbnails count.</param>
      <param name="Button">The button pressed. A member of the MouseButton enumeration.</param>
    </member>
    <member name="E:GdPicture12.ThumbnailEx.ItemDoubleClicked">
      <summary>
 Occurs when a thumbnail is double clicked.
 </summary>
      <param name="Idx">The thumbnail index. A value between 0 and thumbnails count.</param>
    </member>
    <member name="E:GdPicture12.ThumbnailEx.ItemSelectionChanged">
      <summary>
 Occurs when the selected state of a thumbnail changes.
 </summary>
      <param name="Idx">The thumbnail index. A value between 0 and thumbnails count.</param>
      <param name="Selected">True is the thumbnail is selected, else False.</param>
    </member>
    <member name="E:GdPicture12.ThumbnailEx.ItemMoved">
      <summary>
 Occurs when the user moved an item in the control.
 </summary>
      <param name="srcIdx">The moved item index. Between 0 and ItemCount - 1.</param>
      <param name="dstIdx">The index of the item destination. Between 0 and ItemCount - 1.</param>
    </member>
    <member name="E:GdPicture12.ThumbnailEx.FileTypeNotSupported">
      <summary>
 Occurs when a file type is not supported by the control. It is possible to provide a specific Bitmap to be used in the item through the CustomBitmap property.
 </summary>
      <param name="FilePath">The path of the unsupported file.</param>
      <param name="CustomBitmapID">A GdPicture Image Identifier which can be passed by reference.</param>
      <param name="ReleaseBitmap">A reference to a boolean value. If set to true and if a CustomBitmapID parameter is provided, the control will automatically release the CustomBitmapID from the memory.</param>
      <example>
        <code description="Implementing a custom bitmap for unknown file type." lang="VB.NET">
 Private Sub ThumbnailEx1_FileTypeNotSupported(ByVal FilePath As String, ByRef CustomBitmapID As Integer, ByRef ReleaseBitmap As Boolean) Handles ThumbnailEx1.FileTypeNotSupported
 ReleaseBitmap = True
 Using gdPictureImaging As New GdPictureImaging
    CustomBitmapID = gdPictureImaging.CreateGdPictureImageFromFile("unsupported.png")
 End Using
 End Sub
 </code>
      </example>
    </member>
    <member name="T:GdPicture12.WPF.ThumbnailEx.ScrollEventArgs">
      <summary>
 Provides data for the Scroll event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ScrollEventArgs.Max">
      <summary>
 Specifies the maximum scrolling position.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ScrollEventArgs.Page">
      <summary>
 Specifies the page size, in device units. A scroll bar uses this value to determine the appropriate size of the proportional scroll box.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ScrollEventArgs.Pos">
      <summary>
 Specifies the position of the scroll box.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.ThumbnailEx.ItemCheckedEventArgs">
      <summary>
 Provides data for the ItemChecked event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ItemCheckedEventArgs.Idx">
      <summary>
 The thumbnail index. A value between 0 and thumbnails count.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ItemCheckedEventArgs.Checked">
      <summary>
 True is the thumbnail is checked, else False.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.ThumbnailEx.ItemClickedEventArgs">
      <summary>
 Provides data for the ItemClicked event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ItemClickedEventArgs.Idx">
      <summary>
 The thumbnail index. A value between 0 and thumbnails count.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ItemClickedEventArgs.Button">
      <summary>
 The button pressed. A member of the MouseButton enumeration.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.ThumbnailEx.ItemDoubleClickedEventArgs">
      <summary>
 Provides data for the ItemDoubleClicked event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ItemDoubleClickedEventArgs.Idx">
      <summary>
 The thumbnail index. A value between 0 and thumbnails count.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.ThumbnailEx.FileTypeNotSupportedEventArgs">
      <summary>
 Provides data for the ItemMoved event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.FileTypeNotSupportedEventArgs.FilePath">
      <summary>
 The path of the unsupported file.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.FileTypeNotSupportedEventArgs.CustomBitmapID">
      <summary>
 A GdPicture Image Identifier which can be passed by reference.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.FileTypeNotSupportedEventArgs.ReleaseBitmap">
      <summary>
 A reference to a boolean value. If set to true and if a CustomBitmapID parameter is provided, the control will automatically release the CustomBitmapID from the memory.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.ThumbnailEx.OnAllItemsLoadedEventArgs">
      <summary>
Provides data for the OnAllItemsLoaded event.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.ThumbnailEx.ItemMovedEventArgs">
      <summary>
 Provides data for the ItemMoved event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ItemMovedEventArgs.srcIdx">
      <summary>
 The moved item index. Between 0 and ItemCount - 1.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ItemMovedEventArgs.dstIdx">
      <summary>
 The index of the item destination. Between 0 and ItemCount - 1.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.ThumbnailEx.ItemSelectionChangedEventArgs">
      <summary>
 Provides data for the ItemSelectionChanged event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ItemSelectionChangedEventArgs.Idx">
      <summary>
 The thumbnail index. A value between 0 and thumbnails count.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ItemSelectionChangedEventArgs.Selected">
      <summary>
 True is the thumbnail is selected, False otherwise.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.ThumbnailEx.ThumbnailItem">
      <summary>
 todo: document
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.ThumbnailEx.ListViewEx">
      <summary>
 todo: document
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingVerticalTilePanel">
      <summary>
 todo: document
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingVerticalTilePanel.MeasureOverride(System.Windows.Size)">
      <summary>
 Measure the children
 </summary>
      <param name="availableSize">Size available</param>
      <returns>Size desired</returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingVerticalTilePanel.ArrangeOverride(System.Windows.Size)">
      <summary>
 Arrange the children
 </summary>
      <param name="finalSize">Size available</param>
      <returns>Size used</returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingVerticalTilePanel.CleanUpItems(System.Int32,System.Int32)">
      <summary>
 Revirtualize items that are no longer visible
 </summary>
      <param name="minDesiredGenerated">first item index that should be visible</param>
      <param name="maxDesiredGenerated">last item index that should be visible</param>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingVerticalTilePanel.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
      <summary>
 When items are removed, remove the corresponding UI if necessary
 </summary>
      <param name="sender">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingVerticalTilePanel.CalculateExtent(System.Windows.Size,System.Int32)">
      <summary>
 Calculate the extent of the view based on the available size
 </summary>
      <param name="availableSize">available size</param>
      <param name="itemCount">number of data items</param>
      <returns>
      </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingVerticalTilePanel.GetVisibleRange(System.Int32@,System.Int32@)">
      <summary>
 Get the range of children that are visible
 </summary>
      <param name="firstVisibleItemIndex">The item index of the first visible item</param>
      <param name="lastVisibleItemIndex">The item index of the last visible item</param>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingVerticalTilePanel.GetChildSize">
      <summary>
 Get the size of the children. We assume they are all the same
 </summary>
      <returns>The size</returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingVerticalTilePanel.ArrangeChild(System.Int32,System.Windows.UIElement,System.Windows.Size)">
      <summary>
 Position a child
 </summary>
      <param name="itemIndex">The data item index of the child</param>
      <param name="child">The element to position</param>
      <param name="finalSize">The size of the panel</param>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingVerticalTilePanel.CalculateChildrenPerColumn(System.Windows.Size)">
      <summary>
 Helper method for tiling layout
 </summary>
      <param name="availableSize">Size available</param>
      <returns>
      </returns>
    </member>
    <member name="T:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingHorizontalTilePanel">
      <summary>
 todo: document
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingHorizontalTilePanel.MeasureOverride(System.Windows.Size)">
      <summary>
 Measure the children
 </summary>
      <param name="availableSize">Size available</param>
      <returns>Size desired</returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingHorizontalTilePanel.ArrangeOverride(System.Windows.Size)">
      <summary>
 Arrange the children
 </summary>
      <param name="finalSize">Size available</param>
      <returns>Size used</returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingHorizontalTilePanel.CleanUpItems(System.Int32,System.Int32)">
      <summary>
 Revirtualize items that are no longer visible
 </summary>
      <param name="minDesiredGenerated">first item index that should be visible</param>
      <param name="maxDesiredGenerated">last item index that should be visible</param>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingHorizontalTilePanel.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
      <summary>
 When items are removed, remove the corresponding UI if necessary
 </summary>
      <param name="sender">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingHorizontalTilePanel.CalculateExtent(System.Windows.Size,System.Int32)">
      <summary>
 Calculate the extent of the view based on the available size
 </summary>
      <param name="availableSize">available size</param>
      <param name="itemCount">number of data items</param>
      <returns>
      </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingHorizontalTilePanel.GetVisibleRange(System.Int32@,System.Int32@)">
      <summary>
 Get the range of children that are visible
 </summary>
      <param name="firstVisibleItemIndex">The item index of the first visible item</param>
      <param name="lastVisibleItemIndex">The item index of the last visible item</param>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingHorizontalTilePanel.GetChildSize">
      <summary>
 Get the size of the children. We assume they are all the same
 </summary>
      <returns>The size</returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingHorizontalTilePanel.ArrangeChild(System.Int32,System.Windows.UIElement,System.Windows.Size)">
      <summary>
 Position a child
 </summary>
      <param name="itemIndex">The data item index of the child</param>
      <param name="child">The element to position</param>
      <param name="finalSize">The size of the panel</param>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ListViewEx.VirtualizingHorizontalTilePanel.CalculateChildrenPerRow(System.Windows.Size)">
      <summary>
 Helper method for tiling layout
 </summary>
      <param name="availableSize">Size available</param>
      <returns>
      </returns>
    </member>
    <member name="T:GdPicture12.WPF.ThumbnailEx.ListViewEx.ThumbnailIndexComparer">
      <summary>
 todo: document
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.SetAllItemsLoaded(System.Boolean)">
      <summary>
 Thread safe setter for the AllItemsLoaded value.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.GetAllItemsLoaded">
      <summary>
 Thread safe accessor for the AllItemsLoaded value.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.SetItemCount(System.Int32)">
      <summary>
 Thread safe setter for the ItemCount value.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.GetItemCount">
      <summary>
 Thread safe accessor for the ItemCount value.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.RedrawItem(System.Int32)">
      <summary>
 Redraws a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.EnsureVisibleItem(System.Int32)">
      <summary>
 Ensures that the specified item is visible within the control, scrolling the contents of the control if necessary.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.SwapItemsImage(System.Int32,System.Int32)">
      <summary>
 Swap two items images in the thumbnail list.
 </summary>
      <param name="Item1Idx">The first item index. Between 0 and ItemCount - 1.</param>
      <param name="Item2Idx">The second item index. Between 0 and ItemCount - 1.</param>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.SwapItemsImage(System.Int32,System.Int32,System.Boolean)">
      <summary>
 Swap 2 items images in the thumbnail list, with option of specifying whether to swap the text of the items too or not.
 </summary>
      <param name="Item1Idx">The first item index. Between 0 and ItemCount - 1.</param>
      <param name="Item2Idx">The second item index. Between 0 and ItemCount - 1.</param>
      <param name="SwapText">True to also swap item text, else False (default).</param>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.MoveItem(System.Int32,System.Int32)">
      <summary>
 Moves an item in the thumbnail list to a new specified position.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <param name="DstIdx">The index of the item destination. Between 0 and ItemCount - 1.</param>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.SetItemsFont(System.Windows.Media.FontFamily,System.Double,System.Windows.FontStyle)">
      <summary>
 Changes the font used to render the text of all items.
 </summary>
      <param name="FontFamily">The font family name.</param>
      <param name="FontSize">The font size.</param>
      <param name="FontStyle">The font style.</param>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.SetItemText(System.Int32,System.String)">
      <summary>
 Changes the text of a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <param name="Text">The item text.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.SetItemTag(System.Int32,System.Object)">
      <summary>
 Changes the tag object associated with a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <param name="Tag">The item tag.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.GetItemTag(System.Int32)">
      <summary>
 Gets the tag object associated with a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <returns>
 The item tag object.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.SetItemImage(System.Int32,System.Int32)">
      <summary>
 Changes the image of a specific item in the thumbnail list, from a GdPicture Image.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <param name="ImageID">A GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.SetItemBitmapSource(System.Int32,System.Windows.Media.Imaging.BitmapSource)">
      <summary>
 Changes the image of a specific item in the thumbnail list, from a BitmapSource object.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <param name="Image">A BitmapSource object.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.SetItemBackgroundColor(System.Int32,System.Windows.Media.Color)">
      <summary>
 Changes the background color of a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <param name="Color">A Color object.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.SetItemCheckState(System.Int32,System.Boolean)">
      <summary>
 Changes the check state (if checked or not) of a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <param name="Checked">True for checked, else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.SetItemSelectState(System.Int32,System.Boolean)">
      <summary>
 Changes the select state (if selected or not) of a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <param name="Selected">True for selected, else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.GetItemCheckState(System.Int32)">
      <summary>
 Returns the check state (if checked or not) of a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <returns>
 True for checked, else False.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.GetItemAt(System.Double,System.Double)">
      <summary>
 Returns the index of the item at the specified location.
 </summary>
      <param name="X">The x-coordinate of the point at which to begin searching.</param>
      <param name="Y">The x-coordinate of the point at which to begin searching.</param>
      <returns>
 If success returns the item index, value between 0 and ItemCount - 1. Otherwise returns -1: No item is available at the specified position.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.GetItemSelectState(System.Int32)">
      <summary>
 Returns the select state (if selected or not) of a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <returns>
 True for selected, else False.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.GetItemText(System.Int32)">
      <summary>
 Gets the text of a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <returns>
 The item text.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.GetItemBitmap(System.Int32)">
      <summary>
 Gets the bitmap of a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <returns>
 A BitmapSource object.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.GetItemFileSource(System.Int32)">
      <summary>
 Returns the file path of the item source in case the control has been loaded from a folder source
 by the LoadFromDirectory() method.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
      <returns>
 The item's file source path.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.SelectItem(System.Int32)">
      <summary>
 Selects and set the focus to a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.LoadNewThumbnails">
      <summary>
 Adds to the control items which have been added to the source after the latest loading operation.
 Works only when source is a GdViewer object or a GdPicture image. New thumbnails will be generated asynchronously.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.RemoveItem(System.Int32)">
      <summary>
 Removes a specific item in the thumbnail list.
 </summary>
      <param name="ItemIdx">The item index. Between 0 and ItemCount - 1.</param>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ReloadThumbnails">
      <summary>
 Clear the ThumbnailEx control then reload all thumbnails.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.ClearAllItems">
      <summary>
 Reset the control and clear all generated thumbnails.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.LoadFromGdPicturePDF(GdPicture12.GdPicturePDF)">
      <summary>
 Load thumbnails from PDF document loaded by a GdPictureImaging object. The ThumbnailEx control will generate a thumbnail for each page in the document.
 Thumbnails will be created asynchronously.
 </summary>
      <param name="PDF">A GdPicturePDF object.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.LoadFromGdViewer(GdPicture12.WPF.GdViewer)">
      <summary>
 Load thumbnails from a GdViewer object. If the GdViewer object handles a multipage document, the ThumbnailEx control will generate a thumbnail for each page.
 Thumbnails will be created asynchronously.
 </summary>
      <param name="GdViewer">A GdViewer object.</param>
      <remarks>When the user selects an item in the thumbnail list, the GdViewer will automatically displays  the corresponding page. And vice versa.
 </remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.LoadFromGdPictureImage(System.Int32)">
      <summary>
 Load thumbnails from a GdPicture Image. If the GdPicture image is a multipage image, the ThumbnailEx control will generate a thumbnail for each page.
 Thumbnails will be created asynchronously.
 </summary>
      <param name="ImageID">A GdPicture Image identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.LoadFromDirectory(System.String,System.Boolean)">
      <summary>
 Load thumbnails from directory. The ThumbnailEx control will generate a thumbnail for each image or
 PDF document found in the directory. Thumbnails will be generated asynchronously.
 </summary>
      <param name="Path">The path from which thumbnail will be generated.</param>
      <param name="IncludeSubFolders">Set to True to include sub folders else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.LoadFromDirectory(System.String,System.Boolean,System.String)">
      <summary>
 Load thumbnails from directory. The ThumbnailEx control will generate a thumbnail for each image or
 PDF document found in the directory. Thumbnails will be generated asynchronously.
 </summary>
      <param name="Path">The path from which thumbnails will be generated.</param>
      <param name="IncludeSubFolders">Set to True to include sub folders else False.</param>
      <param name="SearchPattern">The search string to match against the names of files in path. IE: "*.tif"
 The parameter cannot end in two periods ("..") or contain two periods ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar,
 nor can it contain any of the characters in InvalidPathChars.
 Wildcard character:
 - * Zero or more characters.
 - ? Exactly one character.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.LoadFromDirectory(System.String,System.Boolean,System.String[])">
      <summary>
 Load thumbnails from directory. The ThumbnailEx control will generate a thumbnail for each image or
 PDF document found in the directory. Thumbnails will be generated asynchronously.
 </summary>
      <param name="Path">The path from which thumbnails will be generated.</param>
      <param name="IncludeSubFolders">Set to True to include sub folders else False.</param>
      <param name="SearchPatterns">An array of search strings to match against the names of files in path. IE: "*.tif"
 The parameter cannot end in two periods ("..") or contain two periods ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar,
 nor can it contain any of the characters in InvalidPathChars.
 Wildcard character:
 - * Zero or more characters.
 - ? Exactly one character.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.LoadFromFiles(System.String[])">
      <summary>
 Load thumbnails from an array of files.
 Thumbnails will be generated asynchronously.
 </summary>
      <param name="Files">An array of file path from which thumbnails will be generated.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.AddItemFromFile(System.String)">
      <summary>
 Adds a new thumbnail to the list from a file.
 </summary>
      <param name="FilePath">The path from which thumbnail will be generated.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.InsertItemFromFile(System.String,System.Int32)">
      <summary>
 Adds a new thumbnail to the list from a file.
 </summary>
      <param name="FilePath">The path from which thumbnail will be generated.</param>
      <param name="Position">The zero-based index position of the insertion. Between 0 and ItemCount - 1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.AddItemFromStream(System.IO.Stream)">
      <summary>
 Adds a new thumbnail to the list from a file.
 </summary>
      <param name="Stream">System.IO.Stream object storing the document.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.AddItemFromStream(System.IO.Stream,System.String)">
      <summary>
 Adds a new thumbnail to the list from a file.
 </summary>
      <param name="Stream">System.IO.Stream object storing the document.</param>
      <param name="Text">The item text.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.InsertItemFromStream(System.IO.Stream,System.String,System.Int32)">
      <summary>
 Inserts a new thumbnail to the list from a Stream.
 </summary>
      <param name="Stream">System.IO.Stream object storing the document.</param>
      <param name="Text">The item text.</param>
      <param name="Position">The zero-based index position of the insertion. Between 0 and ItemCount - 1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.AddItemFromGdPictureImage(System.Int32)">
      <summary>
 Adds a new thumbnail to the list from a GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.AddItemFromGdPictureImage(System.Int32,System.String)">
      <summary>
 Adds a new thumbnail to the list from a GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Text">The item text.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.AddItemFromBitmapSource(System.Windows.Media.Imaging.BitmapSource,System.String)">
      <summary>
 Adds a new thumbnail to the list from a BitmapSource Image.
 </summary>
      <param name="Image">The BitmapSource object.</param>
      <param name="Text">The item text.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.InsertItemFromGdPictureImage(System.Int32,System.String,System.Int32)">
      <summary>
 Inserts a new thumbnail to the list from a GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier.</param>
      <param name="Text">The item text.</param>
      <param name="Position">The zero-based index position of the insertion. Between 0 and ItemCount - 1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.ThumbnailEx.InsertItemFromBitmapSource(System.Windows.Media.Imaging.BitmapSource,System.String,System.Int32)">
      <summary>
 Inserts a new thumbnail to the list from a BitmapSource image.
 </summary>
      <param name="Image">The BitmapSource object.</param>
      <param name="Text">The item text.</param>
      <param name="Position">The zero-based index position of the insertion. Between 0 and ItemCount - 1.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ThumbnailEffect">
      <summary>
 Get or set the bitmap effect to apply to the items. 
 This property is avaible only with Framework 4.0 and higher.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.PdfIncreaseTextContrast">
      <summary>
 Specifies if the rendering engine should increase text contrast on low zoom in order to enhance readability.
 This feature can decrease rendering speed performances on old machines.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.IsDeferredScrollingEnabled">
      <summary>
 Whether deferred scrolling is enabled.
 If set to true, visual state will not be updated until the scrollbar mouse capture is released.
 Default value is false.
 </summary>
      <remarks>Displaying a large number of items may cause performance issues. In this case, it might be useful to use deferred scrolling.</remarks>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.PdfRasterizerEngine">
      <summary>
 Defines the rasterizer engine to use for PDF rendering purposes.
 Default value is PdfRasterizerEngine.PdfRasterizerEngineHybrid.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.RotateExif">
      <summary>
 Specifies if each item must be rotated according to Exif Orientation tag, if any.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ThumbnailAlignment">
      <summary>
 Defines alignment of thumbnails in the control.
 Default value is ThumbnailAlignment.ThumbnailAlignmentVertical.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.PauseThumbsLoading">
      <summary>
 Turn this property to True to pause the background process generating thumbnails.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.DisplayAnnotations">
      <summary>
 Specifies if annotations are displayed in each thumbnail. True by default.
 Annotations can be GdPicture/XMP annotations, PDF annotations and PDF FormFields.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.PreloadAllItems">
      <summary>
 Specifies if all items must be generated in the background. If False, only visible items will be generated.
 False is recommended if the number of items exceeds 1000.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.AllItemsLoaded">
      <summary>
 Returns true if all items have been loaded, else false.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ThumbnailBackColor">
      <summary>
 Defines the background color of all thumbnails.
 Default value is Transparent.
 </summary>
      <remarks>The SetItemBackgroundColor() should be used to set the background color of a specific thumbnail.</remarks>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ThumbnailSize">
      <summary>
 The size, in pixels, of each thumbnail.
 Default value is (128, 128).
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.TextSpaceHeight">
      <summary>
 Space for the height of the text bellow the thumbnail item image. If text height is bigger than this value, the text will be clipped to this.
 Default is 16.0.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ThumbnailSpacing">
      <summary>
 Sets the spacing between each thumbnail in the control.
 Default value is (25, 25).
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.HorizontalTextAlignment">
      <summary>
 Defines the horizontal alignment of the text of each thumbnail.
 Default value is StringAlignment.Center.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ShowText">
      <summary>
 Specifies if a text is displayed near each thumbnail.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ItemCount">
      <summary>
 The number of items in the control. Read only.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.CheckBoxes">
      <summary>
 Specifies if a checkbox appears next to each item in the ThumbnailEx control.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.CheckBoxesMarginLeft">
      <summary>
 Defines checkboxes left margin. Negative margin is allowed.
 Default value is 0.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.CheckBoxesMarginTop">
      <summary>
 Defines checkboxes top margin. Negative margin is allowed.
 Default value is 0.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.TextMarginLeft">
      <summary>
 Defines custom text left margin. Negative margin is allowed.
 Default value is 0.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.TextMarginTop">
      <summary>
 Defines custom text top margin. Negative margin is allowed.
 Default value is 0.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.MultiSelect">
      <summary>
 Specifies if multiple items can be selected.
 If set to True, multiple items are selected one by one. Pressing shift would select all items in between last item clicked and nearest previously selected item.
 MultiSelect is equivelant of the WPF Extended SelectionMode.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.AllowMoveItems">
      <summary>
 Specifies if the user is able to move items by a dragging operation. The event ItemMoved is raised for
 each item moving.
 If MultiSelect is set to True, pressing shift on the last selected item is required for multi-item move.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.AllowDropFiles">
      <summary>
 Specifies if the user is able to drop files from the explorer to the control.
 User will be allowed to drop files only if the items of the control has been loaded using LoadFromDirectory or if the control is empty.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.LockGdViewerEvents">
      <summary>
 Specifies if the ThumbnailEx control is reactive to the GdViewer events. This property is available
 only when thumbnails source is a GdViewer object passed to the LoadFromGdViewer method.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.ThumbnailEx.ItemContainerStyle">
      <summary>
 Gets or sets the System.Windows.Style that is applied to the container element
 generated for each thumbnail item.
 Default value is Null.
 </summary>
      <returns>The System.Windows.Style that is applied to the container element generated for each thumbnail item.</returns>
    </member>
    <member name="E:GdPicture12.WPF.ThumbnailEx.Scroll">
      <summary>
 Occurs when the control is scrolled. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.ThumbnailEx.ItemChecked">
      <summary>
 Occurs when the check state of a thumbnail changes. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.ThumbnailEx.PreviewItemChecked">
      <summary>
 Occurs when the check state of a thumbnail changes. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.ThumbnailEx.ItemClicked">
      <summary>
 Occurs when a thumbnail is clicked. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.ThumbnailEx.PreviewItemClicked">
      <summary>
 Occurs when a thumbnail is clicked. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.ThumbnailEx.ItemDoubleClicked">
      <summary>
 Occurs when a thumbnail is double-clicked. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.ThumbnailEx.PreviewItemDoubleClicked">
      <summary>
 Occurs when a thumbnail is double clicked. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.ThumbnailEx.ItemSelectionChanged">
      <summary>
 Occurs when the selected state of a thumbnail changes. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.ThumbnailEx.PreviewItemSelectionChanged">
      <summary>
 Occurs when the selected state of a thumbnail changes. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.ThumbnailEx.ItemMoved">
      <summary>
 Occurs when the user moved an item in the control. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.ThumbnailEx.PreviewItemMoved">
      <summary>
 Occurs when the user moved an item in the control. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.ThumbnailEx.FileTypeNotSupported">
      <summary>
 Occurs when a file type is not supported by the control. It is possible to provide a specific Bitmap to be used in the item through the CustomBitmap property.
 </summary>
      <example>
        <code description="Implementing a custom bitmap for unknown file type." lang="VB.NET">
 Private Sub  ThumbnailEx1_FileTypeNotSupported( ByVal sender As object , ByVal e As GdPicture12.WPF.ThumbnailEx.FileTypeNotSupportedEventArgs) Handles ThumbnailEx1.FileTypeNotSupported
 e.ReleaseBitmap = True
 Using gdPictureImaging As New GdPictureImaging
    e.CustomBitmapID = gdPictureImaging.CreateGdPictureImageFromFile("unsupported.png")
 End Using
 End Sub
 </code>
      </example>
    </member>
    <member name="E:GdPicture12.WPF.ThumbnailEx.OnAllItemsLoaded">
      <summary>
 Occurs when all items of the controls has been loaded.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.RegionFillMode">
      <summary>
 Defines the fill mode of a region.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GdViewerWidget.CanvasHitTestPixels(System.Double,System.Double)">
      <summary>
 Returns a value specifying the possible editing mode based on mouse position.
 </summary>
      <param name="x">Mouse x, on the viewer.</param>
      <param name="y">Mouse y, on the viewer.</param>
      <returns>.</returns>
      <remarks>The man who does not read has no advantage over the man who cannot read.</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GdViewerWidget.HandleMouseUp(System.Double,System.Double,System.Boolean)">
      <summary>
 Handle mouse up event.
 </summary>
      <param name="x">Mouse x, on the viewer.</param>
      <param name="y">Mouse y, on the viewer.</param>
      <param name="hideIfEmpty">If empty, switch visibility to false.</param>
      <remarks>Or every minute you are angry you lose sixty seconds of happiness.</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GdViewerWidget.HandleMouseDown(System.Double,System.Double)">
      <summary>
 Handle mouse down event.
 </summary>
      <param name="x">Mouse x,in pixel, on the viewer.</param>
      <param name="y">Mouse y, in pixel, on the viewer.</param>
      <returns>True is this object reacts to the mouse down, false otherwise.</returns>
      <remarks>You only live once, but if you do it right, once is enough.</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GdViewerWidget.HandleMouseMove(System.Double,System.Double)">
      <summary>
 Handle mouse move event.
 </summary>
      <param name="x">Mouse x, in pixel, on the viewer.</param>
      <param name="y">Mouse y, in pixel, on the viewer.</param>
      <returns>True is this object reacts to the mouse down, false otherwise.</returns>
      <remarks>If you don't stand for something you will fall for anything.</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GdViewerWidget.GetMousePositionOnDocumentInch(System.Double,System.Double)">
      <summary>
      </summary>
      <param name="x">Mouse x position, in pixel, on the viewer.</param>
      <param name="y">Mouse x position, in pixel, on the viewer.</param>
      <returns>.</returns>
      <remarks>.</remarks>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.GdViewerWidget.RenderGridFit">
      <summary>
 Specifies if the widget must be rendered on the canvas by aligning to Pixel grid. (Process known as grid-fit or pixel snapping).
 </summary>
      <remarks>Enabled by default. Highy suggested for brushes applying non standard blend modes.</remarks>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.GdViewerWidget.Tag">
      <summary>
 Used to store extra informations.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.RectEditedEventArgs">
      <summary>
Provides data for the RectEdited event.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.ScrollEventArgs">
      <summary>
Provides data for the Scroll event.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.ZoomChangedEventArgs">
      <summary>
Provides data for the ZoomChanged event.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.BeforePageRotationEventArgs">
      <summary>
Provides data for the BeforePageRotation event.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.PageChangedEventArgs">
      <summary>
Provides data for the PageChanged event.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.BeforeDocumentChangeEventArgs">
      <summary>
Provides data for the BeforeDocumentChange event.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.AfterDocumentChangeEventArgs">
      <summary>
Provides data for the AfterDocumentChange event.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.DocumentClosedEventArgs">
      <summary>
Provides data for the DocumentClosed event.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.PageDisplayedEventArgs">
      <summary>
Provides data for the PageDisplayed event.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.AfterPageRotationEventArgs">
      <summary>
Provides data for the AfterPageRotation event.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.ClickMenuEventArgs">
      <summary>
Provides data for the RegionSelected event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.ClickMenuEventArgs.MenuItem">
      <summary>
Item Index. Can be:
 <para>2: Pages / Frames || Goto First</para><para>3: Pages / Frames || Goto Previous</para><para>4: Pages / Frames || Goto Next</para><para>5: Pages / Frames || Goto Last</para><para>100: Play Gif</para><para>200: Stop Gif Animation</para><para>310: Rotation || Rotate Page 90°</para><para>311: Rotation || Rotate Page 180°</para><para>312: Rotation || Rotate Page 270°</para><para>313: Rotation || Flip Page Horizontally</para><para>314: Rotation || Flip Page Vertically</para><para>315: Rotation || Rotate View 90°</para><para>316: Rotation || Rotate View 180°</para><para>317: Rotation || Rotate View 270°</para><para>318: Rotation || Flip View Horizontally</para><para>319: Rotation || Flip View Vertically</para><para>400: ScrollBars</para><para>500: Copy Bitmap to Clipboard</para><para>501: Copy Text to Clipboard</para><para>601: Zoom || Zoom in</para><para>602: Zoom || Zoom out</para><para>603: Zoom || Zoom 100%</para><para>604: Zoom || Zoom to selected area</para><para>605: Zoom || Fit image to viewer (keep aspect ratio)</para><para>606: Zoom || Fit image to viewer width</para><para>607: Zoom || Fit image to viewer height</para><para>701: Mouse Mode || Nothing</para><para>702: Mouse Mode || Hand Pan Tool</para><para>703: Mouse Mode || Area Selection Tool</para><para>704: Mouse Mode || Area Zooming Tool</para><para>705: Mouse Mode || Magnifier Tool</para><para>801: ViewerQuality || Low</para><para>802: ViewerQuality || Medium</para><para>803: ViewerQuality || High</para></summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.RegionSelectedEventArgs">
      <summary>
Provides data for the RegionSelected event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.RegionSelectedEventArgs.RegionID">
      <summary>
The ID of the selected region.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.AnnotationResizedEventArgs">
      <summary>
Provides data for the AnnotationResized event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.AnnotationResizedEventArgs.AnnotationIdx">
      <summary>
The index of the annotation.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.AnnotationMovedEventArgs">
      <summary>
Provides data for the AnnotationMoved event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.AnnotationMovedEventArgs.AnnotationIdx">
      <summary>
The index of the annotation.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.AnnotationRotatedEventArgs">
      <summary>
Provides data for the AnnotationRotated event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.AnnotationRotatedEventArgs.AnnotationIdx">
      <summary>
The index of the annotation.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.AnnotationAddedByUserEventArgs">
      <summary>
Provides data for the AnnotationAddedByUser event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.AnnotationAddedByUserEventArgs.AnnotationIdx">
      <summary>
The index of the annotation.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.BeforeAnnotationAddedByUserEventArgs">
      <summary>
Provides data for the BeforeAnnotationAddedByUser event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.BeforeAnnotationAddedByUserEventArgs.AnnotationIdx">
      <summary>
The index of the annotation.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.AnnotationClickedEventArgs">
      <summary>
Provides data for the AnnotationClicked event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.AnnotationClickedEventArgs.AnnotationIdx">
      <summary>
The index of the clicked annotation.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.AnnotationSelectedEventArgs">
      <summary>
Provides data for the AnnotationSelected event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.AnnotationSelectedEventArgs.AnnotationIdx">
      <summary>
The index of the selected annotation.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.AnnotationEndEditingTextEventArgs">
      <summary>
Provides data for the AnnotationEndEditingText event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.AnnotationEndEditingTextEventArgs.AnnotationIdx">
      <summary>
The index of the selected annotation.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.AnnotationStartEditingTextEventArgs">
      <summary>
Provides data for the AnnotationStartEditingText event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.AnnotationStartEditingTextEventArgs.AnnotationIdx">
      <summary>
The index of the selected annotation.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.RegionEditedEventArgs">
      <summary>
Provides data for the RegionEdited event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.RegionEditedEventArgs.RegionID">
      <summary>
The ID of the edited region.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.SavingProgressEventArgs">
      <summary>
Provides data for the SavingProgress event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.SavingProgressEventArgs.PageNo">
      <summary>
The number of the page (1-based) that is currently in creation.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.SavingProgressEventArgs.PageCount">
      <summary>
The total number of pages to be saved.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.TransferEndedEventArgs">
      <summary>
Provides data for the TransferEnded event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.TransferEndedEventArgs.Status">
      <summary>
A member of the GdPictureStatus enumeration.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.TransferEndedEventArgs.Download">
      <summary>
True if latest transfer was a download, else False (upload).
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.DataReceivedEventArgs">
      <summary>
 Provides data for the DataReceived event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.DataReceivedEventArgs.PercentProgress">
      <summary>
The percentage of the data transferred.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.DataReceivedEventArgs.SizeLeft">
      <summary>
The total size of the data left to transfer in byte.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.DataReceivedEventArgs.TotalLength">
      <summary>
 The total size of the data to transfer in byte.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.AfterPrintPageEventArgs">
      <summary>
 Provides data for the AfterPrintPage event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.AfterPrintPageEventArgs.Page">
      <summary>
The page to be printed.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.AfterPrintPageEventArgs.PagesLeft">
      <summary>
 The number of pages remaining.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.BeforePrintPageEventArgs">
      <summary>
 Provides data for the BeforePrintPage event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.BeforePrintPageEventArgs.Page">
      <summary>
The page to be printed.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.BeforePrintPageEventArgs.PagesLeft">
      <summary>
 The number of pages remaining.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.PdfUriNavigationEventArgs">
      <summary>
 Provides data for the PdfUriNavigation event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PdfUriNavigationEventArgs.URI">
      <summary>
 A uniform resource identifier (URI).
 A string that identifies a resource on the Internet typically a file that is the destination of a hypertext link, although it can also resolve to a query or other entity.
 (URIs are described in Internet RFC 2396, Uniform Resource Identifiers (URI).
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PdfUriNavigationEventArgs.Cancel">
      <summary>
 Allows to cancel the subsequent URI navigation action when this parameter is turned to True
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.PdfFileNavigationEventArgs">
      <summary>
 Provides data for the PdfFileNavigation event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PdfFileNavigationEventArgs.FilePath">
      <summary>
 The path of the file to navigate to.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PdfFileNavigationEventArgs.Cancel">
      <summary>
 Allows to cancel the subsequent file navigation action when this parameter is turned to True.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.PdfLaunchActionEventArgs">
      <summary>
 Provides data for the PdfLaunchAction event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PdfLaunchActionEventArgs.FilePath">
      <summary>
 The path of the application to be launched or the document to be opened or printed.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PdfLaunchActionEventArgs.ActionType">
      <summary>
 The type the the launch action. A member of the PdfActionLaunchOperation enumeration.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PdfLaunchActionEventArgs.Cancel">
      <summary>
 Allows to cancel the subsequent application launching action when this property is turned to True.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.PdfPasswordRequestEventArgs">
      <summary>
 Provides data for the PdfPasswordRequest event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PdfPasswordRequestEventArgs.PassWord">
      <summary>
 The password to decrypt the PDF.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdViewer.DropFileEventArgs">
      <summary>
 Provides data for the DropFile event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.DropFileEventArgs.File">
      <summary>
 An array of files path dropped in the Viewer.
 </summary>
    </member>
    <member name="F:GdPicture12.WPF.GdViewer.RegionEditedEvent">
      <summary>
 Occurs when a region is edited by the user.
 </summary>
    </member>
    <member name="F:GdPicture12.WPF.GdViewer.DocumentClosedEvent">
      <summary>
 Occurs when the displayed document is closed.
 </summary>
    </member>
    <member name="F:GdPicture12.WPF.GdViewer.AnnotationResizedEvent">
      <summary>
 Occurs when a GdPicture/XMP annotation is resized  by the user
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetAnnotationCount">
      <summary>
 Returns the number of GdPicture/XMP annotations available on the current page of the displayed document.
 </summary>
      <returns>
 The number of available annotations.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <example>
        <code description="Displays creation data and author of all available annotations" lang="VB.NET">
 For i As Integer = 0 To GdViewer1.GetAnnotationCount() - 1
    Dim Annot As GdPicture.Annotation = GdViewer1.GetAnnotationFromIdx(i)
    MessageBox.show("Author: " + Annot.Author)
    MessageBox.show("Creation time: " + Annot.CreationTime.ToString)
 Next
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetAnnotationFromIdx(System.Int32)">
      <summary>
 Returns a GdPicture/XMP annotations available on the current page of the displayed document.
 </summary>
      <returns>
 An Annotation object.
 </returns>
      <param name="AnnotationIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <example>
        <code description="Displays creation data and author of all available annotations" lang="VB.NET">
 For i As Integer = 0 To GdViewer1.GetAnnotationCount() - 1
    Dim Annot As GdPicture.Annotation = GdViewer1.GetAnnotationFromIdx(i)
    MessageBox.show("Author: " + Annot.Author)
    MessageBox.show("Creation time: " + Annot.CreationTime.ToString)
 Next
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DeleteAnnotation(System.Int32)">
      <summary>
 Removes a GdPicture/XMP annotation on the current page of the displayed document.
 </summary>
      <param name="AnnotationIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <example>
        <code description="Remove all available annotations" lang="VB.NET">
 For i As Integer = 1 To GdViewer1.GetAnnotationCount()
    GdViewer1.DeleteAnnotation(0)
 Next
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetSelectedAnnotationIdx">
      <summary>
 Returns the index of the selected GdPicture/XMP annotation.
 </summary>
      <returns>
 An Annotation object index. Must be a value between 0 and GetAnnotationCount() - 1 if an annotation is selected, else -1.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <example>
        <code description="Displays creation data and author of the selected annotation" lang="VB.NET">
 Dim AnnotationIdx as integer = GdViewer1.GetSelectedAnnotationIdx()
 If AnnotationIdx &gt;= 0 Then
    Dim Annot As GdPicture.Annotation = GdViewer1.GetAnnotationFromIdx(AnnotationIdx)
    MessageBox.show("Author: " + Annot.Author)
    MessageBox.show("Creation time: " + Annot.CreationTime.ToString)
 Else
    Msgbox "There is no annotation selected"
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SelectAnnotation(System.Int32)">
      <summary>
 Selects a GdPicture/XMP annotation.
 </summary>
      <param name="AnnotationIdx">An Annotation object index. Must be a value between 0 and GetAnnotationCount() - 1, or -1 to deselect all annotations.</param>
      <returns>A  member of the GdPictureStatus enumeration.</returns>
      <example>
        <code description="Makes selected the first available annotation" lang="VB.NET">
 GdViewer1.SelectAnnotation(0)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetAnnotationEditorMode(System.Boolean)">
      <summary>
 Defines the "editor mode" for the GdPicture/XMP annotation support.
 </summary>
      <param name="EditorMode">True to let the user to edit available GdPicture/XMP annotations, else
 False (all annotations locked).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.IsAnnoationVisibleAt(System.Int32,System.Int32,System.Int32)">
      <summary>
 Indicates whether the specified point, in the control space, is contained within a specific annotation bounding box.
 </summary>
      <param name="AnnotationIdx">An Annotation object index. Must be a value between 0 and GetAnnotationCount() - 1.</param>
      <param name="X">Specifies the x-coordinate of the point, in the control space.</param>
      <param name="Y">Specifies the y-coordinate of the point, in the control space.</param>
      <returns>True is the point if contained within the annotation, False otherwise.</returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.CancelLastAnnotInteractiveAdd">
      <summary>
 Asks to the control to ignore the latest request of interactive annotation creation.
 </summary>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SaveAnnotationsToPage">
      <summary>
 Forces the viewer to save the annotations to the current page. This method is automatically called internally on page change.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.RotateAnnotations(System.Int32)">
      <summary>
 Rotates all annotations (use the page coordinate system) by a specific angle. A call to the Redraw method is needed to refresh the screen.
 </summary>
      <param name="Angle">The angle of rotation. Supported values are 90, 180 and 270.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.ReloadAnnotations">
      <summary>
 Forces the viewer to reload the annotations of the current page.
 Use this method only if the displayed image has been edited by another object. A call to the Redraw method is needed to refresh the screen.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetAnnotationManager">
      <summary>
 Gets the AnnotationManager object associated with the Viewer.
 </summary>
      <returns>An AnnotationManager object. It is important to do not dispose this object.</returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddRulerAnnotInteractive(System.Windows.Media.Color,System.Single,System.Single,GdPicture12.Annotations.Annotation.UnitMode)">
      <summary>
 Allows the user to add a new ruler annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <param name="MeasurementUnit">The measurement unit of the ruler.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddPolyRulerAnnotInteractive(System.Windows.Media.Color,System.Single,System.Single,GdPicture12.Annotations.Annotation.UnitMode)">
      <summary>
 Allows the user to add a new poly ruler annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the lines.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <param name="MeasurementUnit">The measurement unit of the ruler.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddLineArrowAnnotInteractive(System.Windows.Media.Color,System.Single,System.Single,System.Single,System.Boolean,System.Single,System.Boolean)">
      <summary>
 Allows the user to add a new line arrow annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="ArrowWidth">The arrow width, in inches.</param>
      <param name="ArrowHeight">The arrow height, in inches.</param>
      <param name="ArrowFilled">True if the arrow must be filled, else false (stroked only).</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0
 (full transparency) and 1 (full opacity).</param>
      <param name="Reversed">Specifies if the starting and ending points of the annotation are inverted during the user drawing. This produces the effect to render the arrow at the first mouse down position. False by default.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddLineAnnotInteractive(System.Windows.Media.Color,System.Single,System.Windows.Media.PenLineCap,System.Windows.Media.PenLineCap,System.Single)">
      <summary>
 Allows the user to add a new line annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="StartCap">Defines the cap style used at the start of lines drawn.</param>
      <param name="EndCap">Defines the cap style used at the end of lines drawn.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddFreeHandHighlighterAnnotInteractive(System.Windows.Media.Color,System.Single)">
      <summary>
 Allows the user to add a new free-hand highlighter annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddFreeHandHighlighterAnnotInteractive(System.Windows.Media.Color,System.Single,System.Boolean)">
      <summary>
 Allows the user to add a new free-hand highlighter annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="ContinuousMode">When set to true multiple paths can be generated during the drawing operation. In such configuration the annotation will be ended on the first double-click operation.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddFreeHandAnnotInteractive(System.Windows.Media.Color,System.Single,System.Windows.Media.PenLineCap,System.Windows.Media.PenLineCap,System.Single)">
      <summary>
 Allows the user to add a new free-hand annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="StartCap">Defines the cap style used at the start of lines drawn.</param>
      <param name="EndCap">Defines the cap style used at the end of lines drawn.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddFreeHandAnnotInteractive(System.Windows.Media.Color,System.Single,System.Windows.Media.PenLineCap,System.Windows.Media.PenLineCap,System.Single,System.Boolean)">
      <summary>
 Allows the user to add a new free-hand annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="StartCap">Defines the cap style used at the start of lines drawn.</param>
      <param name="EndCap">Defines the cap style used at the end of lines drawn.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <param name="ContinuousMode">When set to true multiple paths can be generated during the drawing operation. In such configuration the annotation will be ended on the first double-click operation.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddPolygonAnnotInteractive(System.Windows.Media.Color,System.Single,System.Windows.Media.Color,System.Single)">
      <summary>
 Allows the user to add a new polygon annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="BackColor">The background color.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddFreeHandPolygonAnnotInteractive(System.Windows.Media.Color,System.Single,System.Windows.Media.Color,System.Single)">
      <summary>
 Allows the user to add a new free-hand polygon annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="BackColor">The background color.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddConnectedLinesAnnotInteractive(System.Windows.Media.Color,System.Single,System.Single)">
      <summary>
 Allows the user to add a new connected lines annotation using the mouse.
 </summary>
      <param name="BorderColor">The color of the border.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddRectangleAnnotInteractive(System.Boolean,System.Boolean,System.Windows.Media.Color,System.Windows.Media.Color,System.Single,System.Single)">
      <summary>
 Allows the user to add a new rectangle annotation using the mouse.
 </summary>
      <param name="Fill">Specifies if the rectangle must be filled.</param>
      <param name="Stroke">Specifies if the rectangle must be stroked.</param>
      <param name="BackColor">The background color to use if the rectangle must be filled.</param>
      <param name="BorderColor">The border color to use if the rectangle must be stroked.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddRectangleHighlighterAnnotInteractive(System.Windows.Media.Color)">
      <summary>
 Allows the user to add a new Highlighter rectangle annotation using the mouse.
 </summary>
      <param name="BackColor">The background color to use.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddTextAnnotationInteractive(System.String,System.Windows.Media.Color,System.String,System.Drawing.FontStyle,System.Single,System.Boolean,System.Windows.Media.Color,System.Windows.Media.Color,System.Single,System.Single)">
      <summary>
 Allows the user to add a new text annotation using the mouse.
 </summary>
      <param name="Text">The text to render.</param>
      <param name="ForeColor">The color of the font.</param>
      <param name="FontName">The name of the font, IE: Arial.</param>
      <param name="FontStyle">The style of the font.</param>
      <param name="FontSize">The size of the font, in points.</param>
      <param name="Fill">Specifies if the annotation must be filled or not.</param>
      <param name="BorderColor">The color of the border.</param>
      <param name="BackColor">The background color.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <param name="Rotation">The rotation of the annotation, in degrees.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddLinkAnnotationInteractive(System.String,System.String,System.Windows.Media.Color,System.Windows.Media.Color,System.String,System.Drawing.FontStyle,System.Drawing.FontStyle,System.Single,System.Single)">
      <summary>
 Allows the user to add a new link annotation using the mouse.
 </summary>
      <param name="Text">The text to render.</param>
      <param name="Link">The destination of the annotation. IE: http://www.gdpicture.com.</param>
      <param name="ForeColor">The color of the font.</param>
      <param name="HoverForeColor">The color of the font when the mouse if over the annotation.</param>
      <param name="FontName">The name of the font, IE: Arial.</param>
      <param name="FontStyle">The style of the font.</param>
      <param name="HoverFontStyle">The style of the font when the mouse if over the annotation.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full
 transparency) and 1 (full opacity).</param>
      <param name="Rotation">The rotation of the annotation, in degrees.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddStickyNoteAnnotationInteractive(System.String,System.Windows.Media.Color,System.String,System.Drawing.FontStyle,System.Int32,System.Single,System.Single)">
      <summary>
 Allows the user to add a new sticky note annotation using the mouse.
 </summary>
      <param name="Text">The text to render.</param>
      <param name="ForeColor">The color of the font.</param>
      <param name="FontName">The name of the font, IE: Arial.</param>
      <param name="FontStyle">The style of the font.</param>
      <param name="FontSize">The size of the font, in points.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <param name="Rotation">The rotation of the annotation, in degrees.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddRubberStampAnnotInteractive(System.String,System.Windows.Media.Color,System.String,System.Drawing.FontStyle,System.Windows.Media.Color,System.Single,System.Single,System.Single)">
      <summary>
 Allows the user to add a new rubber stamp annotation using the mouse.
 </summary>
      <param name="Text">The text to render.</param>
      <param name="ForeColor">The color of the font.</param>
      <param name="FontName">The name of the font, IE: Arial.</param>
      <param name="FontStyle">The style of the font.</param>
      <param name="BorderColor">The border color.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <param name="Rotation">The rotation of the annotation, in degrees.</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddEllipseAnnotInteractive(System.Boolean,System.Boolean,System.Windows.Media.Color,System.Windows.Media.Color,System.Single,System.Single)">
      <summary>
 Allows the user to add a new ellipse annotation using the mouse.
 </summary>
      <param name="Fill">Specifies if the ellipse must be filled.</param>
      <param name="Stroke">Specifies if the ellipse must be stroked.</param>
      <param name="BackColor">The background color to use if the ellipse must be filled.</param>
      <param name="BorderColor">The border color to use if the ellipse must be stroked.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddEmbeddedImageAnnotInteractive(System.Int32,System.Boolean,System.Windows.Media.Color,System.Single,System.Single)">
      <summary>
 Allows the user to add a new embedded image annotation, from a GdPicture image, using the mouse.
 </summary>
      <param name="ImageID">A GdPicture Image identifier. The image to render.</param>
      <param name="Stroke">Specifies if the annotation must be stroked.</param>
      <param name="BorderColor">The border color to use if the annotation must be stroked.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddEmbeddedImageAnnotInteractive(System.String,System.Boolean,System.Windows.Media.Color,System.Single,System.Single)">
      <summary>
 Allows the user to add a new embedded image annotation, from a file, using the mouse.
 </summary>
      <param name="ImagePath">The path of the image to render. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <param name="Stroke">Specifies if the annotation must be stroked.</param>
      <param name="BorderColor">The border color to use if the annotation must be stroked.</param>
      <param name="BorderWidth">The border width, in inches.</param>
      <param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity).</param>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SaveDocumentToPDF(System.String)">
      <summary>
 Saves the displayed document in PDF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
      <param name="FilePath">The path of PDF to create.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SaveDocumentToPDF(System.IO.Stream)">
      <summary>
 Saves the displayed document into a stream, in PDF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
      <param name="Stream">The stream to save the PDF.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SaveDocumentToPDF(System.String,System.String,System.String)">
      <summary>
 Saves the displayed document in PDF format with GdPicture/XMP annotation support on a distant server
 using HTTP or FTP transfer. In case of multipage document saving, the SavingProgress callback can be
 raised. The file transfer will be run synchronously.
 </summary>
      <param name="Uri">The full uri of the file to create. IE: ftp://ftp.gdpicture.com/upload/myfile.pdf
 or http://www.gdpicture.com/upload/myfile.pdf.</param>
      <param name="Login">The login required to be authenticated on the server. Can be an empty string.</param>
      <param name="Password">The password required to be authenticated on the server. Can be an empty
 string.</param>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetLastTransferError" />
      <returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError method can be used to diagnose the error.
 </returns>
      <remarks>This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SaveDocumentToTIFF(System.String,GdPicture12.TiffCompression)">
      <summary>
 Saves the displayed document in TIFF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
      <param name="FilePath">The path of TIFF to create.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <remarks>- Warning for multipage tiff documents: If the file destination is the same as the input document a GdPictureStatus.AccessDenied error will be returned. To avoid such problem you can turn the ForceTemporaryModeForImage property to True.
 This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SaveDocumentToTIFF(System.IO.Stream,GdPicture12.TiffCompression)">
      <summary>
 Saves the displayed document into a stream, in TIFF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
      <param name="Stream">The Stream to save the TIFF image.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SaveDocumentToTIFF(System.String,System.String,System.String,GdPicture12.TiffCompression)">
      <summary>
 Saves the displayed document in TIFF format with GdPicture/XMP annotation support on a distant server
 using HTTP or FTP transfer. In case of multipage document saving, the SavingProgress callback can be
 raised. The file transfer will be run synchronously.
 </summary>
      <param name="Uri">The full uri of the file to create. IE: ftp://ftp.gdpicture.com/upload/myfile.tif
 or http://www.gdpicture.com/upload/myfile.tif.</param>
      <param name="Login">The login required to be authenticated on the server. Can be an empty
 string.</param>
      <param name="Password">The password required to be authenticated on the server. Can be an empty
 string.</param>
      <param name="Compression">A member of the TiffCompression enumeration.</param>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetLastTransferError" />
      <returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError method can be used to diagnose the error.
 </returns>
      <remarks>This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SaveDocumentToJPEG(System.String,System.Int32)">
      <summary>
 Saves the displayed document in JPEG format with GdPicture/XMP annotation support.
 </summary>
      <param name="FilePath">The path of JPEG to create.</param>
      <param name="Quality">Compression level [0 to 100]. 0: worse quality and better compression, 100:
 best quality and worse compression.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SaveDocumentToJPEG(System.IO.Stream,System.Int32)">
      <summary>
 Saves the displayed document into a stream, in JPEG format with GdPicture/XMP annotation support.
 </summary>
      <param name="Stream">The stream to save the JPEG image.</param>
      <param name="Quality">Compression level [0 to 100]. 0: worse quality and better compression, 100:
 best quality and worse compression.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SaveDocumentToJPEG(System.String,System.String,System.String,System.Int32)">
      <summary>
 Saves the displayed document in JPEG format with GdPicture/XMP annotation support on a distant server
 using HTTP or FTP transfer.The file transfer will be run synchronously.
 </summary>
      <param name="Uri">The full uri of the file to create. IE: ftp://ftp.gdpicture.com/upload/myfile.jpg
 or http://www.gdpicture.com/upload/myfile.jpg.</param>
      <param name="Login">The login required to be authenticated on the server. Can be an empty string.</param>
      <param name="Password">The password required to be authenticated on the server. Can be an empty
 string.</param>
      <param name="Quality">Compression level [0 to 100]. 0: worse quality and better compression, 100:
 best quality and worse compression.</param>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetLastTransferError" />
      <returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError method can be used to diagnose the error.
 </returns>
      <remarks>This method has been implemented to save document with GdPicture/XMP annotations. Therefore, the GdPicture/XMP annotation Plugin is required to use it.</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SaveAnnotationsToXMP(System.String)">
      <summary>
 Saves the GdPicture/XMP annotation part of the current page of the displayed document to a XML file.
 </summary>
      <param name="FilePath">The path of XML file to create.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SaveAnnotationsToXMP(System.IO.Stream)">
      <summary>
 Saves the GdPicture/XMP annotation part of the current page of the displayed document to a stream.
 </summary>
      <param name="Stream">The stream to save the annotations.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Save annotations to stream." lang="VB.NET">
 Dim annotStream As New IO.MemoryStream
 GdViewer1.SaveAnnotationsToXMP(annotStream)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SaveAnnotationsToXMPEx(System.String)">
      <summary>
 Saves the GdPicture/XMP annotation part of all pages of the displayed document to a XML file.
 </summary>
      <param name="FilePath">The path of XML file to create.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SaveAnnotationsToXMPEx(System.IO.Stream)">
      <summary>
 Saves the GdPicture/XMP annotation part of all pages of the displayed document to a XML file.
 </summary>
      <param name="Stream">The stream to save the annotations.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <example>
        <code description="Save annotations to stream." lang="VB.NET">
 Dim annotStream As New IO.MemoryStream
 GdViewer1.SaveAnnotationsToXMP(annotStream)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.LoadAnnotationsFromXMP(System.String)">
      <summary>
 Loads and applies GdPicture/XMP annotation from a XML file previously generated by the SaveAnnotationsToXMP or SaveAnnotationsToXMPEx methods.
 </summary>
      <param name="FilePath">The path of XML file to load.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.LoadAnnotationsFromXMP(System.IO.Stream)">
      <summary>
 Loads and applies GdPicture/XMP annotation from a stream containing data previously generated by the SaveAnnotationsToXMP or SaveAnnotationsToXMPEx methods.
 </summary>
      <param name="Stream">The Stream object containing the annotations data.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.BurnAnnotationsToPage(System.Boolean)">
      <summary>
 Burns (or flatten) the GdPicture/XMP annotation of the current page of the displayed document.
 To burn custom annotations you need to use the overload taking a VectorMode parameter set to False.
 </summary>
      <param name="RemoveInitialAnnots">True to remove annotation blob content from the file, else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.BurnAnnotationsToPage(System.Boolean,GdPicture12.GdPictureOutputIntent)">
      <summary>
 Burns (or flatten) the GdPicture/XMP annotation of the current page of the displayed document.
 This overload doesn't support custom annotation burning.
 </summary>
      <param name="RemoveInitialAnnots">True to remove annotation blob content from the file, else False.</param>
      <param name="Intent">A member of the GdPictureOutputIntent enumeration. Defines the intent of the produced page. Default value is IntentColor. Other intents produce smaller page size.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.BurnAnnotationsToPage(System.Boolean,System.Boolean)">
      <summary>
 Burns (or flatten) the GdPicture/XMP annotation of the current page of the displayed document.
 </summary>
      <param name="RemoveInitialAnnots">True to remove annotation blob content from the file, else False.</param>
      <param name="VectorMode">Determines if annotations data must be renderd in vector format. This parameter is only suitable for PDF annotations burning. Custom annotations can be burned only when VectorMode is set to False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayTextEditBox(System.Int32)">
      <summary>
 Prompts the annotation text modification dialog box to the user. Can be used with StickyNote and Text annotations only.
 This method is particularly useful if you want to let the user subsequently define the text of the annotation after having added it (see example).
 </summary>
      <param name="AnnotationIdx">The index of the annotation.</param>
      <example>
        <code description="Prompts the user to modify annotation text by intercepting the AnnotationAddedByUse event." lang="VB.NET">
 Private Sub GdViewer1_AnnotationAddedByUser(ByVal AnnotationIdx As Integer) Handles GdViewer1.AnnotationAddedByUser
 GdViewer1.DisplayTextEditBox(AnnotationIdx)
 </code>
      </example>
      <seealso cref="M:GdPicture12.WPF.GdViewer.HideTextEditBox(System.Boolean)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.HideTextEditBox(System.Boolean)">
      <summary>
 Hides the text modification dialog box from the control. Can be used with StickyNote and Text annotations only.
 If the annotation text modification dialog is not displayed, this method returns a GdPictureStatus.Aborted status.
 </summary>
      <param name="SaveText">Set true to apply the current text to the annotation, else False.</param>
      <seealso cref="M:GdPicture12.WPF.GdViewer.DisplayTextEditBox(System.Int32)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetLastPath">
      <summary>
 Returns the path of the latest loaded file.
 </summary>
      <returns>
 The latest loaded or saved file path.
 </returns>
      <example>
        <code description="Prompt the user to select a document to display and retrieve the path of the selected file." lang="VB.NET">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
 GdViewer.DisplayFromFile("") 'Specifying empty string prompts the user to select a file
 Msgbox "File loaded: " + GdViewer.GetLastPath()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetLastTransferError">
      <summary>
 Returns, if any, the last HTTP or FTP transfer error description.
 </summary>
      <returns>
 The error description.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetVersion">
      <summary>
 Returns the GdPicture source code version used in the following format M.mrr where 'M' describes the major version, 'm' the medium version and 'rr' the release number.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetStat">
      <summary>
 Returns the last viewer Status.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GifStop">
      <summary>
 Stops a GIF animation.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GifPlay">
      <summary>
 Plays a GIF animation in loop.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.ClearRect">
      <summary>
 Removes the rectangle of area selection from the viewer.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.IsRect">
      <summary>
 Returns True if the rectangle of area selection is drawn on the viewer, else false.
 </summary>
      <example>
        <code description="Determining whether the rectangle of selection is drawn on the viewer or not" lang="VB.NET">
 Dim RectDrawnOnViewer As Boolean
 RectDrawnOnViewer = oGdViewer.IsRect()
  </code>
      </example>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetRectCoordinatesOnDocumentPixel(System.Double,System.Double,System.Double,System.Double)">
      <summary>
 Sets the coordinates, in pixel, of the rectangle of area selection over the page of the displayed
 document.
 </summary>
      <param name="Left">Left pixel (0 based) position of the rectangle of area selection.</param>
      <param name="Top">Top pixel (0 based) position of the rectangle of area selection.</param>
      <param name="Width">Width of the rectangle of area selection in pixel.</param>
      <param name="Height">Height of the rectangle of area selection in pixel.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRectCoordinatesOnViewerPixel(System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
 Returns the coordinates, in pixel, of the rectangle of area selection over the viewer.
 </summary>
      <param name="Left">Returns Left pixel position of the rectangle of area selection.</param>
      <param name="Top">Returns Top pixel position of the rectangle of area selection.</param>
      <param name="Width">Returns Width of the rectangle of area selection in pixel.</param>
      <param name="Height">Returns Height of the rectangle of area selection in pixel.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetRectCoordinatesOnViewerPixel(System.Double,System.Double,System.Double,System.Double)">
      <summary>
 Sets the coordinates, in pixel, of the rectangle of area selection over the viewer.
 </summary>
      <param name="Left">Required. Long. Left pixel position of the rectangle of area selection.</param>
      <param name="Top">Required. Long. Top pixel position of the rectangle of area selection.</param>
      <param name="Width">Required. Long. Width of the rectangle of area selection in pixel.</param>
      <param name="Height">Required. Long. height of the rectangle of area selection in pixel.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRectCoordinatesOnDocumentPixel(System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
 Returns the coordinates, in pixel, of the rectangle of area selection over the document.
 </summary>
      <param name="Left">Returns Left pixel position of the rectangle of area selection.</param>
      <param name="Top">Returns Top pixel position of the rectangle of area selection.</param>
      <param name="Width">Returns Width of the rectangle of area selection in pixel.</param>
      <param name="Height">Returns Height of the rectangle of area selection in pixel.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRectCoordinatesOnDocumentInch(System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
 Returns the coordinates, in inches, of the rectangle of area selection over the document.
 </summary>
      <param name="Left">Returns Left pixel position of the rectangle of area selection.</param>
      <param name="Top">Returns Top pixel position of the rectangle of area selection.</param>
      <param name="Width">Returns Width of the rectangle of area selection in pixel.</param>
      <param name="Height">Returns Height of the rectangle of area selection in pixel.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetRectCoordinatesOnDocumentInch(System.Double,System.Double,System.Double,System.Double)">
      <summary>
 Sets the coordinates in inches of the rectangle of area selection over the page of the displayed
 document.
 </summary>
      <param name="Left">Left position of the rectangle of area selection in inches.</param>
      <param name="Top">Top position of the rectangle of area selection in inches.</param>
      <param name="Width">Width of the rectangle of area selection in inches.</param>
      <param name="Height">Height of the rectangle of area selection in inches.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.IsRectDrawing">
      <summary>
 Returns if the user is drawing the rectangle of area selection.
 </summary>
      <returns>True if the rectangle of selection is currently drawn, false otherwise.</returns>
      <remarks>This method should be called from the MouseDown or MouseMove events.</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.IsRectMoving">
      <summary>
 Returns if the user is moving the rectangle of area selection.
 </summary>
      <returns>True if the rectangle of selection is currently moved, false otherwise.</returns>
      <remarks>This method should be called from the MouseDown or MouseMove events.</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.IsRectResizing">
      <summary>
 Returns if the user is resizing the rectangle of area selection.
 </summary>
      <returns>True if the rectangle of selection is currently resized, false otherwise.</returns>
      <remarks>This method should be called from the MouseDown or MouseMove events.</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.RotatePage(GdPicture12.GdPictureRotateFlipType)">
      <summary>
 Rotates clockwise or flips the current page of the displayed document.
 </summary>
      <param name="Rotation">A member of the GdPictureRotateFlipType enumeration.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.RotateView(GdPicture12.GdPictureRotateFlipType)">
      <summary>
 Rotates clockwise or flips the global view.
 </summary>
      <param name="Rotation">A member of the GdPictureRotateFlipType enumeration.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetHorizontalScrollBarMaxPosition">
      <summary>
 Returns the maximum position of the horizontal scrollbar.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetVerticalScrollBarMaxPosition">
      <summary>
 Returns the maximum position of the vertical scrollbar.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetHorizontalScrollBarPosition">
      <summary>
 Returns the current position of the horizontal scrollbar.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetVerticalScrollBarPosition">
      <summary>
 Returns the current position of the vertical scrollbar.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetHorizontalScrollBarPosition(System.Double)">
      <summary>
 Moves to horizontal scrollbar to a specific position.
 </summary>
      <param name="NewPos">The position to move the scrollbar.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetVerticalScrollBarPosition(System.Double)">
      <summary>
 Moves to vertical scrollbar to a specific position.
 </summary>
      <param name="NewPos">The position to move the scrollbar.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetScrollBarsPosition(System.Double,System.Double)">
      <summary>
 Moves both horizontal and vertical scrollbars to specific positions.
 </summary>
      <param name="NewHPos">The position to move the horizontal scrollbar.</param>
      <param name="NewVPos">The position to move the vertical scrollbar.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetPageBounds(System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
 Returns the bounds, in pixels, of the viewer area used to render the current page.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetDisplayedArea(System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
 Returns the coordinates, in pixel, of the visible area of the displayed document.
 </summary>
      <param name="Left">Returns Left pixel (0 based) position of the area.</param>
      <param name="Top">Returns Top pixel (0 based) position of the area.</param>
      <param name="Width">Returns Width of the area in pixel.</param>
      <param name="Height">Returns Height of the area in pixel.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetDisplayedAreaInch(System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
 Returns the coordinates in inches of the visible area of the displayed document.
 </summary>
      <param name="Left">Returns Left position, in inches, of the area.</param>
      <param name="Top">Returns Top position, in inches, of the area.</param>
      <param name="Width">Returns Width, in inches, of the area.</param>
      <param name="Height">Returns Height, in inches, of the area.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayPage(System.Int32)">
      <summary>
 Changes the displayed page of the current multipage document.
 </summary>
      <param name="Page">Page number between 1 and page count.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetDocumentType">
      <summary>
 Returns the type of the displayed document.
 </summary>
      <returns>
 A member of the DocumentType enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromFile(System.String)">
      <summary>
 Displays a document from a file.
 </summary>
      <param name="FilePath">The path of the document to display. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() method to retrieve the path of the selected file.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromFTP(System.String,System.String,System.String,System.String,System.Int32)">
      <summary>
 Displays a document from a file stored in a distant server using FTP access. The document will be loaded in an asynchronous way. You can catch the TransferProgress and the TransferEnded events to monitor the transfer.
 </summary>
      <param name="Host">The host server IE: ftp.gdicture.com.</param>
      <param name="Path">The image file path into the distant server IE: /demo/image.jpg.</param>
      <param name="Login">User Login.</param>
      <param name="Password">User Password.</param>
      <param name="FTPPort">The FTP port number used. Usually 21.</param>
      <returns>
 A member of the GdPictureStatus enumeration. If non OK the GetLastTransferError() method can be used for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetLastTransferError" />
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromFTP(System.String,System.String,System.String)">
      <summary>
 Displays a document from a file stored in a distant server using FTP access. The document will be loaded in an asynchronous way. You can catch the TransferProgress and the TransferEnded events to monitor the transfer.
 </summary>
      <param name="Uri">The path of the document. IE: ftp://ftp.mywebsite.com/mydocument.pdf.</param>
      <param name="Login">User Login.</param>
      <param name="Password">User Password.</param>
      <returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError method can be used for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetLastTransferError" />
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetHttpTransfertBufferSize(System.Int32)">
      <summary>
 Changes the default packet size used by the DisplayFromHTTP() and DisplayFromFTP methods. Default value used is 4096.
 </summary>
      <param name="BufferSize">New buffer size. ex 1024, 2048, 4096, 8192 etc.</param>
      <seealso cref="M:GdPicture12.WPF.GdViewer.DisplayFromHTTP(System.String,System.String,System.Int32)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetFtpPassiveMode(System.Boolean)">
      <summary>
 Specifies if the FTP transfer mode is Passive or not for the DisplayFromFTP() method. True by
 default.
 </summary>
      <param name="PassiveMode">True for passive FTP transfer mode, else Flase.</param>
      <seealso cref="M:GdPicture12.WPF.GdViewer.DisplayFromFTP(System.String,System.String,System.String)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromHTTPStop">
      <summary>
 Avoids the downloading started by the DisplayFromHTTP() or DisplayFromFTP() method.
 </summary>
      <seealso cref="M:GdPicture12.WPF.GdViewer.DisplayFromHTTP(System.String,System.String,System.Int32)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromHTTP(System.String,System.String,System.Int32)">
      <summary>
 Displays a document from a file stored in a distant server using HTTP. The document will be loaded in an asynchronous way. You can catch the TransferProgress and the TransferEnded events to monitor the transfer.
 </summary>
      <param name="Host">The host server. IE: http://www.gdpicture.com.</param>
      <param name="Path">The image file path into the distant server. IE: /demo/image.jpg.</param>
      <param name="HTTPPort">The HTTP port number used. Usually 80 or 443 to use https transfer mode.</param>
      <returns>
 A member of the GdPictureStatus enumeration. If non OK the GetLastTransferError() method can be used for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.DisplayFromHTTPStop" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.SetHttpTransfertBufferSize(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetLastTransferError" />
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromHTTP(System.String,System.String,System.String)">
      <summary>
 Displays a document from a file stored in a distant server using HTTP. The document will be loaded in an asynchronous way. You can catch the TransferProgress and the TransferEnded events to monitor the transfer.
 </summary>
      <param name="Uri">The destination Uri. IE: http://guides.gdpicture.com/v8/pdf/GdPicture.NET8.pdf.</param>
      <param name="Login">The login required to access the URI. Can be an empty string.</param>
      <param name="Password">The password required to access the URI. Can be an empty string.</param>
      <returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError method can be used for diagnosing the error.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.DisplayFromHTTPStop" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.SetHttpTransfertBufferSize(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetLastTransferError" />
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.CloseDocument">
      <summary>
 Closes the displayed document.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromStream(System.IO.Stream)">
      <summary>
 Displays document from a Stream object.
 </summary>
      <param name="Stream">System.IO.Stream object storing the document.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromStream(System.IO.Stream,GdPicture12.DocumentFormat)">
      <summary>
 Displays a document from a stream object.
 </summary>
      <param name="Stream">System.IO.Stream object storing the document.</param>
      <param name="DocumentFormat">A member of the DocumentFormat enumeration specifying the input document format.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromStream(System.IO.Stream,System.String)">
      <summary>
 Displays a document from a stream object.
 </summary>
      <param name="Stream">System.IO.Stream object storing the document.</param>
      <param name="FileName">The initial name of the file stored in the Stream object. IE: myfile.tif. The document format will be automatically detected based on this file name.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromByteArray(System.Byte[])">
      <summary>
 Displays a document from a file stored within an array of bytes.
 </summary>
      <param name="Data">The document data.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
      <example>
        <code description="Displaying an image on the GdViewer from a byte Array" lang="VB.NET">
 Dim oFile As System.IO.FileInfo
 oFile = New System.IO.FileInfo("myimage.gif")
 Dim oFileStream As System.IO.FileStream = oFile.OpenRead()
 Dim lBytes As Integer = CInt(oFileStream.Length)
 If (lBytes &gt; 0) Then
    Dim fileData(lBytes - 1) As Byte
    Dim ImageID As Integer
    oFileStream.Read(fileData, 0, lBytes)
    oFileStream.Close()
    oGdViewer.DisplayFromByteArray(fileData)
 End If
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromMemory(System.IntPtr,System.Int32)">
      <summary>
 Displays a document from a file stored within an area of the memory.
 </summary>
      <param name="hMem">A pointer to the area of the memory which stores the document.</param>
      <param name="Length">The length in byte of the area.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromRawBits(System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.IntPtr)">
      <summary>
 Displays an Image from raw bitmap in memory.
 </summary>
      <remarks>
 Warning: Do not remove the raw bitmap from the memory until you closed the displayed document.
 </remarks>
      <param name="Width">Specifies the width, in pixels, of the bitmap.</param>
      <param name="Height">Specifies the height, in pixels, of the bitmap.</param>
      <param name="Stride">Specifies the byte offset between the beginning of one scan line and the
 next. This is usually (but not necessarily) the number of bytes in the
 pixel format (for example, 2 for 16 bits per pixel) multiplied by the
 width of the bitmap. The value passed to this parameter must be a multiple
 of four.</param>
      <param name="PixelFormat">Specifies the pixel format of the bitmap. A member of the PixelFormat
 enumeration.</param>
      <param name="Bits">Pointer to an array of bytes that contains the pixel data. The caller is
 responsible for allocating and freeing the block of memory pointed to by
 this parameter.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetStat" />
      <example>
        <code description="Using DisplayFromRawBits. The following code assumes that the bits of the image are stored in an IntPtr called iBits" lang="VB.NET">
 oGdViewer.DisplayFromRawBits(250, 250, 750, Imaging.PixelFormat.Format24bppRgb, iBits)
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromString(System.String)">
      <summary>
 Displays a document from a file stored within string data (Encoding 1252).
 </summary>
      <param name="Data">String which contains the image file data.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <remarks>
 Supported formats are listed here: http://www.gdpicture.com/solutions/supported-formats/.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromGdPictureImage(System.Int32)">
      <summary>
 Displays a GdPicture Image.
 </summary>
      <param name="ImageID">GdPicture Image Identifier of the image to display.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromGdPicturePDF(GdPicture12.GdPicturePDF)">
      <summary>
 Displays a PDF document from a GdPicturePDF object.
 </summary>
      <param name="PDF">A GdPicturePDF object.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromHBitmap(System.IntPtr)">
      <summary>
 Displays an image from a handle to a Windows Microsoft Windows Graphics Device Interface (GDI).
 </summary>
      <param name="Hbitmap">Windows Microsoft Windows Graphics Device Interface (GDI).</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromBitmapSource(System.Windows.Media.Imaging.BitmapSource)">
      <summary>
 Displays an image from a BitmapSource object.
 </summary>
      <param name="BitmapSource">A BitmapSource object.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromHICON(System.IntPtr)">
      <summary>
 Displays an image from a handle to a Windows handle to icon.
 </summary>
      <param name="HICON">Windows handle to icon.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromClipboard">
      <summary>
 Displays an image stored into the clipboard.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFromDIB(System.IntPtr)">
      <summary>
 Displays a Device Independent Bitmap handle (DIB).
 </summary>
      <param name="Dib">Pointer to a Microsoft Windows Graphics Device Interface (GDI) BITMAPINFO
 structure.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.ReleaseGdPictureImage(System.Int32)">
      <summary>
 Deletes a GdPicture Image from the memory.
 </summary>
      <param name="ImageID">GdPicture Image Identifier. The GdPicture image to release.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetPageThumbnail(System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
      <summary>
 Creates a High Quality thumbnail (returns a GdPicture image) of custom size from a page of the
 displayed document.
 This method fits the image thumbnail within a rectangle of specified dimensions having a specified
 background color.
 This GdPicture image can be used by another GdPictureImaging or GdViewer object.
 </summary>
      <param name="Width">The width of the thumbnail to create.</param>
      <param name="Height">The height of the thumbnail to create.</param>
      <param name="Page">The page of the document.</param>
      <param name="BackColor">Color Object. Background color of the thumbnail.</param>
      <returns>
 GdPicture Image Identifier. The Image thumbnail.Returns 0 if method failed.
 </returns>
      <remarks>
        <para>To delete the created GdPicture image from the memory you must use the ReleaseGdPictureImage() method.</para>
        <para>Use the GetStat() method to determine if this method failed.</para>
      </remarks>
      <example>
        <code description="Creates a thumbnail of the current page and save it to PNG image." lang="VB.NET">
 Dim ImageID As Integer = GdViewer1.GetPageThumbnail(256, 256, GdViewer1.CurrentPage, System.Windows.Media.Color.FromArgb(255, 180, 180, 180))
 Using oGdPictureImaging As New GdPictureImaging
    oGdPictureImaging.SaveAsPNG(ImageID, "thumbnail.png")
 End Using
 GdViewer1.ReleaseGdPictureImage(ImageID)
 </code>
      </example>
      <seealso cref="M:GdPicture12.WPF.GdViewer.ReleaseGdPictureImage(System.Int32)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetSelectedText">
      <summary>
 Returns the user selected text.
 </summary>
      <returns>The user selected text.</returns>
      <remarks>Use the GetStat() method to determine if this method failed.</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetSelectedTextRegions">
      <summary>
 Returns an array of rectangle which represent the regions bounding the selected text.
 </summary>
      <returns>The regions bounding the selected text.</returns>
      <remarks>Coordinates are expressed in inches starting from the most top-left position in the page.</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SelectAllText">
      <summary>
 Selects all text of the current page.
 </summary>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfSearchText(System.String,System.Int32,System.Boolean)">
      <summary>
 Searches the current page of the displayed PDF for a given text string.
 </summary>
      <param name="Text">The text to search for.</param>
      <param name="Occurrence">Optional. The occurrence of the text to search for. 0 to search and
 highlight all occurrences found else 1 to search for the first
 occurrence, 2 for the second... If you specify a value
 different of 0 the area covered by the occurrence found is made the
 current selection.</param>
      <param name="CaseSensitive">True to apply case-sensitive search, else False.</param>
      <returns>
 True if the string has been found, else False.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <example>
        <code description="Searches the current page for a string and highlight the result" lang="VB.NET">
 Dim Text As String = "PDF"
 Dim Occurrence As Integer = 1
 Dim Left As Double = 0
 Dim Top As Double = 0
 Dim Width As Double = 0
 Dim Height As Double = 0
 GdViewer1.RemoveAllRegions 'remove previously added regions, if any.
 While GdViewer1.PdfSearchText(GdViewer1.CurrentPage, Text, Occurrence, false, Left, Top, Width, Height)
    GdViewer1.AddRegion(("MyRegion" + Occurrence.ToString), Left, Top, Width, Height, System.Windows.Media.Color.FromArgb(255, 255, 255, 0), GdViewer.RegionFillMode.Multiply)
    Occurrence += 1
 End While
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfSearchText(System.String,System.Int32,System.Boolean,System.Boolean)">
      <summary>
 Searches the current page of the displayed PDF for a given text string.
 </summary>
      <param name="Text">The text to search for.</param>
      <param name="Occurrence">The occurrence of the text to search for. Set 0 to search and highlight all occurrences found else 1 to search for the first occurrence, 2 for the second...</param>
      <param name="CaseSensitive">True to apply case-sensitive search, else False.</param>
      <param name="WholeWords">Searches for whole words only.</param>
      <returns>
 True if the string has been found, else False.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <example>
        <code description="Searches the current page for a string and highlight the result" lang="VB.NET">
 Dim Text As String = "PDF"
 Dim Occurrence As Integer = 1
 Dim Left As Double = 0
 Dim Top As Double = 0
 Dim Width As Double = 0
 Dim Height As Double = 0
 GdViewer1.RemoveAllRegions 'remove previously added regions, if any.
 While GdViewer1.PdfSearchText(GdViewer1.CurrentPage, Text, Occurrence, false, Left, Top, Width, Height)
    GdViewer1.AddRegion(("MyRegion" + Occurrence.ToString), Left, Top, Width, Height, System.Windows.Media.Color.FromArgb(255, 255, 255, 0), GdViewer.RegionFillMode.Multiply)
    Occurrence += 1
 End While
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfSearchText(System.Int32,System.String,System.Int32,System.Boolean,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
 Searches a specific page of the displayed PDF for an occurrence of a given text string and returns
 its bounding box.
 </summary>
      <param name="Page">The page to search.</param>
      <param name="Text">The text to search for.</param>
      <param name="Occurrence">The occurrence of the text to search for. 1 to search for the first
 occurrence, 2 for the second... 0 is not accepted.</param>
      <param name="CaseSensitive">True to apply case-sensitive search, else False.</param>
      <param name="Left">If the occurrence is found, returns the left position in inches of the
 area covering the text.</param>
      <param name="Top">If the occurrence is found, returns the top position in inches of the
 area covering the text.</param>
      <param name="Width">If the occurrence is found, returns the width in inches of the area
 covering the text.</param>
      <param name="Height">If the occurrence is found, returns the height in inches of the area
 covering the text.</param>
      <returns>
 True if the string has been found, else False.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfSearchText(System.Int32,System.String,System.Int32,System.Boolean,System.Boolean,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
 Searches a specific page of the displayed PDF for an occurrence of a given text string and returns
 its bounding box.
 </summary>
      <param name="Page">The page to search.</param>
      <param name="Text">The text to search for.</param>
      <param name="Occurrence">The occurrence of the text to search for. 1 to search for the first
 occurrence, 2 for the second... 0 is not accepted.</param>
      <param name="CaseSensitive">True to apply case-sensitive search, else False.</param>
      <param name="WholeWords">Searches for whole words only.</param>
      <param name="Left">If the occurrence is found, returns the left position in inches of the
 area covering the text.</param>
      <param name="Top">If the occurrence is found, returns the top position in inches of the
 area covering the text.</param>
      <param name="Width">If the occurrence is found, returns the width in inches of the area
 covering the text.</param>
      <param name="Height">If the occurrence is found, returns the height in inches of the area
 covering the text.</param>
      <returns>
 True if the string has been found, else False.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfGetTextOccurenceCount(System.Int32,System.String,System.Boolean,System.Boolean)">
      <summary>
 Searches a specific page of the displayed PDF for an occurrence of a given text string and returns the number of occurences found.
 </summary>
      <param name="Page">The page to search.</param>
      <param name="Text">The text to search for.</param>
      <param name="CaseSensitive">True to apply case-sensitive search, else False.</param>
      <param name="WholeWords">Searches for whole words only.</param>
      <returns>The number of occurences found.</returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfGetPageText">
      <summary>
 Returns the text of the current page of the displayed PDF.
 </summary>
      <returns>
 The text of the displayed pdf page if succeeded, or an empty string if failed.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfGetPageText(System.Int32)">
      <summary>
 Returns the text of a specific page of the displayed PDF.
 </summary>
      <param name="Page">The page to extract the text.</param>
      <returns>
 The text of the specific pdf page if succeeded, or an empty string if failed.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfGetPageTextArea(System.Double,System.Double,System.Double,System.Double)">
      <summary>
 Returns the text in a specific rectangle in the current page of the displayed PDF.
 </summary>
      <param name="Left">Left position of the rectangle in inches.</param>
      <param name="Top">Top position of the rectangle in inches.</param>
      <param name="Width">Width of the rectangle in inches.</param>
      <param name="Height">Height of the rectangle in inches.</param>
      <returns>
 The text within the specified area.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfGetPageTextArea(System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>
 Returns the text in a specific rectangle in a specific page of the displayed PDF.
 </summary>
      <param name="Page">The page to extract the text.</param>
      <param name="Left">Left position of the rectangle in inches.</param>
      <param name="Top">Top position of the rectangle in inches.</param>
      <param name="Width">Width of the rectangle in inches.</param>
      <param name="Height">Height of the rectangle in inches.</param>
      <returns>
 The text within the specified area.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfGetVersion">
      <summary>
 Returns the version of the displayed PDF.
 </summary>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfGetMetadata">
      <summary>
 Returns if any, the Metadata of the displayed PDF.
 </summary>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfGetEncryptionScheme">
      <summary>
 Returns if any, the mode of encryption of the displayed PDF.
 </summary>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfGetAuthor">
      <summary>
 Returns the author of the displayed PDF.
 </summary>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfGetTitle">
      <summary>
 Returns the title of the displayed PDF.
 </summary>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfGetSubject">
      <summary>
 Returns the subject of the displayed PDF.
 </summary>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfGetKeywords">
      <summary>
 Returns the keywords of the displayed PDF.
 </summary>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfGetCreator">
      <summary>
 Returns the creator of the displayed PDF.
 </summary>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfGetProducer">
      <summary>
 Returns the producer of the displayed PDF.
 </summary>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfGetCreationDate">
      <summary>
 Returns the date of creation of the displayed PDF.
 </summary>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PdfGetModificationDate">
      <summary>
 Returns the date of modification of the displayed PDF.
 </summary>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.TagCount">
      <summary>
 Returns the number of Tags (Exif, Extra, Thumbnails &amp; GPS) attached to the displayed document.
 </summary>
      <returns>
 The number of tags attached to the displayed document.
 </returns>
      <remarks>
        <para>
 Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
 Thumbnail related TAGs and Gps TAGs.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.IPTCCount">
      <summary>
 Returns the number of IPTC Tags attached to the displayed document.
 </summary>
      <returns>
 Number of IPTC tag.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.TagGetID(System.Int32)">
      <summary>
 Returns an Exif Tag ID attached to the displayed document.
 </summary>
      <param name="TagNo">Must be a value between 1 and the number of Exif TAGs attached to the displayed
 document.</param>
      <returns>
 A member of the Tags enumeration.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.TagCount" />
      <remarks>
        <para>
 Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
 Thumbnail related TAGs and Gps TAGs.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.IPTCGetID(System.Int32)">
      <summary>
 Returns an IPTC Tag ID attached to the displayed document.
 </summary>
      <param name="TagNo">Must be a value between 1 and the number of IPTC TAGs attached to the displayed
 document.</param>
      <returns>
 The IPTC tag ID. A member of the IPTCTags enumeration.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.IPTCCount" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.TagGetName(System.Int32)">
      <summary>
 Returns as string a Tag name attached to the displayed document.
 </summary>
      <param name="TagNo">Must be a value between 1 and the number of Exif TAGs attached to the displayed
 document.</param>
      <returns>
 The name of the tag.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.TagCount" />
      <remarks>
        <para>
 Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
 Thumbnail related TAGs and Gps TAGs.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.TagGetValueString(System.Int32)">
      <summary>
 Returns as string, the value of a Tag attached to the displayed document.
 </summary>
      <param name="TagNo">Must be a value between 1 and the number of Exif TAGs attached to the displayed
 document.</param>
      <returns>
 The value of the tag.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.TagCount" />
      <remarks>
        <para>
 Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
 Thumbnail related TAGs and Gps TAGs
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.IPTCGetValueString(System.Int32)">
      <summary>
 Returns as string, the value of an IPTC Tag attached to the displayed document.
 </summary>
      <param name="TagNo">Must be a value between 1 and the number of IPTC TAGs attached to the displayed
 document.</param>
      <returns>
 The value of the tag.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.IPTCCount" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetItemMenuCaption(System.Int32,System.String)">
      <summary>
 Changes the caption of an item of the contextual menu.
 </summary>
      <param name="MenuItemIdx">Item Index. Can be:
 <para>1: Pages / Frames</para><para>2: Pages / Frames || Goto First</para><para>3: Pages / Frames || Goto Previous</para><para>4: Pages / Frames || Goto Next</para><para>5: Pages / Frames || Goto Last</para><para>100: Play Gif</para><para>200: Stop Gif Animation</para><para>300: Rotations</para><para>310: Rotation || Rotate Page 90°</para><para>311: Rotation || Rotate Page 180°</para><para>312: Rotation || Rotate Page 270°</para><para>313: Rotation || Flip Page Horizontally</para><para>314: Rotation || Flip Page Vertically</para><para>315: Rotation || Rotate View 90°</para><para>316: Rotation || Rotate View 180°</para><para>317: Rotation || Rotate View 270°</para><para>318: Rotation || Flip View Horizontally</para><para>319: Rotation || Flip View Vertically</para><para>400: ScrollBars</para><para>500: Copy Bitmap to Clipboard</para><para>501: Copy Text to Clipboard</para><para>600: Zoom</para><para>601: Zoom || Zoom in</para><para>602: Zoom || Zoom out</para><para>603: Zoom || Zoom 100%</para><para>604: Zoom || Zoom to selected area</para><para>605: Zoom || Fit image to viewer (keep aspect ratio)</para><para>606: Zoom || Fit image to viewer width</para><para>607: Zoom || Fit image to viewer height</para><para>700: Mouse Mode</para><para>701: Mouse Mode || Nothing</para><para>702: Mouse Mode || Hand Pan Tool</para><para>703: Mouse Mode || Area Selection Tool</para><para>704: Mouse Mode || Area Zooming Tool</para><para>705: Mouse Mode || Magnifier Tool</para><para>800: ViewerQuality</para><para>801: ViewerQuality || Low</para><para>802: ViewerQuality || Medium</para><para>803: ViewerQuality || High</para></param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.RemoveItemMenu(System.Int32)">
      <summary>
 Removes an item of the contextual menu.
 </summary>
      <param name="MenuItemIdx">Item Index. Can be:
 <para>1: Pages / Frames</para><para>2: Pages / Frames || Goto First</para><para>3: Pages / Frames || Goto Previous</para><para>4: Pages / Frames || Goto Next</para><para>5: Pages / Frames || Goto Last</para><para>100: Play Gif</para><para>200: Stop Gif Animation</para><para>300: Rotations</para><para>310: Rotation || Rotate Page 90°</para><para>311: Rotation || Rotate Page 180°</para><para>312: Rotation || Rotate Page 270°</para><para>313: Rotation || Flip Page Horizontally</para><para>314: Rotation || Flip Page Vertically</para><para>315: Rotation || Rotate View 90°</para><para>316: Rotation || Rotate View 180°</para><para>317: Rotation || Rotate View 270°</para><para>318: Rotation || Flip View Horizontally</para><para>319: Rotation || Flip View Vertically</para><para>400: ScrollBars</para><para>500: Copy Bitmap to Clipboard</para><para>501: Copy Text to Clipboard</para><para>600: Zoom</para><para>601: Zoom || Zoom in</para><para>602: Zoom || Zoom out</para><para>603: Zoom || Zoom 100%</para><para>604: Zoom || Zoom to selected area</para><para>605: Zoom || Fit image to viewer (keep aspect ratio)</para><para>606: Zoom || Fit image to viewer width</para><para>607: Zoom || Fit image to viewer height</para><para>700: Mouse Mode</para><para>701: Mouse Mode || Nothing</para><para>702: Mouse Mode || Hand Pan Tool</para><para>703: Mouse Mode || Area Selection Tool</para><para>704: Mouse Mode || Area Zooming Tool</para><para>705: Mouse Mode || Magnifier Tool</para><para>800: ViewerQuality</para><para>801: ViewerQuality || Low</para><para>802: ViewerQuality || Medium</para><para>803: ViewerQuality || High</para></param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.CopyToClipboard">
      <summary>
 Copies the displayed document into the Clipboard.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.CopyRegionToClipboard(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Copies a region of the displayed document into the Clipboard.
 </summary>
      <param name="SrcLeft">The left source pixel.</param>
      <param name="SrcTop">The top source pixel.</param>
      <param name="Width">Width of the region in pixel.</param>
      <param name="Height">Height of the region in pixel.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.CopyRegionToGdPictureImage(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Copies a region of the displayed document into a GdPicture Image.
 </summary>
      <param name="Left">The left source pixel.</param>
      <param name="Top">The top source pixel.</param>
      <param name="Width">Width of the region in pixel.</param>
      <param name="Height">Height of the region in pixel.</param>
      <returns>
 0: The image could not be created.
 failed.
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
      <remarks>
        <para>
 The exported GdPicture Image must be released from the memory by the user using the ReleaseGdPictureImage() method.
 </para>
        <para>
 Use the GetStat() method to determine if this method failed.
 </para>
      </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)">
      <summary>
 Adds a region on the current page of the displayed document.
 </summary>
      <param name="Name">The name of the region. Can be an empty string.</param>
      <param name="Left">Left position, in inches, of the region on the page.</param>
      <param name="Top">Top position, in inches, of the region on the page.</param>
      <param name="Width">Width, in inches, of the region on the page.</param>
      <param name="Height">Height, in inches, of the region on the page.</param>
      <param name="RegionColor">Color used to fill the region.</param>
      <param name="FillMode">The fill mode of the region. A member of the RegionFillMode enumeration.</param>
      <returns>
 The ID of the added region.
 </returns>
      <remarks>
 To convert pixels to inches, the horizontal values (left, width) should be divided by PageHorizontalResolution, and the
 vertical values (right, height) should be divided by PageVerticalResolution.
 </remarks>
      <example>
        <code description="Searches the current page for a string and highlight the result" lang="VB.NET">
 Dim Text As String = "PDF"
 Dim Occurrence As Integer = 1
 Dim Left As Double = 0
 Dim Top As Double = 0
 Dim Width As Double = 0
 Dim Height As Double = 0
 GdViewer1.RemoveAllRegions 'remove previously added regions, if any.
 While GdViewer1.PdfSearchText(GdViewer1.CurrentPage, Text, Occurrence, false, Left, Top, Width, Height)
    GdViewer1.AddRegion(("MyRegion" + Occurrence.ToString), Left, Top, Width, Height, System.Windows.Media.Color.FromArgb(255, 255, 255, 0), GdViewer.RegionFillMode.Multiply)
    Occurrence += 1
 End While
 </code>
      </example>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)">
      <summary>
 Returns a region ID.
 </summary>
      <param name="RegionIdx">A region index. This number must be between 0 and RegionCount() - 1.</param>
      <returns>
 A region ID. -1: failed, else the ID of the selected region which is a value superior or equal to 0.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRegionName(System.Int32)">
      <summary>
 Retrieve the name of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The name of the region.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRegionColor(System.Int32)">
      <summary>
 Retrieve the color of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The color of the region.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRegionFillMode(System.Int32)">
      <summary>
 Retrieve the fill mode of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 A member of the RegionFillMode enumeration.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetRegionFillMode(System.Int32,GdPicture12.WPF.GdViewer.RegionFillMode)">
      <summary>
 Retrieve the fill mode of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="FillMode">Specifies the region fill mode. A member of the RegionFillMode enumeration.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRegionColorSelection(System.Int32)">
      <summary>
 Retrieve the color of a region, when it is selected by the user, from its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The color of the region when it is selected.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRegionBorderColor(System.Int32)">
      <summary>
 Retrieve the border color of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The border color of the region.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRegionBorderWidth(System.Int32)">
      <summary>
 Retrieve the border width of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The border width of the region.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRegionPage(System.Int32)">
      <summary>
 Retrieve the page in a multipage document on which the region is drawn (set), by using the Region ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The page of the region.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRegionSelected(System.Int32)">
      <summary>
 Gets the selection status of a region, by using the Region ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 True if the specified region is selected, else False.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetRegionSelected(System.Int32,System.Boolean)">
      <summary>
 Sets the selection status of a region, by using the Region ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 True if the success, else False.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRegionLeft(System.Int32)">
      <summary>
 Retrieve the left position in inches on the document, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The left position in inches of the region. The returned value corresponds to the left position of the region on the actual document, and not on the GdViewer.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRegionLeftPixels(System.Int32)">
      <summary>
 Retrieve the left position in pixels on the document, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The left position in pixels of the region. The returned value corresponds to the left position of the region on the actual document, and not on the GdViewer.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRegionTop(System.Int32)">
      <summary>
 Retrieve the top position in inches on the document, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The top position in inches of the region. The returned value corresponds to the top position of the region on the actual document, and not on the GdViewer.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRegionTopPixels(System.Int32)">
      <summary>
 Retrieve the top position in pixels on the document, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The top position in pixels of the region. The returned value corresponds to the top position of the region on the actual document, and not on the GdViewer.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRegionWidth(System.Int32)">
      <summary>
 Retrieve the width in inches on the document, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The width in inches of the region. The returned value corresponds to the width of the region on the actual document, and not on the GdViewer.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRegionWidthPixels(System.Int32)">
      <summary>
 Retrieve the width in pixels on the document, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The width in pixels of the region. The returned value corresponds to the width of the region on the actual document, and not on the GdViewer.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRegionHeight(System.Int32)">
      <summary>
 Retrieve the height in inches on the document, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The height in inches of the region. The returned value corresponds to the height of the region on the actual document, and not on the GdViewer.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.GetRegionHeightPixels(System.Int32)">
      <summary>
 Retrieve the height in pixels on the document, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>
 The height in pixels of the region. The returned value corresponds to the height of the region on the actual document, and not on the GdViewer.
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.EnsureRegionVisibility(System.Int32)">
      <summary>
 Ensures that the specified region is visible within the control, scrolling the contents of the control if necessary.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetRegionName(System.Int32,System.String)">
      <summary>
 Sets the name of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="Name">The name of the region.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetRegionColor(System.Int32,System.Windows.Media.Color)">
      <summary>
 Sets the color of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="Color">The color of the region.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetRegionColorSelection(System.Int32,System.Windows.Media.Color)">
      <summary>
 Sets the color of a region, when it is selected by the user, using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="ColorSelection">The color of the region when it is selected.</param>
      <returns>
 True if success, else False (Invalid region ID).
 </returns>
      <remarks>
 Use the GetStat() method to determine if this method failed.
 </remarks>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetRegionBorderColor(System.Int32,System.Windows.Media.Color)">
      <summary>
 Sets the border color of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="BorderColor">The border color of the region.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetRegionBorderWidth(System.Int32,System.Double)">
      <summary>
 Sets the border width of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="BorderWidth">The border width of the region.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetRegionPage(System.Int32,System.Int32)">
      <summary>
 Sets the page on which the region is to be drawn (set) by using the region's ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="Page">The page of the region.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetRegionLeft(System.Int32,System.Double)">
      <summary>
 Sets the left position in inches, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="Left">The left position in inches of the region.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetRegionTop(System.Int32,System.Double)">
      <summary>
 Sets the top position in inches, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="Top">The top position in inches of the region.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetRegionWidth(System.Int32,System.Double)">
      <summary>
 Sets the width in inches, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="Width">The width in inches of the region.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetRegionHeight(System.Int32,System.Double)">
      <summary>
 Sets the height in inches, of a region using its ID.
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="Height">The height in inches of the region.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetRegionEditable(System.Int32,System.Boolean)">
      <summary>
 Specifies if a region can be edited by user or not (can be by default).
 </summary>
      <param name="RegionID">The ID of the region.</param>
      <param name="Editable">True if the region can be edited by user, else False.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.GetRegionID(System.Int32)" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.RemoveRegionByName(System.String)">
      <summary>
 Remove a region by using its name.
 </summary>
      <param name="Name">The name of the region created using the AddRegion method.
 </param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.RemoveRegionByID(System.Int32)">
      <summary>
 Remove a region using its ID.
 </summary>
      <param name="RegionID">A region ID returned by the AddRegion method.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.RemoveAllRegions">
      <summary>
 Remove all regions from the current document.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.RemoveTextSelectionRegions">
      <summary>
 Remove all text selection regions from the current document.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.RegionCount">
      <summary>
 Returns the number of regions on the displayed document.
 </summary>
      <seealso cref="M:GdPicture12.WPF.GdViewer.AddRegion(System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,GdPicture12.WPF.GdViewer.RegionFillMode)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayNextPage">
      <summary>
 Displays the next page of the current multipage document.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayPreviousPage">
      <summary>
 Displays the previous page of the current multipage document.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayFirstPage">
      <summary>
 Displays the first page of the current multipage document.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.DisplayLastPage">
      <summary>
 Displays the last page of the current multipage document.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.ZoomIN">
      <summary>
 Increases the current level of zoom.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.ZoomOUT">
      <summary>
 Decreases the current level of zoom.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.ZoomRect">
      <summary>
 Adjusts zoom to the area covered by the rectangle of selection.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.ZoomDocumentArea(System.Double,System.Double,System.Double,System.Double)">
      <summary>
 Adjusts zoom and page position in order to display a specific area of the current displayed page.
 </summary>
      <param name="Left">Left position of the area, over the document, in pixel.</param>
      <param name="Top">Top position of the area, over the document, in pixel.</param>
      <param name="Width">Width of the area, over the document, in pixel.</param>
      <param name="Height">Height of the area, over the document, in pixel.</param>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.CenterOnRect">
      <summary>
 Moves the page of the displayed document to set the rectangle of selection at the middle of the viewer.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.CoordViewerPixelToDocumentPixel(System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
 Makes a translation of a point coordinates from the viewer space, in pixel, to the document space, in pixel.
 </summary>
      <param name="ViewerLeft">The Left coordinate, in pixel, of the point over the viewer.</param>
      <param name="ViewerTop">The Top coordinate, in pixel, of the point over the viewer.</param>
      <param name="DocumentLeft">Returns The Left coordinate, in pixel, of the point over the displayed document.</param>
      <param name="DocumentTop">Returns The Top coordinate, in pixel, of the point over the displayed document.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.CoordViewerPixelToDocumentInch(System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
 Makes a translation of a point coordinates from the viewer space, in pixel, to the document space, in inch.
 </summary>
      <param name="ViewerLeft">The Left coordinate, in pixel, of the point over the viewer.</param>
      <param name="ViewerTop">The Top coordinate, in pixel, of the point over the viewer.</param>
      <param name="DocumentLeft">Returns The Left coordinate, in inch, of the point over the displayed document.</param>
      <param name="DocumentTop">Returns The Top coordinate, in inch, of the point over the displayed document.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.CoordDocumentPixelToViewerPixel(System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
 Makes a translation of a point coordinates from the document space, in pixel, to the viewer space, in pixel.
 </summary>
      <param name="DocumentLeft">The Left coordinate, in pixel, of the point over the displayed document.</param>
      <param name="DocumentTop">The Top coordinate, in pixel, of the point over the displayed document.</param>
      <param name="ViewerLeft">Returns the Left coordinate, in pixel, of the point over the viewer.</param>
      <param name="ViewerTop">Returns the Top coordinate, in pixel, of the point over the viewer.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.CoordDocumentInchToViewerPixel(System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
 Makes a translation of a point coordinates from the document space, in inches, to the viewer space, in pixel.
 </summary>
      <param name="DocumentLeft">The Left coordinate, in inches, of the point over the displayed document.</param>
      <param name="DocumentTop">The Top coordinate, in inches, of the point over the displayed document.</param>
      <param name="ViewerLeft">Returns the Left coordinate, in pixel, of the point over the viewer.</param>
      <param name="ViewerTop">Returns the Top coordinate, in pixel, of the point over the viewer.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.Clear">
      <summary>
 Clears the viewer.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.Redraw">
      <summary>
 Redraws the displayed document.
 </summary>
      <returns>
 A member of the GdPictureStatus enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintGetColorMode">
      <summary>
 Returns the active printer color Mode.
 </summary>
      <returns>
 A member of the PrinterColorMode enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintSetColorMode(GdPicture12.PrinterColorMode)">
      <summary>
 Sets to the active printer the color mode for the print process.
 </summary>
      <param name="ColorMode">A member of the PrinterColorMode enumeration.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintGetDocumentName">
      <summary>
 Gets the document name to display during the next print process (for example, in a print status
 dialog box or printer queue) while printing the document.
 </summary>
      <returns>
 The document name to display.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintSetDocumentName(System.String)">
      <summary>
 Sets the document name to display during the next print process (for example, in a print status
 dialog box or printer queue) while printing the document.
 </summary>
      <param name="DocumentName">The document name to display.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintSetShowPrintingProgress(System.Boolean)">
      <summary>
 Tells the component to show or hide progress indicator during printing (showed by default).
 </summary>
      <param name="Show">True to show progress indicators printing, else False.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintSetPaperBin(System.Int32)">
      <summary>
 Sets the paper bin used by the active printer.
 </summary>
      <param name="PaperBin">The paper bin to use.Standard values are:
 - 1: Upper
 - 2: Lower
 - 3: Middle
 - 4: Manual
 - 5: Envelope
 - 6: ManualFeed
 - 7: AutomaticFeed
 - 8: TractorFeed
 - 9: SmallFormat
 - 10: LargeFormat
 - 11: LargeCapacity
 - 14: Cassette
 - 15: FormSource
 - 256 or higher: Custom.</param>
      <returns>
 True if the paper bin has been selected else false (unsupported paper bin).
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintGetPaperBin">
      <summary>
 Returns the paperbin used by the active printer.
 </summary>
      <returns>The paperbin used. Standard values are:
 - 1: Upper
 - 2: Lower
 - 3: Middle
 - 4: Manual
 - 5: Envelope
 - 6: ManualFeed
 - 7: AutomaticFeed
 - 8: TractorFeed
 - 9: SmallFormat
 - 10: LargeFormat
 - 11: LargeCapacity
 - 14: Cassette
 - 15: FormSource
 - 256 or higher: Custom
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintSetFromToPage(System.Int32,System.Int32)">
      <summary>
 Ask to the component for the next print process to print a range of page.
 </summary>
      <param name="FromPage">First page to print.</param>
      <param name="ToPage">Last page to print.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintSetPageSelection(System.String)">
      <summary>
 Ask to the component for the next print process to print a selection of pages.
 </summary>
      <param name="CustomRange">The custom page range. For example "1;4;5" to print pages 1, 4 and 5 or "1-5;10" to print pages from 1 to 5 and page 10. Use * to print all pages.</param>
      <remarks>This method is not compatible with PrintDialog() and PrintDialogFit().</remarks>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintGetQuality">
      <summary>
 Returns the current quality of the active printer.
 </summary>
      <returns>
 A member of the PrintQuality enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintSetQuality(GdPicture12.PrintQuality)">
      <summary>
 Sets the quality of the active printer.
 </summary>
      <param name="Quality">A member of the PrintQuality enumeration.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintGetLastError">
      <summary>
 Returns the last Printer error description, if any.
 </summary>
      <returns>
 The description of the last printing error.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintSetCopies(System.Int16)">
      <summary>
 Tell to the active printer the number of copies to print.
 </summary>
      <param name="Copies">The number of copies to print.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintGetCopies">
      <summary>
 Returns the number of copies to print with the selected printer.
 </summary>
      <returns>
 Number of copies to print.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintSetOrientation(GdPicture12.PrinterOrientation)">
      <summary>
 Defines the page orientation when printing.
 </summary>
      <param name="Orientation">A member of the PrinterOrientation enumeration.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintGetOrientation">
      <summary>
 Returns the page orientation when printing.
 </summary>
      <returns>
 A member of the PrinterOrientation enumeration.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintGetActivePrinter">
      <summary>
 Returns the selected printer name.
 </summary>
      <returns>
 The name of the selected printer.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintSetActivePrinter(System.String)">
      <summary>
 Changes the active printer.
 </summary>
      <param name="PrinterName">The name of the new active printer.</param>
      <returns>
 True if success, else False.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintGetPrintersCount">
      <summary>
 Returns the number of available printers.
 </summary>
      <returns>
 Number of copies.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintGetPrinterName(System.Int32)">
      <summary>
 Returns the name of an available printer.
 </summary>
      <param name="PrinterNo">Value between 1 and printer count.</param>
      <returns>
 The name of the printer.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintDialog(GdPicture12.PrintSizeOption)">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the displayed document.
 </summary>
      <param name="PrintSizeMode">A member of the PrintSizeOption specifying the printing size option.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintShowPrinterSettingsDialog(System.Windows.Window)">
      <summary>
 Prompts the selected printer driver settings dialog.
 </summary>
      <param name="owner">Represents the top-level window that will own the modal dialog box.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintSetCollate(System.Boolean)">
      <summary>
 Sets document collate mode for the selected printer.
 </summary>
      <param name="Collate">True is the printed document is collated, False otherwise..</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintGetCollate">
      <summary>
 Returns whether the printed document is collated.
 </summary>
      <returns>
 True is the printed document is collated, False otherwise.
 </returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintDialog(GdPicture12.PrintSizeOption,System.Windows.Window)">
      <summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the displayed document.
 This method allows to specify the top-level window that will own the modal dialog box.
 </summary>
      <param name="PrintSizeMode">A member of the PrintSizeOption specifying the printing size option.</param>
      <param name="owner">Represents the top-level window that will own the modal dialog box.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.Print(GdPicture12.PrintSizeOption)">
      <summary>
 Prints the displayed document the active printer.
 </summary>
      <param name="PrintSizeMode">A member of the PrintSizeOption specifying the printing size option.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintSetStdPaperSize(System.Int32)">
      <summary>
 Sets a standard paper size to use by the active printer.
 </summary>
      <param name="PaperSize">
        <list type="bullet">
          <item>
            <term>1</term>
            <description>Letter, 8.5 x 11 in.</description>
          </item>
          <item>
            <term>2</term>
            <description>Letter Small, 8.5 x 11 in.</description>
          </item>
          <item>
            <term>3</term>
            <description>Tabloid, 11 x 17 in.</description>
          </item>
          <item>
            <term>4</term>
            <description>Ledger, 17 x 11 in.</description>
          </item>
          <item>
            <term>5</term>
            <description>Legal, 8.5 x 14 in.</description>
          </item>
          <item>
            <term>6</term>
            <description>Statement, 5 1/2 x 8 1/2 in.</description>
          </item>
          <item>
            <term>7</term>
            <description>Executive, 7 1/2 x 10 1/2 in.</description>
          </item>
          <item>
            <term>8</term>
            <description>A3, 297 x 420 mm</description>
          </item>
          <item>
            <term>9</term>
            <description>A4, 210 x 297 mm</description>
          </item>
          <item>
            <term>10</term>
            <description>A4 Small, 210 x 297 mm</description>
          </item>
          <item>
            <term>11</term>
            <description>A5, 148 x 210 mm</description>
          </item>
          <item>
            <term>12</term>
            <description>B4, 250 x 354 mm</description>
          </item>
          <item>
            <term>13</term>
            <description>B5, 182 x 257 mm</description>
          </item>
          <item>
            <term>14</term>
            <description>Folio, 8.5 x 13 in.</description>
          </item>
          <item>
            <term>15</term>
            <description>Quarto, 215 x 275 mm</description>
          </item>
          <item>
            <term>16</term>
            <description>10 x 14 in.</description>
          </item>
          <item>
            <term>17</term>
            <description>11 x 17 in.</description>
          </item>
          <item>
            <term>18</term>
            <description>Note, 8.5 x 11 in.</description>
          </item>
          <item>
            <term>19</term>
            <description>Envelope #9, 3 7/8 x 8 7/8 in.</description>
          </item>
          <item>
            <term>20</term>
            <description>Envelope #10, 4 1/8 x 9.5 in.</description>
          </item>
          <item>
            <term>21</term>
            <description>Envelope #11, 4.5 x 10 3/8 in.</description>
          </item>
          <item>
            <term>22</term>
            <description>Envelope #12, 4.5 x 11 in.</description>
          </item>
          <item>
            <term>23</term>
            <description>Envelope #14, 5 x 11.5 in.</description>
          </item>
          <item>
            <term>24</term>
            <description>C size sheet</description>
          </item>
          <item>
            <term>25</term>
            <description>D size sheet</description>
          </item>
          <item>
            <term>26</term>
            <description>E size sheet</description>
          </item>
          <item>
            <term>27</term>
            <description>Envelope DL, 110 x 220 mm</description>
          </item>
          <item>
            <term>28</term>
            <description>Envelope C5, 162 x 229 mm</description>
          </item>
          <item>
            <term>29</term>
            <description>Envelope C3, 324 x 458 mm</description>
          </item>
          <item>
            <term>30</term>
            <description>Envelope C4, 229 x 324 mm</description>
          </item>
          <item>
            <term>31</term>
            <description>Envelope C6, 114 x 162 mm</description>
          </item>
          <item>
            <term>32</term>
            <description>Envelope C65, 114 x 229 mm</description>
          </item>
          <item>
            <term>33</term>
            <description>Envelope B4, 250 x 353 mm</description>
          </item>
          <item>
            <term>34</term>
            <description>Envelope B5, 176 x 250 mm</description>
          </item>
          <item>
            <term>35</term>
            <description>Envelope B6, 176 x 125 mm</description>
          </item>
          <item>
            <term>36</term>
            <description>Envelope, 110 x 230 mm</description>
          </item>
          <item>
            <term>37</term>
            <description>Envelope Monarch, 3 7/8 x 7.5 in.</description>
          </item>
          <item>
            <term>38</term>
            <description>Envelope, 3 5/8 x 6.5 in.</description>
          </item>
          <item>
            <term>39</term>
            <description>U.S. Standard Fanfold, 14 7/8 x 11 in.</description>
          </item>
          <item>
            <term>40</term>
            <description>German Standard Fanfold, 8.5 x 12 in.</description>
          </item>
          <item>
            <term>41</term>
            <description>German Legal Fanfold, 8 1/2 x 13 in.</description>
          </item>
          <item>
            <term>42 to 68</term>
            <description>Less-common international sizes.</description>
          </item>
          <item>
            <term>Greater than 118</term>
            <description>A custom paper size.</description>
          </item>
        </list>
      </param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintSetUserPaperSize(System.Single,System.Single)">
      <summary>
 Sets a custom paper size to use by the active printer.
 </summary>
      <param name="PaperWidth">Custom paper width in Inches.</param>
      <param name="PaperHeight">Custom paper height in Inches.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintGetPaperHeight">
      <summary>
 Gets the paper height used by the active printer.
 </summary>
      <returns>
 The paper height in Inches.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.PrintGetPaperSize" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.PrintGetPaperWidth" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintGetPaperWidth">
      <summary>
 Gets the paper width used by the active printer.
 </summary>
      <returns>
 The paper width in Inches.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.PrintGetPaperSize" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.PrintGetPaperHeight" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintGetAlignment">
      <summary>
 Gets the image alignment into the page during a print process .
 </summary>
      <returns>
 A member of the PrintAlignment enumeration.
 </returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.PrintSetAlignment(GdPicture12.PrintAlignment)" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintSetAlignment(GdPicture12.PrintAlignment)">
      <summary>
 Sets the image alignment into the page during a print process.
 </summary>
      <param name="ImageAlignment">A member of the PrintAlignment enumeration.</param>
      <seealso cref="M:GdPicture12.WPF.GdViewer.PrintGetAlignment" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintSetAutoRotation(System.Boolean)">
      <summary>
 Determines if the object rotate automatically pages to fit on the output medium.
 </summary>
      <param name="AutoRotation">True for automatic rotation, else False.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintGetPaperSize">
      <summary>
 Returns the current paper size of the active printer.
 </summary>
      <returns>
 Paper size constant. Can be:
 <list type="bullet"><item><term>1</term><description>Letter, 8.5 x 11 in.</description></item><item><term>2</term><description>Letter Small, 8.5 x 11 in.</description></item><item><term>3</term><description>Tabloid, 11 x 17 in.</description></item><item><term>4</term><description>Ledger, 17 x 11 in.</description></item><item><term>5</term><description>Legal, 8.5 x 14 in.</description></item><item><term>6</term><description>Statement, 5 1/2 x 8 1/2 in.</description></item><item><term>7</term><description>Executive, 7 1/2 x 10 1/2 in.</description></item><item><term>8</term><description>A3, 297 x 420 mm</description></item><item><term>9</term><description>A4, 210 x 297 mm</description></item><item><term>10</term><description>A4 Small, 210 x 297 mm</description></item><item><term>11</term><description>A5, 148 x 210 mm</description></item><item><term>12</term><description>B4, 250 x 354 mm</description></item><item><term>13</term><description>B5, 182 x 257 mm</description></item><item><term>14</term><description>Folio, 8.5 x 13 in.</description></item><item><term>15</term><description>Quarto, 215 x 275 mm</description></item><item><term>16</term><description>10 x 14 in.</description></item><item><term>17</term><description>11 x 17 in.</description></item><item><term>18</term><description>Note, 8.5 x 11 in.</description></item><item><term>19</term><description>Envelope #9, 3 7/8 x 8 7/8 in.</description></item><item><term>20</term><description>Envelope #10, 4 1/8 x 9.5 in.</description></item><item><term>21</term><description>Envelope #11, 4.5 x 10 3/8 in.</description></item><item><term>22</term><description>Envelope #12, 4.5 x 11 in.</description></item><item><term>23</term><description>Envelope #14, 5 x 11.5 in.</description></item><item><term>24</term><description>C size sheet</description></item><item><term>25</term><description>D size sheet</description></item><item><term>26</term><description>E size sheet</description></item><item><term>27</term><description>Envelope DL, 110 x 220 mm</description></item><item><term>28</term><description>Envelope C5, 162 x 229 mm</description></item><item><term>29</term><description>Envelope C3, 324 x 458 mm</description></item><item><term>30</term><description>Envelope C4, 229 x 324 mm</description></item><item><term>31</term><description>Envelope C6, 114 x 162 mm</description></item><item><term>32</term><description>Envelope C65, 114 x 229 mm</description></item><item><term>33</term><description>Envelope B4, 250 x 353 mm</description></item><item><term>34</term><description>Envelope B5, 176 x 250 mm</description></item><item><term>35</term><description>Envelope B6, 176 x 125 mm</description></item><item><term>36</term><description>Envelope, 110 x 230 mm</description></item><item><term>37</term><description>Envelope Monarch, 3 7/8 x 7.5 in.</description></item><item><term>38</term><description>Envelope, 3 5/8 x 6.5 in.</description></item><item><term>39</term><description>U.S. Standard Fanfold, 14 7/8 x 11 in.</description></item><item><term>40</term><description>German Standard Fanfold, 8.5 x 12 in.</description></item><item><term>41</term><description>German Legal Fanfold, 8 1/2 x 13 in.</description></item><item><term>42 to 68</term><description>Less-common international sizes.</description></item><item><term>Greater than 118</term><description>A custom paper size.</description></item></list></returns>
      <seealso cref="M:GdPicture12.WPF.GdViewer.PrintGetPaperWidth" />
      <seealso cref="M:GdPicture12.WPF.GdViewer.PrintGetPaperHeight" />
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.PrintGetMargins(System.Single@,System.Single@)">
      <summary>
 Gets the physical margins of the active printer.
 </summary>
      <param name="LeftMargin">Returns the left physical margin in inches.</param>
      <param name="TopMargin">Returns the top physical margin in inches.</param>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetHorizontalScrollBarVisible(System.Boolean)">
      <summary>
 Setter for the HorizontalScrollBarVisible value.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetVerticalScrollBarVisible(System.Boolean)">
      <summary>
 Setter for the VerticalScrollBarVisible value.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetZoomMax(System.Double)">
      <summary>
 Setter for the ZoomMax value.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.SetRenderRotation(GdPicture12.GdPictureRotateFlipType)">
      <summary>
 Setter for the RenderRotation value.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.GdViewer.UpdateAnnots(System.Int32)">
      <summary>
 Update annotations.
 </summary>
      <param name="annotationIdx">-2: Update only ctx, -1: update all annots, other value specifies the index of the annotation to update.</param>
      <remarks>How are you?</remarks>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.EnableTextSelection">
      <summary>
 Specifies if text selection is enabled. Holding Alt key during selection permits to switch to column selection mode instead of the default line selection mode.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.AnimateGIF">
      <summary>
 Specifies if by default the viewer must animate loaded multiframe GIF images.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PdfRasterizerEngine">
      <summary>
 Defines the rasterizer engine to use for PDF rendering purposes.
 Default value is PdfRasterizerEngine.PdfRasterizerEngineHybrid.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PageEffect">
      <summary>
 Get or set the bitmap effect to apply to the rendered page.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.AnnotationEffect">
      <summary>
 Get or set the bitmap effect to apply to the GdPicture/XMP annotations.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.AllowDropFile">
      <summary>
 Specifies if the user is able to drop files from the explorer to the control. Default value is false.
 </summary>
      <remarks>When set to true and when file is dropped within the viewer the DropFile event is raised.</remarks>
      <seealso cref="E:GdPicture12.WPF.GdViewer.DropFile" />
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.EnableICM">
      <summary>
 Specifies if color correction is used for document embedding an icc profile. False by default.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.HorizontalScrollBarVisible">
      <summary>
 Returns if the horizontal scrollbar is visible or not.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.VerticalScrollBarVisible">
      <summary>
 Returns if the vertical scrollbar is visible or not.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PdfShowDialogForPassword">
      <summary>
 If the PDF to open is protected, the control will prompt the user for a password. Turn this property
 to False to use your own dialog box (you will have to catch the PDFPasswordRequest event).
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PdfEnableFileLinks">
      <summary>
 PDF documents are often designed to contain links to other PDF.
 Such option is usually provided through a GoToR action handled by special objects such as bookmarks and form field links.
 This property turned to True allows the viewer to automatically navigates to the linked document, if any.
 Such action can be performed when the user clicks a node of a linked BookmarkTree object or a form field on the Viewer. The PdfFileNavigation event is fired before displaying the new document.
 Default value is True.
 </summary>
      <seealso cref="E:GdPicture12.WPF.GdViewer.PdfFileNavigation" />
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PdfVerifyDigitalCertificates">
      <summary>
 Specifies if the viewer is responsible to check digital certificate when rendering a PDF document containing a digital signature.
 Depending on the outcome of the certificate audit, the visible appearances associated to each digital signature could be adjusted.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.Cursor">
      <summary>
 The cursor that appears when the pointer moves over the viewer. It is recommended to not use this method.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.ScrollBars">
      <summary>
 Specifies if scrollbars can be displayed or not within the viewer.
 If true, scrollbars appears when the area to render is larger than the control.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.ForceScrollBars">
      <summary>
 Turn this property to True to force the viewer to always displaying scrollbars.
 Default value is False.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.EnableMenu">
      <summary>
 To enable or disable the viewer contextual menu.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.Zoom">
      <summary>
 The current factor of zoom applied during page rendering operations.
 1 for 100%, 1.5 for 150%, 2 for 200%...
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.ZoomMax">
      <summary>
 The maximum zoom factor which can be used with the displayed document.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PageRotation">
      <summary>
 The current page rotation of the displayed document.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.ViewRotation">
      <summary>
 The current rotation of the control.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.RenderRotation">
      <summary>
 The combination of PageRotation and ViewRotation that represents the final rendering rotation of the current page.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PagePixelWidth">
      <summary>
 Width, in pixel, of the current page of the displayed document.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PageInchWidth">
      <summary>
 Width, in inches, of the current page of the displayed document.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PagePixelHeight">
      <summary>
 Height, in pixel, of the current page of the displayed document.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PageInchHeight">
      <summary>
 Height, in inches, of the current page of the displayed document.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PageVerticalResolution">
      <summary>
 Vertical resolution in DPI (Dot Per Inch) of the current page of the displayed document.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PageHorizontalResolution">
      <summary>
 Horizontal resolution in DPI (Dot Per Inch) of the current page of the displayed document.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.MouseMode">
      <summary>
 Defines the viewer mouse mode.
 Default value is ViewerMouseMode.MouseModePan.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.RectBorderColor">
      <summary>
 Defines the color of the rectangle of area selection.
 Default value is Color.Black.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.MagnifierWidth">
      <summary>
 Defines the width, in pixel, of the magnifier.
 Default value is 160.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.MagnifierHeight">
      <summary>
 Defines the height, in pixel, of the magnifier.
 Default value is 90.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.MagnifierZoom">
      <summary>
 Defines the zoom (or scale) of the, of the magnifier. IE: 2.0 defines a zoom of 200%.
 Default value is 2.0.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.ZoomStep">
      <summary>
 Defines the percentage of increasing or decreasing of the level of zoom for 'Zoom In' and 'Zoom Out' operations.
 Default value is 25.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.RectBorderSize">
      <summary>
 Defines the border size, in pixel, of the rectangle of area selection.
 Default value is 1.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.ScrollSmallChange">
      <summary>
 Gets or sets a value to be added to or subtracted from the Value property when a scrollbar is moved a small distance.
 Default value is 1.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.ScrollLargeChange">
      <summary>
 Gets or sets a value to be added to or subtracted from the Value property when a scrollbar is moved a large distance.
 Default value is 50.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PageCount">
      <summary>
 Number of pages in the displayed document.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.CurrentPage">
      <summary>
 Current page of the displayed document. (Starts from 1).
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.ZoomMode">
      <summary>
 Zoom mode used by the viewer.
 Default value is ViewerZoomMode.ZoomMode100.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.EnableMouseWheel">
      <summary>
 Specifies whether the object can change zoom during to the mouse Wheel events.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.DocumentAlignment">
      <summary>
 Default image alignment within the viewer when the area of the viewer if smaller than the displayed document in its current zoom configuration.
 Setting this property to DocumentAlignmentTopLeft has the effect to display  the most top-left part of the displayed page during "Zoom In" operations.
 Default value is ViewerDocumentAlignment.DocumentAlignmentMiddleCenter.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.DocumentPosition">
      <summary>
 Default page position within the viewer when the rendering area of the displayed document in its current zoom configuration if smaller than then area of the viewer.
 Default value is ViewerDocumentPosition.DocumentPositionMiddleCenter.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.BitmapScalingMode">
      <summary>
 Defines the bitmap scaling mode used for page rendering.
 Default value is BitmapScalingMode.HighQuality.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PdfDisplayFormField">
      <summary>
 Specifies if the viewer renders form fields included into PDF.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PdfEnableLinks">
      <summary>
 By default, if a hyperlink of a PDF document is clicked, the control will follow the link. Turn this
 property to False to disable this behavior.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.PdfIncreaseTextContrast">
      <summary>
 Specifies if the rendering engine should increase text contrast on low zoom in order to enhance readability.
 This feature can decrease rendering speed performances on old machines.
 Default value is false.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.MouseWheelMode">
      <summary>
 Defines the Mouse Wheel method.
 Default value is ViewerMouseWheelMode.MouseWheelModeZoom.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.RectIsEditable">
      <summary>
 Determines if the rectangle of area selection can be moved and resized by the user.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.RegionsAreEditable">
      <summary>
 Determines if regions can be moved and resized by the user.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.ContinuousViewMode">
      <summary>
 For multipage documents viewing, determines if the viewer displays automatically the next or the
 previous page when the user scroll the current page.
 Default value is True.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.GdViewer.MouseButtonForMouseMode">
      <summary>
 Defines the mouse button used for the MouseMode configuration.
 Default value is MouseButton.MouseButtonLeft.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.DropFile">
      <summary>
 Occurs when a file is dropped in the Viewer. Bubble routing strategy.
 </summary>
      <remarks>The AllowDropFile property must be turned to True to use this event.</remarks>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewDropFile">
      <summary>
 Occurs when a file is dropped in the Viewer. Tunnel routing strategy.
 </summary>
      <remarks>The AllowDropFile property must be turned to True to use this event.</remarks>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PdfPasswordRequest">
      <summary>
 Occurs if a password is needed to decrypt the loaded PDF. This event is raised when the
 PdfShowDialogForPassword property has been set to False. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewPdfPasswordRequest">
      <summary>
 Occurs if a password is needed to decrypt the loaded PDF. This event is raised when the
 PdfShowDialogForPassword property has been set to False. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PdfFileNavigation">
      <summary>
 Occurs when a PDF GoToR action is triggered to open a new document.
 See the PdfEnableFileLinks property for more information.
 Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PdfLaunchAction">
      <summary>
 Occurs when a PDF GoToR action is triggered to open a new document.
 See the PdfEnableFileLinks property for more information.
 Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PdfUriNavigation">
      <summary>
 Occurs when a PDF URI action is triggered to resolve a uniform resource identifier.
 See the PdfEnableFileLinks property for more information.
 Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.BeforePrintPage">
      <summary>
 Occurs before a page is printed.
 Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.AfterPrintPage">
      <summary>
 Occurs After a page is printed.
 Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.DataReceived">
      <summary>
 Occurs when data has received after a call of the DisplayFromHTTP() or DisplayFromFTP() method.
 Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.TransferEnded">
      <summary>
 Occurs when the latest asynchronous web transfer is done.
 Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.ZoomChanged">
      <summary>
 Occurs after changing level of zoom. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewZoomChanged">
      <summary>
 Occurs after changing level of zoom. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.Scroll">
      <summary>
 Occurs when the user scrolls through the client area using the vertical or the horizontal scrollbar. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewScroll">
      <summary>
 Occurs when the user scrolls through the client area using the vertical or the horizontal scrollbar. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.RectEdited">
      <summary>
 Occurs when the rectangle of area selection is edited by the user. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewRectEdited">
      <summary>
 Occurs when the rectangle of area selection is edited by the user. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.RegionEdited">
      <summary>
 Occurs when a region is edited by the user. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewRegionEdited">
      <summary>
 Occurs when a region is edited by the user. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.RegionSelected">
      <summary>
 Occurs when a region is selected by the user. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewRegionSelected">
      <summary>
 Occurs when a region is selected by the user. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.BeforePageRotation">
      <summary>
 Occurs before the current page of the displayed document is rotated. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.AfterPageRotation">
      <summary>
 Occurs After the current page of the displayed document is rotated. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PageChanged">
      <summary>
 Occurs when changing page of the displayed document. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewPageChanged">
      <summary>
 Occurs when changing page of the displayed document. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.BeforeDocumentChange">
      <summary>
 Occurs before changing displayed document. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.AfterDocumentChange">
      <summary>
 Occurs After changing displayed document. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.DocumentClosed">
      <summary>
 Occurs when the displayed document is closed. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.BeforeDocumentClosed">
      <summary>
 Occurs before the displayed document is closed.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PageDisplayed">
      <summary>
 Occurs when a page has been successfully displayed.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewPageDisplayed">
      <summary>
 Occurs when a page has been successfully displayed. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.ClickMenu">
      <summary>
 Occurs when an item of the contextual menu has been clicked. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewClickMenu">
      <summary>
 Occurs when an item of the contextual menu has been clicked. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.SavingProgress">
      <summary>
 Occurs when a document is being saved. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.AnnotationStartEditingText">
      <summary>
 Occurs when the user is editing the text content of a GdPicture/XMP annotation by double-clicking it. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewAnnotationStartEditingText">
      <summary>
 Occurs when the user is editing the text content of a GdPicture/XMP annotation by double-clicking it. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.AnnotationEndEditingText">
      <summary>
 Occurs when the user finished to edit the text content of a GdPicture/XMP annotation by leaving it. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewAnnotationEndEditingText">
      <summary>
 Occurs when the user finished to edit the text content of a GdPicture/XMP annotation by leaving it. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.AnnotationSelected">
      <summary>
 Occurs when a GdPicture/XMP annotation has been selected by the user. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewAnnotationSelected">
      <summary>
 Occurs when a GdPicture/XMP annotation has been selected by the user. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.AnnotationClicked">
      <summary>
 Occurs when a GdPicture/XMP annotation has been clicked by the user. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewAnnotationClicked">
      <summary>
 Occurs when a GdPicture/XMP annotation has been clicked by the user. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.BeforeAnnotationAddedByUser">
      <summary>
 Occurs when a GdPicture/XMP annotation has been added by the user. Bubble routing strategy. This event occurs in mouse down action,
 therefore it can be particularly useful to change some properties of the new annotation to add before rendering it to the screen. See example.
 </summary>
      <example>
        <code description="Catch the BeforeAnnotationAddedByUser event to modify the background color of the new added sticky-note annotations." lang="VB.NET">
 Private Sub GdViewer1_AnnotationAddedByUser(ByVal AnnotationIdx As Integer) Handles GdViewer1.BeforeAnnotationAddedByUser
 Dim annot As GdPicture.Annotation = GdViewer1.GetAnnotationFromIdx(AnnotationIdx)
 If TypeOf annot Is AnnotationStickyNote Then
    DirectCast(annot, AnnotationStickyNote).FillColor = Color.Beige
    GdViewer1.DisplayTextEditBox(AnnotationIdx)
 End If
 </code>
      </example>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewBeforeAnnotationAddedByUser">
      <summary>
 Occurs when a GdPicture/XMP annotation has been added by the user. Tunnel routing strategy. This event occurs in mouse down action,
 therefore it can be particularly useful to change some properties of the new annotation to add before rendering it to the screen. See example.
 </summary>
      <example>
        <code description="Catch the BeforeAnnotationAddedByUser event to modify the background color of the new added sticky-note annotations." lang="VB.NET">
 Private Sub GdViewer1_AnnotationAddedByUser(ByVal AnnotationIdx As Integer) Handles GdViewer1.BeforeAnnotationAddedByUser
 Dim annot As GdPicture.Annotation = GdViewer1.GetAnnotationFromIdx(AnnotationIdx)
 If TypeOf annot Is AnnotationStickyNote Then
    DirectCast(annot, AnnotationStickyNote).FillColor = Color.Beige
    GdViewer1.DisplayTextEditBox(AnnotationIdx)
 End If
 </code>
      </example>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.AnnotationAddedByUser">
      <summary>
 Occurs when a GdPicture/XMP annotation has been added  by the user.This event occurs in mouse up action. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewAnnotationAddedByUser">
      <summary>
 Occurs when a GdPicture/XMP annotation has been added  by the user.This event occurs in mouse up action. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.AnnotationRotated">
      <summary>
 Occurs when a GdPicture/XMP annotation is rotated  by the user.This event occurs in mouse up action. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewAnnotationRotated">
      <summary>
 Occurs when a GdPicture/XMP annotation is rotated  by the user.This event occurs in mouse up action. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.AnnotationMoved">
      <summary>
 Occurs when a GdPicture/XMP annotation is moved  by the user. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewAnnotationMoved">
      <summary>
 Occurs when a GdPicture/XMP annotation is moved  by the user. Tunnel routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.AnnotationResized">
      <summary>
 Occurs when a GdPicture/XMP annotation is Resized  by the user. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.GdViewer.PreviewAnnotationResized">
      <summary>
 Occurs when a GdPicture/XMP annotation is Resized  by the user. Tunnel routing strategy.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.BookmarksTree.Node.FontColor">
      <summary>
 Defines the font color of the node.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.BookmarksTree.Node.Text">
      <summary>
 Defines the text of the node.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.BookmarksTree.TreeViewExWPF.ItemHeight">
      <summary>
 Defines the height, in pixel, of each item in the control. Default value is 20.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.BookmarksTree.TreeViewExWPF.ItemImage">
      <summary>
 Gets or sets the BitmapSource of the image of the items.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.BookmarksTree.TreeViewExWPF.ItemFontFamily">
      <summary>
 Defines the font family used to display text nodes. Default used is Helvetica.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.BookmarksTree.TreeViewExWPF.ItemFontSize">
      <summary>
 Defines the size of the font used to display text nodes. Default value is 10.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.BookmarksTree.NodeSelectedEventArgs">
      <summary>
 Provides data for the NodeSelected event.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.BookmarksTree.NodeSelectedEventArgs.NodeText">
      <summary>
 The text of the selected node.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.BookmarksTree.NodeSelectedEventArgs.PDFBookmarkID">
      <summary>
 The ID of the associated PDF bookmark, if any.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.BookmarksTree.NodeSelectedEventArgs.CancelAction">
      <summary>
 Set true to cancel the associated action.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.BookmarksTree.LoadFromGdViewer(System.Object)">
      <summary>
 Defines the GdViewer object to be linked with the control.
 This method is for COM interoperability purpose. It is equivalent to BookmarksTree.GdViewer = GdViewer.
 </summary>
      <param name="GdViewer">A GdViewer object.</param>
    </member>
    <member name="M:GdPicture12.WPF.BookmarksTree.ReloadBookmarks">
      <summary>
 Forces the control to reload all bookmarks from the currently handled document.
 </summary>
    </member>
    <member name="M:GdPicture12.WPF.BookmarksTree.ExpandAll">
      <summary>
 Open every node in the tree.
 </summary>
      <seealso cref="M:GdPicture12.WPF.BookmarksTree.CollapseAll" />
    </member>
    <member name="M:GdPicture12.WPF.BookmarksTree.CollapseAll">
      <summary>
 Close every node in the tree.
 </summary>
      <seealso cref="M:GdPicture12.WPF.BookmarksTree.ExpandAll" />
    </member>
    <member name="M:GdPicture12.WPF.BookmarksTree.SetDefaultText(System.Int32,System.String)">
      <summary>
 If the document do not contains outlines, the control will create a generic one.
 This method permits to change the default text used by the control in the produced outlines structure.
 </summary>
      <param name="StringID">The ID of the internal string to change: 0 for the default root name or 1 for the default nodes prefix.</param>
      <param name="Text">The new text to apply.</param>
    </member>
    <member name="P:GdPicture12.WPF.BookmarksTree.GdViewer">
      <summary>
 Defines the GdViewer object to be linked with the control.
 </summary>
      <example>
        <code description="" lang="VB.NET">
 BookmarksTree1.GdViewer = GdViewer1
 </code>
      </example>
    </member>
    <member name="P:GdPicture12.WPF.BookmarksTree.ItemHeight">
      <summary>
 Defines the height, in pixel, of each item in the control. Default value is 20.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.BookmarksTree.ItemImage">
      <summary>
 Gets or sets the BitmapSource of the image of the items.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.BookmarksTree.FontFamily">
      <summary>
 Defines the font family used to display text nodes. Default used is Helvetica.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.BookmarksTree.FontSize">
      <summary>
 Defines the size of the font used to display text nodes. Default value is 10.
 </summary>
    </member>
    <member name="P:GdPicture12.WPF.BookmarksTree.DisableZoomDestination">
      <summary>
 The PDF format specifies a parameter that allow to define a zoom level for a bookmark's page destination.
 Turning this property to True permits to ignore this information. Otherwise, the GdViewer object associated to the BookmarkTree will adjust the zoom accordingly. Default value is False.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.BookmarksTree.NodeSelected">
      <summary>
 Occurs when a node is selected by the user. Bubble routing strategy.
 </summary>
    </member>
    <member name="E:GdPicture12.WPF.BookmarksTree.PreviewNodeSelected">
      <summary>
 Occurs when a node is selected by the user. Tunnel routing strategy.
 </summary>
    </member>
    <member name="T:GdPicture12.WPF.GdPictureImageSourceSourceMode">
      <summary>
 specifies how a GdPictureBitmapSource object handles a GdPicture image.
 </summary>
    </member>
    <member name="F:GdPicture12.WPF.GdPictureImageSourceSourceMode.UseInput">
      <summary>
 Uses the input GdPicture image as image source.
 </summary>
    </member>
    <member name="F:GdPicture12.WPF.GdPictureImageSourceSourceMode.OwnInput">
      <summary>
 Uses the input GdPicture image as image source and releases it from the memory during destruction.
 </summary>
    </member>
    <member name="F:GdPicture12.WPF.GdPictureImageSourceSourceMode.CloneInput">
      <summary>
 Uses a cloned version of the input GdPicture image as image source and releases it from the memory during destruction.
 </summary>
    </member>
    <member name="M:GdPicture12.AnnotationEditor.InitFromAnnotationManager(GdPicture12.AnnotationManager)">
      <summary>
 Initialize the AnnotationEditor object with an AnnotationManager object.
 </summary>
      <param name="annotationManager">An AnnotationManager object.</param>
    </member>
    <member name="P:GdPicture12.AnnotationEditor.GdViewer">
      <summary>
 Defines the GdViewer object (WinForm version) to be linked with the control.
 </summary>
      <example>
        <code description="" lang="VB.NET">
 AnnotationEditor1.GdViewer = GdViewer1
 </code>
      </example>
    </member>
    <member name="E:GdPicture12.AnnotationEditor.PropertyChanged">
      <summary>
 Occurs when a property has been modified.
 </summary>
      <param name="PropertyName">Specifies the name of the modified property.</param>
      <param name="Reserved1">Do not use. Here for future usage.</param>
      <param name="Reserved2">Do not use. Here for future usage.</param>
      <param name="Reserved3">Do not use. Here for future usage.</param>
    </member>
    <member name="T:GdPicture12.My.Resources.Resources">
      <summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
    </member>
    <member name="P:GdPicture12.My.Resources.Resources.ResourceManager">
      <summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
    </member>
    <member name="P:GdPicture12.My.Resources.Resources.Culture">
      <summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
    </member>
    <member name="P:GdPicture12.My.Resources.Resources.bookmark_link">
      <summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
    </member>
    <member name="P:GdPicture12.My.Resources.Resources.Grabbed15_19">
      <summary>
  Looks up a localized resource of type System.Byte[].
</summary>
    </member>
    <member name="P:GdPicture12.My.Resources.Resources.hand15_19">
      <summary>
  Looks up a localized resource of type System.Byte[].
</summary>
    </member>
    <member name="P:GdPicture12.My.Resources.Resources.IEC61966_2">
      <summary>
  Looks up a localized resource of type System.Byte[].
</summary>
    </member>
    <member name="P:GdPicture12.My.Resources.Resources.PDFA_XMP_4_2">
      <summary>
  Looks up a localized resource of type System.Byte[].
</summary>
    </member>
    <member name="P:GdPicture12.My.Resources.Resources.rotate">
      <summary>
  Looks up a localized resource of type System.Byte[].
</summary>
    </member>
    <member name="T:GdPicture12.RAWImageLoadingOptions">
      <summary>
            Specifies how RAW images must be decoded.
            </summary>
    </member>
    <member name="F:GdPicture12.RAWImageLoadingOptions.Preview">
      <summary>
            Tries to load the embedded JPEG preview bitmap, if such bitmap is not available the image will be developed to sRGB color space.
            </summary>
    </member>
    <member name="F:GdPicture12.RAWImageLoadingOptions.Display">
      <summary>
            Develops the image to sRGB color space using a gamma of 2.4 / 12.92.
            </summary>
    </member>
    <member name="F:GdPicture12.RAWImageLoadingOptions.LoadHalf">
      <summary>
            Develops the image to half of its original size.
            </summary>
    </member>
    <member name="F:GdPicture12.RAWImageLoadingOptions.RawColorSpace">
      <summary>
            Develops the image to RAW color space using a gamma of 1 / 1.
            </summary>
    </member>
    <member name="F:GdPicture12.RAWImageLoadingOptions.AutomaticBrightness">
      <summary>
            Applies automatic brightness adjustment during the development.
            </summary>
    </member>
    <member name="T:GdPicture12.GdPictureRotateFlipType">
      <summary>
            Specifies a rotation or/and a flip.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureRotateFlipType.GdPictureRotateNoneFlipNone">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureRotateFlipType.GdPictureRotate90FlipNone">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureRotateFlipType.GdPictureRotate180FlipNone">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureRotateFlipType.GdPictureRotate270FlipNone">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureRotateFlipType.GdPictureRotateNoneFlipX">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureRotateFlipType.GdPictureRotate90FlipX">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureRotateFlipType.GdPictureRotate180FlipX">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureRotateFlipType.GdPictureRotate270FlipX">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureRotateFlipType.GdPictureRotateNoneFlipY">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureRotateFlipType.GdPictureRotate90FlipY">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureRotateFlipType.GdPictureRotate180FlipY">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureRotateFlipType.GdPictureRotate270FlipY">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureRotateFlipType.GdPictureRotateNoneFlipXY">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureRotateFlipType.GdPictureRotate90FlipXY">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureRotateFlipType.GdPictureRotate180FlipXY">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureRotateFlipType.GdPictureRotate270FlipXY">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.OK">
      <summary>
            Indicates that the method was successful.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.GenericError">
      <summary>
            Indicates that there was an error on the method call, which is identified as something other than those defined by the other elements of this enumeration.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.InvalidParameter">
      <summary>
            Indicates that one of the arguments passed to the method was not valid.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.OutOfMemory">
      <summary>
            Indicates that the operating system is out of memory and could not allocate memory to process the method call.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.ObjectBusy">
      <summary>
            Indicates that one of the arguments specified in the API is already in use in another thread.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.InsufficientBuffer">
      <summary>
            Indicates that a buffer specified as an argument in the API is not large enough to hold the data to be received.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.NotImplemented">
      <summary>
            Indicates that the method is not implemented.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.Win32Error">
      <summary>
            Indicates that the method generated a Microsoft Win32 error.
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.WrongState">
      <summary>
            Indicates that the object is in an invalid state to satisfy the API call.
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.Aborted">
      <summary>
            Indicates that the method was aborted.
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.FileNotFound">
      <summary>
            Indicates that the specified image file or metafile cannot be found.
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.ValueOverflow">
      <summary>
            Indicates that the method performed an arithmetic operation that produced a numeric overflow.
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.AccessDenied">
      <summary>
            Indicates that a write operation is not allowed on the specified file.
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.UnknownImageFormat">
      <summary>
            Indicates that the specified image file format is not known.
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.FontFamilyNotFound">
      <summary>
            Indicates that the specified font family cannot be found. Either the font family name is incorrect or the font family is not installed.
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.FontStyleNotFound">
      <summary>
            Indicates that the specified style is not available for the specified font family.
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.NotTrueTypeFont">
      <summary>
            Indicates that the font retrieved from an HDC or LOGFONT is not a TrueType font and cannot be used with GdPicture.
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.UnsupportedGdiplusVersion">
      <summary>
            Indicates that the version of GDI+ that is installed on the system is incompatible with the version needed by GdPicture.
            Member value is 17.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.GdiplusNotInitialized">
      <summary>
            Indicates that the GDI+API is not in an initialized state. Should never appends.
            Member value is 18.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.PropertyNotFound">
      <summary>
            Indicates that the specified property does not exist in the target.
            Member value is 19.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.PropertyNotSupported">
      <summary>
            Indicates that the specified property is not supported by the format of the target, therefore, cannot be set.
            Member value is 20.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.ProfileNotFound">
      <summary>
            Indicates that the color profile required to save an image in CMYK format was not found.
            Member value is 21.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.UnsupportedImageFormat">
      <summary>
            Indicates that the format of the image is not supported by the method.
            Member value is 22.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.TemplateNotFound">
      <summary>
            The template was not found by the GdPicture ADR engine.
            Member value is 23.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.PrintingException">
      <summary>
            An exception has been raised by the system during the printing process.
            Member value is 24.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.TwainError">
      <summary>
            Indicates that an error was raised by the TWAIN plugin.
            Member value is 30.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.WrongGdTwainVersion">
      <summary>
            Indicates that the GdPicture.NET.twain.client.dll version are invalid.
            Member value is 31.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BadTwainState">
      <summary>
            Indicates that an error of state was raised by the TWAIN plugin.
            Member value is 32.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.TwainTransferCanceled">
      <summary>
            Indicates that a transfer cancellation was raised by the TWAIN plugin.
            Member value is 33.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.TwainTransferError">
      <summary>
            Indicates that an error of transfer was raised by the TWAIN plugin.
            Member value is 34.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.TwainInvalidTransferMode">
      <summary>
            Indicates that the selected transfer mode is not supported by the current device.
            Member value is 36.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.CanNotCreateFile">
      <summary>
            Indicates that the file passed as parameter to the method can not be created.
            Member value is 41.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.InvalidBarCode">
      <summary>
            Indicates that the barcode data passed as parameter to the method is invalid.
            Member value is 50.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.NotIndexedPixelFormat">
      <summary>
            Indicates that the method needs an image with an indexed pixel format.
            Member value is 61.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.UnsupportedPixelFormat">
      <summary>
            Indicates that the method doesn't support the pixel format of the image.
            Member value is 62.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.InvalidPDFHandle">
      <summary>
            Indicates that the PDF handle provided is invalid or inexistant.
            Member value is 63.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.MaxPagesReached">
      <summary>
            Indicates that the maximum number of pages has been reached.
            Member value is 64.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.MaxDocumentSizeReached">
      <summary>
            Indicates that the maximum document size has been reached.
            Member value is 65.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.InternetOpenError">
      <summary>
            Could not access to Internet.
            Member value is 100.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.InternetConnectError">
      <summary>
            An error occurred during the Internet connexion.
            Member value is 101.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.InternetHttpOpenRequestError">
      <summary>
            An error occurred during the HTTP open request.
            Member value is 102.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.InternetHttpQueryError">
      <summary>
            An error occurred during the HTTP query.
            Member value is 103.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.InternetHttpSendRequestError">
      <summary>
            An error occurred sending an HTTP request.
            Member value is 104.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.InternetHttpInvalidFileLength">
      <summary>
            The length of the file returned from the HTTP server is invalid or null.
            Member value is 105.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.InternetHttpTransferError">
      <summary>
            An error occurred during the HTTP transfer.
            Member value is 106.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.InternetHTTPWriteFileError">
      <summary>
            An error occurred during the HTTP writing operation.
            Member value is 107.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.InternetFtpGetFileError">
      <summary>
            An error occurred downloading a file from the FTP server.
            Member value is 300.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.InternetFtpWriteFileError">
      <summary>
            An error occurred writing a file to the FTP server.
            Member value is 301.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.PdfDocumentMustBeUnencrypted">
      <summary>
            The PDF must be unencrypted before performing this operation.
            Member value is 500.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.PdfCanNotBeDecrypted">
      <summary>
            The PDF can not be decrypted by GdPicture.
            Member value is 501.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.PdfPasswordNeeded">
      <summary>
            A password was required to open this PDF.
            Member value is 502.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.PdfBadPassword">
      <summary>
            The password supplied to open the PDF was invalid.
            Member value is 503.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.PdfCanNotOpenFile">
      <summary>
            The PDF file can not be opened.
            Member value is 504.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.PdfRenderingPageError">
      <summary>
            Indicates that GdPicture was not able to process the document.
            Member value is 505.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.PdfGenericError">
      <summary>
            Indicates that there was an error related to PDF manipulation, which is identified as something other than those defined by the other elements of this enumeration.
            Member value is 506.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.PdfErrorAddingImage">
      <summary>
            The image has not been added to the PDF.
            Member value is 507.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.PdfUnsupportedInPdfA">
      <summary>
            The operation is not supported in PDF/A.
            Member value is 511.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.PdfInvalidContent">
      <summary>
            An invalid PDF structure or content has been encountered.
            Member value is 512.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.OCRTesseractDllRequired">
      <summary>
            The GdPicture.NET.ocr.tesseract.dll library was needed or was not found on the computer.
            Member value is 800.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.OCRDictionaryNotFound">
      <summary>
            The dictionary files needed by the GdPicture Tesseract plugin was not found on the specified path.
            Member value is 801.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.OCRUnhandledException">
      <summary>
            The GdPicture.NET.ocr.tesseract.dll raised an unhandled exception.
            Member value is 802.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.CertificateWrongPassword">
      <summary>
            The password provided for the certificate in invalid.
            Member value is 900.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.CertificateWrongFormat">
      <summary>
            The provided certificate has wrong or unsupported format.
            Member value is 901.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.CertificateWrongPrivateKey">
      <summary>
            The provided certificate does not includes private key.
            Member value is 902.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.CertificateNotFound">
      <summary>
            The certificate has not been found.
            Member value is 903.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeInvalidLength">
      <summary>
            Data format invalid. (Invalid length).
            Member value is 1001.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeInvalidStart">
      <summary>
            Data format invalid. (Invalid START character).
            Member value is 1002.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeInvalidStop">
      <summary>
            Data format invalid. (Invalid STOP character).
            Member value is 1003.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeLengthMustBe13or14">
      <summary>
            Data length invalid. (Length must be 13 or 14).
            Member value is 1004.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeNotNumeric">
      <summary>
            Numeric data only.
            Member value is 1005.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeCanNotDetermineStart">
      <summary>
            Could not determine start character.
            Member value is 1006.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeUnknownStartType">
      <summary>
            Unknown start type in fixed type encoding.
            Member value is 1007.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeNoStartInCurrentCodeSet">
      <summary>
            No start character found in CurrentCodeSet.
            Member value is 1008.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeCouldNotInsertStart">
      <summary>
            Could not insert start and code characters.
            Member value is 1009.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeNoEncodingValueFound">
      <summary>
            Could not find encoding of a value in the formatted data.
            Member value is 1010.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeInvalidData">
      <summary>
            Invalid Data.
            Member value is 1011.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeInvalidDestinationSize">
      <summary>
            Destination not large enough to draw the barcode.
            Member value is 1012.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeInvalidManufacturerCode">
      <summary>
            Country assigning manufacturer code not found.
            Member value is 1013.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeLengthMustBe7or8">
      <summary>
            Invalid data length. (7 or 8 numbers only).
            Member value is 1014.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeLengthMustBeMultipleOf2">
      <summary>
            Data length invalid. Must be a multiple of 2.
            Member value is 1015.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeMustStartWith978orBadLength">
      <summary>
            Invalid input.  Must start with 978 and be length must be 9, 10, 12, 13 characters.
            Member value is 1016.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeMustStartWith49">
      <summary>
            Invalid Country Code for JAN13 (49 required).
            Member value is 1017.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeBarcodeLengthMustBe5or6or9or11">
      <summary>
            Invalid data length. (5, 6, 9, or 11 digits only).
            Member value is 1018.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeBarcodeLengthMustBe12">
      <summary>
            Data length invalid. (Length must be 12).
            Member value is 1019.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeBarcodeLengthMustBe8or12">
      <summary>
            Invalid data length. (8 or 12 numbers only).
            Member value is 1020.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeBarcodeMustBinaryChar">
      <summary>
            Invalid Number System (only 0 and 1 are valid).
            Member value is 1021.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeIllegalUPCA">
      <summary>
            Illegal UPC-A entered for conversion.  Unable to convert.
            Member value is 1022.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeBarcodeLengthMustBe2">
      <summary>
            Invalid data length. (Length = 2 required).
            Member value is 1023.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeBarcodeLengthMustBe5">
      <summary>
            Invalid data length. (Length = 5 required).
            Member value is 1024.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeLengthMustBe12or13">
      <summary>
            Data length invalid. (Length must be 12 or 13).
            Member value is 1025.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeLengthMustBe11or12">
      <summary>
            Data length invalid. (Length must be 11 or 12).
            Member value is 1026.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.Barcode1DReaderPluginNotLoaded">
      <summary>
            Can't load GdPicture.NET.9.barcode.1d.reader.dll.
            Member value is 1100.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.Barcode1DReaderUnknownError">
      <summary>
            Unknown error reported from the 1D Barcode reader plugin.
            Member value is 1101.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeDataMatrixReaderPluginNotLoaded">
      <summary>
            Can't load the DataMatrix reader dll.
            Member value is 1200.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeDataMatrixReaderUnknownError">
      <summary>
            Unknown error reported from the DataMatrix Barcode reader plugin.
            Member value is 1201.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeQRCodeReaderPluginNotLoaded">
      <summary>
            Can't load the QR-Code reader dll.
            Member value is 1300.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodePDF417ReaderPluginNotLoaded">
      <summary>
            Can't load GdPicture.NET.9.barcode.pdf417.reader.dll.
            Member value is 1400.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeQrEncoderInvalidVersion">
      <summary>
            The version provided to the Qr-Code encoder is invalid.
            Member value is 1500.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeQrEncoderNotNumericData">
      <summary>
            The Qr-Code expected only numeric data.
            Member value is 1501.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeQrEncoderNotAlphanumericData">
      <summary>
            The Qr-Code expected only alpha-numeric data.
            Member value is 1502.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeQrEncoderNot8BitData">
      <summary>
            The Qr-Code expected only byte data.
            Member value is 1503.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeQrEncoderNotKanjiData">
      <summary>
            The Qr-Code expected only kanji data.
            Member value is 1504.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodeDatamatrixEncoderInvalidVersion">
      <summary>
            The version provided to the DataMatrix encoder is invalid.
            Member value is 1510.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodePDF417EncoderInvalidVersion">
      <summary>
            The version provided to the PDF417 encoder is invalid.
            Member value is 1520.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodePDF417EncoderNotNumericData">
      <summary>
            The PDF417 encoder expected only numeric data.
            Member value is 1521.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodePDF417EncoderNotTextData">
      <summary>
            The PDF417 encoder expected only alpha-numeric data.
            Member value is 1522.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.BarcodePDF417EncoderNotByteData">
      <summary>
            The PDF417 encoder expected only byte data.
            Member value is 1523.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.EncryptionSchemeNotSupported">
      <summary>
            The selected encryption scheme is not supported.
            Member value is 2000.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.JBIG2PluginNotLoaded">
      <summary>
            Can't load the GdPicture JBIG2 encoder library.
            Member value is 3000.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.DocumentAnalyzerDllRequired">
      <summary>
            Can't load the GdPicture Document analyzer encoder library.
            Member value is 4000.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.InvalidLicense">
      <summary>
            The license key provided doesn't include this feature.
            Member value is 9999.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureStatus.WIAGenericError">
      <summary>
            WIA error. Use WiaGetLastError() functions for diagnosing the error.
            Member value is 20000.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfConformance.Unknown">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfConformance.PDF">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfConformance.PDF_A_1a">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfConformance.PDF_A_1b">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfConformance.PDF_A_2a">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfConformance.PDF_A_2u">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfConformance.PDF_A_2b">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfConformance.PDF_A_3a">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfConformance.PDF_A_3u">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfConformance.PDF_A_3b">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfOrigin.PdfOriginUnknown">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfOrigin.PdfOriginBottomLeft">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfOrigin.PdfOriginTopLeft">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfOrigin.PdfOriginTopRight">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfOrigin.PdfOriginBottomRight">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="T:GdPicture12.PdfRasterizerEngine">
      <summary>
            Defines the Microsoft Windows application programming interface used to render PDF documents.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfRasterizerEngine.PdfRasterizerEngineGdiplus">
      <summary>
            GdiPlus. 
            <para>
            Pros: very fast path painting. Low memory usage.
            </para><para>
            Cons: uses internal lock which considerably decreased performances when used in multiple threads. Slow image rendering.
            </para> 
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfRasterizerEngine.PdfRasterizerEngineWPF">
      <summary>
            Windows Presentation Foundation. 
            <para>
            Pros: support antialiasing in clipping path. Fast image rendering. Produces very high performances in multithreaded applications. 
            </para><para>
            Cons: slower path painting than GdiPlus. Requires more memory than GdiPlus. 
            </para> 
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfRasterizerEngine.PdfRasterizerEngineHybrid">
      <summary>
            This engine mix all supported programming interfaces in order to favor rendering quality, speed, and multitread performances.
            Member value is 65535.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfOcgState.Undefined">
      <summary>
            Member value is -4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfOcgState.StateOff">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfOcgState.StateOn">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageLabelStyle.PdfPageLabelStyleUndefined">
      <summary>
            Undefined PageLabel Style
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageLabelStyle.PdfPageLabelStyleDecimalArabicNumerals">
      <summary>
            Decimal arabic numerals
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageLabelStyle.PdfPageLabelStyleUppercaseRomanNumerals">
      <summary>
            Uppercase roman numerals
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageLabelStyle.PdfPageLabelStyleLowercaseRomanNumerals">
      <summary>
            Lowercase roman numerals
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageLabelStyle.PdfPageLabelStyleUppercaseLetters">
      <summary>
            Uppercase letters
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageLabelStyle.PdfPageLabelStyleLowercaseLetters">
      <summary>
            Lowercase letters
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfImageMaskType.PdfMaskTypeUnknown">
      <summary>
            Unknown mask mode.
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfImageMaskType.PdfMaskTypeNone">
      <summary>
            Standard bitmap without masking operation.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfImageMaskType.PdfMaskTypeStencil">
      <summary>
            A monochrome image in which each sample is specified by a single bit. However,
            instead of being painted in opaque black and white, the image mask is treated as a stencil mask
            that is partly opaque and partly transparent. Sample values in the image do not represent
            black and white pixels; rather, they designate places on the page that should either
            be marked with the current color or masked out (not marked at all). Areas that are masked out
            retain their former contents. The effect is like applying paint in the current color through
            a cut-out stencil, which lets the paint reach the page in some places and masks it out in others.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfImageMaskType.PdfMaskTypeExplicit">
      <summary>
            In PDF 1.3, the Mask entry in an image dictionary may be an image mask, as described above
            under “Stencil Masking,” which serves as an explicit mask for the primary (base) image.
            The base image and the image mask need not have the same resolution (Width and Height values),
            but since all images are defined on the unit square in user space, their boundaries on the page
            will coincide; that is, they will overlay each other. The image mask indicates which places on
            the page are to be painted and which are to be masked out (left unchanged). Unmasked areas are
            painted with the corresponding portions of the base image; masked areas are not.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfImageMaskType.PdfMaskTypeSoft">
      <summary>
            Defines the Alpha channel to be applyed to another image.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfImageMaskType.PdfMaskTypeColorKey">
      <summary>
            In PDF 1.3, the Mask entry in an image dictionary may alternatively be an array specifying a
            range of colors to be masked out. Samples in the image that fall within this range are not painted,
            allowing the existing background to show through. The effect is similar to that of the video
            technique known as chroma-key.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerPreference.PdfViewerPreferenceHideToolbar">
      <summary>
            A flag specifying whether to hide the viewer application’s tool bars when the document is active. Default value: false.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerPreference.PdfViewerPreferenceHideMenubar">
      <summary>
            /(Optional) A flag specifying whether to hide the viewer application’s menu bar when the document is active. Default value: false.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerPreference.PdfViewerPreferenceHideWindowUI">
      <summary>
            (Optional) A flag specifying whether to hide user interface elements in the document’s window (such as scroll bars and navigation controls), leaving only the document’s contents displayed. Default value: false.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerPreference.PdfViewerPreferenceFitWindow">
      <summary>
            (Optional) A flag specifying whether to resize the document’s window to fit the size of the first displayed page. Default value: false.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerPreference.PdfViewerPreferenceCenterWindow">
      <summary>
            (Optional) A flag specifying whether to position the document’s window in the center of the screen. Default value: false.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerPreference.PdfViewerPreferenceDisplayDocTitle">
      <summary>
            (Optional; PDF 1.4) A flag specifying whether the window’s title bar should display the document title taken from the Title entry of the document information dictionary (see Section 10.2.1, “Document Information Dictionary”). If false, the title bar should instead display the name of the PDF file containing the document. Default value: false.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerPageMode.PdfViewerPageModeUseNone">
      <summary>
            Neither document outline nor thumbnail images visible.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerPageMode.PdfViewerPageModeUseOutlines">
      <summary>
            Document outline visible.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerPageMode.PdfViewerPageModeUseThumbs">
      <summary>
            Thumbnail images visible.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerPageMode.PdfViewerPageModeFullScreen">
      <summary>
            Full-screen mode, with no menu bar, window controls, or any other window visible.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerPageMode.PdfViewerPageModeUseOC">
      <summary>
            (PDF 1.5) Optional content group panel visible.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerPageMode.PdfViewerPageModeUseAttachments">
      <summary>
            (PDF 1.6) Attachments panel visible.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerNonFullScreenPageMode.PdfViewerNonFullScreenPageModeUseNone">
      <summary>
            Neither document outline nor thumbnail images visible.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerNonFullScreenPageMode.PdfViewerNonFullScreenPageModeUseOutlines">
      <summary>
            Document outline visible.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerNonFullScreenPageMode.PdfViewerNonFullScreenPageModeUseThumbs">
      <summary>
            Thumbnail images visible.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerNonFullScreenPageMode.PdfViewerNonFullScreenPageModeUseOC">
      <summary>
            Optional  content group panel visible.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerLayoutMode.PdfViewerLayoutModeSinglePage">
      <summary>
            Display one page at a time.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerLayoutMode.PdfViewerLayoutModeOneColumn">
      <summary>
            Display the pages in one column.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerLayoutMode.PdfViewerLayoutModeTwoColumnLeft">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the left.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerLayoutMode.PdfViewerLayoutModeTwoColumnRight">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the right.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerLayoutMode.PdfViewerLayoutModeTwoPageLeft">
      <summary>
            (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the left.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfViewerLayoutMode.PdfViewerLayoutModeTwoPageRight">
      <summary>
            (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the right.
            Member value is 5.
            </summary>
    </member>
    <member name="T:GdPicture12.PdfPageSizes">
      <summary>
            Specifies PDF page sizes.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeLetter">
      <summary>
            US Letter 8 1/2 x 11 in
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeLetterSmall">
      <summary>
            US Letter Small 8 1/2 x 11 in
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeTabloid">
      <summary>
            Tabloid 11 x 17 in
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeLedger">
      <summary>
            US Ledger 17 x 11 in
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeLegal">
      <summary>
            US Legal 8 1/2 x 14 in
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeStatement">
      <summary>
            US Statement 5 1/2 x 8 1/2 in
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeExecutive">
      <summary>
            US Executive 7 1/4 x 10 1/2 in
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA3">
      <summary>
            A3 297 x 420 mm
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA4">
      <summary>
            A4 210 x 297 mm
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA4Small">
      <summary>
            A4 Small 210 x 297 mm
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA5">
      <summary>
            A5 148 x 210 mm
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeB4">
      <summary>
            B4 (JIS) 257 x 364 mm
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeB5">
      <summary>
            B5 (JIS) 182 x 257 mm
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeFolio">
      <summary>
            Folio 8 1/2 x 13 in
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeQuarto">
      <summary>
            Quarto 215 x 275 mm
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSize10X14">
      <summary>
            10 x 14 in
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSize11X17">
      <summary>
            11 x 17 in
            Member value is 17.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeNote">
      <summary>
            US Note 8 1/2 x 11 in
            Member value is 18.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_9">
      <summary>
            US Envelope #9 3 7/8 x 8 7/8
            Member value is 19.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_10">
      <summary>
            US Envelope #10 4 1/8 x 9 1/2
            Member value is 20.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_11">
      <summary>
            US Envelope #11 4 1/2 x 10 3/8
            Member value is 21.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_12">
      <summary>
            US Envelope #12 4 3/4 x 11 in
            Member value is 22.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_14">
      <summary>
            US Envelope #14 5 x 11 1/2
            Member value is 23.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeCSheet">
      <summary>
            C size sheet 43.18 x 55.88 cm
            Member value is 24.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeDSheet">
      <summary>
            D size sheet 55.88 x 86.36
            Member value is 25.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeESheet">
      <summary>
            E size sheet 86.36 x 111.76
            Member value is 26.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_Dl">
      <summary>
            Envelope DL 110 x 220mm
            Member value is 27.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_C5">
      <summary>
            Envelope C5 162 x 229 mm
            Member value is 28.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_C3">
      <summary>
            Envelope C3 324 x 458 mm
            Member value is 29.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_C4">
      <summary>
            Envelope C4 229 x 324 mm
            Member value is 30.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_C6">
      <summary>
            Envelope C6 114 x 162 mm
            Member value is 31.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_C65">
      <summary>
            Envelope C65 114 x 229 mm
            Member value is 32.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_B4">
      <summary>
            Envelope B4 250 x 353 mm
            Member value is 33.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_B5">
      <summary>
            Envelope B5 176 x 250 mm
            Member value is 34.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_B6">
      <summary>
            Envelope B6 176 x 125 mm
            Member value is 35.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_Italy">
      <summary>
            Envelope 110 x 230 mm
            Member value is 36.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_Monarch">
      <summary>
            US Envelope Monarch 3.875 x 7.5 in
            Member value is 37.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_Personal">
      <summary>
            6 3/4 US Envelope 3 5/8 x 6 1/2 in
            Member value is 38.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeFanFold_Us">
      <summary>
            US Std Fanfold 14 7/8 x 11 in
            Member value is 39.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeFanFold_Std_German">
      <summary>
            German Std Fanfold 8 1/2 x 12 in
            Member value is 40.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeFanFold_Lgl_German">
      <summary>
            German Legal Fanfold 8 1/2 x 13 in
            Member value is 41.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeIso_B4">
      <summary>
            B4 (ISO) 250 x 353 mm
            Member value is 42.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeJapanese_Postcard">
      <summary>
            Japanese Postcard 100 x 148 mm
            Member value is 43.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSize9X11">
      <summary>
            9 x 11 in
            Member value is 44.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSize10X11">
      <summary>
            10 x 11 in
            Member value is 45.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSize15X11">
      <summary>
            15 x 11 in
            Member value is 46.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeEnv_Invite">
      <summary>
            Envelope Invite 220 x 220 mm
            Member value is 47.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeLetter_Extra">
      <summary>
            US Letter Extra 9 1/2 x 12 in
            Member value is 50.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeLegal_Extra">
      <summary>
            US Legal Extra 9 1/2 x 15 in
            Member value is 51.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeTabloid_Extra">
      <summary>
            US Tabloid Extra 11.69 x 18 in
            Member value is 52.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA4_Extra">
      <summary>
            A4 Extra 9.27 x 12.69 in
            Member value is 53.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeLetter_Transverse">
      <summary>
            Letter Transverse 8 1/2 x 11 in
            Member value is 54.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA4_Transverse">
      <summary>
            A4 Transverse 210 x 297 mm
            Member value is 55.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeLetter_Extra_Transverse">
      <summary>
            Letter Extra Transverse 9 1/2 x 12 in
            Member value is 56.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA_Plus">
      <summary>
            SuperA/SuperA/A4 227 x 356 mm
            Member value is 57.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeB_Plus">
      <summary>
            SuperB/SuperB/A3 305 x 487 mm
            Member value is 58.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeLetter_Plus">
      <summary>
            US Letter Plus 8.5 x 12.69 in
            Member value is 59.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA4_Plus">
      <summary>
            A4 Plus 210 x 330 mm
            Member value is 60.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA5_Transverse">
      <summary>
            A5 Transverse 148 x 210 mm
            Member value is 61.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeB5_Transverse">
      <summary>
            B5 (JIS) Transverse 182 x 257 mm
            Member value is 62.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA3_Extra">
      <summary>
            A3 Extra 322 x 445 mm
            Member value is 63.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA5_Extra">
      <summary>
            A5 Extra 174 x 235 mm
            Member value is 64.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeB5_Extra">
      <summary>
            B5 (ISO) Extra 201 x 276 mm
            Member value is 65.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA2">
      <summary>
            A2 420 x 594 mm
            Member value is 66.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA3_Transverse">
      <summary>
            A3 Transverse 297 x 420 mm
            Member value is 67.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA3_Extra_Transverse">
      <summary>
            A3 Extra Transverse 322 x 445 mm
            Member value is 68.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeDbl_Japanese_Postcard">
      <summary>
            Japanese Double Postcard 200 x 148 mm
            Member value is 69.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA6">
      <summary>
            A6 105 x 148 mm
            Member value is 70.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeJEnv_Kaku2">
      <summary>
            Japanese Envelope Kaku #2 240 x 332 mm
            Member value is 71.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeJEnv_Kaku3">
      <summary>
            Japanese Envelope Kaku #3 9 x 324 mm
            Member value is 72.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeJEnv_Chou3">
      <summary>
            Japanese Envelope Chou #3 120 x 235 mm
            Member value is 73.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeJEnv_Chou4">
      <summary>
            Japanese Envelope Chou #4 90 x 205 mm
            Member value is 74.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeLetter_Rotated">
      <summary>
            Letter Rotated 11 x 8 1/2 11 in
            Member value is 75.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA3_Rotated">
      <summary>
            A3 Rotated 420 x 297 mm
            Member value is 76.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA4_Rotated">
      <summary>
            A4 Rotated 297 x 210 mm
            Member value is 77.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA5_Rotated">
      <summary>
            A5 Rotated 210 x 148 mm
            Member value is 78.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeB4_Jis_Rotated">
      <summary>
            B4 (JIS) Rotated 364 x 257 mm
            Member value is 79.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeB5_Jis_Rotated">
      <summary>
            B5 (JIS) Rotated 257 x 182 mm
            Member value is 80.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeJapanese_Postcard_Rotated">
      <summary>
            Japanese Postcard Rotated 148 x 100 mm
            Member value is 81.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeDbl_Japanese_Postcard_Rotated">
      <summary>
            Double Japanese Postcard Rotated 148 x 200 mm
            Member value is 82.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeA6_Rotated">
      <summary>
            A6 Rotated 148 x 105 mm
            Member value is 83.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeJEnv_Kaku2_Rotated">
      <summary>
            Japanese Envelope Kaku #2 Rotated 332 x 240 mm
            Member value is 84.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeJEnv_Kaku3_Rotated">
      <summary>
            Japanese Envelope Kaku #3 Rotated 277 x 216 mm
            Member value is 85.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeJEnv_Chou3_Rotated">
      <summary>
            Japanese Envelope Chou #3 Rotated  235 x 120 mm
            Member value is 86.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeJEnv_Chou4_Rotated">
      <summary>
            Japanese Envelope Chou #4 Rotated  205 x 90 mm
            Member value is 87.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeB6_Jis">
      <summary>
            B6 (JIS) 128 x 182 mm
            Member value is 88.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeB6_Jis_Rotated">
      <summary>
            B6 (JIS) Rotated 182 x 128 mm
            Member value is 89.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSize12X11">
      <summary>
            12 x 11 in
            Member value is 90.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeJEnv_You4">
      <summary>
            Japanese Envelope You #4 235 x 105 mm
            Member value is 91.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeJEnv_You4_Rotated">
      <summary>
            Japanese Envelope You #4 Rotated 105 x 235 mm
            Member value is 92.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeP16K">
      <summary>
            PRC 16K 146 x 215 mm
            Member value is 93.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeP32K">
      <summary>
            PRC 32K 97 x 151 mm
            Member value is 94.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeP32KBig">
      <summary>
            PRC 32K(Big) 97 x 151 mm
            Member value is 95.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_1">
      <summary>
            PRC Envelope #1 102 x 165 mm
            Member value is 96.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_2">
      <summary>
            PRC Envelope #2 102 x 176 mm
            Member value is 97.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_3">
      <summary>
            PRC Envelope #3 125 x 176 mm
            Member value is 98.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_4">
      <summary>
            PRC Envelope #4 110 x 208 mm
            Member value is 99.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_5">
      <summary>
            PRC Envelope #5 110 x 220 mm
            Member value is 100.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_6">
      <summary>
            PRC Envelope #6 120 x 230 mm
            Member value is 101.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_7">
      <summary>
            PRC Envelope #7 160 x 230 mm
            Member value is 102.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_8">
      <summary>
            PRC Envelope #8 120 x 309 mm
            Member value is 103.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_9">
      <summary>
            PRC Envelope #9 229 x 324 mm
            Member value is 104.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_10">
      <summary>
            PRC Envelope #10 324 x 458 mm
            Member value is 105.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeP16K_Rotated">
      <summary>
            PRC 16K Rotated
            Member value is 106.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeP32K_Rotated">
      <summary>
            PRC 32K Rotated
            Member value is 107.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizeP32KBig_Rotated">
      <summary>
            PRC 32K(Big) Rotated
            Member value is 108.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_1_Rotated">
      <summary>
            PRC Envelope #1 Rotated 165 x 102 mm
            Member value is 109.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_2_Rotated">
      <summary>
            PRC Envelope #2 Rotated 176 x 102 mm
            Member value is 110.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_3_Rotated">
      <summary>
            PRC Envelope #3 Rotated 176 x 125 mm
            Member value is 111.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_4_Rotated">
      <summary>
            PRC Envelope #4 Rotated 208 x 110 mm
            Member value is 112.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_5_Rotated">
      <summary>
            PRC Envelope #5 Rotated 220 x 110 mm
            Member value is 113.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_6_Rotated">
      <summary>
            PRC Envelope #6 Rotated 230 x 120 mm
            Member value is 114.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_7_Rotated">
      <summary>
            PRC Envelope #7 Rotated 230 x 160 mm
            Member value is 115.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_8_Rotated">
      <summary>
            PRC Envelope #8 Rotated 309 x 120 mm
            Member value is 116.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_9_Rotated">
      <summary>
            PRC Envelope #9 Rotated 324 x 229 mm
            Member value is 117.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageSizes.PdfPageSizePEnv_10_Rotated">
      <summary>
            PRC Envelope #10 Rotated 458 x 324 mm
            Member value is 118.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfSignatureMode.PdfSignatureModeAdobePPKMS">
      <summary>
            On Windows, the Adobe.PPKMS security handler provides access through the Microsoft Active Directory Script Interface (ADSI)
            to all the directories the user created in the Security Settings Console. Unsupported for Linux and Macintosh.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfSignatureMode.PdfSignatureModeAdobePPKLite">
      <summary>
            Adobe's default security handler used for performing private key functions, validating signatures, and signing and encrypting documents.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfSignatureMode.PdfSignatureModeAdobeCADES">
      <summary>
            CMS Advanced Electronic Signatures
            </summary>
    </member>
    <member name="F:GdPicture12.PdfSignatureType.SignatureTypeUnknown">
      <summary>
            Unknown signature type.
             </summary>
    </member>
    <member name="F:GdPicture12.PdfSignatureType.SignatureTypePlaceHolder">
      <summary>
            No signature.
             </summary>
    </member>
    <member name="F:GdPicture12.PdfSignatureType.SignatureTypeAdobePPKLite">
      <summary>
            AdobePPKlite.
            </summary>
    </member>
    <member name="T:GdPicture12.PdfSignatureCertificationLevel">
      <summary>
            Specifies the level of signature certification.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfSignatureCertificationLevel.NotCertified">
      <summary>
            Standard signature.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfSignatureCertificationLevel.NoChanges">
      <summary>
            No changes to the document are permitted; any change to the document invalidates the signature.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfSignatureCertificationLevel.FormFilling">
      <summary>
            Certified signature, form filling allowed.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfSignatureCertificationLevel.FormFillingAndAnnotations">
      <summary>
            Permitted changes are filling in forms, instantiating page templates, and signing; other changes invalidate the signature.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationFlag.PdfAnnotationFlagDefault">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationFlag.PdfAnnotationFlagInvisible">
      <summary>
            If set, do not display the annotation if it does not belong to one of the standard annotation types and no annotation handler is available.
            If clear, display such an unknown annotation using an appearance stream specified by its appearance dictionary, if any.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationFlag.PdfAnnotationFlagHidden">
      <summary>
            (PDF 1.2) If set, do not display or print the annotation or allow it to interact with the user,
            regardless of its annotation type or whether an annotation handler is available.
            In cases where screen space is limited, the ability to hide and show annotations selectively can be used in combination with appearance streams.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationFlag.PdfAnnotationFlagPrint">
      <summary>
            (PDF 1.2) If set, print the annotation when the page is printed.
            If clear, never print the annotation, regardless of whether it is displayed on the screen.
            This can be useful, for example, for annotations representing interactive pushbuttons,
            which would serve no meaningful purpose on the printed page.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationFlag.PdfAnnotationFlagNoZoom">
      <summary>
            (PDF 1.3) If set, do not scale the annotation’s appearance to match the magnification of the page.
            The location of the annotation on the page (defined by the upper-left corner of its annotation rectangle) remains fixed,
            regardless of the page magnification. See below for further discussion.
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationFlag.PdfAnnotationFlagNoRotate">
      <summary>
            (PDF 1.3) If set, do not rotate the annotation’s appearance to match the rotation of the page.
            The upper-left corner of the annotation rectangle remains in a fixed location on the page,
            regardless of the page rotation. See below for further discussion.
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationFlag.PdfAnnotationFlagNoView">
      <summary>
            (PDF 1.3) If set, do not display the annotation on the screen or allow it to interact with the user.
            The annotation may be printed (depending on the setting of the Print flag) but should be considered hidden for purposes of on-screen display and user interaction.
            Member value is 32.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationFlag.PdfAnnotationFlagReadOnly">
      <summary>
            (PDF 1.3) If set, do not allow the annotation to interact with the user.
            The annotation may be displayed or printed (depending on the settings of the NoView and Print flags)
            but should not respond to mouse clicks or change its appearance in response to mouse motions.
            Note: This flag is ignored for widget annotations; its function is subsumed by the ReadOnly flag of the associated form field
            Member value is 64.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationFlag.PdfAnnotationFlagLocked">
      <summary>
            (PDF 1.4) If set, do not allow the annotation to be deleted or its properties (including position and size) to be modified by the user.
            However, this flag does not restrict changes to the annotation’s contents, such as the value of a form field.
            Member value is 128.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationFlag.PdfAnnotationFlagToggleNoView">
      <summary>
            (PDF 1.5) If set, invert the interpretation of the NoView flag for certain events.
            A typical use is to have an annotation that appears only when a mouse cursor is held over it;
            Member value is 256.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationFlag.PdfAnnotationFlagLockedContents">
      <summary>
            (PDF 1.7) If set, do not allow the contents of the annotation to be modified by the user.
            This flag does not restrict deletion of the annotation or changes to other annotation properties, such as position and size.
            Member value is 512.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfFormFieldType.PdfFormFieldTypeUnknown">
      <summary>
            Undefined type. Check for error.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfFormFieldType.PdfFormFieldTypePushButton">
      <summary>
            A pushbutton is a purely interactive control that responds immediately to user input without retaining a permanent value.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfFormFieldType.PdfFormFieldTypeCheckBoxButton">
      <summary>
            A pushbutton is a purely interactive control that responds immediately to user input without retaining a permanent value.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfFormFieldType.PdfFormFieldTypeRadioButton">
      <summary>
            A check box toggles between two states, on and off.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfFormFieldType.PdfFormFieldTypeText">
      <summary>
            A Radio button fields contain a set of related buttons that can each be on or off.
            Typically, at most one radio button in a set may be on at any given time,
            and selecting any one of the buttons automatically deselects all the others..
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfFormFieldType.PdfFormFieldTypeChoice">
      <summary>
            Choice Field.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfFormFieldType.PdfFormFieldTypeSignature">
      <summary>
            Signature Field.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfFormFieldType.PdfFormFieldTypeList">
      <summary>
            ListBox Field.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfFormFieldType.PdfFormFieldTypeCombo">
      <summary>
            ComboBox Field.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationBorderStyle.PdfAnnotationBorderStyleSolid">
      <summary>
            (Default) A solid rectangle surrounding the annotation.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationBorderStyle.PdfAnnotationBorderStyleDashed">
      <summary>
            A dashed rectangle surrounding the annotation.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationBorderStyle.PdfAnnotationBorderStyleBeveled">
      <summary>
            A simulated embossed rectangle that appears to be raised above the surface of the page.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationBorderStyle.PdfAnnotationBorderStyleInset">
      <summary>
            A simulated engraved rectangle that appears to be recessed below the surface of the page.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationBorderStyle.PdfAnnotationBorderStyleUnderline">
      <summary>
            A single line along the bottom of the annotation rectangle.
            Member value is 4.
            </summary>
    </member>
    <member name="T:GdPicture12.PdfCheckBoxStyle">
      <summary>
            Specifies a style for a check box field. 
            </summary>
    </member>
    <member name="F:GdPicture12.PdfCheckBoxStyle.PdfCheckBoxStyleCheck">
      <summary>
            Check. 
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfCheckBoxStyle.PdfCheckBoxStyleCircle">
      <summary>
            Circle. 
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfCheckBoxStyle.PdfCheckBoxStyleCross">
      <summary>
            Cross. 
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfCheckBoxStyle.PdfCheckBoxStyleDiamond">
      <summary>
            Diamond. 
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfCheckBoxStyle.PdfCheckBoxStyleSquare">
      <summary>
            Square. 
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfCheckBoxStyle.PdfCheckBoxStyleStar">
      <summary>
            Star. 
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleSquare">
      <summary>
            A square filled with the annotation’s interior color, if any.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleCircle">
      <summary>
            A circle filled with the annotation’s interior color, if any.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleDiamond">
      <summary>
            A diamond shape filled with the annotation’s interior color, if any.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleOpenArrow">
      <summary>
            Two short lines meeting in an acute angle to form an open arrowhead.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleClosedArrow">
      <summary>
            Two short lines meeting in an acute angle as in the OpenArrow style
            and connected by a third line to form a triangular closed arrowhead filled with
            the annotation’s interior color, if any
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleNone">
      <summary>
            No line ending
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleButt">
      <summary>
            (PDF 1.5) A short line at the endpoint perpendicular to the line itself.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleROpenArrow">
      <summary>
            (PDF 1.5) Two short lines in the reverse direction from OpenArrow.
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleRClosedArrow">
      <summary>
            (PDF 1.5) A triangular closed arrowhead in the reverse direction from ClosedArrow.
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleSlash">
      <summary>
            (PDF 1.6) A short line at the endpoint approximately 30 degrees clockwise from perpendicular
            to the line itself.
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStickyNoteAnnotationIcon.PdfAnnotationIconComment">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStickyNoteAnnotationIcon.PdfAnnotationIconKey">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStickyNoteAnnotationIcon.PdfAnnotationIconNote">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStickyNoteAnnotationIcon.PdfAnnotationIconHelp">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStickyNoteAnnotationIcon.PdfAnnotationIconNewParagraph">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStickyNoteAnnotationIcon.PdfAnnotationIconParagraph">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStickyNoteAnnotationIcon.PdfAnnotationIconInsert">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStickyNoteAnnotationIcon.PdfAnnotationIconCheck">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStickyNoteAnnotationIcon.PdfAnnotationIconCircle">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStickyNoteAnnotationIcon.PdfAnnotationIconCross">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStickyNoteAnnotationIcon.PdfAnnotationIconCrossHairs">
      <summary>
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStickyNoteAnnotationIcon.PdfAnnotationIconRightArrow">
      <summary>
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStickyNoteAnnotationIcon.PdfAnnotationIconRightPointer">
      <summary>
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStickyNoteAnnotationIcon.PdfAnnotationIconStar">
      <summary>
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStickyNoteAnnotationIcon.PdfAnnotationIconUpArrow">
      <summary>
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStickyNoteAnnotationIcon.PdfAnnotationIconUpLeftArrow">
      <summary>
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfMeasurementUnit.PdfMeasurementUnitUndefined">
      <summary>
            Undefined measurement unit.
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfMeasurementUnit.PdfMeasurementUnitPoint">
      <summary>
            Point. 1 point = 1/72 inch.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfMeasurementUnit.PdfMeasurementUnitMillimeter">
      <summary>
            Millimeters.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfMeasurementUnit.PdfMeasurementUnitCentimeter">
      <summary>
            Centimeters. 1 centimeter = 1/2.54 inch.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfMeasurementUnit.PdfMeasurementUnitInch">
      <summary>
            Inch. 1 inch = 72 points.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageOrientation.PdfPageOrientationUndefined">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageOrientation.PdfPageOrientationPortrait">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageOrientation.PdfPageOrientationLandscape">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfTextMode.PdfTextModeFill">
      <summary>
            Fill text.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfTextMode.PdfTextModeStroke">
      <summary>
            Stroke text.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfTextMode.PdfTextModeFillStroke">
      <summary>
            Fill, then stroke text.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfTextMode.PdfTextModeInvisible">
      <summary>
            Neither fill nor stroke text (invisible).
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfTextMode.PdfTextModeFillPath">
      <summary>
            Fill text and add to path for clipping (see above).
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfTextMode.PdfTextModeOutlinePath">
      <summary>
            Stroke text and add to path for clipping.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfTextMode.PdfTextModeFillStrokePath">
      <summary>
            Fill, then stroke text and add to path for clipping.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfTextMode.PdfTextClipPath">
      <summary>
            Add text to path for clipping.
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageBox.PdfPageBoxMediaBox">
      <summary>
            Defines the boundaries of the physical medium on which the page is intended to be displayed or printed.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageBox.PdfPageBoxCropBox">
      <summary>
            Defines the visible region. When the page is displayed or printed, its contents are to be clipped (cropped) to this rectangle and then imposed on the output medium.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageBox.PdfPageBoxBleedBox">
      <summary>
            Defines the region to which the contents of the page should be clipped when output in a production environment.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageBox.PdfPageBoxTrimBox">
      <summary>
            Defines the intended dimensions of the finished page after trimming.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPageBox.PdfPageBoxArtBox">
      <summary>
            Defines the extent of the page’s meaningful content (including potential white space) as intended by the page’s creator.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfEncryption.PdfEncryptionUnknown">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfEncryption.PdfEncryptionNone">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfEncryption.PdfEncryption40BitRC4">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfEncryption.PdfEncryption128BitRC4">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfEncryption.PdfEncryption128BitAES">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfEncryption.PdfEncryption256BitAES">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfRight.PdfRightUndefined">
      <summary>
            Do not use.
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfRight.PdfRightCanView">
      <summary>
            Allows the user to view the document. Always available.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfRight.PdfRightCanPrint">
      <summary>
            Allows the user to print the document.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfRight.PdfRightCanModify">
      <summary>
            Allows the user to edit the document.
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfRight.PdfRightCanCopy">
      <summary>
            Allows the user to copy text and graphics from the document.
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfRight.PdfRightCanAddNotes">
      <summary>
            Allows the user to add annotations.
            Member value is 32.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfRight.PdfRightCanFillFields">
      <summary>
            Allows the user to fill in form fields. Only works with 128-bit encryption.
            Member value is 256.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfRight.PdfRightCanCopyAccess">
      <summary>
            Enables copying for use with accessibility features. Only works with 128-bit encryption.
            Member value is 512.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfRight.PdfRightCanAssemble">
      <summary>
            Allows the user to assemble the document. Only works with 128-bit encryption.
            Member value is 1024.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfRight.PdfRightCanPrintFull">
      <summary>
            Allows high resolution printing of the document. Only works with 128-bit encryption.
            Member value is 2048.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfEncryptionMode.UnKnown">
      <summary>
            The pdf is encrypted using an unknown mode.
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:GdPicture12.PdfEncryptionMode.None">
      <summary>
            The pdf is not encrypted.
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:GdPicture12.PdfEncryptionMode.Standard">
      <summary>
            The Pdf is encrypted. A Standard Security Handler has been used for encryption.
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:GdPicture12.PdfEncryptionMode.PublicKey">
      <summary>
            The Pdf is encrypted. A Public-Key Security Handlers has been used for encryption.
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:GdPicture12.PdfActionNamed">
      <summary>
            Named actions that PDF viewer applications are expected to support.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionNamed.ActionNamedUndefined">
      <summary>
            Undefined action.
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionNamed.ActionNamedNextPage">
      <summary>
            Go to the next page of the document.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionNamed.ActionNamedPrevPage">
      <summary>
            Go to the previous page of the document.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionNamed.ActionNamedFirstPage">
      <summary>
            Go to the first page of the document.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionNamed.ActionNamedLastPage">
      <summary>
            Go to the last page of the document.
            Member value is 3.
            </summary>
    </member>
    <member name="T:GdPicture12.PdfActionLaunchOperation">
      <summary>
            Specifies the operation to perform for a launch action.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionLaunchOperation.ActionLaunchOperationUndefined">
      <summary>
            Undefined launch operation type.
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionLaunchOperation.ActionLaunchOperationOpen">
      <summary>
            Open a document.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionLaunchOperation.ActionLaunchOperationPrint">
      <summary>
            Print a document.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeUnknown">
      <summary>
            Unknown action type.
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeGoTo">
      <summary>
            Go to a destination in the current document.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeGoToR">
      <summary>
            (“Go-to remote”) Go to a destination in another document.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeGoToE">
      <summary>
            (“Go-to embedded”; PDF 1.6) Go to a destination in an embedded file.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeLaunch">
      <summary>
            Launch an application, usually to open a file.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeThread">
      <summary>
            Begin reading an article thread.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeURI">
      <summary>
            Resolve a uniform resource identifier.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeSound">
      <summary>
            (PDF 1.2) Play a sound.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeMovie">
      <summary>
            (PDF 1.2) Play a movie.
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeHide">
      <summary>
            (PDF 1.2) Set an annotation’s Hidden flag.
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeNamed">
      <summary>
            (PDF 1.2) Execute an action predefined by the viewer application.
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeSubmitForm">
      <summary>
            (PDF 1.2) Send data to a uniform resource locator.
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeResetForm">
      <summary>
            (PDF 1.2) Set fields to their default values.
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeImportData">
      <summary>
            (PDF 1.2) Import field values from a file.
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeJavaScript">
      <summary>
            (PDF 1.3) Execute a JavaScript script.
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeSetOCGState">
      <summary>
            (PDF 1.5) Set the states of optional content groups.
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeRendition">
      <summary>
            (PDF 1.5) Controls the playing of multimedia content.
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeTransition">
      <summary>
            (PDF 1.5) Updates the display of a document, using a transition dictionary.
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeGoTo3DView">
      <summary>
            (PDF 1.6) Set the current view of a 3D annotation
            Member value is 17.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfActionType.ActionTypeExplicitDestination">
      <summary>
            Specifies a destination explicitly in a PDF file.
            Member value is 128.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfDestinationType.DestinationTypeUndefined">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfDestinationType.DestinationTypeXYZ">
      <summary>
            Display the page designated by page, with the coordinates (left, top) positioned at the upper-left corner
            of the window and the contents of the page magnified by the factor zoom. A null value for any
            of the parameters left, top, or zoom specifies that the current value of that parameter is to be retained unchanged.
            A zoom value of 0 has the same meaning as a null value.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfDestinationType.DestinationTypeFit">
      <summary>
            Display the page designated by page, with its contents magnified just enough to fit the entire page within the window both horizontally and vertically.
            If the required horizontal and vertical magnification factors are different,
            use the smaller of the two, centering the page within the window in the other dimension.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfDestinationType.DestinationTypeFitH">
      <summary>
            Display the page designated by page, with the vertical coordinate top positioned at the top edge of the window
            and the contents of the page magnified just enough to fit the entire width of the page within the window.
            A null value for top specifies that the current value of that parameter is to be retained unchanged.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfDestinationType.DestinationTypeFitV">
      <summary>
            Display the page designated by page, with the horizontal coordinate left positioned at the left edge of the
            window and the contents of the page magnified just enough to fit the entire height of the page within the window.
            A null value for left specifies that the current value of that parameter is to be retained unchanged.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfDestinationType.DestinationTypeFitR">
      <summary>
            Display the page designated by page, with its contents magnified just enough to fit the rectangle specified by the coordinates left, bottom, right,
            and topentirely within the window both horizontally and vertically. If the required horizontal and vertical magnification
            factors are different, use the smaller of the two, centering the rectangle within the window in the other dimension.
            A null value for any of the parameters may result in unpredictable behavior.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfDestinationType.DestinationTypeFitB">
      <summary>
            (PDF 1.1) Display the page designated by page, with its contents magnified just enough to fit its bounding box
            entirely within the window both horizontally and vertically.
            If the required horizontal and vertical magnification factors are different,
            use the smaller of the two, centering the bounding box within the window in the other dimension.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfDestinationType.DestinationTypeFitBH">
      <summary>
            (PDF 1.1) Display the page designated by page, with the vertical coordinate top positioned at the top edge of the
            window and the contents of the page magnified just enough to fit the entire width of its bounding box within the window.
            A null value for top specifies that the current value of that parameter is to be retained unchanged.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfDestinationType.DestinationTypeFitBV">
      <summary>
            (PDF 1.1) Display the page designated by page, with the horizontal coordinate left positioned at the left edge of the window and
            the contents of the page magnified just enough to fit the entire height of its bounding box within the window.
            A null value for left specifies that the current value of that parameter is to be retained unchanged.
            Member value is 7.
            </summary>
    </member>
    <member name="T:GdPicture12.PdfColorSpace">
      <summary>
            Specifies a color space.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfColorSpace.PdfColorSpaceUnknown">
      <summary>
            Unknown color space.
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfColorSpace.PdfColorSpaceDeviceGray">
      <summary>
            Controls the intensity of achromatic light, on a scale from black to white.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfColorSpace.PdfColorSpaceDeviceRGB">
      <summary>
            Controls the intensities of red, green, and blue light, the three additive primary colors used in displays.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfColorSpace.PdfColorSpaceDeviceCMYK">
      <summary>
            Controls the concentrations of cyan, magenta, yellow, and black inks, the four subtractive process colors used in printing.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfColorSpace.PdfColorSpaceCalGray">
      <summary>
            Special case of a single-component CIE-based color space, known as a CIE-based A color space.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfColorSpace.PdfColorSpaceCalRGB">
      <summary>
            Specifies a CIE-based ABC color space with only one transformation stage instead of two.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfColorSpace.PdfColorSpaceLab">
      <summary>
            Specifies a CIE-based ABC color space with two transformation stages.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfColorSpace.PdfColorSpaceICCBased">
      <summary>
            Specifies a color space based on a cross-platform color profile as defined by the International Color Consortium (ICC).
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfColorSpace.PdfColorSpaceIndexed">
      <summary>
            An Indexed color space allows a PDF content stream to use small integers as indices into a color map or color table of arbitrary colors in some other space.
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfColorSpace.PdfColorSpacePattern">
      <summary>
            A Pattern color space (PDF 1.2) enables a PDF content stream to paint an area with a pattern rather than a single color.
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfColorSpace.PdfColorSpaceSeparation">
      <summary>
            A Separation color space (PDF 1.2) provides a means for specifying the use of additional colorants or for isolating the control of individual color components of a device color space for a subtractive device.
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfColorSpace.PdfColorSpaceDeviceN">
      <summary>
            DeviceN color spaces (PDF 1.3) can contain an arbitrary number of color components. They provide greater flexibility than is possible with standard device color spaces such as DeviceCMYK or with individual Separation color spaces.
            Member value is 10.
            </summary>
    </member>
    <member name="T:GdPicture12.PdfBlendMode">
      <summary>
            Defines the blend function used in the compositing formula to customize the blending operation.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfBlendMode.PdfBlendModeNormal">
      <summary>
            Selects the source color, ignoring the backdrop.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfBlendMode.PdfBlendModeMultiply">
      <summary>
            Multiplies the backdrop and source color values.
            The result color is always at least as dark as either of the two constituent colors.
            Multiplying any color with black produces black; multiplying with white leaves the original color unchanged.
            Painting successive overlapping objects with a color other than black or white produces progressively darker colors.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfBlendMode.PdfBlendModeScreen">
      <summary>
            Multiplies the complements of the backdrop and source color values, then complements the result.
            The result color is always at least as light as either of the two constituent colors.
            Screening any color with white produces white; screening with black leaves the original color unchanged.
            The effect is similar to projecting multiple photographic slides simultaneously onto a single screen.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfBlendMode.PdfBlendModeOverLay">
      <summary>
            Multiplies or screens the colors, depending on the backdrop color value. Source colors overlay the backdrop while preserving its highlights and shadows.
            The backdrop color is not replaced but is mixed with the source color to reflect the lightness or darkness of the backdrop.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfBlendMode.PdfBlendModeDarken">
      <summary>
            Selects the darker of the backdrop and source colors.
            The backdrop is replaced with the source where the source is darker; otherwise, it is left unchanged.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfBlendMode.PdfBlendModeLighten">
      <summary>
            Selects the lighter of the backdrop and source colors.
            The backdrop is replaced with the source where the source is lighter; otherwise, it is left unchanged.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfBlendMode.PdfBlendModeColorDodge">
      <summary>
            Brightens the backdrop color to reflect the source color. Painting with black produces no changes.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfBlendMode.PdfBlendModeColorBurn">
      <summary>
            Darkens the backdrop color to reflect the source color. Painting with white produces no change.
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfBlendMode.PdfBlendModeHardLight">
      <summary>
            Multiplies or screens the colors, depending on the source color value. The effect is similar to shining a harsh spotlight on the backdrop.
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfBlendMode.PdfBlendModeSoftLight">
      <summary>
            Darkens or lightens the colors, depending on the source color value. The effect is similar to shining a diffused spotlight on the backdrop.
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfBlendMode.PdfBlendModeDifference">
      <summary>
            Subtracts the darker of the two constituent colors from the lighter color.
            Painting with white inverts the backdrop color; painting with black produces no change.
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfBlendMode.PdfBlendModeExclusion">
      <summary>
            Produces an effect similar to that of the Difference mode but lower in contrast.
            Painting with white inverts the backdrop color; painting with black produces no change.
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfBlendMode.PdfBlendModeHue">
      <summary>
            Creates a color with the hue of the source color and the saturation and luminosity of the backdrop color.
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfBlendMode.PdfBlendModeSaturation">
      <summary>
            Creates a color with the saturation of the source color and the hue and luminosity of the backdrop color.
            Painting with this mode in an area of the backdrop that is a pure gray (no saturation) produces no change.
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfBlendMode.PdfBlendModeColor">
      <summary>
            Creates a color with the hue and saturation of the source color and the luminosity of the backdrop color.
            This preserves the gray levels of the backdrop and is useful for coloring monochrome images or tinting color images.
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfBlendMode.PdfBlendModeLuminosity">
      <summary>
            Creates a color with the luminosity of the source color and the hue and saturation of the backdrop color.
            This produces an inverse effect to that of the Color mode.
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfLineCapStyle.PdfLineCapStyleButt">
      <summary>
            Butt cap. The stroke is squared off at the endpoint of the path. There is no projection beyond the end of the path.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfLineCapStyle.PdfLineCapStyleRound">
      <summary>
            Round cap. A semicircular arc with a diameter equal to the line width is drawn around the endpoint and filled in.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfLineCapStyle.PdfLineCapStyleProjectingSquare">
      <summary>
            Projecting square cap. The stroke continues beyond the endpoint of the path for a distance equal to half the line width and is squared off.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfLineJoinStyle.PdfLineJoinStyleMiter">
      <summary>
            The outer edges of the strokes for the two segments are extended until they meet at an angle,
            as in a picture frame. If the segments meet at too sharp an angle (as defined by the miter limit parameter), a bevel join is used instead.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfLineJoinStyle.PdfLineJoinStyleRound">
      <summary>
            An arc of a circle with a diameter equal to the line width is drawn around the point where the two segments meet,
            connecting the outer edges of the strokes for the two segments. This pieslice-shaped figure is filled in, producing a rounded corner.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfLineJoinStyle.PdfLineJoinStyleBevel">
      <summary>
            The two segments are finished with butt caps and the resulting notch beyond the ends of the segments is filled with a triangle.
            Member value is 2.
            </summary>
    </member>
    <member name="T:GdPicture12.PdfAdvancedImageCompression">
      <summary>
            Specifies a method to enhance image compression into PDF documents.
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="F:GdPicture12.PdfAdvancedImageCompression.PdfAdvancedImageCompressionNone">
      <summary>
            No enhancement.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAdvancedImageCompression.PdfAdvancedImageCompressionColorDetection">
      <summary>
            Method based on color detection on the full bitmap.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfAdvancedImageCompression.PdfAdvancedImageCompressionMRC">
      <summary>
            Mixed raster content (or MRC), using image segmentation to compress areas with the optimum algorithm based they characteristics.
            This method produces optimal results with document mixing text, graphics and images.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfCompression.PdfCompressionUnknown">
      <summary>
            Unknown compression.
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfCompression.PdfCompressionNone">
      <summary>
            No compression.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfCompression.PdfCompressionFlate">
      <summary>
            Zlib/deflate compression method.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfCompression.PdfCompressionCCITT4">
      <summary>
            CCITT 4 facsimile standard.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfCompression.PdfCompressionJPEG">
      <summary>
            DCT (discrete cosine transform) technique based on the JPEG standard.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfCompression.PdfCompressionJBIG2">
      <summary>
            JBIG2 standard.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfCompression.PdfCompressionJPEG2000">
      <summary>
            Wavelet-based JPEG2000 standard.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStandardFont.PdfStandardFontCourier">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStandardFont.PdfStandardFontCourierOblique">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStandardFont.PdfStandardFontCourierBold">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStandardFont.PdfStandardFontCourierBoldOblique">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStandardFont.PdfStandardFontHelvetica">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStandardFont.PdfStandardFontHelveticaOblique">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStandardFont.PdfStandardFontHelveticaBold">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStandardFont.PdfStandardFontHelveticaBoldOblique">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStandardFont.PdfStandardFontTimesRoman">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStandardFont.PdfStandardFontTimesItalic">
      <summary>
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStandardFont.PdfStandardFontTimesBold">
      <summary>
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStandardFont.PdfStandardFontTimesBoldItalic">
      <summary>
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStandardFont.PdfStandardFontSymbol">
      <summary>
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfStandardFont.PdfStandardFontZapfDingbats">
      <summary>
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.PageCacheMode.Unspecified">
      <summary>
            Here for internal usage. Do not use.
            </summary>
    </member>
    <member name="F:GdPicture12.PageCacheMode.Memory">
      <summary>
            Page content is cached in an allocated memory buffer.
            </summary>
    </member>
    <member name="F:GdPicture12.PageCacheMode.File">
      <summary>
            Page content is cached in a temporary file.
            </summary>
    </member>
    <member name="F:GdPicture12.ColorKey.ColorKeyBlue">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.ColorKey.ColorKeyGreen">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.ColorKey.ColorKeyRed">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.SearchDirectionHint.Up">
      <summary>
            Member value is 38.
            </summary>
    </member>
    <member name="F:GdPicture12.SearchDirectionHint.Down">
      <summary>
            Member value is 40.
            </summary>
    </member>
    <member name="F:GdPicture12.SearchDirectionHint.Left">
      <summary>
            Member value is 37.
            </summary>
    </member>
    <member name="F:GdPicture12.SearchDirectionHint.Right">
      <summary>
            Member value is 39.
            </summary>
    </member>
    <member name="F:GdPicture12.ExrCompression.ExrCompressionDefault">
      <summary>
            Save data as half with piz-based wavelet compression.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.ExrCompression.ExrCompressionFloat">
      <summary>
            Save data as float instead of as half (not recommended).
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.ExrCompression.ExrCompressionNone">
      <summary>
            Save with no compression
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.ExrCompression.ExrCompressionZip">
      <summary>
            Save with zlib compression, in blocks of 16 scan lines.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.ExrCompression.ExrCompressionPiz">
      <summary>
            Save with piz-based wavelet compression.
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.ExrCompression.ExrCompressionPxr24">
      <summary>
            Save with lossy 24-bit float compression.
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.ExrCompression.ExrCompressionB44">
      <summary>
            Save with lossy 44% float compression - goes to 22% when combined with ExrCompressionLC.
            Member value is 32.
            </summary>
    </member>
    <member name="F:GdPicture12.ExrCompression.ExrCompressionLC">
      <summary>
            Save images with one luminance and two chroma channels, rather than as RGB (lossy compression).
            Member value is 64.
            </summary>
    </member>
    <member name="F:GdPicture12.LineRemoveOrientation.Horizontal">
      <summary>
            Removes Horizontal Lines.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.LineRemoveOrientation.Vertical">
      <summary>
            Removes Vertical Lines.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.HolePunchMargins.MarginLeft">
      <summary>
            Checks the Left Margin of the Document.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.HolePunchMargins.MarginRight">
      <summary>
            Checks the Right Margin of the Document.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.HolePunchMargins.MarginTop">
      <summary>
            Checks the Top Margin of the Document.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.HolePunchMargins.MarginBottom">
      <summary>
            Checks the Bottom Margin of the Document.
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.TiffCompression.TiffCompressionUnknown">
      <summary>
            Unknown compression.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TiffCompression.TiffCompressionNONE">
      <summary>
            No compression
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TiffCompression.TiffCompressionRLE">
      <summary>
            CCITT modified Huffman RLE
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TiffCompression.TiffCompressionCCITT3">
      <summary>
            CCITT Group 3 fax encoding
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TiffCompression.TiffCompressionCCITT4">
      <summary>
            CCITT Group 4 fax encoding
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.TiffCompression.TiffCompressionLZW">
      <summary>
            Lempel-Ziv  and Welch
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.TiffCompression.TiffCompressionOJPEG">
      <summary>
            !6.0 JPEG
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TiffCompression.TiffCompressionJPEG">
      <summary>
            %JPEG DCT compression
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.TiffCompression.TiffCompressionADOBEDEFLATE">
      <summary>
            Deflate compression,as recognized by Adobe
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.TiffCompression.TiffCompressionNEXT">
      <summary>
            NeXT 2-bit RLE
            Member value is 32766.
            </summary>
    </member>
    <member name="F:GdPicture12.TiffCompression.TiffCompressionCCITTRLEW">
      <summary>
            #1 w/ word alignment
            Member value is 32771.
            </summary>
    </member>
    <member name="F:GdPicture12.TiffCompression.TiffCompressionPACKBITS">
      <summary>
            Macintosh RLE
            Member value is 32773.
            </summary>
    </member>
    <member name="F:GdPicture12.TiffCompression.TiffCompressionTHUNDERSCAN">
      <summary>
            ThunderScan RLE
            Member value is 32809.
            </summary>
    </member>
    <member name="F:GdPicture12.TiffCompression.TiffCompressionDEFLATE">
      <summary>
            Deflate compression
            Member value is 32946.
            </summary>
    </member>
    <member name="F:GdPicture12.TiffCompression.TiffCompressionAUTO">
      <summary>
            Uses CCITT4 compression for bitonal image and LZW for others. TiffCompressionAUTO allows to mix compression in a multipage tiff document.
            Member value is 65536.
            </summary>
    </member>
    <member name="T:GdPicture12.PdfPortFolioType">
      <summary>
            initial view for the portfolio
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPortFolioType.Detail">
      <summary>
            The collection view is presented in details mode, with all information in the Schema dictionary presented in a multi-column format. 
            This mode provides the most information to the user.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPortFolioType.Tile">
      <summary>
            The collection view is presented in tile mode, with each file in the collection denoted by a small icon and a subset of information from the Schema dictionary. 
            This mode provides top-level information about the file attachments to the user.
            </summary>
    </member>
    <member name="F:GdPicture12.PdfPortFolioType.Hiden">
      <summary>
            The collection view is initially hidden, without preventing the user from obtaining a file list via explicit action
            </summary>
    </member>
    <member name="F:GdPicture12.JPEGTransformation.JPEGTransformationRotate90">
      <summary>
            Specifies that the image is to be rotated clockwise 90 degrees about its center.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.JPEGTransformation.JPEGTransformationRotate180">
      <summary>
            Specifies that the image is to be rotated 180 degrees about its center.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.JPEGTransformation.JPEGTransformationRotate270">
      <summary>
            Specifies that the image is to be rotated clockwise 270 degrees about its center.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.JPEGTransformation.JPEGTransformationFlipHorizontal">
      <summary>
            Specifies that the image is to be flipped horizontally (about the vertical axis).
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.JPEGTransformation.JPEGTransformationFlipVertical">
      <summary>
            Specifies that the image is to be flipped vertically (about the horizontal axis).
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.JPEGTransformation.JPEGTransformationTranspose">
      <summary>
            Specifies that the image is to be transposed across upper-left to lower-right axis.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.JPEGTransformation.JPEGTransformationTransverse">
      <summary>
            Specifies that the image is to be transposed across upper-right to lower-left axis.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.FontStyle.FontStyleRegular">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.FontStyle.FontStyleBold">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.FontStyle.FontStyleItalic">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.FontStyle.FontStyleBoldItalic">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.FontStyle.FontStyleUnderline">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.FontStyle.FontStyleBoldUnderline">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.FontStyle.FontStyleItalicUnderline">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.FontStyle.FontStyleBoldItalicUnderline">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.FontStyle.FontStyleStrikeout">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.FontStyle.FontStyleBoldStrikeout">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.FontStyle.FontStyleItalicStrikeout">
      <summary>
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.FontStyle.FontStyleBoldItalicStrikeout">
      <summary>
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.FontStyle.FontStyleUnderlineStrikeout">
      <summary>
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.FontStyle.FontStyleBoldUnderlineStrikeout">
      <summary>
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.FontStyle.FontStyleItalicUnderlineStrikeout">
      <summary>
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.FontStyle.FontStyleBoldItalicUnderlineStrikeout">
      <summary>
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.UnitMode.UnitWorld">
      <summary>
            Do not use
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.UnitMode.UnitDisplay">
      <summary>
            Do not use
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.UnitMode.UnitPixel">
      <summary>
            Each unit is one device pixel.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.UnitMode.UnitPoint">
      <summary>
            Each unit is a printer's point, or 1/72 inch.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.UnitMode.UnitInch">
      <summary>
            Each unit is 1 inch.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.UnitMode.UnitDocument">
      <summary>
            Each unit is 1/300 inch.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.UnitMode.UnitMillimeter">
      <summary>
            Each unit is 1 millimeter.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainStatus.TWAIN_ERROR">
      <summary>
            Unknown Error.
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainStatus.TWAIN_PRESESSION">
      <summary>
            Presession, Twain environment is enable.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainStatus.TWAIN_SM_LOADED">
      <summary>
            Source Manager was loaded.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainStatus.TWAIN_SM_OPEN">
      <summary>
            Source Manager is open.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainStatus.TWAIN_SOURCE_OPEN">
      <summary>
            A source is open.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainStatus.TWAIN_SOURCE_ENABLED">
      <summary>
            A source is enabled.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainStatus.TWAIN_TRANSFER_READY">
      <summary>
            A source is ready to transfer data.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainStatus.TWAIN_TRANSFERRING">
      <summary>
            A source is transfering data.
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelType.TWPT_BW">
      <summary>
            Black and White.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelType.TWPT_GRAY">
      <summary>
            Grayscale.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelType.TWPT_RGB">
      <summary>
            RGB color space.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelType.TWPT_PALETTE">
      <summary>
            Color palette.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelType.TWPT_CMY">
      <summary>
            CMY color space.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelType.TWPT_CMYK">
      <summary>
            CMYK color space.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelType.TWPT_YUV">
      <summary>
            YUV color space.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelType.TWPT_YUVK">
      <summary>
            YUVK color space.
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelType.TWPT_CIEXYZ">
      <summary>
            CIEXYZ color space.
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelType.TWPT_LAB">
      <summary>
            LAB color space.
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelType.TWPT_SRGB">
      <summary>
            SRGB color space.
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelType.TWPT_SCRGB">
      <summary>
            SCRGB color space.
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelType.TWPT_BGR">
      <summary>
            BGR color space.
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelType.TWPT_CIELAB">
      <summary>
            CIELAB color space.
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelType.TWPT_CIELUV">
      <summary>
            CIELLUV color space.
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelType.TWPT_YCBCR">
      <summary>
            YCBR color space.
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelType.TWPT_INFRARED">
      <summary>
            Infrared color space.
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_3OF9">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_2OF5INTERLEAVED">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_2OF5NONINTERLEAVED">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_CODE93">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_CODE128">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_UCC128">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_CODABAR">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_UPCA">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_UPCE">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_EAN8">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_EAN13">
      <summary>
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_POSTNET">
      <summary>
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_PDF417">
      <summary>
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_2OF5INDUSTRIAL">
      <summary>
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_2OF5MATRIX">
      <summary>
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_2OF5DATALOGIC">
      <summary>
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_2OF5IATA">
      <summary>
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_3OF9FULLASCII">
      <summary>
            Member value is 17.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_CODABARWITHSTARTSTOP">
      <summary>
            Member value is 18.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeType.TWBT_MAXICODE">
      <summary>
            Member value is 19.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeRotation.TWBCOR_ROT0">
      <summary>
            Normal reading orientation.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeRotation.TWBCOR_ROT90">
      <summary>
            Rotated 90 degrees clockwise.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeRotation.TWBCOR_ROT180">
      <summary>
            Rotated 180 degrees clockwise.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeRotation.TWBCOR_ROT270">
      <summary>
            Rotated 270 degrees clockwise.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBarCodeRotation.TWBCOR_ROTX">
      <summary>
            The orientation is not known.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainNoiseFilterMode.TWNF_NONE">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainNoiseFilterMode.TWNF_AUTO">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainNoiseFilterMode.TWNF_LONEPIXEL">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainNoiseFilterMode.TWNF_MAJORITYRULE">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainResultCode.TWRC_SUCCESS">
      <summary>
            Operation was successful.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainResultCode.TWRC_FAILURE">
      <summary>
            Operation failed - get the Condition Code for more information.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainResultCode.TWRC_CHECKSTATUS">
      <summary>
            Partially successful operation; request further information.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainResultCode.TWRC_CANCEL">
      <summary>
            Abort transfer or the Cancel button was pressed.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainResultCode.TWRC_DSEVENT">
      <summary>
            Event or Windows message beIntegers to this Source.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainResultCode.TWRC_NOTDSEVENT">
      <summary>
            Event or Windows message does not beInteger to this source.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainResultCode.TWRC_XFERDONE">
      <summary>
            All data has been transfered.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainResultCode.TWRC_ENDOFLIST">
      <summary>
            No more sources found after MSG_GETNEXT.
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainResultCode.TWRC_INFONOTSUPPORTED">
      <summary>
            The type of information requested is not supported by the data source.
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainResultCode.TWRC_DATANOTAVAILABLE">
      <summary>
            Data for the requested information is not available.
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelFlavor.TwainPixelFlavorUndefined">
      <summary>
            Do not use.
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelFlavor.TwainPixelFlavorChocolate">
      <summary>
            Zero pixel represents darkest shade.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPixelFlavor.TwainPixelFlavorVanilla">
      <summary>
            Zero pixel represents lightest shade.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_SUCCESS">
      <summary>
            It worked!
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_BUMMER">
      <summary>
            Failure due to unknown causes.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_LOWMEMORY">
      <summary>
            Not enough memory to perform operation.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_NODS">
      <summary>
            No Data Source.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_MAXCONNECTIONS">
      <summary>
            DS is connected to max possible applications.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_OPERATIONERROR">
      <summary>
            DS or DSM reported error, application shouldn't.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_BADCAP">
      <summary>
            Unknown capability.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_BADPROTOCOL">
      <summary>
            Unrecognized MSG DG DAT combination.
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_BADVALUE">
      <summary>
            Data parameter out of range.
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_SEQERROR">
      <summary>
            DG DAT MSG out of expected sequence.
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_BADDEST">
      <summary>
            Unknown destination Application/Source in DSM_Entry.
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_CAPUNSUPPORTED">
      <summary>
            Capability not supported by source.
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_CAPBADOPERATION">
      <summary>
            Operation not supported by capability.
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_CAPSEQERROR">
      <summary>
            Capability has dependancy on other capability.
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_DENIED">
      <summary>
            File System operation is denied (file is protected).
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_FILEEXISTS">
      <summary>
            Operation failed because file already exists.
            Member value is 17.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_FILENOTFOUND">
      <summary>
            File not found.
            Member value is 18.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_NOTEMPTY">
      <summary>
            Operation failed because directory is not empty.
            Member value is 19.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_PAPERJAM">
      <summary>
            The feeder is jammed.
            Member value is 20.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_PAPERDOUBLEFEED">
      <summary>
            The feeder detected multiple pages.
            Member value is 21.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_FILEWRITEERROR">
      <summary>
            Error writing the file (meant for things like disk full conditions).
            Member value is 22.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_CHECKDEVICEONLINE">
      <summary>
            Device seems to be offline.
            Member value is 23.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_INTERLOCK">
      <summary>
            Cover or door is open.
            Member value is 24.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_DAMAGEDCORNER">
      <summary>
            Document has a damaged corner.
            Member value is 25.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_FOCUSERROR">
      <summary>
            Focusing error during document capture.
            Member value is 26.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_DOCTOOLIGHT">
      <summary>
            Document is too light.
            Member value is 27.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_DOCTOODARK">
      <summary>
            Document is too dark.
            Member value is 28.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainConditionCode.TWCC_NOMEDIA">
      <summary>
            No Media...
            Member value is 29.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.NONE">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.A4LETTER">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.B5LETTER">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.USLETTER">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.USLEGAL">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.A5">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.B4">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.B6">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.USLEDGER">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.USEXECUTIVE">
      <summary>
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.A3">
      <summary>
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.B3">
      <summary>
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.A6">
      <summary>
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.C4">
      <summary>
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.C5">
      <summary>
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.C6">
      <summary>
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.A04">
      <summary>
            Member value is 17.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.A02">
      <summary>
            Member value is 18.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.A0">
      <summary>
            Member value is 19.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.A1">
      <summary>
            Member value is 20.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.A2">
      <summary>
            Member value is 21.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.A4">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.A7">
      <summary>
            Member value is 22.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.A8">
      <summary>
            Member value is 23.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.A9">
      <summary>
            Member value is 24.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.A10">
      <summary>
            Member value is 25.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.ISOB0">
      <summary>
            Member value is 26.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.ISOB1">
      <summary>
            Member value is 27.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.ISOB2">
      <summary>
            Member value is 28.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.ISOB3">
      <summary>
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.ISOB4">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.ISOB5">
      <summary>
            Member value is 29.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.ISOB6">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.ISOB7">
      <summary>
            Member value is 30.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.ISOB8">
      <summary>
            Member value is 31.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.ISOB9">
      <summary>
            Member value is 32.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.ISOB10">
      <summary>
            Member value is 33.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.JISB0">
      <summary>
            Member value is 34.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.JISB1">
      <summary>
            Member value is 35.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.JISB2">
      <summary>
            Member value is 36.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.JISB3">
      <summary>
            Member value is 37.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.JISB4">
      <summary>
            Member value is 38.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.JISB5">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.JISB6">
      <summary>
            Member value is 39.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.JISB7">
      <summary>
            Member value is 40.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.JISB8">
      <summary>
            Member value is 41.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.JISB9">
      <summary>
            Member value is 42.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.JISB10">
      <summary>
            Member value is 43.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.C0">
      <summary>
            Member value is 44.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.C1">
      <summary>
            Member value is 45.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.C2">
      <summary>
            Member value is 46.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.C3">
      <summary>
            Member value is 47.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.C7">
      <summary>
            Member value is 48.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.C8">
      <summary>
            Member value is 49.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.C9">
      <summary>
            Member value is 50.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.C10">
      <summary>
            Member value is 51.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.USSTATEMENT">
      <summary>
            Member value is 52.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.BUSINESSCARD">
      <summary>
            Member value is 53.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPaperSize.MAXSIZE">
      <summary>
            Member value is 54.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainItemTypes.TWTY_INVALID">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainItemTypes.TWTY_INT8">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainItemTypes.TWTY_INT16">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainItemTypes.TWTY_INT32">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainItemTypes.TWTY_UINT8">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainItemTypes.TWTY_UINT16">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainItemTypes.TWTY_UINT32">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainItemTypes.TWTY_BOOL">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainItemTypes.TWTY_FIX32">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainItemTypes.TWTY_FRAME">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainItemTypes.TWTY_STR32">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainItemTypes.TWTY_STR64">
      <summary>
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainItemTypes.TWTY_STR128">
      <summary>
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainItemTypes.TWTY_STR255">
      <summary>
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_DAN">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_DUT">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ENG">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_FCF">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_FIN">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_FRN">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_GER">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ICE">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ITN">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_NOR">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_POR">
      <summary>
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_SPA">
      <summary>
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_SWE">
      <summary>
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_USA">
      <summary>
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_USERLOCALE">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_AFRIKAANS">
      <summary>
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ALBANIA">
      <summary>
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ARABIC">
      <summary>
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ARABIC_ALGERIA">
      <summary>
            Member value is 17.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ARABIC_BAHRAIN">
      <summary>
            Member value is 18.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ARABIC_EGYPT">
      <summary>
            Member value is 19.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ARABIC_IRAQ">
      <summary>
            Member value is 20.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ARABIC_JORDAN">
      <summary>
            Member value is 21.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ARABIC_KUWAIT">
      <summary>
            Member value is 22.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ARABIC_LEBANON">
      <summary>
            Member value is 23.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ARABIC_LIBYA">
      <summary>
            Member value is 24.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ARABIC_MOROCCO">
      <summary>
            Member value is 25.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ARABIC_OMAN">
      <summary>
            Member value is 26.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ARABIC_QATAR">
      <summary>
            Member value is 27.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ARABIC_SAUDIARABIA">
      <summary>
            Member value is 28.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ARABIC_SYRIA">
      <summary>
            Member value is 29.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ARABIC_TUNISIA">
      <summary>
            Member value is 30.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ARABIC_UAE">
      <summary>
            Member value is 31.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ARABIC_YEMEN">
      <summary>
            Member value is 32.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_BASQUE">
      <summary>
            Member value is 33.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_BYELORUSSIAN">
      <summary>
            Member value is 34.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_BULGARIAN">
      <summary>
            Member value is 35.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_CATALAN">
      <summary>
            Member value is 36.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_CHINESE">
      <summary>
            Member value is 37.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_CHINESE_HONGKONG">
      <summary>
            Member value is 38.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_CHINESE_PRC">
      <summary>
            Member value is 39.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_CHINESE_SINGAPORE">
      <summary>
            Member value is 40.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_CHINESE_SIMPLIFIED">
      <summary>
            Member value is 41.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_CHINESE_TAIWAN">
      <summary>
            Member value is 42.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_CHINESE_TRADITIONAL">
      <summary>
            Member value is 43.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_CROATIA">
      <summary>
            Member value is 44.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_CZECH">
      <summary>
            Member value is 45.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_DANISH">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_DUTCH">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_DUTCH_BELGIAN">
      <summary>
            Member value is 46.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ENGLISH">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ENGLISH_AUSTRALIAN">
      <summary>
            Member value is 47.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ENGLISH_CANADIAN">
      <summary>
            Member value is 48.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ENGLISH_IRELAND">
      <summary>
            Member value is 49.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ENGLISH_NEWZEALAND">
      <summary>
            Member value is 50.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ENGLISH_SOUTHAFRICA">
      <summary>
            Member value is 51.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ENGLISH_UK">
      <summary>
            Member value is 52.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ENGLISH_USA">
      <summary>
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ESTONIAN">
      <summary>
            Member value is 53.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_FAEROESE">
      <summary>
            Member value is 54.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_FARSI">
      <summary>
            Member value is 55.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_FINNISH">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_FRENCH">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_FRENCH_BELGIAN">
      <summary>
            Member value is 56.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_FRENCH_CANADIAN">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_FRENCH_LUXEMBOURG">
      <summary>
            Member value is 57.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_FRENCH_SWISS">
      <summary>
            Member value is 58.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_GERMAN">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_GERMAN_AUSTRIAN">
      <summary>
            Member value is 59.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_GERMAN_LUXEMBOURG">
      <summary>
            Member value is 60.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_GERMAN_LIECHTENSTEIN">
      <summary>
            Member value is 61.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_GERMAN_SWISS">
      <summary>
            Member value is 62.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_GREEK">
      <summary>
            Member value is 63.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_HEBREW">
      <summary>
            Member value is 64.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_HUNGARIAN">
      <summary>
            Member value is 65.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ICELANDIC">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_INDONESIAN">
      <summary>
            Member value is 66.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ITALIAN">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ITALIAN_SWISS">
      <summary>
            Member value is 67.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_JAPANESE">
      <summary>
            Member value is 68.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_KOREAN">
      <summary>
            Member value is 69.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_KOREAN_JOHAB">
      <summary>
            Member value is 70.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_LATVIAN">
      <summary>
            Member value is 71.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_LITHUANIAN">
      <summary>
            Member value is 72.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_NORWEGIAN">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_NORWEGIAN_BOKMAL">
      <summary>
            Member value is 73.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_NORWEGIAN_NYNORSK">
      <summary>
            Member value is 74.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_POLISH">
      <summary>
            Member value is 75.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_PORTUGUESE">
      <summary>
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_PORTUGUESE_BRAZIL">
      <summary>
            Member value is 76.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ROMANIAN">
      <summary>
            Member value is 77.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_RUSSIAN">
      <summary>
            Member value is 78.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_SERBIAN_LATIN">
      <summary>
            Member value is 79.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_SLOVAK">
      <summary>
            Member value is 80.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_SLOVENIAN">
      <summary>
            Member value is 81.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_SPANISH">
      <summary>
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_SPANISH_MEXICAN">
      <summary>
            Member value is 82.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_SPANISH_MODERN">
      <summary>
            Member value is 83.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_SWEDISH">
      <summary>
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_THAI">
      <summary>
            Member value is 84.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_TURKISH">
      <summary>
            Member value is 85.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_UKRANIAN">
      <summary>
            Member value is 86.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ASSAMESE">
      <summary>
            Member value is 87.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_BENGALI">
      <summary>
            Member value is 88.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_BIHARI">
      <summary>
            Member value is 89.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_BODO">
      <summary>
            Member value is 90.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_DOGRI">
      <summary>
            Member value is 91.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_GUJARATI">
      <summary>
            Member value is 92.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_HARYANVI">
      <summary>
            Member value is 93.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_HINDI">
      <summary>
            Member value is 94.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_KANNADA">
      <summary>
            Member value is 95.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_KASHMIRI">
      <summary>
            Member value is 96.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_MALAYALAM">
      <summary>
            Member value is 97.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_MARATHI">
      <summary>
            Member value is 98.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_MARWARI">
      <summary>
            Member value is 99.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_MEGHALAYAN">
      <summary>
            Member value is 100.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_MIZO">
      <summary>
            Member value is 101.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_NAGA">
      <summary>
            Member value is 102.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_ORISSI">
      <summary>
            Member value is 103.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_PUNJABI">
      <summary>
            Member value is 104.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_PUSHTU">
      <summary>
            Member value is 105.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_SERBIAN_CYRILLIC">
      <summary>
            Member value is 106.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_SIKKIMI">
      <summary>
            Member value is 107.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_SWEDISH_FINLAND">
      <summary>
            Member value is 108.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_TAMIL">
      <summary>
            Member value is 109.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_TELUGU">
      <summary>
            Member value is 110.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_TRIPURI">
      <summary>
            Member value is 111.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_URDU">
      <summary>
            Member value is 112.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainLanguage.TWLG_VIETNAMESE">
      <summary>
            Member value is 113.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_AFGHANISTAN">
      <summary>
            Member value is 1001.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ALGERIA">
      <summary>
            Member value is 213.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_AMERICANSAMOA">
      <summary>
            Member value is 684.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ANDORRA">
      <summary>
            Member value is 33.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ANGOLA">
      <summary>
            Member value is 1002.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ANGUILLA">
      <summary>
            Member value is 8090.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ANTIGUA">
      <summary>
            Member value is 8091.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ARGENTINA">
      <summary>
            Member value is 54.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ARUBA">
      <summary>
            Member value is 297.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ASCENSIONI">
      <summary>
            Member value is 247.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_AUSTRALIA">
      <summary>
            Member value is 61.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_AUSTRIA">
      <summary>
            Member value is 43.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BAHAMAS">
      <summary>
            Member value is 8092.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BAHRAIN">
      <summary>
            Member value is 973.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BANGLADESH">
      <summary>
            Member value is 880.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BARBADOS">
      <summary>
            Member value is 8093.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BELGIUM">
      <summary>
            Member value is 32.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BELIZE">
      <summary>
            Member value is 501.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BENIN">
      <summary>
            Member value is 229.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BERMUDA">
      <summary>
            Member value is 8094.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BHUTAN">
      <summary>
            Member value is 1003.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BOLIVIA">
      <summary>
            Member value is 591.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BOTSWANA">
      <summary>
            Member value is 267.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BRITAIN">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BRITVIRGINIS">
      <summary>
            Member value is 8095.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BRAZIL">
      <summary>
            Member value is 55.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BRUNEI">
      <summary>
            Member value is 673.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BULGARIA">
      <summary>
            Member value is 359.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BURKINAFASO">
      <summary>
            Member value is 1004.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BURMA">
      <summary>
            Member value is 1005.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BURUNDI">
      <summary>
            Member value is 1006.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_CAMAROON">
      <summary>
            Member value is 237.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_CANADA">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_CAPEVERDEIS">
      <summary>
            Member value is 238.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_CAYMANIS">
      <summary>
            Member value is 8096.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_CENTRALAFREP">
      <summary>
            Member value is 1007.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_CHAD">
      <summary>
            Member value is 1008.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_CHILE">
      <summary>
            Member value is 56.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_CHINA">
      <summary>
            Member value is 86.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_CHRISTMASIS">
      <summary>
            Member value is 1009.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_COCOSIS">
      <summary>
            Member value is 1009.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_COLOMBIA">
      <summary>
            Member value is 57.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_COMOROS">
      <summary>
            Member value is 1010.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_CONGO">
      <summary>
            Member value is 1011.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_COOKIS">
      <summary>
            Member value is 1012.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_COSTARICA">
      <summary>
            Member value is 506.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_CUBA">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_CYPRUS">
      <summary>
            Member value is 357.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_CZECHOSLOVAKIA">
      <summary>
            Member value is 42.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_DENMARK">
      <summary>
            Member value is 45.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_DJIBOUTI">
      <summary>
            Member value is 1013.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_DOMINICA">
      <summary>
            Member value is 8097.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_DOMINCANREP">
      <summary>
            Member value is 8098.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_EASTERIS">
      <summary>
            Member value is 1014.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ECUADOR">
      <summary>
            Member value is 593.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_EGYPT">
      <summary>
            Member value is 20.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ELSALVADOR">
      <summary>
            Member value is 503.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_EQGUINEA">
      <summary>
            Member value is 1015.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ETHIOPIA">
      <summary>
            Member value is 251.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_FALKLANDIS">
      <summary>
            Member value is 1016.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_FAEROEIS">
      <summary>
            Member value is 298.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_FIJIISLANDS">
      <summary>
            Member value is 679.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_FINLAND">
      <summary>
            Member value is 358.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_FRANCE">
      <summary>
            Member value is 33.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_FRANTILLES">
      <summary>
            Member value is 596.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_FRGUIANA">
      <summary>
            Member value is 594.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_FRPOLYNEISA">
      <summary>
            Member value is 689.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_FUTANAIS">
      <summary>
            Member value is 1043.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_GABON">
      <summary>
            Member value is 241.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_GAMBIA">
      <summary>
            Member value is 220.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_GERMANY">
      <summary>
            Member value is 49.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_GHANA">
      <summary>
            Member value is 233.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_GIBRALTER">
      <summary>
            Member value is 350.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_GREECE">
      <summary>
            Member value is 30.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_GREENLAND">
      <summary>
            Member value is 299.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_GRENADA">
      <summary>
            Member value is 8099.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_GRENEDINES">
      <summary>
            Member value is 8015.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_GUADELOUPE">
      <summary>
            Member value is 590.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_GUAM">
      <summary>
            Member value is 671.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_GUANTANAMOBAY">
      <summary>
            Member value is 5399.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_GUATEMALA">
      <summary>
            Member value is 502.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_GUINEA">
      <summary>
            Member value is 224.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_GUINEABISSAU">
      <summary>
            Member value is 1017.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_GUYANA">
      <summary>
            Member value is 592.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_HAITI">
      <summary>
            Member value is 509.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_HONDURAS">
      <summary>
            Member value is 504.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_HONGKONG">
      <summary>
            Member value is 852.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_HUNGARY">
      <summary>
            Member value is 36.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ICELAND">
      <summary>
            Member value is 354.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_INDIA">
      <summary>
            Member value is 91.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_INDONESIA">
      <summary>
            Member value is 62.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_IRAN">
      <summary>
            Member value is 98.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_IRAQ">
      <summary>
            Member value is 964.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_IRELAND">
      <summary>
            Member value is 353.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ISRAEL">
      <summary>
            Member value is 972.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ITALY">
      <summary>
            Member value is 39.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_IVORYCOAST">
      <summary>
            Member value is 225.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_JAMAICA">
      <summary>
            Member value is 8010.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_JAPAN">
      <summary>
            Member value is 81.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_JORDAN">
      <summary>
            Member value is 962.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_KENYA">
      <summary>
            Member value is 254.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_KIRIBATI">
      <summary>
            Member value is 1018.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_KOREA">
      <summary>
            Member value is 82.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_KUWAIT">
      <summary>
            Member value is 965.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_LAOS">
      <summary>
            Member value is 1019.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_LEBANON">
      <summary>
            Member value is 1020.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_LIBERIA">
      <summary>
            Member value is 231.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_LIBYA">
      <summary>
            Member value is 218.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_LIECHTENSTEIN">
      <summary>
            Member value is 41.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_LUXENBOURG">
      <summary>
            Member value is 352.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MACAO">
      <summary>
            Member value is 853.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MADAGASCAR">
      <summary>
            Member value is 1021.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MALAWI">
      <summary>
            Member value is 265.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MALAYSIA">
      <summary>
            Member value is 60.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MALDIVES">
      <summary>
            Member value is 960.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MALI">
      <summary>
            Member value is 1022.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MALTA">
      <summary>
            Member value is 356.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MARSHALLIS">
      <summary>
            Member value is 692.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MAURITANIA">
      <summary>
            Member value is 1023.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MAURITIUS">
      <summary>
            Member value is 230.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MEXICO">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MICRONESIA">
      <summary>
            Member value is 691.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MIQUELON">
      <summary>
            Member value is 508.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MONACO">
      <summary>
            Member value is 33.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MONGOLIA">
      <summary>
            Member value is 1024.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MONTSERRAT">
      <summary>
            Member value is 8011.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MOROCCO">
      <summary>
            Member value is 212.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MOZAMBIQUE">
      <summary>
            Member value is 1025.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_NAMIBIA">
      <summary>
            Member value is 264.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_NAURU">
      <summary>
            Member value is 1026.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_NEPAL">
      <summary>
            Member value is 977.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_NETHERLANDS">
      <summary>
            Member value is 31.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_NETHANTILLES">
      <summary>
            Member value is 599.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_NEVIS">
      <summary>
            Member value is 8012.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_NEWCALEDONIA">
      <summary>
            Member value is 687.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_NEWZEALAND">
      <summary>
            Member value is 64.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_NICARAGUA">
      <summary>
            Member value is 505.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_NIGER">
      <summary>
            Member value is 227.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_NIGERIA">
      <summary>
            Member value is 234.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_NIUE">
      <summary>
            Member value is 1027.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_NORFOLKI">
      <summary>
            Member value is 1028.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_NORWAY">
      <summary>
            Member value is 47.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_OMAN">
      <summary>
            Member value is 968.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_PAKISTAN">
      <summary>
            Member value is 92.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_PALAU">
      <summary>
            Member value is 1029.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_PANAMA">
      <summary>
            Member value is 507.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_PARAGUAY">
      <summary>
            Member value is 595.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_PERU">
      <summary>
            Member value is 51.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_PHILLIPPINES">
      <summary>
            Member value is 63.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_PITCAIRNIS">
      <summary>
            Member value is 1030.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_PNEWGUINEA">
      <summary>
            Member value is 675.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_POLAND">
      <summary>
            Member value is 48.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_PORTUGAL">
      <summary>
            Member value is 351.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_QATAR">
      <summary>
            Member value is 974.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_REUNIONI">
      <summary>
            Member value is 1031.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ROMANIA">
      <summary>
            Member value is 40.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_RWANDA">
      <summary>
            Member value is 250.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SAIPAN">
      <summary>
            Member value is 670.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SANMARINO">
      <summary>
            Member value is 39.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SAOTOME">
      <summary>
            Member value is 1033.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SAUDIARABIA">
      <summary>
            Member value is 966.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SENEGAL">
      <summary>
            Member value is 221.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SEYCHELLESIS">
      <summary>
            Member value is 1034.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SIERRALEONE">
      <summary>
            Member value is 1035.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SINGAPORE">
      <summary>
            Member value is 65.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SOLOMONIS">
      <summary>
            Member value is 1036.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SOMALI">
      <summary>
            Member value is 1037.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SOUTHAFRICA">
      <summary>
            Member value is 27.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SPAIN">
      <summary>
            Member value is 34.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SRILANKA">
      <summary>
            Member value is 94.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_STHELENA">
      <summary>
            Member value is 1032.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_STKITTS">
      <summary>
            Member value is 8013.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_STLUCIA">
      <summary>
            Member value is 8014.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_STPIERRE">
      <summary>
            Member value is 508.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_STVINCENT">
      <summary>
            Member value is 8015.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SUDAN">
      <summary>
            Member value is 1038.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SURINAME">
      <summary>
            Member value is 597.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SWAZILAND">
      <summary>
            Member value is 268.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SWEDEN">
      <summary>
            Member value is 46.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SWITZERLAND">
      <summary>
            Member value is 41.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SYRIA">
      <summary>
            Member value is 1039.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_TAIWAN">
      <summary>
            Member value is 886.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_TANZANIA">
      <summary>
            Member value is 255.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_THAILAND">
      <summary>
            Member value is 66.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_TOBAGO">
      <summary>
            Member value is 8016.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_TOGO">
      <summary>
            Member value is 228.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_TONGAIS">
      <summary>
            Member value is 676.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_TRINIDAD">
      <summary>
            Member value is 8016.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_TUNISIA">
      <summary>
            Member value is 216.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_TURKEY">
      <summary>
            Member value is 90.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_TURKSCAICOS">
      <summary>
            Member value is 8017.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_TUVALU">
      <summary>
            Member value is 1040.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_UGANDA">
      <summary>
            Member value is 256.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_USSR">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_UAEMIRATES">
      <summary>
            Member value is 971.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_UNITEDKINGDOM">
      <summary>
            Member value is 44.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_USA">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_URUGUAY">
      <summary>
            Member value is 598.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_VANUATU">
      <summary>
            Member value is 1041.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_VATICANCITY">
      <summary>
            Member value is 39.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_VENEZUELA">
      <summary>
            Member value is 58.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_WAKE">
      <summary>
            Member value is 1042.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_WALLISIS">
      <summary>
            Member value is 1043.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_WESTERNSAHARA">
      <summary>
            Member value is 1044.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_WESTERNSAMOA">
      <summary>
            Member value is 1045.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_YEMEN">
      <summary>
            Member value is 1046.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_YUGOSLAVIA">
      <summary>
            Member value is 38.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ZAIRE">
      <summary>
            Member value is 243.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ZAMBIA">
      <summary>
            Member value is 260.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ZIMBABWE">
      <summary>
            Member value is 263.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ALBANIA">
      <summary>
            Member value is 355.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ARMENIA">
      <summary>
            Member value is 374.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_AZERBAIJAN">
      <summary>
            Member value is 994.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BELARUS">
      <summary>
            Member value is 375.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_BOSNIAHERZGO">
      <summary>
            Member value is 387.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_CAMBODIA">
      <summary>
            Member value is 855.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_CROATIA">
      <summary>
            Member value is 385.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_CZECHREPUBLIC">
      <summary>
            Member value is 420.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_DIEGOGARCIA">
      <summary>
            Member value is 246.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ERITREA">
      <summary>
            Member value is 291.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_ESTONIA">
      <summary>
            Member value is 372.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_GEORGIA">
      <summary>
            Member value is 995.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_LATVIA">
      <summary>
            Member value is 371.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_LESOTHO">
      <summary>
            Member value is 266.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_LITHUANIA">
      <summary>
            Member value is 370.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MACEDONIA">
      <summary>
            Member value is 389.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MAYOTTEIS">
      <summary>
            Member value is 269.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MOLDOVA">
      <summary>
            Member value is 373.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_MYANMAR">
      <summary>
            Member value is 95.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_NORTHKOREA">
      <summary>
            Member value is 850.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_PUERTORICO">
      <summary>
            Member value is 787.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_RUSSIA">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SERBIA">
      <summary>
            Member value is 381.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SLOVAKIA">
      <summary>
            Member value is 421.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SLOVENIA">
      <summary>
            Member value is 386.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_SOUTHKOREA">
      <summary>
            Member value is 82.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_UKRAINE">
      <summary>
            Member value is 380.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_USVIRGINIS">
      <summary>
            Member value is 340.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCountry.TWCY_VIETNAM">
      <summary>
            Member value is 84.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCompression.TWCP_UNSUPPORTED">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCompression.TWCP_NONE">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCompression.TWCP_PACKBITS">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCompression.TWCP_GROUP31D">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCompression.TWCP_GROUP31DEOL">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCompression.TWCP_GROUP32D">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCompression.TWCP_GROUP4">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCompression.TWCP_JPEG">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCompression.TWCP_LZW">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCompression.TWCP_JBIG">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCompression.TWCP_PNG">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCompression.TWCP_RLE4">
      <summary>
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCompression.TWCP_RLE8">
      <summary>
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainCompression.TWCP_BITFIELDS">
      <summary>
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBitDepthReduction.TWBR_UNSUPPORTED">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBitDepthReduction.TWBR_THRESHOLD">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBitDepthReduction.TWBR_HALFTONES">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBitDepthReduction.TWBR_CUSTHALFTONE">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainBitDepthReduction.TWBR_DIFFUSION">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPrinterMode.TWPR_UNSUPPORTED">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPrinterMode.TWPR_IMPRINTERTOPBEFORE">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPrinterMode.TWPR_IMPRINTERTOPAFTER">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPrinterMode.TWPR_IMPRINTERBOTTOMBEFORE">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPrinterMode.TWPR_IMPRINTERBOTTOMAFTER">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPrinterMode.TWPR_ENDORSERTOPBEFORE">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPrinterMode.TWPR_ENDORSERTOPAFTER">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPrinterMode.TWPR_ENDORSERBOTTOMBEFORE">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainPrinterMode.TWPR_ENDORSERBOTTOMAFTER">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainOrientation.TWOR_ROT0">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainOrientation.TWOR_ROT90">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainOrientation.TWOR_ROT180">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainOrientation.TWOR_ROT270">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainOrientation.TWOR_PORTRAIT">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainOrientation.TWOR_LANDSCAPE">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainOrientation.TWOR_AUTO">
      <summary>
            Orients the image according to criteria determined by the source.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainOrientation.TWOR_AUTOTEXT">
      <summary>
            Orients the document using text only algorithms.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainOrientation.TWOR_AUTOPICTURE">
      <summary>
            Orients the document using image only algorithms.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWFF_UNSUPPORTED">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWFF_TIFF">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWFF_PICT">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWFF_BMP">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWFF_XBM">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWFF_JFIF">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWFF_FPX">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWFF_TIFFMULTI">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWFF_PNG">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWFF_SPIFF">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWFF_EXIF">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWPT_PDF">
      <summary>
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWPT_JPEG2000">
      <summary>
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWFF_JPN">
      <summary>
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWFF_JPX">
      <summary>
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWFF_DEJAVU">
      <summary>
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWFF_PDFA">
      <summary>
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.TwainImageFileFormats.TWFF_PDFA2">
      <summary>
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.TagType.TagTypeByte">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TagType.TagTypeASCII">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TagType.TagTypeShort">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.TagType.TagTypeLong">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.TagType.TagTypeRational">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.TagType.TagTypeSByte">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.TagType.TagTypeUndefined">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.TagType.TagTypeSShort">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.TagType.TagTypeSLong">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.TagType.TagTypeSRational">
      <summary>
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.TagType.TagTypeFloat">
      <summary>
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.TagType.TagTypeDouble">
      <summary>
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.TagType.TagTypeLong64">
      <summary>
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.TagType.TagTypeSLong64">
      <summary>
            Member value is 17.
            </summary>
    </member>
    <member name="F:GdPicture12.TagType.TagTypeIFD">
      <summary>
            Member value is 18.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagUnknown">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagRecordVersion">
      <summary>
            Member value is 512.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagCaption">
      <summary>
            Member value is 632.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagWriter">
      <summary>
            Member value is 634.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagHeadline">
      <summary>
            Member value is 617.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagSpecialInstructions">
      <summary>
            Member value is 552.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagByLine">
      <summary>
            Member value is 592.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagByLineTitle">
      <summary>
            Member value is 597.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagCredit">
      <summary>
            Member value is 622.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagSource">
      <summary>
            Member value is 627.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagObjectName">
      <summary>
            Member value is 517.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagDateCreated">
      <summary>
            Member value is 567.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagCity">
      <summary>
            Member value is 602.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagProvinceOfState">
      <summary>
            Member value is 607.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagCountryOfPrimaryLocation">
      <summary>
            Member value is 613.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagOriginalTransmissionReference">
      <summary>
            Member value is 615.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagCategory">
      <summary>
            Member value is 527.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagSupplementalCategories">
      <summary>
            Member value is 532.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagUrgency">
      <summary>
            Member value is 522.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagKeywords">
      <summary>
            Member value is 537.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagCopyrightNotice">
      <summary>
            Member value is 628.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagReleaseDate">
      <summary>
            Member value is 542.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagReleaseTime">
      <summary>
            Member value is 547.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagTimeCreated">
      <summary>
            Member value is 572.
            </summary>
    </member>
    <member name="F:GdPicture12.IPTCTags.IPTCTagOriginatingProgram">
      <summary>
            Member value is 577.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagUnknown">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsVer">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsLatitudeRef">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsLatitude">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsLongitudeRef">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsLongitude">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsAltitudeRef">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsAltitude">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsGpsTime">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsGpsSatellites">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsGpsStatus">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsGpsMeasureMode">
      <summary>
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsGpsDop">
      <summary>
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsSpeedRef">
      <summary>
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsSpeed">
      <summary>
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsTrackRef">
      <summary>
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsTrack">
      <summary>
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsImgDirRef">
      <summary>
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsImgDir">
      <summary>
            Member value is 17.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsMapDatum">
      <summary>
            Member value is 18.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsDestLatRef">
      <summary>
            Member value is 19.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsDestLat">
      <summary>
            Member value is 20.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsDestLongRef">
      <summary>
            Member value is 21.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsDestLong">
      <summary>
            Member value is 22.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsDestBearRef">
      <summary>
            Member value is 23.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsDestBear">
      <summary>
            Member value is 24.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsDestDistRef">
      <summary>
            Member value is 25.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsDestDist">
      <summary>
            Member value is 26.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsProcessingMethod">
      <summary>
            Member value is 27.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsAreaInformation">
      <summary>
            Member value is 28.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsDateStamp">
      <summary>
            Member value is 29.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsDifferential">
      <summary>
            Member value is 30.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagNewSubfileType">
      <summary>
            Member value is 254.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagSubfileType">
      <summary>
            Member value is 255.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagImageWidth">
      <summary>
            Member value is 256.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagImageHeight">
      <summary>
            Member value is 257.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagBitsPerSample">
      <summary>
            Member value is 258.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagCompression">
      <summary>
            Member value is 259.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagPhotometricInterp">
      <summary>
            Member value is 262.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagThreshHolding">
      <summary>
            Member value is 263.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagCellWidth">
      <summary>
            Member value is 264.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagCellHeight">
      <summary>
            Member value is 265.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagFillOrder">
      <summary>
            Member value is 266.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagDocumentName">
      <summary>
            Member value is 269.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagImageDescription">
      <summary>
            Member value is 270.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagEquipMake">
      <summary>
            Member value is 271.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagEquipModel">
      <summary>
            Member value is 272.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagStripOffsets">
      <summary>
            Member value is 273.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagOrientation">
      <summary>
            Member value is 274.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagSamplesPerPixel">
      <summary>
            Member value is 277.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagRowsPerStrip">
      <summary>
            Member value is 278.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagStripBytesCount">
      <summary>
            Member value is 279.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagMinSampleValue">
      <summary>
            Member value is 280.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagMaxSampleValue">
      <summary>
            Member value is 281.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagXResolution">
      <summary>
            Member value is 282.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagYResolution">
      <summary>
            Member value is 283.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagPlanarConfig">
      <summary>
            Member value is 284.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagPageName">
      <summary>
            Member value is 285.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagXPosition">
      <summary>
            Member value is 286.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagYPosition">
      <summary>
            Member value is 287.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagFreeOffsets">
      <summary>
            Member value is 288.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagFreeByteCounts">
      <summary>
            Member value is 289.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGrayResponseUnit">
      <summary>
            Member value is 290.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGrayResponseCurve">
      <summary>
            Member value is 291.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagT4Option">
      <summary>
            Member value is 292.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagT6Option">
      <summary>
            Member value is 293.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagResolutionUnit">
      <summary>
            Member value is 296.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagPageNumber">
      <summary>
            Member value is 297.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagTransferFunction">
      <summary>
            Member value is 301.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagSoftwareUsed">
      <summary>
            Member value is 305.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagDateTime">
      <summary>
            Member value is 306.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagArtist">
      <summary>
            Member value is 315.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagHostComputer">
      <summary>
            Member value is 316.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagPredictor">
      <summary>
            Member value is 317.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagWhitePoint">
      <summary>
            Member value is 318.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagPrimaryChromaticities">
      <summary>
            Member value is 319.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagColorMap">
      <summary>
            Member value is 320.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagHalftoneHints">
      <summary>
            Member value is 321.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagTileWidth">
      <summary>
            Member value is 322.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagTileLength">
      <summary>
            Member value is 323.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagTileOffset">
      <summary>
            Member value is 324.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagTileByteCounts">
      <summary>
            Member value is 325.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagBadFaxLines">
      <summary>
            Member value is 326.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagCleanFaxData">
      <summary>
            Member value is 327.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagConsecutiveBadFaxLines">
      <summary>
            Member value is 328.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagSubIFDs">
      <summary>
            Member value is 330.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagInkSet">
      <summary>
            Member value is 332.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagInkNames">
      <summary>
            Member value is 333.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagNumberOfInks">
      <summary>
            Member value is 334.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagDotRange">
      <summary>
            Member value is 336.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagTargetPrinter">
      <summary>
            Member value is 337.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExtraSamples">
      <summary>
            Member value is 338.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagSampleFormat">
      <summary>
            Member value is 339.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagSMinSampleValue">
      <summary>
            Member value is 340.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagSMaxSampleValue">
      <summary>
            Member value is 341.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagTransferRange">
      <summary>
            Member value is 342.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagClipPath">
      <summary>
            Member value is 343.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagXClipPathUnits">
      <summary>
            Member value is 344.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagYClipPathUnits">
      <summary>
            Member value is 345.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagIndex">
      <summary>
            Member value is 346.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagJPEGTables">
      <summary>
            Member value is 347.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagOPIProxy">
      <summary>
            Member value is 351.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGlobalParametersIFD">
      <summary>
            Member value is 400.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagProfileType">
      <summary>
            Member value is 401.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagFaxProfile">
      <summary>
            Member value is 402.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagCodingMethods">
      <summary>
            Member value is 403.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagVersionYear">
      <summary>
            Member value is 404.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagModeNumber">
      <summary>
            Member value is 405.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagDecode">
      <summary>
            Member value is 433.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagDefaultImageColor">
      <summary>
            Member value is 434.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagJPEGProc">
      <summary>
            Member value is 512.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagJPEGInterFormat">
      <summary>
            Member value is 513.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagJPEGInterLength">
      <summary>
            Member value is 514.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagJPEGRestartInterval">
      <summary>
            Member value is 515.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagJPEGLosslessPredictors">
      <summary>
            Member value is 517.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagJPEGPointTransforms">
      <summary>
            Member value is 518.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagJPEGQTables">
      <summary>
            Member value is 519.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagJPEGDCTables">
      <summary>
            Member value is 520.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagJPEGACTables">
      <summary>
            Member value is 521.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagYCbCrCoefficients">
      <summary>
            Member value is 529.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagYCbCrSubsampling">
      <summary>
            Member value is 530.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagYCbCrPositioning">
      <summary>
            Member value is 531.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagREFBlackWhite">
      <summary>
            Member value is 532.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagStripRowCounts">
      <summary>
            Member value is 559.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagXMLPacket">
      <summary>
            Member value is 700.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagRating">
      <summary>
            Member value is 18246.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagRatingPercent">
      <summary>
            Member value is 18249.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagFrameDelay">
      <summary>
            Member value is 20736.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagLoopCount">
      <summary>
            Member value is 20737.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagImageID">
      <summary>
            Member value is 32781.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagWangAnnotations">
      <summary>
            Member value is 32932.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifImageCFARepeatPatternDim">
      <summary>
            Member value is 33421.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifImageCFAPattern">
      <summary>
            Member value is 33422.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifBatteryLevel">
      <summary>
            Member value is 33423.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagCopyright">
      <summary>
            Member value is 33432.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifExposureTime">
      <summary>
            Member value is 33434.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifFNumber">
      <summary>
            Member value is 33437.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGeoPixelScale">
      <summary>
            Member value is 33550.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagIntergraphTransformationMatrix">
      <summary>
            Member value is 33920.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagIPTC">
      <summary>
            Member value is 33723.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGeoTiePoints">
      <summary>
            Member value is 33922.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagJPLCartoIFDoffset">
      <summary>
            Member value is 34263.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGeoTransformationMatrix">
      <summary>
            Member value is 34264.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagPhotoshop">
      <summary>
            Member value is 34377.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifIFD">
      <summary>
            Member value is 34665.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagImageLayer">
      <summary>
            Member value is 34732.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGeoKeyDirectory">
      <summary>
            Member value is 34735.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGeoDoubleParams">
      <summary>
            Member value is 34736.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGeoASCIIParams">
      <summary>
            Member value is 34737.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifExposureProg">
      <summary>
            Member value is 34850.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifSpectralSense">
      <summary>
            Member value is 34852.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGpsIFD">
      <summary>
            Member value is 34853.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifISOSpeed">
      <summary>
            Member value is 34855.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifOECF">
      <summary>
            Member value is 34856.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifInterlace">
      <summary>
            Member value is 34857.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifTimeZoneOffset">
      <summary>
            Member value is 34858.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifSelfTimerMode">
      <summary>
            Member value is 34859.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifSensitivityType">
      <summary>
            Member value is 34864.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifStandardOutputSensitivity">
      <summary>
            Member value is 34865.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifRecommendedExposureIndex">
      <summary>
            Member value is 34866.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifPhotoISOSpeed">
      <summary>
            Member value is 34867.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifPhotoISOSpeedLatitudeyyy">
      <summary>
            Member value is 34868.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifPhotoISOSpeedLatitudezzz">
      <summary>
            Member value is 34869.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifVer">
      <summary>
            Member value is 36864.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifDTOrig">
      <summary>
            Member value is 36867.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifDTDigitized">
      <summary>
            Member value is 36868.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifCompConfig">
      <summary>
            Member value is 37121.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifCompBPP">
      <summary>
            Member value is 37122.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifShutterSpeed">
      <summary>
            Member value is 37377.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifAperture">
      <summary>
            Member value is 37378.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifBrightness">
      <summary>
            Member value is 37379.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifExposureBias">
      <summary>
            Member value is 37380.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifMaxAperture">
      <summary>
            Member value is 37381.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifSubjectDist">
      <summary>
            Member value is 37382.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifMeteringMode">
      <summary>
            Member value is 37383.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifLightSource">
      <summary>
            Member value is 37384.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifFlash">
      <summary>
            Member value is 37385.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifFocalLength">
      <summary>
            Member value is 37386.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifImageFlashEnergy">
      <summary>
            Member value is 37387.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifSpatialFrequencyResponse">
      <summary>
            Member value is 37388.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifNoise">
      <summary>
            Member value is 37389.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifFocalPlaneXResolution">
      <summary>
            Member value is 37390.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifFocalPlaneYResolution">
      <summary>
            Member value is 37391.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifFocalPlaneResolutionUnit">
      <summary>
            Member value is 37392.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifImageNumber">
      <summary>
            Member value is 37393.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifSecurityClassification">
      <summary>
            Member value is 37394.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifImageHistory">
      <summary>
            Member value is 37395.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifSubjectLocation">
      <summary>
            Member value is 37396.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifImageExposureIndex">
      <summary>
            Member value is 37397.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifTIFFEPStandardID">
      <summary>
            Member value is 37398.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifImageSensingMethod">
      <summary>
            Member value is 37399.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifMakerNote">
      <summary>
            Member value is 37500.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifUserComment">
      <summary>
            Member value is 37510.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifDTSubsec">
      <summary>
            Member value is 37520.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifDTOrigSS">
      <summary>
            Member value is 37521.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifDTDigSS">
      <summary>
            Member value is 37522.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagImageSourceData">
      <summary>
            Member value is 37725.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagXPTitle">
      <summary>
            Member value is 40091.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagXPComment">
      <summary>
            Member value is 40092.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagXPAuthor">
      <summary>
            Member value is 40093.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagXPKeywords">
      <summary>
            Member value is 40094.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagXPSubject">
      <summary>
            Member value is 40095.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifFPXVer">
      <summary>
            Member value is 40960.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifColorSpace">
      <summary>
            Member value is 40961.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifPixXDim">
      <summary>
            Member value is 40962.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifPixYDim">
      <summary>
            Member value is 40963.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifRelatedWav">
      <summary>
            Member value is 40964.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifInterop">
      <summary>
            Member value is 40965.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifFlashEnergy">
      <summary>
            Member value is 41483.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifSpatialFR">
      <summary>
            Member value is 41484.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifFocalXRes">
      <summary>
            Member value is 41486.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifFocalYRes">
      <summary>
            Member value is 41487.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifFocalResUnit">
      <summary>
            Member value is 41488.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifSubjectLoc">
      <summary>
            Member value is 41492.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifExposureIndex">
      <summary>
            Member value is 41493.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifSensingMethod">
      <summary>
            Member value is 41495.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifFileSource">
      <summary>
            Member value is 41728.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifSceneType">
      <summary>
            Member value is 41729.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifCfaPattern">
      <summary>
            Member value is 41730.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifCustomRendered">
      <summary>
            Member value is 41985.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifExposureMode">
      <summary>
            Member value is 41986.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifWhiteBalance">
      <summary>
            Member value is 41987.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifDigitalZoomRatio">
      <summary>
            Member value is 41988.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifFocalLengthIn35mmFilm">
      <summary>
            Member value is 41989.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifSceneCaptureType">
      <summary>
            Member value is 41990.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifGainControl">
      <summary>
            Member value is 41991.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifContrast">
      <summary>
            Member value is 41992.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifSaturation">
      <summary>
            Member value is 41993.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifSharpness">
      <summary>
            Member value is 41994.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifDeviceSettingDescription">
      <summary>
            Member value is 41995.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifSubjectDistanceRange">
      <summary>
            Member value is 41996.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifImageUniqueID">
      <summary>
            Member value is 42016.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifCameraOwnerName">
      <summary>
            Member value is 42032.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifBodySerialNumber">
      <summary>
            Member value is 42033.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifLensSpecification">
      <summary>
            Member value is 42034.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifLensMake">
      <summary>
            Member value is 42035.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifLensModel">
      <summary>
            Member value is 42036.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifLensSerialNumber">
      <summary>
            Member value is 42037.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGDALMetaData">
      <summary>
            Member value is 42112.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagGamma">
      <summary>
            Member value is 42240.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagFilmProductCode">
      <summary>
            Member value is 50000.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagImageSourceEK">
      <summary>
            Member value is 50001.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagCaptureConditionsPAR">
      <summary>
            Member value is 50002.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagCameraOwner">
      <summary>
            Member value is 50003.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagSerialNumber">
      <summary>
            Member value is 50004.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagUserSelectGroupTitle">
      <summary>
            Member value is 50005.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagDealerIDNumber">
      <summary>
            Member value is 50006.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.CaptureDeviceFID">
      <summary>
            Member value is 50007.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagPrintIMData">
      <summary>
            Member value is 50341.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifDNGVersion">
      <summary>
            Member value is 50706.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifDNGBackwardVersion">
      <summary>
            Member value is 50707.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifUniqueCameraModel">
      <summary>
            Member value is 50708.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifLocalizedCameraModel">
      <summary>
            Member value is 50709.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifCFAPlaneColor">
      <summary>
            Member value is 50710.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifCFALayout">
      <summary>
            Member value is 50711.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifLinearizationTable">
      <summary>
            Member value is 50712.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifBlackLevelRepeatDim">
      <summary>
            Member value is 50713.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifBlackLevel">
      <summary>
            Member value is 50714.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifBlackLevelDeltaH">
      <summary>
            Member value is 50715.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifBlackLevelDeltaV">
      <summary>
            Member value is 50716.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifWhiteLevel">
      <summary>
            Member value is 50717.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifDefaultScale">
      <summary>
            Member value is 50718.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifDefaultCropOrigin">
      <summary>
            Member value is 50719.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifDefaultCropSize">
      <summary>
            Member value is 50720.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifColorMatrix1">
      <summary>
            Member value is 50721.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifColorMatrix2">
      <summary>
            Member value is 50722.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifCameraCalibration1">
      <summary>
            Member value is 50723.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifCameraCalibration2">
      <summary>
            Member value is 50724.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifReductionMatrix1">
      <summary>
            Member value is 50725.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifReductionMatrix2">
      <summary>
            Member value is 50726.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifAnalogBalance">
      <summary>
            Member value is 50727.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifAsShotNeutral">
      <summary>
            Member value is 50728.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifAsShotWhiteXY">
      <summary>
            Member value is 50729.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifBaselineExposure">
      <summary>
            Member value is 50730.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifBaselineNoise">
      <summary>
            Member value is 50731.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifBaselineSharpness">
      <summary>
            Member value is 50732.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifBayerGreenSplit">
      <summary>
            Member value is 50733.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifLinearResponseLimit">
      <summary>
            Member value is 50734.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifCameraSerialNumber">
      <summary>
            Member value is 50735.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifLensInfo">
      <summary>
            Member value is 50736.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifChromaBlurRadius">
      <summary>
            Member value is 50737.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifAntiAliasStrength">
      <summary>
            Member value is 50738.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifShadowScale">
      <summary>
            Member value is 50739.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifDNGPrivateData">
      <summary>
            Member value is 50740.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifMakerNoteSafety">
      <summary>
            Member value is 50741.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifCalibrationIlluminant1">
      <summary>
            Member value is 50778.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifCalibrationIlluminant2">
      <summary>
            Member value is 50779.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifBestQualityScale">
      <summary>
            Member value is 50780.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifRawDataUniqueID">
      <summary>
            Member value is 50781.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifOriginalRawFileName">
      <summary>
            Member value is 50827.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifOriginalRawFileData">
      <summary>
            Member value is 50828.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifActiveArea">
      <summary>
            Member value is 50829.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifMaskedAreas">
      <summary>
            Member value is 50830.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifAsShotICCProfile">
      <summary>
            Member value is 50831.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifAsShotPreProfileMatrix">
      <summary>
            Member value is 50832.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifCurrentICCProfile">
      <summary>
            Member value is 50833.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifCurrentPreProfileMatrix">
      <summary>
            Member value is 50834.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifColorimetricReference">
      <summary>
            Member value is 50879.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifCameraCalibrationSignature">
      <summary>
            Member value is 50931.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifProfileCalibrationSignature">
      <summary>
            Member value is 50932.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifAsShotProfileName">
      <summary>
            Member value is 50934.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifNoiseReductionApplied">
      <summary>
            Member value is 50935.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifProfileName">
      <summary>
            Member value is 50936.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifProfileHueSatMapDims">
      <summary>
            Member value is 50937.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifProfileHueSatMapData1">
      <summary>
            Member value is 50938.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifProfileHueSatMapData2">
      <summary>
            Member value is 50939.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifProfileToneCurve">
      <summary>
            Member value is 50940.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifProfileEmbedPolicy">
      <summary>
            Member value is 50941.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifProfileCopyright">
      <summary>
            Member value is 50942.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifForwardMatrix1">
      <summary>
            Member value is 50964.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifForwardMatrix2">
      <summary>
            Member value is 50965.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifPreviewApplicationName">
      <summary>
            Member value is 50966.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifPreviewApplicationVersion">
      <summary>
            Member value is 50967.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifPreviewSettingsName">
      <summary>
            Member value is 50968.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifPreviewSettingsDigest">
      <summary>
            Member value is 50969.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifPreviewColorSpace">
      <summary>
            Member value is 50970.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifPreviewDateTime">
      <summary>
            Member value is 50971.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifRawImageDigest">
      <summary>
            Member value is 50972.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifOriginalRawFileDigest">
      <summary>
            Member value is 50973.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifSubTileBlockSize">
      <summary>
            Member value is 50974.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifRowInterleaveFactor">
      <summary>
            Member value is 50975.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifProfileLookTableDims">
      <summary>
            Member value is 50981.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifProfileLookTableData">
      <summary>
            Member value is 50982.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifOpcodeList1">
      <summary>
            Member value is 51008.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifOpcodeList2">
      <summary>
            Member value is 51009.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifOpcodeList3">
      <summary>
            Member value is 51022.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagExifNoiseProfile">
      <summary>
            Member value is 51041.
            </summary>
    </member>
    <member name="F:GdPicture12.Tags.TagJPEGTablesMode">
      <summary>
            Member value is 65539.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintQuality.PrintQualityCustom">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintQuality.PrintQualityDraft">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintQuality.PrintQualityLowResolution">
      <summary>
            Member value is -2.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintQuality.PrintQualityMediumResolution">
      <summary>
            Member value is -3.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintQuality.PrintQualityHighResolution">
      <summary>
            Member value is -4.
            </summary>
    </member>
    <member name="F:GdPicture12.PaletteType.PaletteTypeUndefined">
      <summary>
            The palette type is undefined.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PaletteType.PaletteTypeHasAlpha">
      <summary>
            Indicates that the palette entries support alpha channel .
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PaletteType.PaletteTypeGrayScale">
      <summary>
            Indicates that the palette is a grayscale palette.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PaletteType.PaletteTypeGrayScaleAlpha">
      <summary>
            Indicates that the palette is a grayscale palette with alpha channel support for his entries.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PaletteType.PaletteTypeHalfTone">
      <summary>
            Indicates that the palette is an half tone palette.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PaletteType.PaletteTypeHalfToneAlpha">
      <summary>
            Indicates that the palette is an half tone palette with alpha channel support for his entries.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.ImageColorSpace.ImageColorSpaceUnknown">
      <summary>
            Specifies no format information.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.ImageColorSpace.ImageColorSpaceRGB">
      <summary>
            Specifies that the image is stored using an RGB color space.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.ImageColorSpace.ImageColorSpaceCMYK">
      <summary>
            Specifies that the image is stored using a CMYK color space.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.ImageColorSpace.ImageColorSpaceGRAY">
      <summary>
            Specifies that the image is a grayscale image.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.Operators.OperatorAnd">
      <summary>
            Pixel = Pixel And Source.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.Operators.OperatorOr">
      <summary>
            Pixel = Pixel Or Source.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.Operators.OperatorXor">
      <summary>
            Pixel = Pixel Xor Source.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.Operators.OperatorMin">
      <summary>
            Pixel = Min(Pixel, Source).
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.Operators.OperatorMax">
      <summary>
            Pixel = Max(Pixel, Source).
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.Operators.OperatorAbs">
      <summary>
            Pixel = Abs(Pixel, Source).
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.Operators.OperatorMultiply">
      <summary>
            Pixel = (Pixel * Source) / 255.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.Operators.OperatorDivide">
      <summary>
            Pixel = Pixel / Source.
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.Operators.OperatorPlus">
      <summary>
            Pixel = Pixel + Source.
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.Operators.OperatorLess">
      <summary>
            Pixel = Pixel - Source.
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.ThumbnailAlignment.ThumbnailAlignmentHorizontal">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.ThumbnailAlignment.ThumbnailAlignmentVertical">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.TextAlignment.TextAlignmentNear">
      <summary>
            Specifies the text be aligned near the layout. In a left-to-right layout, the near position is left. In a right-to-left layout, the near position is right.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.TextAlignment.TextAlignmentCenter">
      <summary>
            Specifies that text is aligned in the center of the layout rectangle.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.TextAlignment.TextAlignmentFar">
      <summary>
            Specifies that text is aligned far from the origin position of the layout rectangle. In a left-to-right layout, the far position is right. In a right-to-left layout, the far position is left.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintAlignment.PrintAlignmentMiddleLeft">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintAlignment.PrintAlignmentMiddleRight">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintAlignment.PrintAlignmentMiddleCenter">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintAlignment.PrintAlignmentDefault">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintAlignment.PrintAlignmentTopLeft">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintAlignment.PrintAlignmentTopRight">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintAlignment.PrintAlignmentTopCenter">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintAlignment.PrintAlignmentBottomLeft">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintAlignment.PrintAlignmentBottomRight">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintAlignment.PrintAlignmentBottomCenter">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.BitonalReduction.NearestColor">
      <summary>
            Each pixel value is compared against a fixed threshold. This may be the simplest dithering algorithm there is, but it results in immense loss of detail and contouring.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.BitonalReduction.OrderedDither">
      <summary>
            Produces a cross-hatch pattern. This is a form of dispersed dithering. Because the dots don't cluster, the result looks much less grainy.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.BitonalReduction.Burke">
      <summary>
            A simplified form of Stucki dithering that is faster, but less clean than Stucki dithering.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.BitonalReduction.Stucki">
      <summary>
            Based on Floyd Steinberg, but is slightly faster. Its output tends to be clean and sharp.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.BitonalReduction.FloydSteinberg">
      <summary>
            Only diffuses the error to neighbouring pixels. This results in very fine-grained dithering.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentType.DocumentTypeUnknown">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentType.DocumentTypeBitmap">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentType.DocumentTypeMetaFile">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentType.DocumentTypePDF">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentType.DocumentTypeSVG">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentType.DocumentTypeTXT">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentType.DocumentTypeOpenXMLWord">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.MouseButton.MouseButtonNone">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.MouseButton.MouseButtonLeft">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.MouseButton.MouseButtonRight">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.MouseButton.MouseButtonMiddle">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.MouseButton.MouseButtonXButton1">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.MouseButton.MouseButtonXButton2">
      <summary>
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerZoomMode.ZoomMode100">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerZoomMode.ZoomModeFitToViewer">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerZoomMode.ZoomModeWidthViewer">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerZoomMode.ZoomModeCustom">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerZoomMode.ZoomModeHeightViewer">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerZoomMode.ZoomModeToViewer">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.PageDisplayMode.SinglePageView">
      <summary>
            Displays a single page on the screen.
             Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PageDisplayMode.MultiplePagesView">
      <summary>
            Displays all document's pages on the screen and enables continuous scrolling.
             Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerMouseMode.MouseModeDefault">
      <summary>
            Do nothing
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerMouseMode.MouseModeAreaSelection">
      <summary>
            Allows user to select an area of the displayed document
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerMouseMode.MouseModePan">
      <summary>
            Allows user to pan the displayed document
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerMouseMode.MouseModeAreaZooming">
      <summary>
            Allows user to select for zooming an area of the displayed document
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerMouseMode.MouseModeMagnifier">
      <summary>
            Displays a magnifier tool.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentPosition.DocumentPositionMiddleLeft">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentPosition.DocumentPositionMiddleRight">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentPosition.DocumentPositionMiddleCenter">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentPosition.DocumentPositionTopLeft">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentPosition.DocumentPositionTopRight">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentPosition.DocumentPositionTopCenter">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentPosition.DocumentPositionBottomLeft">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentPosition.DocumentPositionBottomRight">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentPosition.DocumentPositionBottomCenter">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentAlignment.DocumentAlignmentMiddleLeft">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentAlignment.DocumentAlignmentMiddleRight">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentAlignment.DocumentAlignmentMiddleCenter">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentAlignment.DocumentAlignmentTopLeft">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentAlignment.DocumentAlignmentTopRight">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentAlignment.DocumentAlignmentTopCenter">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentAlignment.DocumentAlignmentBottomLeft">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentAlignment.DocumentAlignmentBottomRight">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerDocumentAlignment.DocumentAlignmentBottomCenter">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.DisplayQuality.DisplayQualityLow">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.DisplayQuality.DisplayQualityBilinear">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.DisplayQuality.DisplayQualityBicubic">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.DisplayQuality.DisplayQualityBilinearHQ">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.DisplayQuality.DisplayQualityBicubicHQ">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="T:GdPicture12.PrintSizeOption">
      <summary>
            Specifies how the page size must be adjusted depending of the actual paper size.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintSizeOption.PrintSizeOptionActual">
      <summary>
            Use page size.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintSizeOption.PrintSizeOptionFit">
      <summary>
            Fit page content to paper size.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PrintSizeOption.PrintSizeOptionShrinkOversized">
      <summary>
            Fit page content to paper size when page size exceed paper size.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerMouseWheelMode.MouseWheelModeDisabled">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerMouseWheelMode.MouseWheelModeZoom">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerMouseWheelMode.MouseWheelModeVerticalScroll">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.ViewerMouseWheelMode.MouseWheelModePageChange">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PrinterColorMode.PrinterColorModeUnknown">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.PrinterColorMode.PrinterColorModeGray">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PrinterColorMode.PrinterColorModeColor">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PrinterOrientation.PrinterOrientationPortrait">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PrinterOrientation.PrinterOrientationLandscape">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatUNKNOWN">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatICO">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatBMP">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatWBMP">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatJPEG">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatGIF">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatPNG">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatTIFF">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatFAXG3">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatEXIF">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatEMF">
      <summary>
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatWMF">
      <summary>
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatJNG">
      <summary>
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatKOALA">
      <summary>
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatIFF">
      <summary>
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatMNG">
      <summary>
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatPCD">
      <summary>
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatPCX">
      <summary>
            Member value is 17.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatPBM">
      <summary>
            Member value is 18.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatPBMRAW">
      <summary>
            Member value is 19.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatPFM">
      <summary>
            Member value is 20.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatPGM">
      <summary>
            Member value is 21.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatPGMRAW">
      <summary>
            Member value is 22.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatPPM">
      <summary>
            Member value is 23.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatPPMRAW">
      <summary>
            Member value is 24.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatRAS">
      <summary>
            Member value is 25.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatTARGA">
      <summary>
            Member value is 26.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatPSD">
      <summary>
            Member value is 27.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatCUT">
      <summary>
            Member value is 28.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatXBM">
      <summary>
            Member value is 29.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatXPM">
      <summary>
            Member value is 30.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatDDS">
      <summary>
            Member value is 31.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatHDR">
      <summary>
            Member value is 32.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatSGI">
      <summary>
            Member value is 33.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatEXR">
      <summary>
            Member value is 34.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatJ2K">
      <summary>
            Member value is 35.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatJP2">
      <summary>
            Member value is 36.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatJBIG">
      <summary>
            Member value is 37.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatPICT">
      <summary>
            Member value is 38.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatRAW">
      <summary>
            Member value is 39.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatWEBP">
      <summary>
            Member value is 40.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatDICOM">
      <summary>
            Member value is 41.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatJBIG2">
      <summary>
            Member value is 100.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatMemoryBMP">
      <summary>
            Member value is 500.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatPDF">
      <summary>
            Member value is 1000.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatSVG">
      <summary>
            Member value is 1001.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatTXT">
      <summary>
            Member value is 1002.
            </summary>
    </member>
    <member name="F:GdPicture12.DocumentFormat.DocumentFormatOpenXMLWord">
      <summary>
            Member value is 1003.
            </summary>
    </member>
    <member name="F:GdPicture12.ReferencePoint.ReferencePointTopLeft">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.ReferencePoint.ReferencePointTopRight">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.ReferencePoint.ReferencePointBottomLeft">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.ReferencePoint.ReferencePointBottomRight">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.ForegroundMixMode.ForegroundMixModeUNDEFINED">
      <summary>
            Undefined. Don not use.
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.ForegroundMixMode.ForegroundMixModeBLACK">
      <summary>
            Pixel is always 0.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.ForegroundMixMode.ForegroundMixModeNOTMERGEPEN">
      <summary>
            Pixel is the inverse of the ForegroundMixModeMERGEPEN color.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.ForegroundMixMode.ForegroundMixModeMASKNOTPEN">
      <summary>
            Pixel is a combination of the colors common to both the pen and the inverse of the screen.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.ForegroundMixMode.ForegroundMixModeNOTCOPYPEN">
      <summary>
            Pixel is the inverse of the pen color.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.ForegroundMixMode.ForegroundMixModeMASKPENNOT">
      <summary>
            Pixel is a combination of the colors common to both the pen and the inverse of the screen.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.ForegroundMixMode.ForegroundMixModeNOT">
      <summary>
            Pixel is the inverse of the screen color.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.ForegroundMixMode.ForegroundMixModeXORPEN">
      <summary>
            Pixel is a combination of the colors in the pen and in the screen, but not in both.
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.ForegroundMixMode.ForegroundMixModeNOTMASKPEN">
      <summary>
            Pixel is the inverse of the ForegroundMixModeMASKPEN color.
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.ForegroundMixMode.ForegroundMixModeMASKPEN">
      <summary>
            Pixel is a combination of the colors common to both the pen and the screen.
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.ForegroundMixMode.ForegroundMixModeNOTXORPEN">
      <summary>
            Pixel is the inverse of the R2_XORPEN color.
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.ForegroundMixMode.ForegroundMixModeNOP">
      <summary>
            Pixel remains unchanged.
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.ForegroundMixMode.ForegroundMixModeMERGENOTPEN">
      <summary>
            Pixel is a combination of the screen color and the inverse of the pen color.
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.ForegroundMixMode.ForegroundMixModeCOPYPEN">
      <summary>
            Pixel is the pen color.
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.ForegroundMixMode.ForegroundMixModeMERGEPENNOT">
      <summary>
            Pixel is a combination of the pen color and the inverse of the screen color.
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.ForegroundMixMode.ForegroundMixModeMERGEPEN">
      <summary>
            Pixel is a combination of the pen color and the screen color.
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.ForegroundMixMode.ForegroundMixModeWHITE">
      <summary>
            Pixel is always 1.
            Member value is 16.
            </summary>
    </member>
    <member name="T:GdPicture12.PatchCodeType">
      <summary>
            Defines the type of a Patch Code.
            </summary>
    </member>
    <member name="F:GdPicture12.PatchCodeType.PatchCodeTypeUnknown">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.PatchCodeType.PatchCodeType1">
      <summary>
            Code 1. Used in Patch 1 and Patch 6.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.PatchCodeType.PatchCodeType2">
      <summary>
            Code 2. Used in Patch 2.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.PatchCodeType.PatchCodeType3">
      <summary>
            Code 3. Used in Patch 3 and Transfer Patch.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.PatchCodeType.PatchCodeType4">
      <summary>
            Code 4. Used in Patch 4 and Toggle Patch.
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.PatchCodeType.PatchCodeType5">
      <summary>
            Code 5. Inverted Code 1, used in Patch 1 and Patch 6.
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.PatchCodeType.PatchCodeType6">
      <summary>
            Code 6. Inverted Code 3, used in Patch 3 and Transfer Patch.
            Member value is 32.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeAlign.BarcodeAlignLeft">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeAlign.BarcodeAlignCenter">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeAlign.BarcodeAlignRight">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterUPCVersionA">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterUPCVersionE">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterUPCSupplemental2Digit">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterUPCSupplemental5Digit">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterEAN13">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterEAN8">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterInterleaved2of5">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterStandard2of5">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterIndustrial2of5">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterCode39">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterCode39Extended">
      <summary>
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterCodabar">
      <summary>
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterPostNet">
      <summary>
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterBookland">
      <summary>
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterISBN">
      <summary>
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterJAN13">
      <summary>
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterMSIMod10">
      <summary>
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterMSI2Mod10">
      <summary>
            Member value is 17.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterMSIMod11">
      <summary>
            Member value is 18.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterMSIMod11Mod10">
      <summary>
            Member value is 19.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterModifiedPlessey">
      <summary>
            Member value is 20.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterCode11">
      <summary>
            Member value is 21.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterUSD8">
      <summary>
            Member value is 22.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterUCC12">
      <summary>
            Member value is 23.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterUCC13">
      <summary>
            Member value is 24.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterLOGMARS">
      <summary>
            Member value is 25.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterCode128">
      <summary>
            Member value is 26.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterCode128A">
      <summary>
            Member value is 27.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterCode128B">
      <summary>
            Member value is 28.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterCode128C">
      <summary>
            Member value is 29.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterITF14">
      <summary>
            Member value is 30.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterCode93">
      <summary>
            Member value is 31.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DWriterType.Barcode1DWriterTelePen">
      <summary>
            Member value is 32.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderNone">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderIndustrial2of5">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderInverted2of5">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderInterleaved2of5">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderIata2of5">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderMatrix2of5">
      <summary>
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderCode39">
      <summary>
            Member value is 32.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderCodeabar">
      <summary>
            Member value is 64.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderBcdMatrix">
      <summary>
            Member value is 128.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderDataLogic2of5">
      <summary>
            Member value is 256.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderCode128">
      <summary>
            Member value is 4096.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderCODE93">
      <summary>
            Member value is 16384.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderEAN13">
      <summary>
            Member value is 32768.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderUPCA">
      <summary>
            Member value is 65536.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderEAN8">
      <summary>
            Member value is 131072.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderUPCE">
      <summary>
            Member value is 262144.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderADD5">
      <summary>
            Member value is 524288.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderType.Barcode1DReaderADD2">
      <summary>
            Member value is 1048576.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderScanMode.BestSpeed">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.Barcode1DReaderScanMode.BestQuality">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeQRReaderScanMode.BestSpeed">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeQRReaderScanMode.BestQuality">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="T:GdPicture12.BarcodeQRErrorCorrectionLevel">
      <summary>
            QR-Code error correction. The higher the error correction level, the less storage capacity.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeQRErrorCorrectionLevel.BarcodeQRErrorCorrectionLevelL">
      <summary>
            Level Low – up to 7% damage can be restored.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeQRErrorCorrectionLevel.BarcodeQRErrorCorrectionLevelM">
      <summary>
            Level Medium – up to 15% damage can be restored.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeQRErrorCorrectionLevel.BarcodeQRErrorCorrectionLevelQ">
      <summary>
            Level Quartile – up to 25% damage can be restored.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeQRErrorCorrectionLevel.BarcodeQRErrorCorrectionLevelH">
      <summary>
            Level High – up to 30% damage can be restored.
            Member value is 3.
            </summary>
    </member>
    <member name="T:GdPicture12.BarcodeMicroQRErrorCorrectionLevel">
      <summary>
            Micro QR-Code error correction. The higher the error correction level, the less storage capacity.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeMicroQRErrorCorrectionLevel.BarcodeMicroQRErrorCorrectionLevelL">
      <summary>
            Level Low – up to 7% damage can be restored.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeMicroQRErrorCorrectionLevel.BarcodeMicroQRErrorCorrectionLevelM">
      <summary>
            Level Medium – up to 15% damage can be restored.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeMicroQRErrorCorrectionLevel.BarcodeMicroQRErrorCorrectionLevelQ">
      <summary>
            Level Quartile – up to 25% damage can be restored.
            Member value is 2.
            </summary>
    </member>
    <member name="T:GdPicture12.BarcodeQREncodingMode">
      <summary>
            Encoding mode. If mode required is BarcodeQREncodingModeUndefined, the input will be analyzed and most appropriated mode will be selected.
            See: http://en.wikipedia.org/wiki/QR_code#Encoding
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeQREncodingMode.BarcodeQREncodingModeUndefined">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeQREncodingMode.BarcodeQREncodingModeNumeric">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeQREncodingMode.BarcodeQREncodingModeAlphaNumeric">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeQREncodingMode.BarcodeQREncodingModeByte">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeQREncodingMode.BarcodeQREncodingModeKanji">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="T:GdPicture12.BarcodeDataMatrixEncodingMode">
      <summary>
            Encoding mode. If mode required is BarcodeDataMatrixEncodingModeUndefined, the input will be analyzed and most appropriated mode will be selected.
            See: http://en.wikipedia.org/wiki/Data_Matrix#Encoding
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixEncodingMode.BarcodeDataMatrixEncodingModeUndefined">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixEncodingMode.BarcodeDataMatrixEncodingModeASCII">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixEncodingMode.BarcodeDataMatrixEncodingModeC40">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixEncodingMode.BarcodeDataMatrixEncodingModeText">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixEncodingMode.BarcodeDataMatrixEncodingModeX12">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixEncodingMode.BarcodeDataMatrixEncodingModeEDIFACT">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixEncodingMode.BarcodeDataMatrixEncodingModeBase256">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="T:GdPicture12.BarcodePDF417EncodingMode">
      <summary>
            Encoding mode. If mode required is BarcodePDF417EncodingModeUndefined, the input will be analyzed and most appropriated mode will be selected.
            See: http://en.wikipedia.org/wiki/PDF417#Encoding
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodePDF417EncodingMode.BarcodePDF417EncodingModeUndefined">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodePDF417EncodingMode.BarcodePDF417EncodingModeText">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodePDF417EncodingMode.BarcodePDF417EncodingModeByte">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodePDF417EncodingMode.BarcodePDF417EncodingModeNumeric">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="T:GdPicture12.BarcodePDF417ErrorCorrectionLevel">
      <summary>
            Reed Solomon error correction level. The higher the error correction level, the less storage capacity.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevelAuto">
      <summary>
            Automatic level. Then engine will determine automatically the level required according to the AIM recommendations.
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevel0">
      <summary>
            2 Codewords will be used to store error correction data.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevel1">
      <summary>
            4 Codewords will be used to store error correction data.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevel2">
      <summary>
            8 Codewords will be used to store error correction data.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevel3">
      <summary>
            16 Codewords will be used to store error correction data.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevel4">
      <summary>
            32 Codewords will be used to store error correction data.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevel5">
      <summary>
            64 Codewords will be used to store error correction data.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevel6">
      <summary>
            128 Codewords will be used to store error correction data.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevel7">
      <summary>
            256 Codewords will be used to store error correction data.
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodePDF417ErrorCorrectionLevel.BarcodePDF417ErrorCorrectionLevel8">
      <summary>
            512 Codewords will be used to store error correction data.
            Member value is 8.
            </summary>
    </member>
    <member name="T:GdPicture12.BarcodeDataMatrixVersion">
      <summary>
            Version of the DataMatrix symbol if Auto, the smallest rectangular symbol to fit the data is chosen.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersionAuto">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion010x010">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion012x012">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion014x014">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion016x016">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion018x018">
      <summary>
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion020x020">
      <summary>
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion022x022">
      <summary>
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion024x024">
      <summary>
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion026x026">
      <summary>
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion032x032">
      <summary>
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion036x036">
      <summary>
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion040x040">
      <summary>
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion044x044">
      <summary>
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion048x048">
      <summary>
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion052x052">
      <summary>
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion064x064">
      <summary>
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion072x072">
      <summary>
            Member value is 17.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion080x080">
      <summary>
            Member value is 18.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion088x088">
      <summary>
            Member value is 19.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion096x096">
      <summary>
            Member value is 20.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion104x104">
      <summary>
            Member value is 21.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion120x120">
      <summary>
            Member value is 22.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion132x132">
      <summary>
            Member value is 23.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion144x144">
      <summary>
            Member value is 24.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion008x018">
      <summary>
            Member value is 25.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion008x032">
      <summary>
            Member value is 26.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion012x026">
      <summary>
            Member value is 27.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion012x036">
      <summary>
            Member value is 28.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion016x036">
      <summary>
            Member value is 29.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixVersion.BarcodeDataMatrixVersion016x048">
      <summary>
            Member value is 30.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodePDF417ReaderScanMode.BestSpeed">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodePDF417ReaderScanMode.BestQuality">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.OMRMode.FavorQuality">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.OMRMode.FavorSpeed">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.BlobRemoveMode.FavorQuality">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.BlobRemoveMode.FavorSpeed">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixReaderScanMode.BestSpeed">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.BarcodeDataMatrixReaderScanMode.BestQuality">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.IconSize.IconSize16x16">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.IconSize.IconSize32x32">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaSourceType.WiaSourceUnspecified">
      <summary>
            The source type is unknown.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaSourceType.WiaSourceScanner">
      <summary>
            The source is a scanner.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaSourceType.WiaSourceCamera">
      <summary>
            The source is a camera.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaSourceType.WiaSourceVideo">
      <summary>
            The source provides streaming video.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaImageFormat.WiaImageFormatUnknown">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaImageFormat.WiaImageFormatBMP">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaImageFormat.WiaImageFormatPNG">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaImageFormat.WiaImageFormatGIF">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaImageFormat.WiaImageFormatJPEG">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaImageFormat.WiaImageFormatTIFF">
      <summary>
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_OK">
      <summary>
            All right !
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_ERROR_GENERAL_ERROR">
      <summary>
            An unknown error has occurred with the Windows Image Acquisition (WIA) device.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_ERROR_PAPER_JAM">
      <summary>
            Paper is jammed in the scanner's document feeder.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_ERROR_PAPER_EMPTY">
      <summary>
            The user requested a scan and there are no documents left in the document feeder.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_ERROR_PAPER_PROBLEM">
      <summary>
            An unspecified problem occurred with the scanner's document feeder.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_ERROR_OFFLINE">
      <summary>
            The WIA device is not online.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_ERROR_BUSY">
      <summary>
            The WIA device is busy.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_ERROR_WARMING_UP">
      <summary>
            The WIA device is warming up.
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_ERROR_USER_INTERVENTION">
      <summary>
            An unspecified error has occurred with the WIA device that requires user intervention. The user should ensure that the device is turned on, online, and any cables are properly connected.
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_ERROR_ITEM_DELETED">
      <summary>
            The WIA device was deleted. It can no longer be accessed.
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_ERROR_DEVICE_COMMUNICATION">
      <summary>
            An unspecified error occurred during an attempted communication with the WIA device.
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_ERROR_INVALID_COMMAND">
      <summary>
            The device does not support this command.
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_ERROR_INCORRECT_HARDWARE_SETTING">
      <summary>
            There is an incorrect setting on the WIA device.
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_ERROR_DEVICE_LOCKED">
      <summary>
            The scanner head is locked.
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_ERROR_EXCEPTION_IN_DRIVER">
      <summary>
            The device driver threw an exception.
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_ERROR_INVALID_DRIVER_RESPONSE">
      <summary>
            The response from the driver is invalid.
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_S_NO_DEVICE_AVAILABLE">
      <summary>
            No WIA device of the selected type is available.
            Member value is 21.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_OPEN_SOURCE_FIRST">
      <summary>
            No WIA device is open.
            Member value is 30.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_OPERATION_CANCELLED">
      <summary>
            Operation canceled.
            Member value is 31.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_SCANNER_NOT_AVAILABLE">
      <summary>
            Scanner is not available.
            Member value is 32.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_OUTPUT_FILE_EXISTS">
      <summary>
            Scanner is not available.
            Member value is 33.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_CAN_NOT_SET_VALUE">
      <summary>
            Can not set the specified value.
            Member value is 50.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_CAN_NOT_GET_VALUE">
      <summary>
            Can not get the specified value.
            Member value is 51.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_UNSUPPORTED_FEATURE">
      <summary>
            The feature is not supported by the selected device.
            Member value is 60.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaStatus.WIA_GENERIC_ERROR">
      <summary>
            An unknown error has occurred out of the Windows Image Acquisition (WIA) device.
            Member value is 100.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaImageIntent.WiaImageIntentNone">
      <summary>
            Default value. No intent is specified.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaImageIntent.WiaImageIntentColor">
      <summary>
            The application intends to prepare the device for a color scan.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaImageIntent.WiaImageIntentGrayscale">
      <summary>
            The application intends to prepare the device for a grayscale scan.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaImageIntent.WiaImageIntentText">
      <summary>
            The application intends to prepare the device for scanning text.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaImageIntent.WiaImageIntentMask">
      <summary>
            Mask for all of the image-type flags.
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaImageIntent.WiaImageIntentMinimizeSize">
      <summary>
            The application intends to prepare the device for scanning an image that result's in a small scan.
            Member value is 65536.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaImageIntent.WiaImageIntentMaximizeQuality">
      <summary>
            The application intends to prepare the device for scanning a high-quality image.
            Member value is 131072.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaImageIntent.WiaImageIntentBestPreview">
      <summary>
            This flag is a mask for all of the size/quality flags.
            Member value is 262144.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaImageIntent.WiaImageIntentSizeMask">
      <summary>
            The application intends to prepare the device for scanning a preview.
            Member value is 983040.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeUnknown">
      <summary>
            8267 x 11692 (Dimensions in thousandths of an inch).
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeA4">
      <summary>
            8267 x 11692 (Dimensions in thousandths of an inch).
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeLETTER">
      <summary>
            8500 x 11000 (Dimensions in thousandths of an inch).
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeCUSTOM">
      <summary>
            Current extent settings
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeUSLEGAL">
      <summary>
            8500 x 14000 (Dimensions in thousandths of an inch).
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeUSLETTER">
      <summary>
            8500 x 11000 (Dimensions in thousandths of an inch).
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeUSLEDGER">
      <summary>
            11000 x 17000 (Dimensions in thousandths of an inch).
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeUSSTATEMENT">
      <summary>
            5500 x 8500 (Dimensions in thousandths of an inch).
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeBUSINESSCARD">
      <summary>
            3543 x 2165 (Dimensions in thousandths of an inch).
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_A0">
      <summary>
            33110 x 46811 (Dimensions in thousandths of an inch).
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_A1">
      <summary>
            23385 x 33110 (Dimensions in thousandths of an inch).
            Member value is 8.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_A2">
      <summary>
            16535 x 23385 (Dimensions in thousandths of an inch).
            Member value is 9.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_A3">
      <summary>
            11692 x 16535 (Dimensions in thousandths of an inch).
            Member value is 10.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_A4">
      <summary>
            8267 x 11692 (Dimensions in thousandths of an inch).
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_A5">
      <summary>
            5826 x 8267 (Dimensions in thousandths of an inch).
            Member value is 11.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_A6">
      <summary>
            4133 x 5826 (Dimensions in thousandths of an inch).
            Member value is 12.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_A7">
      <summary>
            2913 x 4133 (Dimensions in thousandths of an inch).
            Member value is 13.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_A8">
      <summary>
            2047 x 2913 (Dimensions in thousandths of an inch).
            Member value is 14.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_A9">
      <summary>
            1456 x 2047 (Dimensions in thousandths of an inch).
            Member value is 15.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_A10">
      <summary>
            1023 x 1456 (Dimensions in thousandths of an inch).
            Member value is 16.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_B0">
      <summary>
            39370 x 55669 (Dimensions in thousandths of an inch).
            Member value is 17.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_B1">
      <summary>
            27834 x 39370 (Dimensions in thousandths of an inch).
            Member value is 18.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_B2">
      <summary>
            19685 x 27834 (Dimensions in thousandths of an inch).
            Member value is 19.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_B3">
      <summary>
            13897 x 19685 (Dimensions in thousandths of an inch).
            Member value is 20.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_B4">
      <summary>
            9842 x 13897 (Dimensions in thousandths of an inch).
            Member value is 21.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_B5">
      <summary>
            6929 x 9842 (Dimensions in thousandths of an inch).
            Member value is 22.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_B6">
      <summary>
            4921 x 6929 (Dimensions in thousandths of an inch).
            Member value is 23.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_B7">
      <summary>
            3464 x 4921 (Dimensions in thousandths of an inch).
            Member value is 24.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_B8">
      <summary>
            2440 x 3464 (Dimensions in thousandths of an inch).
            Member value is 25.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_B9">
      <summary>
            1732 x 2440 (Dimensions in thousandths of an inch).
            Member value is 26.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_B10">
      <summary>
            1220 x 1732 (Dimensions in thousandths of an inch).
            Member value is 27.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_C0">
      <summary>
            36102 x 51062 (Dimensions in thousandths of an inch).
            Member value is 28.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_C1">
      <summary>
            25511 x 36102 (Dimensions in thousandths of an inch).
            Member value is 29.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_C2">
      <summary>
            18031 x 25511 (Dimensions in thousandths of an inch).
            Member value is 30.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_C3">
      <summary>
            12755 x 18031 (Dimensions in thousandths of an inch).
            Member value is 31.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_C4">
      <summary>
            9015 x 12755 unfolded
            Member value is 32.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_C5">
      <summary>
            6377 x 9015 folded once (Dimensions in thousandths of an inch).
            Member value is 33.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_C6">
      <summary>
            4488 x 6377 folded twice (Dimensions in thousandths of an inch).
            Member value is 34.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_C7">
      <summary>
            3188 x 4488 (Dimensions in thousandths of an inch).
            Member value is 35.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_C8">
      <summary>
            2244 x 3188 (Dimensions in thousandths of an inch).
            Member value is 36.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_C9">
      <summary>
            1574 x 2244
            Member value is 37.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeISO_C10">
      <summary>
            1102 x 1574 (Dimensions in thousandths of an inch).
            Member value is 38.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeJIS_B0">
      <summary>
            40551 x 57322 (Dimensions in thousandths of an inch).
            Member value is 39.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeJIS_B1">
      <summary>
            28661 x 40551 (Dimensions in thousandths of an inch).
            Member value is 40.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeJIS_B2">
      <summary>
            20275 x 28661
            Member value is 41.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeJIS_B3">
      <summary>
            14330 x 20275 (Dimensions in thousandths of an inch).
            Member value is 42.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeJIS_B4">
      <summary>
            10118 x 14330 (Dimensions in thousandths of an inch).
            Member value is 43.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeJIS_B5">
      <summary>
            7165 x 10118 (Dimensions in thousandths of an inch).
            Member value is 44.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeJIS_B6">
      <summary>
            5039 x 7165 (Dimensions in thousandths of an inch).
            Member value is 45.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeJIS_B7">
      <summary>
            3582 x 5039 (Dimensions in thousandths of an inch).
            Member value is 46.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeJIS_B8">
      <summary>
            2519 x 3582 (Dimensions in thousandths of an inch).
            Member value is 47.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeJIS_B9">
      <summary>
            1771 x 2519 (Dimensions in thousandths of an inch).
            Member value is 48.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeJIS_B10">
      <summary>
            1259 x 1771 (Dimensions in thousandths of an inch).
            Member value is 49.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeJIS_2A">
      <summary>
            46811 x 66220 (Dimensions in thousandths of an inch).
            Member value is 50.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeJIS_4A">
      <summary>
            66220 x 93622 (Dimensions in thousandths of an inch).
            Member value is 51.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeDIN_2B">
      <summary>
            55669 x 78740 (Dimensions in thousandths of an inch).
            Member value is 52.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeDIN_4B">
      <summary>
            78740 x 111338 (Dimensions in thousandths of an inch).
            Member value is 53.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeAUTO">
      <summary>
            Driver automatically detects page size
            Member value is 100.
            </summary>
    </member>
    <member name="F:GdPicture12.WiaPageSize.WiaPageSizeCUSTOM_BASE">
      <summary>
            Page size already known to driver and application
            Member value is 32768.
            </summary>
    </member>
    <member name="F:GdPicture12.ImagingContext.ContextUnknown">
      <summary>
            Unknown context.
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.ImagingContext.ContextDocument">
      <summary>
            A document is processed.
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.ImagingContext.ContextPhoto">
      <summary>
            A digital photo is processed.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.MICRFont.MICRFontCMC7">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.MICRFont.MICRFontE13B">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.MICRContext.MICRContextDocument">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.MICRContext.MICRContextLineFinding">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.OCRContext.OCRContextDocument">
      <summary>
            For document with variable layout with lines, text or/and images. (Default).
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.OCRContext.OCRContextSingleColumn">
      <summary>
            For single column of text of variable sizes.
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.OCRContext.OCRContextSingleBlock">
      <summary>
            For document with single uniform block of text.
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.OCRContext.OCRContextSingleBlockVertical">
      <summary>
            For document with single uniform block of vertically aligned text.
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.OCRContext.OCRContextSingleLine">
      <summary>
            For single text line image.
            Member value is 4.
            </summary>
    </member>
    <member name="F:GdPicture12.OCRContext.OCRContextSingleWord">
      <summary>
            For single word image.
            Member value is 5.
            </summary>
    </member>
    <member name="F:GdPicture12.OCRContext.OCRContextSingleWordCircle">
      <summary>
            For single word in a circle image.
            Member value is 6.
            </summary>
    </member>
    <member name="F:GdPicture12.OCRContext.OCRContextSingleChar">
      <summary>
            For single character image.
            Member value is 7.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureOutputIntent.IntentUnknown">
      <summary>
            Member value is -1.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureOutputIntent.IntentBlackWhite">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureOutputIntent.IntentGrayscale">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureOutputIntent.IntentColor">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.GdPictureOutputIntent.IntentPalletized">
      <summary>
            Member value is 3.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.ANSI_CHARSET">
      <summary>
            Member value is 0.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.DEFAULT_CHARSET">
      <summary>
            Member value is 1.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.SYMBOL_CHARSET">
      <summary>
            Member value is 2.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.MAC_CHARSET">
      <summary>
            Member value is 77.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.SHIFTJIS_CHARSET">
      <summary>
            Member value is 128.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.HANGEUL_CHARSET">
      <summary>
            Member value is 129.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.HANGUL_CHARSET">
      <summary>
            Member value is 129.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.GB2312_CHARSET">
      <summary>
            Member value is 134.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.CHINESEBIG5_CHARSET">
      <summary>
            Member value is 136.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.JOHAB_CHARSET">
      <summary>
            Member value is 130.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.HEBREW_CHARSET">
      <summary>
            Member value is 177.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.ARABIC_CHARSET">
      <summary>
            Member value is 178.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.GREEK_CHARSET">
      <summary>
            Member value is 161.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.TURKISH_CHARSET">
      <summary>
            Member value is 162.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.VIETNAMESE_CHARSET">
      <summary>
            Member value is 163.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.BALTIC_CHARSET">
      <summary>
            Member value is 186.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.RUSSIAN_CHARSET">
      <summary>
            Member value is 204.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.THAI_CHARSET">
      <summary>
            Member value is 222.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.EASTEUROPE_CHARSET">
      <summary>
            Member value is 238.
            </summary>
    </member>
    <member name="F:GdPicture12.FontCharSet.OEM_CHARSET">
      <summary>
            Member value is 255.
            </summary>
    </member>
    <member name="M:GdPicture12.Internal.Globals.GdPictureToolkit.initWPF">
      <summary>
      </summary>
      <remarks>It is important to keep this code in a separate function.</remarks>
    </member>
    <member name="T:GdPicture12.Internal.Globals.Link">
      <summary>
            Handles  link. 
            </summary>
    </member>
    <member name="M:GdPicture12.Internal.Geometry.GeometryUtils.compareBaseLine(GdPicture12.Internal.Globals.GdPictureRectF,GdPicture12.Internal.Globals.GdPictureRectF)">
      <summary>
            This method tries to determine if two boxes are located on the same line in the context of text extraction.
            Origin is considered as top-left.
            </summary>
      <param name="rect1">The first rectangle.</param>
      <param name="rect2">The second rectangle.</param>
      <returns>0: same line. -1: rect1 is above rect2. 1 otherwise.</returns>
    </member>
    <member name="M:GdPicture12.Internal.Geometry.GeometryUtils.compareBaseColumn(GdPicture12.Internal.Globals.GdPictureRectF,GdPicture12.Internal.Globals.GdPictureRectF)">
      <summary>
            This method compares two boxes base column in the context of text extraction.
            Origin is considered as top-left.
            </summary>
      <param name="rect1">The first rectangle.</param>
      <param name="rect2">The second rectangle.</param>
      <returns>0: same column. -1: rect1 is at left of rect2. 1 otherwise.</returns>
    </member>
    <member name="M:GdPicture12.Internal.Matrix.GdPictureMatrix.bitmapRenderingGridFit">
      <summary>
            Forces the pixel(0, 0) to be renderd on the grid.
            </summary>
    </member>
    <member name="M:GdPicture12.Internal.Text.Word.isRightContent(GdPicture12.Internal.Text.Word)">
      <summary>
            Returns if the testWord parameter can be appended at the end of the word.
            </summary>
      <param name="testWord">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:GdPicture12.Internal.Fonts.FontTrueTypeheadTable">
      <summary>
            Specifies font true type header. Ref: ISO/IEC 14496-22 2009 §5.2.2
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeheadTable.version">
      <summary>
            0x00010000 for version 1.0.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeheadTable.fontRevision">
      <summary>
            Set by font manufacturer.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeheadTable.checkSumAdjustment">
      <summary>
            To compute: set it to 0, sum the entire font as ULONG, then store 0xB1B0AFBA - sum.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeheadTable.magicNumber">
      <summary>
            Set to 0x5F0F3CF5.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeheadTable.flags">
      <summary>
            Bit 0: Baseline for font at y=0;
            Bit 1: Left sidebearing point at x=0;
            Bit 2: Instructions may depend on point size;
            Bit 3: Force ppem to integer values for all internal scaler math; may use fractional ppem sizes if this bit is clear;
            Bit 4: Instructions may alter advance width (the advance widths might not scale linearly);
            Bits 5-10: These bits are not defined in OFF
            Bit 11: Font data is 'lossless,' as a result of having been compressed and decompressed with the MicroType®iv Express engine, as defined in ISO/IEC 14496-18.
            Bit 12: Font converted (produce compatible metrics)
            Bit 13: Font optimized for ClearType®v. Note, fonts that rely on embedded bitmaps (EBDT) for rendering should not be considered optimized for ClearType, and therefore should keep this bit cleared.
            Bit 14: Reserved, set to 0
            Bit 15: Reserved, set to 0
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeheadTable.unitsPerEm">
      <summary>
            Valid range is from 16 to 16384. This value should be a power of 2 for fonts that have
            TrueType outlines.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeheadTable.created">
      <summary>
            Number of seconds since 12:00 midnight, January 1, 1904. 64-bit integer
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeheadTable.modified">
      <summary>
            Number of seconds since 12:00 midnight, January 1, 1904. 64-bit integer
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeheadTable.xMin">
      <summary>
            For all glyph bounding boxes.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeheadTable.yMin">
      <summary>
            For all glyph bounding boxes.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeheadTable.xMax">
      <summary>
            For all glyph bounding boxes.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeheadTable.yMax">
      <summary>
            For all glyph bounding boxes.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeheadTable.macStyle">
      <summary>
            Bit     0: Bold (if set to 1);
            Bit     1: Italic (if set to 1)
            Bit     2: Underline (if set to 1)
            Bit     3: Outline (if set to 1)
            Bit     4: Shadow (if set to 1)
            Bit     5: Condensed (if set to 1)
            Bit     6: Extended (if set to 1)
            Bits 7-15: Reserved (set to 0).
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeheadTable.lowestRecPPEM">
      <summary>
            Smallest readable size in pixels.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeheadTable.fontDirectionHint">
      <summary>
            Deprecated (Set to 2).
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeheadTable.indexToLocFormat">
      <summary>
            0 for short Offsets, 1 for long.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeheadTable.glyphDataFormat">
      <summary>
            0 for current format.
            </summary>
    </member>
    <member name="T:GdPicture12.Internal.Fonts.FontTrueTypehheaTable">
      <summary>
            The 'hhea' table contains information needed to layout fonts whose characters are written horizontally, 
            that is, either left to right or right to left. This table contains information that is general to the font as a whole. 
            Information which pertains to specific glyphs is given in the 'hmtx' table.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypehheaTable.version">
      <summary>
            Fixed	version	0x00010000 (1.0).
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypehheaTable.Ascender">
      <summary>
            FWord	ascent	Distance from baseline of highest ascender.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypehheaTable.Descender">
      <summary>
            FWord	descent	Distance from baseline of lowest descender.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypehheaTable.LineGap">
      <summary>
            FWord	lineGap	typographic line gap.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypehheaTable.advanceWidthMax">
      <summary>
            uFWord	advanceWidthMax	must be consistent with horizontal metrics.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypehheaTable.minLeftSideBearing">
      <summary>
            FWord	minLeftSideBearing	must be consistent with horizontal metrics.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypehheaTable.minRightSideBearing">
      <summary>
            FWord	minRightSideBearing	must be consistent with horizontal metrics.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypehheaTable.xMaxExtent">
      <summary>
            FWord	xMaxExtent	max(lsb + (xMax-xMin)).
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypehheaTable.caretSlopeRise">
      <summary>
            int16	caretSlopeRise	used to calculate the slope of the caret (rise/run) set to 1 for vertical caret.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypehheaTable.caretSlopeRun">
      <summary>
            int16	caretSlopeRun	0 for vertical.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypehheaTable.caretOffset">
      <summary>
            FWord	caretOffset	set value to 0 for non-slanted fonts.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypehheaTable.reserved1">
      <summary>
            int16	reserved	set value to 0.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypehheaTable.reserved2">
      <summary>
            int16	reserved	set value to 0.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypehheaTable.reserved3">
      <summary>
            int16	reserved	set value to 0.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypehheaTable.reserved4">
      <summary>
            int16	reserved	set value to 0.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypehheaTable.metricDataFormat">
      <summary>
            int16	metricDataFormat	0 for current format.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypehheaTable.numberOfHMetrics">
      <summary>
            uint16	numOfLongHorMetrics	number of advance widths in metrics table.
            </summary>
    </member>
    <member name="T:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table">
      <summary>
            OS/2 – Global font information table
            (in ISO/IEC 14496-22 2009 §5.2.7)
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.version">
      <summary>
            The version number for this OS/2 table.
            Set to 0x0004
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.xAvgCharWidth">
      <summary>
            Average weighted escapement.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.usWeightClass">
      <summary>
            Weight class.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.usWidthClass">
      <summary>
            Width class.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.fsType">
      <summary>
            Type flags.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.ySubscriptXSize">
      <summary>
            Subscript horizontal font size.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.ySubscriptYSize">
      <summary>
            Subscript vertical font size.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.ySubscriptXOffset">
      <summary>
            Subscript x Offset.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.ySubscriptYOffset">
      <summary>
            Subscript y Offset.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.ySuperscriptXSize">
      <summary>
            Superscript horizontal font size.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.ySuperscriptYSize">
      <summary>
            Superscript vertical font size.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.ySuperscriptXOffset">
      <summary>
            Superscript x Offset.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.ySuperscriptYOffset">
      <summary>
            Superscript y Offset.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.yStrikeoutSize">
      <summary>
            Width of the strikeout stroke in font design units.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.yStrikeoutPosition">
      <summary>
            The position of the top of the strikeout stroke relative to the baseline in font design units.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.sFamilyClass">
      <summary>
            Font-family class and subclass.
            (Possible values are in Annex B of the spec)
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.Panose">
      <summary>
            PANOSE classification number
            Must be a 10 bytes array, the first byte defining what type of font it is
            An extanded version of Panoses exists with 14 values but I didn't find enough doc on that.
            See http://www.monotype.com/services/pan1 for more informations.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.ulUnicodeRange1">
      <summary>
            Unicode Character Range
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.achVendID">
      <summary>
            Font Vendor Identification
            Must be 4 bytes array
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.fsSelection">
      <summary>
            Font selection flags.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.usFirstCharIndex">
      <summary>
            The minimum Unicode index (character code) in this font.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.usLastCharIndex">
      <summary>
            The maximum Unicode index (character code) in this font.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.sTypoAscender">
      <summary>
            The typographic ascender for this font.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.sTypoDescender">
      <summary>
            The typographic descender for this font.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.sTypoLineGap">
      <summary>
            The typographic line gap for this font.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.usWinAscent">
      <summary>
            The ascender metric for Windows.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.usWinDescent">
      <summary>
            The descender metric for Windows.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.ulCodePageRange1">
      <summary>
            Code Page Character Range
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.sxHeight">
      <summary>
            The distance between the baseline and the approximate height of nonascending lowercase letters.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.sCapHeight">
      <summary>
            The distance between the baseline and the approximate height of uppercase letters.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Fonts.FontTrueTypeOS2Table.usMaxContext">
      <summary>
            The maximum length of a target glyph context for any feature in this font.
            </summary>
    </member>
    <member name="M:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.createGlyphShape(GdPicture12.Internal.Fonts.PdfFontCharInfo,System.String,System.Boolean)">
      <summary>
            Creates a char representation of a font of a PDF document.
            </summary>
      <param name="fontChar">
      </param>
      <param name="encodingName">
      </param>
      <param name="symbolic">
      </param>
      <returns>A GdPicturePath object. Can be null if the glyph can not be found or doesn't contains any outline.</returns>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.FirstChar">
      <summary>
      </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.LastChar">
      <summary>
      </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.BBox">
      <summary>
            Specifies the font Black-box.
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.CapHeight">
      <summary>
      </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.AvgWidth">
      <summary>
      </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.MaxWidth">
      <summary>
      </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.Ascent">
      <summary>
            Specifies the cell ascent, in design units, of this font.
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.WinAscent">
      <summary>
            Specifies the windows cell ascent, in design units, of this font.
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.TypoAscender">
      <summary>
            Specifies the typo cell ascent, in design units, of this font.
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.Descent">
      <summary>
            Specifies the cell descent, in design units, of this font.
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.WinDescent">
      <summary>
            Specifies the windows cell descent, in design units, of this font.
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.TypoDescender">
      <summary>
            Specifies the typo cell descent, in design units, of this font.
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.UnderlinePosition">
      <summary>
            Specifies the underline position, in design units, of this font.
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.UnderlineThickness">
      <summary>
            Specifies the underline width, in design units, of this font.
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.StrikeoutPosition">
      <summary>
            Specifies the position of the top of the strikeout stroke relative to the baseline, in design units, of this font.
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.StrikeoutSize">
      <summary>
            Specifies the width of the strikeout stroke, in design units, of this font.
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.EmHeight">
      <summary>
            Specifies the size (commonly called em size or em height), in design units, of this font.
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.LineSpacing">
      <summary>
            Specifies the line spacing, in design units, of this font. 
            The line spacing is the vertical distance between the base lines of two consecutive lines of text.
            The value is computed using the formula: LineSpacing = Ascent + Math.Abs(Descent) + LineGap.
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.WinLineSpacing">
      <summary>
            Specifies the line spacing, computed for Windows, in design units, of this font. 
            The line spacing is the vertical distance between the base lines of two consecutive lines of text.
            The value is computed using the formula: LineSpacing = Ascent + Math.Abs(Descent) + LineGap.
            </summary>
      <remarks>Win Ascent and Win Descent are supposed to be the Windows metrics, while Ascender and Descender are supposed to be the Apple metrics, 
            but in the case of line spacing, Microsoft has decided to look at both, and pick the larger value when returning Line Spacing calculation.
            ref: https://msdn.microsoft.com/en-us/library/windows/desktop/ms533824(v=vs.85).aspx </remarks>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.WinExternalLeading">
      <summary>
            Specifies the line external leading, computed for Windows, in design units, of this font. 
            The formula is WinExternalLeading = LineSpacing - (WinAscent + WinDescent).
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.LineGap">
      <summary>
            Specifies the typographic line gap, in design units, of this font. 
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.TypoLineGap">
      <summary>
            Specifies the typo line gap, in design units, of this font.
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Fonts.TrueType.FontTrueTypeParser.Style">
      <summary>
            Specifies the font Style.
            </summary>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.GdPictureBitmap.trim(System.UInt32,System.UInt32)">
      <summary>
            Trims the bitmap, without altering its back buffer.
            </summary>
      <param name="width">The width to trim.</param>
      <param name="height">The height to trim.</param>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.GdPictureBitmap.isEmpty">
      <summary>
            Returns if image is empty (all pixels set to 0).
            </summary>
      <remarks>For performance purpose, extra stride data are also checked.</remarks>
      <returns>
      </returns>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.GdPictureBitmap.isPolygonSubtituable(System.Byte[],System.Nullable{GdPicture12.Internal.Globals.GdPictureColor}@)">
      <summary>
            Tries to determine if the bitmap can be substitued by a polygon to speed-up rendering purpose.
            </summary>
      <param name="palData">
      </param>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.GdPictureBitmap.toGdPictureImage(System.Boolean,GdPicture12.Internal.Imaging.GdPictureImage@)">
      <summary>
            Converts this GdPictureBitmap to a GdPictureImage object.
            </summary>
      <param name="detachData">Specifies if pixel data uist be detached from this GdPictureImage instance.</param>
      <param name="image">The generated GdPictureImage object.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.MultiBitmapDescriptor.ExtractBitmap(System.Int32,System.Boolean,GdPicture12.Internal.Imaging.GdPictureImage@)">
      <summary>
            Creates a new GdPicture image from a specific page of the multipage image.
            </summary>
      <param name="pageIdx">From 0 to PageCount -1.</param>
      <param name="directAccess">
      </param>
      <param name="image">The provided image.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.MultiBitmapDescriptor.ExtractBitmap(System.Int32,GdPicture12.Internal.Imaging.GdPictureImage@,System.Boolean@)">
      <summary>
            Obtains a GdPicture image from a specific page of the multipage image.
            </summary>
      <param name="pageIdx">From 0 to PageCount -1.</param>
      <param name="image">The  provided image.</param>
      <param name="releasePage">Specifies if the caller must release the provided image.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.MultiBitmapDescriptor.insert(GdPicture12.Internal.Imaging.CachedPage,System.Int32,System.Boolean)">
      <summary>
            Inserts a frame at the current page position.
            </summary>
      <param name="cachedPage">
      </param>
      <param name="pagePosition">The page position (1 based)</param>
      <remarks>
      </remarks>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.MultiBitmapDescriptor.swap(System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="pageNo1">
      </param>
      <param name="pageNo2">
      </param>
      <remarks>
      </remarks>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.MultiBitmapDescriptor.move(System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="source">
      </param>
      <param name="destination">
      </param>
      <remarks>
      </remarks>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.GdPictureImage.Quantization(GdPicture12.Internal.Imaging.GdPictureImage@,System.Int32,System.Boolean,GdPicture12.Internal.Globals.GdPictureColor,System.Boolean,GdPicture12.Internal.Imaging.GdPicturePixelFormat,System.Int32,GdPicture12.Internal.Globals.GdPictureColor[])">
      <summary>
      </summary>
      <param name="newBitmap">
      </param>
      <param name="numColors">
      </param>
      <param name="forceTransparency">
      </param>
      <param name="transparentColor">
      </param>
      <param name="keepImageProperties">
      </param>
      <param name="destPixelFormat">
      </param>
      <param name="quality"> 0 is worst, 100 is best</param>
      <param name="reservedPalette">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:GdPicture12.Internal.Imaging.GdPictureImage.Photometric">
      <summary>
            Returns the photometric of the image. 
            0 = WhiteIsZero. For bilevel and grayscale images: 0 is imaged as white.
            1 = BlackIsZero.For bilevel and grayscale images: 0 is imaged as black.
            2 = RGB.RGB value of(0,0,0) represents black, and (255, 255, 255) represents white, assuming 8-bit components.The components are stored in the indicated order: first Red, then Green, then Blue.
            3 = Palette color. 
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Imaging.Drawing.GdPictureIntersectedRegions.MayHaveCurves">
      <summary>
            Determines whether this region contains a curved segment.
            </summary>
    </member>
    <member name="P:GdPicture12.Internal.Imaging.Drawing.GdPicturePath.MayHaveCurves">
      <summary>
            Determines whether this path contains a curved segment.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Imaging.Native.Image.LOAD_NOPIXELS">
            loading: load the image header only (not supported by all plugins)
        </member>
    <member name="F:GdPicture12.Internal.Imaging.Native.Image.LOAD_CMYK">
            loading: keep cmyk(a) channels (default is convertion to rgb(a) color space)
        </member>
    <member name="F:GdPicture12.Internal.Imaging.Native.Image.LOAD_ICM">
            loading: apply ICC correction (if any)
        </member>
    <member name="M:GdPicture12.Internal.Imaging.Native.Image.afterNewDibAllocation(System.IntPtr)">
      <summary>
            This method must be called after each dib allocation.
            </summary>
      <param name="dib">The newly allocated dib.</param>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.Rendering.GDIPUtilities.getGdiPath(GdPicture12.Internal.Imaging.Drawing.GdPicturePath,GdPicture12.Internal.Imaging.Rendering.GdPictureFillMode)">
      <summary>
            Builds a GraphicsPath object from a GdPicturePath object.
            </summary>
      <param name="path">The GdPicturePath object. Can be null or empty.</param>
      <param name="fillMode">Filling mode, a member of the GdPictureFillMode enumeration.</param>
      <returns>Always returns a GraphicsPath object, even if the path parameter is null or empty.</returns>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.Rendering.GDIPUtilities.getGdiPath(GdPicture12.Internal.Imaging.Drawing.GdPicturePath,GdPicture12.Internal.Imaging.Rendering.GdPictureFillMode,System.IntPtr@)">
      <summary>
            Builds a GraphicsPath object from a GdPicturePath object.
            </summary>
      <param name="path">The GdPicturePath object. Can be null or empty.</param>
      <param name="fillMode">Filling mode, a member of the GdPictureFillMode enumeration.</param>
      <param name="graphicsPath">If the GdPictureStatus returned by the method is OK, always returns a GraphicsPath handle, even if the path parameter is null or empty.</param>
      <returns>A member of the GdPictureStatus enumeration.</returns>
    </member>
    <member name="T:GdPicture12.Internal.Imaging.Rendering.GdPictureFillMode">
      <summary>
             Specifies how the interior of a closed path is filled.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Imaging.Rendering.GdPictureFillMode.Alternate">
      <summary>
             Specifies the alternate fill mode.
            </summary>
    </member>
    <member name="F:GdPicture12.Internal.Imaging.Rendering.GdPictureFillMode.Winding">
      <summary>
             Specifies the winding fill mode.
            </summary>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.Rendering.GdPictureRenderer.DrawImage(GdPicture12.Internal.Matrix.GdPictureMatrix,System.Boolean,GdPicture12.Internal.Imaging.GdPictureBitmap,System.Boolean,System.Byte[])">
      <summary>
      </summary>
      <param name="Mat">
      </param>
      <param name="ForceHQ">
      </param>
      <param name="bitmap">
      </param>
      <param name="isMasked">
      </param>
      <param name="palData">
      </param>
      <remarks>The Mat object can be altered by the method.</remarks>
      <returns>
      </returns>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.Rendering.GdPictureRenderer.RoundBox(GdPicture12.Internal.Globals.GdPictureRectF,System.Boolean,System.Boolean,System.Single@,System.Single@)">
      <summary>
            Intersect a BBOX bounding box with the canvas in order to reduce raster operations.
            </summary>
      <param name="BBox">The bbox bounding box.</param>
      <param name="warp1">If true, the rectangle height and width are enlarged by 1 unit.</param>
      <returns>The intersected region, as a rectangle.</returns>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.Rendering.GdPictureRenderer.RoundBoxSize(GdPicture12.Internal.Globals.GdPictureRectF,System.Boolean)">
      <summary>
            Intersect a BBOX bounding box with the canvas in order to reduce raster operations.
            </summary>
      <param name="BBox">The bbox bounding box.</param>
      <param name="warp1">If true, the rectangle height and width are enlarged by 1 unit.</param>
      <returns>The intersected region, as a rectangle.</returns>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.Rendering.WpfNative.WICBitmapLock.GetStride(System.IntPtr,System.UInt32@)">
      <SecurityNote>
             Critical as this code performs an elevation.
            </SecurityNote>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.Rendering.WpfNative.WICBitmapLock.GetDataPointer(System.IntPtr,System.UInt32@,System.IntPtr@)">
      <SecurityNote>
             Critical as this code performs an elevation.
            </SecurityNote>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.Rendering.WpfNative.Lock(System.IntPtr,System.Windows.Int32Rect@,GdPicture12.Internal.Imaging.Rendering.WpfNative.LockFlags,System.IntPtr@)">
      <SecurityNote>
             Critical as this code performs an elevation.
            </SecurityNote>
    </member>
    <member name="M:GdPicture12.Internal.Imaging.Rendering.WPFUtilities.getWPFPath(GdPicture12.Internal.Imaging.Drawing.GdPicturePath,GdPicture12.Internal.Imaging.Rendering.GdPictureFillMode,System.Boolean)">
      <summary>
            Builds a StreamGeometry object from a GdPicturePath object.
            </summary>
      <param name="path">The GdPicturePath object. Can be null or empty.</param>
      <param name="fillMode">Filling mode, a member of the GdPictureFillMode enumeration.</param>
      <param name="freeze">Specifies if the produced object must be freezed.</param>
      <returns>Always returns a StreamGeometry object, even if the path parameter is null or empty.</returns>
    </member>
    <member name="M:GdPicture12.Internal.Utils.BarcodeUtils.GetQuadriAngle(GdPicture12.Internal.Globals.GdPicturePointF,GdPicture12.Internal.Globals.GdPicturePointF,GdPicture12.Internal.Globals.GdPicturePointF,GdPicture12.Internal.Globals.GdPicturePointF)">
      <summary>
            Computes the rotation of a quadrilateral shape, in degrees, by analyzing  the position of the most-top visible side.
            The origin of the 2D space is top-left.
            </summary>
      <param name="p1">Position of the top-left corner.</param>
      <param name="p2">Position of the top-right corner.</param>
      <param name="p3">Position of the bottom-right corner.</param>
      <param name="p4">Position of the bottom-left corner.</param>
      <returns>The computed angle of rotation, in degrees.</returns>
    </member>
    <member name="M:GdPicture12.Internal.Utils.StringUtils.IsRandALCat(System.Char)">
      <summary>
            Return true for  All "AL" or "R" of Unicode 6.0 characters (from http://www.unicode.org/Public/6.0.0/ucd/UnicodeData.txt)
            </summary>
      <param name="c">the character</param>
      <remarks>ref: http://stackoverflow.com/questions/4330951/how-to-detect-whether-a-character-belongs-to-a-right-to-left-language</remarks>
    </member>
    <member name="M:GdPicture12.Internal.Utils.StringUtils.AnyTextToTLR(System.String)">
      <summary>
            The purpose of this method is to invert orientation of RTL text parts, if any, in order to write content to PDF.
            </summary>
      <param name="content">the string to parse.</param>
      <returns>A PDF friendly text string.</returns>
    </member>
    <member name="T:GdPicture12.Internal.Utils.StreamUtils.BitStreamReader">
      <summary>
            A stream-style reader for retrieving packed bits from a byte array.
            Ref: http://referencesource.microsoft.com/#PresentationCore/Shared/MS/Internal/Ink/BitStream.cs,6a7d84e516b71ab0
            </summary>
      <remarks>This bits should packed into the leftmost position in each byte.
            For compatibility purposes with the v1 ISF encoder and decoder, the order of the
            packing must not be changed. This code is a from-scratch rewrite of the BitStream
            natice C++ class in the v1 Ink code, but still maintaining the same packing
            behavior.</remarks>
    </member>
    <member name="M:GdPicture12.Internal.Utils.StreamUtils.BitStreamReader.#ctor(System.Byte[])">
      <summary>
            Create a new BitStreamReader to unpack the bits in a buffer of bytes
            </summary>
      <param name="buffer">Buffer of bytes</param>
    </member>
    <member name="M:GdPicture12.Internal.Utils.StreamUtils.BitStreamReader.#ctor(System.Byte[],System.Int32)">
      <summary>
            Create a new BitStreamReader to unpack the bits in a buffer of bytes
            </summary>
      <param name="buffer">Buffer of bytes</param>
      <param name="startIndex">The index to start reading at</param>
    </member>
    <member name="M:GdPicture12.Internal.Utils.StreamUtils.BitStreamReader.#ctor(System.Byte[],System.UInt32)">
      <summary>
            Create a new BitStreamReader to unpack the bits in a buffer of bytes
            and enforce a maximum buffer read length
            </summary>
      <param name="buffer">Buffer of bytes</param>
      <param name="bufferLengthInBits">Maximum number of bytes to read from the buffer</param>
    </member>
    <member name="M:GdPicture12.Internal.Utils.StreamUtils.BitStreamReader.ByteAlign">
      <summary>
            Aligns the cursor position to the next byte.
            </summary>
    </member>
    <member name="M:GdPicture12.Internal.Utils.StreamUtils.BitStreamReader.ReadUInt64(System.Int32)">
      <summary>
            Read a specified number of bits from the stream into a long
            </summary>
    </member>
    <member name="M:GdPicture12.Internal.Utils.StreamUtils.BitStreamReader.ReadUInt16(System.Int32)">
      <summary>
            Read a single UInt16 from the byte[]
            </summary>
      <param name="countOfBits">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GdPicture12.Internal.Utils.StreamUtils.BitStreamReader.ReadUInt16Reverse(System.Int32)">
      <summary>
            Read a specified number of bits from the stream in reverse byte order
            </summary>
    </member>
    <member name="M:GdPicture12.Internal.Utils.StreamUtils.BitStreamReader.ReadUInt32(System.Int32)">
      <summary>
            Read a specified number of bits from the stream into a single byte
            </summary>
    </member>
    <member name="M:GdPicture12.Internal.Utils.StreamUtils.BitStreamReader.ReadUInt32Reverse(System.Int32)">
      <summary>
            Read a specified number of bits from the stream in reverse byte order
            </summary>
    </member>
    <member name="M:GdPicture12.Internal.Utils.StreamUtils.BitStreamReader.ReadBit">
      <summary>
            Reads a single bit from the buffer
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:GdPicture12.Internal.Utils.StreamUtils.BitStreamReader.ReadByte(System.Int32)">
      <summary>
            Read a specified number of bits from the stream into a single byte
            </summary>
      <param name="countOfBits">The number of bits to unpack</param>
      <returns>A single byte that contains up to 8 packed bits</returns>
      <remarks>For example, if 2 bits are read from the stream, then a full byte
            will be created with the least significant bits set to the 2 unpacked bits
            from the stream</remarks>
    </member>
    <member name="P:GdPicture12.Internal.Utils.StreamUtils.BitStreamReader.EndOfStream">
      <summary>
            Since the return value of Read cannot distinguish between valid and invalid
            data (e.g. 8 bits set), the EndOfStream property detects when there is no more
            data to read.
            </summary>
      <value>True if stream end has been reached</value>
    </member>
    <member name="P:GdPicture12.Internal.Utils.StreamUtils.BitStreamReader.CurrentIndex">
      <summary>
            The current read index in the array
            </summary>
    </member>
    <member name="T:GdPicture12.Internal.Utils.StreamUtils.BitStreamWriter">
      <summary>
            A stream-like writer for packing bits into a byte buffer.
            Ref: http://referencesource.microsoft.com/#PresentationCore/Shared/MS/Internal/Ink/BitStream.cs,6a7d84e516b71ab0
            </summary>
      <remarks>This class is to be used with the BitStreamReader for reading
            and writing bytes. Note that the bytes should be read in the same order
            and lengths as they were written to retrieve the same values.
            See remarks in BitStreamReader regarding compatibility with the native C++
            BitStream class.</remarks>
    </member>
    <member name="M:GdPicture12.Internal.Utils.StreamUtils.BitStreamWriter.#ctor(System.Collections.Generic.List{System.Byte})">
      <summary>
            Create a new bit writer that writes to the target buffer
            </summary>
      <param name="bufferToWriteTo">
      </param>
    </member>
    <member name="M:GdPicture12.Internal.Utils.StreamUtils.BitStreamWriter.Write(System.UInt32,System.Int32)">
      <summary>
            Writes the count of bits from the int to the left packed buffer
            </summary>
      <param name="bits">
      </param>
      <param name="countOfBits">
      </param>
    </member>
    <member name="M:GdPicture12.Internal.Utils.StreamUtils.BitStreamWriter.WriteReverse(System.UInt32,System.Int32)">
      <summary>
            Writes the count of bits from the int to the buffer in reverse order
            </summary>
      <param name="bits">
      </param>
      <param name="countOfBits">
      </param>
    </member>
    <member name="M:GdPicture12.Internal.Utils.StreamUtils.BitStreamWriter.Write(System.Byte,System.Int32)">
      <summary>
            Write a specific number of bits from byte input into the stream
            </summary>
      <param name="bits">The byte to read the bits from</param>
      <param name="countOfBits">The number of bits to read</param>
    </member>
    <member name="M:GdPicture12.Internal.Utils.ByteArrayUtils.Compare(System.Byte[],System.Byte[],System.Int32)">
      <summary>
            Check if the array contains needle at specified position.
            </summary>
      <param name="array">Source array to check for needle.</param>
      <param name="needle">Needle we are searching for.</param>
      <param name="startIndex">Start index in source array.</param>
      <returns>Returns <b>true</b> if the source array contains the needle at
            the specified index. Otherwise it returns <b>false</b>.</returns>
    </member>
    <member name="M:GdPicture12.Internal.Utils.ByteArrayUtils.Find(System.Byte[],System.Byte[],System.Int32,System.Int32)">
      <summary>
            Find subarray in the source array.
            </summary>
      <param name="array">Source array to search for needle.</param>
      <param name="needle">Needle we are searching for.</param>
      <param name="startIndex">Start index in source array.</param>
      <param name="sourceLength">Number of bytes in source array, where the needle is searched for.</param>
      <returns>Returns starting position of the needle if it was found or <b>-1</b> otherwise.</returns>
    </member>
    <member name="M:GdPicture12.Internal.Utils.PagesRangeUtils.inPageRange(System.Int32,System.String)">
      <summary>
            Checks if a page number is in a predefined page range.
            Can be '*': all page, or in a form such as start-to;start_to;page.
            This function is safe and never throws exception.
            </summary>
      <param name="pageNo">the page number to check</param>
      <param name="pageRange">the string page range, the parameter must be validated by the calling function.</param>
      <returns>true or false.</returns>
    </member>
    <member name="M:GdPicture12.Internal.Utils.UriUtils.MakePackUri(System.String,System.String)">
      <summary>
            Helper method for generating a "pack://" URI for a given relative file based on the
            assembly that this class is in.
            </summary>
    </member>
    <member name="M:GdPicture12.Internal.Barcode.Barcode1DReader.Code39decodeExtended(System.String)">
      <summary>
            attempt to decode extended Code 39 sequences. 
            This is a port of private static String decodeExtended(CharSequence encoded) throws FormatException. see:  https://code.google.com/p/zxing/source/browse/trunk/core/src/com/google/zxing/oned/Code39Reader.java?r=2114
            </summary>
      <remarks> 'see: http://en.wikipedia.org/wiki/Code_39   #Full ASCII Code 39.</remarks>
    </member>
  </members>
</doc>