#pragma once

#include <afxmt.h>

//BEGIN BACWARD COMPATIBILITY CODE FOR TBSOAPLISTENER

#define TB_REGISTER_SOAP_SERVICE(dummy)

//END BACWARD COMPATIBILITY CODE FOR TBSOAPLISTENER

#include "UserMessages.h"
#include "TbWinThread.h"

// blocco try catch solo in release: in debug preferisco
// avere "unhandled exception" per localizzare prima l'errore
#ifdef _DEBUG 
#	define TB_TRY 
#	define TB_CATCH				if (FALSE)
#else
#	define TB_TRY				_ATLTRY
#	define TB_CATCH				_ATLCATCHALL()
#endif


//changes locally a value, and restores it at the end of scope
template <class T>
class CLocalChange
{
	T m_OldValue;
	T& m_Variable;
public:
	CLocalChange(T& variable, T newValue)
		: m_Variable(variable)
	{
		m_OldValue = variable;
		m_Variable = newValue;
	}
	~CLocalChange()
	{
		m_Variable = m_OldValue;
	}
};

//manages automatic pointer deletion using reference count
template <class T> class SmartPtr 
{
private:
   	T *m_ptr;

	void  Refs(T *ptr, int& nRef, BOOL bSet)		
	{
		static CPtrArray ptrs;
		static CUIntArray refs;
		
		int i = -1;
		for (int k=0; k<ptrs.GetSize(); k++)
			if (ptrs[k] == ptr)  
			{
				i=k;
				break;
			}
		
		if(bSet)	// set
		{
			if(nRef==0)
			{
				if(i != -1)
				{
					ptrs.RemoveAt(i);
					refs.RemoveAt(i);
				}
			}
			else
			{
				if(i != -1)
				{
					refs[i] = nRef;
				}
				else
				{
					ptrs.Add(ptr);
					refs.Add(nRef);
				}	
			}
		}
		else		// get
		{
			if(i != -1)
			{
				nRef= refs[i];
			}
			else
			{
				nRef = 0;
			}
		}
	}

	void AddRef (T *ptr)
	{
		if(ptr!=NULL)
		{
			int nRef;
			Refs(ptr, nRef, FALSE); //get
			Refs(ptr, ++nRef, TRUE); //set
		}
	}

	void Release (T *ptr)
	{
		if(ptr!=NULL)
		{
			int nRef;
			Refs(ptr, nRef, FALSE); //get
			Refs(ptr, --nRef, TRUE); //set

			if(nRef == 0) 
			{ 
				delete m_ptr;
			}
			else if (nRef < 0)
				ASSERT(FALSE);
		}
	}

public:
   	SmartPtr	()						{m_ptr = NULL;}
   	SmartPtr	(T* ptr)				{m_ptr = ptr; AddRef(m_ptr);}
   	SmartPtr	(const SmartPtr& sPtr)	{m_ptr = NULL; operator =(sPtr.m_ptr);}
 
   	~SmartPtr	()						{Release(m_ptr);}

				operator BOOL	()				{return m_ptr!=NULL;}
	
	const T&	operator *		() 				{return *m_ptr;} 
   	
   	T*			operator =		(T* ptr)		{if (m_ptr) Release(m_ptr); m_ptr = ptr; AddRef(m_ptr); return m_ptr;}
   	SmartPtr	operator =		(SmartPtr sPtr)	{operator =(sPtr.m_ptr); return *this;}

   	BOOL		operator ==		(T* ptr)		{return m_ptr == ptr;}
   	BOOL		operator !=		(T* ptr)		{return m_ptr != ptr;}
   	
   	T*			operator ->		()				{return m_ptr;}
				operator T*		()				{return m_ptr;}
	void		AddRef			()				{AddRef(m_ptr);}
	void		Release			()				{Release(m_ptr);}

};

//manages automatic pointer deletion 
template <class T> class AutoDeletePtr
{
private:
	T *m_ptr;

public:
	AutoDeletePtr()						{ m_ptr = NULL; }
	AutoDeletePtr(T* ptr)				{ m_ptr = ptr; }
	AutoDeletePtr(const AutoDeletePtr& sPtr)	{ operator =(sPtr.m_ptr); }

	~AutoDeletePtr()						{ delete m_ptr; }

	operator BOOL	()				{ return m_ptr != NULL; }

	const T&	operator *		() 				{ return *m_ptr; }

	T*			operator =		(T* ptr)		{ delete m_ptr; m_ptr = ptr; return m_ptr; }
	AutoDeletePtr	operator =		(AutoDeletePtr sPtr)	{ operator =(sPtr.m_ptr); return *this; }

	BOOL		operator ==		(T* ptr)		{ return m_ptr == ptr; }
	BOOL		operator !=		(T* ptr)		{ return m_ptr != ptr; }

	T*			operator ->		()				{ return m_ptr; }
	operator T*		()				{ return m_ptr; }

};
#define TB_INVOKE_TEMPLATES //used to switch code compilation between ERP 2.10 and ERP 3.0

#define CALL_THREAD_WAIT 60000



//MACHINE GENERATED CODE START********************************************************************


//==================================================================================
template <class TRetValClass, class TObjectClass>
class CFunctionT_Param0 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)();
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param0(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param0(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)();
		
	}
};
// used for class functions with 0 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function();
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)())
{
	CFunctionT_Param0<TRetValClass, TObjectClass>  f(threadIdentifier, pObject, function);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)())
{
	CFunctionT_Param0<TRetValClass, TObjectClass>* f = new CFunctionT_Param0<TRetValClass, TObjectClass>(threadIdentifier, pObject, function);
	f->Call(TRUE);
}

// used for class functions with 0 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function();
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)())
{
	CFunctionT_Param0<TRetValClass, TObjectClass>  f(threadIdentifier, pObject, function);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)())
{
	CFunctionT_Param0<TRetValClass, TObjectClass>* f = new CFunctionT_Param0<TRetValClass, TObjectClass>(threadIdentifier, pObject, function);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1>
class CFunctionT_Param1 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param1(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param1(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1);
		
	}
};
// used for class functions with 1 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1), TParam1 param1)
{
	CFunctionT_Param1<TRetValClass, TObjectClass, TParam1>  f(threadIdentifier, pObject, function, param1);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1), TParam1 param1)
{
	CFunctionT_Param1<TRetValClass, TObjectClass, TParam1>* f = new CFunctionT_Param1<TRetValClass, TObjectClass, TParam1>(threadIdentifier, pObject, function, param1);
	f->Call(TRUE);
}

// used for class functions with 1 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1), TParam1 param1)
{
	CFunctionT_Param1<TRetValClass, TObjectClass, TParam1>  f(threadIdentifier, pObject, function, param1);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1), TParam1 param1)
{
	CFunctionT_Param1<TRetValClass, TObjectClass, TParam1>* f = new CFunctionT_Param1<TRetValClass, TObjectClass, TParam1>(threadIdentifier, pObject, function, param1);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2>
class CFunctionT_Param2 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param2(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param2(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2);
		
	}
};
// used for class functions with 2 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2), TParam1 param1, TParam2 param2)
{
	CFunctionT_Param2<TRetValClass, TObjectClass, TParam1, TParam2>  f(threadIdentifier, pObject, function, param1, param2);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2), TParam1 param1, TParam2 param2)
{
	CFunctionT_Param2<TRetValClass, TObjectClass, TParam1, TParam2>* f = new CFunctionT_Param2<TRetValClass, TObjectClass, TParam1, TParam2>(threadIdentifier, pObject, function, param1, param2);
	f->Call(TRUE);
}

// used for class functions with 2 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2), TParam1 param1, TParam2 param2)
{
	CFunctionT_Param2<TRetValClass, TObjectClass, TParam1, TParam2>  f(threadIdentifier, pObject, function, param1, param2);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2), TParam1 param1, TParam2 param2)
{
	CFunctionT_Param2<TRetValClass, TObjectClass, TParam1, TParam2>* f = new CFunctionT_Param2<TRetValClass, TObjectClass, TParam1, TParam2>(threadIdentifier, pObject, function, param1, param2);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3>
class CFunctionT_Param3 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param3(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param3(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3);
		
	}
};
// used for class functions with 3 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3), TParam1 param1, TParam2 param2, TParam3 param3)
{
	CFunctionT_Param3<TRetValClass, TObjectClass, TParam1, TParam2, TParam3>  f(threadIdentifier, pObject, function, param1, param2, param3);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3), TParam1 param1, TParam2 param2, TParam3 param3)
{
	CFunctionT_Param3<TRetValClass, TObjectClass, TParam1, TParam2, TParam3>* f = new CFunctionT_Param3<TRetValClass, TObjectClass, TParam1, TParam2, TParam3>(threadIdentifier, pObject, function, param1, param2, param3);
	f->Call(TRUE);
}

// used for class functions with 3 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3), TParam1 param1, TParam2 param2, TParam3 param3)
{
	CFunctionT_Param3<TRetValClass, TObjectClass, TParam1, TParam2, TParam3>  f(threadIdentifier, pObject, function, param1, param2, param3);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3), TParam1 param1, TParam2 param2, TParam3 param3)
{
	CFunctionT_Param3<TRetValClass, TObjectClass, TParam1, TParam2, TParam3>* f = new CFunctionT_Param3<TRetValClass, TObjectClass, TParam1, TParam2, TParam3>(threadIdentifier, pObject, function, param1, param2, param3);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4>
class CFunctionT_Param4 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param4(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param4(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4);
		
	}
};
// used for class functions with 4 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
{
	CFunctionT_Param4<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4>  f(threadIdentifier, pObject, function, param1, param2, param3, param4);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
{
	CFunctionT_Param4<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4>* f = new CFunctionT_Param4<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4>(threadIdentifier, pObject, function, param1, param2, param3, param4);
	f->Call(TRUE);
}

// used for class functions with 4 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
{
	CFunctionT_Param4<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4>  f(threadIdentifier, pObject, function, param1, param2, param3, param4);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
{
	CFunctionT_Param4<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4>* f = new CFunctionT_Param4<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4>(threadIdentifier, pObject, function, param1, param2, param3, param4);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
class CFunctionT_Param5 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param5(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param5(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5);
		
	}
};
// used for class functions with 5 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
{
	CFunctionT_Param5<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
{
	CFunctionT_Param5<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5>* f = new CFunctionT_Param5<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5);
	f->Call(TRUE);
}

// used for class functions with 5 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
{
	CFunctionT_Param5<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
{
	CFunctionT_Param5<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5>* f = new CFunctionT_Param5<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
class CFunctionT_Param6 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param6(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param6(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6);
		
	}
};
// used for class functions with 6 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
{
	CFunctionT_Param6<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
{
	CFunctionT_Param6<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>* f = new CFunctionT_Param6<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6);
	f->Call(TRUE);
}

// used for class functions with 6 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
{
	CFunctionT_Param6<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
{
	CFunctionT_Param6<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>* f = new CFunctionT_Param6<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
class CFunctionT_Param7 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param7(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param7(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7);
		
	}
};
// used for class functions with 7 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
{
	CFunctionT_Param7<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
{
	CFunctionT_Param7<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>* f = new CFunctionT_Param7<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7);
	f->Call(TRUE);
}

// used for class functions with 7 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
{
	CFunctionT_Param7<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
{
	CFunctionT_Param7<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>* f = new CFunctionT_Param7<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
class CFunctionT_Param8 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param8(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param8(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8);
		
	}
};
// used for class functions with 8 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
{
	CFunctionT_Param8<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
{
	CFunctionT_Param8<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>* f = new CFunctionT_Param8<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8);
	f->Call(TRUE);
}

// used for class functions with 8 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
{
	CFunctionT_Param8<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
{
	CFunctionT_Param8<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>* f = new CFunctionT_Param8<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
class CFunctionT_Param9 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param9(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param9(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9);
		
	}
};
// used for class functions with 9 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
{
	CFunctionT_Param9<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
{
	CFunctionT_Param9<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>* f = new CFunctionT_Param9<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9);
	f->Call(TRUE);
}

// used for class functions with 9 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
{
	CFunctionT_Param9<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
{
	CFunctionT_Param9<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>* f = new CFunctionT_Param9<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
class CFunctionT_Param10 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param10(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param10(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10);
		
	}
};
// used for class functions with 10 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
{
	CFunctionT_Param10<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
{
	CFunctionT_Param10<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>* f = new CFunctionT_Param10<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
	f->Call(TRUE);
}

// used for class functions with 10 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
{
	CFunctionT_Param10<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
{
	CFunctionT_Param10<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>* f = new CFunctionT_Param10<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
class CFunctionT_Param11 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param11(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param11(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11);
		
	}
};
// used for class functions with 11 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
{
	CFunctionT_Param11<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
{
	CFunctionT_Param11<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>* f = new CFunctionT_Param11<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
	f->Call(TRUE);
}

// used for class functions with 11 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
{
	CFunctionT_Param11<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
{
	CFunctionT_Param11<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>* f = new CFunctionT_Param11<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
class CFunctionT_Param12 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param12(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param12(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12);
		
	}
};
// used for class functions with 12 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
{
	CFunctionT_Param12<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
{
	CFunctionT_Param12<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>* f = new CFunctionT_Param12<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
	f->Call(TRUE);
}

// used for class functions with 12 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
{
	CFunctionT_Param12<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
{
	CFunctionT_Param12<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>* f = new CFunctionT_Param12<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
class CFunctionT_Param13 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param13(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param13(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13);
		
	}
};
// used for class functions with 13 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
{
	CFunctionT_Param13<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
{
	CFunctionT_Param13<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>* f = new CFunctionT_Param13<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);
	f->Call(TRUE);
}

// used for class functions with 13 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
{
	CFunctionT_Param13<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
{
	CFunctionT_Param13<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>* f = new CFunctionT_Param13<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
class CFunctionT_Param14 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param14(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param14(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14);
		
	}
};
// used for class functions with 14 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
{
	CFunctionT_Param14<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
{
	CFunctionT_Param14<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>* f = new CFunctionT_Param14<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14);
	f->Call(TRUE);
}

// used for class functions with 14 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
{
	CFunctionT_Param14<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
{
	CFunctionT_Param14<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>* f = new CFunctionT_Param14<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
class CFunctionT_Param15 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param15(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param15(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15);
		
	}
};
// used for class functions with 15 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
{
	CFunctionT_Param15<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
{
	CFunctionT_Param15<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>* f = new CFunctionT_Param15<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15);
	f->Call(TRUE);
}

// used for class functions with 15 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
{
	CFunctionT_Param15<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
{
	CFunctionT_Param15<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>* f = new CFunctionT_Param15<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
class CFunctionT_Param16 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param16(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param16(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16);
		
	}
};
// used for class functions with 16 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
{
	CFunctionT_Param16<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
{
	CFunctionT_Param16<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>* f = new CFunctionT_Param16<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16);
	f->Call(TRUE);
}

// used for class functions with 16 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
{
	CFunctionT_Param16<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
{
	CFunctionT_Param16<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>* f = new CFunctionT_Param16<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
class CFunctionT_Param17 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param17(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param17(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17);
		
	}
};
// used for class functions with 17 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
{
	CFunctionT_Param17<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
{
	CFunctionT_Param17<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>* f = new CFunctionT_Param17<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17);
	f->Call(TRUE);
}

// used for class functions with 17 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
{
	CFunctionT_Param17<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
{
	CFunctionT_Param17<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>* f = new CFunctionT_Param17<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
class CFunctionT_Param18 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param18(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param18(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18);
		
	}
};
// used for class functions with 18 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
{
	CFunctionT_Param18<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
{
	CFunctionT_Param18<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>* f = new CFunctionT_Param18<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18);
	f->Call(TRUE);
}

// used for class functions with 18 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
{
	CFunctionT_Param18<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
{
	CFunctionT_Param18<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>* f = new CFunctionT_Param18<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
class CFunctionT_Param19 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param19(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param19(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19);
		
	}
};
// used for class functions with 19 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
{
	CFunctionT_Param19<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
{
	CFunctionT_Param19<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>* f = new CFunctionT_Param19<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19);
	f->Call(TRUE);
}

// used for class functions with 19 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
{
	CFunctionT_Param19<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
{
	CFunctionT_Param19<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>* f = new CFunctionT_Param19<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
class CFunctionT_Param20 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param20(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param20(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20);
		
	}
};
// used for class functions with 20 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
{
	CFunctionT_Param20<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
{
	CFunctionT_Param20<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>* f = new CFunctionT_Param20<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);
	f->Call(TRUE);
}

// used for class functions with 20 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
{
	CFunctionT_Param20<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
{
	CFunctionT_Param20<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>* f = new CFunctionT_Param20<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
class CFunctionT_Param21 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param21(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param21(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21);
		
	}
};
// used for class functions with 21 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
{
	CFunctionT_Param21<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
{
	CFunctionT_Param21<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>* f = new CFunctionT_Param21<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21);
	f->Call(TRUE);
}

// used for class functions with 21 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
{
	CFunctionT_Param21<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
{
	CFunctionT_Param21<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>* f = new CFunctionT_Param21<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
class CFunctionT_Param22 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param22(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param22(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22);
		
	}
};
// used for class functions with 22 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
{
	CFunctionT_Param22<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
{
	CFunctionT_Param22<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>* f = new CFunctionT_Param22<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22);
	f->Call(TRUE);
}

// used for class functions with 22 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
{
	CFunctionT_Param22<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
{
	CFunctionT_Param22<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>* f = new CFunctionT_Param22<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
class CFunctionT_Param23 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param23(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param23(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23);
		
	}
};
// used for class functions with 23 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
{
	CFunctionT_Param23<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
{
	CFunctionT_Param23<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>* f = new CFunctionT_Param23<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23);
	f->Call(TRUE);
}

// used for class functions with 23 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
{
	CFunctionT_Param23<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
{
	CFunctionT_Param23<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>* f = new CFunctionT_Param23<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
class CFunctionT_Param24 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param24(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param24(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24);
		
	}
};
// used for class functions with 24 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
{
	CFunctionT_Param24<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
{
	CFunctionT_Param24<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>* f = new CFunctionT_Param24<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24);
	f->Call(TRUE);
}

// used for class functions with 24 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
{
	CFunctionT_Param24<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
{
	CFunctionT_Param24<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>* f = new CFunctionT_Param24<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
class CFunctionT_Param25 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param25(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param25(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25);
		
	}
};
// used for class functions with 25 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
{
	CFunctionT_Param25<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
{
	CFunctionT_Param25<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>* f = new CFunctionT_Param25<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25);
	f->Call(TRUE);
}

// used for class functions with 25 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
{
	CFunctionT_Param25<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
{
	CFunctionT_Param25<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>* f = new CFunctionT_Param25<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
class CFunctionT_Param26 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param26(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param26(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26);
		
	}
};
// used for class functions with 26 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
{
	CFunctionT_Param26<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
{
	CFunctionT_Param26<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>* f = new CFunctionT_Param26<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26);
	f->Call(TRUE);
}

// used for class functions with 26 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
{
	CFunctionT_Param26<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
{
	CFunctionT_Param26<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>* f = new CFunctionT_Param26<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
class CFunctionT_Param27 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param27(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param27(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27);
		
	}
};
// used for class functions with 27 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
{
	CFunctionT_Param27<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
{
	CFunctionT_Param27<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>* f = new CFunctionT_Param27<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27);
	f->Call(TRUE);
}

// used for class functions with 27 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
{
	CFunctionT_Param27<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
{
	CFunctionT_Param27<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>* f = new CFunctionT_Param27<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
class CFunctionT_Param28 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param28(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param28(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28);
		
	}
};
// used for class functions with 28 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
{
	CFunctionT_Param28<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
{
	CFunctionT_Param28<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>* f = new CFunctionT_Param28<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28);
	f->Call(TRUE);
}

// used for class functions with 28 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
{
	CFunctionT_Param28<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
{
	CFunctionT_Param28<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>* f = new CFunctionT_Param28<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
class CFunctionT_Param29 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param29(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param29(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29);
		
	}
};
// used for class functions with 29 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
{
	CFunctionT_Param29<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
{
	CFunctionT_Param29<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>* f = new CFunctionT_Param29<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29);
	f->Call(TRUE);
}

// used for class functions with 29 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
{
	CFunctionT_Param29<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
{
	CFunctionT_Param29<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>* f = new CFunctionT_Param29<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
class CFunctionT_Param30 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param30(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param30(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30);
		
	}
};
// used for class functions with 30 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
{
	CFunctionT_Param30<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
{
	CFunctionT_Param30<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>* f = new CFunctionT_Param30<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30);
	f->Call(TRUE);
}

// used for class functions with 30 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
{
	CFunctionT_Param30<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
{
	CFunctionT_Param30<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>* f = new CFunctionT_Param30<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
class CFunctionT_Param31 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param31(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param31(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31);
		
	}
};
// used for class functions with 31 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
{
	CFunctionT_Param31<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
{
	CFunctionT_Param31<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>* f = new CFunctionT_Param31<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31);
	f->Call(TRUE);
}

// used for class functions with 31 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
{
	CFunctionT_Param31<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
{
	CFunctionT_Param31<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>* f = new CFunctionT_Param31<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
class CFunctionT_Param32 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param32(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param32(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32);
		
	}
};
// used for class functions with 32 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
{
	CFunctionT_Param32<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
{
	CFunctionT_Param32<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>* f = new CFunctionT_Param32<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32);
	f->Call(TRUE);
}

// used for class functions with 32 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
{
	CFunctionT_Param32<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
{
	CFunctionT_Param32<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>* f = new CFunctionT_Param32<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
class CFunctionT_Param33 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param33(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param33(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33);
		
	}
};
// used for class functions with 33 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
{
	CFunctionT_Param33<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
{
	CFunctionT_Param33<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>* f = new CFunctionT_Param33<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33);
	f->Call(TRUE);
}

// used for class functions with 33 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
{
	CFunctionT_Param33<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
{
	CFunctionT_Param33<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>* f = new CFunctionT_Param33<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
class CFunctionT_Param34 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param34(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param34(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34);
		
	}
};
// used for class functions with 34 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
{
	CFunctionT_Param34<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
{
	CFunctionT_Param34<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>* f = new CFunctionT_Param34<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34);
	f->Call(TRUE);
}

// used for class functions with 34 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
{
	CFunctionT_Param34<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
{
	CFunctionT_Param34<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>* f = new CFunctionT_Param34<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
class CFunctionT_Param35 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param35(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param35(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35);
		
	}
};
// used for class functions with 35 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
{
	CFunctionT_Param35<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
{
	CFunctionT_Param35<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>* f = new CFunctionT_Param35<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35);
	f->Call(TRUE);
}

// used for class functions with 35 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
{
	CFunctionT_Param35<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
{
	CFunctionT_Param35<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>* f = new CFunctionT_Param35<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
class CFunctionT_Param36 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param36(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param36(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36);
		
	}
};
// used for class functions with 36 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
{
	CFunctionT_Param36<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
{
	CFunctionT_Param36<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>* f = new CFunctionT_Param36<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36);
	f->Call(TRUE);
}

// used for class functions with 36 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
{
	CFunctionT_Param36<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
{
	CFunctionT_Param36<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>* f = new CFunctionT_Param36<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
class CFunctionT_Param37 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
	TParam37	m_Param37;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param37(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param37(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36, m_Param37);
		
	}
};
// used for class functions with 37 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
{
	CFunctionT_Param37<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
{
	CFunctionT_Param37<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>* f = new CFunctionT_Param37<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37);
	f->Call(TRUE);
}

// used for class functions with 37 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
{
	CFunctionT_Param37<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
{
	CFunctionT_Param37<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>* f = new CFunctionT_Param37<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
class CFunctionT_Param38 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
	TParam37	m_Param37;
	TParam38	m_Param38;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param38(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param38(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36, m_Param37, m_Param38);
		
	}
};
// used for class functions with 38 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
{
	CFunctionT_Param38<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
{
	CFunctionT_Param38<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>* f = new CFunctionT_Param38<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38);
	f->Call(TRUE);
}

// used for class functions with 38 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
{
	CFunctionT_Param38<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
{
	CFunctionT_Param38<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>* f = new CFunctionT_Param38<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
class CFunctionT_Param39 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
	TParam37	m_Param37;
	TParam38	m_Param38;
	TParam39	m_Param39;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param39(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38)
	, m_Param39(param39){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param39(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38)
	, m_Param39(param39){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36, m_Param37, m_Param38, m_Param39);
		
	}
};
// used for class functions with 39 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>, <TParam39>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
{
	CFunctionT_Param39<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
{
	CFunctionT_Param39<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>* f = new CFunctionT_Param39<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39);
	f->Call(TRUE);
}

// used for class functions with 39 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>, <TParam39>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
{
	CFunctionT_Param39<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
{
	CFunctionT_Param39<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>* f = new CFunctionT_Param39<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
class CFunctionT_Param40 : public CBaseFunctionWrapper
{
	typedef TRetValClass (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
	TParam37	m_Param37;
	TParam38	m_Param38;
	TParam39	m_Param39;
	TParam40	m_Param40;
public:
	TRetValClass		m_RetVal;
	//----------------------------------------------------------------------------
	CFunctionT_Param40(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38)
	, m_Param39(param39)
	, m_Param40(param40){
}
	//----------------------------------------------------------------------------
	CFunctionT_Param40(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38)
	, m_Param39(param39)
	, m_Param40(param40){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36, m_Param37, m_Param38, m_Param39, m_Param40);
		
	}
};
// used for class functions with 40 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>, <TParam39>, <TParam40>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
TRetValClass AfxInvokeThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
{
	CFunctionT_Param40<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39, param40);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
void AfxInvokeAsyncThreadFunction(DWORD threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
{
	CFunctionT_Param40<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>* f = new CFunctionT_Param40<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39, param40);
	f->Call(TRUE);
}

// used for class functions with 40 parameters; prototype:
// <TRetValClass> <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>, <TParam39>, <TParam40>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
TRetValClass AfxInvokeThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
{
	CFunctionT_Param40<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39, param40);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
void AfxInvokeAsyncThreadFunction(HWND threadIdentifier, TObjectClass* pObject, TRetValClass (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
{
	CFunctionT_Param40<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>* f = new CFunctionT_Param40<TRetValClass, TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39, param40);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass>
class CProcedureT_Param0 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)();
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param0(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer){
}
//----------------------------------------------------------------------------
	CProcedureT_Param0(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)();
		
	}
};

// used for class procedures (no return value) with 0 parameters; prototype:
// void <TObjectClass>::Function();
//-----------------------------------------------------------------------------
template <class TObjectClass>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)())
{
	CProcedureT_Param0<TObjectClass>  f(threadIdentifier, pObject, function);
	f.Call(FALSE);
}
//async version
template <class TObjectClass>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)())
{
	CProcedureT_Param0<TObjectClass>* f = new CProcedureT_Param0<TObjectClass>(threadIdentifier, pObject, function);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 0 parameters; prototype:
// void <TObjectClass>::Function();
//-----------------------------------------------------------------------------
template <class TObjectClass>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)())
{
	CProcedureT_Param0<TObjectClass>  f(threadIdentifier, pObject, function);
	f.Call(FALSE);
}
//async version
template <class TObjectClass>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)())
{
	CProcedureT_Param0<TObjectClass>* f = new CProcedureT_Param0<TObjectClass>(threadIdentifier, pObject, function);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1>
class CProcedureT_Param1 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param1(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1){
}
//----------------------------------------------------------------------------
	CProcedureT_Param1(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1);
		
	}
};

// used for class procedures (no return value) with 1 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1), TParam1 param1)
{
	CProcedureT_Param1<TObjectClass, TParam1>  f(threadIdentifier, pObject, function, param1);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1), TParam1 param1)
{
	CProcedureT_Param1<TObjectClass, TParam1>* f = new CProcedureT_Param1<TObjectClass, TParam1>(threadIdentifier, pObject, function, param1);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 1 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1), TParam1 param1)
{
	CProcedureT_Param1<TObjectClass, TParam1>  f(threadIdentifier, pObject, function, param1);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1), TParam1 param1)
{
	CProcedureT_Param1<TObjectClass, TParam1>* f = new CProcedureT_Param1<TObjectClass, TParam1>(threadIdentifier, pObject, function, param1);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2>
class CProcedureT_Param2 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param2(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2){
}
//----------------------------------------------------------------------------
	CProcedureT_Param2(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2);
		
	}
};

// used for class procedures (no return value) with 2 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2), TParam1 param1, TParam2 param2)
{
	CProcedureT_Param2<TObjectClass, TParam1, TParam2>  f(threadIdentifier, pObject, function, param1, param2);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2), TParam1 param1, TParam2 param2)
{
	CProcedureT_Param2<TObjectClass, TParam1, TParam2>* f = new CProcedureT_Param2<TObjectClass, TParam1, TParam2>(threadIdentifier, pObject, function, param1, param2);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 2 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2), TParam1 param1, TParam2 param2)
{
	CProcedureT_Param2<TObjectClass, TParam1, TParam2>  f(threadIdentifier, pObject, function, param1, param2);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2), TParam1 param1, TParam2 param2)
{
	CProcedureT_Param2<TObjectClass, TParam1, TParam2>* f = new CProcedureT_Param2<TObjectClass, TParam1, TParam2>(threadIdentifier, pObject, function, param1, param2);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3>
class CProcedureT_Param3 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param3(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3){
}
//----------------------------------------------------------------------------
	CProcedureT_Param3(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3);
		
	}
};

// used for class procedures (no return value) with 3 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3), TParam1 param1, TParam2 param2, TParam3 param3)
{
	CProcedureT_Param3<TObjectClass, TParam1, TParam2, TParam3>  f(threadIdentifier, pObject, function, param1, param2, param3);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3), TParam1 param1, TParam2 param2, TParam3 param3)
{
	CProcedureT_Param3<TObjectClass, TParam1, TParam2, TParam3>* f = new CProcedureT_Param3<TObjectClass, TParam1, TParam2, TParam3>(threadIdentifier, pObject, function, param1, param2, param3);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 3 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3), TParam1 param1, TParam2 param2, TParam3 param3)
{
	CProcedureT_Param3<TObjectClass, TParam1, TParam2, TParam3>  f(threadIdentifier, pObject, function, param1, param2, param3);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3), TParam1 param1, TParam2 param2, TParam3 param3)
{
	CProcedureT_Param3<TObjectClass, TParam1, TParam2, TParam3>* f = new CProcedureT_Param3<TObjectClass, TParam1, TParam2, TParam3>(threadIdentifier, pObject, function, param1, param2, param3);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4>
class CProcedureT_Param4 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param4(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4){
}
//----------------------------------------------------------------------------
	CProcedureT_Param4(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4);
		
	}
};

// used for class procedures (no return value) with 4 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
{
	CProcedureT_Param4<TObjectClass, TParam1, TParam2, TParam3, TParam4>  f(threadIdentifier, pObject, function, param1, param2, param3, param4);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
{
	CProcedureT_Param4<TObjectClass, TParam1, TParam2, TParam3, TParam4>* f = new CProcedureT_Param4<TObjectClass, TParam1, TParam2, TParam3, TParam4>(threadIdentifier, pObject, function, param1, param2, param3, param4);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 4 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
{
	CProcedureT_Param4<TObjectClass, TParam1, TParam2, TParam3, TParam4>  f(threadIdentifier, pObject, function, param1, param2, param3, param4);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
{
	CProcedureT_Param4<TObjectClass, TParam1, TParam2, TParam3, TParam4>* f = new CProcedureT_Param4<TObjectClass, TParam1, TParam2, TParam3, TParam4>(threadIdentifier, pObject, function, param1, param2, param3, param4);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
class CProcedureT_Param5 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param5(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5){
}
//----------------------------------------------------------------------------
	CProcedureT_Param5(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5);
		
	}
};

// used for class procedures (no return value) with 5 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
{
	CProcedureT_Param5<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
{
	CProcedureT_Param5<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5>* f = new CProcedureT_Param5<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 5 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
{
	CProcedureT_Param5<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
{
	CProcedureT_Param5<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5>* f = new CProcedureT_Param5<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
class CProcedureT_Param6 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param6(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6){
}
//----------------------------------------------------------------------------
	CProcedureT_Param6(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6);
		
	}
};

// used for class procedures (no return value) with 6 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
{
	CProcedureT_Param6<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
{
	CProcedureT_Param6<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>* f = new CProcedureT_Param6<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 6 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
{
	CProcedureT_Param6<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
{
	CProcedureT_Param6<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>* f = new CProcedureT_Param6<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
class CProcedureT_Param7 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param7(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7){
}
//----------------------------------------------------------------------------
	CProcedureT_Param7(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7);
		
	}
};

// used for class procedures (no return value) with 7 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
{
	CProcedureT_Param7<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
{
	CProcedureT_Param7<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>* f = new CProcedureT_Param7<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 7 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
{
	CProcedureT_Param7<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
{
	CProcedureT_Param7<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>* f = new CProcedureT_Param7<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
class CProcedureT_Param8 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param8(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8){
}
//----------------------------------------------------------------------------
	CProcedureT_Param8(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8);
		
	}
};

// used for class procedures (no return value) with 8 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
{
	CProcedureT_Param8<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
{
	CProcedureT_Param8<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>* f = new CProcedureT_Param8<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 8 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
{
	CProcedureT_Param8<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
{
	CProcedureT_Param8<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>* f = new CProcedureT_Param8<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
class CProcedureT_Param9 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param9(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9){
}
//----------------------------------------------------------------------------
	CProcedureT_Param9(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9);
		
	}
};

// used for class procedures (no return value) with 9 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
{
	CProcedureT_Param9<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
{
	CProcedureT_Param9<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>* f = new CProcedureT_Param9<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 9 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
{
	CProcedureT_Param9<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
{
	CProcedureT_Param9<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>* f = new CProcedureT_Param9<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
class CProcedureT_Param10 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param10(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10){
}
//----------------------------------------------------------------------------
	CProcedureT_Param10(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10);
		
	}
};

// used for class procedures (no return value) with 10 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
{
	CProcedureT_Param10<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
{
	CProcedureT_Param10<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>* f = new CProcedureT_Param10<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 10 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
{
	CProcedureT_Param10<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
{
	CProcedureT_Param10<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>* f = new CProcedureT_Param10<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
class CProcedureT_Param11 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param11(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11){
}
//----------------------------------------------------------------------------
	CProcedureT_Param11(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11);
		
	}
};

// used for class procedures (no return value) with 11 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
{
	CProcedureT_Param11<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
{
	CProcedureT_Param11<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>* f = new CProcedureT_Param11<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 11 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
{
	CProcedureT_Param11<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
{
	CProcedureT_Param11<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>* f = new CProcedureT_Param11<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
class CProcedureT_Param12 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param12(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12){
}
//----------------------------------------------------------------------------
	CProcedureT_Param12(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12);
		
	}
};

// used for class procedures (no return value) with 12 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
{
	CProcedureT_Param12<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
{
	CProcedureT_Param12<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>* f = new CProcedureT_Param12<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 12 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
{
	CProcedureT_Param12<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
{
	CProcedureT_Param12<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>* f = new CProcedureT_Param12<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
class CProcedureT_Param13 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param13(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13){
}
//----------------------------------------------------------------------------
	CProcedureT_Param13(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13);
		
	}
};

// used for class procedures (no return value) with 13 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
{
	CProcedureT_Param13<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
{
	CProcedureT_Param13<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>* f = new CProcedureT_Param13<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 13 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
{
	CProcedureT_Param13<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
{
	CProcedureT_Param13<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>* f = new CProcedureT_Param13<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
class CProcedureT_Param14 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param14(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14){
}
//----------------------------------------------------------------------------
	CProcedureT_Param14(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14);
		
	}
};

// used for class procedures (no return value) with 14 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
{
	CProcedureT_Param14<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
{
	CProcedureT_Param14<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>* f = new CProcedureT_Param14<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 14 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
{
	CProcedureT_Param14<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
{
	CProcedureT_Param14<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>* f = new CProcedureT_Param14<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
class CProcedureT_Param15 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param15(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15){
}
//----------------------------------------------------------------------------
	CProcedureT_Param15(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15);
		
	}
};

// used for class procedures (no return value) with 15 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
{
	CProcedureT_Param15<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
{
	CProcedureT_Param15<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>* f = new CProcedureT_Param15<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 15 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
{
	CProcedureT_Param15<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
{
	CProcedureT_Param15<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>* f = new CProcedureT_Param15<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
class CProcedureT_Param16 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param16(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16){
}
//----------------------------------------------------------------------------
	CProcedureT_Param16(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16);
		
	}
};

// used for class procedures (no return value) with 16 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
{
	CProcedureT_Param16<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
{
	CProcedureT_Param16<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>* f = new CProcedureT_Param16<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 16 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
{
	CProcedureT_Param16<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
{
	CProcedureT_Param16<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>* f = new CProcedureT_Param16<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
class CProcedureT_Param17 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param17(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17){
}
//----------------------------------------------------------------------------
	CProcedureT_Param17(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17);
		
	}
};

// used for class procedures (no return value) with 17 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
{
	CProcedureT_Param17<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
{
	CProcedureT_Param17<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>* f = new CProcedureT_Param17<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 17 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
{
	CProcedureT_Param17<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
{
	CProcedureT_Param17<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>* f = new CProcedureT_Param17<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
class CProcedureT_Param18 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param18(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18){
}
//----------------------------------------------------------------------------
	CProcedureT_Param18(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18);
		
	}
};

// used for class procedures (no return value) with 18 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
{
	CProcedureT_Param18<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
{
	CProcedureT_Param18<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>* f = new CProcedureT_Param18<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 18 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
{
	CProcedureT_Param18<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
{
	CProcedureT_Param18<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>* f = new CProcedureT_Param18<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
class CProcedureT_Param19 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param19(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19){
}
//----------------------------------------------------------------------------
	CProcedureT_Param19(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19);
		
	}
};

// used for class procedures (no return value) with 19 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
{
	CProcedureT_Param19<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
{
	CProcedureT_Param19<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>* f = new CProcedureT_Param19<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 19 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
{
	CProcedureT_Param19<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
{
	CProcedureT_Param19<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>* f = new CProcedureT_Param19<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
class CProcedureT_Param20 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param20(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20){
}
//----------------------------------------------------------------------------
	CProcedureT_Param20(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20);
		
	}
};

// used for class procedures (no return value) with 20 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
{
	CProcedureT_Param20<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
{
	CProcedureT_Param20<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>* f = new CProcedureT_Param20<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 20 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
{
	CProcedureT_Param20<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
{
	CProcedureT_Param20<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>* f = new CProcedureT_Param20<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
class CProcedureT_Param21 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param21(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21){
}
//----------------------------------------------------------------------------
	CProcedureT_Param21(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21);
		
	}
};

// used for class procedures (no return value) with 21 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
{
	CProcedureT_Param21<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
{
	CProcedureT_Param21<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>* f = new CProcedureT_Param21<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 21 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
{
	CProcedureT_Param21<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
{
	CProcedureT_Param21<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>* f = new CProcedureT_Param21<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
class CProcedureT_Param22 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param22(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22){
}
//----------------------------------------------------------------------------
	CProcedureT_Param22(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22);
		
	}
};

// used for class procedures (no return value) with 22 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
{
	CProcedureT_Param22<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
{
	CProcedureT_Param22<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>* f = new CProcedureT_Param22<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 22 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
{
	CProcedureT_Param22<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
{
	CProcedureT_Param22<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>* f = new CProcedureT_Param22<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
class CProcedureT_Param23 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param23(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23){
}
//----------------------------------------------------------------------------
	CProcedureT_Param23(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23);
		
	}
};

// used for class procedures (no return value) with 23 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
{
	CProcedureT_Param23<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
{
	CProcedureT_Param23<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>* f = new CProcedureT_Param23<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 23 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
{
	CProcedureT_Param23<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
{
	CProcedureT_Param23<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>* f = new CProcedureT_Param23<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
class CProcedureT_Param24 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param24(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24){
}
//----------------------------------------------------------------------------
	CProcedureT_Param24(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24);
		
	}
};

// used for class procedures (no return value) with 24 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
{
	CProcedureT_Param24<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
{
	CProcedureT_Param24<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>* f = new CProcedureT_Param24<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 24 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
{
	CProcedureT_Param24<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
{
	CProcedureT_Param24<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>* f = new CProcedureT_Param24<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
class CProcedureT_Param25 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param25(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25){
}
//----------------------------------------------------------------------------
	CProcedureT_Param25(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25);
		
	}
};

// used for class procedures (no return value) with 25 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
{
	CProcedureT_Param25<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
{
	CProcedureT_Param25<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>* f = new CProcedureT_Param25<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 25 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
{
	CProcedureT_Param25<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
{
	CProcedureT_Param25<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>* f = new CProcedureT_Param25<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
class CProcedureT_Param26 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param26(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26){
}
//----------------------------------------------------------------------------
	CProcedureT_Param26(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26);
		
	}
};

// used for class procedures (no return value) with 26 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
{
	CProcedureT_Param26<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
{
	CProcedureT_Param26<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>* f = new CProcedureT_Param26<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 26 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
{
	CProcedureT_Param26<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
{
	CProcedureT_Param26<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>* f = new CProcedureT_Param26<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
class CProcedureT_Param27 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param27(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27){
}
//----------------------------------------------------------------------------
	CProcedureT_Param27(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27);
		
	}
};

// used for class procedures (no return value) with 27 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
{
	CProcedureT_Param27<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
{
	CProcedureT_Param27<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>* f = new CProcedureT_Param27<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 27 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
{
	CProcedureT_Param27<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
{
	CProcedureT_Param27<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>* f = new CProcedureT_Param27<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
class CProcedureT_Param28 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param28(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28){
}
//----------------------------------------------------------------------------
	CProcedureT_Param28(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28);
		
	}
};

// used for class procedures (no return value) with 28 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
{
	CProcedureT_Param28<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
{
	CProcedureT_Param28<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>* f = new CProcedureT_Param28<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 28 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
{
	CProcedureT_Param28<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
{
	CProcedureT_Param28<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>* f = new CProcedureT_Param28<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
class CProcedureT_Param29 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param29(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29){
}
//----------------------------------------------------------------------------
	CProcedureT_Param29(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29);
		
	}
};

// used for class procedures (no return value) with 29 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
{
	CProcedureT_Param29<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
{
	CProcedureT_Param29<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>* f = new CProcedureT_Param29<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 29 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
{
	CProcedureT_Param29<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
{
	CProcedureT_Param29<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>* f = new CProcedureT_Param29<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
class CProcedureT_Param30 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param30(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30){
}
//----------------------------------------------------------------------------
	CProcedureT_Param30(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30);
		
	}
};

// used for class procedures (no return value) with 30 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
{
	CProcedureT_Param30<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
{
	CProcedureT_Param30<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>* f = new CProcedureT_Param30<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 30 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
{
	CProcedureT_Param30<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
{
	CProcedureT_Param30<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>* f = new CProcedureT_Param30<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
class CProcedureT_Param31 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param31(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31){
}
//----------------------------------------------------------------------------
	CProcedureT_Param31(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31);
		
	}
};

// used for class procedures (no return value) with 31 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
{
	CProcedureT_Param31<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
{
	CProcedureT_Param31<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>* f = new CProcedureT_Param31<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 31 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
{
	CProcedureT_Param31<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
{
	CProcedureT_Param31<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>* f = new CProcedureT_Param31<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
class CProcedureT_Param32 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param32(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32){
}
//----------------------------------------------------------------------------
	CProcedureT_Param32(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32);
		
	}
};

// used for class procedures (no return value) with 32 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
{
	CProcedureT_Param32<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
{
	CProcedureT_Param32<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>* f = new CProcedureT_Param32<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 32 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
{
	CProcedureT_Param32<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
{
	CProcedureT_Param32<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>* f = new CProcedureT_Param32<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
class CProcedureT_Param33 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param33(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33){
}
//----------------------------------------------------------------------------
	CProcedureT_Param33(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33);
		
	}
};

// used for class procedures (no return value) with 33 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
{
	CProcedureT_Param33<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
{
	CProcedureT_Param33<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>* f = new CProcedureT_Param33<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 33 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
{
	CProcedureT_Param33<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
{
	CProcedureT_Param33<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>* f = new CProcedureT_Param33<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
class CProcedureT_Param34 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param34(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34){
}
//----------------------------------------------------------------------------
	CProcedureT_Param34(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34);
		
	}
};

// used for class procedures (no return value) with 34 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
{
	CProcedureT_Param34<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
{
	CProcedureT_Param34<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>* f = new CProcedureT_Param34<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 34 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
{
	CProcedureT_Param34<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
{
	CProcedureT_Param34<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>* f = new CProcedureT_Param34<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
class CProcedureT_Param35 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param35(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35){
}
//----------------------------------------------------------------------------
	CProcedureT_Param35(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35);
		
	}
};

// used for class procedures (no return value) with 35 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
{
	CProcedureT_Param35<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
{
	CProcedureT_Param35<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>* f = new CProcedureT_Param35<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 35 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
{
	CProcedureT_Param35<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
{
	CProcedureT_Param35<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>* f = new CProcedureT_Param35<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
class CProcedureT_Param36 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param36(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36){
}
//----------------------------------------------------------------------------
	CProcedureT_Param36(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36);
		
	}
};

// used for class procedures (no return value) with 36 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
{
	CProcedureT_Param36<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
{
	CProcedureT_Param36<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>* f = new CProcedureT_Param36<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 36 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
{
	CProcedureT_Param36<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
{
	CProcedureT_Param36<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>* f = new CProcedureT_Param36<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
class CProcedureT_Param37 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
	TParam37	m_Param37;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param37(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37){
}
//----------------------------------------------------------------------------
	CProcedureT_Param37(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36, m_Param37);
		
	}
};

// used for class procedures (no return value) with 37 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
{
	CProcedureT_Param37<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
{
	CProcedureT_Param37<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>* f = new CProcedureT_Param37<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 37 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
{
	CProcedureT_Param37<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
{
	CProcedureT_Param37<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>* f = new CProcedureT_Param37<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
class CProcedureT_Param38 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
	TParam37	m_Param37;
	TParam38	m_Param38;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param38(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38){
}
//----------------------------------------------------------------------------
	CProcedureT_Param38(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36, m_Param37, m_Param38);
		
	}
};

// used for class procedures (no return value) with 38 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
{
	CProcedureT_Param38<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
{
	CProcedureT_Param38<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>* f = new CProcedureT_Param38<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 38 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
{
	CProcedureT_Param38<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
{
	CProcedureT_Param38<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>* f = new CProcedureT_Param38<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
class CProcedureT_Param39 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
	TParam37	m_Param37;
	TParam38	m_Param38;
	TParam39	m_Param39;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param39(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38)
	, m_Param39(param39){
}
//----------------------------------------------------------------------------
	CProcedureT_Param39(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38)
	, m_Param39(param39){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36, m_Param37, m_Param38, m_Param39);
		
	}
};

// used for class procedures (no return value) with 39 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>, <TParam39>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
{
	CProcedureT_Param39<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
{
	CProcedureT_Param39<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>* f = new CProcedureT_Param39<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 39 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>, <TParam39>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
{
	CProcedureT_Param39<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
{
	CProcedureT_Param39<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>* f = new CProcedureT_Param39<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39);
	f->Call(TRUE);
}

//==================================================================================
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
class CProcedureT_Param40 : public CBaseFunctionWrapper
{
	typedef void (TObjectClass::*FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40);
	TObjectClass*		m_pObject;
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
	TParam37	m_Param37;
	TParam38	m_Param38;
	TParam39	m_Param39;
	TParam40	m_Param40;
public:
	//----------------------------------------------------------------------------
	CProcedureT_Param40(DWORD nThreadId, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
	: CBaseFunctionWrapper(nThreadId)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38)
	, m_Param39(param39)
	, m_Param40(param40){
}
//----------------------------------------------------------------------------
	CProcedureT_Param40(HWND hwnd, TObjectClass* pObject, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
	: CBaseFunctionWrapper(hwnd)
	, m_pObject(pObject)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38)
	, m_Param39(param39)
	, m_Param40(param40){
}

	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(m_pObject->*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36, m_Param37, m_Param38, m_Param39, m_Param40);
		
	}
};

// used for class procedures (no return value) with 40 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>, <TParam39>, <TParam40>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
void AfxInvokeThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
{
	CProcedureT_Param40<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39, param40);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
void AfxInvokeAsyncThreadProcedure(DWORD threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
{
	CProcedureT_Param40<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>* f = new CProcedureT_Param40<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39, param40);
	f->Call(TRUE);
}

// used for class procedures (no return value) with 40 parameters; prototype:
// void <TObjectClass>::Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>, <TParam39>, <TParam40>);
//-----------------------------------------------------------------------------
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
void AfxInvokeThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
{
	CProcedureT_Param40<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>  f(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39, param40);
	f.Call(FALSE);
}
//async version
template <class TObjectClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
void AfxInvokeAsyncThreadProcedure(HWND threadIdentifier, TObjectClass* pObject, void (TObjectClass::*function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
{
	CProcedureT_Param40<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>* f = new CProcedureT_Param40<TObjectClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>(threadIdentifier, pObject, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39, param40);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass>
class CGlobalFunctionT_Param0 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)();
	FunctionPointer		m_FunctionPointer;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param0(DWORD nThreadId, FunctionPointer functionPointer)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param0(HWND hwnd, FunctionPointer functionPointer)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)();
		
	}
};
// used for global functions with 0 parameters; prototype:
// TRetValClass AFX_CDECL Function();
//-----------------------------------------------------------------------------
template <class TRetValClass>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)())
{
	CGlobalFunctionT_Param0<TRetValClass>  f(threadIdentifier, function);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)())
{
	CGlobalFunctionT_Param0<TRetValClass>* f = new CGlobalFunctionT_Param0<TRetValClass>(threadIdentifier, function);
	f->Call(TRUE);
}

// used for global functions with 0 parameters; prototype:
// TRetValClass AFX_CDECL Function();
//-----------------------------------------------------------------------------
template <class TRetValClass>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)())
{
	CGlobalFunctionT_Param0<TRetValClass>  f(threadIdentifier, function);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)())
{
	CGlobalFunctionT_Param0<TRetValClass>* f = new CGlobalFunctionT_Param0<TRetValClass>(threadIdentifier, function);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1>
class CGlobalFunctionT_Param1 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param1(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param1(HWND hwnd, FunctionPointer functionPointer, TParam1 param1)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1);
		
	}
};
// used for global functions with 1 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1), TParam1 param1)
{
	CGlobalFunctionT_Param1<TRetValClass, TParam1>  f(threadIdentifier, function, param1);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1), TParam1 param1)
{
	CGlobalFunctionT_Param1<TRetValClass, TParam1>* f = new CGlobalFunctionT_Param1<TRetValClass, TParam1>(threadIdentifier, function, param1);
	f->Call(TRUE);
}

// used for global functions with 1 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1), TParam1 param1)
{
	CGlobalFunctionT_Param1<TRetValClass, TParam1>  f(threadIdentifier, function, param1);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1), TParam1 param1)
{
	CGlobalFunctionT_Param1<TRetValClass, TParam1>* f = new CGlobalFunctionT_Param1<TRetValClass, TParam1>(threadIdentifier, function, param1);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2>
class CGlobalFunctionT_Param2 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param2(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param2(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2);
		
	}
};
// used for global functions with 2 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2), TParam1 param1, TParam2 param2)
{
	CGlobalFunctionT_Param2<TRetValClass, TParam1, TParam2>  f(threadIdentifier, function, param1, param2);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2), TParam1 param1, TParam2 param2)
{
	CGlobalFunctionT_Param2<TRetValClass, TParam1, TParam2>* f = new CGlobalFunctionT_Param2<TRetValClass, TParam1, TParam2>(threadIdentifier, function, param1, param2);
	f->Call(TRUE);
}

// used for global functions with 2 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2), TParam1 param1, TParam2 param2)
{
	CGlobalFunctionT_Param2<TRetValClass, TParam1, TParam2>  f(threadIdentifier, function, param1, param2);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2), TParam1 param1, TParam2 param2)
{
	CGlobalFunctionT_Param2<TRetValClass, TParam1, TParam2>* f = new CGlobalFunctionT_Param2<TRetValClass, TParam1, TParam2>(threadIdentifier, function, param1, param2);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3>
class CGlobalFunctionT_Param3 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param3(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param3(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3);
		
	}
};
// used for global functions with 3 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3), TParam1 param1, TParam2 param2, TParam3 param3)
{
	CGlobalFunctionT_Param3<TRetValClass, TParam1, TParam2, TParam3>  f(threadIdentifier, function, param1, param2, param3);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3), TParam1 param1, TParam2 param2, TParam3 param3)
{
	CGlobalFunctionT_Param3<TRetValClass, TParam1, TParam2, TParam3>* f = new CGlobalFunctionT_Param3<TRetValClass, TParam1, TParam2, TParam3>(threadIdentifier, function, param1, param2, param3);
	f->Call(TRUE);
}

// used for global functions with 3 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3), TParam1 param1, TParam2 param2, TParam3 param3)
{
	CGlobalFunctionT_Param3<TRetValClass, TParam1, TParam2, TParam3>  f(threadIdentifier, function, param1, param2, param3);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3), TParam1 param1, TParam2 param2, TParam3 param3)
{
	CGlobalFunctionT_Param3<TRetValClass, TParam1, TParam2, TParam3>* f = new CGlobalFunctionT_Param3<TRetValClass, TParam1, TParam2, TParam3>(threadIdentifier, function, param1, param2, param3);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4>
class CGlobalFunctionT_Param4 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param4(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param4(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4);
		
	}
};
// used for global functions with 4 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
{
	CGlobalFunctionT_Param4<TRetValClass, TParam1, TParam2, TParam3, TParam4>  f(threadIdentifier, function, param1, param2, param3, param4);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
{
	CGlobalFunctionT_Param4<TRetValClass, TParam1, TParam2, TParam3, TParam4>* f = new CGlobalFunctionT_Param4<TRetValClass, TParam1, TParam2, TParam3, TParam4>(threadIdentifier, function, param1, param2, param3, param4);
	f->Call(TRUE);
}

// used for global functions with 4 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
{
	CGlobalFunctionT_Param4<TRetValClass, TParam1, TParam2, TParam3, TParam4>  f(threadIdentifier, function, param1, param2, param3, param4);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
{
	CGlobalFunctionT_Param4<TRetValClass, TParam1, TParam2, TParam3, TParam4>* f = new CGlobalFunctionT_Param4<TRetValClass, TParam1, TParam2, TParam3, TParam4>(threadIdentifier, function, param1, param2, param3, param4);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
class CGlobalFunctionT_Param5 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param5(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param5(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5);
		
	}
};
// used for global functions with 5 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
{
	CGlobalFunctionT_Param5<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5>  f(threadIdentifier, function, param1, param2, param3, param4, param5);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
{
	CGlobalFunctionT_Param5<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5>* f = new CGlobalFunctionT_Param5<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5>(threadIdentifier, function, param1, param2, param3, param4, param5);
	f->Call(TRUE);
}

// used for global functions with 5 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
{
	CGlobalFunctionT_Param5<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5>  f(threadIdentifier, function, param1, param2, param3, param4, param5);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
{
	CGlobalFunctionT_Param5<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5>* f = new CGlobalFunctionT_Param5<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5>(threadIdentifier, function, param1, param2, param3, param4, param5);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
class CGlobalFunctionT_Param6 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param6(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param6(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6);
		
	}
};
// used for global functions with 6 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
{
	CGlobalFunctionT_Param6<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
{
	CGlobalFunctionT_Param6<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>* f = new CGlobalFunctionT_Param6<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(threadIdentifier, function, param1, param2, param3, param4, param5, param6);
	f->Call(TRUE);
}

// used for global functions with 6 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
{
	CGlobalFunctionT_Param6<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
{
	CGlobalFunctionT_Param6<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>* f = new CGlobalFunctionT_Param6<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(threadIdentifier, function, param1, param2, param3, param4, param5, param6);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
class CGlobalFunctionT_Param7 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param7(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param7(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7);
		
	}
};
// used for global functions with 7 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
{
	CGlobalFunctionT_Param7<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
{
	CGlobalFunctionT_Param7<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>* f = new CGlobalFunctionT_Param7<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7);
	f->Call(TRUE);
}

// used for global functions with 7 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
{
	CGlobalFunctionT_Param7<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
{
	CGlobalFunctionT_Param7<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>* f = new CGlobalFunctionT_Param7<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
class CGlobalFunctionT_Param8 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param8(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param8(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8);
		
	}
};
// used for global functions with 8 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
{
	CGlobalFunctionT_Param8<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
{
	CGlobalFunctionT_Param8<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>* f = new CGlobalFunctionT_Param8<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8);
	f->Call(TRUE);
}

// used for global functions with 8 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
{
	CGlobalFunctionT_Param8<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
{
	CGlobalFunctionT_Param8<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>* f = new CGlobalFunctionT_Param8<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
class CGlobalFunctionT_Param9 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param9(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param9(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9);
		
	}
};
// used for global functions with 9 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
{
	CGlobalFunctionT_Param9<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
{
	CGlobalFunctionT_Param9<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>* f = new CGlobalFunctionT_Param9<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9);
	f->Call(TRUE);
}

// used for global functions with 9 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
{
	CGlobalFunctionT_Param9<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
{
	CGlobalFunctionT_Param9<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>* f = new CGlobalFunctionT_Param9<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
class CGlobalFunctionT_Param10 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param10(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param10(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10);
		
	}
};
// used for global functions with 10 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
{
	CGlobalFunctionT_Param10<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
{
	CGlobalFunctionT_Param10<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>* f = new CGlobalFunctionT_Param10<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
	f->Call(TRUE);
}

// used for global functions with 10 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
{
	CGlobalFunctionT_Param10<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
{
	CGlobalFunctionT_Param10<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>* f = new CGlobalFunctionT_Param10<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
class CGlobalFunctionT_Param11 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param11(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param11(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11);
		
	}
};
// used for global functions with 11 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
{
	CGlobalFunctionT_Param11<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
{
	CGlobalFunctionT_Param11<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>* f = new CGlobalFunctionT_Param11<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
	f->Call(TRUE);
}

// used for global functions with 11 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
{
	CGlobalFunctionT_Param11<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
{
	CGlobalFunctionT_Param11<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>* f = new CGlobalFunctionT_Param11<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
class CGlobalFunctionT_Param12 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param12(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param12(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12);
		
	}
};
// used for global functions with 12 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
{
	CGlobalFunctionT_Param12<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
{
	CGlobalFunctionT_Param12<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>* f = new CGlobalFunctionT_Param12<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
	f->Call(TRUE);
}

// used for global functions with 12 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
{
	CGlobalFunctionT_Param12<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
{
	CGlobalFunctionT_Param12<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>* f = new CGlobalFunctionT_Param12<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
class CGlobalFunctionT_Param13 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param13(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param13(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13);
		
	}
};
// used for global functions with 13 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
{
	CGlobalFunctionT_Param13<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
{
	CGlobalFunctionT_Param13<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>* f = new CGlobalFunctionT_Param13<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);
	f->Call(TRUE);
}

// used for global functions with 13 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
{
	CGlobalFunctionT_Param13<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
{
	CGlobalFunctionT_Param13<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>* f = new CGlobalFunctionT_Param13<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
class CGlobalFunctionT_Param14 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param14(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param14(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14);
		
	}
};
// used for global functions with 14 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
{
	CGlobalFunctionT_Param14<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
{
	CGlobalFunctionT_Param14<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>* f = new CGlobalFunctionT_Param14<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14);
	f->Call(TRUE);
}

// used for global functions with 14 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
{
	CGlobalFunctionT_Param14<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
{
	CGlobalFunctionT_Param14<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>* f = new CGlobalFunctionT_Param14<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
class CGlobalFunctionT_Param15 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param15(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param15(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15);
		
	}
};
// used for global functions with 15 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
{
	CGlobalFunctionT_Param15<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
{
	CGlobalFunctionT_Param15<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>* f = new CGlobalFunctionT_Param15<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15);
	f->Call(TRUE);
}

// used for global functions with 15 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
{
	CGlobalFunctionT_Param15<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
{
	CGlobalFunctionT_Param15<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>* f = new CGlobalFunctionT_Param15<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
class CGlobalFunctionT_Param16 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param16(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param16(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16);
		
	}
};
// used for global functions with 16 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
{
	CGlobalFunctionT_Param16<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
{
	CGlobalFunctionT_Param16<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>* f = new CGlobalFunctionT_Param16<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16);
	f->Call(TRUE);
}

// used for global functions with 16 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
{
	CGlobalFunctionT_Param16<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
{
	CGlobalFunctionT_Param16<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>* f = new CGlobalFunctionT_Param16<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
class CGlobalFunctionT_Param17 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param17(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param17(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17);
		
	}
};
// used for global functions with 17 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
{
	CGlobalFunctionT_Param17<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
{
	CGlobalFunctionT_Param17<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>* f = new CGlobalFunctionT_Param17<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17);
	f->Call(TRUE);
}

// used for global functions with 17 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
{
	CGlobalFunctionT_Param17<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
{
	CGlobalFunctionT_Param17<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>* f = new CGlobalFunctionT_Param17<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
class CGlobalFunctionT_Param18 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param18(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param18(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18);
		
	}
};
// used for global functions with 18 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
{
	CGlobalFunctionT_Param18<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
{
	CGlobalFunctionT_Param18<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>* f = new CGlobalFunctionT_Param18<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18);
	f->Call(TRUE);
}

// used for global functions with 18 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
{
	CGlobalFunctionT_Param18<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
{
	CGlobalFunctionT_Param18<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>* f = new CGlobalFunctionT_Param18<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
class CGlobalFunctionT_Param19 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param19(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param19(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19);
		
	}
};
// used for global functions with 19 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
{
	CGlobalFunctionT_Param19<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
{
	CGlobalFunctionT_Param19<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>* f = new CGlobalFunctionT_Param19<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19);
	f->Call(TRUE);
}

// used for global functions with 19 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
{
	CGlobalFunctionT_Param19<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
{
	CGlobalFunctionT_Param19<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>* f = new CGlobalFunctionT_Param19<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
class CGlobalFunctionT_Param20 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param20(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param20(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20);
		
	}
};
// used for global functions with 20 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
{
	CGlobalFunctionT_Param20<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
{
	CGlobalFunctionT_Param20<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>* f = new CGlobalFunctionT_Param20<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);
	f->Call(TRUE);
}

// used for global functions with 20 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
{
	CGlobalFunctionT_Param20<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
{
	CGlobalFunctionT_Param20<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>* f = new CGlobalFunctionT_Param20<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
class CGlobalFunctionT_Param21 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param21(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param21(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21);
		
	}
};
// used for global functions with 21 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
{
	CGlobalFunctionT_Param21<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
{
	CGlobalFunctionT_Param21<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>* f = new CGlobalFunctionT_Param21<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21);
	f->Call(TRUE);
}

// used for global functions with 21 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
{
	CGlobalFunctionT_Param21<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
{
	CGlobalFunctionT_Param21<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>* f = new CGlobalFunctionT_Param21<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
class CGlobalFunctionT_Param22 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param22(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param22(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22);
		
	}
};
// used for global functions with 22 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
{
	CGlobalFunctionT_Param22<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
{
	CGlobalFunctionT_Param22<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>* f = new CGlobalFunctionT_Param22<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22);
	f->Call(TRUE);
}

// used for global functions with 22 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
{
	CGlobalFunctionT_Param22<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
{
	CGlobalFunctionT_Param22<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>* f = new CGlobalFunctionT_Param22<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
class CGlobalFunctionT_Param23 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param23(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param23(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23);
		
	}
};
// used for global functions with 23 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
{
	CGlobalFunctionT_Param23<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
{
	CGlobalFunctionT_Param23<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>* f = new CGlobalFunctionT_Param23<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23);
	f->Call(TRUE);
}

// used for global functions with 23 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
{
	CGlobalFunctionT_Param23<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
{
	CGlobalFunctionT_Param23<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>* f = new CGlobalFunctionT_Param23<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
class CGlobalFunctionT_Param24 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param24(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param24(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24);
		
	}
};
// used for global functions with 24 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
{
	CGlobalFunctionT_Param24<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
{
	CGlobalFunctionT_Param24<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>* f = new CGlobalFunctionT_Param24<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24);
	f->Call(TRUE);
}

// used for global functions with 24 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
{
	CGlobalFunctionT_Param24<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
{
	CGlobalFunctionT_Param24<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>* f = new CGlobalFunctionT_Param24<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
class CGlobalFunctionT_Param25 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param25(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param25(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25);
		
	}
};
// used for global functions with 25 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
{
	CGlobalFunctionT_Param25<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
{
	CGlobalFunctionT_Param25<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>* f = new CGlobalFunctionT_Param25<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25);
	f->Call(TRUE);
}

// used for global functions with 25 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
{
	CGlobalFunctionT_Param25<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
{
	CGlobalFunctionT_Param25<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>* f = new CGlobalFunctionT_Param25<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
class CGlobalFunctionT_Param26 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param26(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param26(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26);
		
	}
};
// used for global functions with 26 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
{
	CGlobalFunctionT_Param26<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
{
	CGlobalFunctionT_Param26<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>* f = new CGlobalFunctionT_Param26<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26);
	f->Call(TRUE);
}

// used for global functions with 26 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
{
	CGlobalFunctionT_Param26<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
{
	CGlobalFunctionT_Param26<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>* f = new CGlobalFunctionT_Param26<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
class CGlobalFunctionT_Param27 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param27(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param27(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27);
		
	}
};
// used for global functions with 27 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
{
	CGlobalFunctionT_Param27<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
{
	CGlobalFunctionT_Param27<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>* f = new CGlobalFunctionT_Param27<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27);
	f->Call(TRUE);
}

// used for global functions with 27 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
{
	CGlobalFunctionT_Param27<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
{
	CGlobalFunctionT_Param27<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>* f = new CGlobalFunctionT_Param27<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
class CGlobalFunctionT_Param28 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param28(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param28(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28);
		
	}
};
// used for global functions with 28 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
{
	CGlobalFunctionT_Param28<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
{
	CGlobalFunctionT_Param28<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>* f = new CGlobalFunctionT_Param28<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28);
	f->Call(TRUE);
}

// used for global functions with 28 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
{
	CGlobalFunctionT_Param28<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
{
	CGlobalFunctionT_Param28<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>* f = new CGlobalFunctionT_Param28<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
class CGlobalFunctionT_Param29 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param29(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param29(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29);
		
	}
};
// used for global functions with 29 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
{
	CGlobalFunctionT_Param29<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
{
	CGlobalFunctionT_Param29<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>* f = new CGlobalFunctionT_Param29<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29);
	f->Call(TRUE);
}

// used for global functions with 29 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
{
	CGlobalFunctionT_Param29<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
{
	CGlobalFunctionT_Param29<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>* f = new CGlobalFunctionT_Param29<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
class CGlobalFunctionT_Param30 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param30(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param30(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30);
		
	}
};
// used for global functions with 30 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
{
	CGlobalFunctionT_Param30<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
{
	CGlobalFunctionT_Param30<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>* f = new CGlobalFunctionT_Param30<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30);
	f->Call(TRUE);
}

// used for global functions with 30 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
{
	CGlobalFunctionT_Param30<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
{
	CGlobalFunctionT_Param30<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>* f = new CGlobalFunctionT_Param30<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
class CGlobalFunctionT_Param31 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param31(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param31(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31);
		
	}
};
// used for global functions with 31 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
{
	CGlobalFunctionT_Param31<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
{
	CGlobalFunctionT_Param31<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>* f = new CGlobalFunctionT_Param31<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31);
	f->Call(TRUE);
}

// used for global functions with 31 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
{
	CGlobalFunctionT_Param31<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
{
	CGlobalFunctionT_Param31<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>* f = new CGlobalFunctionT_Param31<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
class CGlobalFunctionT_Param32 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param32(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param32(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32);
		
	}
};
// used for global functions with 32 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
{
	CGlobalFunctionT_Param32<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
{
	CGlobalFunctionT_Param32<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>* f = new CGlobalFunctionT_Param32<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32);
	f->Call(TRUE);
}

// used for global functions with 32 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
{
	CGlobalFunctionT_Param32<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
{
	CGlobalFunctionT_Param32<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>* f = new CGlobalFunctionT_Param32<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
class CGlobalFunctionT_Param33 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param33(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param33(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33);
		
	}
};
// used for global functions with 33 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
{
	CGlobalFunctionT_Param33<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
{
	CGlobalFunctionT_Param33<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>* f = new CGlobalFunctionT_Param33<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33);
	f->Call(TRUE);
}

// used for global functions with 33 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
{
	CGlobalFunctionT_Param33<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
{
	CGlobalFunctionT_Param33<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>* f = new CGlobalFunctionT_Param33<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
class CGlobalFunctionT_Param34 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param34(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param34(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34);
		
	}
};
// used for global functions with 34 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
{
	CGlobalFunctionT_Param34<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
{
	CGlobalFunctionT_Param34<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>* f = new CGlobalFunctionT_Param34<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34);
	f->Call(TRUE);
}

// used for global functions with 34 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
{
	CGlobalFunctionT_Param34<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
{
	CGlobalFunctionT_Param34<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>* f = new CGlobalFunctionT_Param34<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
class CGlobalFunctionT_Param35 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param35(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param35(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35);
		
	}
};
// used for global functions with 35 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
{
	CGlobalFunctionT_Param35<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
{
	CGlobalFunctionT_Param35<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>* f = new CGlobalFunctionT_Param35<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35);
	f->Call(TRUE);
}

// used for global functions with 35 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
{
	CGlobalFunctionT_Param35<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
{
	CGlobalFunctionT_Param35<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>* f = new CGlobalFunctionT_Param35<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
class CGlobalFunctionT_Param36 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param36(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param36(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36);
		
	}
};
// used for global functions with 36 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
{
	CGlobalFunctionT_Param36<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
{
	CGlobalFunctionT_Param36<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>* f = new CGlobalFunctionT_Param36<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36);
	f->Call(TRUE);
}

// used for global functions with 36 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
{
	CGlobalFunctionT_Param36<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
{
	CGlobalFunctionT_Param36<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>* f = new CGlobalFunctionT_Param36<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
class CGlobalFunctionT_Param37 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
	TParam37	m_Param37;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param37(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param37(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36, m_Param37);
		
	}
};
// used for global functions with 37 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
{
	CGlobalFunctionT_Param37<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
{
	CGlobalFunctionT_Param37<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>* f = new CGlobalFunctionT_Param37<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37);
	f->Call(TRUE);
}

// used for global functions with 37 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
{
	CGlobalFunctionT_Param37<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
{
	CGlobalFunctionT_Param37<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>* f = new CGlobalFunctionT_Param37<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
class CGlobalFunctionT_Param38 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
	TParam37	m_Param37;
	TParam38	m_Param38;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param38(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param38(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36, m_Param37, m_Param38);
		
	}
};
// used for global functions with 38 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
{
	CGlobalFunctionT_Param38<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
{
	CGlobalFunctionT_Param38<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>* f = new CGlobalFunctionT_Param38<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38);
	f->Call(TRUE);
}

// used for global functions with 38 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
{
	CGlobalFunctionT_Param38<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
{
	CGlobalFunctionT_Param38<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>* f = new CGlobalFunctionT_Param38<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
class CGlobalFunctionT_Param39 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
	TParam37	m_Param37;
	TParam38	m_Param38;
	TParam39	m_Param39;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param39(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38)
	, m_Param39(param39){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param39(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38)
	, m_Param39(param39){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36, m_Param37, m_Param38, m_Param39);
		
	}
};
// used for global functions with 39 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>, <TParam39>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
{
	CGlobalFunctionT_Param39<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
{
	CGlobalFunctionT_Param39<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>* f = new CGlobalFunctionT_Param39<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39);
	f->Call(TRUE);
}

// used for global functions with 39 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>, <TParam39>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
{
	CGlobalFunctionT_Param39<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
{
	CGlobalFunctionT_Param39<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>* f = new CGlobalFunctionT_Param39<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39);
	f->Call(TRUE);
}

//==================================================================================
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
class CGlobalFunctionT_Param40 : public CBaseFunctionWrapper
{
	typedef TRetValClass (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
	TParam37	m_Param37;
	TParam38	m_Param38;
	TParam39	m_Param39;
	TParam40	m_Param40;
public:
	TRetValClass		m_RetVal;

	//----------------------------------------------------------------------------
	CGlobalFunctionT_Param40(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38)
	, m_Param39(param39)
	, m_Param40(param40){
}
//----------------------------------------------------------------------------
	CGlobalFunctionT_Param40(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38)
	, m_Param39(param39)
	, m_Param40(param40){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		m_RetVal = (*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36, m_Param37, m_Param38, m_Param39, m_Param40);
		
	}
};
// used for global functions with 40 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>, <TParam39>, <TParam40>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
TRetValClass AfxInvokeThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
{
	CGlobalFunctionT_Param40<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39, param40);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
void AfxInvokeAsyncThreadGlobalFunction(DWORD threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
{
	CGlobalFunctionT_Param40<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>* f = new CGlobalFunctionT_Param40<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39, param40);
	f->Call(TRUE);
}

// used for global functions with 40 parameters; prototype:
// TRetValClass AFX_CDECL Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>, <TParam39>, <TParam40>);
//-----------------------------------------------------------------------------
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
TRetValClass AfxInvokeThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
{
	CGlobalFunctionT_Param40<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39, param40);
	f.Call(FALSE);
	return f.m_RetVal;
}
//async version
template <class TRetValClass, class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
void AfxInvokeAsyncThreadGlobalFunction(HWND threadIdentifier, TRetValClass (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
{
	CGlobalFunctionT_Param40<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>* f = new CGlobalFunctionT_Param40<TRetValClass, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39, param40);
	f->Call(TRUE);
}

//==================================================================================

class CGlobalProcedureT_Param0 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)();
	FunctionPointer		m_FunctionPointer;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param0(DWORD nThreadId, FunctionPointer functionPointer)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param0(HWND hwnd, FunctionPointer functionPointer)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)();
		
	}
};

// used for global procedures (no return value) with 0 parameters; prototype:
// void Function();
//-----------------------------------------------------------------------------

inline void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)())
{
	CGlobalProcedureT_Param0  f(threadIdentifier, function);
	f.Call(FALSE);
}
//async version

inline void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)())
{
	CGlobalProcedureT_Param0* f = new CGlobalProcedureT_Param0(threadIdentifier, function);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 0 parameters; prototype:
// void Function();
//-----------------------------------------------------------------------------

inline void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)())
{
	CGlobalProcedureT_Param0  f(threadIdentifier, function);
	f.Call(FALSE);
}
//async version

inline void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)())
{
	CGlobalProcedureT_Param0* f = new CGlobalProcedureT_Param0(threadIdentifier, function);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1>
class CGlobalProcedureT_Param1 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param1(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param1(HWND hwnd, FunctionPointer functionPointer, TParam1 param1)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1);
		
	}
};

// used for global procedures (no return value) with 1 parameters; prototype:
// void Function(<TParam1>);
//-----------------------------------------------------------------------------
template <class TParam1>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1), TParam1 param1)
{
	CGlobalProcedureT_Param1<TParam1>  f(threadIdentifier, function, param1);
	f.Call(FALSE);
}
//async version
template <class TParam1>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1), TParam1 param1)
{
	CGlobalProcedureT_Param1<TParam1>* f = new CGlobalProcedureT_Param1<TParam1>(threadIdentifier, function, param1);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 1 parameters; prototype:
// void Function(<TParam1>);
//-----------------------------------------------------------------------------
template <class TParam1>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1), TParam1 param1)
{
	CGlobalProcedureT_Param1<TParam1>  f(threadIdentifier, function, param1);
	f.Call(FALSE);
}
//async version
template <class TParam1>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1), TParam1 param1)
{
	CGlobalProcedureT_Param1<TParam1>* f = new CGlobalProcedureT_Param1<TParam1>(threadIdentifier, function, param1);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2>
class CGlobalProcedureT_Param2 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param2(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param2(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2);
		
	}
};

// used for global procedures (no return value) with 2 parameters; prototype:
// void Function(<TParam1>, <TParam2>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2), TParam1 param1, TParam2 param2)
{
	CGlobalProcedureT_Param2<TParam1, TParam2>  f(threadIdentifier, function, param1, param2);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2), TParam1 param1, TParam2 param2)
{
	CGlobalProcedureT_Param2<TParam1, TParam2>* f = new CGlobalProcedureT_Param2<TParam1, TParam2>(threadIdentifier, function, param1, param2);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 2 parameters; prototype:
// void Function(<TParam1>, <TParam2>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2), TParam1 param1, TParam2 param2)
{
	CGlobalProcedureT_Param2<TParam1, TParam2>  f(threadIdentifier, function, param1, param2);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2), TParam1 param1, TParam2 param2)
{
	CGlobalProcedureT_Param2<TParam1, TParam2>* f = new CGlobalProcedureT_Param2<TParam1, TParam2>(threadIdentifier, function, param1, param2);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3>
class CGlobalProcedureT_Param3 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param3(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param3(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3);
		
	}
};

// used for global procedures (no return value) with 3 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3), TParam1 param1, TParam2 param2, TParam3 param3)
{
	CGlobalProcedureT_Param3<TParam1, TParam2, TParam3>  f(threadIdentifier, function, param1, param2, param3);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3), TParam1 param1, TParam2 param2, TParam3 param3)
{
	CGlobalProcedureT_Param3<TParam1, TParam2, TParam3>* f = new CGlobalProcedureT_Param3<TParam1, TParam2, TParam3>(threadIdentifier, function, param1, param2, param3);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 3 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3), TParam1 param1, TParam2 param2, TParam3 param3)
{
	CGlobalProcedureT_Param3<TParam1, TParam2, TParam3>  f(threadIdentifier, function, param1, param2, param3);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3), TParam1 param1, TParam2 param2, TParam3 param3)
{
	CGlobalProcedureT_Param3<TParam1, TParam2, TParam3>* f = new CGlobalProcedureT_Param3<TParam1, TParam2, TParam3>(threadIdentifier, function, param1, param2, param3);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4>
class CGlobalProcedureT_Param4 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param4(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param4(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4);
		
	}
};

// used for global procedures (no return value) with 4 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
{
	CGlobalProcedureT_Param4<TParam1, TParam2, TParam3, TParam4>  f(threadIdentifier, function, param1, param2, param3, param4);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
{
	CGlobalProcedureT_Param4<TParam1, TParam2, TParam3, TParam4>* f = new CGlobalProcedureT_Param4<TParam1, TParam2, TParam3, TParam4>(threadIdentifier, function, param1, param2, param3, param4);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 4 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
{
	CGlobalProcedureT_Param4<TParam1, TParam2, TParam3, TParam4>  f(threadIdentifier, function, param1, param2, param3, param4);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
{
	CGlobalProcedureT_Param4<TParam1, TParam2, TParam3, TParam4>* f = new CGlobalProcedureT_Param4<TParam1, TParam2, TParam3, TParam4>(threadIdentifier, function, param1, param2, param3, param4);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
class CGlobalProcedureT_Param5 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param5(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param5(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5);
		
	}
};

// used for global procedures (no return value) with 5 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
{
	CGlobalProcedureT_Param5<TParam1, TParam2, TParam3, TParam4, TParam5>  f(threadIdentifier, function, param1, param2, param3, param4, param5);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
{
	CGlobalProcedureT_Param5<TParam1, TParam2, TParam3, TParam4, TParam5>* f = new CGlobalProcedureT_Param5<TParam1, TParam2, TParam3, TParam4, TParam5>(threadIdentifier, function, param1, param2, param3, param4, param5);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 5 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
{
	CGlobalProcedureT_Param5<TParam1, TParam2, TParam3, TParam4, TParam5>  f(threadIdentifier, function, param1, param2, param3, param4, param5);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
{
	CGlobalProcedureT_Param5<TParam1, TParam2, TParam3, TParam4, TParam5>* f = new CGlobalProcedureT_Param5<TParam1, TParam2, TParam3, TParam4, TParam5>(threadIdentifier, function, param1, param2, param3, param4, param5);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
class CGlobalProcedureT_Param6 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param6(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param6(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6);
		
	}
};

// used for global procedures (no return value) with 6 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
{
	CGlobalProcedureT_Param6<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
{
	CGlobalProcedureT_Param6<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>* f = new CGlobalProcedureT_Param6<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(threadIdentifier, function, param1, param2, param3, param4, param5, param6);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 6 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
{
	CGlobalProcedureT_Param6<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
{
	CGlobalProcedureT_Param6<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>* f = new CGlobalProcedureT_Param6<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(threadIdentifier, function, param1, param2, param3, param4, param5, param6);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
class CGlobalProcedureT_Param7 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param7(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param7(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7);
		
	}
};

// used for global procedures (no return value) with 7 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
{
	CGlobalProcedureT_Param7<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
{
	CGlobalProcedureT_Param7<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>* f = new CGlobalProcedureT_Param7<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 7 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
{
	CGlobalProcedureT_Param7<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
{
	CGlobalProcedureT_Param7<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>* f = new CGlobalProcedureT_Param7<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
class CGlobalProcedureT_Param8 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param8(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param8(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8);
		
	}
};

// used for global procedures (no return value) with 8 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
{
	CGlobalProcedureT_Param8<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
{
	CGlobalProcedureT_Param8<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>* f = new CGlobalProcedureT_Param8<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 8 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
{
	CGlobalProcedureT_Param8<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
{
	CGlobalProcedureT_Param8<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>* f = new CGlobalProcedureT_Param8<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
class CGlobalProcedureT_Param9 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param9(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param9(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9);
		
	}
};

// used for global procedures (no return value) with 9 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
{
	CGlobalProcedureT_Param9<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
{
	CGlobalProcedureT_Param9<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>* f = new CGlobalProcedureT_Param9<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 9 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
{
	CGlobalProcedureT_Param9<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9)
{
	CGlobalProcedureT_Param9<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>* f = new CGlobalProcedureT_Param9<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
class CGlobalProcedureT_Param10 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param10(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param10(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10);
		
	}
};

// used for global procedures (no return value) with 10 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
{
	CGlobalProcedureT_Param10<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
{
	CGlobalProcedureT_Param10<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>* f = new CGlobalProcedureT_Param10<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 10 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
{
	CGlobalProcedureT_Param10<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
{
	CGlobalProcedureT_Param10<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>* f = new CGlobalProcedureT_Param10<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
class CGlobalProcedureT_Param11 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param11(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param11(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11);
		
	}
};

// used for global procedures (no return value) with 11 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
{
	CGlobalProcedureT_Param11<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
{
	CGlobalProcedureT_Param11<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>* f = new CGlobalProcedureT_Param11<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 11 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
{
	CGlobalProcedureT_Param11<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11)
{
	CGlobalProcedureT_Param11<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>* f = new CGlobalProcedureT_Param11<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
class CGlobalProcedureT_Param12 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param12(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param12(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12);
		
	}
};

// used for global procedures (no return value) with 12 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
{
	CGlobalProcedureT_Param12<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
{
	CGlobalProcedureT_Param12<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>* f = new CGlobalProcedureT_Param12<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 12 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
{
	CGlobalProcedureT_Param12<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12)
{
	CGlobalProcedureT_Param12<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>* f = new CGlobalProcedureT_Param12<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
class CGlobalProcedureT_Param13 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param13(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param13(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13);
		
	}
};

// used for global procedures (no return value) with 13 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
{
	CGlobalProcedureT_Param13<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
{
	CGlobalProcedureT_Param13<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>* f = new CGlobalProcedureT_Param13<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 13 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
{
	CGlobalProcedureT_Param13<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13)
{
	CGlobalProcedureT_Param13<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>* f = new CGlobalProcedureT_Param13<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
class CGlobalProcedureT_Param14 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param14(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param14(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14);
		
	}
};

// used for global procedures (no return value) with 14 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
{
	CGlobalProcedureT_Param14<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
{
	CGlobalProcedureT_Param14<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>* f = new CGlobalProcedureT_Param14<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 14 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
{
	CGlobalProcedureT_Param14<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14)
{
	CGlobalProcedureT_Param14<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>* f = new CGlobalProcedureT_Param14<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
class CGlobalProcedureT_Param15 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param15(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param15(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15);
		
	}
};

// used for global procedures (no return value) with 15 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
{
	CGlobalProcedureT_Param15<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
{
	CGlobalProcedureT_Param15<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>* f = new CGlobalProcedureT_Param15<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 15 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
{
	CGlobalProcedureT_Param15<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15)
{
	CGlobalProcedureT_Param15<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>* f = new CGlobalProcedureT_Param15<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
class CGlobalProcedureT_Param16 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param16(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param16(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16);
		
	}
};

// used for global procedures (no return value) with 16 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
{
	CGlobalProcedureT_Param16<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
{
	CGlobalProcedureT_Param16<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>* f = new CGlobalProcedureT_Param16<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 16 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
{
	CGlobalProcedureT_Param16<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16)
{
	CGlobalProcedureT_Param16<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>* f = new CGlobalProcedureT_Param16<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
class CGlobalProcedureT_Param17 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param17(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param17(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17);
		
	}
};

// used for global procedures (no return value) with 17 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
{
	CGlobalProcedureT_Param17<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
{
	CGlobalProcedureT_Param17<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>* f = new CGlobalProcedureT_Param17<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 17 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
{
	CGlobalProcedureT_Param17<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17)
{
	CGlobalProcedureT_Param17<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>* f = new CGlobalProcedureT_Param17<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
class CGlobalProcedureT_Param18 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param18(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param18(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18);
		
	}
};

// used for global procedures (no return value) with 18 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
{
	CGlobalProcedureT_Param18<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
{
	CGlobalProcedureT_Param18<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>* f = new CGlobalProcedureT_Param18<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 18 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
{
	CGlobalProcedureT_Param18<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18)
{
	CGlobalProcedureT_Param18<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>* f = new CGlobalProcedureT_Param18<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
class CGlobalProcedureT_Param19 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param19(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param19(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19);
		
	}
};

// used for global procedures (no return value) with 19 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
{
	CGlobalProcedureT_Param19<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
{
	CGlobalProcedureT_Param19<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>* f = new CGlobalProcedureT_Param19<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 19 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
{
	CGlobalProcedureT_Param19<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19)
{
	CGlobalProcedureT_Param19<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>* f = new CGlobalProcedureT_Param19<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
class CGlobalProcedureT_Param20 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param20(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param20(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20);
		
	}
};

// used for global procedures (no return value) with 20 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
{
	CGlobalProcedureT_Param20<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
{
	CGlobalProcedureT_Param20<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>* f = new CGlobalProcedureT_Param20<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 20 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
{
	CGlobalProcedureT_Param20<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20)
{
	CGlobalProcedureT_Param20<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>* f = new CGlobalProcedureT_Param20<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
class CGlobalProcedureT_Param21 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param21(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param21(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21);
		
	}
};

// used for global procedures (no return value) with 21 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
{
	CGlobalProcedureT_Param21<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
{
	CGlobalProcedureT_Param21<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>* f = new CGlobalProcedureT_Param21<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 21 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
{
	CGlobalProcedureT_Param21<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21)
{
	CGlobalProcedureT_Param21<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>* f = new CGlobalProcedureT_Param21<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
class CGlobalProcedureT_Param22 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param22(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param22(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22);
		
	}
};

// used for global procedures (no return value) with 22 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
{
	CGlobalProcedureT_Param22<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
{
	CGlobalProcedureT_Param22<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>* f = new CGlobalProcedureT_Param22<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 22 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
{
	CGlobalProcedureT_Param22<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22)
{
	CGlobalProcedureT_Param22<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>* f = new CGlobalProcedureT_Param22<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
class CGlobalProcedureT_Param23 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param23(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param23(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23);
		
	}
};

// used for global procedures (no return value) with 23 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
{
	CGlobalProcedureT_Param23<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
{
	CGlobalProcedureT_Param23<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>* f = new CGlobalProcedureT_Param23<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 23 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
{
	CGlobalProcedureT_Param23<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23)
{
	CGlobalProcedureT_Param23<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>* f = new CGlobalProcedureT_Param23<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
class CGlobalProcedureT_Param24 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param24(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param24(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24);
		
	}
};

// used for global procedures (no return value) with 24 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
{
	CGlobalProcedureT_Param24<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
{
	CGlobalProcedureT_Param24<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>* f = new CGlobalProcedureT_Param24<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 24 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
{
	CGlobalProcedureT_Param24<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24)
{
	CGlobalProcedureT_Param24<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>* f = new CGlobalProcedureT_Param24<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
class CGlobalProcedureT_Param25 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param25(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param25(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25);
		
	}
};

// used for global procedures (no return value) with 25 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
{
	CGlobalProcedureT_Param25<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
{
	CGlobalProcedureT_Param25<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>* f = new CGlobalProcedureT_Param25<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 25 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
{
	CGlobalProcedureT_Param25<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25)
{
	CGlobalProcedureT_Param25<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>* f = new CGlobalProcedureT_Param25<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
class CGlobalProcedureT_Param26 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param26(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param26(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26);
		
	}
};

// used for global procedures (no return value) with 26 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
{
	CGlobalProcedureT_Param26<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
{
	CGlobalProcedureT_Param26<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>* f = new CGlobalProcedureT_Param26<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 26 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
{
	CGlobalProcedureT_Param26<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26)
{
	CGlobalProcedureT_Param26<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>* f = new CGlobalProcedureT_Param26<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
class CGlobalProcedureT_Param27 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param27(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param27(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27);
		
	}
};

// used for global procedures (no return value) with 27 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
{
	CGlobalProcedureT_Param27<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
{
	CGlobalProcedureT_Param27<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>* f = new CGlobalProcedureT_Param27<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 27 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
{
	CGlobalProcedureT_Param27<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27)
{
	CGlobalProcedureT_Param27<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>* f = new CGlobalProcedureT_Param27<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
class CGlobalProcedureT_Param28 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param28(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param28(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28);
		
	}
};

// used for global procedures (no return value) with 28 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
{
	CGlobalProcedureT_Param28<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
{
	CGlobalProcedureT_Param28<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>* f = new CGlobalProcedureT_Param28<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 28 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
{
	CGlobalProcedureT_Param28<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28)
{
	CGlobalProcedureT_Param28<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>* f = new CGlobalProcedureT_Param28<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
class CGlobalProcedureT_Param29 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param29(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param29(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29);
		
	}
};

// used for global procedures (no return value) with 29 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
{
	CGlobalProcedureT_Param29<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
{
	CGlobalProcedureT_Param29<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>* f = new CGlobalProcedureT_Param29<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 29 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
{
	CGlobalProcedureT_Param29<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29)
{
	CGlobalProcedureT_Param29<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>* f = new CGlobalProcedureT_Param29<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
class CGlobalProcedureT_Param30 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param30(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param30(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30);
		
	}
};

// used for global procedures (no return value) with 30 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
{
	CGlobalProcedureT_Param30<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
{
	CGlobalProcedureT_Param30<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>* f = new CGlobalProcedureT_Param30<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 30 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
{
	CGlobalProcedureT_Param30<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30)
{
	CGlobalProcedureT_Param30<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>* f = new CGlobalProcedureT_Param30<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
class CGlobalProcedureT_Param31 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param31(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param31(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31);
		
	}
};

// used for global procedures (no return value) with 31 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
{
	CGlobalProcedureT_Param31<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
{
	CGlobalProcedureT_Param31<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>* f = new CGlobalProcedureT_Param31<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 31 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
{
	CGlobalProcedureT_Param31<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31)
{
	CGlobalProcedureT_Param31<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>* f = new CGlobalProcedureT_Param31<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
class CGlobalProcedureT_Param32 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param32(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param32(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32);
		
	}
};

// used for global procedures (no return value) with 32 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
{
	CGlobalProcedureT_Param32<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
{
	CGlobalProcedureT_Param32<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>* f = new CGlobalProcedureT_Param32<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 32 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
{
	CGlobalProcedureT_Param32<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32)
{
	CGlobalProcedureT_Param32<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>* f = new CGlobalProcedureT_Param32<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
class CGlobalProcedureT_Param33 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param33(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param33(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33);
		
	}
};

// used for global procedures (no return value) with 33 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
{
	CGlobalProcedureT_Param33<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
{
	CGlobalProcedureT_Param33<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>* f = new CGlobalProcedureT_Param33<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 33 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
{
	CGlobalProcedureT_Param33<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33)
{
	CGlobalProcedureT_Param33<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>* f = new CGlobalProcedureT_Param33<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
class CGlobalProcedureT_Param34 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param34(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param34(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34);
		
	}
};

// used for global procedures (no return value) with 34 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
{
	CGlobalProcedureT_Param34<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
{
	CGlobalProcedureT_Param34<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>* f = new CGlobalProcedureT_Param34<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 34 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
{
	CGlobalProcedureT_Param34<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34)
{
	CGlobalProcedureT_Param34<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>* f = new CGlobalProcedureT_Param34<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
class CGlobalProcedureT_Param35 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param35(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param35(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35);
		
	}
};

// used for global procedures (no return value) with 35 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
{
	CGlobalProcedureT_Param35<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
{
	CGlobalProcedureT_Param35<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>* f = new CGlobalProcedureT_Param35<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 35 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
{
	CGlobalProcedureT_Param35<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35)
{
	CGlobalProcedureT_Param35<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>* f = new CGlobalProcedureT_Param35<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
class CGlobalProcedureT_Param36 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param36(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param36(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36);
		
	}
};

// used for global procedures (no return value) with 36 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
{
	CGlobalProcedureT_Param36<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
{
	CGlobalProcedureT_Param36<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>* f = new CGlobalProcedureT_Param36<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 36 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
{
	CGlobalProcedureT_Param36<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36)
{
	CGlobalProcedureT_Param36<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>* f = new CGlobalProcedureT_Param36<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
class CGlobalProcedureT_Param37 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
	TParam37	m_Param37;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param37(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param37(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36, m_Param37);
		
	}
};

// used for global procedures (no return value) with 37 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
{
	CGlobalProcedureT_Param37<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
{
	CGlobalProcedureT_Param37<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>* f = new CGlobalProcedureT_Param37<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 37 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
{
	CGlobalProcedureT_Param37<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37)
{
	CGlobalProcedureT_Param37<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>* f = new CGlobalProcedureT_Param37<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
class CGlobalProcedureT_Param38 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
	TParam37	m_Param37;
	TParam38	m_Param38;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param38(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param38(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36, m_Param37, m_Param38);
		
	}
};

// used for global procedures (no return value) with 38 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
{
	CGlobalProcedureT_Param38<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
{
	CGlobalProcedureT_Param38<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>* f = new CGlobalProcedureT_Param38<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 38 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
{
	CGlobalProcedureT_Param38<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38)
{
	CGlobalProcedureT_Param38<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>* f = new CGlobalProcedureT_Param38<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
class CGlobalProcedureT_Param39 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
	TParam37	m_Param37;
	TParam38	m_Param38;
	TParam39	m_Param39;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param39(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38)
	, m_Param39(param39){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param39(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38)
	, m_Param39(param39){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36, m_Param37, m_Param38, m_Param39);
		
	}
};

// used for global procedures (no return value) with 39 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>, <TParam39>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
{
	CGlobalProcedureT_Param39<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
{
	CGlobalProcedureT_Param39<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>* f = new CGlobalProcedureT_Param39<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 39 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>, <TParam39>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
{
	CGlobalProcedureT_Param39<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39)
{
	CGlobalProcedureT_Param39<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>* f = new CGlobalProcedureT_Param39<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39);
	f->Call(TRUE);
}

//==================================================================================
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
class CGlobalProcedureT_Param40 : public CBaseFunctionWrapper
{
	typedef void (AFX_CDECL *FunctionPointer)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40);
	FunctionPointer		m_FunctionPointer;
	TParam1	m_Param1;
	TParam2	m_Param2;
	TParam3	m_Param3;
	TParam4	m_Param4;
	TParam5	m_Param5;
	TParam6	m_Param6;
	TParam7	m_Param7;
	TParam8	m_Param8;
	TParam9	m_Param9;
	TParam10	m_Param10;
	TParam11	m_Param11;
	TParam12	m_Param12;
	TParam13	m_Param13;
	TParam14	m_Param14;
	TParam15	m_Param15;
	TParam16	m_Param16;
	TParam17	m_Param17;
	TParam18	m_Param18;
	TParam19	m_Param19;
	TParam20	m_Param20;
	TParam21	m_Param21;
	TParam22	m_Param22;
	TParam23	m_Param23;
	TParam24	m_Param24;
	TParam25	m_Param25;
	TParam26	m_Param26;
	TParam27	m_Param27;
	TParam28	m_Param28;
	TParam29	m_Param29;
	TParam30	m_Param30;
	TParam31	m_Param31;
	TParam32	m_Param32;
	TParam33	m_Param33;
	TParam34	m_Param34;
	TParam35	m_Param35;
	TParam36	m_Param36;
	TParam37	m_Param37;
	TParam38	m_Param38;
	TParam39	m_Param39;
	TParam40	m_Param40;
public:
	//----------------------------------------------------------------------------
	CGlobalProcedureT_Param40(DWORD nThreadId, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
	: CBaseFunctionWrapper(nThreadId)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38)
	, m_Param39(param39)
	, m_Param40(param40){
}
//----------------------------------------------------------------------------
	CGlobalProcedureT_Param40(HWND hwnd, FunctionPointer functionPointer, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
	: CBaseFunctionWrapper(hwnd)
	, m_FunctionPointer(functionPointer)
	, m_Param1(param1)
	, m_Param2(param2)
	, m_Param3(param3)
	, m_Param4(param4)
	, m_Param5(param5)
	, m_Param6(param6)
	, m_Param7(param7)
	, m_Param8(param8)
	, m_Param9(param9)
	, m_Param10(param10)
	, m_Param11(param11)
	, m_Param12(param12)
	, m_Param13(param13)
	, m_Param14(param14)
	, m_Param15(param15)
	, m_Param16(param16)
	, m_Param17(param17)
	, m_Param18(param18)
	, m_Param19(param19)
	, m_Param20(param20)
	, m_Param21(param21)
	, m_Param22(param22)
	, m_Param23(param23)
	, m_Param24(param24)
	, m_Param25(param25)
	, m_Param26(param26)
	, m_Param27(param27)
	, m_Param28(param28)
	, m_Param29(param29)
	, m_Param30(param30)
	, m_Param31(param31)
	, m_Param32(param32)
	, m_Param33(param33)
	, m_Param34(param34)
	, m_Param35(param35)
	, m_Param36(param36)
	, m_Param37(param37)
	, m_Param38(param38)
	, m_Param39(param39)
	, m_Param40(param40){
}
	//----------------------------------------------------------------------------
	void InternalCall()
	{
		(*m_FunctionPointer)(m_Param1, m_Param2, m_Param3, m_Param4, m_Param5, m_Param6, m_Param7, m_Param8, m_Param9, m_Param10, m_Param11, m_Param12, m_Param13, m_Param14, m_Param15, m_Param16, m_Param17, m_Param18, m_Param19, m_Param20, m_Param21, m_Param22, m_Param23, m_Param24, m_Param25, m_Param26, m_Param27, m_Param28, m_Param29, m_Param30, m_Param31, m_Param32, m_Param33, m_Param34, m_Param35, m_Param36, m_Param37, m_Param38, m_Param39, m_Param40);
		
	}
};

// used for global procedures (no return value) with 40 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>, <TParam39>, <TParam40>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
void AfxInvokeThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
{
	CGlobalProcedureT_Param40<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39, param40);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
void AfxInvokeAsyncThreadGlobalProcedure(DWORD threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
{
	CGlobalProcedureT_Param40<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>* f = new CGlobalProcedureT_Param40<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39, param40);
	f->Call(TRUE);
}


// used for global procedures (no return value) with 40 parameters; prototype:
// void Function(<TParam1>, <TParam2>, <TParam3>, <TParam4>, <TParam5>, <TParam6>, <TParam7>, <TParam8>, <TParam9>, <TParam10>, <TParam11>, <TParam12>, <TParam13>, <TParam14>, <TParam15>, <TParam16>, <TParam17>, <TParam18>, <TParam19>, <TParam20>, <TParam21>, <TParam22>, <TParam23>, <TParam24>, <TParam25>, <TParam26>, <TParam27>, <TParam28>, <TParam29>, <TParam30>, <TParam31>, <TParam32>, <TParam33>, <TParam34>, <TParam35>, <TParam36>, <TParam37>, <TParam38>, <TParam39>, <TParam40>);
//-----------------------------------------------------------------------------
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
void AfxInvokeThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
{
	CGlobalProcedureT_Param40<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>  f(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39, param40);
	f.Call(FALSE);
}
//async version
template <class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TParam11, class TParam12, class TParam13, class TParam14, class TParam15, class TParam16, class TParam17, class TParam18, class TParam19, class TParam20, class TParam21, class TParam22, class TParam23, class TParam24, class TParam25, class TParam26, class TParam27, class TParam28, class TParam29, class TParam30, class TParam31, class TParam32, class TParam33, class TParam34, class TParam35, class TParam36, class TParam37, class TParam38, class TParam39, class TParam40>
void AfxInvokeAsyncThreadGlobalProcedure(HWND threadIdentifier, void (AFX_CDECL *function)(TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40), TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15, TParam16 param16, TParam17 param17, TParam18 param18, TParam19 param19, TParam20 param20, TParam21 param21, TParam22 param22, TParam23 param23, TParam24 param24, TParam25 param25, TParam26 param26, TParam27 param27, TParam28 param28, TParam29 param29, TParam30 param30, TParam31 param31, TParam32 param32, TParam33 param33, TParam34 param34, TParam35 param35, TParam36 param36, TParam37 param37, TParam38 param38, TParam39 param39, TParam40 param40)
{
	CGlobalProcedureT_Param40<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>* f = new CGlobalProcedureT_Param40<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TParam16, TParam17, TParam18, TParam19, TParam20, TParam21, TParam22, TParam23, TParam24, TParam25, TParam26, TParam27, TParam28, TParam29, TParam30, TParam31, TParam32, TParam33, TParam34, TParam35, TParam36, TParam37, TParam38, TParam39, TParam40>(threadIdentifier, function, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39, param40);
	f->Call(TRUE);
}

typedef  void (__stdcall *ON_DISPOSING_FUNC) (CObject*);