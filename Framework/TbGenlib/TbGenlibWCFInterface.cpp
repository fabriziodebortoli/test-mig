//BEGIN_HEADING - file version: 1.0
//WARNING - automatically generated code - DO NOT EDIT THIS FILE!

#include "stdafx.h"

//BEGIN_SOURCE_INCLUDE
#include	"basedoc.h"
#include	"addonmng.h"
//END_SOURCE_INCLUDE

#include <atlsafe.h>
#include <TbGeneric\WebServiceStateObjects.h>
#include <TBNameSolver\Templates.h>
//END_HEADING


namespace TbGenlibTbGenlib {

	//File: Framework\TbGenlib\Basedoc.cpp.
	extern "C" __declspec(dllexport) bool __CBaseDocument_GetMethods(HWND _hwnd, long handle, SAFEARRAY** arMethods) throw(...)
	{

		DataBool returnValueParam;

		DataArray arMethodsParam;

		CComSafeArray<BSTR> sfararMethods;
		if(*arMethods) {
			sfararMethods.Attach(*arMethods);
			for (long i = 0; i < (long)sfararMethods.GetCount(); i++){
				DataStr *pObj = new DataStr();
				pObj->SetCollateCultureSensitive(TRUE);
				pObj->SetSoapValue((sfararMethods)[i]);
				arMethodsParam.Add(pObj);
			}


		}

		CObject* pObj = ((CObject*)handle);

		if (!pObj->IsKindOf(RUNTIME_CLASS(CBaseDocument)))
			throw new CApplicationErrorException(_T("Invalid context object: CBaseDocument"));

		CBaseDocument& obj = *((CBaseDocument*)pObj);
		returnValueParam = AfxInvokeThreadFunction<DataBool, CBaseDocument, DataArray&>(_hwnd, &obj, &CBaseDocument::GetMethods, arMethodsParam);


		if (sfararMethods.m_psa)
			sfararMethods.Resize(arMethodsParam.GetSize());
		else
			sfararMethods.Create(arMethodsParam.GetSize());

		for (long i = 0; i < (long)sfararMethods.GetCount(); i++)
		{
			BSTR bstrarMethods = ((DataStr*) arMethodsParam.GetAt(i))->GetSoapValue();
			(sfararMethods)[i] =  bstrarMethods;
			::SysFreeString(bstrarMethods);
		}


		*arMethods = sfararMethods.Detach();
		return returnValueParam.GetSoapValue();
	}
}

TB_REGISTER_SOAP_SERVICE(TbGenlibTbGenlib::CTbGenlibTbGenlib)