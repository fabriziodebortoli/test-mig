<?xml version="1.0" encoding="UTF-8"?>
<FunctionObjects>
<Functions>
 <Group name ="Array" pagename="RefGuide-Framework-TBWoormEngine-BaseFunctions-Array" localize="Array Functions" >
    <Function name="Array_Sort" type="bool" localize="Sorts the array." >
      <Remarks localizable="true">Alternative syntax: %arrayname%.Sort(optional IsDescendingSort).</Remarks>
      <Result localizable="true">True if sort order has been completed successfully. </Result>
      <Prototype>logic Array_Sort(array_ArrayToSort, [logic_IsDescendingSort])</Prototype>
      <Param name="ArrayToSort" type="array" basetype="variant"  localize="representing a valid array field" />
      <Param name="IsDescendingSort (optional)" type="bool" localize="a boolean to sort Ascending (false) or Descending (true)" />
      <Example localizable="true">Array_Sort(Numbers) => Yes;Numbers.Sort() => Yes </Example>
    </Function>
   <Function name="Array_Add" type="bool" localize="Adds an item beyond the last element of an array."  >
     <Remarks localizable="true">Alternative syntax: %arrayname%.Add(ItemToAdd).</Remarks>
     <Result localizable="true">False, if the items are incompatible.</Result>
     <Prototype>logic Array_Add (array_ArrayDestination, any_ItemToAdd)</Prototype>
     <Param name="ArrayDestination" type="array" basetype="variant" localize="the array to which to add the item" />
     <Param  name="ItemToAdd" type="variant" localize="the item to add to" />
     <Example localizable="true">Array_Add(OddNumbers, 9) => Yes;OddNumbers.Add(9) => Yes</Example>
   </Function>
   <Function name="Array_Append" type="bool" localize="Appends a whole array to another one."  >
     <Remarks localizable="true">Alternative syntax: %arrayname%.Append(ArraySource)</Remarks>
     <Result localizable="true">False, if the items are incompatible.</Result>
     <Prototype>logic Array_Append (array_ArrayDestination, array_ArraySource)</Prototype>
     <Param name="ArrayDestination" type="array" basetype="variant" localize="the array to which to append" />
     <Param name="ArraySource" type="array" basetype="variant" localize="the array to append to" />
     <Example localizable="true">Array_Append(Numbers, OddNumbers) => Yes;Numbers.Append(OddNumbers) => Yes</Example>
   </Function>
   <Function name="Array_Attach" type="bool" localize="Links the source array to the destination one." >
     <Remarks localizable="true">Alternative syntax: %arrayname%.Attach(ArraySource).</Remarks>
     <Result localizable="true">It returns False if the attach action is not allowed.</Result>
     <Prototype>logic Array_Attach (array_ArrayDestination, array_ArraySource)</Prototype>
     <Param name="ArrayDestination" type="array" basetype="variant" localize="the array to which to attach" />
     <Param name="ArraySource" type="array" basetype="variant" localize="the array field to attach to" />
     <Example localizable="true">Array_Attach(Numbers, LiteralNumbers) => Yes;Numbers.Attach(LiteralNumbers) => Yes</Example>
    </Function>
   <Function name="Array_Clear" type="integer" localize="Removes all the items from the array." >
     <Remarks localizable="true">Alternative syntax: %arrayname%.Clear().</Remarks>
     <Result localizable="true">It always returns the value 0. </Result>
     <Prototype>integer Array_Clear (array_ArrayToClear) </Prototype>
     <Param name="ArrayToClear" type="array" basetype="variant" localize="representing a valid array field" />
     <Example localizable="true">Array_Clear(Numbers) => 0;Numbers.Clear() => 0</Example>
    </Function>
   <Function name="Array_Contains" type="bool" localize="Cheks if the array contains the item." >
     <Remarks localizable="true">Alternative syntax: %arrayname%.Contains(ItemToCheck)</Remarks>
     <Result localizable="true">True if the item is in the array. </Result>
     <Prototype>logic Array_Contains(array_ArraName, any_ItemToCheck])</Prototype>
     <Param name="ArrayName" type="array" basetype="variant" localize="representing a valid array field" />
     <Param name="ItemToCheck" type="variant" localize="the value item to check in the array" />
     <Example localizable="true">Array_Contains(Numbers, 0) => No;Numbers.Contains(0) => No</Example>
   </Function>  
   <Function name="Array_Copy" type="bool" localize="Copies the items from the source to the destination array." >
     <Remarks localizable="true">Alternative syntax: %arrayname%.Copy(ArraySource).</Remarks>
     <Prototype>logic Array_Copy (array_ArrayDestination, array_ArraySource)</Prototype>
     <Param name="ArrayDestination" type="array" basetype="variant" localize="the array field to which to copy (it will be overwritten)" />
     <Param name="ArraySource" type="array" basetype="variant" localize="the array field to copy to the destination" />
     <Example localizable="true">Array_Copy(Numbers, EvenNumbers) => Yes;Numbers.Copy(EvenNumbers) => Yes</Example>
    </Function>  
   <Function name="Array_Create" type="array" basetype="variant" localize="Creates an array field initialized with the parameters."  >
     <Prototype>array Array_Create ([any_ItemValue, ... , any_ItemValueN, ....])</Prototype>
     <Param name="ItemValue" type="variant" localize="the initialization items" />
     <Example localizable="true">Array_Create(2, 4, 6, 8, 10) => omissis</Example>
    </Function>
   <Function name="Array_Detach" type="bool" localize="Disconnects all attached array from the array."  >
     <Remarks localizable="true">Alternative syntax: %arrayname%.Detach()</Remarks>
     <Result localizable="true">It always returns True. </Result>
      <Prototype>logic Array_Detach (array_ArrayDestination)</Prototype>
      <Param name="ArrayDestination" type="array" basetype="variant" localize="the array from  which to detach all others" />
      <Example localizable="true">Array_Detach(Numbers) => Yes;Numbers.Detach() => Yes</Example>
    </Function>
   <Function name="Array_Find" type="integer" localize="Returns the index position of an item found in the array." >
      <Remarks localizable="true">Alternative syntax: %arrayname%.Find(ItemToFind, optional StartPosition).</Remarks>
      <Result localizable="true">Returns -1 in case of unsuccessful search. </Result>
      <Prototype>integer Array_Find(array_ArrayName, any ItemToFind, [extended_StartPosition]) </Prototype>
      <Param name="ArrayName" type="array" basetype="variant" localize="the array field in which to look for" />
      <Param name="ItemToFind" type="variant" localize="the item value to search in the array" />
      <Param name="Info" type="variant" localize="The type of the above parameter depends on the type of array" />
      <Param name="StartPosition (optional)" type="integer" localize="the index at which to start the search" />
      <Example localizable="true">Array_Find(Numbers, 10) => -1 (item not found);LiteralNumbers.Find("ten") => -1 (item not found) </Example>
    </Function>
   <Function name="Array_GetAt" type="variant" localize="Retrieves the item value identified by the index." >
      <Remarks localizable="true">Alternative syntax: %arrayname%[IndexPosition] or %arrayname.GetAt(IndexPosition)</Remarks>
      <Result localizable="true">The Result type depends on the type of the array items. </Result>
      <Prototype>any Array_GetAt(array_ArrayName, IndexPosition)</Prototype>
      <Param name="ArrayName" type="array" basetype="variant" localize="representing a valid array field" />
      <Param name="IndexPosition" type="integer" localize="the position in the array from which to retrieve" />
      <Example localizable="true">Array_GetAt(LiteralNumbers, 1) => one; LiteralNumbers[1] => one;LiteralNumbers.GetAt(1) => one </Example>
    </Function>
   <Function name="Array_Insert" type="bool" localize="Adds an item in a given position of the array, moving forward the following items."  >
     <Remarks localizable="true">Alternative syntax: %arrayname%.Insert(IndexPosition, ItemToInsert).</Remarks>
     <Result localizable="true">False, if the items are incompatible.</Result>
     <Prototype>logic Array_Insert (array_ArrayDestination, extended_IndexPosition, any_ItemToInsert)</Prototype>
     <Param name="ArrayDestination" type="array" basetype="variant" localize="the array to which to insert the item" />
     <Param name="IndexPosition" type="integer" localize="the item position to remove from the array" />
     <Param name="ItemToInsert" type="variant" localize="the item to insert" />
     <Example localizable="true">Array_Insert(Numbers, 0, 0) => Yes; Numbers.Insert(0, 0) => Yes </Example>
   </Function>
   <Function name="Array_Remove" type="variant" localize="Removes an item from the array, moving subsequent elements down."  >
     <Remarks localizable="true">Alternative syntax: %arrayname%.Remove(IndexPosition).</Remarks>
     <Result localizable="true">The type of the item removed. </Result>
     <Prototype>logic Array_Remove (array_ArraySource, extended_IndexPosition)</Prototype>
     <Param name="ArraySource" type="array" basetype="variant" localize="the array from which to remove the item" />
     <Param name="IndexPosition" type="integer" localize="the item position to remove from the array" />
     <Example localizable="true">Array_Remove(Numbers, 10) => Yes;Numbers.Remove (10) => Yes </Example>
   </Function>  
   <Function name="Array_SetAt" type="variant" localize="Inserts a value in the position of the array." >
      <Remarks localizable="true">Alternative syntax: %arrayname%[IndexPosition] = ValueToInsert or %arrayname%.SetAt(IndexPosition,ValueToInsert).</Remarks>
      <Result localizable="true">The Result type depends on the type of the array items. It always returns the value inserted. </Result>
      <Prototype>any Array_SetAt(array_ArrayName, extended_IndexPosition, any_ValueToInsert)</Prototype>
      <Param name="ArrayName" type="array" basetype="variant" localize="representing a valid array field" />
      <Param name="IndexPosition" type="integer" localize="the position in the array from which to retrieve" />
      <Param name="ValueToInsert" type="variant" localize="the value to insert in the specified position" />
      <Param name="Info" type="variant" localize="The type of the above parameter depends on the type of array" />
      <Example localizable="true">Array_SetAt(LiteralNumbers, 7, "seven") => seven;LiteralNumbers[7] = "seven" => seven;LiteralNumbers.SetAt(7, "seven") => seven </Example>
    </Function>
   <Function name="Array_Size" type="integer" localize="Returns the number of array items." >
      <Remarks localizable="true">Alternative syntax: %arrayname%.Size().</Remarks>
      <Prototype> integer Array_Size(array_ArrayToSize) </Prototype>
      <Param name="ArrayToSize" type="array" basetype="variant" localize="representing a valid array field" />
      <Example localizable="true">Array_Size(Numbers) => 10;Numbers.Size() => 10 </Example>
    </Function>
   <Function name="Array_Sum" type="variant" localize="Sum the array elements" >
     <Remarks localizable="true">Alternative syntax: %arrayname%.Sum()</Remarks>
     <Result localizable="true">It returns the sum of the array elements </Result>
     <Prototype>variant Array_Sum(ar)</Prototype>
     <Param name="ArrayToSum" type="array" basetype="variant"  localize="representing a valid array field" />
     <Example localizable="true"> </Example>
   </Function>
 </Group>
  
 <Group name="DateAndTime" pagename="RefGuide-Framework-TBWoormEngine-BaseFunctions-DateAndTime" localize="Date and Time Functions">
   <Function name="AppDate" type="date"  localize="Returns the current application date." >
     <Prototype>date AppDate() </Prototype>
     <Example localizable="true">AppDate() => 11/11/2011 </Example>
   </Function>
   <Function name="AppYear" type="integer"  localize="Returns the year of the current application date." >
     <Prototype>integer AppYear() </Prototype>
     <Example localizable="true">AppYear() => 2011 </Example>
   </Function>
   <Function name="Cdow" type="string"  localize="Returns the name of the day of the week corresponding to a date." >
     <Prototype>string Cdow(date_ADate)</Prototype>
     <Param name="ADate" type="date" localize="an expression of a date" />
     <Example localizable="true">Cdow({D "11/11/2011"}) => Friday </Example>
   </Function>
   <Function name="Cmonth" type="string" localize="Returns the name of the month starting from a date." >
     <Prototype>string Cmonth(date_ADate)</Prototype>
     <Param name="ADate" type="date" localize="an expression of a date" />
     <Example localizable="true">Cmonth({D "11/11/2011"}) => November </Example>
   </Function>
   <Function name="Ctod" type="date" localize="Converts a string to a date, and also converts those dates that seem outside the limits." >
     <Prototype>date Ctod(string_ADate)</Prototype>
     <Param name="ADate" type="string" localize="a string representing a date with format YYYYMMDD" />
     <Example localizable="true">Ctod("20091111") => 11/11/2009;Ctod("20091111asdf") => 11/11/2009 </Example>
   </Function> 
   <Function name="Date" type="date" localize="Returns the current system date/the date starting from the parameters." >
     <Prototype>date Date(integer_Day, integer_Month, integer_Year)</Prototype>
     <Param name="Day" type="integer" optional="true" localize="a number from 1 to 31" />
     <Param name="Month" type="integer" optional="true" localize="a number from 1 to 12" />
     <Param name="Year" type="integer" optional="true" localize="a number from 1800 to 2199" />
     <Example localizable="true">Date() => 11/25/2009 ; Date(11,11,2011) => 11/11/2011 </Example>
   </Function>
   <Function name="DateTime" type="DateTime" localize="Returns the system date or the date starting from the parameters." >
     <Prototype>dateTime DateTime(integer_Day, integer_Month, integer_Year, integer_Hours, integer_Minutes, integer_Seconds)</Prototype>
     <Param name="Day" type="integer" optional="true" localize="a number from 1 to 31" />
     <Param name="Month" type="integer" optional="true" localize="a number from 1 to 12" />
     <Param name="Year" type="integer" optional="true" localize="a number from 1800 to 2199" />
     <Param name="Hours" type="integer" optional="true" localize="a number from 0 to 23" />
     <Param name="Minutes" type="integer" optional="true" localize="a number from 0 to 59" />
     <Param name="Seconds " type="integer" optional="true" localize="a number from 0 to 59" />
     <Example localizable="true">DateTime() => 25/11/2011 17:30 ; DateTime(11,11,2011,23,59,59) => 11/11/2011 23:59:59</Example>
   </Function>
   <Function name="Day" type="integer" localize="Returns the day of the month, a number from 1 to 31." >
     <Prototype>integer Day(date_ADate)</Prototype>
     <Param name="ADate" type="date" localize="an expression of a date" />
     <Example localizable="true">Day({D "22/12/2009" }) => 22 </Example>
   </Function>
   <Function name="DayOfWeek" type="integer" localize="Returns the day of the week corresponding to a date, a number from 1(Monday) to 7 (Sunday)." >
     <Prototype>integer DayOfWeek(date_ADate)</Prototype>
     <Param name="ADate" type="date" localize="an expression of a date" />
     <Example localizable="true">DayOfWeek({D "11/11/2011"}) => 5 (Friday) </Example>
   </Function>
   <Function name="DayOfYear" type="integer" localize="Returns the day of the year corresponding to a date, a number from 1 to 366." >
     <Prototype>integer DayOfYear(date_ADate)</Prototype>
     <Param name="ADate" type="date" localize="an expression of a date" />
     <Example localizable="true">DayOfYear({D "11/11/2011"}) => 315 </Example>
   </Function>
   <Function name="Dtoc" type="string" localize="Converts a date to a string with format YYYYMMDD." >
     <Prototype>string Dtoc(date_ADate)</Prototype>
     <Param name="ADate" type="date" localize="an expression of a date" />
     <Example localizable="true">Dtoc({D "11/11/2009"}) => 20091111 </Example>
   </Function>
   <Function name="ElapsedTime" type="elapsedTime" localize="Returns the time passed between two dates." >
     <Prototype>elapsedTime elapsedTime(date_LowerDate, date_UpperDate)</Prototype>
     <Result localizable="true">If LowerDate occurs after UpperDate, the function returns a negative number. </Result>
     <Param name="LowerDate" type="date" localize="the lower limit" />
     <Param name="UpperDate " type="date" localize="the upper limit" />
     <Example localizable="true">elapsedTime({D "11/11/2009"}, {D "12/12/2009"}) => 2678400.00 ;  
elapsedTime({D "11/11/2009"}, {D "12/12/2009"}) => 744:00 
(The aspect depends on the "ElapsedTime" format style) </Example>
   </Function>
   <Function name="GiulianDate" type="integer" localize="Returns the number of the day according to the Julian calendar." >
     <Prototype>integer GiulianDate(date_ADate)</Prototype>
     <Param name="ADate" type="date" localize="an expression of a date" />
     <Example localizable="true">GiulianDate({D "11/11/2009"}) => 76651.00 </Example>
   </Function>
   <Function name="LastMonthDay" type="date" localize="Returns the date of the last day of the month." >
     <Prototype>date LastMonthDay(date_ADate)</Prototype>
     <Param name="ADate" type="date" localize="an expression of a date" />
     <Example localizable="true">LastMonthDay({D "11/11/2009"}) => 11/30/2009 </Example>
   </Function>
   <Function name="Month" type="integer" localize="Returns the month of the year, a number from 1 to 12." >
     <Prototype>integer Month(date_ADate)</Prototype>
     <Param name="ADate" type="date" localize="an expression of a date" />
     <Example localizable="true">Month({D "11/11/2009"}) => 11 </Example>
   </Function>
   <Function name="MonthDays" type="integer" localize="Returns the lenght for the month of year, according to the leap year." >
     <Prototype>integer MonthDays(integer_Month, integer_Year)</Prototype>
     <Param name="Month" type="integer" localize="a number from 0 to 32767" />
     <Param name="Year" type="integer" localize="a number from 0 to 32767" />
     <Example localizable="true">MonthDays(11,2009) => 30 </Example>
   </Function>
   <Function name="MonthName" type="string" localize="Returns the name of the month." >
     <Prototype>string MonthName(integer_Month)</Prototype>
     <Param name="Month" type="integer" localize="a number from 1 to 12" />
     <Example localizable="true">MonthName(11) => November </Example>
   </Function>
   <Function name="Time" type="time" localize="Returns the the system time/the time starting from the parameters." >
     <Prototype>time Time(integer_Hours, integer_Minutes, integer_Seconds)</Prototype>
     <Param name="Hours" type="integer" localize="a number from 0 to 23" />
     <Param name="Minutes" type="integer" localize="a number from 0 to 59" />
     <Param name="Seconds " type="integer" localize="a number from 0 to 59" />
     <Example localizable="true">Time() => 12:13:14  - Time(12,13,14) => 12:13:14 </Example>
   </Function>
   <Function name="WeekOfMonth" type="integer" localize="Returns the week of the month, a number from 1 to 5." >
     <Prototype>integer WeekOfMonth(date_ADate)</Prototype>
     <Result localizable="true">The week belongs to the month in which Monday (the first day of week) falls. </Result>
     <Param name="ADate" type="date" localize="an expression of a date" />
     <Example localizable="true">WeekOfMonth({D "11/11/2009"}) => 2 (the second week in November);WeekOfMonth({D "12/01/2009"}) => 5 (the fifth week in November) </Example>
   </Function>
   <Function name="WeekOfYear" type="integer" localize="Returns the week of the year, a number from 1 to 53." >
     <Prototype>integer WeekOfYear(date_ADate)</Prototype>
     <Param name="ADate" type="date" localize="an expression of a date" />
     <Example localizable="true">WeekOfYear({D &#34;1/1/2005&#34;}) => 52 (last week of 2004);WeekOfYear({D &#34;1/5/2009&#34;}) => 1 (first week of 2005) </Example>
   </Function>
  <Function name="Year" type="integer" localize="Returns the year of a date." >
     <Prototype>integer Year(date_ADate)</Prototype>
     <Param name="ADate" type="date" localize="an expression of a date" />
     <Example localizable="true">Year({D "11/11/2009"}) => 2009 </Example>
   </Function>
   <Function name="WeekStartDate" type="date" localize="Returns the start week date of the year." >
     <Prototype>date WeekStartDate(year, week-number)</Prototype>
     <Param name="year" type="integer" localize="year" />
     <Param name="week" type="integer" localize="week" />
     <Example localizable="true"></Example>
   </Function>
    <Function name="IsLeapYear" type="boolean" localize="Returns true when the year is leap" >
     <Prototype>boolean IsLeapYear(year)</Prototype>
     <Param name="year" type="integer" localize="year" />
     <Example localizable="true"></Example>
   </Function>
   <Function name="EasterSunday" type="date" localize="Returns the date of Easter Sunday" >
     <Prototype>date EasterSunday(year)</Prototype>
     <Param name="year" type="integer" localize="year" />
     <Example localizable="true"></Example>
   </Function>
   <Function name="DateAdd" type="DateTime" localize="Returns the date updated by parameters" >
     <Prototype>DateTime DateAdd(integer Day, integer Month, integer Year, integer Hours, integer Minutes, integer Seconds)</Prototype>
     <Param name="Day" type="integer" localize="a number from 1 to 31" />
     <Param name="Month" type="integer" localize="a number from 1 to 12" />
     <Param name="Year" type="integer" localize="a number from 1800 to 2199" />
     <Param name="Hours" type="integer" optional="true" localize="a number from 0 to 23" />
     <Param name="Minutes" type="integer" optional="true" localize="a number from 0 to 59" />
     <Param name="Seconds " type="integer" optional="true" localize="a number from 0 to 59" />
     <Example localizable="true"></Example>
   </Function>
 </Group>

 <Group name="Information" pagename="RefGuide-Framework-TBWoormEngine-BaseFunctions-Information" localize="Information Functions">
    <Function name="FileExists" type="bool" localize="Checks the file existence." >
      <Prototype>logic FileExists(string_FullPath)</Prototype>
      <Param name="FullPath" type="string" localize="the path and the file name to check" />
      <Example localizable="true">FileExists("C:\WINDOWS\system32\Notepad.exe") => Yes' </Example>
    </Function>
     <Function name="GetApplicationTitleFromNs" type="string" localize="Returns the application title related to the namespace." >
      <Prototype>string GetApplicationTitleFromNs(string_NameSpace)</Prototype>
      <Param name="NameSpace" type="string" localize="a string representing a valid name space" />
      <Example localizable="true">GetApplicationTitleFromNs("Document.erp.items.documents.Items") => Mago.Net;GetApplicationTitleFromNs("Framework.TbWoormViewer.TbWoormViewer.MailSend") => Framework </Example>
    </Function>  
    <Function name="GetCompanyName" type="string" localize="Returns the current company name." >
      <Prototype>string GetCompanyName()</Prototype>
      <Example localizable="true">GetCompanyName() => Earth" </Example>
    </Function>  
    <Function name="GetComputerName" type="string" localize="Returns the current computer name." >
      <Prototype>string GetComputerName([bool_RemoveSpecialCharacters])</Prototype>
      <Param name="RemoveSpecialCharacters (optional)" type="bool" localize="a switch to remove (default) or NOT remove the special characters from the Result" />
      <Example localizable="true">GetComputerName() => srv Exchange;GetComputerName(False) => srv-Exchange </Example>
    </Function>
    <Function name="GetCulture" type="string" localize="Returns the current culture of the report." >
      <Prototype>string GetCulture()</Prototype>
      <Example localizable="true">GetCulture() => it-IT </Example>
    </Function>
   <Function name="GetCulture" type="string" localize="Returns the culture in base of the parameters." >
     <Prototype>string GetCulture(string_RelatedTo, [logic_Preferred])</Prototype>
     <Param name="RelatedTo" type="string" localize="the returned culture is related to: user, company, or server (from the General settings of Administration Console)" />
     <Param name="Preferred (optional)" type="bool" localize="a switch to return the preferred language (true) or the regional settings (false)" />
     <Example localizable="true">GetCulture("company", true ) => omissis (the value in the Company Language field);GetCulture("company", false ) => omissis (the value in the Company Regional Settings field)</Example>
   </Function>
    <Function name="GetDataBaseType" type="string" localize="Returns the current RDMBS type (SQLSERVER or ORACLE)." >
      <Prototype>string GetDataBaseType()</Prototype>
      <Example localizable="true">GetDataBaseType() => SQLSERVER </Example>
    </Function>
    <Function name="GetDocumentTitleFromNS" type="string" localize="Returns the caption of the data-entry related to the namespace." >
      <Prototype>string GetDocumentTitleFromNS(string_NameSpace)</Prototype>
      <Param name="NameSpace" type="string" localize="a string representing a valid name space" />
      <Example localizable="true">GetDocumentTitleFromNS("ERP.CustomersSuppliers.Documents.Customers") => Customer Master Data</Example>
    </Function>
    <Function name="GetEdition" type="string" localize="Returns the current Mago.net edition." >
      <Prototype>string GetEdition()</Prototype>
      <Example localizable="true">GetEdition() => Professional </Example>
    </Function>
    <Function name="GetInstallationName" type="string" localize="Returns the current Mago.net installation name." >
      <Prototype>string GetInstallationName()</Prototype>
      <Example localizable="true">GetInstallationName() => MagoNet </Example>
    </Function>
    <Function name="GetInstallationPath" type="string" localize="Returns the current Mago.net installation path." >
      <Prototype>string GetInstallationPath()</Prototype>
      <Example localizable="true">GetInstallationPath() => C:\Program Files (x86)\MagoNet </Example>
    </Function>
    <Function name="GetInstallationVersion" type="string" localize="Returns the current Mago.net version in the format: Major.minor.servicepack.build." >
      <Prototype>string GetInstallationVersion()</Prototype>
      <Example localizable="true">GetInstallationVersion() => 3.6.1.0033 </Example>
    </Function>
    <Function name="GetLoginName" type="string" localize="Returns the current application user." >
      <Prototype>string GetLoginName()</Prototype>
      <Example localizable="true">GetLoginName() => Warehouseman </Example>
    </Function>
    <Function name="GetModuleTitleFromNs" type="string" localize="Returns a title module starting from a namespace." >
      <Prototype>string GetModuleTitleFromNs(string_NameSpace)</Prototype>
      <Param name="NameSpace" type="string" localize="a string representing a valid name space" />
      <Example localizable="true">GetModuleTitleFromNs("ERP.CustomersSuppliers.Documents.Customers") => Customers and Suppliers </Example>
    </Function>
    <Function name="GetNsFromPath" type="string" localize="Returns a name space starting from a path." >
      <Prototype>string GetNsFromPath(string_Path)</Prototype>
      <Param name="Path" type="string" localize="a string representing a valid Mago.net path" />
      <Example localizable="true">GetNsFromPath("C:\Program Files (x86)\Microarea\MagoNet\Standard\Applications\ERP\Company\Report\company.wrm") => Report.erp.company.Company.wrm </Example>
    </Function>
    <Function name="GetPathFromNs" type="string" localize="Returns a path starting from a namespace." >
      <Remarks localizable="true">The simplest Prototype also returns the file with extension. </Remarks>
      <Prototype>string GetPathFromNs(string_NameSpace, [string_RelatedTo])</Prototype>
      <Param name="NameSpace" type="string" localize="a string representing a valid name space" />
      <Param name="RelatedTo (optional)" type="string" localize="the returned path is related to: user, company, or standard" />
      <Example localizable="true">GetPathFromNs("Report.erp.company.Company.wrm") => C:\Program Files (x86)\Microarea\MagoNet\Standard\Applications\ERP\Company\Report\company.wrm;GetPathFromNs("Report.erp.company.Company.wrm", "standard") => C:\Program Files (x86)\Microarea\MagoNet\Standard\Applications\ERP\Company\Report;GetPathFromNs("Report.erp.company.Company.wrm", "user") => C:\Program Files (x86)\Microarea\MagoNet\Custom\Companies\%Company name%\Applications\ERP\Company\Report\Users\%User name% </Example>
    </Function>
    <Function name="GetProductLanguage" type="string" localize="Returns the ISO country code of the installation." >
      <Prototype>string GetProductLanguage()</Prototype>
      <Example localizable="true">GetProductLanguage() => IT </Example>
    </Function>
    <Function name="GetSetting" type="variant" localize="Retrieves a value from a Settings file." >
      <Result localizable="true">The Result and the DefaultResult type are to be identical, and they depend on the SettingName type. </Result>
      <Prototype>any GetSetting(string_NameSpaceFileSettings, string_SectionName, string_SettingName, any_DefaultResult)</Prototype>
      <Param name="NameSpaceFileSettings" type="string" localize="a string representing a valid name space of a settings file" />
      <Param name="SectionName" type="string" localize="a string representing a section presents in the settings file." />
      <Param name="SettingName " type="string" localize="a string representing the name of the value to retrieve" />
      <Param name="DefaultResult" type="variant" localize="the value to return if the setting has not been found" />
      <Example localizable="true">GetSetting ( "Extensions.TbMailer.Smtp.config" , "MailConnector-Smtp" , "HostName" , "Not Defined" ) => smtp.gmail.com</Example>
    </Function>
    <Function name="GetUserDescription" type="string" localize="Returns the description (handled by Administration Console) of the current application user." >
      <Prototype>string GetUserDescription()</Prototype>
      <Example localizable="true">GetUserDescription() => a workman who manages or works in a warehouse </Example>
    </Function>
    <Function name="GetUserDescription" type="string" localize="Returns the description (handled by Administration Console) of the specified application user." >
      <Prototype>string GetUserDescription(string_UserName)</Prototype>
      <Param name="UserName" type="string" localize="a string representing a valid application user name" />
      <Example localizable="true">GetUserDescription("Warehouseman") => a workman who manages or works in a warehouse</Example>
    </Function>
    <Function name="GetWindowUser" type="string" localize="Returns the current Windows user's name." >
      <Prototype>string GetWindowUser()</Prototype>
      <Example localizable="true">GetWindowUser() => Administrator </Example>
    </Function>
   <Function name="IsAdmin" type="bool" localize="Checks if the current user is an application administrator" >
     <Prototype>logic IsAdmin()</Prototype>
     <Example localizable="true">IsAdmin() => No </Example>
   </Function>
   <Function name="IsActivated" type="bool" localize="Checks if a single module of a single product is activated" >
      <Prototype>logic IsActivated(string_ProductName, string_ModuleNane)</Prototype>
      <Param name="ProductName" type="string" localize="a string representing a product." />
      <Param name="ModuleName" type="string" localize="a string representing a module." />
      <Example localizable="true">IsActivated("ERP", "TaxExigibilityDelivery") => Yes </Example>
    </Function>
   <Function name="IsDatabaseUnicode" type="bool" localize="Checks if the company database string columns support unicode character set." >
     <Prototype>logic IsDatabaseUnicode()</Prototype>
     <Example localizable="true">IsDatabaseUnicode() => No </Example>
   </Function>
    <Function name="IsRemoteInterface" type="bool" localize="Checks if the report is running in GDI (false) or in Web (true) mode." >
      <Prototype>logic IsRemoteInterface()</Prototype>
      <Example localizable="true">IsRemoteInterface() => No </Example>
    </Function>
   <Function name="IsRunningFromExternalController" type="bool" localize="Checks if the report has been called from external controller (Scheduler)." >
     <Prototype>logic IsRunningFromExternalController()</Prototype>
     <Example localizable="true">IsRunningFromExternalController() => No </Example>
   </Function>
    <Function name="TableExists" type="bool" localize="Checks if a database table/view/column exists." >
      <Prototype>logic TableExists(string_TableName, string_ColumnName)</Prototype>
      <Param name="TableName" type="string" localize="a string representing a valid table/view name" />
      <Param name="ColumnName" type="string" optional="true" localize="a string representing a valid column name" />
      <Example localizable="true">TableExists("MA_CustSupp") => Yes ; TableExists("MA_CustSupp", "Customer") => No </Example>
    </Function>
  </Group>
  
 <Group name="Math" pagename="RefGuide-Framework-TBWoormEngine-BaseFunctions-Math" localize="Math Functions">
    <Function name="Abs" type="double" localize="Returns the absolute value of a number, a number without its sign." >
      <Prototype>real Abs(real_Number)</Prototype>
      <Param name="Number" type="double" localize="the number for which you want the absolute value" />
      <Example localizable="true">Abs(-3.14) => 3.14;Abs(3.14) => 3.14 </Example>
    </Function>
    <Function name="Ceiling" type="double" localize="Returns the smallest following integer." >
      <Result localizable="true">The least integer that is greater than or equal to Number. </Result>
      <Prototype>real Ceiling(real_Number)</Prototype>
      <Param name="Number" type="double" localize=" is the value you want to round" />
      <Example localizable="true">Ceiling( 3.14) => 4.00;Ceiling(-3.14) => -3.00 </Example>
    </Function>
    <Function name="Fint" type="integer" localize="Converts a number to integer type." >
      <Prototype>integer Fint(real_Number)</Prototype>
      <Param name="Number" type="double" localize="is the number you want to convert to integer" />
      <Example localizable="true">Fint(3.14) => 3 </Example>
    </Function>
    <Function name="Flong" type="integer" localize="Converts a number to extended type." >
      <Prototype>extended Flong(real_Number)</Prototype>
      <Param name="Number" type="double" localize="is the number you want to convert to extended" />
      <Example localizable="true">Flong(3.14) => 3 </Example>
    </Function>
    <Function name="Floor" type="double" localize="Returns the largest previous integer." >
      <Result localizable="true">The greatest integer that is less than or equal to Number.</Result>
      <Prototype>real Floor(real_Number)</Prototype>
      <Param name="Number" type="double" localize=" is the value you want to round" />
      <Example localizable="true">Floor( 3.14) => 3.00;Floor(-3.14) => -4.00 </Example>
    </Function>
    <Function name="Max" type="variant" localize="Returns the largest value in a set of values." >
      <Remarks localizable="true">You need to compare at least two values.</Remarks>
      <Result localizable="true">The Result type depends on the type of the parameters (they are to be identical). </Result>
      <Prototype>any Max(any_Value1, any_Value2, [any_Value3, ... , any_ValueN])</Prototype>
      <Param name="Value1, Value2" type="variant" localize="the values for which you want to find the maximum one" />
      <Param name="Value3,...,ValueN (optional)" type="variant" localize ="the values for which you want to find the maximum one" />
      <Param name="Info" type="variant" localize="any Woorm type is allowed" />
      <Example localizable="true">Max(3.14, -3.14) => 3.14;Max (1, 2, 3, 4, 5) => 5;Max("Microarea", "Mago.net") => "Microarea";Max({D "31/12/2012"}, {D "31/12/2011"} => 31/12/2012 </Example>
    </Function>
    <Function name="Min" type="variant" localize="Returns the smallest value in a set of values." >
      <Remarks localizable="true">You need to compare at least two values. </Remarks>
      <Result localizable="true">The Result type depends on the type of the parameters (they are to be identical). </Result>
      <Prototype>any Min(any_Value1, any_Value2, [any_Value3, ... , any_ValueN])</Prototype>
      <Param name="Value1, Value2" type="variant" localize="the values for which you want to find the minimum one" />
      <Param name="Value3,...,ValueN (optional)" type="variant" localize ="the values for which you want to find the minimum one" />
      <Param name="Info" type="variant" localize="any Woorm type is allowed" />
       <Example localizable="true">Min(3.14, -3.14) => -3.14;Min (1, 2, 3, 4, 5) => 1;Min("Microarea", "Mago.net") => "Mago.net";Min({D "31/12/2012"}, {D "31/12/2011"} => 31/12/2011 </Example>
    </Function>
    <Function name="Mod" type="double" localize="Returns the remainder of division of one number by another." >
      <Prototype>real Mod(real_Dividend, real_Divisor)</Prototype>
      <Param name="Dividend" type="double" localize="the number to be divided by the Divisor" />
      <Param name="Divisor" type="double" localize="the number by which the Dividend is to be divided" />
      <Example localizable="true">Mod(3, 2) => 1.00 </Example>
    </Function>  
    <Function name="Round" type="double" localize="Rounds a number to the unit." >
      <Remarks localizable="true">It works only to unit, to round to a decimal digit: multiply and divide for 10/100/etc (see the third example).</Remarks>
      <Result localizable="true">rounded up if the decimal is equal or greater than 5, rounded down if the decimal is less than 5</Result>
      <Prototype>real Round(real_Number)</Prototype>
      <Param name="Number" type="double" localize="the number to be rounded" />
      <Example localizable="true">Round(321.45678) => 321.00;Round(321.54321) => 322.00;(Round(321.45678*100))/100  => 321.46 </Example>
    </Function>
    <Function name="Sign" type="integer" localize="Returns the sign of a number." >
      <Result localizable="true">one (1) if the number is positive, zero if the number is zero, or -1 if the number is negative</Result>
      <Prototype>integer Sign(real_Number)</Prototype>
      <Param name="Number" type="double" localize="the number to be checked" />
      <Example localizable="true">Sign(3.14) => 1;Sign(-3.14) => -1 </Example>
    </Function>

  </Group>
  
 <Group name="Miscellaneous" pagename="RefGuide-Framework-TBWoormEngine-BaseFunctions-Miscellaneous" localize="Miscellaneous Functions">
    <Function name="Ccat" type="string" localize="Concatenates all the text of a set of values." >
      <Remarks localizable="true">Allowed only in the Woorm groupings feature.</Remarks>
      <Prototype>string Ccat(string_FieldToConcatenate)</Prototype>
      <Param name="FieldToConcatenate" type="string" localize="archive or expression field to be concatenated" />
      <Example localizable="true">Ccat(Item + Description) => omissis </Example>
    </Function>
    <Function name="Cmax" type="variant" localize="Returns the largest value between a range of values." >
      <Remarks localizable="true">Allowed only in the Woorm groupings feature. </Remarks>
      <Result localizable="true">It depends of the field type.</Result>
      <Prototype>any Cmax(any_Field)</Prototype>
      <Param name="Field" type="variant" localize="archive or expression field representing the range" />
      <Example localizable="true">Cmax(BasePrice) => omissis </Example>
    </Function>
    <Function name="Cmin" type="variant" localize="Returns the smallest value between a range of values." >
      <Remarks localizable="true">Allowed only in the Woorm groupings feature. </Remarks>
      <Result localizable="true">It depends of the field type</Result>
      <Prototype>any Cmin(any_Field)</Prototype>
      <Param name="Field" type="variant" localize="archive or expression field representing the range" />
      <Example localizable="true">Cmin(BasePrice) => omissis </Example>
    </Function>
    <Function name="Csum" type="variant" localize="Adds all the value of a range of values." >
      <Remarks localizable="true">Allowed only in the Woorm groupings feature. </Remarks>
      <Result localizable="true">It depends of the field type.</Result>
      <Prototype>any Csum(any_Field)</Prototype>
      <Param name="Field" type="variant" localize="archive or expression field representing the range" />
      <Example localizable="true">Csum(BasePrice) => omissis</Example>
    </Function>

   <Function name="ContentOf" type="string" localize="Returns a conditional string."  >
     <Remarks localizable="true">Allowed only in the "Order by" and "Where" clause. </Remarks>
     <Result localizable="true">It depends of the field type.</Result>
     <Prototype>string ContentOf(string_ConditionalExpression)</Prototype>
     <Param name="ConditionalExpression" type="string" localize="an If-inline condition that returns a string" />
     <Example localizable="true">ContentOf(askDescending ? "MA_Items.Item DESC" : "MA_Items.Item")  => omissis;ContentOf("MA_CompanyFiscalYears.FiscalYear = " + ValueOf(AppYear( ))) => omissi </Example>
   </Function>
   <Function name="ValueOf" type="string" localize="Returns a sql constant which represents the value of woorm variable took as parameters."  >
     <Remarks localizable="true">Allowed only in the ContentOf function. Deprecated! Replaced by the tag {EVAL WoormVariable} </Remarks>
     <Prototype>string ValueOf(any_WoormVariable)</Prototype>
     <Param name="WoormVariable" type="variant" localize="the woorm variable to transform to a constant string" />
     <Example localizable="true">ContentOf(askFilterDescription ? "MA_Items.Description like" + Valueof(askFilter) : "MA_Items.Item like" + Valueof (askFilter))  => omissis </Example>
   </Function>

   <Function name="Decode" type="variant" localize="Evaluates a list of conditions, and if a condition matches it returns the corresponding value." >
    <Remarks localizable="true">It provides the functionality of a multiple switch statement. It works like the function Decode of Oracle DBMS. </Remarks>
    <Result localizable="true">The Result type depends on the type of MatchedResult and NOMatchedResult parameters (they heve to be identical).</Result>
    <Prototype>any_matched_result = Decode (any_ExpressionToCompare, any_ExpressionToMatch1, any_MatchedResult1 [, any_ExpressionToMatch2, any_MatchedResult2 ...], any_NOMatchedResult)</Prototype>
    <Param name="ExpressionToCompare" type="variant" localize="is the value to compare" />
    <Param name="ExpressionToMatch" type="variant" localize="is the value that is compared against ExpressionToCompare" />
    <Param name="MatchedResult" type="variant" localize="is the value returned, if ExpressionToMatch matches to ExpressionToCompare" />  
    <Param name="NOMatchedResult" type="variant" localize="is the value returned if no matches are found" />
    <Example localizable="true">Decode (CommissionCtg, "ACC", "Accessories", "BICI", "Bikes", "SERV", "Services", "Other") => (depends on the CommissionCtg value); => Accessories OR Bikes OR Services OR Other' </Example>
  </Function>

   <Function name="IIF" type="variant" localize="Evaluates a list of conditions, and when a condition is true it returns the corresponding next value, otherwise it returns the last value" >
     <Remarks localizable="true">It provides the functionality of a multiple statment T-SQL CASE-WHEN-ELSE. It works like the function IIF of SqlServer DBMS, more it allows multiple condition </Remarks>
     <Result localizable="true">The Result type depends on the type of value-true ore value-false parameters (they heve to be identical).</Result>
     <Prototype>any_matched_result = IIF (ExpressionToEvaluate-1, Value-1 [, ExpressionToEvaluate-N, ValueN ...], Value-false)</Prototype>
     <Param name="ExpressionToEvaluate-1" type="boolean" localize="It is the conditional" />
     <Param name="Value-1" type="variant" localize="is the expression value when condition is true" />
     <Param name="Value-false" type="variant" localize="is the expression value when all conditions are false" />
     <Example localizable="true">IIF (CommissionCtg = "ACC", "Accessories", CommissionCtg = "BICI", "Bikes", CommissionCtg = "SERV", "Services", "Other") => (depends on the CommissionCtg value); => Accessories OR Bikes OR Services OR Other </Example>
   </Function>

   <Function name="Choose" type="variant" localize="Evaluates a list of values, and returns the indexed value." >
     <Remarks localizable="true">CHOOSE acts like an index into an array, where the array is composed of the arguments that follow the index argument 1-based. The index argument determines which of the following values will be returned. It works like the function Choose of SqlServer DBMS </Remarks>
     <Result localizable="true">The Result type depends on the type of selected value</Result>
     <Prototype>val_index = Choose ( index, val_1, val_2 [, val_n ] )</Prototype>
     <Param name="index" type="integer" localize="the selected index" />
     <Param name="value-1" type="variant" localize="first listed value" />
     <Param name="Value-n" type="variant" localize="last listed value" />
     <Example localizable="true">Choose (3, "Accessories", "Bikes", "Services", "Other") => "Services"</Example>
   </Function>

   <Function name="Rgb" type="integer" localize="Returns a single color value from a set of Red, Green, and Blue color components." >
    <Prototype>extended Rgb(integer_Red, integer_Green,integer_Blue)</Prototype>
    <Param name="Red" type="integer" localize="in the range 0–255, inclusive, that represents the intensity of the red component of the color." />
    <Param name="Green" type="integer" localize="in the range 0–255, inclusive, that represents the intensity of the green component of the color." />
    <Param name="Blue" type="integer" localize="in the range 0–255, inclusive, that represents the intensity of the blue component of the color." />
    <Example localizable="true">Rgb(0,0,0) => the value of the black color;Rgb(255,255,255) => the value of the white color </Example>
  </Function>
   <Function name="SetCulture" type="string" localize="Sets the culture for the report." >
     <Prototype>string SetCulture(string_Culture)</Prototype>
     <Param name="Culture" type="string" localize="representing a valid culture" />
     <Example localizable="true">SetCulture("it-IT") => it-IT </Example>
   </Function>

   <Function name="IsEmpty" type="boolean" localize="Returns true when the parameter is null or empty"  >
       <Prototype>boolean IsEmpty(variant value)</Prototype>
       <Param name="value" type="variant" localize="the value to check" />
       <Example localizable="true"></Example>
   </Function>
   <Function name="IsNull" type="variant" localize="Returns value when it is not null or fixed value instead"  >
     <Prototype>variant IsNull(variant value, variant fixed-value)</Prototype>
     <Param name="value" type="variant" localize="the value to check" />
     <Param name="fixed" type="variant" localize="the value to returns when value is null" />
     <Example localizable="true"></Example>
   </Function>
 </Group> 
  
 <Group name="Text" pagename="RefGuide-Framework-TBWoormEngine-BaseFunctions-Text" localize="Text Functions">
    <Function name="Asc" type="integer" localize="Returns the ASCII code for the first character in a text string." >
      <Prototype>integer Asc(string_Text)</Prototype>
      <Param name="Text" type="string" localize="the text for which you want the code of the first character" />
      <Example localizable="true">Asc("Microarea") => 77 </Example>
    </Function>
    <Function name="Chr" type="string" localize="Returns the character specified by the Ascii Code number." >
      <Prototype>string Chr(integer_AsciiCode)</Prototype>
      <Param name="AsciiCode" type="integer" localize="a value between 1 and 255 specifying the character to return" />
      <Example localizable="true">Chr(77) => M </Example>
    </Function>
    <Function name="Find" type="integer" localize="Returns the index position of the the first character, searching from left to right." >
      <Remarks localizable="true">The index always starts from zero(0). Find is case sensitive. </Remarks>
      <Result localizable="true">Returns -1 in case of unsuccessful search. </Result>
      <Prototype>integer Find(string_TextToFind, string_TextWithin, [integer_StartPosition])</Prototype>
      <Param name="TextToFind" type="bool" localize="is the text you want to find" />
      <Param name="TextWithin" type="string" localize="is the text containing the text you want to find" />
      <Param name="StartPosition (optional)" type="integer" localize="the index  at which to start the search (default is 0)" />
      <Param name="Occurrence (optional)" type="integer" localize="the occurrence of text to find (default is 1, the first)" />
      <Example localizable="true">Find ("a", "Microarea") => 5;Find ("world", "hello world") = 6;Find ("WORLD", "hello world") = -1 </Example>
    </Function>
    <Function name="Format" type="string" localize="Returns a string formatted according to the compatible formatter type." >
      <Prototype>string Format(any_ValueToFormat, [string_Formatter]</Prototype>
      <Param name="ValueToFormat" type="variant" localize="any expression to format" />
      <Param name="Formatter" type="string" localize="representing a valid Mago.net formatter" />
      <Example localizable="true">Format(3.14) => 3,14;Format(3.14, "Double") => 3,14;Format(3.14, "Integer") => Error: Incompatibile format type</Example>
    </Function>   
    <Function name="GetBarCodeId" type="integer" localize="Returns the id corresponding to a Barcode type enumerator." >
     <Remarks localizable="true">Helpful as second parameter of the TypedBarCode function.</Remarks>
     <Prototype>integer GetBarCodeId(enum_BarcodeType) </Prototype>
     <Param name="BarcodeType" type="enum" basetype="423" localize="Barcode type enumerative" />
     <Example localizable="true">GetBarCodeID({86:2}) => 5 (the id of the "Alfa39" barcode) </Example>
   </Function>
   <Function name="GetNewGuid" type="uuid" localize="Returns a random GUID." >
     <Prototype>guid GetNewGuid() </Prototype>
     <Example localizable="true">GetNewGuid() => {3F2504E0-4F89-11D3-9A0C-0305E82C3301}</Example>
   </Function>
   <Function name="GetUpperLimit" type="string" localize="Returns the upper limit for a string." >
      <Result localizable="true">It depends on the culture and/or on the regional settings.</Result>
      <Prototype>string GetUpperLimit(integer_Length)</Prototype>
      <Param name="Length" type="integer" localize="the number of characters of a Result string" />
      <Example localizable="true">GetUpperLimit(3) => ZZZ </Example>
    </Function>
    <Function name="Left" type="string" localize="Returns the specified number of characters from the start (left) of a string." >
      <Prototype>string Left(string_TextWithin, integer_CharsNumber</Prototype>
      <Param name="TextWithin" type="string" localize="is the text containing the characters you want to to extract" />
      <Param name="CharsNumber" type="integer" localize="specifies how many characters you want to extract" />
      <Example localizable="true">Left("Mago.net", 4) => Mago </Example>
    </Function>
    <Function name="Len" type="integer" localize="Returns the length (number of characters) of a string, including spaces." >
      <Prototype>integer Len(string_Text)</Prototype>
      <Param name="Text" type="string" localize="is the text whose lenght you want to retrieve" />
      <Example localizable="true">Len("Microarea Mago.net") => 18</Example>
    </Function>
   <Function name="LoadText" type="string" localize="Returns the content of a text file." >
     <Remarks localizable="true">The file must be in ASCII/UNICODE format. </Remarks>
     <Prototype>string LoadText(string_PositionAndFileName)</Prototype>
     <Param name="PositionAndFileName" type="string" localize="representing the position and the file name to load from" />
     <Example localizable="true">LoadText("C:\inetpub\wwwroot\web.config") => omissis </Example>
   </Function>
   <Function name="Localize" type="string" localize="Returns the string translated in the application user language." >
     <Remarks localizable="true">It works only if the dictionary is present, in other words it works only with original name reports (even if customized). </Remarks>
     <Prototype>string Localize(string_TextToTranslate)</Prototype>
     <Param name="TextToTranslate" type="string" localize="is the text to be translated" />
     <Example localizable="true">Localize("Code") => Code (not working, because the report lacks the dictionary) </Example>
   </Function>
   <Function name="Lower" type="string" localize="Converts all UPPERCASE letters to lowercase." >
     <Prototype>string Lower(string_TextToConvert)</Prototype>
     <Param name="TextToConvert" type="string" localize="is the text to be converted" />
     <Example localizable="true">Lower("Mago.Net") => mago.net </Example>
   </Function>
   <Function name="LTrim" type="string" localize="Removes all spaces from the left side of a text." >
     <Prototype>string LTrim(string_TextToTrim)</Prototype>
     <Param name="TextToTrim" type="string" localize="is the text to be trimmed" />
     <Param name="trim (optional)" type="string" localize="is the text to be removed" optional="true"/>
     <Example localizable="true">LTrim("&#9250;&#9250;Mago.Net&#9250;&#9250;") => Mago.Net&#9250;&#9250; (&#9250; blank space) </Example>
   </Function>
   <Function name="MakeLowerLimit" type="string" localize="Returns the localized word: First." >
     <Prototype>string MakeLowerLimit(string_BlankText)</Prototype>
     <Param name="BlankText" type="string" localize="leave it empty!" />
     <Example localizable="true">MakeLowerLimit("") => First </Example>
   </Function>
   <Function name="MakeUpperLimit" type="string" localize="Returns the localized word: Last." >
     <Prototype>string MakeUpperLimit(string_BlankText)</Prototype>
     <Param name="BlankText" type="string" localize="leave it empty!" />
     <Example localizable="true">MakeUpperLimit("") => Last </Example>
   </Function>
   <Function name="RemoveNewLine" type="string" localize="Replaces the CR/LF with spaces." >
     <Prototype>string RemoveNewLine(string_TextWithin)</Prototype>
     <Param name="TextWithin" type="string" localize="the text in which you want to replace CR/LF" />
     <Example localizable="true">RemoveNewLine("") => &#9250;&#9250; (&#9250; blank space) </Example>
   </Function>
   <Function name="Replace" type="string" localize="Replaces part of a text string with a different text string." >
     <Prototype>string Replace(string_TextWithin, string_TextOld, string_TextNew)</Prototype>
     <Param name="TextWithin" type="string" localize="the text in which you want to replace some characters" />
     <Param name="TextOld" type="string" localize="the text to be replaced by TextNew" />
     <Param name="TextNew" type="string" localize="the text that will replace TextOld" />
     <Example localizable="true">Replace("Microsoft" , "soft" , "area") => Microarea </Example>
   </Function>
   <Function name="ReverseFind" type="integer" localize="Returns the index position of the the first character, searching from right to left." >
     <Remarks localizable="true">The index always starts from zero(0). ReverseFind is case sensitive. </Remarks>
     <Result localizable="true">Returns -1 in case of unsuccessful search.</Result>
     <Prototype>integer ReverseFind(string_TextToFind, string_TextWithin, [integer_StartPosition])</Prototype>
     <Param name="TextToFind" type="bool" localize="is the text you want to find" />
     <Param name="TextWithin" type="string" localize="is the text containing the text you want to find" />
     <Param name="StartPosition (optional)" type="integer" localize="the index  at which to start the search (default is the end of text within)" />
     <Param name="Occurrence (optional)" type="integer" localize="the occurrence of text to find (default is 1, the first)" />
     <Example localizable="true">ReverseFind("a", "Microarea") => 8;ReverseFind ("world", "hello world") = 6;ReverseFind ("WORLD", "hello world") = -1 </Example>
   </Function>
   <Function name="Right" type="string" localize="Returns the specified number of characters from the end (right) of a string." >
     <Prototype>string Right(string_TextWithin, integer_CharsNumber)</Prototype>
     <Param name="TextWithin" type="string" localize="is the text containing the characters you want to to extract" />
     <Param name="CharsNumber" type="integer" localize="specifies how many characters you want to extract" />
     <Example localizable="true">Right("Mago.net", 4) => .net </Example>
   </Function>
   <Function name="RTrim" type="string" localize="Removes all spaces from the right side of a text." >
     <Prototype>string RTrim(string_TextToTrim)</Prototype>
     <Param name="TextToTrim" type="string" localize="is the text to be trimmed" />
     <Param name="trim (optional)" type="string" localize="is the text to be removed" optional="true"/>
     <Example localizable="true">RTrim("&#9250;&#9250;Mago.Net&#9250;&#9250;") => &#9250;&#9250;Mago.Net
 (&#9250; is a blank space) </Example>
   </Function>
   <Function name="SaveText" type="bool" localize="Saves a text in an external file." >
     <Prototype>logic SaveText(string_PositionAndFileName, string_TextToSave, [integer_EncodingType])</Prototype>
     <Param name="PositionAndFileName" type="string" localize="representing the postion and the file name to save to" />
     <Param name="Info" type="variant" localize="the position of file could be a namespace, or a path (absolute or relative)"/>
     <Param name="TextToSave" type="string" localize="is the text you want to save in the file" />
     <Param name="EncodingType (optional)" type="integer" localize="specifies the encoding type of saved file" />
     <Param name="Info" type="variant" localize="0	ASCII (Default), 1	UTF-8, 2	Unicode Big Endian, 3 Unicode"/>
     <Example localizable="true">SaveText("C:\FromMagonet.txt","Hello World") => Yes </Example>
   </Function>
   <Function name="Space" type="string" localize="Returns a string consisting of the specified number of blank spaces." >
     <Prototype>string Space(integer_SpacesNumber)</Prototype>
     <Param name="SpacesNumber" type="integer" localize="the number of spaces you want in the string" />
     <Example localizable="true">Space(3) => &#9250;&#9250;&#9250; (&#9250; blank space) </Example>
   </Function>
   <Function name="Replicate" type="string" localize="Returns a string consisting of the specified number of chraracters" >
     <Prototype>string Replicate(string_str, integer_Number)</Prototype>
     <Param name="replicate" type="string" localize="the string that you want replicate" />
     <Param name="number" type="integer" localize="the number of replications you want in the string" />
     <Example localizable="true">Replicate("ABC", 3) => "ABCABCABC" </Example>
   </Function>
   <Function name="PadLeft" type="string" localize="Returns a string left padded of the specified number of chraracters" >
     <Prototype>string PadLeft(string_str, integer_Number, char_pad)</Prototype>
     <Param name="str" type="string" localize="the string that you want padded" />
     <Param name="number" type="integer" localize="the lenght you want in the string" />
     <Param name="pad" type="string" localize="the string that you want use to pad" />
     <Example localizable="true">PadLeft("ABC", 6, "0") => "000ABC" </Example>
   </Function>
   <Function name="PadRight" type="string" localize="Returns a string right padded of the specified number of chraracters" >
     <Prototype>string PadLeft(string_str, integer_Number, char_pad)</Prototype>
     <Param name="str" type="string" localize="the string that you want padded" />
     <Param name="number" type="integer" localize="the lenght you want in the string" />
     <Param name="pad" type="string" localize="the character that you want use to pad" />
     <Example localizable="true">PadRight("ABC", 6, "Z") => "ABCZZZ" </Example>
   </Function>
   <Function name="Str" type="string" localize="Converts a number into a string of characters." >
     <Result localizable="true">By default the number is rounded to an integer. </Result>
     <Prototype>string Str(any_NumericExpression, integer_Length, [integer_DecimalPlaces])</Prototype>
     <Param name="NumericExpression" type="variant" localize="any numeric expression to evaluate" />
     <Param name="Length" type="integer" localize="the length of the character string returned" />
     <Param name="Info" type="variant" localize="if DecimalPlaces is omitted the default length returned is, at least, 8 " /> 
     <Param name="DecimalPlaces (optional)" type="integer" localize="specifies the number of decimal places in the character string returned" />
     <Example localizable="true">Str(3.14159265, 8) => 3.141593;Str(3.14159265,8,2) => 3.14 </Example>
   </Function>
   <Function name="SubStr" type="string" localize="Extracts a specified number of characters from a string." >
     <Prototype>string SubStr(string_TextWithin, integer_StartPosition, integer_Length)</Prototype>
     <Param name="TextWithin" type="string" localize="any numeric expression to evaluate" />
     <Param name="StartPosition" type="integer" localize="the index  at which to start the search" />
     <Param name="Length" type="integer" localize="the length of the character string returned" />
     <Example localizable="true">SubStr("Microarea Mago.net", 6 , 9) ) => area Mago </Example>
   </Function>
   <Function name="SubStrWW" type="string" localize="Extracts a specified number of characters from a string, removing the word that has been truncated." >
     <Prototype>string SubStrWW(string_TextWithin, integer_StartPosition, integer_Length)</Prototype>
     <Param name="TextWithin" type="string" localize="any numeric expression to evaluate" />
     <Param name="StartPosition" type="integer" localize="the index  at which to start the search" />
     <Param name="Length" type="integer" localize="the length of the character string returned" />
     <Example localizable="true">SubStrWW("Microarea Mago.net", 6 , 9) ) => area </Example>
   </Function>
   <Function name="Trim" type="string" localize="Removes all spaces from texts." >
     <Prototype>string Trim(string_TextToTrim)</Prototype>
     <Param name="TextToTrim" type="string" localize="is the text to be trimmed" />
     <Param name="trim (optional)" type="string" localize="is the text to be removed" optional="true"/>
     <Example localizable="true">Trim("&#9250;&#9250;Microarea Mago.net&#9250;&#9250;") => MicroareaMago.Net </Example>
   </Function>
   <Function name="TypedBarCode" type="string" localize="Returns a string than can be displayed as barcode." >
     <Prototype>string TypedBarCode(string_Barcode, integer_BarcodeType)</Prototype>
     <Param name="Barcode" type="string" localize="the text to show as barcode" />
     <Param name="BarcodeType " type="integer" localize="the number id that identifies the type of barcode" />
     <Param name="EncodingMode (optional)" type="integer" localize="the number id that identifies barcode Encoding Type" />
     <Param name="HumanReadable (optional)" type="string" localize="the source of the text to show as barcode label (only for 1D barcodes)" /> 
     <Param name="BarWidth (optional)" type="integer" localize="the width of a single bar in 1D barcodes or the size of a single module in 2D barcodes" />
     <Param name="BarHeight (optional)" type="integer" localize="the height of bars in 1D barcodes or of a  single row in PDF417 barcodes" />
     <Param name="Version (optional)" type="string" localize="the version of a barcode for 2D barcodes" />
     <Param name="ErrorCorrectionLevel (optional)" type="integer" localize="the number id that identifies Barcode Error Correction Level for QR, Micro QR and PDF417 barcodes" />
     <Remarks>
       <![CDATA[The field must have the attribute "Show as barcode" properly set.
The parameter BarcodeType can take the following values:
  0 Default, 1 UPC A, 2 UPC E, 3 Ean13, 4 Ean8, 5 Alfa39, 6 Extended Code 39, 7 Interleaved 2 of 5,
  8 Code 128 auto, 9 Codabar, 10 ZIP Code, 11	MSI Plessey, 12	Code 93, 13	Extended code 93,  14	UCC128,
  15	HIBC, 16	PDF417, 17	UPCE-E0, 18	UPCE-E1, 19	Code 128 A, 20	Code 128 B, 21 Code 128 C, 22	Ean 128,
  23 DataMatrix, 24 MicroQR, 25 QR.
 The (optional) parameter Encoding Mode can take the following values: 
   - Check Sum digit type for EAN128: 0 = Optional Checksum; 1 = Default (none or embedded).
   - DataMatrix Encoding mode: -1 = Undefined; 0 = ASCII; 1 = C40; 2 = Text; 3 = X12; 4 = EDIFACT; 5 = Base 256. 
   - Micro QR-Code Encoding mode: -1 = Undefined; 0 = Numeric; 1 = Alphanumeric; 2 = Byte; 3 = Kanji. 
   - QR-Code Encoding mode: -1 = Undefined; 0 = Numeric; 1 = Alphanumeric; 2 = Byte; 3 = Kanji. 
   - PDF417 Encoding mode: -1 = Undefined; 0 = Text; 1 = Byte; 2 = Numeric.
 The parameter Version can take the following values:
  - Data Matrix version: (Auto, 10x10, 12x12, 14x14, 16x16, 18x18, 20x20, 22x22, 24x24, 26x26, 32x32, 36x36,
   40x40, 44x44, 48x48, 52x52, 64x64, 80x80, 88x88, 96x96, 104x104, 120x120, 132x132, 144x144, 8x18, 8x32,
   12x26, 12x36, 16x36, 16x48). If Auto, the smallest rectangular symbol to fit the data is chosen.
   - PDF417  version with format 'RowsxCols': 
      Rows: Defines the number of rows constituting the barcode. Use 0 for automatic computation(recommended) or a value in the range [3 - 90]. 
      Cols: Defines the number of columns constituting the barcode. Use 0 for automatic computation(recommended) or a value in the range [3 - 30]
  The parameter Error Correction Level can take the following values:
  QR-Code and Micro QR-Code error correction: 0 = L (Level Low – up to 7% damage can be restored); 1 = M = Level Medium – up to 15% damage can be restored , 
  2 = Q (Level Quartile – up to 25% damage can be restored); 3 = H (Level High – up to 30% damage can be restored) (only for QR).
  PDF417 error correction level (Reed Solomon):  -1 = Auto; In the range 0 - 8. The higher the error correction level, the less storage capacity.
]]>
     </Remarks>   
     <!-- Gestione Version per QR e Micro QR:
     al momento non documentata perché Presenta un BUG GDPicture:
      - QR version: In the range 0 - 40. Specifies the overall dimensions of the symbol.Use 0 to let the engine decide and return the minimum version required to encode all data
      - Micro QR version: In the range 0 - 4. Specifies the overall dimensions of the symbol.Use 0 to let the engine decide and return the minimum version required to encode all data
   -->
<Example localizable="true">TypedBarCode("1234567890", 5) => 1234567890 (showed as "Alfa39" barcode);TypedBarCode("1234567890", GetBarCodeID({86:2}) => 1234567890 (showed as "Alfa39" barcode)'  </Example>
   </Function>
   <Function name="Upper" type="string" localize="Converts all lowercase letters to UPPERCASE." >
     <Prototype>string Upper(string_TextToConvert)</Prototype>
     <Param name="TextToConvert" type="string" localize="is the text to be converted" />
     <Example localizable="true">Upper("Mago.Net") => MAGO.NET </Example>
   </Function>
   <Function name="Val" type="double" localize="Converts a text string, that starts with a number, to a number." >
     <Remarks localizable="true">It proceeds from left to right until it meets a letter.</Remarks>
     <Prototype>real Val (string_TextWithNumericExpression)</Prototype>
     <Param name="TextWithNumericExpression" type="string" localize="the string containing a numeric expression" />
     <Example localizable="true">Val("25 December 2012") => 25.00 </Example>
   </Function>
   <Function name="CompareNoCase" type="integer" localize="Compare no case" >
     <Prototype>integer CompareNoCase(string_a, string_b)</Prototype>
     <Param name="str1" type="string" localize="is the text to be compared" />
     <Param name="str2" type="string" localize="is the text to be compared" />
     <Example localizable="true">CompareNoCase("Mago.Net", "MAGO.net") => 0, CompareNoCase("aaa", "zzz") => -1, , CompareNoCase("RR", "BB") => 1 </Example>
   </Function>
 </Group>
</Functions>
</FunctionObjects>


