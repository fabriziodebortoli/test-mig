#pragma once

#include <TbGeneric\TBThemeManager.h>

#include "UserControlWrappers.h"

#include "beginh.dex"

class CUserControlHandlerObj;

//--------------------------------------------------------------------------------

#define UM_PICVIEWER_DRAG_DROP		0x9025
#define UM_PICVIEWER_DRAG_ENTER		0x9026

//===========================================================================
class TB_EXPORT CTBPicViewerAdvWrapper : public CUserControlWrapperObj
{
	// enum wrapper Microarea.TBPicComponents.TBPictureStatus
	//--------------------------------------------------------------------------------
public:
	enum E_TBPICTURESTATUS	{
		OK, GENERICERROR, INVALIDPARAMETER, OUTOFMEMORY, OBJECTBUSY, INSUFFICIENTBUFFER, NOTIMPLEMENTED, WIN32ERROR,
		WRONGSTATE, ABORTED, FILENOTFOUND, VALUEOVERFLOW, ACCESSDENIED, UNKNOWNIMAGEFORMAT, FONTFAMILYNOTFOUND,
		FONTSTYLENOTFOUND, NOTTRUETYPEFONT, UNSUPPORTEDGDIPLUSVERSION, GDIPLUSNOTINITIALIZED, PROPERTYNOTFOUND,
		PROPERTYNOTSUPPORTED, PROFILENOTFOUND, UNSUPPORTEDIMAGEFORMAT, TEMPLATENOTFOUND, PRINTINGEXCEPTION, TWAINERROR,
		WRONGGDTWAINVERSION, BADTWAINSTATE, TWAINTRANSFERCANCELED, TWAINTRANSFERERROR, TWAININVALIDTRANSFERMODE,
		CANNOTCREATEFILE, INVALIDBARCODE, NOTINDEXEDPIXELFORMAT, UNSUPPORTEDPIXELFORMAT, INVALIDPDFHANDLE, INTERNETOPENERROR,
		INTERNETCONNECTERROR, INTERNETHTTPOPENREQUESTERROR, INTERNETHTTPQUERYERROR, INTERNETHTTPSENDREQUESTERROR,
		INTERNETHTTPINVALIDFILELENGTH, INTERNETHTTPTRANSFERERROR, INTERNETHTTPWRITEFILEERROR, INTERNETFTPGETFILEERROR,
		INTERNETFTPWRITEFILEERROR, PDFDOCUMENTMUSTBEUNENCRYPTED, PDFCANNOTBEDECRYPTED, PDFPASSWORDNEEDED, PDFBADPASSWORD,
		PDFCANNOTOPENFILE, PDFRENDERINGPAGEERROR, PDFGENERICERROR, PDFERRORADDINGIMAGE, PDFCERTIFICATEWRONGPASSWORD,
		PDFCERTIFICATEWRONGFORMAT, PDFCERTIFICATENOPRIVATEKEY, PDFUNSUPPORTEDINPDFA, PDFINVALIDCONTENT,
		GDIMGPLUGDLLREQUIRED, WRONGGDIMGPLUGVERSION, OCRTESSERACTDLLREQUIRED, OCRDICTIONARYNOTFOUND, OCRUNHANDLEDEXCEPTION,
		CERTIFICATEWRONGPASSWORD, CERTIFICATEWRONGFORMAT, CERTIFICATEWRONGPRIVATEKEY, BARCODEINVALIDLENGTH, BARCODEINVALIDSTART,
		BARCODEINVALIDSTOP, BARCODELENGTHMUSTBE13OR14, BARCODENOTNUMERIC, BARCODECANNOTDETERMINESTART, BARCODEUNKNOWNSTARTTYPE,
		BARCODENOSTARTINCURRENTCODESET, BARCODECOULDNOTINSERTSTART, BARCODENOENCODINGVALUEFOUND, BARCODEINVALIDDATA,
		BARCODEINVALIDDESTINATIONSIZE, BARCODEINVALIDMANUFACTURERCODE, BARCODELENGTHMUSTBE7OR8, BARCODELENGTHMUSTBEMULTIPLEOF2,
		BARCODEMUSTSTARTWITH978ORBADLENGTH, BARCODEMUSTSTARTWITH49, BARCODEBARCODELENGTHMUSTBE5OR6OR9OR11, BARCODEBARCODELENGTHMUSTBE12,
		BARCODEBARCODELENGTHMUSTBE8OR12, BARCODEBARCODEMUSTBINARYCHAR, BARCODEILLEGALUPCA, BARCODEBARCODELENGTHMUSTBE2,
		BARCODEBARCODELENGTHMUSTBE5, BARCODELENGTHMUSTBE12OR13, BARCODELENGTHMUSTBE11OR12, BARCODE1DREADERPLUGINNOTLOADED,
		BARCODE1DREADERUNKNOWNERROR, BARCODEDATAMATRIXREADERPLUGINNOTLOADED, BARCODEDATAMATRIXREADERUNKNOWNERROR,
		BARCODEQRCODEREADERPLUGINNOTLOADED, BARCODEPDF417READERPLUGINNOTLOADED, BARCODEQRENCODERINVALIDVERSION,
		BARCODEQRENCODERNOTNUMERICDATA, BARCODEQRENCODERNOTALPHANUMERICDATA, BARCODEQRENCODERNOT8BITDATA, BARCODEQRENCODERNOTKANJIDATA,
		BARCODEDATAMATRIXENCODERINVALIDVERSION, BARCODEPDF417ENCODERINVALIDVERSION, BARCODEPDF417ENCODERNOTNUMERICDATA,
		BARCODEPDF417ENCODERNOTTEXTDATA, BARCODEPDF417ENCODERNOTBYTEDATA, ENCRYPTIONSCHEMENOTSUPPORTED, JBIG2PLUGINNOTLOADED,
		DOCUMENTANALYZERDLLREQUIRED, INVALIDLICENSE, WIAGENERICERROR
	};

public:
	CTBPicViewerAdvWrapper();
	~CTBPicViewerAdvWrapper();

public:
	CString m_sFilePathToLoad;

public:
	virtual void OnInitControl	();

public:
	// properties get/set
	void AllowDrop					(const BOOL& bValue = FALSE);
	void AnimateGIF					(const BOOL& bValue = FALSE);
	void Clear						();
	void ContinuousViewMode			(const BOOL& bValue = TRUE);
	int	 CurrentPage				();
	void Enabled					(const BOOL bValue = TRUE);
	void EnableMenu					(const BOOL& bValue = TRUE);
	void EnablePreviewNotAvailable	(const BOOL& bValue = TRUE);
	void ForceScrollBars			(const BOOL& bValue = TRUE);
	int	 PageCount					();
	void ScrollBars					(const BOOL& bValue = TRUE);
	void SilentMode					(const BOOL& bValue = TRUE);
	void SetToolStripVisibility		(const BOOL& bValue = TRUE);
		 
	void SetViewerMouseModePan					();
	void SetViewerMouseModeAreaSelection		();
	void SetViewerMouseWheelModeVerticalScroll	();
	void SetViewerZoomModeFitToViewer			();
	void SetDocumentAlignmentMiddleLeft			();
	void SetDocumentPositionMiddleLeft			();
	void SetRectBorder							();
		 
	void SetBackColorTBPicViewer	(const COLORREF color = AfxGetThemeManager()->GetTreeViewBkgColor()); // fare un metodo ad-hoc GetTBPicViewerBackColor()

	// methods
	E_TBPICTURESTATUS	DisplayFromFile				(const CString& sFilePath); 	
	E_TBPICTURESTATUS	DisplayFromGdPictureImage	(int nImageId);
	E_TBPICTURESTATUS	DisplayNextPage				();
	E_TBPICTURESTATUS	DisplayPreviousPage			();
	E_TBPICTURESTATUS	ZoomIN						();
	E_TBPICTURESTATUS	ZoomOUT						();

	void GetRectCoordinatesOnDocumentInches	(float& fLeftArea, float& fTopArea, float& fWidthArea, float& fHeightArea);
	void GetRectCoordinatesOnDocument		(int& nLeftArea, int& nTopArea, int& nWidthArea, int& nHeightArea);
	void GetRectCoordinatesOnViewer			(int& nLeftAreaVw, int& nTopAreaVw, int& nWidthAreaVw, int& nHeightAreaVw);
	void SetRectCoordinatesOnDocument		(int nLeft, int nTop, int nWidth, int nHeight);
		 
	BOOL IsRect			();
	BOOL IsRectDrawing	();
	void ClearRect		();
	void CloseDocument	();

	//int	DisplayFromByteArray		(BYTE* pBuffer); // todo
};

#include "endh.dex"