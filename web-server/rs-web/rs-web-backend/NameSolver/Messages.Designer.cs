//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microarea.RSWeb.NameSolver {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///    A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Messages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        internal Messages() {
        }
        
        /// <summary>
        ///    Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("rs-web.NameSolver.Messages", typeof(Messages).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///    Overrides the current thread's CurrentUICulture property for all
        ///    resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to The application type {0} is not managed.
        /// </summary>
        public static string ApplicationContainerNonManaged {
            get {
                return ResourceManager.GetString("ApplicationContainerNonManaged", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to The application has been executed from the wrong folder: {0}..
        /// </summary>
        public static string ApplicationInWrongPlace {
            get {
                return ResourceManager.GetString("ApplicationInWrongPlace", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Installation name is empty!.
        /// </summary>
        public static string EmptyInstallation {
            get {
                return ResourceManager.GetString("EmptyInstallation", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Server name is empty!.
        /// </summary>
        public static string EmptyServer {
            get {
                return ResourceManager.GetString("EmptyServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Error accessing to licence file..
        /// </summary>
        public static string ErrorAccessingLicensedFile {
            get {
                return ResourceManager.GetString("ErrorAccessingLicensedFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Error loading installation info file &apos;{0}&apos;: &apos;{1}&apos;.
        /// </summary>
        public static string ErrorLoadingInstallationFile {
            get {
                return ResourceManager.GetString("ErrorLoadingInstallationFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Error reading file: {0}..
        /// </summary>
        public static string ErrorReadingFile {
            get {
                return ResourceManager.GetString("ErrorReadingFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Exception message.
        /// </summary>
        public static string ExceptionMessage {
            get {
                return ResourceManager.GetString("ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Error: file {0} not exist..
        /// </summary>
        public static string FileNotPresent {
            get {
                return ResourceManager.GetString("FileNotPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to The image {0} is not managed.
        /// </summary>
        public static string ImageNotManaged {
            get {
                return ResourceManager.GetString("ImageNotManaged", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to When connecting to a remote server, it is necessary to specify an installation..
        /// </summary>
        public static string InstallationNotSpecified {
            get {
                return ResourceManager.GetString("InstallationNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Invalid installation &apos;{0}&apos;; standard path &apos;{1}&apos; unavailable.
        /// </summary>
        public static string InvalidInstallation {
            get {
                return ResourceManager.GetString("InvalidInstallation", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Invalid installation location!.
        /// </summary>
        public static string InvalidInstallationLocation {
            get {
                return ResourceManager.GetString("InvalidInstallationLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to PathFinder initialization failed..
        /// </summary>
        public static string PathFinderInitFailed {
            get {
                return ResourceManager.GetString("PathFinderInitFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to The Standard folder does not exist.
        /// </summary>
        public static string StandardFolderNotExist {
            get {
                return ResourceManager.GetString("StandardFolderNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Warning!.
        /// </summary>
        public static string WarningTitle {
            get {
                return ResourceManager.GetString("WarningTitle", resourceCulture);
            }
        }
    }
}
