//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.573.
// 
namespace Microarea.MicroareaConsole.ServicesAdminPlugIn.loginHost {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MicroareaLoginManagerSoap", Namespace="http://tempuri.org/")]
    public class MicroareaLoginManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public MicroareaLoginManager() {
            this.Url = "http://localhost/MicroareaLoginManager/MicroareaLoginManager.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Init", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Init() {
            object[] results = this.Invoke("Init", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInit(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Init", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndInit(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetServerTime() {
            object[] results = this.Invoke("GetServerTime", new object[0]);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServerTime(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServerTime", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.DateTime EndGetServerTime(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConsumeFunctionality", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ConsumeFunctionality(int loginID, string functionality) {
            object[] results = this.Invoke("ConsumeFunctionality", new object[] {
                        loginID,
                        functionality});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsumeFunctionality(int loginID, string functionality, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsumeFunctionality", new object[] {
                        loginID,
                        functionality}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndConsumeFunctionality(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOslStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetOslStatus(int companyId, out bool security, out bool activity) {
            object[] results = this.Invoke("GetOslStatus", new object[] {
                        companyId});
            security = ((bool)(results[1]));
            activity = ((bool)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOslStatus(int companyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOslStatus", new object[] {
                        companyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndGetOslStatus(System.IAsyncResult asyncResult, out bool security, out bool activity) {
            object[] results = this.EndInvoke(asyncResult);
            security = ((bool)(results[1]));
            activity = ((bool)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPasswordInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetPasswordInfo(int loginId, out bool UserCannotChangePassword, out bool UserMustChangePassword, out System.DateTime ExpiredDatePassword, out bool PasswordNeverExpired, out bool ExpiredDateCannotChange) {
            object[] results = this.Invoke("GetPasswordInfo", new object[] {
                        loginId});
            UserCannotChangePassword = ((bool)(results[1]));
            UserMustChangePassword = ((bool)(results[2]));
            ExpiredDatePassword = ((System.DateTime)(results[3]));
            PasswordNeverExpired = ((bool)(results[4]));
            ExpiredDateCannotChange = ((bool)(results[5]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPasswordInfo(int loginId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPasswordInfo", new object[] {
                        loginId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndGetPasswordInfo(System.IAsyncResult asyncResult, out bool UserCannotChangePassword, out bool UserMustChangePassword, out System.DateTime ExpiredDatePassword, out bool PasswordNeverExpired, out bool ExpiredDateCannotChange) {
            object[] results = this.EndInvoke(asyncResult);
            UserCannotChangePassword = ((bool)(results[1]));
            UserMustChangePassword = ((bool)(results[2]));
            ExpiredDatePassword = ((System.DateTime)(results[3]));
            PasswordNeverExpired = ((bool)(results[4]));
            ExpiredDateCannotChange = ((bool)(results[5]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangePassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangePassword(int loginId, string oldPassword, string newPassword) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        loginId,
                        oldPassword,
                        newPassword});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChangePassword(int loginId, string oldPassword, string newPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangePassword", new object[] {
                        loginId,
                        oldPassword,
                        newPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndChangePassword(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Login", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Login(int loginId, int companyId, string password, bool winNTAuth, string computerName, int tbPortNumber, out bool isAdmin, out string authenticationToken) {
            object[] results = this.Invoke("Login", new object[] {
                        loginId,
                        companyId,
                        password,
                        winNTAuth,
                        computerName,
                        tbPortNumber});
            isAdmin = ((bool)(results[1]));
            authenticationToken = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogin(int loginId, int companyId, string password, bool winNTAuth, string computerName, int tbPortNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Login", new object[] {
                        loginId,
                        companyId,
                        password,
                        winNTAuth,
                        computerName,
                        tbPortNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndLogin(System.IAsyncResult asyncResult, out bool isAdmin, out string authenticationToken) {
            object[] results = this.EndInvoke(asyncResult);
            isAdmin = ((bool)(results[1]));
            authenticationToken = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EnumCompanies", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] EnumCompanies(int loginId) {
            object[] results = this.Invoke("EnumCompanies", new object[] {
                        loginId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumCompanies(int loginId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumCompanies", new object[] {
                        loginId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndEnumCompanies(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EnumAllUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] EnumAllUsers() {
            object[] results = this.Invoke("EnumAllUsers", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumAllUsers(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumAllUsers", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndEnumAllUsers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EnumUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] EnumUsers(bool winNTAuth) {
            object[] results = this.Invoke("EnumUsers", new object[] {
                        winNTAuth});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumUsers(bool winNTAuth, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumUsers", new object[] {
                        winNTAuth}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndEnumUsers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCompanyUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetCompanyUsers(int companyId) {
            object[] results = this.Invoke("GetCompanyUsers", new object[] {
                        companyId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCompanyUsers(int companyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCompanyUsers", new object[] {
                        companyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetCompanyUsers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLoginId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetLoginId(string userName, out int loginId, out bool winNTAuth) {
            object[] results = this.Invoke("GetLoginId", new object[] {
                        userName});
            loginId = ((int)(results[1]));
            winNTAuth = ((bool)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLoginId(string userName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLoginId", new object[] {
                        userName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndGetLoginId(System.IAsyncResult asyncResult, out int loginId, out bool winNTAuth) {
            object[] results = this.EndInvoke(asyncResult);
            loginId = ((int)(results[1]));
            winNTAuth = ((bool)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCompanyID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetCompanyID(string company) {
            object[] results = this.Invoke("GetCompanyID", new object[] {
                        company});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCompanyID(string company, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCompanyID", new object[] {
                        company}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetCompanyID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCompanyInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetCompanyInfo(int companyId, out string companyName, out string dbName, out string dbServer, out int providerId) {
            object[] results = this.Invoke("GetCompanyInfo", new object[] {
                        companyId});
            companyName = ((string)(results[1]));
            dbName = ((string)(results[2]));
            dbServer = ((string)(results[3]));
            providerId = ((int)(results[4]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCompanyInfo(int companyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCompanyInfo", new object[] {
                        companyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndGetCompanyInfo(System.IAsyncResult asyncResult, out string companyName, out string dbName, out string dbServer, out int providerId) {
            object[] results = this.EndInvoke(asyncResult);
            companyName = ((string)(results[1]));
            dbName = ((string)(results[2]));
            dbServer = ((string)(results[3]));
            providerId = ((int)(results[4]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCompanyName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCompanyName(int companyID) {
            object[] results = this.Invoke("GetCompanyName", new object[] {
                        companyID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCompanyName(int companyID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCompanyName", new object[] {
                        companyID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetCompanyName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsAdmin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsAdmin(int loginId, int companyId) {
            object[] results = this.Invoke("IsAdmin", new object[] {
                        loginId,
                        companyId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsAdmin(int loginId, int companyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsAdmin", new object[] {
                        loginId,
                        companyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsAdmin(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLoginName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLoginName(int loginId) {
            object[] results = this.Invoke("GetLoginName", new object[] {
                        loginId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLoginName(int loginId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLoginName", new object[] {
                        loginId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLoginName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCompanyConnectionString", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCompanyConnectionString(int loginId, int companyId) {
            object[] results = this.Invoke("GetCompanyConnectionString", new object[] {
                        loginId,
                        companyId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCompanyConnectionString(int loginId, int companyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCompanyConnectionString", new object[] {
                        loginId,
                        companyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetCompanyConnectionString(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsUserPresent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsUserPresent(string userName, bool winNTAuth) {
            object[] results = this.Invoke("IsUserPresent", new object[] {
                        userName,
                        winNTAuth});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsUserPresent(string userName, bool winNTAuth, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsUserPresent", new object[] {
                        userName,
                        winNTAuth}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsUserPresent(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsValidUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsValidUser(int loginID, string password, bool winNTAuth) {
            object[] results = this.Invoke("IsValidUser", new object[] {
                        loginID,
                        password,
                        winNTAuth});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsValidUser(int loginID, string password, bool winNTAuth, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsValidUser", new object[] {
                        loginID,
                        password,
                        winNTAuth}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsValidUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProviderInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetProviderInfo(int providerID, out string providerName, out string providerDescription, out bool useConstParameter, out bool stripTrailingSpaces) {
            object[] results = this.Invoke("GetProviderInfo", new object[] {
                        providerID});
            providerName = ((string)(results[1]));
            providerDescription = ((string)(results[2]));
            useConstParameter = ((bool)(results[3]));
            stripTrailingSpaces = ((bool)(results[4]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetProviderInfo(int providerID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetProviderInfo", new object[] {
                        providerID}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndGetProviderInfo(System.IAsyncResult asyncResult, out string providerName, out string providerDescription, out bool useConstParameter, out bool stripTrailingSpaces) {
            object[] results = this.EndInvoke(asyncResult);
            providerName = ((string)(results[1]));
            providerDescription = ((string)(results[2]));
            useConstParameter = ((bool)(results[3]));
            stripTrailingSpaces = ((bool)(results[4]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetConnectionParams", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetConnectionParams(int companyID, out bool useKeyedUpdate, out bool transactionUse) {
            object[] results = this.Invoke("GetConnectionParams", new object[] {
                        companyID});
            useKeyedUpdate = ((bool)(results[1]));
            transactionUse = ((bool)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetConnectionParams(int companyID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetConnectionParams", new object[] {
                        companyID}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndGetConnectionParams(System.IAsyncResult asyncResult, out bool useKeyedUpdate, out bool transactionUse) {
            object[] results = this.EndInvoke(asyncResult);
            useKeyedUpdate = ((bool)(results[1]));
            transactionUse = ((bool)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserLanguages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetUserLanguages(int loginID, int companyID, out string preferredLanguage, out string alternativeLanguage) {
            object[] results = this.Invoke("GetUserLanguages", new object[] {
                        loginID,
                        companyID});
            preferredLanguage = ((string)(results[1]));
            alternativeLanguage = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserLanguages(int loginID, int companyID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserLanguages", new object[] {
                        loginID,
                        companyID}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndGetUserLanguages(System.IAsyncResult asyncResult, out string preferredLanguage, out string alternativeLanguage) {
            object[] results = this.EndInvoke(asyncResult);
            preferredLanguage = ((string)(results[1]));
            alternativeLanguage = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogOff", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogOff(int loginID) {
            this.Invoke("LogOff", new object[] {
                        loginID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogOff(int loginID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LogOff", new object[] {
                        loginID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndLogOff(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ShutDown", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ShutDown() {
            object[] results = this.Invoke("ShutDown", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginShutDown(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ShutDown", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndShutDown(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
    }
}
