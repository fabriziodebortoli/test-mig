//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.573.
// 
namespace Microarea.MicroareaConsole.ServicesAdminPlugIn.lockHost {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MicroareaLockManagerSoap", Namespace="http://tempuri.org/")]
    public class MicroareaLockManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public MicroareaLockManager() {
            this.Url = "http://localhost/MicroareaLockManager/MicroareaLockManager.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InitLock", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InitLock(int loginId, int companyId, string computerName) {
            object[] results = this.Invoke("InitLock", new object[] {
                        loginId,
                        companyId,
                        computerName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInitLock(int loginId, int companyId, string computerName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InitLock", new object[] {
                        loginId,
                        companyId,
                        computerName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndInitLock(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveLockEntries", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveLockEntries(string fileName) {
            this.Invoke("SaveLockEntries", new object[] {
                        fileName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveLockEntries(string fileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveLockEntries", new object[] {
                        fileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveLockEntries(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LockRecord", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LockRecord(int companyId, string tableName, string lockKey, string computerName, int loginId, int processId, string connection, string documentAddress) {
            object[] results = this.Invoke("LockRecord", new object[] {
                        companyId,
                        tableName,
                        lockKey,
                        computerName,
                        loginId,
                        processId,
                        connection,
                        documentAddress});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLockRecord(int companyId, string tableName, string lockKey, string computerName, int loginId, int processId, string connection, string documentAddress, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LockRecord", new object[] {
                        companyId,
                        tableName,
                        lockKey,
                        computerName,
                        loginId,
                        processId,
                        connection,
                        documentAddress}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndLockRecord(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnlockRecord", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnlockRecord(int companyId, string tableName, string lockKey, string computerName, int loginId, int processId, string connection, string documentAddress) {
            object[] results = this.Invoke("UnlockRecord", new object[] {
                        companyId,
                        tableName,
                        lockKey,
                        computerName,
                        loginId,
                        processId,
                        connection,
                        documentAddress});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnlockRecord(int companyId, string tableName, string lockKey, string computerName, int loginId, int processId, string connection, string documentAddress, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnlockRecord", new object[] {
                        companyId,
                        tableName,
                        lockKey,
                        computerName,
                        loginId,
                        processId,
                        connection,
                        documentAddress}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUnlockRecord(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsRecordLocked", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsRecordLocked(int companyId, string tableName, string lockKey, string documentAddress) {
            object[] results = this.Invoke("IsRecordLocked", new object[] {
                        companyId,
                        tableName,
                        lockKey,
                        documentAddress});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsRecordLocked(int companyId, string tableName, string lockKey, string documentAddress, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsRecordLocked", new object[] {
                        companyId,
                        tableName,
                        lockKey,
                        documentAddress}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsRecordLocked(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLockInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetLockInfo(int companyId, string lockKey, string tableName, out System.DateTime lockDate, out int processId, out string computerName, out int userId) {
            object[] results = this.Invoke("GetLockInfo", new object[] {
                        companyId,
                        lockKey,
                        tableName});
            lockDate = ((System.DateTime)(results[1]));
            processId = ((int)(results[2]));
            computerName = ((string)(results[3]));
            userId = ((int)(results[4]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLockInfo(int companyId, string lockKey, string tableName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLockInfo", new object[] {
                        companyId,
                        lockKey,
                        tableName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndGetLockInfo(System.IAsyncResult asyncResult, out System.DateTime lockDate, out int processId, out string computerName, out int userId) {
            object[] results = this.EndInvoke(asyncResult);
            lockDate = ((System.DateTime)(results[1]));
            processId = ((int)(results[2]));
            computerName = ((string)(results[3]));
            userId = ((int)(results[4]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnlockAllDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnlockAllDocument(int companyId, string documentAddress, string computerName, int loginId, int processId, string connection) {
            object[] results = this.Invoke("UnlockAllDocument", new object[] {
                        companyId,
                        documentAddress,
                        computerName,
                        loginId,
                        processId,
                        connection});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnlockAllDocument(int companyId, string documentAddress, string computerName, int loginId, int processId, string connection, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnlockAllDocument", new object[] {
                        companyId,
                        documentAddress,
                        computerName,
                        loginId,
                        processId,
                        connection}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUnlockAllDocument(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnlockAll", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnlockAll(int companyId, string documentAddress, string tableName, string computerName, int loginId, int processId, string connection) {
            object[] results = this.Invoke("UnlockAll", new object[] {
                        companyId,
                        documentAddress,
                        tableName,
                        computerName,
                        loginId,
                        processId,
                        connection});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnlockAll(int companyId, string documentAddress, string tableName, string computerName, int loginId, int processId, string connection, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnlockAll", new object[] {
                        companyId,
                        documentAddress,
                        tableName,
                        computerName,
                        loginId,
                        processId,
                        connection}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUnlockAll(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnlockAllForCurrentConnection", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnlockAllForCurrentConnection(int companyId, string computerName, int loginId, int processId, string connection) {
            object[] results = this.Invoke("UnlockAllForCurrentConnection", new object[] {
                        companyId,
                        computerName,
                        loginId,
                        processId,
                        connection});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnlockAllForCurrentConnection(int companyId, string computerName, int loginId, int processId, string connection, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnlockAllForCurrentConnection", new object[] {
                        companyId,
                        computerName,
                        loginId,
                        processId,
                        connection}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUnlockAllForCurrentConnection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnlockAllForCurrentProcess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnlockAllForCurrentProcess(int companyId, string computerName, int userId, int processId) {
            object[] results = this.Invoke("UnlockAllForCurrentProcess", new object[] {
                        companyId,
                        computerName,
                        userId,
                        processId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnlockAllForCurrentProcess(int companyId, string computerName, int userId, int processId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnlockAllForCurrentProcess", new object[] {
                        companyId,
                        computerName,
                        userId,
                        processId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUnlockAllForCurrentProcess(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
    }
}
