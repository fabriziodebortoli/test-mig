//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.573.
// 
namespace Microarea.Console.ServicesAdminPlugIn.localhost {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MicroareaLoginManagerSoap", Namespace="http://microarea.it/LoginManager/")]
    public class MicroareaLoginManager : Microsoft.Web.Services.WebServicesClientProtocol {
        
        /// <remarks/>
        public MicroareaLoginManager() {
            this.Url = "http://localhost/Sviluppo/LoginManager/LoginManager.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/Init", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Init() {
            object[] results = this.Invoke("Init", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInit(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Init", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndInit(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsAlive", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsAlive() {
            object[] results = this.Invoke("IsAlive", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsAlive(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsAlive", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsAlive(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsInitializing", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsInitializing() {
            object[] results = this.Invoke("IsInitializing", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsInitializing(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsInitializing", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsInitializing(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsCalAvailable", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsCalAvailable(string authenticationToken, string application, string functionality) {
            object[] results = this.Invoke("IsCalAvailable", new object[] {
                        authenticationToken,
                        application,
                        functionality});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsCalAvailable(string authenticationToken, string application, string functionality, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsCalAvailable", new object[] {
                        authenticationToken,
                        application,
                        functionality}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsCalAvailable(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsActivated", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsActivated(string application, string functionality) {
            object[] results = this.Invoke("IsActivated", new object[] {
                        application,
                        functionality});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsActivated(string application, string functionality, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsActivated", new object[] {
                        application,
                        functionality}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsActivated(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetLoginCompanyName", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetLoginCompanyName(string authenticationToken, out string loginName, out string companyName) {
            object[] results = this.Invoke("GetLoginCompanyName", new object[] {
                        authenticationToken});
            loginName = ((string)(results[1]));
            companyName = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLoginCompanyName(string authenticationToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLoginCompanyName", new object[] {
                        authenticationToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndGetLoginCompanyName(System.IAsyncResult asyncResult, out string loginName, out string companyName) {
            object[] results = this.EndInvoke(asyncResult);
            loginName = ((string)(results[1]));
            companyName = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetCompanyUsers", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetCompanyUsers(string companyName) {
            object[] results = this.Invoke("GetCompanyUsers", new object[] {
                        companyName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCompanyUsers(string companyName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCompanyUsers", new object[] {
                        companyName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetCompanyUsers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/EnumAllUsers", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] EnumAllUsers() {
            object[] results = this.Invoke("EnumAllUsers", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumAllUsers(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumAllUsers", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndEnumAllUsers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/EnumCompanies", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] EnumCompanies(string userName) {
            object[] results = this.Invoke("EnumCompanies", new object[] {
                        userName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumCompanies(string userName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumCompanies", new object[] {
                        userName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndEnumCompanies(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetLoggedUsersNumber", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetLoggedUsersNumber() {
            object[] results = this.Invoke("GetLoggedUsersNumber", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLoggedUsersNumber(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLoggedUsersNumber", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetLoggedUsersNumber(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetCompanyLoggedUsersNumber", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetCompanyLoggedUsersNumber(int companyId) {
            object[] results = this.Invoke("GetCompanyLoggedUsersNumber", new object[] {
                        companyId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCompanyLoggedUsersNumber(int companyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCompanyLoggedUsersNumber", new object[] {
                        companyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetCompanyLoggedUsersNumber(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetLoggedUsers", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLoggedUsers() {
            object[] results = this.Invoke("GetLoggedUsers", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLoggedUsers(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLoggedUsers", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLoggedUsers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetLoggedUsersAtt", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetLoggedUsersAtt() {
            this.Invoke("GetLoggedUsersAtt", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLoggedUsersAtt(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLoggedUsersAtt", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndGetLoggedUsersAtt(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetTbLoaderInstantiatedList", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetTbLoaderInstantiatedList() {
            this.Invoke("GetTbLoaderInstantiatedList", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTbLoaderInstantiatedList(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTbLoaderInstantiatedList", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndGetTbLoaderInstantiatedList(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetHelpRequest", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHelpRequest(string preferredLanguage, string alternativeLanguage, string nameSpace) {
            object[] results = this.Invoke("GetHelpRequest", new object[] {
                        preferredLanguage,
                        alternativeLanguage,
                        nameSpace});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetHelpRequest(string preferredLanguage, string alternativeLanguage, string nameSpace, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetHelpRequest", new object[] {
                        preferredLanguage,
                        alternativeLanguage,
                        nameSpace}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetHelpRequest(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetHelpRequest2", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHelpRequest2(string preferredLanguage, string alternativeLanguage, string nameSpace, string searchParameter) {
            object[] results = this.Invoke("GetHelpRequest2", new object[] {
                        preferredLanguage,
                        alternativeLanguage,
                        nameSpace,
                        searchParameter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetHelpRequest2(string preferredLanguage, string alternativeLanguage, string nameSpace, string searchParameter, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetHelpRequest2", new object[] {
                        preferredLanguage,
                        alternativeLanguage,
                        nameSpace,
                        searchParameter}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetHelpRequest2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/ValidateUser", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ValidateUser(string userName, string password, bool winNtAuthentication, out string[] userCompanies, out int loginId, out bool userCannotChangePassword, out bool userMustChangePassword, out System.DateTime expiredDatePassword, out bool passwordNeverExpired, out bool expiredDateCannotChange) {
            object[] results = this.Invoke("ValidateUser", new object[] {
                        userName,
                        password,
                        winNtAuthentication});
            userCompanies = ((string[])(results[1]));
            loginId = ((int)(results[2]));
            userCannotChangePassword = ((bool)(results[3]));
            userMustChangePassword = ((bool)(results[4]));
            expiredDatePassword = ((System.DateTime)(results[5]));
            passwordNeverExpired = ((bool)(results[6]));
            expiredDateCannotChange = ((bool)(results[7]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValidateUser(string userName, string password, bool winNtAuthentication, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidateUser", new object[] {
                        userName,
                        password,
                        winNtAuthentication}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndValidateUser(System.IAsyncResult asyncResult, out string[] userCompanies, out int loginId, out bool userCannotChangePassword, out bool userMustChangePassword, out System.DateTime expiredDatePassword, out bool passwordNeverExpired, out bool expiredDateCannotChange) {
            object[] results = this.EndInvoke(asyncResult);
            userCompanies = ((string[])(results[1]));
            loginId = ((int)(results[2]));
            userCannotChangePassword = ((bool)(results[3]));
            userMustChangePassword = ((bool)(results[4]));
            expiredDatePassword = ((System.DateTime)(results[5]));
            passwordNeverExpired = ((bool)(results[6]));
            expiredDateCannotChange = ((bool)(results[7]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/ChangePassword", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangePassword(string userName, string oldPassword, string newPassword) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        userName,
                        oldPassword,
                        newPassword});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChangePassword(string userName, string oldPassword, string newPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangePassword", new object[] {
                        userName,
                        oldPassword,
                        newPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndChangePassword(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GuestLogin", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GuestLogin(
                    string companyName, 
                    out bool admin, 
                    out string authenticationToken, 
                    out int companyId, 
                    out string dbName, 
                    out string dbServer, 
                    out int providerId, 
                    out bool security, 
                    out bool auditing, 
                    out bool useKeyedUpdate, 
                    out bool transactionUse, 
                    out string preferredLanguage, 
                    out string alternativeLanguage, 
                    out string providerName, 
                    out string providerDescription, 
                    out bool useConstParameter, 
                    out bool stripTrailingSpaces, 
                    out string providerCompanyConnectionString, 
                    out string nonProviderCompanyConnectionString, 
                    out string dbUser, 
                    out string activationDB) {
            object[] results = this.Invoke("GuestLogin", new object[] {
                        companyName});
            admin = ((bool)(results[1]));
            authenticationToken = ((string)(results[2]));
            companyId = ((int)(results[3]));
            dbName = ((string)(results[4]));
            dbServer = ((string)(results[5]));
            providerId = ((int)(results[6]));
            security = ((bool)(results[7]));
            auditing = ((bool)(results[8]));
            useKeyedUpdate = ((bool)(results[9]));
            transactionUse = ((bool)(results[10]));
            preferredLanguage = ((string)(results[11]));
            alternativeLanguage = ((string)(results[12]));
            providerName = ((string)(results[13]));
            providerDescription = ((string)(results[14]));
            useConstParameter = ((bool)(results[15]));
            stripTrailingSpaces = ((bool)(results[16]));
            providerCompanyConnectionString = ((string)(results[17]));
            nonProviderCompanyConnectionString = ((string)(results[18]));
            dbUser = ((string)(results[19]));
            activationDB = ((string)(results[20]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGuestLogin(string companyName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GuestLogin", new object[] {
                        companyName}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGuestLogin(
                    System.IAsyncResult asyncResult, 
                    out bool admin, 
                    out string authenticationToken, 
                    out int companyId, 
                    out string dbName, 
                    out string dbServer, 
                    out int providerId, 
                    out bool security, 
                    out bool auditing, 
                    out bool useKeyedUpdate, 
                    out bool transactionUse, 
                    out string preferredLanguage, 
                    out string alternativeLanguage, 
                    out string providerName, 
                    out string providerDescription, 
                    out bool useConstParameter, 
                    out bool stripTrailingSpaces, 
                    out string providerCompanyConnectionString, 
                    out string nonProviderCompanyConnectionString, 
                    out string dbUser, 
                    out string activationDB) {
            object[] results = this.EndInvoke(asyncResult);
            admin = ((bool)(results[1]));
            authenticationToken = ((string)(results[2]));
            companyId = ((int)(results[3]));
            dbName = ((string)(results[4]));
            dbServer = ((string)(results[5]));
            providerId = ((int)(results[6]));
            security = ((bool)(results[7]));
            auditing = ((bool)(results[8]));
            useKeyedUpdate = ((bool)(results[9]));
            transactionUse = ((bool)(results[10]));
            preferredLanguage = ((string)(results[11]));
            alternativeLanguage = ((string)(results[12]));
            providerName = ((string)(results[13]));
            providerDescription = ((string)(results[14]));
            useConstParameter = ((bool)(results[15]));
            stripTrailingSpaces = ((bool)(results[16]));
            providerCompanyConnectionString = ((string)(results[17]));
            nonProviderCompanyConnectionString = ((string)(results[18]));
            dbUser = ((string)(results[19]));
            activationDB = ((string)(results[20]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/Login", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Login(
                    string userName, 
                    string companyName, 
                    string password, 
                    string askingProcess, 
                    bool overWriteLogin, 
                    out bool admin, 
                    out string authenticationToken, 
                    out int companyId, 
                    out string dbName, 
                    out string dbServer, 
                    out int providerId, 
                    out bool security, 
                    out bool auditing, 
                    out bool useKeyedUpdate, 
                    out bool transactionUse, 
                    out string preferredLanguage, 
                    out string alternativeLanguage, 
                    out string providerName, 
                    out string providerDescription, 
                    out bool useConstParameter, 
                    out bool stripTrailingSpaces, 
                    out string providerCompanyConnectionString, 
                    out string nonProviderCompanyConnectionString, 
                    out string dbUser, 
                    out string activationDB) {
            object[] results = this.Invoke("Login", new object[] {
                        userName,
                        companyName,
                        password,
                        askingProcess,
                        overWriteLogin});
            admin = ((bool)(results[1]));
            authenticationToken = ((string)(results[2]));
            companyId = ((int)(results[3]));
            dbName = ((string)(results[4]));
            dbServer = ((string)(results[5]));
            providerId = ((int)(results[6]));
            security = ((bool)(results[7]));
            auditing = ((bool)(results[8]));
            useKeyedUpdate = ((bool)(results[9]));
            transactionUse = ((bool)(results[10]));
            preferredLanguage = ((string)(results[11]));
            alternativeLanguage = ((string)(results[12]));
            providerName = ((string)(results[13]));
            providerDescription = ((string)(results[14]));
            useConstParameter = ((bool)(results[15]));
            stripTrailingSpaces = ((bool)(results[16]));
            providerCompanyConnectionString = ((string)(results[17]));
            nonProviderCompanyConnectionString = ((string)(results[18]));
            dbUser = ((string)(results[19]));
            activationDB = ((string)(results[20]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogin(string userName, string companyName, string password, string askingProcess, bool overWriteLogin, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Login", new object[] {
                        userName,
                        companyName,
                        password,
                        askingProcess,
                        overWriteLogin}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndLogin(
                    System.IAsyncResult asyncResult, 
                    out bool admin, 
                    out string authenticationToken, 
                    out int companyId, 
                    out string dbName, 
                    out string dbServer, 
                    out int providerId, 
                    out bool security, 
                    out bool auditing, 
                    out bool useKeyedUpdate, 
                    out bool transactionUse, 
                    out string preferredLanguage, 
                    out string alternativeLanguage, 
                    out string providerName, 
                    out string providerDescription, 
                    out bool useConstParameter, 
                    out bool stripTrailingSpaces, 
                    out string providerCompanyConnectionString, 
                    out string nonProviderCompanyConnectionString, 
                    out string dbUser, 
                    out string activationDB) {
            object[] results = this.EndInvoke(asyncResult);
            admin = ((bool)(results[1]));
            authenticationToken = ((string)(results[2]));
            companyId = ((int)(results[3]));
            dbName = ((string)(results[4]));
            dbServer = ((string)(results[5]));
            providerId = ((int)(results[6]));
            security = ((bool)(results[7]));
            auditing = ((bool)(results[8]));
            useKeyedUpdate = ((bool)(results[9]));
            transactionUse = ((bool)(results[10]));
            preferredLanguage = ((string)(results[11]));
            alternativeLanguage = ((string)(results[12]));
            providerName = ((string)(results[13]));
            providerDescription = ((string)(results[14]));
            useConstParameter = ((bool)(results[15]));
            stripTrailingSpaces = ((bool)(results[16]));
            providerCompanyConnectionString = ((string)(results[17]));
            nonProviderCompanyConnectionString = ((string)(results[18]));
            dbUser = ((string)(results[19]));
            activationDB = ((string)(results[20]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetLoginInformation", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetLoginInformation(
                    string authenticationToken, 
                    out string userName, 
                    out int loginId, 
                    out string companyName, 
                    out int companyId, 
                    out bool admin, 
                    out string dbName, 
                    out string dbServer, 
                    out int providerId, 
                    out bool security, 
                    out bool auditing, 
                    out bool useKeyedUpdate, 
                    out bool transactionUse, 
                    out string preferredLanguage, 
                    out string alternativeLanguage, 
                    out string providerName, 
                    out string providerDescription, 
                    out bool useConstParameter, 
                    out bool stripTrailingSpaces, 
                    out string providerCompanyConnectionString, 
                    out string nonProviderCompanyConnectionString, 
                    out string dbUser, 
                    out string processName) {
            object[] results = this.Invoke("GetLoginInformation", new object[] {
                        authenticationToken});
            userName = ((string)(results[1]));
            loginId = ((int)(results[2]));
            companyName = ((string)(results[3]));
            companyId = ((int)(results[4]));
            admin = ((bool)(results[5]));
            dbName = ((string)(results[6]));
            dbServer = ((string)(results[7]));
            providerId = ((int)(results[8]));
            security = ((bool)(results[9]));
            auditing = ((bool)(results[10]));
            useKeyedUpdate = ((bool)(results[11]));
            transactionUse = ((bool)(results[12]));
            preferredLanguage = ((string)(results[13]));
            alternativeLanguage = ((string)(results[14]));
            providerName = ((string)(results[15]));
            providerDescription = ((string)(results[16]));
            useConstParameter = ((bool)(results[17]));
            stripTrailingSpaces = ((bool)(results[18]));
            providerCompanyConnectionString = ((string)(results[19]));
            nonProviderCompanyConnectionString = ((string)(results[20]));
            dbUser = ((string)(results[21]));
            processName = ((string)(results[22]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLoginInformation(string authenticationToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLoginInformation", new object[] {
                        authenticationToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndGetLoginInformation(
                    System.IAsyncResult asyncResult, 
                    out string userName, 
                    out int loginId, 
                    out string companyName, 
                    out int companyId, 
                    out bool admin, 
                    out string dbName, 
                    out string dbServer, 
                    out int providerId, 
                    out bool security, 
                    out bool auditing, 
                    out bool useKeyedUpdate, 
                    out bool transactionUse, 
                    out string preferredLanguage, 
                    out string alternativeLanguage, 
                    out string providerName, 
                    out string providerDescription, 
                    out bool useConstParameter, 
                    out bool stripTrailingSpaces, 
                    out string providerCompanyConnectionString, 
                    out string nonProviderCompanyConnectionString, 
                    out string dbUser, 
                    out string processName) {
            object[] results = this.EndInvoke(asyncResult);
            userName = ((string)(results[1]));
            loginId = ((int)(results[2]));
            companyName = ((string)(results[3]));
            companyId = ((int)(results[4]));
            admin = ((bool)(results[5]));
            dbName = ((string)(results[6]));
            dbServer = ((string)(results[7]));
            providerId = ((int)(results[8]));
            security = ((bool)(results[9]));
            auditing = ((bool)(results[10]));
            useKeyedUpdate = ((bool)(results[11]));
            transactionUse = ((bool)(results[12]));
            preferredLanguage = ((string)(results[13]));
            alternativeLanguage = ((string)(results[14]));
            providerName = ((string)(results[15]));
            providerDescription = ((string)(results[16]));
            useConstParameter = ((bool)(results[17]));
            stripTrailingSpaces = ((bool)(results[18]));
            providerCompanyConnectionString = ((string)(results[19]));
            nonProviderCompanyConnectionString = ((string)(results[20]));
            dbUser = ((string)(results[21]));
            processName = ((string)(results[22]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/ClearSession", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ClearSession(string iID) {
            this.Invoke("ClearSession", new object[] {
                        iID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginClearSession(string iID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ClearSession", new object[] {
                        iID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndClearSession(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/LogOff", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogOff(string authenticationToken) {
            this.Invoke("LogOff", new object[] {
                        authenticationToken});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogOff(string authenticationToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LogOff", new object[] {
                        authenticationToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndLogOff(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/ConnectEasyLook", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ConnectEasyLook(string authenticationToken, System.DateTime applicationDate, bool checkDate, out string easyToken) {
            object[] results = this.Invoke("ConnectEasyLook", new object[] {
                        authenticationToken,
                        applicationDate,
                        checkDate});
            easyToken = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConnectEasyLook(string authenticationToken, System.DateTime applicationDate, bool checkDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConnectEasyLook", new object[] {
                        authenticationToken,
                        applicationDate,
                        checkDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndConnectEasyLook(System.IAsyncResult asyncResult, out string easyToken) {
            object[] results = this.EndInvoke(asyncResult);
            easyToken = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/DisconnectEasyLook", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DisconnectEasyLook(string authenticationToken) {
            this.Invoke("DisconnectEasyLook", new object[] {
                        authenticationToken});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDisconnectEasyLook(string authenticationToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DisconnectEasyLook", new object[] {
                        authenticationToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDisconnectEasyLook(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetUserName", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserName(int loginId) {
            object[] results = this.Invoke("GetUserName", new object[] {
                        loginId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserName(int loginId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserName", new object[] {
                        loginId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetUserName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetDbOwner", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDbOwner(int companyId) {
            object[] results = this.Invoke("GetDbOwner", new object[] {
                        companyId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDbOwner(int companyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDbOwner", new object[] {
                        companyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDbOwner(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsCompanySecured", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsCompanySecured(int companyId) {
            object[] results = this.Invoke("IsCompanySecured", new object[] {
                        companyId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsCompanySecured(int companyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsCompanySecured", new object[] {
                        companyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsCompanySecured(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetAuthenticationInformations", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetAuthenticationInformations(string authenticationToken, out int loginId, out int companyId, out bool webLogin) {
            object[] results = this.Invoke("GetAuthenticationInformations", new object[] {
                        authenticationToken});
            loginId = ((int)(results[1]));
            companyId = ((int)(results[2]));
            webLogin = ((bool)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAuthenticationInformations(string authenticationToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAuthenticationInformations", new object[] {
                        authenticationToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndGetAuthenticationInformations(System.IAsyncResult asyncResult, out int loginId, out int companyId, out bool webLogin) {
            object[] results = this.EndInvoke(asyncResult);
            loginId = ((int)(results[1]));
            companyId = ((int)(results[2]));
            webLogin = ((bool)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/DeleteAssociation", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteAssociation(int loginId, int companyId) {
            object[] results = this.Invoke("DeleteAssociation", new object[] {
                        loginId,
                        companyId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteAssociation(int loginId, int companyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteAssociation", new object[] {
                        loginId,
                        companyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndDeleteAssociation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/DeleteUser", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteUser(int loginId) {
            object[] results = this.Invoke("DeleteUser", new object[] {
                        loginId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteUser(int loginId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteUser", new object[] {
                        loginId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndDeleteUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/DeleteCompany", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteCompany(int companyId) {
            object[] results = this.Invoke("DeleteCompany", new object[] {
                        companyId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteCompany(int companyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteCompany", new object[] {
                        companyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndDeleteCompany(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetSystemDBConnectionString", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSystemDBConnectionString(string authenticationToken) {
            object[] results = this.Invoke("GetSystemDBConnectionString", new object[] {
                        authenticationToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSystemDBConnectionString(string authenticationToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSystemDBConnectionString", new object[] {
                        authenticationToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetSystemDBConnectionString(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetEdition", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEdition() {
            object[] results = this.Invoke("GetEdition", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEdition(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEdition", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetEdition(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetCountry", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCountry() {
            object[] results = this.Invoke("GetCountry", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCountry(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCountry", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetCountry(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetDatabaseType", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDatabaseType() {
            object[] results = this.Invoke("GetDatabaseType", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDatabaseType(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDatabaseType", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDatabaseType(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetUserInfo", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserInfo() {
            object[] results = this.Invoke("GetUserInfo", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserInfo(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserInfo", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetUserInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetUserInfoID", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserInfoID() {
            object[] results = this.Invoke("GetUserInfoID", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserInfoID(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserInfoID", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetUserInfoID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/TraceAction", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TraceAction(string company, string login, int type, string processName, string winUser, string location) {
            this.Invoke("TraceAction", new object[] {
                        company,
                        login,
                        type,
                        processName,
                        winUser,
                        location});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTraceAction(string company, string login, int type, string processName, string winUser, string location, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TraceAction", new object[] {
                        company,
                        login,
                        type,
                        processName,
                        winUser,
                        location}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTraceAction(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/HasUserAlreadyChangedPasswordToday", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasUserAlreadyChangedPasswordToday(string user) {
            object[] results = this.Invoke("HasUserAlreadyChangedPasswordToday", new object[] {
                        user});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginHasUserAlreadyChangedPasswordToday(string user, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("HasUserAlreadyChangedPasswordToday", new object[] {
                        user}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndHasUserAlreadyChangedPasswordToday(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
    }
}
