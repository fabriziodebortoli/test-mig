<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BaseColumnsPageTitleForExport" xml:space="preserve">
    <value>Choose if you want to export the mandatory columns.</value>
  </data>
  <data name="BaseColumnsPageTitleForImport" xml:space="preserve">
    <value>Choose if you want to import the mandatory and also specify which format to use for columns with DateTime format.</value>
  </data>
  <data name="CannotExecuteAnEmptyScript" xml:space="preserve">
    <value>The script is empty, so you can execute it. Please insert a valid text or uncheck the flag.</value>
  </data>
  <data name="ContextMenuShow" xml:space="preserve">
    <value>View</value>
  </data>
  <data name="DBProviderNotValid" xml:space="preserve">
    <value>The configuration file you have chosen [{0}] is not compatible with your current database provider. Select another one.</value>
  </data>
  <data name="DefaultExportButtonText" xml:space="preserve">
    <value>Create default data</value>
  </data>
  <data name="DefaultImportButtonText" xml:space="preserve">
    <value>Load default data</value>
  </data>
  <data name="DefaultOptionalText" xml:space="preserve">
    <value>default optional</value>
  </data>
  <data name="DefaultPresentationText" xml:space="preserve">
    <value>Using wizard the user can export a new data set, load and customize default data required for the correct running of application procedures.</value>
  </data>
  <data name="DefaultTitleText" xml:space="preserve">
    <value>Default data management</value>
  </data>
  <data name="ErrCompanyDBIsNotFree" xml:space="preserve">
    <value>Attention: one or more users are connected to the company database. Impossible to continue the elaboration.</value>
  </data>
  <data name="ErrConnectCompanyDB" xml:space="preserve">
    <value>An error occurred connecting to the company database.</value>
  </data>
  <data name="ErrConnectStringEmpty" xml:space="preserve">
    <value>The connection string to the company database is empty.</value>
  </data>
  <data name="ErrFileEmpty" xml:space="preserve">
    <value>The file doesn't contain data.</value>
  </data>
  <data name="ErrImportFailed" xml:space="preserve">
    <value>Import data procedure failed</value>
  </data>
  <data name="ErrQuerySystemDB" xml:space="preserve">
    <value>An error occurred connecting to the system database.</value>
  </data>
  <data name="ErrSampleFilesNotExist" xml:space="preserve">
    <value>ATTENTION: NO FILE TO IMPORT EXISTS WITH SPECIFIED COUNTRY ({0})</value>
  </data>
  <data name="ErrSampleTablesNotExist" xml:space="preserve">
    <value>ATTENTION: NO TABLE TO EXPORT WAS SELECTED</value>
  </data>
  <data name="ExportOperation" xml:space="preserve">
    <value>export</value>
  </data>
  <data name="ExportOperationUpperCase" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="ExportPresentationText" xml:space="preserve">
    <value>With wizard the user is able to make a customized export of company data, saving it in one or more XML file.</value>
  </data>
  <data name="ExportTitleText" xml:space="preserve">
    <value>Export data</value>
  </data>
  <data name="GenericPresentationText" xml:space="preserve">
    <value>These tools offer an user guide for manage of company data. You can choose between different options: import or export data, export a new data set or load sample or default data.</value>
  </data>
  <data name="ImportOperation" xml:space="preserve">
    <value>import</value>
  </data>
  <data name="ImportOperationUpperCase" xml:space="preserve">
    <value>Import</value>
  </data>
  <data name="ImportPresentationText" xml:space="preserve">
    <value>With wizard the user is able to make a customized import, updating the table contents, from the data contained in one or more XML file.</value>
  </data>
  <data name="ImportTitleText" xml:space="preserve">
    <value>Import data</value>
  </data>
  <data name="LblAttention" xml:space="preserve">
    <value>Attention</value>
  </data>
  <data name="LblRunOperation" xml:space="preserve">
    <value>Confirm operations</value>
  </data>
  <data name="MsgConfigNotValid" xml:space="preserve">
    <value>Selected configuration is empty or not valid</value>
  </data>
  <data name="MsgConsiderAllTables" xml:space="preserve">
    <value>Consider ALL database tables.</value>
  </data>
  <data name="MsgConsiderBaseColumns" xml:space="preserve">
    <value>{0} the following base column(s):</value>
  </data>
  <data name="MsgConsiderSubsetOfTables" xml:space="preserve">
    <value>Tables subset list:</value>
  </data>
  <data name="MsgCreateData" xml:space="preserve">
    <value>Creating data of {0} considering company {1} data</value>
  </data>
  <data name="MsgDeleteTableContextOff" xml:space="preserve">
    <value>Don't delete table contents before import</value>
  </data>
  <data name="MsgDeleteTableContextOn" xml:space="preserve">
    <value>Delete table contents before import</value>
  </data>
  <data name="MsgDisableCheckFKOff" xml:space="preserve">
    <value>Check existence of associated data</value>
  </data>
  <data name="MsgDisableCheckFKOn" xml:space="preserve">
    <value>Don't check existence of associated data</value>
  </data>
  <data name="MsgDoNotUseUTCFormat" xml:space="preserve">
    <value>For the DateTime columns don't use UTC format</value>
  </data>
  <data name="MsgErrActionContinue" xml:space="preserve">
    <value>Continue processing</value>
  </data>
  <data name="MsgErrActionContinueLastFileRollback" xml:space="preserve">
    <value>Continue processing and do not save information contained in the file generating the error</value>
  </data>
  <data name="MsgErrActionStopAllFileRollback" xml:space="preserve">
    <value>Stop processing and do not save any data</value>
  </data>
  <data name="MsgErrActionStopLastFileRollback" xml:space="preserve">
    <value>Stop processing and do not save data contained in the last file, generating the error</value>
  </data>
  <data name="MsgErrorAction" xml:space="preserve">
    <value>In case of error:</value>
  </data>
  <data name="MsgFilesList" xml:space="preserve">
    <value>Selected files list:</value>
  </data>
  <data name="MsgFoldersList" xml:space="preserve">
    <value>Selected folders list:</value>
  </data>
  <data name="MsgInsertExtraFieldsRowOff" xml:space="preserve">
    <value>Disable entry in an inconsistent data structure</value>
  </data>
  <data name="MsgInsertExtraFieldsRowOn" xml:space="preserve">
    <value>Enable entry in an inconsistent data structure</value>
  </data>
  <data name="MsgLanguageNotValid" xml:space="preserve">
    <value>Selected country is empty</value>
  </data>
  <data name="MsgLoadData" xml:space="preserve">
    <value>Loading in the database of company {0} the data of {1}</value>
  </data>
  <data name="MsgOneFileForTableOff" xml:space="preserve">
    <value>Create a single XML file containing the information of all exported tables</value>
  </data>
  <data name="MsgOneFileForTableOn" xml:space="preserve">
    <value>Create a XML file for each exported table</value>
  </data>
  <data name="MsgRunOperation" xml:space="preserve">
    <value>Do you want to proceed with elaboration?</value>
  </data>
  <data name="MsgSchemaInfo" xml:space="preserve">
    <value>Integrate XML file with schema information</value>
  </data>
  <data name="MsgSelectColumnsOff" xml:space="preserve">
    <value>Selection single columns to export disable</value>
  </data>
  <data name="MsgSelectColumnsOn" xml:space="preserve">
    <value>Selection single columns to export enable</value>
  </data>
  <data name="MsgUpdateExistRowError" xml:space="preserve">
    <value>In case of table already present notify error</value>
  </data>
  <data name="MsgUpdateExistRowOff" xml:space="preserve">
    <value>Don't overwrite records already present</value>
  </data>
  <data name="MsgUpdateExistRowOn" xml:space="preserve">
    <value>Overwrite records already present</value>
  </data>
  <data name="MsgUseUTCFormat" xml:space="preserve">
    <value>For the DateTime columns use UTC format</value>
  </data>
  <data name="MsgWriteQuery" xml:space="preserve">
    <value>Enable compiling native query for filtering data</value>
  </data>
  <data name="MustSpecifyFileName" xml:space="preserve">
    <value>If you want to save your selections you must specify a file name!</value>
  </data>
  <data name="OverwriteExistingFile" xml:space="preserve">
    <value>The specified file already exists, so it will be overwritten.</value>
  </data>
  <data name="RightSyntax" xml:space="preserve">
    <value>Correct syntax!</value>
  </data>
  <data name="SampleExportButtonText" xml:space="preserve">
    <value>Create sample data</value>
  </data>
  <data name="SampleImportButtonText" xml:space="preserve">
    <value>Load sample data</value>
  </data>
  <data name="SamplePresentationText" xml:space="preserve">
    <value>Using wizard the user can export a new data set, load and customize sample data required for the correct running of application procedures.</value>
  </data>
  <data name="SampleText" xml:space="preserve">
    <value>sample</value>
  </data>
  <data name="SampleTitleText" xml:space="preserve">
    <value>Sample data management</value>
  </data>
  <data name="SaveSelectionsInFile" xml:space="preserve">
    <value>Save selections in the configuration file:</value>
  </data>
  <data name="SelectFolder" xml:space="preserve">
    <value>Select a folder that contains import files</value>
  </data>
  <data name="SpecifyAnXMLFile" xml:space="preserve">
    <value>You must specify a file with XML extension!</value>
  </data>
  <data name="SpecifyValidPath" xml:space="preserve">
    <value>You have to specify a valid path!</value>
  </data>
  <data name="ToolTipForAppendFile" xml:space="preserve">
    <value>Appended by: {0} - {1}</value>
  </data>
  <data name="WizardTitleText" xml:space="preserve">
    <value>{0} - Company {1}</value>
  </data>
  <data name="WrongSyntax" xml:space="preserve">
    <value>Warning: wrong syntax!</value>
  </data>
</root>