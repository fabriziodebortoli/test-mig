//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.269.
// 
#pragma warning disable 1591

namespace TbSenderTestUI.PLProxy {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PLProxySoap", Namespace="http://microarea.it/TbSender/")]
    public partial class PLProxy : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SubscribeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChargeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadSingleLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSentLotsStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLotCostEstimateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoTickOperationCompleted;
        
        private System.Threading.SendOrPostCallback WakeUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefreshSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCreditStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback AllotMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSingleMessageLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeMessageDeliveryTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeMessagePrintTypeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PLProxy() {
            this.Url = global::TbSenderTestUI.Properties.Settings.Default.TbSenderTestUI_PLProxy_PLProxy;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SubscribeCompletedEventHandler SubscribeCompleted;
        
        /// <remarks/>
        public event ChargeCompletedEventHandler ChargeCompleted;
        
        /// <remarks/>
        public event UploadSingleLotCompletedEventHandler UploadSingleLotCompleted;
        
        /// <remarks/>
        public event UpdateSentLotsStatusCompletedEventHandler UpdateSentLotsStatusCompleted;
        
        /// <remarks/>
        public event GetLotCostEstimateCompletedEventHandler GetLotCostEstimateCompleted;
        
        /// <remarks/>
        public event DoTickCompletedEventHandler DoTickCompleted;
        
        /// <remarks/>
        public event WakeUpCompletedEventHandler WakeUpCompleted;
        
        /// <remarks/>
        public event RefreshSettingsCompletedEventHandler RefreshSettingsCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event GetCreditStateCompletedEventHandler GetCreditStateCompleted;
        
        /// <remarks/>
        public event AllotMessagesCompletedEventHandler AllotMessagesCompleted;
        
        /// <remarks/>
        public event CreateSingleMessageLotCompletedEventHandler CreateSingleMessageLotCompleted;
        
        /// <remarks/>
        public event DeleteMessageCompletedEventHandler DeleteMessageCompleted;
        
        /// <remarks/>
        public event ChangeMessageDeliveryTypeCompletedEventHandler ChangeMessageDeliveryTypeCompleted;
        
        /// <remarks/>
        public event ChangeMessagePrintTypeCompletedEventHandler ChangeMessagePrintTypeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/Subscribe", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Subscribe(string companyName, string name, string city, string address, string zipCode, string county, string country, string telephoneNumber, string faxNumber, string fiscalCode, string vatNumber, string gender, string eMail, out string loginId, out string errorMessage) {
            object[] results = this.Invoke("Subscribe", new object[] {
                        companyName,
                        name,
                        city,
                        address,
                        zipCode,
                        county,
                        country,
                        telephoneNumber,
                        faxNumber,
                        fiscalCode,
                        vatNumber,
                        gender,
                        eMail});
            loginId = ((string)(results[1]));
            errorMessage = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubscribeAsync(string companyName, string name, string city, string address, string zipCode, string county, string country, string telephoneNumber, string faxNumber, string fiscalCode, string vatNumber, string gender, string eMail) {
            this.SubscribeAsync(companyName, name, city, address, zipCode, county, country, telephoneNumber, faxNumber, fiscalCode, vatNumber, gender, eMail, null);
        }
        
        /// <remarks/>
        public void SubscribeAsync(string companyName, string name, string city, string address, string zipCode, string county, string country, string telephoneNumber, string faxNumber, string fiscalCode, string vatNumber, string gender, string eMail, object userState) {
            if ((this.SubscribeOperationCompleted == null)) {
                this.SubscribeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubscribeOperationCompleted);
            }
            this.InvokeAsync("Subscribe", new object[] {
                        companyName,
                        name,
                        city,
                        address,
                        zipCode,
                        county,
                        country,
                        telephoneNumber,
                        faxNumber,
                        fiscalCode,
                        vatNumber,
                        gender,
                        eMail}, this.SubscribeOperationCompleted, userState);
        }
        
        private void OnSubscribeOperationCompleted(object arg) {
            if ((this.SubscribeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubscribeCompleted(this, new SubscribeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/Charge", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Charge(string token, string fileContentBase64, out string errorMessage) {
            object[] results = this.Invoke("Charge", new object[] {
                        token,
                        fileContentBase64});
            errorMessage = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChargeAsync(string token, string fileContentBase64) {
            this.ChargeAsync(token, fileContentBase64, null);
        }
        
        /// <remarks/>
        public void ChargeAsync(string token, string fileContentBase64, object userState) {
            if ((this.ChargeOperationCompleted == null)) {
                this.ChargeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChargeOperationCompleted);
            }
            this.InvokeAsync("Charge", new object[] {
                        token,
                        fileContentBase64}, this.ChargeOperationCompleted, userState);
        }
        
        private void OnChargeOperationCompleted(object arg) {
            if ((this.ChargeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChargeCompleted(this, new ChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/UploadSingleLot", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadSingleLot(string company, int lotID, out string errorMessage) {
            object[] results = this.Invoke("UploadSingleLot", new object[] {
                        company,
                        lotID});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadSingleLotAsync(string company, int lotID) {
            this.UploadSingleLotAsync(company, lotID, null);
        }
        
        /// <remarks/>
        public void UploadSingleLotAsync(string company, int lotID, object userState) {
            if ((this.UploadSingleLotOperationCompleted == null)) {
                this.UploadSingleLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadSingleLotOperationCompleted);
            }
            this.InvokeAsync("UploadSingleLot", new object[] {
                        company,
                        lotID}, this.UploadSingleLotOperationCompleted, userState);
        }
        
        private void OnUploadSingleLotOperationCompleted(object arg) {
            if ((this.UploadSingleLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadSingleLotCompleted(this, new UploadSingleLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/UpdateSentLotsStatus", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateSentLotsStatus(string company, out string errorMessage) {
            object[] results = this.Invoke("UpdateSentLotsStatus", new object[] {
                        company});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSentLotsStatusAsync(string company) {
            this.UpdateSentLotsStatusAsync(company, null);
        }
        
        /// <remarks/>
        public void UpdateSentLotsStatusAsync(string company, object userState) {
            if ((this.UpdateSentLotsStatusOperationCompleted == null)) {
                this.UpdateSentLotsStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSentLotsStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateSentLotsStatus", new object[] {
                        company}, this.UpdateSentLotsStatusOperationCompleted, userState);
        }
        
        private void OnUpdateSentLotsStatusOperationCompleted(object arg) {
            if ((this.UpdateSentLotsStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSentLotsStatusCompleted(this, new UpdateSentLotsStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/GetLotCostEstimate", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetLotCostEstimate(string company, int lotID, out string errorMessage) {
            object[] results = this.Invoke("GetLotCostEstimate", new object[] {
                        company,
                        lotID});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetLotCostEstimateAsync(string company, int lotID) {
            this.GetLotCostEstimateAsync(company, lotID, null);
        }
        
        /// <remarks/>
        public void GetLotCostEstimateAsync(string company, int lotID, object userState) {
            if ((this.GetLotCostEstimateOperationCompleted == null)) {
                this.GetLotCostEstimateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLotCostEstimateOperationCompleted);
            }
            this.InvokeAsync("GetLotCostEstimate", new object[] {
                        company,
                        lotID}, this.GetLotCostEstimateOperationCompleted, userState);
        }
        
        private void OnGetLotCostEstimateOperationCompleted(object arg) {
            if ((this.GetLotCostEstimateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLotCostEstimateCompleted(this, new GetLotCostEstimateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/DoTick", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DoTick() {
            this.Invoke("DoTick", new object[0]);
        }
        
        /// <remarks/>
        public void DoTickAsync() {
            this.DoTickAsync(null);
        }
        
        /// <remarks/>
        public void DoTickAsync(object userState) {
            if ((this.DoTickOperationCompleted == null)) {
                this.DoTickOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoTickOperationCompleted);
            }
            this.InvokeAsync("DoTick", new object[0], this.DoTickOperationCompleted, userState);
        }
        
        private void OnDoTickOperationCompleted(object arg) {
            if ((this.DoTickCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoTickCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/WakeUp", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void WakeUp() {
            this.Invoke("WakeUp", new object[0]);
        }
        
        /// <remarks/>
        public void WakeUpAsync() {
            this.WakeUpAsync(null);
        }
        
        /// <remarks/>
        public void WakeUpAsync(object userState) {
            if ((this.WakeUpOperationCompleted == null)) {
                this.WakeUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWakeUpOperationCompleted);
            }
            this.InvokeAsync("WakeUp", new object[0], this.WakeUpOperationCompleted, userState);
        }
        
        private void OnWakeUpOperationCompleted(object arg) {
            if ((this.WakeUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WakeUpCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/RefreshSettings", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RefreshSettings() {
            this.Invoke("RefreshSettings", new object[0]);
        }
        
        /// <remarks/>
        public void RefreshSettingsAsync() {
            this.RefreshSettingsAsync(null);
        }
        
        /// <remarks/>
        public void RefreshSettingsAsync(object userState) {
            if ((this.RefreshSettingsOperationCompleted == null)) {
                this.RefreshSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefreshSettingsOperationCompleted);
            }
            this.InvokeAsync("RefreshSettings", new object[0], this.RefreshSettingsOperationCompleted, userState);
        }
        
        private void OnRefreshSettingsOperationCompleted(object arg) {
            if ((this.RefreshSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefreshSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/Login", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Login(
                    string loginID, 
                    string password, 
                    out string surNameCompanyName, 
                    out string name, 
                    out string city, 
                    out string address, 
                    out string zipCode, 
                    out string county, 
                    out string state, 
                    out string telephoneNumber, 
                    out string faxNumber, 
                    out string fiscalCode, 
                    out string vatNumber, 
                    out string gender, 
                    out string eMail, 
                    out string note, 
                    out string errorMessage) {
            object[] results = this.Invoke("Login", new object[] {
                        loginID,
                        password});
            surNameCompanyName = ((string)(results[1]));
            name = ((string)(results[2]));
            city = ((string)(results[3]));
            address = ((string)(results[4]));
            zipCode = ((string)(results[5]));
            county = ((string)(results[6]));
            state = ((string)(results[7]));
            telephoneNumber = ((string)(results[8]));
            faxNumber = ((string)(results[9]));
            fiscalCode = ((string)(results[10]));
            vatNumber = ((string)(results[11]));
            gender = ((string)(results[12]));
            eMail = ((string)(results[13]));
            note = ((string)(results[14]));
            errorMessage = ((string)(results[15]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string loginID, string password) {
            this.LoginAsync(loginID, password, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string loginID, string password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        loginID,
                        password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/GetCreditState", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double GetCreditState(string login, string token, out int codeState, out string errorMessage) {
            object[] results = this.Invoke("GetCreditState", new object[] {
                        login,
                        token});
            codeState = ((int)(results[1]));
            errorMessage = ((string)(results[2]));
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void GetCreditStateAsync(string login, string token) {
            this.GetCreditStateAsync(login, token, null);
        }
        
        /// <remarks/>
        public void GetCreditStateAsync(string login, string token, object userState) {
            if ((this.GetCreditStateOperationCompleted == null)) {
                this.GetCreditStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCreditStateOperationCompleted);
            }
            this.InvokeAsync("GetCreditState", new object[] {
                        login,
                        token}, this.GetCreditStateOperationCompleted, userState);
        }
        
        private void OnGetCreditStateOperationCompleted(object arg) {
            if ((this.GetCreditStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCreditStateCompleted(this, new GetCreditStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/AllotMessages", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AllotMessages(string company, out string errorMessage) {
            object[] results = this.Invoke("AllotMessages", new object[] {
                        company});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AllotMessagesAsync(string company) {
            this.AllotMessagesAsync(company, null);
        }
        
        /// <remarks/>
        public void AllotMessagesAsync(string company, object userState) {
            if ((this.AllotMessagesOperationCompleted == null)) {
                this.AllotMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAllotMessagesOperationCompleted);
            }
            this.InvokeAsync("AllotMessages", new object[] {
                        company}, this.AllotMessagesOperationCompleted, userState);
        }
        
        private void OnAllotMessagesOperationCompleted(object arg) {
            if ((this.AllotMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AllotMessagesCompleted(this, new AllotMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/CreateSingleMessageLot", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateSingleMessageLot(string company, int msgId, bool sendImmediately, out string errorMessage) {
            object[] results = this.Invoke("CreateSingleMessageLot", new object[] {
                        company,
                        msgId,
                        sendImmediately});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSingleMessageLotAsync(string company, int msgId, bool sendImmediately) {
            this.CreateSingleMessageLotAsync(company, msgId, sendImmediately, null);
        }
        
        /// <remarks/>
        public void CreateSingleMessageLotAsync(string company, int msgId, bool sendImmediately, object userState) {
            if ((this.CreateSingleMessageLotOperationCompleted == null)) {
                this.CreateSingleMessageLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSingleMessageLotOperationCompleted);
            }
            this.InvokeAsync("CreateSingleMessageLot", new object[] {
                        company,
                        msgId,
                        sendImmediately}, this.CreateSingleMessageLotOperationCompleted, userState);
        }
        
        private void OnCreateSingleMessageLotOperationCompleted(object arg) {
            if ((this.CreateSingleMessageLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSingleMessageLotCompleted(this, new CreateSingleMessageLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/DeleteMessage", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteMessage(string company, int msgId, out string errorMessage) {
            object[] results = this.Invoke("DeleteMessage", new object[] {
                        company,
                        msgId});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(string company, int msgId) {
            this.DeleteMessageAsync(company, msgId, null);
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(string company, int msgId, object userState) {
            if ((this.DeleteMessageOperationCompleted == null)) {
                this.DeleteMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMessageOperationCompleted);
            }
            this.InvokeAsync("DeleteMessage", new object[] {
                        company,
                        msgId}, this.DeleteMessageOperationCompleted, userState);
        }
        
        private void OnDeleteMessageOperationCompleted(object arg) {
            if ((this.DeleteMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMessageCompleted(this, new DeleteMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/ChangeMessageDeliveryType", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ChangeMessageDeliveryType(string company, int msgId, int deliveryType, out string errorMessage) {
            object[] results = this.Invoke("ChangeMessageDeliveryType", new object[] {
                        company,
                        msgId,
                        deliveryType});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeMessageDeliveryTypeAsync(string company, int msgId, int deliveryType) {
            this.ChangeMessageDeliveryTypeAsync(company, msgId, deliveryType, null);
        }
        
        /// <remarks/>
        public void ChangeMessageDeliveryTypeAsync(string company, int msgId, int deliveryType, object userState) {
            if ((this.ChangeMessageDeliveryTypeOperationCompleted == null)) {
                this.ChangeMessageDeliveryTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeMessageDeliveryTypeOperationCompleted);
            }
            this.InvokeAsync("ChangeMessageDeliveryType", new object[] {
                        company,
                        msgId,
                        deliveryType}, this.ChangeMessageDeliveryTypeOperationCompleted, userState);
        }
        
        private void OnChangeMessageDeliveryTypeOperationCompleted(object arg) {
            if ((this.ChangeMessageDeliveryTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeMessageDeliveryTypeCompleted(this, new ChangeMessageDeliveryTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/ChangeMessagePrintType", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ChangeMessagePrintType(string company, int msgId, int printType, out string errorMessage) {
            object[] results = this.Invoke("ChangeMessagePrintType", new object[] {
                        company,
                        msgId,
                        printType});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeMessagePrintTypeAsync(string company, int msgId, int printType) {
            this.ChangeMessagePrintTypeAsync(company, msgId, printType, null);
        }
        
        /// <remarks/>
        public void ChangeMessagePrintTypeAsync(string company, int msgId, int printType, object userState) {
            if ((this.ChangeMessagePrintTypeOperationCompleted == null)) {
                this.ChangeMessagePrintTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeMessagePrintTypeOperationCompleted);
            }
            this.InvokeAsync("ChangeMessagePrintType", new object[] {
                        company,
                        msgId,
                        printType}, this.ChangeMessagePrintTypeOperationCompleted, userState);
        }
        
        private void OnChangeMessagePrintTypeOperationCompleted(object arg) {
            if ((this.ChangeMessagePrintTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeMessagePrintTypeCompleted(this, new ChangeMessagePrintTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SubscribeCompletedEventHandler(object sender, SubscribeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubscribeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubscribeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string loginId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ChargeCompletedEventHandler(object sender, ChargeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UploadSingleLotCompletedEventHandler(object sender, UploadSingleLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadSingleLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadSingleLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateSentLotsStatusCompletedEventHandler(object sender, UpdateSentLotsStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSentLotsStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSentLotsStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLotCostEstimateCompletedEventHandler(object sender, GetLotCostEstimateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLotCostEstimateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLotCostEstimateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DoTickCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void WakeUpCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RefreshSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string surNameCompanyName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string city {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string address {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string zipCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string county {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string state {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string telephoneNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string faxNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public string fiscalCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string vatNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string gender {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
        
        /// <remarks/>
        public string eMail {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[13]));
            }
        }
        
        /// <remarks/>
        public string note {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[14]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[15]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCreditStateCompletedEventHandler(object sender, GetCreditStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCreditStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCreditStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int codeState {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AllotMessagesCompletedEventHandler(object sender, AllotMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AllotMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AllotMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateSingleMessageLotCompletedEventHandler(object sender, CreateSingleMessageLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSingleMessageLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSingleMessageLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteMessageCompletedEventHandler(object sender, DeleteMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ChangeMessageDeliveryTypeCompletedEventHandler(object sender, ChangeMessageDeliveryTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeMessageDeliveryTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeMessageDeliveryTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ChangeMessagePrintTypeCompletedEventHandler(object sender, ChangeMessagePrintTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeMessagePrintTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeMessagePrintTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591