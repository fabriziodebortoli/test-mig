//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace EAConnector.EASync {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MicroareaEasyAttachmentSyncSoap", Namespace="http://microarea.it/EasyAttachmentSync/")]
    public partial class MicroareaEasyAttachmentSync : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback InitOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAliveOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsFTSEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuspendFTSOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDefaultSearchIndexesOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnqueueAttachmentsToSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSOSDocumentsStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFieldsValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewAttachmentByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApproveOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MicroareaEasyAttachmentSync() {
            this.Url = global::EAConnector.Properties.Settings.Default.EAConnector_EASync_MicroareaEasyAttachmentSync;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InitCompletedEventHandler InitCompleted;
        
        /// <remarks/>
        public event IsAliveCompletedEventHandler IsAliveCompleted;
        
        /// <remarks/>
        public event ClearCompletedEventHandler ClearCompleted;
        
        /// <remarks/>
        public event IsFTSEnabledCompletedEventHandler IsFTSEnabledCompleted;
        
        /// <remarks/>
        public event StopCompletedEventHandler StopCompleted;
        
        /// <remarks/>
        public event SuspendFTSCompletedEventHandler SuspendFTSCompleted;
        
        /// <remarks/>
        public event UpdateDefaultSearchIndexesCompletedEventHandler UpdateDefaultSearchIndexesCompleted;
        
        /// <remarks/>
        public event EnqueueAttachmentsToSendCompletedEventHandler EnqueueAttachmentsToSendCompleted;
        
        /// <remarks/>
        public event UpdateSOSDocumentsStatusCompletedEventHandler UpdateSOSDocumentsStatusCompleted;
        
        /// <remarks/>
        public event UpdateFieldsValueCompletedEventHandler UpdateFieldsValueCompleted;
        
        /// <remarks/>
        public event NewAttachmentByIdCompletedEventHandler NewAttachmentByIdCompleted;
        
        /// <remarks/>
        public event ApproveCompletedEventHandler ApproveCompleted;
        
        /// <remarks/>
        public event GetDescriptionCompletedEventHandler GetDescriptionCompleted;
        
        /// <remarks/>
        public event AddUserCompletedEventHandler AddUserCompleted;
        
        /// <remarks/>
        public event GetStatusCompletedEventHandler GetStatusCompleted;
        
        /// <remarks/>
        public event NotifyCompletedEventHandler NotifyCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/EasyAttachmentSync/Init", RequestNamespace="http://microarea.it/EasyAttachmentSync/", ResponseNamespace="http://microarea.it/EasyAttachmentSync/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Init(string authenticationToken) {
            object[] results = this.Invoke("Init", new object[] {
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InitAsync(string authenticationToken) {
            this.InitAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void InitAsync(string authenticationToken, object userState) {
            if ((this.InitOperationCompleted == null)) {
                this.InitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitOperationCompleted);
            }
            this.InvokeAsync("Init", new object[] {
                        authenticationToken}, this.InitOperationCompleted, userState);
        }
        
        private void OnInitOperationCompleted(object arg) {
            if ((this.InitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitCompleted(this, new InitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/EasyAttachmentSync/IsAlive", RequestNamespace="http://microarea.it/EasyAttachmentSync/", ResponseNamespace="http://microarea.it/EasyAttachmentSync/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsAlive() {
            object[] results = this.Invoke("IsAlive", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsAliveAsync() {
            this.IsAliveAsync(null);
        }
        
        /// <remarks/>
        public void IsAliveAsync(object userState) {
            if ((this.IsAliveOperationCompleted == null)) {
                this.IsAliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAliveOperationCompleted);
            }
            this.InvokeAsync("IsAlive", new object[0], this.IsAliveOperationCompleted, userState);
        }
        
        private void OnIsAliveOperationCompleted(object arg) {
            if ((this.IsAliveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAliveCompleted(this, new IsAliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/EasyAttachmentSync/Clear", RequestNamespace="http://microarea.it/EasyAttachmentSync/", ResponseNamespace="http://microarea.it/EasyAttachmentSync/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Clear() {
            object[] results = this.Invoke("Clear", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ClearAsync() {
            this.ClearAsync(null);
        }
        
        /// <remarks/>
        public void ClearAsync(object userState) {
            if ((this.ClearOperationCompleted == null)) {
                this.ClearOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearOperationCompleted);
            }
            this.InvokeAsync("Clear", new object[0], this.ClearOperationCompleted, userState);
        }
        
        private void OnClearOperationCompleted(object arg) {
            if ((this.ClearCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearCompleted(this, new ClearCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/EasyAttachmentSync/IsFTSEnabled", RequestNamespace="http://microarea.it/EasyAttachmentSync/", ResponseNamespace="http://microarea.it/EasyAttachmentSync/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsFTSEnabled(int companyId) {
            object[] results = this.Invoke("IsFTSEnabled", new object[] {
                        companyId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsFTSEnabledAsync(int companyId) {
            this.IsFTSEnabledAsync(companyId, null);
        }
        
        /// <remarks/>
        public void IsFTSEnabledAsync(int companyId, object userState) {
            if ((this.IsFTSEnabledOperationCompleted == null)) {
                this.IsFTSEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsFTSEnabledOperationCompleted);
            }
            this.InvokeAsync("IsFTSEnabled", new object[] {
                        companyId}, this.IsFTSEnabledOperationCompleted, userState);
        }
        
        private void OnIsFTSEnabledOperationCompleted(object arg) {
            if ((this.IsFTSEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsFTSEnabledCompleted(this, new IsFTSEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/EasyAttachmentSync/Stop", RequestNamespace="http://microarea.it/EasyAttachmentSync/", ResponseNamespace="http://microarea.it/EasyAttachmentSync/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Stop() {
            object[] results = this.Invoke("Stop", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void StopAsync() {
            this.StopAsync(null);
        }
        
        /// <remarks/>
        public void StopAsync(object userState) {
            if ((this.StopOperationCompleted == null)) {
                this.StopOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopOperationCompleted);
            }
            this.InvokeAsync("Stop", new object[0], this.StopOperationCompleted, userState);
        }
        
        private void OnStopOperationCompleted(object arg) {
            if ((this.StopCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopCompleted(this, new StopCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/EasyAttachmentSync/SuspendFTS", RequestNamespace="http://microarea.it/EasyAttachmentSync/", ResponseNamespace="http://microarea.it/EasyAttachmentSync/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SuspendFTS(bool suspend, int companyId) {
            object[] results = this.Invoke("SuspendFTS", new object[] {
                        suspend,
                        companyId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SuspendFTSAsync(bool suspend, int companyId) {
            this.SuspendFTSAsync(suspend, companyId, null);
        }
        
        /// <remarks/>
        public void SuspendFTSAsync(bool suspend, int companyId, object userState) {
            if ((this.SuspendFTSOperationCompleted == null)) {
                this.SuspendFTSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuspendFTSOperationCompleted);
            }
            this.InvokeAsync("SuspendFTS", new object[] {
                        suspend,
                        companyId}, this.SuspendFTSOperationCompleted, userState);
        }
        
        private void OnSuspendFTSOperationCompleted(object arg) {
            if ((this.SuspendFTSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuspendFTSCompleted(this, new SuspendFTSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/EasyAttachmentSync/UpdateDefaultSearchIndexes", RequestNamespace="http://microarea.it/EasyAttachmentSync/", ResponseNamespace="http://microarea.it/EasyAttachmentSync/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateDefaultSearchIndexes(int companyId) {
            object[] results = this.Invoke("UpdateDefaultSearchIndexes", new object[] {
                        companyId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDefaultSearchIndexesAsync(int companyId) {
            this.UpdateDefaultSearchIndexesAsync(companyId, null);
        }
        
        /// <remarks/>
        public void UpdateDefaultSearchIndexesAsync(int companyId, object userState) {
            if ((this.UpdateDefaultSearchIndexesOperationCompleted == null)) {
                this.UpdateDefaultSearchIndexesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDefaultSearchIndexesOperationCompleted);
            }
            this.InvokeAsync("UpdateDefaultSearchIndexes", new object[] {
                        companyId}, this.UpdateDefaultSearchIndexesOperationCompleted, userState);
        }
        
        private void OnUpdateDefaultSearchIndexesOperationCompleted(object arg) {
            if ((this.UpdateDefaultSearchIndexesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDefaultSearchIndexesCompleted(this, new UpdateDefaultSearchIndexesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/EasyAttachmentSync/EnqueueAttachmentsToSend", RequestNamespace="http://microarea.it/EasyAttachmentSync/", ResponseNamespace="http://microarea.it/EasyAttachmentSync/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EnqueueAttachmentsToSend(int companyId, int[] attachmentIds, int loginId) {
            this.Invoke("EnqueueAttachmentsToSend", new object[] {
                        companyId,
                        attachmentIds,
                        loginId});
        }
        
        /// <remarks/>
        public void EnqueueAttachmentsToSendAsync(int companyId, int[] attachmentIds, int loginId) {
            this.EnqueueAttachmentsToSendAsync(companyId, attachmentIds, loginId, null);
        }
        
        /// <remarks/>
        public void EnqueueAttachmentsToSendAsync(int companyId, int[] attachmentIds, int loginId, object userState) {
            if ((this.EnqueueAttachmentsToSendOperationCompleted == null)) {
                this.EnqueueAttachmentsToSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnqueueAttachmentsToSendOperationCompleted);
            }
            this.InvokeAsync("EnqueueAttachmentsToSend", new object[] {
                        companyId,
                        attachmentIds,
                        loginId}, this.EnqueueAttachmentsToSendOperationCompleted, userState);
        }
        
        private void OnEnqueueAttachmentsToSendOperationCompleted(object arg) {
            if ((this.EnqueueAttachmentsToSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnqueueAttachmentsToSendCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/EasyAttachmentSync/UpdateSOSDocumentsStatus", RequestNamespace="http://microarea.it/EasyAttachmentSync/", ResponseNamespace="http://microarea.it/EasyAttachmentSync/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateSOSDocumentsStatus(int companyId, out string message) {
            object[] results = this.Invoke("UpdateSOSDocumentsStatus", new object[] {
                        companyId});
            message = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSOSDocumentsStatusAsync(int companyId) {
            this.UpdateSOSDocumentsStatusAsync(companyId, null);
        }
        
        /// <remarks/>
        public void UpdateSOSDocumentsStatusAsync(int companyId, object userState) {
            if ((this.UpdateSOSDocumentsStatusOperationCompleted == null)) {
                this.UpdateSOSDocumentsStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSOSDocumentsStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateSOSDocumentsStatus", new object[] {
                        companyId}, this.UpdateSOSDocumentsStatusOperationCompleted, userState);
        }
        
        private void OnUpdateSOSDocumentsStatusOperationCompleted(object arg) {
            if ((this.UpdateSOSDocumentsStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSOSDocumentsStatusCompleted(this, new UpdateSOSDocumentsStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/EasyAttachmentSync/UpdateFieldsValue", RequestNamespace="http://microarea.it/EasyAttachmentSync/", ResponseNamespace="http://microarea.it/EasyAttachmentSync/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateFieldsValue(string authenticationToken) {
            object[] results = this.Invoke("UpdateFieldsValue", new object[] {
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFieldsValueAsync(string authenticationToken) {
            this.UpdateFieldsValueAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void UpdateFieldsValueAsync(string authenticationToken, object userState) {
            if ((this.UpdateFieldsValueOperationCompleted == null)) {
                this.UpdateFieldsValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFieldsValueOperationCompleted);
            }
            this.InvokeAsync("UpdateFieldsValue", new object[] {
                        authenticationToken}, this.UpdateFieldsValueOperationCompleted, userState);
        }
        
        private void OnUpdateFieldsValueOperationCompleted(object arg) {
            if ((this.UpdateFieldsValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFieldsValueCompleted(this, new UpdateFieldsValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/EasyAttachmentSync/NewAttachmentById", RequestNamespace="http://microarea.it/EasyAttachmentSync/", ResponseNamespace="http://microarea.it/EasyAttachmentSync/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid NewAttachmentById(int attachmentId, int companyId, int workerId, string comments) {
            object[] results = this.Invoke("NewAttachmentById", new object[] {
                        attachmentId,
                        companyId,
                        workerId,
                        comments});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void NewAttachmentByIdAsync(int attachmentId, int companyId, int workerId, string comments) {
            this.NewAttachmentByIdAsync(attachmentId, companyId, workerId, comments, null);
        }
        
        /// <remarks/>
        public void NewAttachmentByIdAsync(int attachmentId, int companyId, int workerId, string comments, object userState) {
            if ((this.NewAttachmentByIdOperationCompleted == null)) {
                this.NewAttachmentByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewAttachmentByIdOperationCompleted);
            }
            this.InvokeAsync("NewAttachmentById", new object[] {
                        attachmentId,
                        companyId,
                        workerId,
                        comments}, this.NewAttachmentByIdOperationCompleted, userState);
        }
        
        private void OnNewAttachmentByIdOperationCompleted(object arg) {
            if ((this.NewAttachmentByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewAttachmentByIdCompleted(this, new NewAttachmentByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/EasyAttachmentSync/Approve", RequestNamespace="http://microarea.it/EasyAttachmentSync/", ResponseNamespace="http://microarea.it/EasyAttachmentSync/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Approve(int attachmentId, string requesterUserName, string approvalUserName, int approvalStatus, string approvalComments) {
            this.Invoke("Approve", new object[] {
                        attachmentId,
                        requesterUserName,
                        approvalUserName,
                        approvalStatus,
                        approvalComments});
        }
        
        /// <remarks/>
        public void ApproveAsync(int attachmentId, string requesterUserName, string approvalUserName, int approvalStatus, string approvalComments) {
            this.ApproveAsync(attachmentId, requesterUserName, approvalUserName, approvalStatus, approvalComments, null);
        }
        
        /// <remarks/>
        public void ApproveAsync(int attachmentId, string requesterUserName, string approvalUserName, int approvalStatus, string approvalComments, object userState) {
            if ((this.ApproveOperationCompleted == null)) {
                this.ApproveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApproveOperationCompleted);
            }
            this.InvokeAsync("Approve", new object[] {
                        attachmentId,
                        requesterUserName,
                        approvalUserName,
                        approvalStatus,
                        approvalComments}, this.ApproveOperationCompleted, userState);
        }
        
        private void OnApproveOperationCompleted(object arg) {
            if ((this.ApproveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApproveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/EasyAttachmentSync/GetDescription", RequestNamespace="http://microarea.it/EasyAttachmentSync/", ResponseNamespace="http://microarea.it/EasyAttachmentSync/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDescription(int attachmentId, string requesterUserName) {
            object[] results = this.Invoke("GetDescription", new object[] {
                        attachmentId,
                        requesterUserName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDescriptionAsync(int attachmentId, string requesterUserName) {
            this.GetDescriptionAsync(attachmentId, requesterUserName, null);
        }
        
        /// <remarks/>
        public void GetDescriptionAsync(int attachmentId, string requesterUserName, object userState) {
            if ((this.GetDescriptionOperationCompleted == null)) {
                this.GetDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetDescription", new object[] {
                        attachmentId,
                        requesterUserName}, this.GetDescriptionOperationCompleted, userState);
        }
        
        private void OnGetDescriptionOperationCompleted(object arg) {
            if ((this.GetDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDescriptionCompleted(this, new GetDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/EasyAttachmentSync/AddUser", RequestNamespace="http://microarea.it/EasyAttachmentSync/", ResponseNamespace="http://microarea.it/EasyAttachmentSync/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUser(int companyId, int workerId, string firstName, string lastName, string password) {
            this.Invoke("AddUser", new object[] {
                        companyId,
                        workerId,
                        firstName,
                        lastName,
                        password});
        }
        
        /// <remarks/>
        public void AddUserAsync(int companyId, int workerId, string firstName, string lastName, string password) {
            this.AddUserAsync(companyId, workerId, firstName, lastName, password, null);
        }
        
        /// <remarks/>
        public void AddUserAsync(int companyId, int workerId, string firstName, string lastName, string password, object userState) {
            if ((this.AddUserOperationCompleted == null)) {
                this.AddUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserOperationCompleted);
            }
            this.InvokeAsync("AddUser", new object[] {
                        companyId,
                        workerId,
                        firstName,
                        lastName,
                        password}, this.AddUserOperationCompleted, userState);
        }
        
        private void OnAddUserOperationCompleted(object arg) {
            if ((this.AddUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/EasyAttachmentSync/GetStatus", RequestNamespace="http://microarea.it/EasyAttachmentSync/", ResponseNamespace="http://microarea.it/EasyAttachmentSync/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStatus(int attachmentId, int workerId, int companyId) {
            object[] results = this.Invoke("GetStatus", new object[] {
                        attachmentId,
                        workerId,
                        companyId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatusAsync(int attachmentId, int workerId, int companyId) {
            this.GetStatusAsync(attachmentId, workerId, companyId, null);
        }
        
        /// <remarks/>
        public void GetStatusAsync(int attachmentId, int workerId, int companyId, object userState) {
            if ((this.GetStatusOperationCompleted == null)) {
                this.GetStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatusOperationCompleted);
            }
            this.InvokeAsync("GetStatus", new object[] {
                        attachmentId,
                        workerId,
                        companyId}, this.GetStatusOperationCompleted, userState);
        }
        
        private void OnGetStatusOperationCompleted(object arg) {
            if ((this.GetStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatusCompleted(this, new GetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/EasyAttachmentSync/Notify", RequestNamespace="http://microarea.it/EasyAttachmentSync/", ResponseNamespace="http://microarea.it/EasyAttachmentSync/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Notify(System.Guid workflowID, string username) {
            this.Invoke("Notify", new object[] {
                        workflowID,
                        username});
        }
        
        /// <remarks/>
        public void NotifyAsync(System.Guid workflowID, string username) {
            this.NotifyAsync(workflowID, username, null);
        }
        
        /// <remarks/>
        public void NotifyAsync(System.Guid workflowID, string username, object userState) {
            if ((this.NotifyOperationCompleted == null)) {
                this.NotifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyOperationCompleted);
            }
            this.InvokeAsync("Notify", new object[] {
                        workflowID,
                        username}, this.NotifyOperationCompleted, userState);
        }
        
        private void OnNotifyOperationCompleted(object arg) {
            if ((this.NotifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void InitCompletedEventHandler(object sender, InitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void IsAliveCompletedEventHandler(object sender, IsAliveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ClearCompletedEventHandler(object sender, ClearCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClearCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClearCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void IsFTSEnabledCompletedEventHandler(object sender, IsFTSEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsFTSEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsFTSEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void StopCompletedEventHandler(object sender, StopCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StopCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StopCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SuspendFTSCompletedEventHandler(object sender, SuspendFTSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuspendFTSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuspendFTSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateDefaultSearchIndexesCompletedEventHandler(object sender, UpdateDefaultSearchIndexesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDefaultSearchIndexesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDefaultSearchIndexesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void EnqueueAttachmentsToSendCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateSOSDocumentsStatusCompletedEventHandler(object sender, UpdateSOSDocumentsStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSOSDocumentsStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSOSDocumentsStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateFieldsValueCompletedEventHandler(object sender, UpdateFieldsValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFieldsValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFieldsValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void NewAttachmentByIdCompletedEventHandler(object sender, NewAttachmentByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewAttachmentByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewAttachmentByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ApproveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetDescriptionCompletedEventHandler(object sender, GetDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetStatusCompletedEventHandler(object sender, GetStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void NotifyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591