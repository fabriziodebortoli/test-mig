//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1008.
// 
#pragma warning disable 1591

namespace Microarea.TaskBuilderNet.TbHermesBL.tbDms
{


	/// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TbDMSSoap", Namespace="urn:Microarea.Web.Services")]
    public partial class TbDMS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private TBHeaderInfo headerInfoField;
        
        private System.Threading.SendOrPostCallback AttachFileInDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AttachFolderInDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AttachFromTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNewBarcodeValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback AttachPaperyBarcodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback AttachPaperyInDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunDocumentWithEAPanelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAttachmentTemporaryFilePathOperationCompleted;
        
        private System.Threading.SendOrPostCallback MassiveAttachUnattendedModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchAttachmentsForDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEasyAttachmentTempPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenDocumentRepositoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenCategoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenMassiveAttachOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenMonitorOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenSOSConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenAttachmentWebSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback AttachFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback AttachArchivedDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AttachFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback ArchiveFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ArchiveFolderOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TbDMS() {
            this.Url = global::Microarea.TaskBuilderNet.TbHermesBL.Properties.Settings.Default.Microarea_TaskBuilderNet_TbHermesBL_tbDms_TbDMS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public TBHeaderInfo HeaderInfo {
            get {
                return this.headerInfoField;
            }
            set {
                this.headerInfoField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AttachFileInDocumentCompletedEventHandler AttachFileInDocumentCompleted;
        
        /// <remarks/>
        public event AttachFolderInDocumentCompletedEventHandler AttachFolderInDocumentCompleted;
        
        /// <remarks/>
        public event AttachFromTableCompletedEventHandler AttachFromTableCompleted;
        
        /// <remarks/>
        public event GetNewBarcodeValueCompletedEventHandler GetNewBarcodeValueCompleted;
        
        /// <remarks/>
        public event AttachPaperyBarcodeCompletedEventHandler AttachPaperyBarcodeCompleted;
        
        /// <remarks/>
        public event AttachPaperyInDocumentCompletedEventHandler AttachPaperyInDocumentCompleted;
        
        /// <remarks/>
        public event RunDocumentWithEAPanelCompletedEventHandler RunDocumentWithEAPanelCompleted;
        
        /// <remarks/>
        public event GetAttachmentTemporaryFilePathCompletedEventHandler GetAttachmentTemporaryFilePathCompleted;
        
        /// <remarks/>
        public event MassiveAttachUnattendedModeCompletedEventHandler MassiveAttachUnattendedModeCompleted;
        
        /// <remarks/>
        public event SearchAttachmentsForDocumentCompletedEventHandler SearchAttachmentsForDocumentCompleted;
        
        /// <remarks/>
        public event GetEasyAttachmentTempPathCompletedEventHandler GetEasyAttachmentTempPathCompleted;
        
        /// <remarks/>
        public event OpenDocumentRepositoryCompletedEventHandler OpenDocumentRepositoryCompleted;
        
        /// <remarks/>
        public event OpenCategoriesCompletedEventHandler OpenCategoriesCompleted;
        
        /// <remarks/>
        public event OpenSettingsCompletedEventHandler OpenSettingsCompleted;
        
        /// <remarks/>
        public event OpenMassiveAttachCompletedEventHandler OpenMassiveAttachCompleted;
        
        /// <remarks/>
        public event OpenMonitorCompletedEventHandler OpenMonitorCompleted;
        
        /// <remarks/>
        public event OpenSOSConfigurationCompletedEventHandler OpenSOSConfigurationCompleted;
        
        /// <remarks/>
        public event OpenAttachmentWebSearchCompletedEventHandler OpenAttachmentWebSearchCompleted;
        
        /// <remarks/>
        public event AttachFileCompletedEventHandler AttachFileCompleted;
        
        /// <remarks/>
        public event AttachArchivedDocumentCompletedEventHandler AttachArchivedDocumentCompleted;
        
        /// <remarks/>
        public event AttachFolderCompletedEventHandler AttachFolderCompleted;
        
        /// <remarks/>
        public event ArchiveFileCompletedEventHandler ArchiveFileCompleted;
        
        /// <remarks/>
        public event ArchiveFolderCompletedEventHandler ArchiveFolderCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AttachFileInDocument", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.AttachFileInDocument")]
        public bool AttachFileInDocument([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFileInDocument", IsNullable=true)] string documentNamespace, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFileInDocument", IsNullable=true)] string documentKey, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFileInDocument", IsNullable=true)] string fileName, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFileInDocument", IsNullable=true)] string description, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFileInDocument", IsNullable=true)] ref string result) {
            object[] results = this.Invoke("AttachFileInDocument", new object[] {
                        documentNamespace,
                        documentKey,
                        fileName,
                        description,
                        result});
            result = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AttachFileInDocumentAsync(string documentNamespace, string documentKey, string fileName, string description, string result) {
            this.AttachFileInDocumentAsync(documentNamespace, documentKey, fileName, description, result, null);
        }
        
        /// <remarks/>
        public void AttachFileInDocumentAsync(string documentNamespace, string documentKey, string fileName, string description, string result, object userState) {
            if ((this.AttachFileInDocumentOperationCompleted == null)) {
                this.AttachFileInDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAttachFileInDocumentOperationCompleted);
            }
            this.InvokeAsync("AttachFileInDocument", new object[] {
                        documentNamespace,
                        documentKey,
                        fileName,
                        description,
                        result}, this.AttachFileInDocumentOperationCompleted, userState);
        }
        
        private void OnAttachFileInDocumentOperationCompleted(object arg) {
            if ((this.AttachFileInDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AttachFileInDocumentCompleted(this, new AttachFileInDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AttachFolderInDocument", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.AttachFolderInDocument")]
        public bool AttachFolderInDocument([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFolderInDocument", IsNullable=true)] string documentNamespace, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFolderInDocument", IsNullable=true)] string documentKey, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFolderInDocument", IsNullable=true)] string folder, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFolderInDocument", IsNullable=true)] ref string result) {
            object[] results = this.Invoke("AttachFolderInDocument", new object[] {
                        documentNamespace,
                        documentKey,
                        folder,
                        result});
            result = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AttachFolderInDocumentAsync(string documentNamespace, string documentKey, string folder, string result) {
            this.AttachFolderInDocumentAsync(documentNamespace, documentKey, folder, result, null);
        }
        
        /// <remarks/>
        public void AttachFolderInDocumentAsync(string documentNamespace, string documentKey, string folder, string result, object userState) {
            if ((this.AttachFolderInDocumentOperationCompleted == null)) {
                this.AttachFolderInDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAttachFolderInDocumentOperationCompleted);
            }
            this.InvokeAsync("AttachFolderInDocument", new object[] {
                        documentNamespace,
                        documentKey,
                        folder,
                        result}, this.AttachFolderInDocumentOperationCompleted, userState);
        }
        
        private void OnAttachFolderInDocumentOperationCompleted(object arg) {
            if ((this.AttachFolderInDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AttachFolderInDocumentCompleted(this, new AttachFolderInDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AttachFromTable", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.AttachFromTable")]
        public bool AttachFromTable([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFromTable", IsNullable=true)] string documentNamespace, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFromTable", IsNullable=true)] string documentKey, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFromTable", IsNullable=true)] ref string result) {
            object[] results = this.Invoke("AttachFromTable", new object[] {
                        documentNamespace,
                        documentKey,
                        result});
            result = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AttachFromTableAsync(string documentNamespace, string documentKey, string result) {
            this.AttachFromTableAsync(documentNamespace, documentKey, result, null);
        }
        
        /// <remarks/>
        public void AttachFromTableAsync(string documentNamespace, string documentKey, string result, object userState) {
            if ((this.AttachFromTableOperationCompleted == null)) {
                this.AttachFromTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAttachFromTableOperationCompleted);
            }
            this.InvokeAsync("AttachFromTable", new object[] {
                        documentNamespace,
                        documentKey,
                        result}, this.AttachFromTableOperationCompleted, userState);
        }
        
        private void OnAttachFromTableOperationCompleted(object arg) {
            if ((this.AttachFromTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AttachFromTableCompleted(this, new AttachFromTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetNewBarcodeValue", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.GetNewBarcodeValue", IsNullable=true)]
        public string GetNewBarcodeValue() {
            object[] results = this.Invoke("GetNewBarcodeValue", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNewBarcodeValueAsync() {
            this.GetNewBarcodeValueAsync(null);
        }
        
        /// <remarks/>
        public void GetNewBarcodeValueAsync(object userState) {
            if ((this.GetNewBarcodeValueOperationCompleted == null)) {
                this.GetNewBarcodeValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNewBarcodeValueOperationCompleted);
            }
            this.InvokeAsync("GetNewBarcodeValue", new object[0], this.GetNewBarcodeValueOperationCompleted, userState);
        }
        
        private void OnGetNewBarcodeValueOperationCompleted(object arg) {
            if ((this.GetNewBarcodeValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNewBarcodeValueCompleted(this, new GetNewBarcodeValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AttachPaperyBarcode", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.AttachPaperyBarcode")]
        public bool AttachPaperyBarcode([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachPaperyBarcode")] int documentHandle, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachPaperyBarcode", IsNullable=true)] string barcode) {
            object[] results = this.Invoke("AttachPaperyBarcode", new object[] {
                        documentHandle,
                        barcode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AttachPaperyBarcodeAsync(int documentHandle, string barcode) {
            this.AttachPaperyBarcodeAsync(documentHandle, barcode, null);
        }
        
        /// <remarks/>
        public void AttachPaperyBarcodeAsync(int documentHandle, string barcode, object userState) {
            if ((this.AttachPaperyBarcodeOperationCompleted == null)) {
                this.AttachPaperyBarcodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAttachPaperyBarcodeOperationCompleted);
            }
            this.InvokeAsync("AttachPaperyBarcode", new object[] {
                        documentHandle,
                        barcode}, this.AttachPaperyBarcodeOperationCompleted, userState);
        }
        
        private void OnAttachPaperyBarcodeOperationCompleted(object arg) {
            if ((this.AttachPaperyBarcodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AttachPaperyBarcodeCompleted(this, new AttachPaperyBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AttachPaperyInDocument", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.AttachPaperyInDocument")]
        public bool AttachPaperyInDocument([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachPaperyInDocument", IsNullable=true)] string documentNamespace, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachPaperyInDocument", IsNullable=true)] string documentKey, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachPaperyInDocument", IsNullable=true)] string barcode, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachPaperyInDocument", IsNullable=true)] string description, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachPaperyInDocument", IsNullable=true)] ref string result) {
            object[] results = this.Invoke("AttachPaperyInDocument", new object[] {
                        documentNamespace,
                        documentKey,
                        barcode,
                        description,
                        result});
            result = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AttachPaperyInDocumentAsync(string documentNamespace, string documentKey, string barcode, string description, string result) {
            this.AttachPaperyInDocumentAsync(documentNamespace, documentKey, barcode, description, result, null);
        }
        
        /// <remarks/>
        public void AttachPaperyInDocumentAsync(string documentNamespace, string documentKey, string barcode, string description, string result, object userState) {
            if ((this.AttachPaperyInDocumentOperationCompleted == null)) {
                this.AttachPaperyInDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAttachPaperyInDocumentOperationCompleted);
            }
            this.InvokeAsync("AttachPaperyInDocument", new object[] {
                        documentNamespace,
                        documentKey,
                        barcode,
                        description,
                        result}, this.AttachPaperyInDocumentOperationCompleted, userState);
        }
        
        private void OnAttachPaperyInDocumentOperationCompleted(object arg) {
            if ((this.AttachPaperyInDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AttachPaperyInDocumentCompleted(this, new AttachPaperyInDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#RunDocumentWithEAPanel", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.RunDocumentWithEAPanel")]
        public int RunDocumentWithEAPanel([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.RunDocumentWithEAPanel", IsNullable=true)] string documentNamespace, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.RunDocumentWithEAPanel", IsNullable=true)] string documentKey, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.RunDocumentWithEAPanel", IsNullable=true)] ref string result) {
            object[] results = this.Invoke("RunDocumentWithEAPanel", new object[] {
                        documentNamespace,
                        documentKey,
                        result});
            result = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RunDocumentWithEAPanelAsync(string documentNamespace, string documentKey, string result) {
            this.RunDocumentWithEAPanelAsync(documentNamespace, documentKey, result, null);
        }
        
        /// <remarks/>
        public void RunDocumentWithEAPanelAsync(string documentNamespace, string documentKey, string result, object userState) {
            if ((this.RunDocumentWithEAPanelOperationCompleted == null)) {
                this.RunDocumentWithEAPanelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunDocumentWithEAPanelOperationCompleted);
            }
            this.InvokeAsync("RunDocumentWithEAPanel", new object[] {
                        documentNamespace,
                        documentKey,
                        result}, this.RunDocumentWithEAPanelOperationCompleted, userState);
        }
        
        private void OnRunDocumentWithEAPanelOperationCompleted(object arg) {
            if ((this.RunDocumentWithEAPanelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunDocumentWithEAPanelCompleted(this, new RunDocumentWithEAPanelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetAttachmentTemporaryFilePath", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.GetAttachmentTemporaryFilePath", IsNullable=true)]
        public string GetAttachmentTemporaryFilePath([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.GetAttachmentTemporaryFilePath")] int attachmentID) {
            object[] results = this.Invoke("GetAttachmentTemporaryFilePath", new object[] {
                        attachmentID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAttachmentTemporaryFilePathAsync(int attachmentID) {
            this.GetAttachmentTemporaryFilePathAsync(attachmentID, null);
        }
        
        /// <remarks/>
        public void GetAttachmentTemporaryFilePathAsync(int attachmentID, object userState) {
            if ((this.GetAttachmentTemporaryFilePathOperationCompleted == null)) {
                this.GetAttachmentTemporaryFilePathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAttachmentTemporaryFilePathOperationCompleted);
            }
            this.InvokeAsync("GetAttachmentTemporaryFilePath", new object[] {
                        attachmentID}, this.GetAttachmentTemporaryFilePathOperationCompleted, userState);
        }
        
        private void OnGetAttachmentTemporaryFilePathOperationCompleted(object arg) {
            if ((this.GetAttachmentTemporaryFilePathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAttachmentTemporaryFilePathCompleted(this, new GetAttachmentTemporaryFilePathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#MassiveAttachUnattendedMode", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.MassiveAttachUnattendedMode")]
        public bool MassiveAttachUnattendedMode([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.MassiveAttachUnattendedMode", IsNullable=true)] string folder, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.MassiveAttachUnattendedMode")] bool splitFile, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.MassiveAttachUnattendedMode", IsNullable=true)] ref string result) {
            object[] results = this.Invoke("MassiveAttachUnattendedMode", new object[] {
                        folder,
                        splitFile,
                        result});
            result = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MassiveAttachUnattendedModeAsync(string folder, bool splitFile, string result) {
            this.MassiveAttachUnattendedModeAsync(folder, splitFile, result, null);
        }
        
        /// <remarks/>
        public void MassiveAttachUnattendedModeAsync(string folder, bool splitFile, string result, object userState) {
            if ((this.MassiveAttachUnattendedModeOperationCompleted == null)) {
                this.MassiveAttachUnattendedModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMassiveAttachUnattendedModeOperationCompleted);
            }
            this.InvokeAsync("MassiveAttachUnattendedMode", new object[] {
                        folder,
                        splitFile,
                        result}, this.MassiveAttachUnattendedModeOperationCompleted, userState);
        }
        
        private void OnMassiveAttachUnattendedModeOperationCompleted(object arg) {
            if ((this.MassiveAttachUnattendedModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MassiveAttachUnattendedModeCompleted(this, new MassiveAttachUnattendedModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#SearchAttachmentsForDocument", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("return", Namespace="urn:Microarea.Web.Services.SearchAttachmentsForDocument", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public int[] SearchAttachmentsForDocument([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.SearchAttachmentsForDocument", IsNullable=true)] string documentNamespace, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.SearchAttachmentsForDocument", IsNullable=true)] string documentKey, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.SearchAttachmentsForDocument", IsNullable=true)] string searchText, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.SearchAttachmentsForDocument")] int location, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.SearchAttachmentsForDocument", IsNullable=true)] string searchFields) {
            object[] results = this.Invoke("SearchAttachmentsForDocument", new object[] {
                        documentNamespace,
                        documentKey,
                        searchText,
                        location,
                        searchFields});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void SearchAttachmentsForDocumentAsync(string documentNamespace, string documentKey, string searchText, int location, string searchFields) {
            this.SearchAttachmentsForDocumentAsync(documentNamespace, documentKey, searchText, location, searchFields, null);
        }
        
        /// <remarks/>
        public void SearchAttachmentsForDocumentAsync(string documentNamespace, string documentKey, string searchText, int location, string searchFields, object userState) {
            if ((this.SearchAttachmentsForDocumentOperationCompleted == null)) {
                this.SearchAttachmentsForDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchAttachmentsForDocumentOperationCompleted);
            }
            this.InvokeAsync("SearchAttachmentsForDocument", new object[] {
                        documentNamespace,
                        documentKey,
                        searchText,
                        location,
                        searchFields}, this.SearchAttachmentsForDocumentOperationCompleted, userState);
        }
        
        private void OnSearchAttachmentsForDocumentOperationCompleted(object arg) {
            if ((this.SearchAttachmentsForDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchAttachmentsForDocumentCompleted(this, new SearchAttachmentsForDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetEasyAttachmentTempPath", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.GetEasyAttachmentTempPath", IsNullable=true)]
        public string GetEasyAttachmentTempPath() {
            object[] results = this.Invoke("GetEasyAttachmentTempPath", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEasyAttachmentTempPathAsync() {
            this.GetEasyAttachmentTempPathAsync(null);
        }
        
        /// <remarks/>
        public void GetEasyAttachmentTempPathAsync(object userState) {
            if ((this.GetEasyAttachmentTempPathOperationCompleted == null)) {
                this.GetEasyAttachmentTempPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEasyAttachmentTempPathOperationCompleted);
            }
            this.InvokeAsync("GetEasyAttachmentTempPath", new object[0], this.GetEasyAttachmentTempPathOperationCompleted, userState);
        }
        
        private void OnGetEasyAttachmentTempPathOperationCompleted(object arg) {
            if ((this.GetEasyAttachmentTempPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEasyAttachmentTempPathCompleted(this, new GetEasyAttachmentTempPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#OpenDocumentRepository", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.OpenDocumentRepository")]
        public bool OpenDocumentRepository() {
            object[] results = this.Invoke("OpenDocumentRepository", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void OpenDocumentRepositoryAsync() {
            this.OpenDocumentRepositoryAsync(null);
        }
        
        /// <remarks/>
        public void OpenDocumentRepositoryAsync(object userState) {
            if ((this.OpenDocumentRepositoryOperationCompleted == null)) {
                this.OpenDocumentRepositoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenDocumentRepositoryOperationCompleted);
            }
            this.InvokeAsync("OpenDocumentRepository", new object[0], this.OpenDocumentRepositoryOperationCompleted, userState);
        }
        
        private void OnOpenDocumentRepositoryOperationCompleted(object arg) {
            if ((this.OpenDocumentRepositoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenDocumentRepositoryCompleted(this, new OpenDocumentRepositoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#OpenCategories", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.OpenCategories")]
        public bool OpenCategories() {
            object[] results = this.Invoke("OpenCategories", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void OpenCategoriesAsync() {
            this.OpenCategoriesAsync(null);
        }
        
        /// <remarks/>
        public void OpenCategoriesAsync(object userState) {
            if ((this.OpenCategoriesOperationCompleted == null)) {
                this.OpenCategoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenCategoriesOperationCompleted);
            }
            this.InvokeAsync("OpenCategories", new object[0], this.OpenCategoriesOperationCompleted, userState);
        }
        
        private void OnOpenCategoriesOperationCompleted(object arg) {
            if ((this.OpenCategoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenCategoriesCompleted(this, new OpenCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#OpenSettings", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.OpenSettings")]
        public bool OpenSettings() {
            object[] results = this.Invoke("OpenSettings", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void OpenSettingsAsync() {
            this.OpenSettingsAsync(null);
        }
        
        /// <remarks/>
        public void OpenSettingsAsync(object userState) {
            if ((this.OpenSettingsOperationCompleted == null)) {
                this.OpenSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenSettingsOperationCompleted);
            }
            this.InvokeAsync("OpenSettings", new object[0], this.OpenSettingsOperationCompleted, userState);
        }
        
        private void OnOpenSettingsOperationCompleted(object arg) {
            if ((this.OpenSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenSettingsCompleted(this, new OpenSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#OpenMassiveAttach", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.OpenMassiveAttach")]
        public bool OpenMassiveAttach() {
            object[] results = this.Invoke("OpenMassiveAttach", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void OpenMassiveAttachAsync() {
            this.OpenMassiveAttachAsync(null);
        }
        
        /// <remarks/>
        public void OpenMassiveAttachAsync(object userState) {
            if ((this.OpenMassiveAttachOperationCompleted == null)) {
                this.OpenMassiveAttachOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenMassiveAttachOperationCompleted);
            }
            this.InvokeAsync("OpenMassiveAttach", new object[0], this.OpenMassiveAttachOperationCompleted, userState);
        }
        
        private void OnOpenMassiveAttachOperationCompleted(object arg) {
            if ((this.OpenMassiveAttachCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenMassiveAttachCompleted(this, new OpenMassiveAttachCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#OpenMonitor", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.OpenMonitor")]
        public bool OpenMonitor() {
            object[] results = this.Invoke("OpenMonitor", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void OpenMonitorAsync() {
            this.OpenMonitorAsync(null);
        }
        
        /// <remarks/>
        public void OpenMonitorAsync(object userState) {
            if ((this.OpenMonitorOperationCompleted == null)) {
                this.OpenMonitorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenMonitorOperationCompleted);
            }
            this.InvokeAsync("OpenMonitor", new object[0], this.OpenMonitorOperationCompleted, userState);
        }
        
        private void OnOpenMonitorOperationCompleted(object arg) {
            if ((this.OpenMonitorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenMonitorCompleted(this, new OpenMonitorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#OpenSOSConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.OpenSOSConfiguration")]
        public bool OpenSOSConfiguration() {
            object[] results = this.Invoke("OpenSOSConfiguration", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void OpenSOSConfigurationAsync() {
            this.OpenSOSConfigurationAsync(null);
        }
        
        /// <remarks/>
        public void OpenSOSConfigurationAsync(object userState) {
            if ((this.OpenSOSConfigurationOperationCompleted == null)) {
                this.OpenSOSConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenSOSConfigurationOperationCompleted);
            }
            this.InvokeAsync("OpenSOSConfiguration", new object[0], this.OpenSOSConfigurationOperationCompleted, userState);
        }
        
        private void OnOpenSOSConfigurationOperationCompleted(object arg) {
            if ((this.OpenSOSConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenSOSConfigurationCompleted(this, new OpenSOSConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#OpenAttachmentWebSearch", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        public void OpenAttachmentWebSearch() {
            this.Invoke("OpenAttachmentWebSearch", new object[0]);
        }
        
        /// <remarks/>
        public void OpenAttachmentWebSearchAsync() {
            this.OpenAttachmentWebSearchAsync(null);
        }
        
        /// <remarks/>
        public void OpenAttachmentWebSearchAsync(object userState) {
            if ((this.OpenAttachmentWebSearchOperationCompleted == null)) {
                this.OpenAttachmentWebSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenAttachmentWebSearchOperationCompleted);
            }
            this.InvokeAsync("OpenAttachmentWebSearch", new object[0], this.OpenAttachmentWebSearchOperationCompleted, userState);
        }
        
        private void OnOpenAttachmentWebSearchOperationCompleted(object arg) {
            if ((this.OpenAttachmentWebSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenAttachmentWebSearchCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AttachFile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.AttachFile")]
        public bool AttachFile([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFile", IsNullable=true)] string fileName, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFile", IsNullable=true)] string description, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFile")] int documentHandle, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFile", IsNullable=true)] ref string result) {
            object[] results = this.Invoke("AttachFile", new object[] {
                        fileName,
                        description,
                        documentHandle,
                        result});
            result = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AttachFileAsync(string fileName, string description, int documentHandle, string result) {
            this.AttachFileAsync(fileName, description, documentHandle, result, null);
        }
        
        /// <remarks/>
        public void AttachFileAsync(string fileName, string description, int documentHandle, string result, object userState) {
            if ((this.AttachFileOperationCompleted == null)) {
                this.AttachFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAttachFileOperationCompleted);
            }
            this.InvokeAsync("AttachFile", new object[] {
                        fileName,
                        description,
                        documentHandle,
                        result}, this.AttachFileOperationCompleted, userState);
        }
        
        private void OnAttachFileOperationCompleted(object arg) {
            if ((this.AttachFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AttachFileCompleted(this, new AttachFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AttachArchivedDocument", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.AttachArchivedDocument")]
        public bool AttachArchivedDocument([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachArchivedDocument")] int archivedDocId, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachArchivedDocument")] int documentHandle, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachArchivedDocument", IsNullable=true)] ref string result) {
            object[] results = this.Invoke("AttachArchivedDocument", new object[] {
                        archivedDocId,
                        documentHandle,
                        result});
            result = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AttachArchivedDocumentAsync(int archivedDocId, int documentHandle, string result) {
            this.AttachArchivedDocumentAsync(archivedDocId, documentHandle, result, null);
        }
        
        /// <remarks/>
        public void AttachArchivedDocumentAsync(int archivedDocId, int documentHandle, string result, object userState) {
            if ((this.AttachArchivedDocumentOperationCompleted == null)) {
                this.AttachArchivedDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAttachArchivedDocumentOperationCompleted);
            }
            this.InvokeAsync("AttachArchivedDocument", new object[] {
                        archivedDocId,
                        documentHandle,
                        result}, this.AttachArchivedDocumentOperationCompleted, userState);
        }
        
        private void OnAttachArchivedDocumentOperationCompleted(object arg) {
            if ((this.AttachArchivedDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AttachArchivedDocumentCompleted(this, new AttachArchivedDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AttachFolder", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.AttachFolder")]
        public bool AttachFolder([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFolder", IsNullable=true)] string folder, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFolder")] int documentHandle, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.AttachFolder", IsNullable=true)] ref string result) {
            object[] results = this.Invoke("AttachFolder", new object[] {
                        folder,
                        documentHandle,
                        result});
            result = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AttachFolderAsync(string folder, int documentHandle, string result) {
            this.AttachFolderAsync(folder, documentHandle, result, null);
        }
        
        /// <remarks/>
        public void AttachFolderAsync(string folder, int documentHandle, string result, object userState) {
            if ((this.AttachFolderOperationCompleted == null)) {
                this.AttachFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAttachFolderOperationCompleted);
            }
            this.InvokeAsync("AttachFolder", new object[] {
                        folder,
                        documentHandle,
                        result}, this.AttachFolderOperationCompleted, userState);
        }
        
        private void OnAttachFolderOperationCompleted(object arg) {
            if ((this.AttachFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AttachFolderCompleted(this, new AttachFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ArchiveFile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.ArchiveFile")]
        public bool ArchiveFile([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.ArchiveFile", IsNullable=true)] string fileName, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.ArchiveFile", IsNullable=true)] string description, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.ArchiveFile", IsNullable=true)] ref string result) {
            object[] results = this.Invoke("ArchiveFile", new object[] {
                        fileName,
                        description,
                        result});
            result = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ArchiveFileAsync(string fileName, string description, string result) {
            this.ArchiveFileAsync(fileName, description, result, null);
        }
        
        /// <remarks/>
        public void ArchiveFileAsync(string fileName, string description, string result, object userState) {
            if ((this.ArchiveFileOperationCompleted == null)) {
                this.ArchiveFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnArchiveFileOperationCompleted);
            }
            this.InvokeAsync("ArchiveFile", new object[] {
                        fileName,
                        description,
                        result}, this.ArchiveFileOperationCompleted, userState);
        }
        
        private void OnArchiveFileOperationCompleted(object arg) {
            if ((this.ArchiveFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ArchiveFileCompleted(this, new ArchiveFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ArchiveFolder", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.ArchiveFolder")]
        public bool ArchiveFolder([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.ArchiveFolder", IsNullable=true)] string folder, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.ArchiveFolder", IsNullable=true)] ref string result) {
            object[] results = this.Invoke("ArchiveFolder", new object[] {
                        folder,
                        result});
            result = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ArchiveFolderAsync(string folder, string result) {
            this.ArchiveFolderAsync(folder, result, null);
        }
        
        /// <remarks/>
        public void ArchiveFolderAsync(string folder, string result, object userState) {
            if ((this.ArchiveFolderOperationCompleted == null)) {
                this.ArchiveFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnArchiveFolderOperationCompleted);
            }
            this.InvokeAsync("ArchiveFolder", new object[] {
                        folder,
                        result}, this.ArchiveFolderOperationCompleted, userState);
        }
        
        private void OnArchiveFolderOperationCompleted(object arg) {
            if ((this.ArchiveFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ArchiveFolderCompleted(this, new ArchiveFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:Microarea.Web.Services")]
    [System.Xml.Serialization.XmlRootAttribute("HeaderInfo", Namespace="urn:Microarea.Web.Services", IsNullable=true)]
    public partial class TBHeaderInfo : System.Web.Services.Protocols.SoapHeader {
        
        private string authTokenField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AuthToken {
            get {
                return this.authTokenField;
            }
            set {
                this.authTokenField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AttachFileInDocumentCompletedEventHandler(object sender, AttachFileInDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AttachFileInDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AttachFileInDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AttachFolderInDocumentCompletedEventHandler(object sender, AttachFolderInDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AttachFolderInDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AttachFolderInDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AttachFromTableCompletedEventHandler(object sender, AttachFromTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AttachFromTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AttachFromTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetNewBarcodeValueCompletedEventHandler(object sender, GetNewBarcodeValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNewBarcodeValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNewBarcodeValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AttachPaperyBarcodeCompletedEventHandler(object sender, AttachPaperyBarcodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AttachPaperyBarcodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AttachPaperyBarcodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AttachPaperyInDocumentCompletedEventHandler(object sender, AttachPaperyInDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AttachPaperyInDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AttachPaperyInDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RunDocumentWithEAPanelCompletedEventHandler(object sender, RunDocumentWithEAPanelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunDocumentWithEAPanelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunDocumentWithEAPanelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAttachmentTemporaryFilePathCompletedEventHandler(object sender, GetAttachmentTemporaryFilePathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAttachmentTemporaryFilePathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAttachmentTemporaryFilePathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void MassiveAttachUnattendedModeCompletedEventHandler(object sender, MassiveAttachUnattendedModeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MassiveAttachUnattendedModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MassiveAttachUnattendedModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SearchAttachmentsForDocumentCompletedEventHandler(object sender, SearchAttachmentsForDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchAttachmentsForDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchAttachmentsForDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEasyAttachmentTempPathCompletedEventHandler(object sender, GetEasyAttachmentTempPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEasyAttachmentTempPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEasyAttachmentTempPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void OpenDocumentRepositoryCompletedEventHandler(object sender, OpenDocumentRepositoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenDocumentRepositoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenDocumentRepositoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void OpenCategoriesCompletedEventHandler(object sender, OpenCategoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void OpenSettingsCompletedEventHandler(object sender, OpenSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void OpenMassiveAttachCompletedEventHandler(object sender, OpenMassiveAttachCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenMassiveAttachCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenMassiveAttachCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void OpenMonitorCompletedEventHandler(object sender, OpenMonitorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenMonitorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenMonitorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void OpenSOSConfigurationCompletedEventHandler(object sender, OpenSOSConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenSOSConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenSOSConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void OpenAttachmentWebSearchCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AttachFileCompletedEventHandler(object sender, AttachFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AttachFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AttachFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AttachArchivedDocumentCompletedEventHandler(object sender, AttachArchivedDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AttachArchivedDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AttachArchivedDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AttachFolderCompletedEventHandler(object sender, AttachFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AttachFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AttachFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ArchiveFileCompletedEventHandler(object sender, ArchiveFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ArchiveFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ArchiveFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ArchiveFolderCompletedEventHandler(object sender, ArchiveFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ArchiveFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ArchiveFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591