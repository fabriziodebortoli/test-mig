//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3082.
// 
#pragma warning disable 1591

namespace Microarea.TaskBuilderNet.Core.WebServicesWrapper.easylook
{


	/// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EasyLookServiceSoap", Namespace="http://tempuri.org/")]
    public partial class EasyLookService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback XmlExecuteReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback XmlGetParametersOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public EasyLookService() {
            this.Url = global::Microarea.TaskBuilderNet.Core.Properties.Settings.Default.Microarea_TaskBuilderNet_Core_easylook_EasyLookService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event XmlExecuteReportCompletedEventHandler XmlExecuteReportCompleted;
        
        /// <remarks/>
        public event XmlGetParametersCompletedEventHandler XmlGetParametersCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/XmlExecuteReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] XmlExecuteReport(string authenticationToken, string parameters, System.DateTime applicationDate, string impersonatedUser, bool useApproximation) {
            object[] results = this.Invoke("XmlExecuteReport", new object[] {
                        authenticationToken,
                        parameters,
                        applicationDate,
                        impersonatedUser,
                        useApproximation});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void XmlExecuteReportAsync(string authenticationToken, string parameters, System.DateTime applicationDate, string impersonatedUser, bool useApproximation) {
            this.XmlExecuteReportAsync(authenticationToken, parameters, applicationDate, impersonatedUser, useApproximation, null);
        }
        
        /// <remarks/>
        public void XmlExecuteReportAsync(string authenticationToken, string parameters, System.DateTime applicationDate, string impersonatedUser, bool useApproximation, object userState) {
            if ((this.XmlExecuteReportOperationCompleted == null)) {
                this.XmlExecuteReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnXmlExecuteReportOperationCompleted);
            }
            this.InvokeAsync("XmlExecuteReport", new object[] {
                        authenticationToken,
                        parameters,
                        applicationDate,
                        impersonatedUser,
                        useApproximation}, this.XmlExecuteReportOperationCompleted, userState);
        }
        
        private void OnXmlExecuteReportOperationCompleted(object arg) {
            if ((this.XmlExecuteReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.XmlExecuteReportCompleted(this, new XmlExecuteReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/XmlGetParameters", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string XmlGetParameters(string authenticationToken, string parameters, System.DateTime applicationDate, string impersonatedUser, bool useApproximation) {
            object[] results = this.Invoke("XmlGetParameters", new object[] {
                        authenticationToken,
                        parameters,
                        applicationDate,
                        impersonatedUser,
                        useApproximation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void XmlGetParametersAsync(string authenticationToken, string parameters, System.DateTime applicationDate, string impersonatedUser, bool useApproximation) {
            this.XmlGetParametersAsync(authenticationToken, parameters, applicationDate, impersonatedUser, useApproximation, null);
        }
        
        /// <remarks/>
        public void XmlGetParametersAsync(string authenticationToken, string parameters, System.DateTime applicationDate, string impersonatedUser, bool useApproximation, object userState) {
            if ((this.XmlGetParametersOperationCompleted == null)) {
                this.XmlGetParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnXmlGetParametersOperationCompleted);
            }
            this.InvokeAsync("XmlGetParameters", new object[] {
                        authenticationToken,
                        parameters,
                        applicationDate,
                        impersonatedUser,
                        useApproximation}, this.XmlGetParametersOperationCompleted, userState);
        }
        
        private void OnXmlGetParametersOperationCompleted(object arg) {
            if ((this.XmlGetParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.XmlGetParametersCompleted(this, new XmlGetParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void XmlExecuteReportCompletedEventHandler(object sender, XmlExecuteReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class XmlExecuteReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal XmlExecuteReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void XmlGetParametersCompletedEventHandler(object sender, XmlGetParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class XmlGetParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal XmlGetParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591