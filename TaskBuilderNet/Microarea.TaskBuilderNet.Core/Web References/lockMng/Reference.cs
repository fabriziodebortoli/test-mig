//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Microarea.TaskBuilderNet.Core.lockMng
{


	/// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MicroareaLockManagerSoap", Namespace="http://microarea.it/LockManager/")]
    public partial class MicroareaLockManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback InitOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitLockOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLockSessionIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAliveOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLockInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLockEntriesAttOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompanyDBAndTableLocksListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocksListOperationCompleted;
        
        private System.Threading.SendOrPostCallback LockRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback LockRecordExOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsRecordLockedOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsCurrentLockedOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsMyLockOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockAllContextOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockAllForCurrentConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockAllForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockAllForCompanyDBNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockAllForCompanyDBNameAndUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockAllForCompanyDBNameAndTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockAllForCompanyDBNameAndTableAndUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockCompanyDBNameAndTableAndLockOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUnusedLocksOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MicroareaLockManager() {
            this.Url = global::Microarea.TaskBuilderNet.Core.Properties.Settings.Default.Microarea_TaskBuilderNet_Core_lockMng_MicroareaLockManager;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InitCompletedEventHandler InitCompleted;
        
        /// <remarks/>
        public event InitLockCompletedEventHandler InitLockCompleted;
        
        /// <remarks/>
        public event GetLockSessionIDCompletedEventHandler GetLockSessionIDCompleted;
        
        /// <remarks/>
        public event IsAliveCompletedEventHandler IsAliveCompleted;
        
        /// <remarks/>
        public event GetLockInfoCompletedEventHandler GetLockInfoCompleted;
        
        /// <remarks/>
        public event GetLockEntriesAttCompletedEventHandler GetLockEntriesAttCompleted;
        
        /// <remarks/>
        public event GetCompanyDBAndTableLocksListCompletedEventHandler GetCompanyDBAndTableLocksListCompleted;
        
        /// <remarks/>
        public event GetLocksListCompletedEventHandler GetLocksListCompleted;
        
        /// <remarks/>
        public event LockRecordCompletedEventHandler LockRecordCompleted;
        
        /// <remarks/>
        public event LockRecordExCompletedEventHandler LockRecordExCompleted;
        
        /// <remarks/>
        public event IsRecordLockedCompletedEventHandler IsRecordLockedCompleted;
        
        /// <remarks/>
        public event IsCurrentLockedCompletedEventHandler IsCurrentLockedCompleted;
        
        /// <remarks/>
        public event IsMyLockCompletedEventHandler IsMyLockCompleted;
        
        /// <remarks/>
        public event UnlockRecordCompletedEventHandler UnlockRecordCompleted;
        
        /// <remarks/>
        public event UnlockAllContextCompletedEventHandler UnlockAllContextCompleted;
        
        /// <remarks/>
        public event UnlockAllCompletedEventHandler UnlockAllCompleted;
        
        /// <remarks/>
        public event UnlockAllForCurrentConnectionCompletedEventHandler UnlockAllForCurrentConnectionCompleted;
        
        /// <remarks/>
        public event UnlockAllForUserCompletedEventHandler UnlockAllForUserCompleted;
        
        /// <remarks/>
        public event UnlockAllForCompanyDBNameCompletedEventHandler UnlockAllForCompanyDBNameCompleted;
        
        /// <remarks/>
        public event UnlockAllForCompanyDBNameAndUserCompletedEventHandler UnlockAllForCompanyDBNameAndUserCompleted;
        
        /// <remarks/>
        public event UnlockAllForCompanyDBNameAndTableCompletedEventHandler UnlockAllForCompanyDBNameAndTableCompleted;
        
        /// <remarks/>
        public event UnlockAllForCompanyDBNameAndTableAndUserCompletedEventHandler UnlockAllForCompanyDBNameAndTableAndUserCompleted;
        
        /// <remarks/>
        public event UnlockCompanyDBNameAndTableAndLockCompletedEventHandler UnlockCompanyDBNameAndTableAndLockCompleted;
        
        /// <remarks/>
        public event RemoveUnusedLocksCompletedEventHandler RemoveUnusedLocksCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/Init", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Init(string authenticationToken) {
            this.Invoke("Init", new object[] {
                        authenticationToken});
        }
        
        /// <remarks/>
        public void InitAsync(string authenticationToken) {
            this.InitAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void InitAsync(string authenticationToken, object userState) {
            if ((this.InitOperationCompleted == null)) {
                this.InitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitOperationCompleted);
            }
            this.InvokeAsync("Init", new object[] {
                        authenticationToken}, this.InitOperationCompleted, userState);
        }
        
        private void OnInitOperationCompleted(object arg) {
            if ((this.InitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/InitLock", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InitLock(string companyDBName, string authenticationToken) {
            object[] results = this.Invoke("InitLock", new object[] {
                        companyDBName,
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InitLockAsync(string companyDBName, string authenticationToken) {
            this.InitLockAsync(companyDBName, authenticationToken, null);
        }
        
        /// <remarks/>
        public void InitLockAsync(string companyDBName, string authenticationToken, object userState) {
            if ((this.InitLockOperationCompleted == null)) {
                this.InitLockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitLockOperationCompleted);
            }
            this.InvokeAsync("InitLock", new object[] {
                        companyDBName,
                        authenticationToken}, this.InitLockOperationCompleted, userState);
        }
        
        private void OnInitLockOperationCompleted(object arg) {
            if ((this.InitLockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitLockCompleted(this, new InitLockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/GetLockSessionID", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLockSessionID() {
            object[] results = this.Invoke("GetLockSessionID", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLockSessionIDAsync() {
            this.GetLockSessionIDAsync(null);
        }
        
        /// <remarks/>
        public void GetLockSessionIDAsync(object userState) {
            if ((this.GetLockSessionIDOperationCompleted == null)) {
                this.GetLockSessionIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLockSessionIDOperationCompleted);
            }
            this.InvokeAsync("GetLockSessionID", new object[0], this.GetLockSessionIDOperationCompleted, userState);
        }
        
        private void OnGetLockSessionIDOperationCompleted(object arg) {
            if ((this.GetLockSessionIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLockSessionIDCompleted(this, new GetLockSessionIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/IsAlive", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsAlive() {
            object[] results = this.Invoke("IsAlive", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsAliveAsync() {
            this.IsAliveAsync(null);
        }
        
        /// <remarks/>
        public void IsAliveAsync(object userState) {
            if ((this.IsAliveOperationCompleted == null)) {
                this.IsAliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAliveOperationCompleted);
            }
            this.InvokeAsync("IsAlive", new object[0], this.IsAliveOperationCompleted, userState);
        }
        
        private void OnIsAliveOperationCompleted(object arg) {
            if ((this.IsAliveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAliveCompleted(this, new IsAliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/GetLockInfo", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetLockInfo(string companyDBName, string lockKey, string tableName, out string user, out System.DateTime lockTime, out string processName) {
            object[] results = this.Invoke("GetLockInfo", new object[] {
                        companyDBName,
                        lockKey,
                        tableName});
            user = ((string)(results[1]));
            lockTime = ((System.DateTime)(results[2]));
            processName = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetLockInfoAsync(string companyDBName, string lockKey, string tableName) {
            this.GetLockInfoAsync(companyDBName, lockKey, tableName, null);
        }
        
        /// <remarks/>
        public void GetLockInfoAsync(string companyDBName, string lockKey, string tableName, object userState) {
            if ((this.GetLockInfoOperationCompleted == null)) {
                this.GetLockInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLockInfoOperationCompleted);
            }
            this.InvokeAsync("GetLockInfo", new object[] {
                        companyDBName,
                        lockKey,
                        tableName}, this.GetLockInfoOperationCompleted, userState);
        }
        
        private void OnGetLockInfoOperationCompleted(object arg) {
            if ((this.GetLockInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLockInfoCompleted(this, new GetLockInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/GetLockEntriesAtt", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLockEntriesAtt() {
            object[] results = this.Invoke("GetLockEntriesAtt", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLockEntriesAttAsync() {
            this.GetLockEntriesAttAsync(null);
        }
        
        /// <remarks/>
        public void GetLockEntriesAttAsync(object userState) {
            if ((this.GetLockEntriesAttOperationCompleted == null)) {
                this.GetLockEntriesAttOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLockEntriesAttOperationCompleted);
            }
            this.InvokeAsync("GetLockEntriesAtt", new object[0], this.GetLockEntriesAttOperationCompleted, userState);
        }
        
        private void OnGetLockEntriesAttOperationCompleted(object arg) {
            if ((this.GetLockEntriesAttCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLockEntriesAttCompleted(this, new GetLockEntriesAttCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/GetCompanyDBAndTableLocksList", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetCompanyDBAndTableLocksList() {
            this.Invoke("GetCompanyDBAndTableLocksList", new object[0]);
        }
        
        /// <remarks/>
        public void GetCompanyDBAndTableLocksListAsync() {
            this.GetCompanyDBAndTableLocksListAsync(null);
        }
        
        /// <remarks/>
        public void GetCompanyDBAndTableLocksListAsync(object userState) {
            if ((this.GetCompanyDBAndTableLocksListOperationCompleted == null)) {
                this.GetCompanyDBAndTableLocksListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompanyDBAndTableLocksListOperationCompleted);
            }
            this.InvokeAsync("GetCompanyDBAndTableLocksList", new object[0], this.GetCompanyDBAndTableLocksListOperationCompleted, userState);
        }
        
        private void OnGetCompanyDBAndTableLocksListOperationCompleted(object arg) {
            if ((this.GetCompanyDBAndTableLocksListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompanyDBAndTableLocksListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/GetLocksList", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetLocksList(string companyDBName, string tableName) {
            this.Invoke("GetLocksList", new object[] {
                        companyDBName,
                        tableName});
        }
        
        /// <remarks/>
        public void GetLocksListAsync(string companyDBName, string tableName) {
            this.GetLocksListAsync(companyDBName, tableName, null);
        }
        
        /// <remarks/>
        public void GetLocksListAsync(string companyDBName, string tableName, object userState) {
            if ((this.GetLocksListOperationCompleted == null)) {
                this.GetLocksListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocksListOperationCompleted);
            }
            this.InvokeAsync("GetLocksList", new object[] {
                        companyDBName,
                        tableName}, this.GetLocksListOperationCompleted, userState);
        }
        
        private void OnGetLocksListOperationCompleted(object arg) {
            if ((this.GetLocksListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocksListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/LockRecord", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LockRecord(string companyDBName, string authenticationToken, string userName, string tableName, string lockKey, string address, string processName) {
            object[] results = this.Invoke("LockRecord", new object[] {
                        companyDBName,
                        authenticationToken,
                        userName,
                        tableName,
                        lockKey,
                        address,
                        processName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LockRecordAsync(string companyDBName, string authenticationToken, string userName, string tableName, string lockKey, string address, string processName) {
            this.LockRecordAsync(companyDBName, authenticationToken, userName, tableName, lockKey, address, processName, null);
        }
        
        /// <remarks/>
        public void LockRecordAsync(string companyDBName, string authenticationToken, string userName, string tableName, string lockKey, string address, string processName, object userState) {
            if ((this.LockRecordOperationCompleted == null)) {
                this.LockRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLockRecordOperationCompleted);
            }
            this.InvokeAsync("LockRecord", new object[] {
                        companyDBName,
                        authenticationToken,
                        userName,
                        tableName,
                        lockKey,
                        address,
                        processName}, this.LockRecordOperationCompleted, userState);
        }
        
        private void OnLockRecordOperationCompleted(object arg) {
            if ((this.LockRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LockRecordCompleted(this, new LockRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/LockRecordEx", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LockRecordEx(string companyDBName, string authenticationToken, string userName, string tableName, string lockKey, string address, string processName, out string lockUser, out string lockApp) {
            object[] results = this.Invoke("LockRecordEx", new object[] {
                        companyDBName,
                        authenticationToken,
                        userName,
                        tableName,
                        lockKey,
                        address,
                        processName});
            lockUser = ((string)(results[1]));
            lockApp = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LockRecordExAsync(string companyDBName, string authenticationToken, string userName, string tableName, string lockKey, string address, string processName) {
            this.LockRecordExAsync(companyDBName, authenticationToken, userName, tableName, lockKey, address, processName, null);
        }
        
        /// <remarks/>
        public void LockRecordExAsync(string companyDBName, string authenticationToken, string userName, string tableName, string lockKey, string address, string processName, object userState) {
            if ((this.LockRecordExOperationCompleted == null)) {
                this.LockRecordExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLockRecordExOperationCompleted);
            }
            this.InvokeAsync("LockRecordEx", new object[] {
                        companyDBName,
                        authenticationToken,
                        userName,
                        tableName,
                        lockKey,
                        address,
                        processName}, this.LockRecordExOperationCompleted, userState);
        }
        
        private void OnLockRecordExOperationCompleted(object arg) {
            if ((this.LockRecordExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LockRecordExCompleted(this, new LockRecordExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/IsRecordLocked", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsRecordLocked(string companyDBName, string tableName, string lockKey) {
            object[] results = this.Invoke("IsRecordLocked", new object[] {
                        companyDBName,
                        tableName,
                        lockKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsRecordLockedAsync(string companyDBName, string tableName, string lockKey) {
            this.IsRecordLockedAsync(companyDBName, tableName, lockKey, null);
        }
        
        /// <remarks/>
        public void IsRecordLockedAsync(string companyDBName, string tableName, string lockKey, object userState) {
            if ((this.IsRecordLockedOperationCompleted == null)) {
                this.IsRecordLockedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsRecordLockedOperationCompleted);
            }
            this.InvokeAsync("IsRecordLocked", new object[] {
                        companyDBName,
                        tableName,
                        lockKey}, this.IsRecordLockedOperationCompleted, userState);
        }
        
        private void OnIsRecordLockedOperationCompleted(object arg) {
            if ((this.IsRecordLockedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsRecordLockedCompleted(this, new IsRecordLockedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/IsCurrentLocked", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsCurrentLocked(string companyDBName, string tableName, string lockKey, string address) {
            object[] results = this.Invoke("IsCurrentLocked", new object[] {
                        companyDBName,
                        tableName,
                        lockKey,
                        address});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsCurrentLockedAsync(string companyDBName, string tableName, string lockKey, string address) {
            this.IsCurrentLockedAsync(companyDBName, tableName, lockKey, address, null);
        }
        
        /// <remarks/>
        public void IsCurrentLockedAsync(string companyDBName, string tableName, string lockKey, string address, object userState) {
            if ((this.IsCurrentLockedOperationCompleted == null)) {
                this.IsCurrentLockedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsCurrentLockedOperationCompleted);
            }
            this.InvokeAsync("IsCurrentLocked", new object[] {
                        companyDBName,
                        tableName,
                        lockKey,
                        address}, this.IsCurrentLockedOperationCompleted, userState);
        }
        
        private void OnIsCurrentLockedOperationCompleted(object arg) {
            if ((this.IsCurrentLockedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsCurrentLockedCompleted(this, new IsCurrentLockedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/IsMyLock", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsMyLock(string companyDBName, string tableName, string lockKey, string address) {
            object[] results = this.Invoke("IsMyLock", new object[] {
                        companyDBName,
                        tableName,
                        lockKey,
                        address});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsMyLockAsync(string companyDBName, string tableName, string lockKey, string address) {
            this.IsMyLockAsync(companyDBName, tableName, lockKey, address, null);
        }
        
        /// <remarks/>
        public void IsMyLockAsync(string companyDBName, string tableName, string lockKey, string address, object userState) {
            if ((this.IsMyLockOperationCompleted == null)) {
                this.IsMyLockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsMyLockOperationCompleted);
            }
            this.InvokeAsync("IsMyLock", new object[] {
                        companyDBName,
                        tableName,
                        lockKey,
                        address}, this.IsMyLockOperationCompleted, userState);
        }
        
        private void OnIsMyLockOperationCompleted(object arg) {
            if ((this.IsMyLockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsMyLockCompleted(this, new IsMyLockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/UnlockRecord", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnlockRecord(string companyDBName, string authenticationToken, string tableName, string lockKey, string address) {
            object[] results = this.Invoke("UnlockRecord", new object[] {
                        companyDBName,
                        authenticationToken,
                        tableName,
                        lockKey,
                        address});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnlockRecordAsync(string companyDBName, string authenticationToken, string tableName, string lockKey, string address) {
            this.UnlockRecordAsync(companyDBName, authenticationToken, tableName, lockKey, address, null);
        }
        
        /// <remarks/>
        public void UnlockRecordAsync(string companyDBName, string authenticationToken, string tableName, string lockKey, string address, object userState) {
            if ((this.UnlockRecordOperationCompleted == null)) {
                this.UnlockRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockRecordOperationCompleted);
            }
            this.InvokeAsync("UnlockRecord", new object[] {
                        companyDBName,
                        authenticationToken,
                        tableName,
                        lockKey,
                        address}, this.UnlockRecordOperationCompleted, userState);
        }
        
        private void OnUnlockRecordOperationCompleted(object arg) {
            if ((this.UnlockRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockRecordCompleted(this, new UnlockRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/UnlockAllContext", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnlockAllContext(string companyDBName, string authenticationToken, string address) {
            object[] results = this.Invoke("UnlockAllContext", new object[] {
                        companyDBName,
                        authenticationToken,
                        address});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnlockAllContextAsync(string companyDBName, string authenticationToken, string address) {
            this.UnlockAllContextAsync(companyDBName, authenticationToken, address, null);
        }
        
        /// <remarks/>
        public void UnlockAllContextAsync(string companyDBName, string authenticationToken, string address, object userState) {
            if ((this.UnlockAllContextOperationCompleted == null)) {
                this.UnlockAllContextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockAllContextOperationCompleted);
            }
            this.InvokeAsync("UnlockAllContext", new object[] {
                        companyDBName,
                        authenticationToken,
                        address}, this.UnlockAllContextOperationCompleted, userState);
        }
        
        private void OnUnlockAllContextOperationCompleted(object arg) {
            if ((this.UnlockAllContextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockAllContextCompleted(this, new UnlockAllContextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/UnlockAll", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnlockAll(string companyDBName, string authenticationToken, string tableName, string address) {
            object[] results = this.Invoke("UnlockAll", new object[] {
                        companyDBName,
                        authenticationToken,
                        tableName,
                        address});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnlockAllAsync(string companyDBName, string authenticationToken, string tableName, string address) {
            this.UnlockAllAsync(companyDBName, authenticationToken, tableName, address, null);
        }
        
        /// <remarks/>
        public void UnlockAllAsync(string companyDBName, string authenticationToken, string tableName, string address, object userState) {
            if ((this.UnlockAllOperationCompleted == null)) {
                this.UnlockAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockAllOperationCompleted);
            }
            this.InvokeAsync("UnlockAll", new object[] {
                        companyDBName,
                        authenticationToken,
                        tableName,
                        address}, this.UnlockAllOperationCompleted, userState);
        }
        
        private void OnUnlockAllOperationCompleted(object arg) {
            if ((this.UnlockAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockAllCompleted(this, new UnlockAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/UnlockAllForCurrentConnection", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnlockAllForCurrentConnection(string companyDBName, string authenticationToken) {
            object[] results = this.Invoke("UnlockAllForCurrentConnection", new object[] {
                        companyDBName,
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnlockAllForCurrentConnectionAsync(string companyDBName, string authenticationToken) {
            this.UnlockAllForCurrentConnectionAsync(companyDBName, authenticationToken, null);
        }
        
        /// <remarks/>
        public void UnlockAllForCurrentConnectionAsync(string companyDBName, string authenticationToken, object userState) {
            if ((this.UnlockAllForCurrentConnectionOperationCompleted == null)) {
                this.UnlockAllForCurrentConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockAllForCurrentConnectionOperationCompleted);
            }
            this.InvokeAsync("UnlockAllForCurrentConnection", new object[] {
                        companyDBName,
                        authenticationToken}, this.UnlockAllForCurrentConnectionOperationCompleted, userState);
        }
        
        private void OnUnlockAllForCurrentConnectionOperationCompleted(object arg) {
            if ((this.UnlockAllForCurrentConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockAllForCurrentConnectionCompleted(this, new UnlockAllForCurrentConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/UnlockAllForUser", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnlockAllForUser(string userName, string authenticationToken) {
            object[] results = this.Invoke("UnlockAllForUser", new object[] {
                        userName,
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnlockAllForUserAsync(string userName, string authenticationToken) {
            this.UnlockAllForUserAsync(userName, authenticationToken, null);
        }
        
        /// <remarks/>
        public void UnlockAllForUserAsync(string userName, string authenticationToken, object userState) {
            if ((this.UnlockAllForUserOperationCompleted == null)) {
                this.UnlockAllForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockAllForUserOperationCompleted);
            }
            this.InvokeAsync("UnlockAllForUser", new object[] {
                        userName,
                        authenticationToken}, this.UnlockAllForUserOperationCompleted, userState);
        }
        
        private void OnUnlockAllForUserOperationCompleted(object arg) {
            if ((this.UnlockAllForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockAllForUserCompleted(this, new UnlockAllForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/UnlockAllForCompanyDBName", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnlockAllForCompanyDBName(string companyDBName, string authenticationToken) {
            object[] results = this.Invoke("UnlockAllForCompanyDBName", new object[] {
                        companyDBName,
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnlockAllForCompanyDBNameAsync(string companyDBName, string authenticationToken) {
            this.UnlockAllForCompanyDBNameAsync(companyDBName, authenticationToken, null);
        }
        
        /// <remarks/>
        public void UnlockAllForCompanyDBNameAsync(string companyDBName, string authenticationToken, object userState) {
            if ((this.UnlockAllForCompanyDBNameOperationCompleted == null)) {
                this.UnlockAllForCompanyDBNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockAllForCompanyDBNameOperationCompleted);
            }
            this.InvokeAsync("UnlockAllForCompanyDBName", new object[] {
                        companyDBName,
                        authenticationToken}, this.UnlockAllForCompanyDBNameOperationCompleted, userState);
        }
        
        private void OnUnlockAllForCompanyDBNameOperationCompleted(object arg) {
            if ((this.UnlockAllForCompanyDBNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockAllForCompanyDBNameCompleted(this, new UnlockAllForCompanyDBNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/UnlockAllForCompanyDBNameAndUser", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnlockAllForCompanyDBNameAndUser(string companyDBName, string userName, string authenticationToken) {
            object[] results = this.Invoke("UnlockAllForCompanyDBNameAndUser", new object[] {
                        companyDBName,
                        userName,
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnlockAllForCompanyDBNameAndUserAsync(string companyDBName, string userName, string authenticationToken) {
            this.UnlockAllForCompanyDBNameAndUserAsync(companyDBName, userName, authenticationToken, null);
        }
        
        /// <remarks/>
        public void UnlockAllForCompanyDBNameAndUserAsync(string companyDBName, string userName, string authenticationToken, object userState) {
            if ((this.UnlockAllForCompanyDBNameAndUserOperationCompleted == null)) {
                this.UnlockAllForCompanyDBNameAndUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockAllForCompanyDBNameAndUserOperationCompleted);
            }
            this.InvokeAsync("UnlockAllForCompanyDBNameAndUser", new object[] {
                        companyDBName,
                        userName,
                        authenticationToken}, this.UnlockAllForCompanyDBNameAndUserOperationCompleted, userState);
        }
        
        private void OnUnlockAllForCompanyDBNameAndUserOperationCompleted(object arg) {
            if ((this.UnlockAllForCompanyDBNameAndUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockAllForCompanyDBNameAndUserCompleted(this, new UnlockAllForCompanyDBNameAndUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/UnlockAllForCompanyDBNameAndTable", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnlockAllForCompanyDBNameAndTable(string companyDBName, string tableName, string authenticationToken) {
            object[] results = this.Invoke("UnlockAllForCompanyDBNameAndTable", new object[] {
                        companyDBName,
                        tableName,
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnlockAllForCompanyDBNameAndTableAsync(string companyDBName, string tableName, string authenticationToken) {
            this.UnlockAllForCompanyDBNameAndTableAsync(companyDBName, tableName, authenticationToken, null);
        }
        
        /// <remarks/>
        public void UnlockAllForCompanyDBNameAndTableAsync(string companyDBName, string tableName, string authenticationToken, object userState) {
            if ((this.UnlockAllForCompanyDBNameAndTableOperationCompleted == null)) {
                this.UnlockAllForCompanyDBNameAndTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockAllForCompanyDBNameAndTableOperationCompleted);
            }
            this.InvokeAsync("UnlockAllForCompanyDBNameAndTable", new object[] {
                        companyDBName,
                        tableName,
                        authenticationToken}, this.UnlockAllForCompanyDBNameAndTableOperationCompleted, userState);
        }
        
        private void OnUnlockAllForCompanyDBNameAndTableOperationCompleted(object arg) {
            if ((this.UnlockAllForCompanyDBNameAndTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockAllForCompanyDBNameAndTableCompleted(this, new UnlockAllForCompanyDBNameAndTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/UnlockAllForCompanyDBNameAndTableAndUser", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnlockAllForCompanyDBNameAndTableAndUser(string companyDBName, string tableName, string user, string authenticationToken) {
            object[] results = this.Invoke("UnlockAllForCompanyDBNameAndTableAndUser", new object[] {
                        companyDBName,
                        tableName,
                        user,
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnlockAllForCompanyDBNameAndTableAndUserAsync(string companyDBName, string tableName, string user, string authenticationToken) {
            this.UnlockAllForCompanyDBNameAndTableAndUserAsync(companyDBName, tableName, user, authenticationToken, null);
        }
        
        /// <remarks/>
        public void UnlockAllForCompanyDBNameAndTableAndUserAsync(string companyDBName, string tableName, string user, string authenticationToken, object userState) {
            if ((this.UnlockAllForCompanyDBNameAndTableAndUserOperationCompleted == null)) {
                this.UnlockAllForCompanyDBNameAndTableAndUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockAllForCompanyDBNameAndTableAndUserOperationCompleted);
            }
            this.InvokeAsync("UnlockAllForCompanyDBNameAndTableAndUser", new object[] {
                        companyDBName,
                        tableName,
                        user,
                        authenticationToken}, this.UnlockAllForCompanyDBNameAndTableAndUserOperationCompleted, userState);
        }
        
        private void OnUnlockAllForCompanyDBNameAndTableAndUserOperationCompleted(object arg) {
            if ((this.UnlockAllForCompanyDBNameAndTableAndUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockAllForCompanyDBNameAndTableAndUserCompleted(this, new UnlockAllForCompanyDBNameAndTableAndUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/UnlockCompanyDBNameAndTableAndLock", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnlockCompanyDBNameAndTableAndLock(string companyDBName, string tableName, string lockKey, string authenticationToken) {
            object[] results = this.Invoke("UnlockCompanyDBNameAndTableAndLock", new object[] {
                        companyDBName,
                        tableName,
                        lockKey,
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnlockCompanyDBNameAndTableAndLockAsync(string companyDBName, string tableName, string lockKey, string authenticationToken) {
            this.UnlockCompanyDBNameAndTableAndLockAsync(companyDBName, tableName, lockKey, authenticationToken, null);
        }
        
        /// <remarks/>
        public void UnlockCompanyDBNameAndTableAndLockAsync(string companyDBName, string tableName, string lockKey, string authenticationToken, object userState) {
            if ((this.UnlockCompanyDBNameAndTableAndLockOperationCompleted == null)) {
                this.UnlockCompanyDBNameAndTableAndLockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockCompanyDBNameAndTableAndLockOperationCompleted);
            }
            this.InvokeAsync("UnlockCompanyDBNameAndTableAndLock", new object[] {
                        companyDBName,
                        tableName,
                        lockKey,
                        authenticationToken}, this.UnlockCompanyDBNameAndTableAndLockOperationCompleted, userState);
        }
        
        private void OnUnlockCompanyDBNameAndTableAndLockOperationCompleted(object arg) {
            if ((this.UnlockCompanyDBNameAndTableAndLockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockCompanyDBNameAndTableAndLockCompleted(this, new UnlockCompanyDBNameAndTableAndLockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LockManager/RemoveUnusedLocks", RequestNamespace="http://microarea.it/LockManager/", ResponseNamespace="http://microarea.it/LockManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUnusedLocks() {
            this.Invoke("RemoveUnusedLocks", new object[0]);
        }
        
        /// <remarks/>
        public void RemoveUnusedLocksAsync() {
            this.RemoveUnusedLocksAsync(null);
        }
        
        /// <remarks/>
        public void RemoveUnusedLocksAsync(object userState) {
            if ((this.RemoveUnusedLocksOperationCompleted == null)) {
                this.RemoveUnusedLocksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUnusedLocksOperationCompleted);
            }
            this.InvokeAsync("RemoveUnusedLocks", new object[0], this.RemoveUnusedLocksOperationCompleted, userState);
        }
        
        private void OnRemoveUnusedLocksOperationCompleted(object arg) {
            if ((this.RemoveUnusedLocksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUnusedLocksCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InitCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InitLockCompletedEventHandler(object sender, InitLockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitLockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitLockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLockSessionIDCompletedEventHandler(object sender, GetLockSessionIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLockSessionIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLockSessionIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsAliveCompletedEventHandler(object sender, IsAliveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLockInfoCompletedEventHandler(object sender, GetLockInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLockInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLockInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string user {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public System.DateTime lockTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string processName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLockEntriesAttCompletedEventHandler(object sender, GetLockEntriesAttCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLockEntriesAttCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLockEntriesAttCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCompanyDBAndTableLocksListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLocksListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LockRecordCompletedEventHandler(object sender, LockRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LockRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LockRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LockRecordExCompletedEventHandler(object sender, LockRecordExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LockRecordExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LockRecordExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string lockUser {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string lockApp {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsRecordLockedCompletedEventHandler(object sender, IsRecordLockedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsRecordLockedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsRecordLockedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsCurrentLockedCompletedEventHandler(object sender, IsCurrentLockedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsCurrentLockedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsCurrentLockedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsMyLockCompletedEventHandler(object sender, IsMyLockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsMyLockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsMyLockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnlockRecordCompletedEventHandler(object sender, UnlockRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnlockRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnlockRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnlockAllContextCompletedEventHandler(object sender, UnlockAllContextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnlockAllContextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnlockAllContextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnlockAllCompletedEventHandler(object sender, UnlockAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnlockAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnlockAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnlockAllForCurrentConnectionCompletedEventHandler(object sender, UnlockAllForCurrentConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnlockAllForCurrentConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnlockAllForCurrentConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnlockAllForUserCompletedEventHandler(object sender, UnlockAllForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnlockAllForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnlockAllForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnlockAllForCompanyDBNameCompletedEventHandler(object sender, UnlockAllForCompanyDBNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnlockAllForCompanyDBNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnlockAllForCompanyDBNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnlockAllForCompanyDBNameAndUserCompletedEventHandler(object sender, UnlockAllForCompanyDBNameAndUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnlockAllForCompanyDBNameAndUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnlockAllForCompanyDBNameAndUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnlockAllForCompanyDBNameAndTableCompletedEventHandler(object sender, UnlockAllForCompanyDBNameAndTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnlockAllForCompanyDBNameAndTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnlockAllForCompanyDBNameAndTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnlockAllForCompanyDBNameAndTableAndUserCompletedEventHandler(object sender, UnlockAllForCompanyDBNameAndTableAndUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnlockAllForCompanyDBNameAndTableAndUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnlockAllForCompanyDBNameAndTableAndUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnlockCompanyDBNameAndTableAndLockCompletedEventHandler(object sender, UnlockCompanyDBNameAndTableAndLockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnlockCompanyDBNameAndTableAndLockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnlockCompanyDBNameAndTableAndLockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveUnusedLocksCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591