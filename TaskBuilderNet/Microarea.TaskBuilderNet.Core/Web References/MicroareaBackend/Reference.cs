//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.225.
// 
#pragma warning disable 1591

namespace Microarea.TaskBuilderNet.Core.MicroareaBackend
{


	/// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RegistrationSoap", Namespace="http://www.microarea.it/")]
    public partial class Registration : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateNewLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewLoginWithoutSendingMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAliveOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendWelcomeMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMluSubscriptionMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPdfEulaContractOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPdfMluContractOperationCompleted;
        
        private System.Threading.SendOrPostCallback StoreContractHistorySnapshotOperationCompleted;
        
        private System.Threading.SendOrPostCallback StoreMluChoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendAccessMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback ManageSMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback StoreCrashInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPdbOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportPingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateSSOTokenOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Registration() {
            this.Url = global::Microarea.TaskBuilderNet.Core.Properties.Settings.Default.Microarea_TaskBuilderNet_Core_MicroareaBackend_Registration;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateNewLoginCompletedEventHandler CreateNewLoginCompleted;
        
        /// <remarks/>
        public event CreateNewLoginWithoutSendingMailCompletedEventHandler CreateNewLoginWithoutSendingMailCompleted;
        
        /// <remarks/>
        public event IsAliveCompletedEventHandler IsAliveCompleted;
        
        /// <remarks/>
        public event SendWelcomeMailCompletedEventHandler SendWelcomeMailCompleted;
        
        /// <remarks/>
        public event SendMluSubscriptionMailCompletedEventHandler SendMluSubscriptionMailCompleted;
        
        /// <remarks/>
        public event GetPdfEulaContractCompletedEventHandler GetPdfEulaContractCompleted;
        
        /// <remarks/>
        public event GetPdfMluContractCompletedEventHandler GetPdfMluContractCompleted;
        
        /// <remarks/>
        public event StoreContractHistorySnapshotCompletedEventHandler StoreContractHistorySnapshotCompleted;
        
        /// <remarks/>
        public event StoreMluChoiceCompletedEventHandler StoreMluChoiceCompleted;
        
        /// <remarks/>
        public event GetMessagesCompletedEventHandler GetMessagesCompleted;
        
        /// <remarks/>
        public event SendAccessMailCompletedEventHandler SendAccessMailCompleted;
        
        /// <remarks/>
        public event ManageSMSCompletedEventHandler ManageSMSCompleted;
        
        /// <remarks/>
        public event SendSMSCompletedEventHandler SendSMSCompleted;
        
        /// <remarks/>
        public event StoreCrashInfoCompletedEventHandler StoreCrashInfoCompleted;
        
        /// <remarks/>
        public event GetPdbCompletedEventHandler GetPdbCompleted;
        
        /// <remarks/>
        public event ImportPingCompletedEventHandler ImportPingCompleted;
        
        /// <remarks/>
        public event GenerateSSOTokenCompletedEventHandler GenerateSSOTokenCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microarea.it/CreateNewLogin", RequestNamespace="http://www.microarea.it/", ResponseNamespace="http://www.microarea.it/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateNewLogin(string authenticationToken, string loginID, string userName, string password, string emailAddress, bool isAdminLogin, string redirectUrl) {
            object[] results = this.Invoke("CreateNewLogin", new object[] {
                        authenticationToken,
                        loginID,
                        userName,
                        password,
                        emailAddress,
                        isAdminLogin,
                        redirectUrl});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewLoginAsync(string authenticationToken, string loginID, string userName, string password, string emailAddress, bool isAdminLogin, string redirectUrl) {
            this.CreateNewLoginAsync(authenticationToken, loginID, userName, password, emailAddress, isAdminLogin, redirectUrl, null);
        }
        
        /// <remarks/>
        public void CreateNewLoginAsync(string authenticationToken, string loginID, string userName, string password, string emailAddress, bool isAdminLogin, string redirectUrl, object userState) {
            if ((this.CreateNewLoginOperationCompleted == null)) {
                this.CreateNewLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewLoginOperationCompleted);
            }
            this.InvokeAsync("CreateNewLogin", new object[] {
                        authenticationToken,
                        loginID,
                        userName,
                        password,
                        emailAddress,
                        isAdminLogin,
                        redirectUrl}, this.CreateNewLoginOperationCompleted, userState);
        }
        
        private void OnCreateNewLoginOperationCompleted(object arg) {
            if ((this.CreateNewLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewLoginCompleted(this, new CreateNewLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microarea.it/CreateNewLoginWithoutSendingMail", RequestNamespace="http://www.microarea.it/", ResponseNamespace="http://www.microarea.it/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateNewLoginWithoutSendingMail(string authenticationToken, string loginID, string userName, string password, string emailAddress, bool isAdminLogin, string redirectUrl) {
            object[] results = this.Invoke("CreateNewLoginWithoutSendingMail", new object[] {
                        authenticationToken,
                        loginID,
                        userName,
                        password,
                        emailAddress,
                        isAdminLogin,
                        redirectUrl});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewLoginWithoutSendingMailAsync(string authenticationToken, string loginID, string userName, string password, string emailAddress, bool isAdminLogin, string redirectUrl) {
            this.CreateNewLoginWithoutSendingMailAsync(authenticationToken, loginID, userName, password, emailAddress, isAdminLogin, redirectUrl, null);
        }
        
        /// <remarks/>
        public void CreateNewLoginWithoutSendingMailAsync(string authenticationToken, string loginID, string userName, string password, string emailAddress, bool isAdminLogin, string redirectUrl, object userState) {
            if ((this.CreateNewLoginWithoutSendingMailOperationCompleted == null)) {
                this.CreateNewLoginWithoutSendingMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewLoginWithoutSendingMailOperationCompleted);
            }
            this.InvokeAsync("CreateNewLoginWithoutSendingMail", new object[] {
                        authenticationToken,
                        loginID,
                        userName,
                        password,
                        emailAddress,
                        isAdminLogin,
                        redirectUrl}, this.CreateNewLoginWithoutSendingMailOperationCompleted, userState);
        }
        
        private void OnCreateNewLoginWithoutSendingMailOperationCompleted(object arg) {
            if ((this.CreateNewLoginWithoutSendingMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewLoginWithoutSendingMailCompleted(this, new CreateNewLoginWithoutSendingMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microarea.it/IsAlive", RequestNamespace="http://www.microarea.it/", ResponseNamespace="http://www.microarea.it/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsAlive(ref string string1, ref string string2, ref string string3, ref string string4) {
            object[] results = this.Invoke("IsAlive", new object[] {
                        string1,
                        string2,
                        string3,
                        string4});
            string1 = ((string)(results[1]));
            string2 = ((string)(results[2]));
            string3 = ((string)(results[3]));
            string4 = ((string)(results[4]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsAliveAsync(string string1, string string2, string string3, string string4) {
            this.IsAliveAsync(string1, string2, string3, string4, null);
        }
        
        /// <remarks/>
        public void IsAliveAsync(string string1, string string2, string string3, string string4, object userState) {
            if ((this.IsAliveOperationCompleted == null)) {
                this.IsAliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAliveOperationCompleted);
            }
            this.InvokeAsync("IsAlive", new object[] {
                        string1,
                        string2,
                        string3,
                        string4}, this.IsAliveOperationCompleted, userState);
        }
        
        private void OnIsAliveOperationCompleted(object arg) {
            if ((this.IsAliveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAliveCompleted(this, new IsAliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microarea.it/SendWelcomeMail", RequestNamespace="http://www.microarea.it/", ResponseNamespace="http://www.microarea.it/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendWelcomeMail(string authenticationToken, string userId, string activationMarker) {
            object[] results = this.Invoke("SendWelcomeMail", new object[] {
                        authenticationToken,
                        userId,
                        activationMarker});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendWelcomeMailAsync(string authenticationToken, string userId, string activationMarker) {
            this.SendWelcomeMailAsync(authenticationToken, userId, activationMarker, null);
        }
        
        /// <remarks/>
        public void SendWelcomeMailAsync(string authenticationToken, string userId, string activationMarker, object userState) {
            if ((this.SendWelcomeMailOperationCompleted == null)) {
                this.SendWelcomeMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendWelcomeMailOperationCompleted);
            }
            this.InvokeAsync("SendWelcomeMail", new object[] {
                        authenticationToken,
                        userId,
                        activationMarker}, this.SendWelcomeMailOperationCompleted, userState);
        }
        
        private void OnSendWelcomeMailOperationCompleted(object arg) {
            if ((this.SendWelcomeMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendWelcomeMailCompleted(this, new SendWelcomeMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microarea.it/SendMluSubscriptionMail", RequestNamespace="http://www.microarea.it/", ResponseNamespace="http://www.microarea.it/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMluSubscriptionMail(string authenticationToken, string userId, string activationMarker, bool storeMluInContractHistory, bool sendMail) {
            object[] results = this.Invoke("SendMluSubscriptionMail", new object[] {
                        authenticationToken,
                        userId,
                        activationMarker,
                        storeMluInContractHistory,
                        sendMail});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMluSubscriptionMailAsync(string authenticationToken, string userId, string activationMarker, bool storeMluInContractHistory, bool sendMail) {
            this.SendMluSubscriptionMailAsync(authenticationToken, userId, activationMarker, storeMluInContractHistory, sendMail, null);
        }
        
        /// <remarks/>
        public void SendMluSubscriptionMailAsync(string authenticationToken, string userId, string activationMarker, bool storeMluInContractHistory, bool sendMail, object userState) {
            if ((this.SendMluSubscriptionMailOperationCompleted == null)) {
                this.SendMluSubscriptionMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMluSubscriptionMailOperationCompleted);
            }
            this.InvokeAsync("SendMluSubscriptionMail", new object[] {
                        authenticationToken,
                        userId,
                        activationMarker,
                        storeMluInContractHistory,
                        sendMail}, this.SendMluSubscriptionMailOperationCompleted, userState);
        }
        
        private void OnSendMluSubscriptionMailOperationCompleted(object arg) {
            if ((this.SendMluSubscriptionMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMluSubscriptionMailCompleted(this, new SendMluSubscriptionMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microarea.it/GetPdfEulaContract", RequestNamespace="http://www.microarea.it/", ResponseNamespace="http://www.microarea.it/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetPdfEulaContract(string authenticationToken, string userId, string activationMarker, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] pdfContract) {
            object[] results = this.Invoke("GetPdfEulaContract", new object[] {
                        authenticationToken,
                        userId,
                        activationMarker});
            pdfContract = ((byte[])(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetPdfEulaContractAsync(string authenticationToken, string userId, string activationMarker) {
            this.GetPdfEulaContractAsync(authenticationToken, userId, activationMarker, null);
        }
        
        /// <remarks/>
        public void GetPdfEulaContractAsync(string authenticationToken, string userId, string activationMarker, object userState) {
            if ((this.GetPdfEulaContractOperationCompleted == null)) {
                this.GetPdfEulaContractOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPdfEulaContractOperationCompleted);
            }
            this.InvokeAsync("GetPdfEulaContract", new object[] {
                        authenticationToken,
                        userId,
                        activationMarker}, this.GetPdfEulaContractOperationCompleted, userState);
        }
        
        private void OnGetPdfEulaContractOperationCompleted(object arg) {
            if ((this.GetPdfEulaContractCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPdfEulaContractCompleted(this, new GetPdfEulaContractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microarea.it/GetPdfMluContract", RequestNamespace="http://www.microarea.it/", ResponseNamespace="http://www.microarea.it/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetPdfMluContract(string authenticationToken, string userId, string activationMarker, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] pdfContract) {
            object[] results = this.Invoke("GetPdfMluContract", new object[] {
                        authenticationToken,
                        userId,
                        activationMarker});
            pdfContract = ((byte[])(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetPdfMluContractAsync(string authenticationToken, string userId, string activationMarker) {
            this.GetPdfMluContractAsync(authenticationToken, userId, activationMarker, null);
        }
        
        /// <remarks/>
        public void GetPdfMluContractAsync(string authenticationToken, string userId, string activationMarker, object userState) {
            if ((this.GetPdfMluContractOperationCompleted == null)) {
                this.GetPdfMluContractOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPdfMluContractOperationCompleted);
            }
            this.InvokeAsync("GetPdfMluContract", new object[] {
                        authenticationToken,
                        userId,
                        activationMarker}, this.GetPdfMluContractOperationCompleted, userState);
        }
        
        private void OnGetPdfMluContractOperationCompleted(object arg) {
            if ((this.GetPdfMluContractCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPdfMluContractCompleted(this, new GetPdfMluContractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microarea.it/StoreContractHistorySnapshot", RequestNamespace="http://www.microarea.it/", ResponseNamespace="http://www.microarea.it/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool StoreContractHistorySnapshot(string authenticationToken, bool configurationChanging, string userId, string activationMarker) {
            object[] results = this.Invoke("StoreContractHistorySnapshot", new object[] {
                        authenticationToken,
                        configurationChanging,
                        userId,
                        activationMarker});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void StoreContractHistorySnapshotAsync(string authenticationToken, bool configurationChanging, string userId, string activationMarker) {
            this.StoreContractHistorySnapshotAsync(authenticationToken, configurationChanging, userId, activationMarker, null);
        }
        
        /// <remarks/>
        public void StoreContractHistorySnapshotAsync(string authenticationToken, bool configurationChanging, string userId, string activationMarker, object userState) {
            if ((this.StoreContractHistorySnapshotOperationCompleted == null)) {
                this.StoreContractHistorySnapshotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoreContractHistorySnapshotOperationCompleted);
            }
            this.InvokeAsync("StoreContractHistorySnapshot", new object[] {
                        authenticationToken,
                        configurationChanging,
                        userId,
                        activationMarker}, this.StoreContractHistorySnapshotOperationCompleted, userState);
        }
        
        private void OnStoreContractHistorySnapshotOperationCompleted(object arg) {
            if ((this.StoreContractHistorySnapshotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StoreContractHistorySnapshotCompleted(this, new StoreContractHistorySnapshotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microarea.it/StoreMluChoice", RequestNamespace="http://www.microarea.it/", ResponseNamespace="http://www.microarea.it/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool StoreMluChoice(ref string string1, ref string string2, ref string string3) {
            object[] results = this.Invoke("StoreMluChoice", new object[] {
                        string1,
                        string2,
                        string3});
            string1 = ((string)(results[1]));
            string2 = ((string)(results[2]));
            string3 = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void StoreMluChoiceAsync(string string1, string string2, string string3) {
            this.StoreMluChoiceAsync(string1, string2, string3, null);
        }
        
        /// <remarks/>
        public void StoreMluChoiceAsync(string string1, string string2, string string3, object userState) {
            if ((this.StoreMluChoiceOperationCompleted == null)) {
                this.StoreMluChoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoreMluChoiceOperationCompleted);
            }
            this.InvokeAsync("StoreMluChoice", new object[] {
                        string1,
                        string2,
                        string3}, this.StoreMluChoiceOperationCompleted, userState);
        }
        
        private void OnStoreMluChoiceOperationCompleted(object arg) {
            if ((this.StoreMluChoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StoreMluChoiceCompleted(this, new StoreMluChoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microarea.it/GetMessages", RequestNamespace="http://www.microarea.it/", ResponseNamespace="http://www.microarea.it/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMessages(ref string string1, ref string string2, ref string string3) {
            object[] results = this.Invoke("GetMessages", new object[] {
                        string1,
                        string2,
                        string3});
            string1 = ((string)(results[1]));
            string2 = ((string)(results[2]));
            string3 = ((string)(results[3]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessagesAsync(string string1, string string2, string string3) {
            this.GetMessagesAsync(string1, string2, string3, null);
        }
        
        /// <remarks/>
        public void GetMessagesAsync(string string1, string string2, string string3, object userState) {
            if ((this.GetMessagesOperationCompleted == null)) {
                this.GetMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessagesOperationCompleted);
            }
            this.InvokeAsync("GetMessages", new object[] {
                        string1,
                        string2,
                        string3}, this.GetMessagesOperationCompleted, userState);
        }
        
        private void OnGetMessagesOperationCompleted(object arg) {
            if ((this.GetMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessagesCompleted(this, new GetMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microarea.it/SendAccessMail", RequestNamespace="http://www.microarea.it/", ResponseNamespace="http://www.microarea.it/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendAccessMail(ref string string1, ref string string2, ref string string3) {
            object[] results = this.Invoke("SendAccessMail", new object[] {
                        string1,
                        string2,
                        string3});
            string1 = ((string)(results[1]));
            string2 = ((string)(results[2]));
            string3 = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendAccessMailAsync(string string1, string string2, string string3) {
            this.SendAccessMailAsync(string1, string2, string3, null);
        }
        
        /// <remarks/>
        public void SendAccessMailAsync(string string1, string string2, string string3, object userState) {
            if ((this.SendAccessMailOperationCompleted == null)) {
                this.SendAccessMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendAccessMailOperationCompleted);
            }
            this.InvokeAsync("SendAccessMail", new object[] {
                        string1,
                        string2,
                        string3}, this.SendAccessMailOperationCompleted, userState);
        }
        
        private void OnSendAccessMailOperationCompleted(object arg) {
            if ((this.SendAccessMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendAccessMailCompleted(this, new SendAccessMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microarea.it/ManageSMS", RequestNamespace="http://www.microarea.it/", ResponseNamespace="http://www.microarea.it/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ManageSMS(string stringG, string stringK, string stringN, string stringT, string stringD, string stringH, bool boolN, bool boolT) {
            object[] results = this.Invoke("ManageSMS", new object[] {
                        stringG,
                        stringK,
                        stringN,
                        stringT,
                        stringD,
                        stringH,
                        boolN,
                        boolT});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ManageSMSAsync(string stringG, string stringK, string stringN, string stringT, string stringD, string stringH, bool boolN, bool boolT) {
            this.ManageSMSAsync(stringG, stringK, stringN, stringT, stringD, stringH, boolN, boolT, null);
        }
        
        /// <remarks/>
        public void ManageSMSAsync(string stringG, string stringK, string stringN, string stringT, string stringD, string stringH, bool boolN, bool boolT, object userState) {
            if ((this.ManageSMSOperationCompleted == null)) {
                this.ManageSMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnManageSMSOperationCompleted);
            }
            this.InvokeAsync("ManageSMS", new object[] {
                        stringG,
                        stringK,
                        stringN,
                        stringT,
                        stringD,
                        stringH,
                        boolN,
                        boolT}, this.ManageSMSOperationCompleted, userState);
        }
        
        private void OnManageSMSOperationCompleted(object arg) {
            if ((this.ManageSMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ManageSMSCompleted(this, new ManageSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microarea.it/SendSMS", RequestNamespace="http://www.microarea.it/", ResponseNamespace="http://www.microarea.it/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendSMS(string stringG, string stringN, string stringT, bool boolN, bool boolT) {
            object[] results = this.Invoke("SendSMS", new object[] {
                        stringG,
                        stringN,
                        stringT,
                        boolN,
                        boolT});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendSMSAsync(string stringG, string stringN, string stringT, bool boolN, bool boolT) {
            this.SendSMSAsync(stringG, stringN, stringT, boolN, boolT, null);
        }
        
        /// <remarks/>
        public void SendSMSAsync(string stringG, string stringN, string stringT, bool boolN, bool boolT, object userState) {
            if ((this.SendSMSOperationCompleted == null)) {
                this.SendSMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSMSOperationCompleted);
            }
            this.InvokeAsync("SendSMS", new object[] {
                        stringG,
                        stringN,
                        stringT,
                        boolN,
                        boolT}, this.SendSMSOperationCompleted, userState);
        }
        
        private void OnSendSMSOperationCompleted(object arg) {
            if ((this.SendSMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSMSCompleted(this, new SendSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microarea.it/StoreCrashInfo", RequestNamespace="http://www.microarea.it/", ResponseNamespace="http://www.microarea.it/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StoreCrashInfo([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] crashInfo) {
            this.Invoke("StoreCrashInfo", new object[] {
                        crashInfo});
        }
        
        /// <remarks/>
        public void StoreCrashInfoAsync(byte[] crashInfo) {
            this.StoreCrashInfoAsync(crashInfo, null);
        }
        
        /// <remarks/>
        public void StoreCrashInfoAsync(byte[] crashInfo, object userState) {
            if ((this.StoreCrashInfoOperationCompleted == null)) {
                this.StoreCrashInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoreCrashInfoOperationCompleted);
            }
            this.InvokeAsync("StoreCrashInfo", new object[] {
                        crashInfo}, this.StoreCrashInfoOperationCompleted, userState);
        }
        
        private void OnStoreCrashInfoOperationCompleted(object arg) {
            if ((this.StoreCrashInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StoreCrashInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microarea.it/GetPdb", RequestNamespace="http://www.microarea.it/", ResponseNamespace="http://www.microarea.it/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetPdb(string pdbFile, string version) {
            object[] results = this.Invoke("GetPdb", new object[] {
                        pdbFile,
                        version});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPdbAsync(string pdbFile, string version) {
            this.GetPdbAsync(pdbFile, version, null);
        }
        
        /// <remarks/>
        public void GetPdbAsync(string pdbFile, string version, object userState) {
            if ((this.GetPdbOperationCompleted == null)) {
                this.GetPdbOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPdbOperationCompleted);
            }
            this.InvokeAsync("GetPdb", new object[] {
                        pdbFile,
                        version}, this.GetPdbOperationCompleted, userState);
        }
        
        private void OnGetPdbOperationCompleted(object arg) {
            if ((this.GetPdbCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPdbCompleted(this, new GetPdbCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microarea.it/ImportPing", RequestNamespace="http://www.microarea.it/", ResponseNamespace="http://www.microarea.it/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResponseBag ImportPing(string guid, System.DateTime pingTimestamp, string pingInfo) {
            object[] results = this.Invoke("ImportPing", new object[] {
                        guid,
                        pingTimestamp,
                        pingInfo});
            return ((ResponseBag)(results[0]));
        }
        
        /// <remarks/>
        public void ImportPingAsync(string guid, System.DateTime pingTimestamp, string pingInfo) {
            this.ImportPingAsync(guid, pingTimestamp, pingInfo, null);
        }
        
        /// <remarks/>
        public void ImportPingAsync(string guid, System.DateTime pingTimestamp, string pingInfo, object userState) {
            if ((this.ImportPingOperationCompleted == null)) {
                this.ImportPingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportPingOperationCompleted);
            }
            this.InvokeAsync("ImportPing", new object[] {
                        guid,
                        pingTimestamp,
                        pingInfo}, this.ImportPingOperationCompleted, userState);
        }
        
        private void OnImportPingOperationCompleted(object arg) {
            if ((this.ImportPingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportPingCompleted(this, new ImportPingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microarea.it/GenerateSSOToken", RequestNamespace="http://www.microarea.it/", ResponseNamespace="http://www.microarea.it/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateSSOToken(string loginInfo, bool isAdmin) {
            object[] results = this.Invoke("GenerateSSOToken", new object[] {
                        loginInfo,
                        isAdmin});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateSSOTokenAsync(string loginInfo, bool isAdmin) {
            this.GenerateSSOTokenAsync(loginInfo, isAdmin, null);
        }
        
        /// <remarks/>
        public void GenerateSSOTokenAsync(string loginInfo, bool isAdmin, object userState) {
            if ((this.GenerateSSOTokenOperationCompleted == null)) {
                this.GenerateSSOTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateSSOTokenOperationCompleted);
            }
            this.InvokeAsync("GenerateSSOToken", new object[] {
                        loginInfo,
                        isAdmin}, this.GenerateSSOTokenOperationCompleted, userState);
        }
        
        private void OnGenerateSSOTokenOperationCompleted(object arg) {
            if ((this.GenerateSSOTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateSSOTokenCompleted(this, new GenerateSSOTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microarea.it/")]
    public partial class ResponseBag {
        
        private int returnCodeField;
        
        private string returnCodeExplField;
        
        /// <remarks/>
        public int ReturnCode {
            get {
                return this.returnCodeField;
            }
            set {
                this.returnCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ReturnCodeExpl {
            get {
                return this.returnCodeExplField;
            }
            set {
                this.returnCodeExplField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateNewLoginCompletedEventHandler(object sender, CreateNewLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateNewLoginWithoutSendingMailCompletedEventHandler(object sender, CreateNewLoginWithoutSendingMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewLoginWithoutSendingMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewLoginWithoutSendingMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsAliveCompletedEventHandler(object sender, IsAliveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string string1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string string2 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string string3 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string string4 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendWelcomeMailCompletedEventHandler(object sender, SendWelcomeMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendWelcomeMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendWelcomeMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendMluSubscriptionMailCompletedEventHandler(object sender, SendMluSubscriptionMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMluSubscriptionMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMluSubscriptionMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPdfEulaContractCompletedEventHandler(object sender, GetPdfEulaContractCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPdfEulaContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPdfEulaContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte[] pdfContract {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPdfMluContractCompletedEventHandler(object sender, GetPdfMluContractCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPdfMluContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPdfMluContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte[] pdfContract {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void StoreContractHistorySnapshotCompletedEventHandler(object sender, StoreContractHistorySnapshotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StoreContractHistorySnapshotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StoreContractHistorySnapshotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void StoreMluChoiceCompletedEventHandler(object sender, StoreMluChoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StoreMluChoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StoreMluChoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string string1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string string2 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string string3 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMessagesCompletedEventHandler(object sender, GetMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string string1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string string2 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string string3 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendAccessMailCompletedEventHandler(object sender, SendAccessMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendAccessMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendAccessMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string string1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string string2 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string string3 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ManageSMSCompletedEventHandler(object sender, ManageSMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ManageSMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ManageSMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendSMSCompletedEventHandler(object sender, SendSMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void StoreCrashInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPdbCompletedEventHandler(object sender, GetPdbCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPdbCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPdbCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ImportPingCompletedEventHandler(object sender, ImportPingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportPingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportPingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResponseBag Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResponseBag)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GenerateSSOTokenCompletedEventHandler(object sender, GenerateSSOTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateSSOTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateSSOTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591