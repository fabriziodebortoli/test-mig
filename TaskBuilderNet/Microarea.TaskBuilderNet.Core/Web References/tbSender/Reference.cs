//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.269.
// 
#pragma warning disable 1591

namespace Microarea.TaskBuilderNet.Core.tbSender
{


	/// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PLProxySoap", Namespace="http://microarea.it/TbSender/")]
    public partial class PLProxy : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SubscribeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChargeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCadastralCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLegalInfosOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEstimateChargeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadSingleLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSentLotsStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLotCostEstimateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoTickOperationCompleted;
        
        private System.Threading.SendOrPostCallback WakeUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefreshSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCreditStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback AllotMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReopenClosedLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveFromLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSingleMessageLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeMessageDeliveryTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeMessagePrintTypeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PLProxy() {
            this.Url = global::Microarea.TaskBuilderNet.Core.Properties.Settings.Default.Microarea_TaskBuilderNet_Core_tbSender_PLProxy;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SubscribeCompletedEventHandler SubscribeCompleted;
        
        /// <remarks/>
        public event ChargeCompletedEventHandler ChargeCompleted;
        
        /// <remarks/>
        public event GetCadastralCodeCompletedEventHandler GetCadastralCodeCompleted;
        
        /// <remarks/>
        public event GetLegalInfosCompletedEventHandler GetLegalInfosCompleted;
        
        /// <remarks/>
        public event GetEstimateChargeCompletedEventHandler GetEstimateChargeCompleted;
        
        /// <remarks/>
        public event UploadSingleLotCompletedEventHandler UploadSingleLotCompleted;
        
        /// <remarks/>
        public event UpdateSentLotsStatusCompletedEventHandler UpdateSentLotsStatusCompleted;
        
        /// <remarks/>
        public event GetLotCostEstimateCompletedEventHandler GetLotCostEstimateCompleted;
        
        /// <remarks/>
        public event DoTickCompletedEventHandler DoTickCompleted;
        
        /// <remarks/>
        public event WakeUpCompletedEventHandler WakeUpCompleted;
        
        /// <remarks/>
        public event RefreshSettingsCompletedEventHandler RefreshSettingsCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event GetCreditStateCompletedEventHandler GetCreditStateCompleted;
        
        /// <remarks/>
        public event AllotMessagesCompletedEventHandler AllotMessagesCompleted;
        
        /// <remarks/>
        public event ReopenClosedLotCompletedEventHandler ReopenClosedLotCompleted;
        
        /// <remarks/>
        public event RemoveFromLotCompletedEventHandler RemoveFromLotCompleted;
        
        /// <remarks/>
        public event CloseLotCompletedEventHandler CloseLotCompleted;
        
        /// <remarks/>
        public event CreateSingleMessageLotCompletedEventHandler CreateSingleMessageLotCompleted;
        
        /// <remarks/>
        public event DeleteMessageCompletedEventHandler DeleteMessageCompleted;
        
        /// <remarks/>
        public event ChangeMessageDeliveryTypeCompletedEventHandler ChangeMessageDeliveryTypeCompleted;
        
        /// <remarks/>
        public event ChangeMessagePrintTypeCompletedEventHandler ChangeMessagePrintTypeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/Subscribe", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Subscribe(
                    string company, 
                    string companyName, 
                    string city, 
                    string address, 
                    string zipCode, 
                    string county, 
                    string country, 
                    string prefixTelephoneNumber, 
                    string telephoneNumber, 
                    string vatNumber, 
                    string fiscalCode, 
                    string eMail, 
                    string legalCode, 
                    string activityCode, 
                    string areaCode, 
                    bool privateEntity, 
                    string privateEntityOption, 
                    string senderCompanyName, 
                    string senderCity, 
                    string senderAddress, 
                    string senderZipCode, 
                    string senderCounty, 
                    string senderCountry, 
                    string senderVatNumber, 
                    string senderFiscalCode, 
                    string senderEMail, 
                    string senderLegalCode, 
                    string senderActivityCode, 
                    out string loginId, 
                    out string errorMessage) {
            object[] results = this.Invoke("Subscribe", new object[] {
                        company,
                        companyName,
                        city,
                        address,
                        zipCode,
                        county,
                        country,
                        prefixTelephoneNumber,
                        telephoneNumber,
                        vatNumber,
                        fiscalCode,
                        eMail,
                        legalCode,
                        activityCode,
                        areaCode,
                        privateEntity,
                        privateEntityOption,
                        senderCompanyName,
                        senderCity,
                        senderAddress,
                        senderZipCode,
                        senderCounty,
                        senderCountry,
                        senderVatNumber,
                        senderFiscalCode,
                        senderEMail,
                        senderLegalCode,
                        senderActivityCode});
            loginId = ((string)(results[1]));
            errorMessage = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubscribeAsync(
                    string company, 
                    string companyName, 
                    string city, 
                    string address, 
                    string zipCode, 
                    string county, 
                    string country, 
                    string prefixTelephoneNumber, 
                    string telephoneNumber, 
                    string vatNumber, 
                    string fiscalCode, 
                    string eMail, 
                    string legalCode, 
                    string activityCode, 
                    string areaCode, 
                    bool privateEntity, 
                    string privateEntityOption, 
                    string senderCompanyName, 
                    string senderCity, 
                    string senderAddress, 
                    string senderZipCode, 
                    string senderCounty, 
                    string senderCountry, 
                    string senderVatNumber, 
                    string senderFiscalCode, 
                    string senderEMail, 
                    string senderLegalCode, 
                    string senderActivityCode) {
            this.SubscribeAsync(company, companyName, city, address, zipCode, county, country, prefixTelephoneNumber, telephoneNumber, vatNumber, fiscalCode, eMail, legalCode, activityCode, areaCode, privateEntity, privateEntityOption, senderCompanyName, senderCity, senderAddress, senderZipCode, senderCounty, senderCountry, senderVatNumber, senderFiscalCode, senderEMail, senderLegalCode, senderActivityCode, null);
        }
        
        /// <remarks/>
        public void SubscribeAsync(
                    string company, 
                    string companyName, 
                    string city, 
                    string address, 
                    string zipCode, 
                    string county, 
                    string country, 
                    string prefixTelephoneNumber, 
                    string telephoneNumber, 
                    string vatNumber, 
                    string fiscalCode, 
                    string eMail, 
                    string legalCode, 
                    string activityCode, 
                    string areaCode, 
                    bool privateEntity, 
                    string privateEntityOption, 
                    string senderCompanyName, 
                    string senderCity, 
                    string senderAddress, 
                    string senderZipCode, 
                    string senderCounty, 
                    string senderCountry, 
                    string senderVatNumber, 
                    string senderFiscalCode, 
                    string senderEMail, 
                    string senderLegalCode, 
                    string senderActivityCode, 
                    object userState) {
            if ((this.SubscribeOperationCompleted == null)) {
                this.SubscribeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubscribeOperationCompleted);
            }
            this.InvokeAsync("Subscribe", new object[] {
                        company,
                        companyName,
                        city,
                        address,
                        zipCode,
                        county,
                        country,
                        prefixTelephoneNumber,
                        telephoneNumber,
                        vatNumber,
                        fiscalCode,
                        eMail,
                        legalCode,
                        activityCode,
                        areaCode,
                        privateEntity,
                        privateEntityOption,
                        senderCompanyName,
                        senderCity,
                        senderAddress,
                        senderZipCode,
                        senderCounty,
                        senderCountry,
                        senderVatNumber,
                        senderFiscalCode,
                        senderEMail,
                        senderLegalCode,
                        senderActivityCode}, this.SubscribeOperationCompleted, userState);
        }
        
        private void OnSubscribeOperationCompleted(object arg) {
            if ((this.SubscribeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubscribeCompleted(this, new SubscribeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/Init", RequestNamespace = "http://microarea.it/TbSender/", ResponseNamespace = "http://microarea.it/TbSender/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Init()
        {
            object[] results = this.Invoke("Init", new object[] {});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/IsAlive", RequestNamespace = "http://microarea.it/TbSender/", ResponseNamespace = "http://microarea.it/TbSender/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsAlive()
        {
            object[] results = this.Invoke("IsAlive", new object[] { });
            return ((bool)(results[0]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/Charge", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Charge(string company, string loginId, string token, string fileContentBase64, double amountCharge, double vat, double amountActivation, double totalAmount, out double credit, out System.DateTime expiryDate, out string errorMessage) {
            object[] results = this.Invoke("Charge", new object[] {
                        company,
                        loginId,
                        token,
                        fileContentBase64,
                        amountCharge,
                        vat,
                        amountActivation,
                        totalAmount});
            credit = ((double)(results[1]));
            expiryDate = ((System.DateTime)(results[2]));
            errorMessage = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChargeAsync(string company, string loginId, string token, string fileContentBase64, double amountCharge, double vat, double amountActivation, double totalAmount) {
            this.ChargeAsync(company, loginId, token, fileContentBase64, amountCharge, vat, amountActivation, totalAmount, null);
        }
        
        /// <remarks/>
        public void ChargeAsync(string company, string loginId, string token, string fileContentBase64, double amountCharge, double vat, double amountActivation, double totalAmount, object userState) {
            if ((this.ChargeOperationCompleted == null)) {
                this.ChargeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChargeOperationCompleted);
            }
            this.InvokeAsync("Charge", new object[] {
                        company,
                        loginId,
                        token,
                        fileContentBase64,
                        amountCharge,
                        vat,
                        amountActivation,
                        totalAmount}, this.ChargeOperationCompleted, userState);
        }
        
        private void OnChargeOperationCompleted(object arg) {
            if ((this.ChargeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChargeCompleted(this, new ChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/GetCadastralCode", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCadastralCode(string company, string city, out string errorMessage) {
            object[] results = this.Invoke("GetCadastralCode", new object[] {
                        company,
                        city});
            errorMessage = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCadastralCodeAsync(string company, string city) {
            this.GetCadastralCodeAsync(company, city, null);
        }
        
        /// <remarks/>
        public void GetCadastralCodeAsync(string company, string city, object userState) {
            if ((this.GetCadastralCodeOperationCompleted == null)) {
                this.GetCadastralCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCadastralCodeOperationCompleted);
            }
            this.InvokeAsync("GetCadastralCode", new object[] {
                        company,
                        city}, this.GetCadastralCodeOperationCompleted, userState);
        }
        
        private void OnGetCadastralCodeOperationCompleted(object arg) {
            if ((this.GetCadastralCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCadastralCodeCompleted(this, new GetCadastralCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/GetLegalInfos", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetLegalInfos(string company, string language, out string restrictiveClauses, out string iban, out string bankName, out string beneficiary, out string privacyPolicy, out string priceListUrl, out string termsOfUse, out string generalConditionsCharge, out string transparancyObligations, out string cadastralPageUrl, out double minimumRecharge, out string errorMessage) {
            object[] results = this.Invoke("GetLegalInfos", new object[] {
                        company,
                        language});
            restrictiveClauses = ((string)(results[1]));
            iban = ((string)(results[2]));
            bankName = ((string)(results[3]));
            beneficiary = ((string)(results[4]));
            privacyPolicy = ((string)(results[5]));
            priceListUrl = ((string)(results[6]));
            termsOfUse = ((string)(results[7]));
            generalConditionsCharge = ((string)(results[8]));
            transparancyObligations = ((string)(results[9]));
            cadastralPageUrl = ((string)(results[10]));
            minimumRecharge = ((double)(results[11]));
            errorMessage = ((string)(results[12]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetLegalInfosAsync(string company, string language) {
            this.GetLegalInfosAsync(company, language, null);
        }
        
        /// <remarks/>
        public void GetLegalInfosAsync(string company, string language, object userState) {
            if ((this.GetLegalInfosOperationCompleted == null)) {
                this.GetLegalInfosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLegalInfosOperationCompleted);
            }
            this.InvokeAsync("GetLegalInfos", new object[] {
                        company,
                        language}, this.GetLegalInfosOperationCompleted, userState);
        }
        
        private void OnGetLegalInfosOperationCompleted(object arg) {
            if ((this.GetLegalInfosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLegalInfosCompleted(this, new GetLegalInfosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/GetEstimateCharge", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetEstimateCharge(string company, string login, string token, double amountCharge, out double vat, out double amountActivation, out double totalAmount, out string iban, out string nameBank, out string beneficiary, out string errorMessage) {
            object[] results = this.Invoke("GetEstimateCharge", new object[] {
                        company,
                        login,
                        token,
                        amountCharge});
            vat = ((double)(results[1]));
            amountActivation = ((double)(results[2]));
            totalAmount = ((double)(results[3]));
            iban = ((string)(results[4]));
            nameBank = ((string)(results[5]));
            beneficiary = ((string)(results[6]));
            errorMessage = ((string)(results[7]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetEstimateChargeAsync(string company, string login, string token, double amountCharge) {
            this.GetEstimateChargeAsync(company, login, token, amountCharge, null);
        }
        
        /// <remarks/>
        public void GetEstimateChargeAsync(string company, string login, string token, double amountCharge, object userState) {
            if ((this.GetEstimateChargeOperationCompleted == null)) {
                this.GetEstimateChargeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEstimateChargeOperationCompleted);
            }
            this.InvokeAsync("GetEstimateCharge", new object[] {
                        company,
                        login,
                        token,
                        amountCharge}, this.GetEstimateChargeOperationCompleted, userState);
        }
        
        private void OnGetEstimateChargeOperationCompleted(object arg) {
            if ((this.GetEstimateChargeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEstimateChargeCompleted(this, new GetEstimateChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/UploadSingleLot", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadSingleLot(string company, int lotID, out string errorMessage) {
            object[] results = this.Invoke("UploadSingleLot", new object[] {
                        company,
                        lotID});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadSingleLotAsync(string company, int lotID) {
            this.UploadSingleLotAsync(company, lotID, null);
        }
        
        /// <remarks/>
        public void UploadSingleLotAsync(string company, int lotID, object userState) {
            if ((this.UploadSingleLotOperationCompleted == null)) {
                this.UploadSingleLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadSingleLotOperationCompleted);
            }
            this.InvokeAsync("UploadSingleLot", new object[] {
                        company,
                        lotID}, this.UploadSingleLotOperationCompleted, userState);
        }
        
        private void OnUploadSingleLotOperationCompleted(object arg) {
            if ((this.UploadSingleLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadSingleLotCompleted(this, new UploadSingleLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/UpdateSentLotsStatus", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateSentLotsStatus(string company, bool async, out string errorMessage) {
            object[] results = this.Invoke("UpdateSentLotsStatus", new object[] {
                        company,
                        async});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSentLotsStatusAsync(string company, bool async) {
            this.UpdateSentLotsStatusAsync(company, async, null);
        }
        
        /// <remarks/>
        public void UpdateSentLotsStatusAsync(string company, bool async, object userState) {
            if ((this.UpdateSentLotsStatusOperationCompleted == null)) {
                this.UpdateSentLotsStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSentLotsStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateSentLotsStatus", new object[] {
                        company,
                        async}, this.UpdateSentLotsStatusOperationCompleted, userState);
        }
        
        private void OnUpdateSentLotsStatusOperationCompleted(object arg) {
            if ((this.UpdateSentLotsStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSentLotsStatusCompleted(this, new UpdateSentLotsStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/GetLotCostEstimate", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetLotCostEstimate(string company, int lotID, out string errorMessage) {
            object[] results = this.Invoke("GetLotCostEstimate", new object[] {
                        company,
                        lotID});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetLotCostEstimateAsync(string company, int lotID) {
            this.GetLotCostEstimateAsync(company, lotID, null);
        }
        
        /// <remarks/>
        public void GetLotCostEstimateAsync(string company, int lotID, object userState) {
            if ((this.GetLotCostEstimateOperationCompleted == null)) {
                this.GetLotCostEstimateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLotCostEstimateOperationCompleted);
            }
            this.InvokeAsync("GetLotCostEstimate", new object[] {
                        company,
                        lotID}, this.GetLotCostEstimateOperationCompleted, userState);
        }
        
        private void OnGetLotCostEstimateOperationCompleted(object arg) {
            if ((this.GetLotCostEstimateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLotCostEstimateCompleted(this, new GetLotCostEstimateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/DoTick", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DoTick() {
            this.Invoke("DoTick", new object[0]);
        }
        
        /// <remarks/>
        public void DoTickAsync() {
            this.DoTickAsync(null);
        }
        
        /// <remarks/>
        public void DoTickAsync(object userState) {
            if ((this.DoTickOperationCompleted == null)) {
                this.DoTickOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoTickOperationCompleted);
            }
            this.InvokeAsync("DoTick", new object[0], this.DoTickOperationCompleted, userState);
        }
        
        private void OnDoTickOperationCompleted(object arg) {
            if ((this.DoTickCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoTickCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/WakeUp", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void WakeUp() {
            this.Invoke("WakeUp", new object[0]);
        }
        
        /// <remarks/>
        public void WakeUpAsync() {
            this.WakeUpAsync(null);
        }
        
        /// <remarks/>
        public void WakeUpAsync(object userState) {
            if ((this.WakeUpOperationCompleted == null)) {
                this.WakeUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWakeUpOperationCompleted);
            }
            this.InvokeAsync("WakeUp", new object[0], this.WakeUpOperationCompleted, userState);
        }
        
        private void OnWakeUpOperationCompleted(object arg) {
            if ((this.WakeUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WakeUpCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/RefreshSettings", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RefreshSettings() {
            this.Invoke("RefreshSettings", new object[0]);
        }
        
        /// <remarks/>
        public void RefreshSettingsAsync() {
            this.RefreshSettingsAsync(null);
        }
        
        /// <remarks/>
        public void RefreshSettingsAsync(object userState) {
            if ((this.RefreshSettingsOperationCompleted == null)) {
                this.RefreshSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefreshSettingsOperationCompleted);
            }
            this.InvokeAsync("RefreshSettings", new object[0], this.RefreshSettingsOperationCompleted, userState);
        }
        
        private void OnRefreshSettingsOperationCompleted(object arg) {
            if ((this.RefreshSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefreshSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/Login", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Login(
                    string company, 
                    string loginID, 
                    string password, 
                    out string surNameCompanyName, 
                    out string city, 
                    out string address, 
                    out string zipCode, 
                    out string county, 
                    out string state, 
                    out string prefixTelephoneNumber, 
                    out string telephoneNumber, 
                    out string vatNumber, 
                    out string fiscalCode, 
                    out string eMail, 
                    out string legalCode, 
                    out string activityCode, 
                    out string areaCode, 
                    out bool privateEntity, 
                    out string privateEntityOption, 
                    out string senderCompanyName, 
                    out string senderCity, 
                    out string senderAddress, 
                    out string senderZipCode, 
                    out string senderCounty, 
                    out string senderCountry, 
                    out string senderVatNumber, 
                    out string senderFiscalCode, 
                    out string senderEMail, 
                    out string senderLegalCode, 
                    out string senderActivityCode, 
                    out string errorMessage) {
            object[] results = this.Invoke("Login", new object[] {
                        company,
                        loginID,
                        password});
            surNameCompanyName = ((string)(results[1]));
            city = ((string)(results[2]));
            address = ((string)(results[3]));
            zipCode = ((string)(results[4]));
            county = ((string)(results[5]));
            state = ((string)(results[6]));
            prefixTelephoneNumber = ((string)(results[7]));
            telephoneNumber = ((string)(results[8]));
            vatNumber = ((string)(results[9]));
            fiscalCode = ((string)(results[10]));
            eMail = ((string)(results[11]));
            legalCode = ((string)(results[12]));
            activityCode = ((string)(results[13]));
            areaCode = ((string)(results[14]));
            privateEntity = ((bool)(results[15]));
            privateEntityOption = ((string)(results[16]));
            senderCompanyName = ((string)(results[17]));
            senderCity = ((string)(results[18]));
            senderAddress = ((string)(results[19]));
            senderZipCode = ((string)(results[20]));
            senderCounty = ((string)(results[21]));
            senderCountry = ((string)(results[22]));
            senderVatNumber = ((string)(results[23]));
            senderFiscalCode = ((string)(results[24]));
            senderEMail = ((string)(results[25]));
            senderLegalCode = ((string)(results[26]));
            senderActivityCode = ((string)(results[27]));
            errorMessage = ((string)(results[28]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string company, string loginID, string password) {
            this.LoginAsync(company, loginID, password, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string company, string loginID, string password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        company,
                        loginID,
                        password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/GetCreditState", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double GetCreditState(string company, string login, string token, out int codeState, out System.DateTime expiryDate, out string errorMessage) {
            object[] results = this.Invoke("GetCreditState", new object[] {
                        company,
                        login,
                        token});
            codeState = ((int)(results[1]));
            expiryDate = ((System.DateTime)(results[2]));
            errorMessage = ((string)(results[3]));
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void GetCreditStateAsync(string company, string login, string token) {
            this.GetCreditStateAsync(company, login, token, null);
        }
        
        /// <remarks/>
        public void GetCreditStateAsync(string company, string login, string token, object userState) {
            if ((this.GetCreditStateOperationCompleted == null)) {
                this.GetCreditStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCreditStateOperationCompleted);
            }
            this.InvokeAsync("GetCreditState", new object[] {
                        company,
                        login,
                        token}, this.GetCreditStateOperationCompleted, userState);
        }
        
        private void OnGetCreditStateOperationCompleted(object arg) {
            if ((this.GetCreditStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCreditStateCompleted(this, new GetCreditStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/AllotMessages", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AllotMessages(string company, out string errorMessage) {
            object[] results = this.Invoke("AllotMessages", new object[] {
                        company});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AllotMessagesAsync(string company) {
            this.AllotMessagesAsync(company, null);
        }
        
        /// <remarks/>
        public void AllotMessagesAsync(string company, object userState) {
            if ((this.AllotMessagesOperationCompleted == null)) {
                this.AllotMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAllotMessagesOperationCompleted);
            }
            this.InvokeAsync("AllotMessages", new object[] {
                        company}, this.AllotMessagesOperationCompleted, userState);
        }
        
        private void OnAllotMessagesOperationCompleted(object arg) {
            if ((this.AllotMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AllotMessagesCompleted(this, new AllotMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/ReopenClosedLot", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReopenClosedLot(string company, int lotId, out string errorMessage) {
            object[] results = this.Invoke("ReopenClosedLot", new object[] {
                        company,
                        lotId});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ReopenClosedLotAsync(string company, int lotId) {
            this.ReopenClosedLotAsync(company, lotId, null);
        }
        
        /// <remarks/>
        public void ReopenClosedLotAsync(string company, int lotId, object userState) {
            if ((this.ReopenClosedLotOperationCompleted == null)) {
                this.ReopenClosedLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReopenClosedLotOperationCompleted);
            }
            this.InvokeAsync("ReopenClosedLot", new object[] {
                        company,
                        lotId}, this.ReopenClosedLotOperationCompleted, userState);
        }
        
        private void OnReopenClosedLotOperationCompleted(object arg) {
            if ((this.ReopenClosedLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReopenClosedLotCompleted(this, new ReopenClosedLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/RemoveFromLot", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveFromLot(string company, int msgId, out string errorMessage) {
            object[] results = this.Invoke("RemoveFromLot", new object[] {
                        company,
                        msgId});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveFromLotAsync(string company, int msgId) {
            this.RemoveFromLotAsync(company, msgId, null);
        }
        
        /// <remarks/>
        public void RemoveFromLotAsync(string company, int msgId, object userState) {
            if ((this.RemoveFromLotOperationCompleted == null)) {
                this.RemoveFromLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveFromLotOperationCompleted);
            }
            this.InvokeAsync("RemoveFromLot", new object[] {
                        company,
                        msgId}, this.RemoveFromLotOperationCompleted, userState);
        }
        
        private void OnRemoveFromLotOperationCompleted(object arg) {
            if ((this.RemoveFromLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveFromLotCompleted(this, new RemoveFromLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/CloseLot", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CloseLot(string company, int lotId, out string errorMessage) {
            object[] results = this.Invoke("CloseLot", new object[] {
                        company,
                        lotId});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CloseLotAsync(string company, int lotId) {
            this.CloseLotAsync(company, lotId, null);
        }
        
        /// <remarks/>
        public void CloseLotAsync(string company, int lotId, object userState) {
            if ((this.CloseLotOperationCompleted == null)) {
                this.CloseLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseLotOperationCompleted);
            }
            this.InvokeAsync("CloseLot", new object[] {
                        company,
                        lotId}, this.CloseLotOperationCompleted, userState);
        }
        
        private void OnCloseLotOperationCompleted(object arg) {
            if ((this.CloseLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseLotCompleted(this, new CloseLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/CreateSingleMessageLot", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateSingleMessageLot(string company, int msgId, bool sendImmediately, out string errorMessage) {
            object[] results = this.Invoke("CreateSingleMessageLot", new object[] {
                        company,
                        msgId,
                        sendImmediately});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSingleMessageLotAsync(string company, int msgId, bool sendImmediately) {
            this.CreateSingleMessageLotAsync(company, msgId, sendImmediately, null);
        }
        
        /// <remarks/>
        public void CreateSingleMessageLotAsync(string company, int msgId, bool sendImmediately, object userState) {
            if ((this.CreateSingleMessageLotOperationCompleted == null)) {
                this.CreateSingleMessageLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSingleMessageLotOperationCompleted);
            }
            this.InvokeAsync("CreateSingleMessageLot", new object[] {
                        company,
                        msgId,
                        sendImmediately}, this.CreateSingleMessageLotOperationCompleted, userState);
        }
        
        private void OnCreateSingleMessageLotOperationCompleted(object arg) {
            if ((this.CreateSingleMessageLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSingleMessageLotCompleted(this, new CreateSingleMessageLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/DeleteMessage", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteMessage(string company, int msgId, out string errorMessage) {
            object[] results = this.Invoke("DeleteMessage", new object[] {
                        company,
                        msgId});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(string company, int msgId) {
            this.DeleteMessageAsync(company, msgId, null);
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(string company, int msgId, object userState) {
            if ((this.DeleteMessageOperationCompleted == null)) {
                this.DeleteMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMessageOperationCompleted);
            }
            this.InvokeAsync("DeleteMessage", new object[] {
                        company,
                        msgId}, this.DeleteMessageOperationCompleted, userState);
        }
        
        private void OnDeleteMessageOperationCompleted(object arg) {
            if ((this.DeleteMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMessageCompleted(this, new DeleteMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/ChangeMessageDeliveryType", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ChangeMessageDeliveryType(string company, int msgId, int deliveryType, out string errorMessage) {
            object[] results = this.Invoke("ChangeMessageDeliveryType", new object[] {
                        company,
                        msgId,
                        deliveryType});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeMessageDeliveryTypeAsync(string company, int msgId, int deliveryType) {
            this.ChangeMessageDeliveryTypeAsync(company, msgId, deliveryType, null);
        }
        
        /// <remarks/>
        public void ChangeMessageDeliveryTypeAsync(string company, int msgId, int deliveryType, object userState) {
            if ((this.ChangeMessageDeliveryTypeOperationCompleted == null)) {
                this.ChangeMessageDeliveryTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeMessageDeliveryTypeOperationCompleted);
            }
            this.InvokeAsync("ChangeMessageDeliveryType", new object[] {
                        company,
                        msgId,
                        deliveryType}, this.ChangeMessageDeliveryTypeOperationCompleted, userState);
        }
        
        private void OnChangeMessageDeliveryTypeOperationCompleted(object arg) {
            if ((this.ChangeMessageDeliveryTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeMessageDeliveryTypeCompleted(this, new ChangeMessageDeliveryTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbSender/ChangeMessagePrintType", RequestNamespace="http://microarea.it/TbSender/", ResponseNamespace="http://microarea.it/TbSender/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ChangeMessagePrintType(string company, int msgId, int printType, out string errorMessage) {
            object[] results = this.Invoke("ChangeMessagePrintType", new object[] {
                        company,
                        msgId,
                        printType});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeMessagePrintTypeAsync(string company, int msgId, int printType) {
            this.ChangeMessagePrintTypeAsync(company, msgId, printType, null);
        }
        
        /// <remarks/>
        public void ChangeMessagePrintTypeAsync(string company, int msgId, int printType, object userState) {
            if ((this.ChangeMessagePrintTypeOperationCompleted == null)) {
                this.ChangeMessagePrintTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeMessagePrintTypeOperationCompleted);
            }
            this.InvokeAsync("ChangeMessagePrintType", new object[] {
                        company,
                        msgId,
                        printType}, this.ChangeMessagePrintTypeOperationCompleted, userState);
        }
        
        private void OnChangeMessagePrintTypeOperationCompleted(object arg) {
            if ((this.ChangeMessagePrintTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeMessagePrintTypeCompleted(this, new ChangeMessagePrintTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SubscribeCompletedEventHandler(object sender, SubscribeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubscribeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubscribeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string loginId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ChargeCompletedEventHandler(object sender, ChargeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public double credit {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public System.DateTime expiryDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCadastralCodeCompletedEventHandler(object sender, GetCadastralCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCadastralCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCadastralCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLegalInfosCompletedEventHandler(object sender, GetLegalInfosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLegalInfosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLegalInfosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string restrictiveClauses {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string iban {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string bankName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string beneficiary {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string privacyPolicy {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string priceListUrl {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string termsOfUse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string generalConditionsCharge {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string transparancyObligations {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public string cadastralPageUrl {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public double minimumRecharge {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEstimateChargeCompletedEventHandler(object sender, GetEstimateChargeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEstimateChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEstimateChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public double vat {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public double amountActivation {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public double totalAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string iban {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string nameBank {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string beneficiary {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UploadSingleLotCompletedEventHandler(object sender, UploadSingleLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadSingleLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadSingleLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateSentLotsStatusCompletedEventHandler(object sender, UpdateSentLotsStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSentLotsStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSentLotsStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLotCostEstimateCompletedEventHandler(object sender, GetLotCostEstimateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLotCostEstimateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLotCostEstimateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DoTickCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void WakeUpCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RefreshSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string surNameCompanyName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string city {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string address {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string zipCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string county {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string state {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string prefixTelephoneNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string telephoneNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string vatNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public string fiscalCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string eMail {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string legalCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
        
        /// <remarks/>
        public string activityCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[13]));
            }
        }
        
        /// <remarks/>
        public string areaCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[14]));
            }
        }
        
        /// <remarks/>
        public bool privateEntity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[15]));
            }
        }
        
        /// <remarks/>
        public string privateEntityOption {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[16]));
            }
        }
        
        /// <remarks/>
        public string senderCompanyName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[17]));
            }
        }
        
        /// <remarks/>
        public string senderCity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[18]));
            }
        }
        
        /// <remarks/>
        public string senderAddress {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[19]));
            }
        }
        
        /// <remarks/>
        public string senderZipCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[20]));
            }
        }
        
        /// <remarks/>
        public string senderCounty {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[21]));
            }
        }
        
        /// <remarks/>
        public string senderCountry {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[22]));
            }
        }
        
        /// <remarks/>
        public string senderVatNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[23]));
            }
        }
        
        /// <remarks/>
        public string senderFiscalCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[24]));
            }
        }
        
        /// <remarks/>
        public string senderEMail {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[25]));
            }
        }
        
        /// <remarks/>
        public string senderLegalCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[26]));
            }
        }
        
        /// <remarks/>
        public string senderActivityCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[27]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[28]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCreditStateCompletedEventHandler(object sender, GetCreditStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCreditStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCreditStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int codeState {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public System.DateTime expiryDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AllotMessagesCompletedEventHandler(object sender, AllotMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AllotMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AllotMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReopenClosedLotCompletedEventHandler(object sender, ReopenClosedLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReopenClosedLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReopenClosedLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveFromLotCompletedEventHandler(object sender, RemoveFromLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveFromLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveFromLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CloseLotCompletedEventHandler(object sender, CloseLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CloseLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CloseLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateSingleMessageLotCompletedEventHandler(object sender, CreateSingleMessageLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSingleMessageLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSingleMessageLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteMessageCompletedEventHandler(object sender, DeleteMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ChangeMessageDeliveryTypeCompletedEventHandler(object sender, ChangeMessageDeliveryTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeMessageDeliveryTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeMessageDeliveryTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ChangeMessagePrintTypeCompletedEventHandler(object sender, ChangeMessagePrintTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeMessagePrintTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeMessagePrintTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591