//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microarea.TaskBuilderNet.Core.TbGenlibInterface
{


	[System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TBHeaderInfo", Namespace="urn:Microarea.Web.Services")]
    [System.SerializableAttribute()]
    public partial class TBHeaderInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthTokenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthToken {
            get {
                return this.AuthTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthTokenField, value) != true)) {
                    this.AuthTokenField = value;
                    this.RaisePropertyChanged("AuthToken");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
    [System.SerializableAttribute()]
    public partial class TBSoapFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:Microarea.Web.Services", ConfigurationName="TbGenlibInterface.TbGenlibUI")]
    public interface TbGenlibUI {
        
        // CODEGEN: Generating message contract since the operation ExecOpenText is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#ExecOpenText", ReplyAction="urn:Microarea.Web.Services/TbGenlibUI/ExecOpenTextResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TbGenlibUI/ExecOpenTextTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenTextOut ExecOpenText(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenTextIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#ExecOpenText", ReplyAction="urn:Microarea.Web.Services/TbGenlibUI/ExecOpenTextResponse")]
        System.IAsyncResult BeginExecOpenText(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenTextIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenTextOut EndExecOpenText(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation ExecOpenFormatter is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#ExecOpenFormatter", ReplyAction="urn:Microarea.Web.Services/TbGenlibUI/ExecOpenFormatterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TbGenlibUI/ExecOpenFormatterTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFormatterOut ExecOpenFormatter(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFormatterIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#ExecOpenFormatter", ReplyAction="urn:Microarea.Web.Services/TbGenlibUI/ExecOpenFormatterResponse")]
        System.IAsyncResult BeginExecOpenFormatter(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFormatterIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFormatterOut EndExecOpenFormatter(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation ExecOpenFont is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#ExecOpenFont", ReplyAction="urn:Microarea.Web.Services/TbGenlibUI/ExecOpenFontResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TbGenlibUI/ExecOpenFontTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFontOut ExecOpenFont(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFontIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#ExecOpenFont", ReplyAction="urn:Microarea.Web.Services/TbGenlibUI/ExecOpenFontResponse")]
        System.IAsyncResult BeginExecOpenFont(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFontIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFontOut EndExecOpenFont(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation ExecManageFile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#ExecManageFile", ReplyAction="urn:Microarea.Web.Services/TbGenlibUI/ExecManageFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TbGenlibUI/ExecManageFileTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecManageFileOut ExecManageFile(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecManageFileIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#ExecManageFile", ReplyAction="urn:Microarea.Web.Services/TbGenlibUI/ExecManageFileResponse")]
        System.IAsyncResult BeginExecManageFile(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecManageFileIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecManageFileOut EndExecManageFile(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation EnumsViewer is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#EnumsViewer", ReplyAction="urn:Microarea.Web.Services/TbGenlibUI/EnumsViewerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TbGenlibUI/EnumsViewerTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.EnumsViewerOut EnumsViewer(Microarea.TaskBuilderNet.Core.TbGenlibInterface.EnumsViewerIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#EnumsViewer", ReplyAction="urn:Microarea.Web.Services/TbGenlibUI/EnumsViewerResponse")]
        System.IAsyncResult BeginEnumsViewer(Microarea.TaskBuilderNet.Core.TbGenlibInterface.EnumsViewerIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.EnumsViewerOut EndEnumsViewer(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation SetApplicationDate is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#SetApplicationDate", ReplyAction="urn:Microarea.Web.Services/TbGenlibUI/SetApplicationDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TbGenlibUI/SetApplicationDateTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateOut SetApplicationDate(Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#SetApplicationDate", ReplyAction="urn:Microarea.Web.Services/TbGenlibUI/SetApplicationDateResponse")]
        System.IAsyncResult BeginSetApplicationDate(Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateOut EndSetApplicationDate(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation SetApplicationDateToSystemDate is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#SetApplicationDateToSystemDate", ReplyAction="urn:Microarea.Web.Services/TbGenlibUI/SetApplicationDateToSystemDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TbGenlibUI/SetApplicationDateToSystemDateTBSoapFaultFa" +
            "ult", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateToSystemDateOut SetApplicationDateToSystemDate(Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateToSystemDateIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#SetApplicationDateToSystemDate", ReplyAction="urn:Microarea.Web.Services/TbGenlibUI/SetApplicationDateToSystemDateResponse")]
        System.IAsyncResult BeginSetApplicationDateToSystemDate(Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateToSystemDateIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateToSystemDateOut EndSetApplicationDateToSystemDate(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation ShowAboutFramework is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#ShowAboutFramework", ReplyAction="urn:Microarea.Web.Services/TbGenlibUI/ShowAboutFrameworkResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TbGenlibUI/ShowAboutFrameworkTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ShowAboutFrameworkOut ShowAboutFramework(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ShowAboutFrameworkIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#ShowAboutFramework", ReplyAction="urn:Microarea.Web.Services/TbGenlibUI/ShowAboutFrameworkResponse")]
        System.IAsyncResult BeginShowAboutFramework(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ShowAboutFrameworkIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ShowAboutFrameworkOut EndShowAboutFramework(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ExecOpenTextIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo;
        
        public ExecOpenTextIn() {
        }
        
        public ExecOpenTextIn(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ExecOpenTextOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.ExecOpenText", Order=0)]
        public bool @return;
        
        public ExecOpenTextOut() {
        }
        
        public ExecOpenTextOut(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, bool @return) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ExecOpenFormatterIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo;
        
        public ExecOpenFormatterIn() {
        }
        
        public ExecOpenFormatterIn(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ExecOpenFormatterOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.ExecOpenFormatter", Order=0)]
        public bool @return;
        
        public ExecOpenFormatterOut() {
        }
        
        public ExecOpenFormatterOut(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, bool @return) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ExecOpenFontIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo;
        
        public ExecOpenFontIn() {
        }
        
        public ExecOpenFontIn(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ExecOpenFontOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.ExecOpenFont", Order=0)]
        public bool @return;
        
        public ExecOpenFontOut() {
        }
        
        public ExecOpenFontOut(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, bool @return) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ExecManageFileIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo;
        
        public ExecManageFileIn() {
        }
        
        public ExecManageFileIn(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ExecManageFileOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.ExecManageFile", Order=0)]
        public bool @return;
        
        public ExecManageFileOut() {
        }
        
        public ExecManageFileOut(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, bool @return) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class EnumsViewerIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo;
        
        public EnumsViewerIn() {
        }
        
        public EnumsViewerIn(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class EnumsViewerOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.EnumsViewer", Order=0)]
        public bool @return;
        
        public EnumsViewerOut() {
        }
        
        public EnumsViewerOut(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, bool @return) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetApplicationDateIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.SetApplicationDate", Order=0)]
        public string aDate;
        
        public SetApplicationDateIn() {
        }
        
        public SetApplicationDateIn(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, string aDate) {
            this.HeaderInfo = HeaderInfo;
            this.aDate = aDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetApplicationDateOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo;
        
        public SetApplicationDateOut() {
        }
        
        public SetApplicationDateOut(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetApplicationDateToSystemDateIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo;
        
        public SetApplicationDateToSystemDateIn() {
        }
        
        public SetApplicationDateToSystemDateIn(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetApplicationDateToSystemDateOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo;
        
        public SetApplicationDateToSystemDateOut() {
        }
        
        public SetApplicationDateToSystemDateOut(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ShowAboutFrameworkIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo;
        
        public ShowAboutFrameworkIn() {
        }
        
        public ShowAboutFrameworkIn(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ShowAboutFrameworkOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo;
        
        public ShowAboutFrameworkOut() {
        }
        
        public ShowAboutFrameworkOut(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TbGenlibUIChannel : Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecOpenTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecOpenTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecOpenFormatterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecOpenFormatterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecOpenFontCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecOpenFontCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecManageFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecManageFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EnumsViewerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EnumsViewerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetApplicationDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetApplicationDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetApplicationDateToSystemDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetApplicationDateToSystemDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShowAboutFrameworkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ShowAboutFrameworkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TbGenlibUIClient : System.ServiceModel.ClientBase<Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI>, Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI {
        
        private BeginOperationDelegate onBeginExecOpenTextDelegate;
        
        private EndOperationDelegate onEndExecOpenTextDelegate;
        
        private System.Threading.SendOrPostCallback onExecOpenTextCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecOpenFormatterDelegate;
        
        private EndOperationDelegate onEndExecOpenFormatterDelegate;
        
        private System.Threading.SendOrPostCallback onExecOpenFormatterCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecOpenFontDelegate;
        
        private EndOperationDelegate onEndExecOpenFontDelegate;
        
        private System.Threading.SendOrPostCallback onExecOpenFontCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecManageFileDelegate;
        
        private EndOperationDelegate onEndExecManageFileDelegate;
        
        private System.Threading.SendOrPostCallback onExecManageFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginEnumsViewerDelegate;
        
        private EndOperationDelegate onEndEnumsViewerDelegate;
        
        private System.Threading.SendOrPostCallback onEnumsViewerCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetApplicationDateDelegate;
        
        private EndOperationDelegate onEndSetApplicationDateDelegate;
        
        private System.Threading.SendOrPostCallback onSetApplicationDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetApplicationDateToSystemDateDelegate;
        
        private EndOperationDelegate onEndSetApplicationDateToSystemDateDelegate;
        
        private System.Threading.SendOrPostCallback onSetApplicationDateToSystemDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginShowAboutFrameworkDelegate;
        
        private EndOperationDelegate onEndShowAboutFrameworkDelegate;
        
        private System.Threading.SendOrPostCallback onShowAboutFrameworkCompletedDelegate;
        
        public TbGenlibUIClient() {
        }
        
        public TbGenlibUIClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TbGenlibUIClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TbGenlibUIClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TbGenlibUIClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<ExecOpenTextCompletedEventArgs> ExecOpenTextCompleted;
        
        public event System.EventHandler<ExecOpenFormatterCompletedEventArgs> ExecOpenFormatterCompleted;
        
        public event System.EventHandler<ExecOpenFontCompletedEventArgs> ExecOpenFontCompleted;
        
        public event System.EventHandler<ExecManageFileCompletedEventArgs> ExecManageFileCompleted;
        
        public event System.EventHandler<EnumsViewerCompletedEventArgs> EnumsViewerCompleted;
        
        public event System.EventHandler<SetApplicationDateCompletedEventArgs> SetApplicationDateCompleted;
        
        public event System.EventHandler<SetApplicationDateToSystemDateCompletedEventArgs> SetApplicationDateToSystemDateCompleted;
        
        public event System.EventHandler<ShowAboutFrameworkCompletedEventArgs> ShowAboutFrameworkCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenTextOut Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.ExecOpenText(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenTextIn request) {
            return base.Channel.ExecOpenText(request);
        }
        
        public bool ExecOpenText(ref Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenTextIn inValue = new Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenTextIn();
            inValue.HeaderInfo = HeaderInfo;
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenTextOut retVal = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).ExecOpenText(inValue);
            HeaderInfo = retVal.HeaderInfo;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.BeginExecOpenText(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenTextIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecOpenText(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecOpenText(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenTextIn inValue = new Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenTextIn();
            inValue.HeaderInfo = HeaderInfo;
            return ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).BeginExecOpenText(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenTextOut Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.EndExecOpenText(System.IAsyncResult result) {
            return base.Channel.EndExecOpenText(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo EndExecOpenText(System.IAsyncResult result, out bool @return) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenTextOut retVal = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).EndExecOpenText(result);
            @return = retVal.@return;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginExecOpenText(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo)(inValues[0]));
            return this.BeginExecOpenText(HeaderInfo, callback, asyncState);
        }
        
        private object[] OnEndExecOpenText(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo retVal = this.EndExecOpenText(result, out @return);
            return new object[] {
                    @return,
                    retVal};
        }
        
        private void OnExecOpenTextCompleted(object state) {
            if ((this.ExecOpenTextCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecOpenTextCompleted(this, new ExecOpenTextCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecOpenTextAsync(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            this.ExecOpenTextAsync(HeaderInfo, null);
        }
        
        public void ExecOpenTextAsync(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, object userState) {
            if ((this.onBeginExecOpenTextDelegate == null)) {
                this.onBeginExecOpenTextDelegate = new BeginOperationDelegate(this.OnBeginExecOpenText);
            }
            if ((this.onEndExecOpenTextDelegate == null)) {
                this.onEndExecOpenTextDelegate = new EndOperationDelegate(this.OnEndExecOpenText);
            }
            if ((this.onExecOpenTextCompletedDelegate == null)) {
                this.onExecOpenTextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecOpenTextCompleted);
            }
            base.InvokeAsync(this.onBeginExecOpenTextDelegate, new object[] {
                        HeaderInfo}, this.onEndExecOpenTextDelegate, this.onExecOpenTextCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFormatterOut Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.ExecOpenFormatter(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFormatterIn request) {
            return base.Channel.ExecOpenFormatter(request);
        }
        
        public bool ExecOpenFormatter(ref Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFormatterIn inValue = new Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFormatterIn();
            inValue.HeaderInfo = HeaderInfo;
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFormatterOut retVal = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).ExecOpenFormatter(inValue);
            HeaderInfo = retVal.HeaderInfo;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.BeginExecOpenFormatter(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFormatterIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecOpenFormatter(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecOpenFormatter(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFormatterIn inValue = new Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFormatterIn();
            inValue.HeaderInfo = HeaderInfo;
            return ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).BeginExecOpenFormatter(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFormatterOut Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.EndExecOpenFormatter(System.IAsyncResult result) {
            return base.Channel.EndExecOpenFormatter(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo EndExecOpenFormatter(System.IAsyncResult result, out bool @return) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFormatterOut retVal = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).EndExecOpenFormatter(result);
            @return = retVal.@return;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginExecOpenFormatter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo)(inValues[0]));
            return this.BeginExecOpenFormatter(HeaderInfo, callback, asyncState);
        }
        
        private object[] OnEndExecOpenFormatter(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo retVal = this.EndExecOpenFormatter(result, out @return);
            return new object[] {
                    @return,
                    retVal};
        }
        
        private void OnExecOpenFormatterCompleted(object state) {
            if ((this.ExecOpenFormatterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecOpenFormatterCompleted(this, new ExecOpenFormatterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecOpenFormatterAsync(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            this.ExecOpenFormatterAsync(HeaderInfo, null);
        }
        
        public void ExecOpenFormatterAsync(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, object userState) {
            if ((this.onBeginExecOpenFormatterDelegate == null)) {
                this.onBeginExecOpenFormatterDelegate = new BeginOperationDelegate(this.OnBeginExecOpenFormatter);
            }
            if ((this.onEndExecOpenFormatterDelegate == null)) {
                this.onEndExecOpenFormatterDelegate = new EndOperationDelegate(this.OnEndExecOpenFormatter);
            }
            if ((this.onExecOpenFormatterCompletedDelegate == null)) {
                this.onExecOpenFormatterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecOpenFormatterCompleted);
            }
            base.InvokeAsync(this.onBeginExecOpenFormatterDelegate, new object[] {
                        HeaderInfo}, this.onEndExecOpenFormatterDelegate, this.onExecOpenFormatterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFontOut Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.ExecOpenFont(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFontIn request) {
            return base.Channel.ExecOpenFont(request);
        }
        
        public bool ExecOpenFont(ref Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFontIn inValue = new Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFontIn();
            inValue.HeaderInfo = HeaderInfo;
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFontOut retVal = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).ExecOpenFont(inValue);
            HeaderInfo = retVal.HeaderInfo;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.BeginExecOpenFont(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFontIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecOpenFont(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecOpenFont(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFontIn inValue = new Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFontIn();
            inValue.HeaderInfo = HeaderInfo;
            return ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).BeginExecOpenFont(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFontOut Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.EndExecOpenFont(System.IAsyncResult result) {
            return base.Channel.EndExecOpenFont(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo EndExecOpenFont(System.IAsyncResult result, out bool @return) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecOpenFontOut retVal = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).EndExecOpenFont(result);
            @return = retVal.@return;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginExecOpenFont(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo)(inValues[0]));
            return this.BeginExecOpenFont(HeaderInfo, callback, asyncState);
        }
        
        private object[] OnEndExecOpenFont(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo retVal = this.EndExecOpenFont(result, out @return);
            return new object[] {
                    @return,
                    retVal};
        }
        
        private void OnExecOpenFontCompleted(object state) {
            if ((this.ExecOpenFontCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecOpenFontCompleted(this, new ExecOpenFontCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecOpenFontAsync(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            this.ExecOpenFontAsync(HeaderInfo, null);
        }
        
        public void ExecOpenFontAsync(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, object userState) {
            if ((this.onBeginExecOpenFontDelegate == null)) {
                this.onBeginExecOpenFontDelegate = new BeginOperationDelegate(this.OnBeginExecOpenFont);
            }
            if ((this.onEndExecOpenFontDelegate == null)) {
                this.onEndExecOpenFontDelegate = new EndOperationDelegate(this.OnEndExecOpenFont);
            }
            if ((this.onExecOpenFontCompletedDelegate == null)) {
                this.onExecOpenFontCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecOpenFontCompleted);
            }
            base.InvokeAsync(this.onBeginExecOpenFontDelegate, new object[] {
                        HeaderInfo}, this.onEndExecOpenFontDelegate, this.onExecOpenFontCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecManageFileOut Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.ExecManageFile(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecManageFileIn request) {
            return base.Channel.ExecManageFile(request);
        }
        
        public bool ExecManageFile(ref Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecManageFileIn inValue = new Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecManageFileIn();
            inValue.HeaderInfo = HeaderInfo;
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecManageFileOut retVal = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).ExecManageFile(inValue);
            HeaderInfo = retVal.HeaderInfo;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.BeginExecManageFile(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecManageFileIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecManageFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecManageFile(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecManageFileIn inValue = new Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecManageFileIn();
            inValue.HeaderInfo = HeaderInfo;
            return ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).BeginExecManageFile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecManageFileOut Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.EndExecManageFile(System.IAsyncResult result) {
            return base.Channel.EndExecManageFile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo EndExecManageFile(System.IAsyncResult result, out bool @return) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ExecManageFileOut retVal = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).EndExecManageFile(result);
            @return = retVal.@return;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginExecManageFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo)(inValues[0]));
            return this.BeginExecManageFile(HeaderInfo, callback, asyncState);
        }
        
        private object[] OnEndExecManageFile(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo retVal = this.EndExecManageFile(result, out @return);
            return new object[] {
                    @return,
                    retVal};
        }
        
        private void OnExecManageFileCompleted(object state) {
            if ((this.ExecManageFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecManageFileCompleted(this, new ExecManageFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecManageFileAsync(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            this.ExecManageFileAsync(HeaderInfo, null);
        }
        
        public void ExecManageFileAsync(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, object userState) {
            if ((this.onBeginExecManageFileDelegate == null)) {
                this.onBeginExecManageFileDelegate = new BeginOperationDelegate(this.OnBeginExecManageFile);
            }
            if ((this.onEndExecManageFileDelegate == null)) {
                this.onEndExecManageFileDelegate = new EndOperationDelegate(this.OnEndExecManageFile);
            }
            if ((this.onExecManageFileCompletedDelegate == null)) {
                this.onExecManageFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecManageFileCompleted);
            }
            base.InvokeAsync(this.onBeginExecManageFileDelegate, new object[] {
                        HeaderInfo}, this.onEndExecManageFileDelegate, this.onExecManageFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.EnumsViewerOut Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.EnumsViewer(Microarea.TaskBuilderNet.Core.TbGenlibInterface.EnumsViewerIn request) {
            return base.Channel.EnumsViewer(request);
        }
        
        public bool EnumsViewer(ref Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.EnumsViewerIn inValue = new Microarea.TaskBuilderNet.Core.TbGenlibInterface.EnumsViewerIn();
            inValue.HeaderInfo = HeaderInfo;
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.EnumsViewerOut retVal = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).EnumsViewer(inValue);
            HeaderInfo = retVal.HeaderInfo;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.BeginEnumsViewer(Microarea.TaskBuilderNet.Core.TbGenlibInterface.EnumsViewerIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEnumsViewer(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEnumsViewer(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.EnumsViewerIn inValue = new Microarea.TaskBuilderNet.Core.TbGenlibInterface.EnumsViewerIn();
            inValue.HeaderInfo = HeaderInfo;
            return ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).BeginEnumsViewer(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.EnumsViewerOut Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.EndEnumsViewer(System.IAsyncResult result) {
            return base.Channel.EndEnumsViewer(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo EndEnumsViewer(System.IAsyncResult result, out bool @return) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.EnumsViewerOut retVal = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).EndEnumsViewer(result);
            @return = retVal.@return;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginEnumsViewer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo)(inValues[0]));
            return this.BeginEnumsViewer(HeaderInfo, callback, asyncState);
        }
        
        private object[] OnEndEnumsViewer(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo retVal = this.EndEnumsViewer(result, out @return);
            return new object[] {
                    @return,
                    retVal};
        }
        
        private void OnEnumsViewerCompleted(object state) {
            if ((this.EnumsViewerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EnumsViewerCompleted(this, new EnumsViewerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EnumsViewerAsync(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            this.EnumsViewerAsync(HeaderInfo, null);
        }
        
        public void EnumsViewerAsync(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, object userState) {
            if ((this.onBeginEnumsViewerDelegate == null)) {
                this.onBeginEnumsViewerDelegate = new BeginOperationDelegate(this.OnBeginEnumsViewer);
            }
            if ((this.onEndEnumsViewerDelegate == null)) {
                this.onEndEnumsViewerDelegate = new EndOperationDelegate(this.OnEndEnumsViewer);
            }
            if ((this.onEnumsViewerCompletedDelegate == null)) {
                this.onEnumsViewerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEnumsViewerCompleted);
            }
            base.InvokeAsync(this.onBeginEnumsViewerDelegate, new object[] {
                        HeaderInfo}, this.onEndEnumsViewerDelegate, this.onEnumsViewerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateOut Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.SetApplicationDate(Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateIn request) {
            return base.Channel.SetApplicationDate(request);
        }
        
        public void SetApplicationDate(ref Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, string aDate) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateIn inValue = new Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.aDate = aDate;
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateOut retVal = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).SetApplicationDate(inValue);
            HeaderInfo = retVal.HeaderInfo;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.BeginSetApplicationDate(Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetApplicationDate(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetApplicationDate(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, string aDate, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateIn inValue = new Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.aDate = aDate;
            return ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).BeginSetApplicationDate(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateOut Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.EndSetApplicationDate(System.IAsyncResult result) {
            return base.Channel.EndSetApplicationDate(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo EndSetApplicationDate(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateOut retVal = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).EndSetApplicationDate(result);
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginSetApplicationDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo)(inValues[0]));
            string aDate = ((string)(inValues[1]));
            return this.BeginSetApplicationDate(HeaderInfo, aDate, callback, asyncState);
        }
        
        private object[] OnEndSetApplicationDate(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo retVal = this.EndSetApplicationDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetApplicationDateCompleted(object state) {
            if ((this.SetApplicationDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetApplicationDateCompleted(this, new SetApplicationDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetApplicationDateAsync(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, string aDate) {
            this.SetApplicationDateAsync(HeaderInfo, aDate, null);
        }
        
        public void SetApplicationDateAsync(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, string aDate, object userState) {
            if ((this.onBeginSetApplicationDateDelegate == null)) {
                this.onBeginSetApplicationDateDelegate = new BeginOperationDelegate(this.OnBeginSetApplicationDate);
            }
            if ((this.onEndSetApplicationDateDelegate == null)) {
                this.onEndSetApplicationDateDelegate = new EndOperationDelegate(this.OnEndSetApplicationDate);
            }
            if ((this.onSetApplicationDateCompletedDelegate == null)) {
                this.onSetApplicationDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetApplicationDateCompleted);
            }
            base.InvokeAsync(this.onBeginSetApplicationDateDelegate, new object[] {
                        HeaderInfo,
                        aDate}, this.onEndSetApplicationDateDelegate, this.onSetApplicationDateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateToSystemDateOut Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.SetApplicationDateToSystemDate(Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateToSystemDateIn request) {
            return base.Channel.SetApplicationDateToSystemDate(request);
        }
        
        public void SetApplicationDateToSystemDate(ref Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateToSystemDateIn inValue = new Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateToSystemDateIn();
            inValue.HeaderInfo = HeaderInfo;
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateToSystemDateOut retVal = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).SetApplicationDateToSystemDate(inValue);
            HeaderInfo = retVal.HeaderInfo;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.BeginSetApplicationDateToSystemDate(Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateToSystemDateIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetApplicationDateToSystemDate(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetApplicationDateToSystemDate(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateToSystemDateIn inValue = new Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateToSystemDateIn();
            inValue.HeaderInfo = HeaderInfo;
            return ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).BeginSetApplicationDateToSystemDate(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateToSystemDateOut Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.EndSetApplicationDateToSystemDate(System.IAsyncResult result) {
            return base.Channel.EndSetApplicationDateToSystemDate(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo EndSetApplicationDateToSystemDate(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.SetApplicationDateToSystemDateOut retVal = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).EndSetApplicationDateToSystemDate(result);
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginSetApplicationDateToSystemDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo)(inValues[0]));
            return this.BeginSetApplicationDateToSystemDate(HeaderInfo, callback, asyncState);
        }
        
        private object[] OnEndSetApplicationDateToSystemDate(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo retVal = this.EndSetApplicationDateToSystemDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetApplicationDateToSystemDateCompleted(object state) {
            if ((this.SetApplicationDateToSystemDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetApplicationDateToSystemDateCompleted(this, new SetApplicationDateToSystemDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetApplicationDateToSystemDateAsync(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            this.SetApplicationDateToSystemDateAsync(HeaderInfo, null);
        }
        
        public void SetApplicationDateToSystemDateAsync(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, object userState) {
            if ((this.onBeginSetApplicationDateToSystemDateDelegate == null)) {
                this.onBeginSetApplicationDateToSystemDateDelegate = new BeginOperationDelegate(this.OnBeginSetApplicationDateToSystemDate);
            }
            if ((this.onEndSetApplicationDateToSystemDateDelegate == null)) {
                this.onEndSetApplicationDateToSystemDateDelegate = new EndOperationDelegate(this.OnEndSetApplicationDateToSystemDate);
            }
            if ((this.onSetApplicationDateToSystemDateCompletedDelegate == null)) {
                this.onSetApplicationDateToSystemDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetApplicationDateToSystemDateCompleted);
            }
            base.InvokeAsync(this.onBeginSetApplicationDateToSystemDateDelegate, new object[] {
                        HeaderInfo}, this.onEndSetApplicationDateToSystemDateDelegate, this.onSetApplicationDateToSystemDateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ShowAboutFrameworkOut Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.ShowAboutFramework(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ShowAboutFrameworkIn request) {
            return base.Channel.ShowAboutFramework(request);
        }
        
        public void ShowAboutFramework(ref Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ShowAboutFrameworkIn inValue = new Microarea.TaskBuilderNet.Core.TbGenlibInterface.ShowAboutFrameworkIn();
            inValue.HeaderInfo = HeaderInfo;
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ShowAboutFrameworkOut retVal = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).ShowAboutFramework(inValue);
            HeaderInfo = retVal.HeaderInfo;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.BeginShowAboutFramework(Microarea.TaskBuilderNet.Core.TbGenlibInterface.ShowAboutFrameworkIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginShowAboutFramework(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginShowAboutFramework(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ShowAboutFrameworkIn inValue = new Microarea.TaskBuilderNet.Core.TbGenlibInterface.ShowAboutFrameworkIn();
            inValue.HeaderInfo = HeaderInfo;
            return ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).BeginShowAboutFramework(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbGenlibInterface.ShowAboutFrameworkOut Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI.EndShowAboutFramework(System.IAsyncResult result) {
            return base.Channel.EndShowAboutFramework(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo EndShowAboutFramework(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.ShowAboutFrameworkOut retVal = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TbGenlibUI)(this)).EndShowAboutFramework(result);
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginShowAboutFramework(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo)(inValues[0]));
            return this.BeginShowAboutFramework(HeaderInfo, callback, asyncState);
        }
        
        private object[] OnEndShowAboutFramework(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo retVal = this.EndShowAboutFramework(result);
            return new object[] {
                    retVal};
        }
        
        private void OnShowAboutFrameworkCompleted(object state) {
            if ((this.ShowAboutFrameworkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ShowAboutFrameworkCompleted(this, new ShowAboutFrameworkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ShowAboutFrameworkAsync(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo) {
            this.ShowAboutFrameworkAsync(HeaderInfo, null);
        }
        
        public void ShowAboutFrameworkAsync(Microarea.TaskBuilderNet.Core.TbGenlibInterface.TBHeaderInfo HeaderInfo, object userState) {
            if ((this.onBeginShowAboutFrameworkDelegate == null)) {
                this.onBeginShowAboutFrameworkDelegate = new BeginOperationDelegate(this.OnBeginShowAboutFramework);
            }
            if ((this.onEndShowAboutFrameworkDelegate == null)) {
                this.onEndShowAboutFrameworkDelegate = new EndOperationDelegate(this.OnEndShowAboutFramework);
            }
            if ((this.onShowAboutFrameworkCompletedDelegate == null)) {
                this.onShowAboutFrameworkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnShowAboutFrameworkCompleted);
            }
            base.InvokeAsync(this.onBeginShowAboutFrameworkDelegate, new object[] {
                        HeaderInfo}, this.onEndShowAboutFrameworkDelegate, this.onShowAboutFrameworkCompletedDelegate, userState);
        }
    }
}
