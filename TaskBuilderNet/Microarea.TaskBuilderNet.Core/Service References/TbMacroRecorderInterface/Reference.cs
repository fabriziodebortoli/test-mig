//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface
{


	[System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TBHeaderInfo", Namespace="urn:Microarea.Web.Services")]
    [System.SerializableAttribute()]
    public partial class TBHeaderInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthTokenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthToken {
            get {
                return this.AuthTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthTokenField, value) != true)) {
                    this.AuthTokenField = value;
                    this.RaisePropertyChanged("AuthToken");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
    [System.SerializableAttribute()]
    public partial class TBSoapFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:Microarea.Web.Services", ConfigurationName="TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder")]
    public interface TBMacroRecorderTBMacroRecorder {
        
        // CODEGEN: Generating message contract since the operation SetTestPlan is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#SetTestPlan", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/SetTestPlanResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/SetTestPlanTBSoapFaultF" +
            "ault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTestPlanOut SetTestPlan(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTestPlanIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#SetTestPlan", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/SetTestPlanResponse")]
        System.IAsyncResult BeginSetTestPlan(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTestPlanIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTestPlanOut EndSetTestPlan(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation PlayStep is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#PlayStep", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/PlayStepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/PlayStepTBSoapFaultFaul" +
            "t", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayStepOut PlayStep(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayStepIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#PlayStep", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/PlayStepResponse")]
        System.IAsyncResult BeginPlayStep(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayStepIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayStepOut EndPlayStep(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation Record is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#Record", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOut Record(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#Record", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordResponse")]
        System.IAsyncResult BeginRecord(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOut EndRecord(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation StopRecord is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#StopRecord", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/StopRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/StopRecordTBSoapFaultFa" +
            "ult", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.StopRecordOut StopRecord(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.StopRecordIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#StopRecord", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/StopRecordResponse")]
        System.IAsyncResult BeginStopRecord(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.StopRecordIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.StopRecordOut EndStopRecord(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation SetTPManagerHandle is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#SetTPManagerHandle", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/SetTPManagerHandleRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/SetTPManagerHandleTBSoa" +
            "pFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTPManagerHandleOut SetTPManagerHandle(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTPManagerHandleIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#SetTPManagerHandle", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/SetTPManagerHandleRespo" +
            "nse")]
        System.IAsyncResult BeginSetTPManagerHandle(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTPManagerHandleIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTPManagerHandleOut EndSetTPManagerHandle(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation RecordMessageBox is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#RecordMessageBox", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordMessageBoxRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordMessageBoxTBSoapF" +
            "aultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordMessageBoxOut RecordMessageBox(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordMessageBoxIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#RecordMessageBox", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordMessageBoxRespons" +
            "e")]
        System.IAsyncResult BeginRecordMessageBox(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordMessageBoxIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordMessageBoxOut EndRecordMessageBox(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation PlayMessageBox is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#PlayMessageBox", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/PlayMessageBoxResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/PlayMessageBoxTBSoapFau" +
            "ltFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayMessageBoxOut PlayMessageBox(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayMessageBoxIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#PlayMessageBox", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/PlayMessageBoxResponse")]
        System.IAsyncResult BeginPlayMessageBox(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayMessageBoxIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayMessageBoxOut EndPlayMessageBox(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation RecordParsedAction is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#RecordParsedAction", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordParsedActionRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordParsedActionTBSoa" +
            "pFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordParsedActionOut RecordParsedAction(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordParsedActionIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#RecordParsedAction", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordParsedActionRespo" +
            "nse")]
        System.IAsyncResult BeginRecordParsedAction(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordParsedActionIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordParsedActionOut EndRecordParsedAction(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation RecordActivateParsedDialog is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#RecordActivateParsedDialog", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordActivateParsedDia" +
            "logResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordActivateParsedDia" +
            "logTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordActivateParsedDialogOut RecordActivateParsedDialog(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordActivateParsedDialogIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#RecordActivateParsedDialog", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordActivateParsedDia" +
            "logResponse")]
        System.IAsyncResult BeginRecordActivateParsedDialog(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordActivateParsedDialogIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordActivateParsedDialogOut EndRecordActivateParsedDialog(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation RecordCloseParsedDialog is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#RecordCloseParsedDialog", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordCloseParsedDialog" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordCloseParsedDialog" +
            "TBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseParsedDialogOut RecordCloseParsedDialog(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseParsedDialogIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#RecordCloseParsedDialog", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordCloseParsedDialog" +
            "Response")]
        System.IAsyncResult BeginRecordCloseParsedDialog(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseParsedDialogIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseParsedDialogOut EndRecordCloseParsedDialog(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation RecordOpenDocument is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#RecordOpenDocument", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordOpenDocumentRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordOpenDocumentTBSoa" +
            "pFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOpenDocumentOut RecordOpenDocument(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOpenDocumentIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#RecordOpenDocument", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordOpenDocumentRespo" +
            "nse")]
        System.IAsyncResult BeginRecordOpenDocument(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOpenDocumentIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOpenDocumentOut EndRecordOpenDocument(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation RecordCloseDocument is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#RecordCloseDocument", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordCloseDocumentResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordCloseDocumentTBSo" +
            "apFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseDocumentOut RecordCloseDocument(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseDocumentIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#RecordCloseDocument", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordCloseDocumentResp" +
            "onse")]
        System.IAsyncResult BeginRecordCloseDocument(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseDocumentIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseDocumentOut EndRecordCloseDocument(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation RecordReportValidation is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#RecordReportValidation", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordReportValidationR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordReportValidationT" +
            "BSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordReportValidationOut RecordReportValidation(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordReportValidationIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#RecordReportValidation", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordReportValidationR" +
            "esponse")]
        System.IAsyncResult BeginRecordReportValidation(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordReportValidationIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordReportValidationOut EndRecordReportValidation(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation RecordCloseReport is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#RecordCloseReport", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordCloseReportRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordCloseReportTBSoap" +
            "FaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseReportOut RecordCloseReport(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseReportIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#RecordCloseReport", ReplyAction="urn:Microarea.Web.Services/TBMacroRecorderTBMacroRecorder/RecordCloseReportRespon" +
            "se")]
        System.IAsyncResult BeginRecordCloseReport(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseReportIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseReportOut EndRecordCloseReport(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetTestPlanIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.SetTestPlan", Order=0)]
        public string xmlTestPlan;
        
        public SetTestPlanIn() {
        }
        
        public SetTestPlanIn(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string xmlTestPlan) {
            this.HeaderInfo = HeaderInfo;
            this.xmlTestPlan = xmlTestPlan;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetTestPlanOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.SetTestPlan", Order=0)]
        public bool @return;
        
        public SetTestPlanOut() {
        }
        
        public SetTestPlanOut(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, bool @return) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class PlayStepIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.PlayStep", Order=0)]
        public int step;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.PlayStep", Order=1)]
        public bool bIsInStepByStep;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.PlayStep", Order=2)]
        public string[] messages;
        
        public PlayStepIn() {
        }
        
        public PlayStepIn(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int step, bool bIsInStepByStep, string[] messages) {
            this.HeaderInfo = HeaderInfo;
            this.step = step;
            this.bIsInStepByStep = bIsInStepByStep;
            this.messages = messages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class PlayStepOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.PlayStep", Order=0)]
        public int @return;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.PlayStep", Order=1)]
        public string[] messages;
        
        public PlayStepOut() {
        }
        
        public PlayStepOut(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int @return, string[] messages) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
            this.messages = messages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        public RecordIn() {
        }
        
        public RecordIn(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        public RecordOut() {
        }
        
        public RecordOut(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class StopRecordIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        public StopRecordIn() {
        }
        
        public StopRecordIn(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class StopRecordOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        public StopRecordOut() {
        }
        
        public StopRecordOut(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetTPManagerHandleIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.SetTPManagerHandle", Order=0)]
        public int handle;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.SetTPManagerHandle", Order=1)]
        public int tbProcessId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.SetTPManagerHandle", Order=2)]
        public bool isVs2005;
        
        public SetTPManagerHandleIn() {
        }
        
        public SetTPManagerHandleIn(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int handle, int tbProcessId, bool isVs2005) {
            this.HeaderInfo = HeaderInfo;
            this.handle = handle;
            this.tbProcessId = tbProcessId;
            this.isVs2005 = isVs2005;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetTPManagerHandleOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.SetTPManagerHandle", Order=0)]
        public int tbProcessId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.SetTPManagerHandle", Order=1)]
        public bool isVs2005;
        
        public SetTPManagerHandleOut() {
        }
        
        public SetTPManagerHandleOut(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int tbProcessId, bool isVs2005) {
            this.HeaderInfo = HeaderInfo;
            this.tbProcessId = tbProcessId;
            this.isVs2005 = isVs2005;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordMessageBoxIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RecordMessageBox", Order=0)]
        public string msgText;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RecordMessageBox", Order=1)]
        public int type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RecordMessageBox", Order=2)]
        public int result;
        
        public RecordMessageBoxIn() {
        }
        
        public RecordMessageBoxIn(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string msgText, int type, int result) {
            this.HeaderInfo = HeaderInfo;
            this.msgText = msgText;
            this.type = type;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordMessageBoxOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        public RecordMessageBoxOut() {
        }
        
        public RecordMessageBoxOut(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class PlayMessageBoxIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.PlayMessageBox", Order=0)]
        public string msgText;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.PlayMessageBox", Order=1)]
        public int type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.PlayMessageBox", Order=2)]
        public int result;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.PlayMessageBox", Order=3)]
        public bool error;
        
        public PlayMessageBoxIn() {
        }
        
        public PlayMessageBoxIn(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string msgText, int type, int result, bool error) {
            this.HeaderInfo = HeaderInfo;
            this.msgText = msgText;
            this.type = type;
            this.result = result;
            this.error = error;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class PlayMessageBoxOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.PlayMessageBox", Order=0)]
        public bool @return;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.PlayMessageBox", Order=1)]
        public int result;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.PlayMessageBox", Order=2)]
        public bool error;
        
        public PlayMessageBoxOut() {
        }
        
        public PlayMessageBoxOut(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, bool @return, int result, bool error) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
            this.result = result;
            this.error = error;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordParsedActionIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RecordParsedAction", Order=0)]
        public string strValue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RecordParsedAction", Order=1)]
        public int nID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RecordParsedAction", Order=2)]
        public int nCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RecordParsedAction", Order=3)]
        public string strText;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RecordParsedAction", Order=4)]
        public int nBooleanValue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RecordParsedAction", Order=5)]
        public string strNameSpace;
        
        public RecordParsedActionIn() {
        }
        
        public RecordParsedActionIn(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string strValue, int nID, int nCode, string strText, int nBooleanValue, string strNameSpace) {
            this.HeaderInfo = HeaderInfo;
            this.strValue = strValue;
            this.nID = nID;
            this.nCode = nCode;
            this.strText = strText;
            this.nBooleanValue = nBooleanValue;
            this.strNameSpace = strNameSpace;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordParsedActionOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        public RecordParsedActionOut() {
        }
        
        public RecordParsedActionOut(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordActivateParsedDialogIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RecordActivateParsedDialog", Order=0)]
        public int nID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RecordActivateParsedDialog", Order=1)]
        public int pDialog;
        
        public RecordActivateParsedDialogIn() {
        }
        
        public RecordActivateParsedDialogIn(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int nID, int pDialog) {
            this.HeaderInfo = HeaderInfo;
            this.nID = nID;
            this.pDialog = pDialog;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordActivateParsedDialogOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        public RecordActivateParsedDialogOut() {
        }
        
        public RecordActivateParsedDialogOut(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordCloseParsedDialogIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RecordCloseParsedDialog", Order=0)]
        public int nID;
        
        public RecordCloseParsedDialogIn() {
        }
        
        public RecordCloseParsedDialogIn(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int nID) {
            this.HeaderInfo = HeaderInfo;
            this.nID = nID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordCloseParsedDialogOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        public RecordCloseParsedDialogOut() {
        }
        
        public RecordCloseParsedDialogOut(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordOpenDocumentIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RecordOpenDocument", Order=0)]
        public string nameSpace;
        
        public RecordOpenDocumentIn() {
        }
        
        public RecordOpenDocumentIn(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string nameSpace) {
            this.HeaderInfo = HeaderInfo;
            this.nameSpace = nameSpace;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordOpenDocumentOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        public RecordOpenDocumentOut() {
        }
        
        public RecordOpenDocumentOut(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordCloseDocumentIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RecordCloseDocument", Order=0)]
        public string nameSpace;
        
        public RecordCloseDocumentIn() {
        }
        
        public RecordCloseDocumentIn(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string nameSpace) {
            this.HeaderInfo = HeaderInfo;
            this.nameSpace = nameSpace;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordCloseDocumentOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        public RecordCloseDocumentOut() {
        }
        
        public RecordCloseDocumentOut(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordReportValidationIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RecordReportValidation", Order=0)]
        public int woormDocHandle;
        
        public RecordReportValidationIn() {
        }
        
        public RecordReportValidationIn(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int woormDocHandle) {
            this.HeaderInfo = HeaderInfo;
            this.woormDocHandle = woormDocHandle;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordReportValidationOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        public RecordReportValidationOut() {
        }
        
        public RecordReportValidationOut(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordCloseReportIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RecordCloseReport", Order=0)]
        public int woormDocHandle;
        
        public RecordCloseReportIn() {
        }
        
        public RecordCloseReportIn(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int woormDocHandle) {
            this.HeaderInfo = HeaderInfo;
            this.woormDocHandle = woormDocHandle;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RecordCloseReportOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo;
        
        public RecordCloseReportOut() {
        }
        
        public RecordCloseReportOut(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TBMacroRecorderTBMacroRecorderChannel : Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetTestPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetTestPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayStepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlayStepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public string[] messages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StopRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StopRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetTPManagerHandleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetTPManagerHandleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int tbProcessId {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public bool isVs2005 {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordMessageBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecordMessageBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayMessageBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlayMessageBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public int result1 {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        public bool error {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordParsedActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecordParsedActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordActivateParsedDialogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecordActivateParsedDialogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordCloseParsedDialogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecordCloseParsedDialogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordOpenDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecordOpenDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordCloseDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecordCloseDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordReportValidationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecordReportValidationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordCloseReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecordCloseReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TBMacroRecorderTBMacroRecorderClient : System.ServiceModel.ClientBase<Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder>, Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder {
        
        private BeginOperationDelegate onBeginSetTestPlanDelegate;
        
        private EndOperationDelegate onEndSetTestPlanDelegate;
        
        private System.Threading.SendOrPostCallback onSetTestPlanCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlayStepDelegate;
        
        private EndOperationDelegate onEndPlayStepDelegate;
        
        private System.Threading.SendOrPostCallback onPlayStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecordDelegate;
        
        private EndOperationDelegate onEndRecordDelegate;
        
        private System.Threading.SendOrPostCallback onRecordCompletedDelegate;
        
        private BeginOperationDelegate onBeginStopRecordDelegate;
        
        private EndOperationDelegate onEndStopRecordDelegate;
        
        private System.Threading.SendOrPostCallback onStopRecordCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetTPManagerHandleDelegate;
        
        private EndOperationDelegate onEndSetTPManagerHandleDelegate;
        
        private System.Threading.SendOrPostCallback onSetTPManagerHandleCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecordMessageBoxDelegate;
        
        private EndOperationDelegate onEndRecordMessageBoxDelegate;
        
        private System.Threading.SendOrPostCallback onRecordMessageBoxCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlayMessageBoxDelegate;
        
        private EndOperationDelegate onEndPlayMessageBoxDelegate;
        
        private System.Threading.SendOrPostCallback onPlayMessageBoxCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecordParsedActionDelegate;
        
        private EndOperationDelegate onEndRecordParsedActionDelegate;
        
        private System.Threading.SendOrPostCallback onRecordParsedActionCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecordActivateParsedDialogDelegate;
        
        private EndOperationDelegate onEndRecordActivateParsedDialogDelegate;
        
        private System.Threading.SendOrPostCallback onRecordActivateParsedDialogCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecordCloseParsedDialogDelegate;
        
        private EndOperationDelegate onEndRecordCloseParsedDialogDelegate;
        
        private System.Threading.SendOrPostCallback onRecordCloseParsedDialogCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecordOpenDocumentDelegate;
        
        private EndOperationDelegate onEndRecordOpenDocumentDelegate;
        
        private System.Threading.SendOrPostCallback onRecordOpenDocumentCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecordCloseDocumentDelegate;
        
        private EndOperationDelegate onEndRecordCloseDocumentDelegate;
        
        private System.Threading.SendOrPostCallback onRecordCloseDocumentCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecordReportValidationDelegate;
        
        private EndOperationDelegate onEndRecordReportValidationDelegate;
        
        private System.Threading.SendOrPostCallback onRecordReportValidationCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecordCloseReportDelegate;
        
        private EndOperationDelegate onEndRecordCloseReportDelegate;
        
        private System.Threading.SendOrPostCallback onRecordCloseReportCompletedDelegate;
        
        public TBMacroRecorderTBMacroRecorderClient() {
        }
        
        public TBMacroRecorderTBMacroRecorderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TBMacroRecorderTBMacroRecorderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TBMacroRecorderTBMacroRecorderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TBMacroRecorderTBMacroRecorderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<SetTestPlanCompletedEventArgs> SetTestPlanCompleted;
        
        public event System.EventHandler<PlayStepCompletedEventArgs> PlayStepCompleted;
        
        public event System.EventHandler<RecordCompletedEventArgs> RecordCompleted;
        
        public event System.EventHandler<StopRecordCompletedEventArgs> StopRecordCompleted;
        
        public event System.EventHandler<SetTPManagerHandleCompletedEventArgs> SetTPManagerHandleCompleted;
        
        public event System.EventHandler<RecordMessageBoxCompletedEventArgs> RecordMessageBoxCompleted;
        
        public event System.EventHandler<PlayMessageBoxCompletedEventArgs> PlayMessageBoxCompleted;
        
        public event System.EventHandler<RecordParsedActionCompletedEventArgs> RecordParsedActionCompleted;
        
        public event System.EventHandler<RecordActivateParsedDialogCompletedEventArgs> RecordActivateParsedDialogCompleted;
        
        public event System.EventHandler<RecordCloseParsedDialogCompletedEventArgs> RecordCloseParsedDialogCompleted;
        
        public event System.EventHandler<RecordOpenDocumentCompletedEventArgs> RecordOpenDocumentCompleted;
        
        public event System.EventHandler<RecordCloseDocumentCompletedEventArgs> RecordCloseDocumentCompleted;
        
        public event System.EventHandler<RecordReportValidationCompletedEventArgs> RecordReportValidationCompleted;
        
        public event System.EventHandler<RecordCloseReportCompletedEventArgs> RecordCloseReportCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTestPlanOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.SetTestPlan(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTestPlanIn request) {
            return base.Channel.SetTestPlan(request);
        }
        
        public bool SetTestPlan(ref Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string xmlTestPlan) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTestPlanIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTestPlanIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.xmlTestPlan = xmlTestPlan;
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTestPlanOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).SetTestPlan(inValue);
            HeaderInfo = retVal.HeaderInfo;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.BeginSetTestPlan(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTestPlanIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetTestPlan(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetTestPlan(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string xmlTestPlan, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTestPlanIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTestPlanIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.xmlTestPlan = xmlTestPlan;
            return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).BeginSetTestPlan(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTestPlanOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.EndSetTestPlan(System.IAsyncResult result) {
            return base.Channel.EndSetTestPlan(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo EndSetTestPlan(System.IAsyncResult result, out bool @return) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTestPlanOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).EndSetTestPlan(result);
            @return = retVal.@return;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginSetTestPlan(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(inValues[0]));
            string xmlTestPlan = ((string)(inValues[1]));
            return this.BeginSetTestPlan(HeaderInfo, xmlTestPlan, callback, asyncState);
        }
        
        private object[] OnEndSetTestPlan(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo retVal = this.EndSetTestPlan(result, out @return);
            return new object[] {
                    @return,
                    retVal};
        }
        
        private void OnSetTestPlanCompleted(object state) {
            if ((this.SetTestPlanCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetTestPlanCompleted(this, new SetTestPlanCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetTestPlanAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string xmlTestPlan) {
            this.SetTestPlanAsync(HeaderInfo, xmlTestPlan, null);
        }
        
        public void SetTestPlanAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string xmlTestPlan, object userState) {
            if ((this.onBeginSetTestPlanDelegate == null)) {
                this.onBeginSetTestPlanDelegate = new BeginOperationDelegate(this.OnBeginSetTestPlan);
            }
            if ((this.onEndSetTestPlanDelegate == null)) {
                this.onEndSetTestPlanDelegate = new EndOperationDelegate(this.OnEndSetTestPlan);
            }
            if ((this.onSetTestPlanCompletedDelegate == null)) {
                this.onSetTestPlanCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetTestPlanCompleted);
            }
            base.InvokeAsync(this.onBeginSetTestPlanDelegate, new object[] {
                        HeaderInfo,
                        xmlTestPlan}, this.onEndSetTestPlanDelegate, this.onSetTestPlanCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayStepOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.PlayStep(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayStepIn request) {
            return base.Channel.PlayStep(request);
        }
        
        public int PlayStep(ref Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int step, bool bIsInStepByStep, ref string[] messages) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayStepIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayStepIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.step = step;
            inValue.bIsInStepByStep = bIsInStepByStep;
            inValue.messages = messages;
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayStepOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).PlayStep(inValue);
            HeaderInfo = retVal.HeaderInfo;
            messages = retVal.messages;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.BeginPlayStep(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayStepIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlayStep(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPlayStep(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int step, bool bIsInStepByStep, string[] messages, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayStepIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayStepIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.step = step;
            inValue.bIsInStepByStep = bIsInStepByStep;
            inValue.messages = messages;
            return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).BeginPlayStep(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayStepOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.EndPlayStep(System.IAsyncResult result) {
            return base.Channel.EndPlayStep(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo EndPlayStep(System.IAsyncResult result, out int @return, out string[] messages) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayStepOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).EndPlayStep(result);
            @return = retVal.@return;
            messages = retVal.messages;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginPlayStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(inValues[0]));
            int step = ((int)(inValues[1]));
            bool bIsInStepByStep = ((bool)(inValues[2]));
            string[] messages = ((string[])(inValues[3]));
            return this.BeginPlayStep(HeaderInfo, step, bIsInStepByStep, messages, callback, asyncState);
        }
        
        private object[] OnEndPlayStep(System.IAsyncResult result) {
            int @return = this.GetDefaultValueForInitialization<int>();
            string[] messages = this.GetDefaultValueForInitialization<string[]>();
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo retVal = this.EndPlayStep(result, out @return, out messages);
            return new object[] {
                    @return,
                    messages,
                    retVal};
        }
        
        private void OnPlayStepCompleted(object state) {
            if ((this.PlayStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlayStepCompleted(this, new PlayStepCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlayStepAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int step, bool bIsInStepByStep, string[] messages) {
            this.PlayStepAsync(HeaderInfo, step, bIsInStepByStep, messages, null);
        }
        
        public void PlayStepAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int step, bool bIsInStepByStep, string[] messages, object userState) {
            if ((this.onBeginPlayStepDelegate == null)) {
                this.onBeginPlayStepDelegate = new BeginOperationDelegate(this.OnBeginPlayStep);
            }
            if ((this.onEndPlayStepDelegate == null)) {
                this.onEndPlayStepDelegate = new EndOperationDelegate(this.OnEndPlayStep);
            }
            if ((this.onPlayStepCompletedDelegate == null)) {
                this.onPlayStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlayStepCompleted);
            }
            base.InvokeAsync(this.onBeginPlayStepDelegate, new object[] {
                        HeaderInfo,
                        step,
                        bIsInStepByStep,
                        messages}, this.onEndPlayStepDelegate, this.onPlayStepCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.Record(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordIn request) {
            return base.Channel.Record(request);
        }
        
        public void Record(ref Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordIn();
            inValue.HeaderInfo = HeaderInfo;
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).Record(inValue);
            HeaderInfo = retVal.HeaderInfo;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.BeginRecord(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecord(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRecord(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordIn();
            inValue.HeaderInfo = HeaderInfo;
            return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).BeginRecord(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.EndRecord(System.IAsyncResult result) {
            return base.Channel.EndRecord(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo EndRecord(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).EndRecord(result);
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginRecord(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(inValues[0]));
            return this.BeginRecord(HeaderInfo, callback, asyncState);
        }
        
        private object[] OnEndRecord(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo retVal = this.EndRecord(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecordCompleted(object state) {
            if ((this.RecordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecordCompleted(this, new RecordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecordAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo) {
            this.RecordAsync(HeaderInfo, null);
        }
        
        public void RecordAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, object userState) {
            if ((this.onBeginRecordDelegate == null)) {
                this.onBeginRecordDelegate = new BeginOperationDelegate(this.OnBeginRecord);
            }
            if ((this.onEndRecordDelegate == null)) {
                this.onEndRecordDelegate = new EndOperationDelegate(this.OnEndRecord);
            }
            if ((this.onRecordCompletedDelegate == null)) {
                this.onRecordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecordCompleted);
            }
            base.InvokeAsync(this.onBeginRecordDelegate, new object[] {
                        HeaderInfo}, this.onEndRecordDelegate, this.onRecordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.StopRecordOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.StopRecord(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.StopRecordIn request) {
            return base.Channel.StopRecord(request);
        }
        
        public void StopRecord(ref Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.StopRecordIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.StopRecordIn();
            inValue.HeaderInfo = HeaderInfo;
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.StopRecordOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).StopRecord(inValue);
            HeaderInfo = retVal.HeaderInfo;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.BeginStopRecord(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.StopRecordIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStopRecord(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginStopRecord(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.StopRecordIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.StopRecordIn();
            inValue.HeaderInfo = HeaderInfo;
            return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).BeginStopRecord(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.StopRecordOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.EndStopRecord(System.IAsyncResult result) {
            return base.Channel.EndStopRecord(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo EndStopRecord(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.StopRecordOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).EndStopRecord(result);
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginStopRecord(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(inValues[0]));
            return this.BeginStopRecord(HeaderInfo, callback, asyncState);
        }
        
        private object[] OnEndStopRecord(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo retVal = this.EndStopRecord(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStopRecordCompleted(object state) {
            if ((this.StopRecordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StopRecordCompleted(this, new StopRecordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StopRecordAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo) {
            this.StopRecordAsync(HeaderInfo, null);
        }
        
        public void StopRecordAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, object userState) {
            if ((this.onBeginStopRecordDelegate == null)) {
                this.onBeginStopRecordDelegate = new BeginOperationDelegate(this.OnBeginStopRecord);
            }
            if ((this.onEndStopRecordDelegate == null)) {
                this.onEndStopRecordDelegate = new EndOperationDelegate(this.OnEndStopRecord);
            }
            if ((this.onStopRecordCompletedDelegate == null)) {
                this.onStopRecordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStopRecordCompleted);
            }
            base.InvokeAsync(this.onBeginStopRecordDelegate, new object[] {
                        HeaderInfo}, this.onEndStopRecordDelegate, this.onStopRecordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTPManagerHandleOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.SetTPManagerHandle(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTPManagerHandleIn request) {
            return base.Channel.SetTPManagerHandle(request);
        }
        
        public void SetTPManagerHandle(ref Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int handle, ref int tbProcessId, ref bool isVs2005) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTPManagerHandleIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTPManagerHandleIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.handle = handle;
            inValue.tbProcessId = tbProcessId;
            inValue.isVs2005 = isVs2005;
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTPManagerHandleOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).SetTPManagerHandle(inValue);
            HeaderInfo = retVal.HeaderInfo;
            tbProcessId = retVal.tbProcessId;
            isVs2005 = retVal.isVs2005;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.BeginSetTPManagerHandle(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTPManagerHandleIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetTPManagerHandle(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetTPManagerHandle(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int handle, int tbProcessId, bool isVs2005, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTPManagerHandleIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTPManagerHandleIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.handle = handle;
            inValue.tbProcessId = tbProcessId;
            inValue.isVs2005 = isVs2005;
            return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).BeginSetTPManagerHandle(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTPManagerHandleOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.EndSetTPManagerHandle(System.IAsyncResult result) {
            return base.Channel.EndSetTPManagerHandle(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo EndSetTPManagerHandle(System.IAsyncResult result, out int tbProcessId, out bool isVs2005) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.SetTPManagerHandleOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).EndSetTPManagerHandle(result);
            tbProcessId = retVal.tbProcessId;
            isVs2005 = retVal.isVs2005;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginSetTPManagerHandle(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(inValues[0]));
            int handle = ((int)(inValues[1]));
            int tbProcessId = ((int)(inValues[2]));
            bool isVs2005 = ((bool)(inValues[3]));
            return this.BeginSetTPManagerHandle(HeaderInfo, handle, tbProcessId, isVs2005, callback, asyncState);
        }
        
        private object[] OnEndSetTPManagerHandle(System.IAsyncResult result) {
            int tbProcessId = this.GetDefaultValueForInitialization<int>();
            bool isVs2005 = this.GetDefaultValueForInitialization<bool>();
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo retVal = this.EndSetTPManagerHandle(result, out tbProcessId, out isVs2005);
            return new object[] {
                    tbProcessId,
                    isVs2005,
                    retVal};
        }
        
        private void OnSetTPManagerHandleCompleted(object state) {
            if ((this.SetTPManagerHandleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetTPManagerHandleCompleted(this, new SetTPManagerHandleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetTPManagerHandleAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int handle, int tbProcessId, bool isVs2005) {
            this.SetTPManagerHandleAsync(HeaderInfo, handle, tbProcessId, isVs2005, null);
        }
        
        public void SetTPManagerHandleAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int handle, int tbProcessId, bool isVs2005, object userState) {
            if ((this.onBeginSetTPManagerHandleDelegate == null)) {
                this.onBeginSetTPManagerHandleDelegate = new BeginOperationDelegate(this.OnBeginSetTPManagerHandle);
            }
            if ((this.onEndSetTPManagerHandleDelegate == null)) {
                this.onEndSetTPManagerHandleDelegate = new EndOperationDelegate(this.OnEndSetTPManagerHandle);
            }
            if ((this.onSetTPManagerHandleCompletedDelegate == null)) {
                this.onSetTPManagerHandleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetTPManagerHandleCompleted);
            }
            base.InvokeAsync(this.onBeginSetTPManagerHandleDelegate, new object[] {
                        HeaderInfo,
                        handle,
                        tbProcessId,
                        isVs2005}, this.onEndSetTPManagerHandleDelegate, this.onSetTPManagerHandleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordMessageBoxOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.RecordMessageBox(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordMessageBoxIn request) {
            return base.Channel.RecordMessageBox(request);
        }
        
        public void RecordMessageBox(ref Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string msgText, int type, int result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordMessageBoxIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordMessageBoxIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.msgText = msgText;
            inValue.type = type;
            inValue.result = result;
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordMessageBoxOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).RecordMessageBox(inValue);
            HeaderInfo = retVal.HeaderInfo;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.BeginRecordMessageBox(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordMessageBoxIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecordMessageBox(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRecordMessageBox(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string msgText, int type, int result, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordMessageBoxIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordMessageBoxIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.msgText = msgText;
            inValue.type = type;
            inValue.result = result;
            return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).BeginRecordMessageBox(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordMessageBoxOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.EndRecordMessageBox(System.IAsyncResult result) {
            return base.Channel.EndRecordMessageBox(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo EndRecordMessageBox(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordMessageBoxOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).EndRecordMessageBox(result);
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginRecordMessageBox(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(inValues[0]));
            string msgText = ((string)(inValues[1]));
            int type = ((int)(inValues[2]));
            int result = ((int)(inValues[3]));
            return this.BeginRecordMessageBox(HeaderInfo, msgText, type, result, callback, asyncState);
        }
        
        private object[] OnEndRecordMessageBox(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo retVal = this.EndRecordMessageBox(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecordMessageBoxCompleted(object state) {
            if ((this.RecordMessageBoxCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecordMessageBoxCompleted(this, new RecordMessageBoxCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecordMessageBoxAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string msgText, int type, int result) {
            this.RecordMessageBoxAsync(HeaderInfo, msgText, type, result, null);
        }
        
        public void RecordMessageBoxAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string msgText, int type, int result, object userState) {
            if ((this.onBeginRecordMessageBoxDelegate == null)) {
                this.onBeginRecordMessageBoxDelegate = new BeginOperationDelegate(this.OnBeginRecordMessageBox);
            }
            if ((this.onEndRecordMessageBoxDelegate == null)) {
                this.onEndRecordMessageBoxDelegate = new EndOperationDelegate(this.OnEndRecordMessageBox);
            }
            if ((this.onRecordMessageBoxCompletedDelegate == null)) {
                this.onRecordMessageBoxCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecordMessageBoxCompleted);
            }
            base.InvokeAsync(this.onBeginRecordMessageBoxDelegate, new object[] {
                        HeaderInfo,
                        msgText,
                        type,
                        result}, this.onEndRecordMessageBoxDelegate, this.onRecordMessageBoxCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayMessageBoxOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.PlayMessageBox(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayMessageBoxIn request) {
            return base.Channel.PlayMessageBox(request);
        }
        
        public bool PlayMessageBox(ref Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string msgText, int type, ref int result, ref bool error) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayMessageBoxIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayMessageBoxIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.msgText = msgText;
            inValue.type = type;
            inValue.result = result;
            inValue.error = error;
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayMessageBoxOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).PlayMessageBox(inValue);
            HeaderInfo = retVal.HeaderInfo;
            result = retVal.result;
            error = retVal.error;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.BeginPlayMessageBox(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayMessageBoxIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlayMessageBox(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPlayMessageBox(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string msgText, int type, int result, bool error, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayMessageBoxIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayMessageBoxIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.msgText = msgText;
            inValue.type = type;
            inValue.result = result;
            inValue.error = error;
            return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).BeginPlayMessageBox(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayMessageBoxOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.EndPlayMessageBox(System.IAsyncResult result) {
            return base.Channel.EndPlayMessageBox(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo EndPlayMessageBox(System.IAsyncResult result, out bool @return, out int result1, out bool error) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.PlayMessageBoxOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).EndPlayMessageBox(result);
            @return = retVal.@return;
            result1 = retVal.result;
            error = retVal.error;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginPlayMessageBox(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(inValues[0]));
            string msgText = ((string)(inValues[1]));
            int type = ((int)(inValues[2]));
            int result = ((int)(inValues[3]));
            bool error = ((bool)(inValues[4]));
            return this.BeginPlayMessageBox(HeaderInfo, msgText, type, result, error, callback, asyncState);
        }
        
        private object[] OnEndPlayMessageBox(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            int result1 = this.GetDefaultValueForInitialization<int>();
            bool error = this.GetDefaultValueForInitialization<bool>();
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo retVal = this.EndPlayMessageBox(result, out @return, out result1, out error);
            return new object[] {
                    @return,
                    result1,
                    error,
                    retVal};
        }
        
        private void OnPlayMessageBoxCompleted(object state) {
            if ((this.PlayMessageBoxCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlayMessageBoxCompleted(this, new PlayMessageBoxCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlayMessageBoxAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string msgText, int type, int result, bool error) {
            this.PlayMessageBoxAsync(HeaderInfo, msgText, type, result, error, null);
        }
        
        public void PlayMessageBoxAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string msgText, int type, int result, bool error, object userState) {
            if ((this.onBeginPlayMessageBoxDelegate == null)) {
                this.onBeginPlayMessageBoxDelegate = new BeginOperationDelegate(this.OnBeginPlayMessageBox);
            }
            if ((this.onEndPlayMessageBoxDelegate == null)) {
                this.onEndPlayMessageBoxDelegate = new EndOperationDelegate(this.OnEndPlayMessageBox);
            }
            if ((this.onPlayMessageBoxCompletedDelegate == null)) {
                this.onPlayMessageBoxCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlayMessageBoxCompleted);
            }
            base.InvokeAsync(this.onBeginPlayMessageBoxDelegate, new object[] {
                        HeaderInfo,
                        msgText,
                        type,
                        result,
                        error}, this.onEndPlayMessageBoxDelegate, this.onPlayMessageBoxCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordParsedActionOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.RecordParsedAction(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordParsedActionIn request) {
            return base.Channel.RecordParsedAction(request);
        }
        
        public void RecordParsedAction(ref Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string strValue, int nID, int nCode, string strText, int nBooleanValue, string strNameSpace) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordParsedActionIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordParsedActionIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.strValue = strValue;
            inValue.nID = nID;
            inValue.nCode = nCode;
            inValue.strText = strText;
            inValue.nBooleanValue = nBooleanValue;
            inValue.strNameSpace = strNameSpace;
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordParsedActionOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).RecordParsedAction(inValue);
            HeaderInfo = retVal.HeaderInfo;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.BeginRecordParsedAction(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordParsedActionIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecordParsedAction(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRecordParsedAction(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string strValue, int nID, int nCode, string strText, int nBooleanValue, string strNameSpace, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordParsedActionIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordParsedActionIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.strValue = strValue;
            inValue.nID = nID;
            inValue.nCode = nCode;
            inValue.strText = strText;
            inValue.nBooleanValue = nBooleanValue;
            inValue.strNameSpace = strNameSpace;
            return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).BeginRecordParsedAction(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordParsedActionOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.EndRecordParsedAction(System.IAsyncResult result) {
            return base.Channel.EndRecordParsedAction(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo EndRecordParsedAction(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordParsedActionOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).EndRecordParsedAction(result);
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginRecordParsedAction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(inValues[0]));
            string strValue = ((string)(inValues[1]));
            int nID = ((int)(inValues[2]));
            int nCode = ((int)(inValues[3]));
            string strText = ((string)(inValues[4]));
            int nBooleanValue = ((int)(inValues[5]));
            string strNameSpace = ((string)(inValues[6]));
            return this.BeginRecordParsedAction(HeaderInfo, strValue, nID, nCode, strText, nBooleanValue, strNameSpace, callback, asyncState);
        }
        
        private object[] OnEndRecordParsedAction(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo retVal = this.EndRecordParsedAction(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecordParsedActionCompleted(object state) {
            if ((this.RecordParsedActionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecordParsedActionCompleted(this, new RecordParsedActionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecordParsedActionAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string strValue, int nID, int nCode, string strText, int nBooleanValue, string strNameSpace) {
            this.RecordParsedActionAsync(HeaderInfo, strValue, nID, nCode, strText, nBooleanValue, strNameSpace, null);
        }
        
        public void RecordParsedActionAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string strValue, int nID, int nCode, string strText, int nBooleanValue, string strNameSpace, object userState) {
            if ((this.onBeginRecordParsedActionDelegate == null)) {
                this.onBeginRecordParsedActionDelegate = new BeginOperationDelegate(this.OnBeginRecordParsedAction);
            }
            if ((this.onEndRecordParsedActionDelegate == null)) {
                this.onEndRecordParsedActionDelegate = new EndOperationDelegate(this.OnEndRecordParsedAction);
            }
            if ((this.onRecordParsedActionCompletedDelegate == null)) {
                this.onRecordParsedActionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecordParsedActionCompleted);
            }
            base.InvokeAsync(this.onBeginRecordParsedActionDelegate, new object[] {
                        HeaderInfo,
                        strValue,
                        nID,
                        nCode,
                        strText,
                        nBooleanValue,
                        strNameSpace}, this.onEndRecordParsedActionDelegate, this.onRecordParsedActionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordActivateParsedDialogOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.RecordActivateParsedDialog(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordActivateParsedDialogIn request) {
            return base.Channel.RecordActivateParsedDialog(request);
        }
        
        public void RecordActivateParsedDialog(ref Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int nID, int pDialog) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordActivateParsedDialogIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordActivateParsedDialogIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.nID = nID;
            inValue.pDialog = pDialog;
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordActivateParsedDialogOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).RecordActivateParsedDialog(inValue);
            HeaderInfo = retVal.HeaderInfo;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.BeginRecordActivateParsedDialog(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordActivateParsedDialogIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecordActivateParsedDialog(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRecordActivateParsedDialog(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int nID, int pDialog, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordActivateParsedDialogIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordActivateParsedDialogIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.nID = nID;
            inValue.pDialog = pDialog;
            return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).BeginRecordActivateParsedDialog(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordActivateParsedDialogOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.EndRecordActivateParsedDialog(System.IAsyncResult result) {
            return base.Channel.EndRecordActivateParsedDialog(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo EndRecordActivateParsedDialog(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordActivateParsedDialogOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).EndRecordActivateParsedDialog(result);
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginRecordActivateParsedDialog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(inValues[0]));
            int nID = ((int)(inValues[1]));
            int pDialog = ((int)(inValues[2]));
            return this.BeginRecordActivateParsedDialog(HeaderInfo, nID, pDialog, callback, asyncState);
        }
        
        private object[] OnEndRecordActivateParsedDialog(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo retVal = this.EndRecordActivateParsedDialog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecordActivateParsedDialogCompleted(object state) {
            if ((this.RecordActivateParsedDialogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecordActivateParsedDialogCompleted(this, new RecordActivateParsedDialogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecordActivateParsedDialogAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int nID, int pDialog) {
            this.RecordActivateParsedDialogAsync(HeaderInfo, nID, pDialog, null);
        }
        
        public void RecordActivateParsedDialogAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int nID, int pDialog, object userState) {
            if ((this.onBeginRecordActivateParsedDialogDelegate == null)) {
                this.onBeginRecordActivateParsedDialogDelegate = new BeginOperationDelegate(this.OnBeginRecordActivateParsedDialog);
            }
            if ((this.onEndRecordActivateParsedDialogDelegate == null)) {
                this.onEndRecordActivateParsedDialogDelegate = new EndOperationDelegate(this.OnEndRecordActivateParsedDialog);
            }
            if ((this.onRecordActivateParsedDialogCompletedDelegate == null)) {
                this.onRecordActivateParsedDialogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecordActivateParsedDialogCompleted);
            }
            base.InvokeAsync(this.onBeginRecordActivateParsedDialogDelegate, new object[] {
                        HeaderInfo,
                        nID,
                        pDialog}, this.onEndRecordActivateParsedDialogDelegate, this.onRecordActivateParsedDialogCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseParsedDialogOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.RecordCloseParsedDialog(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseParsedDialogIn request) {
            return base.Channel.RecordCloseParsedDialog(request);
        }
        
        public void RecordCloseParsedDialog(ref Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int nID) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseParsedDialogIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseParsedDialogIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.nID = nID;
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseParsedDialogOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).RecordCloseParsedDialog(inValue);
            HeaderInfo = retVal.HeaderInfo;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.BeginRecordCloseParsedDialog(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseParsedDialogIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecordCloseParsedDialog(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRecordCloseParsedDialog(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int nID, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseParsedDialogIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseParsedDialogIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.nID = nID;
            return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).BeginRecordCloseParsedDialog(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseParsedDialogOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.EndRecordCloseParsedDialog(System.IAsyncResult result) {
            return base.Channel.EndRecordCloseParsedDialog(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo EndRecordCloseParsedDialog(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseParsedDialogOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).EndRecordCloseParsedDialog(result);
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginRecordCloseParsedDialog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(inValues[0]));
            int nID = ((int)(inValues[1]));
            return this.BeginRecordCloseParsedDialog(HeaderInfo, nID, callback, asyncState);
        }
        
        private object[] OnEndRecordCloseParsedDialog(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo retVal = this.EndRecordCloseParsedDialog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecordCloseParsedDialogCompleted(object state) {
            if ((this.RecordCloseParsedDialogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecordCloseParsedDialogCompleted(this, new RecordCloseParsedDialogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecordCloseParsedDialogAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int nID) {
            this.RecordCloseParsedDialogAsync(HeaderInfo, nID, null);
        }
        
        public void RecordCloseParsedDialogAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int nID, object userState) {
            if ((this.onBeginRecordCloseParsedDialogDelegate == null)) {
                this.onBeginRecordCloseParsedDialogDelegate = new BeginOperationDelegate(this.OnBeginRecordCloseParsedDialog);
            }
            if ((this.onEndRecordCloseParsedDialogDelegate == null)) {
                this.onEndRecordCloseParsedDialogDelegate = new EndOperationDelegate(this.OnEndRecordCloseParsedDialog);
            }
            if ((this.onRecordCloseParsedDialogCompletedDelegate == null)) {
                this.onRecordCloseParsedDialogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecordCloseParsedDialogCompleted);
            }
            base.InvokeAsync(this.onBeginRecordCloseParsedDialogDelegate, new object[] {
                        HeaderInfo,
                        nID}, this.onEndRecordCloseParsedDialogDelegate, this.onRecordCloseParsedDialogCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOpenDocumentOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.RecordOpenDocument(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOpenDocumentIn request) {
            return base.Channel.RecordOpenDocument(request);
        }
        
        public void RecordOpenDocument(ref Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string nameSpace) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOpenDocumentIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOpenDocumentIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.nameSpace = nameSpace;
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOpenDocumentOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).RecordOpenDocument(inValue);
            HeaderInfo = retVal.HeaderInfo;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.BeginRecordOpenDocument(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOpenDocumentIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecordOpenDocument(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRecordOpenDocument(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string nameSpace, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOpenDocumentIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOpenDocumentIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.nameSpace = nameSpace;
            return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).BeginRecordOpenDocument(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOpenDocumentOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.EndRecordOpenDocument(System.IAsyncResult result) {
            return base.Channel.EndRecordOpenDocument(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo EndRecordOpenDocument(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordOpenDocumentOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).EndRecordOpenDocument(result);
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginRecordOpenDocument(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(inValues[0]));
            string nameSpace = ((string)(inValues[1]));
            return this.BeginRecordOpenDocument(HeaderInfo, nameSpace, callback, asyncState);
        }
        
        private object[] OnEndRecordOpenDocument(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo retVal = this.EndRecordOpenDocument(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecordOpenDocumentCompleted(object state) {
            if ((this.RecordOpenDocumentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecordOpenDocumentCompleted(this, new RecordOpenDocumentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecordOpenDocumentAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string nameSpace) {
            this.RecordOpenDocumentAsync(HeaderInfo, nameSpace, null);
        }
        
        public void RecordOpenDocumentAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string nameSpace, object userState) {
            if ((this.onBeginRecordOpenDocumentDelegate == null)) {
                this.onBeginRecordOpenDocumentDelegate = new BeginOperationDelegate(this.OnBeginRecordOpenDocument);
            }
            if ((this.onEndRecordOpenDocumentDelegate == null)) {
                this.onEndRecordOpenDocumentDelegate = new EndOperationDelegate(this.OnEndRecordOpenDocument);
            }
            if ((this.onRecordOpenDocumentCompletedDelegate == null)) {
                this.onRecordOpenDocumentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecordOpenDocumentCompleted);
            }
            base.InvokeAsync(this.onBeginRecordOpenDocumentDelegate, new object[] {
                        HeaderInfo,
                        nameSpace}, this.onEndRecordOpenDocumentDelegate, this.onRecordOpenDocumentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseDocumentOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.RecordCloseDocument(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseDocumentIn request) {
            return base.Channel.RecordCloseDocument(request);
        }
        
        public void RecordCloseDocument(ref Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string nameSpace) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseDocumentIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseDocumentIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.nameSpace = nameSpace;
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseDocumentOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).RecordCloseDocument(inValue);
            HeaderInfo = retVal.HeaderInfo;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.BeginRecordCloseDocument(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseDocumentIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecordCloseDocument(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRecordCloseDocument(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string nameSpace, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseDocumentIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseDocumentIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.nameSpace = nameSpace;
            return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).BeginRecordCloseDocument(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseDocumentOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.EndRecordCloseDocument(System.IAsyncResult result) {
            return base.Channel.EndRecordCloseDocument(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo EndRecordCloseDocument(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseDocumentOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).EndRecordCloseDocument(result);
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginRecordCloseDocument(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(inValues[0]));
            string nameSpace = ((string)(inValues[1]));
            return this.BeginRecordCloseDocument(HeaderInfo, nameSpace, callback, asyncState);
        }
        
        private object[] OnEndRecordCloseDocument(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo retVal = this.EndRecordCloseDocument(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecordCloseDocumentCompleted(object state) {
            if ((this.RecordCloseDocumentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecordCloseDocumentCompleted(this, new RecordCloseDocumentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecordCloseDocumentAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string nameSpace) {
            this.RecordCloseDocumentAsync(HeaderInfo, nameSpace, null);
        }
        
        public void RecordCloseDocumentAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, string nameSpace, object userState) {
            if ((this.onBeginRecordCloseDocumentDelegate == null)) {
                this.onBeginRecordCloseDocumentDelegate = new BeginOperationDelegate(this.OnBeginRecordCloseDocument);
            }
            if ((this.onEndRecordCloseDocumentDelegate == null)) {
                this.onEndRecordCloseDocumentDelegate = new EndOperationDelegate(this.OnEndRecordCloseDocument);
            }
            if ((this.onRecordCloseDocumentCompletedDelegate == null)) {
                this.onRecordCloseDocumentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecordCloseDocumentCompleted);
            }
            base.InvokeAsync(this.onBeginRecordCloseDocumentDelegate, new object[] {
                        HeaderInfo,
                        nameSpace}, this.onEndRecordCloseDocumentDelegate, this.onRecordCloseDocumentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordReportValidationOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.RecordReportValidation(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordReportValidationIn request) {
            return base.Channel.RecordReportValidation(request);
        }
        
        public void RecordReportValidation(ref Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int woormDocHandle) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordReportValidationIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordReportValidationIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.woormDocHandle = woormDocHandle;
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordReportValidationOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).RecordReportValidation(inValue);
            HeaderInfo = retVal.HeaderInfo;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.BeginRecordReportValidation(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordReportValidationIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecordReportValidation(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRecordReportValidation(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int woormDocHandle, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordReportValidationIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordReportValidationIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.woormDocHandle = woormDocHandle;
            return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).BeginRecordReportValidation(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordReportValidationOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.EndRecordReportValidation(System.IAsyncResult result) {
            return base.Channel.EndRecordReportValidation(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo EndRecordReportValidation(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordReportValidationOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).EndRecordReportValidation(result);
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginRecordReportValidation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(inValues[0]));
            int woormDocHandle = ((int)(inValues[1]));
            return this.BeginRecordReportValidation(HeaderInfo, woormDocHandle, callback, asyncState);
        }
        
        private object[] OnEndRecordReportValidation(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo retVal = this.EndRecordReportValidation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecordReportValidationCompleted(object state) {
            if ((this.RecordReportValidationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecordReportValidationCompleted(this, new RecordReportValidationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecordReportValidationAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int woormDocHandle) {
            this.RecordReportValidationAsync(HeaderInfo, woormDocHandle, null);
        }
        
        public void RecordReportValidationAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int woormDocHandle, object userState) {
            if ((this.onBeginRecordReportValidationDelegate == null)) {
                this.onBeginRecordReportValidationDelegate = new BeginOperationDelegate(this.OnBeginRecordReportValidation);
            }
            if ((this.onEndRecordReportValidationDelegate == null)) {
                this.onEndRecordReportValidationDelegate = new EndOperationDelegate(this.OnEndRecordReportValidation);
            }
            if ((this.onRecordReportValidationCompletedDelegate == null)) {
                this.onRecordReportValidationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecordReportValidationCompleted);
            }
            base.InvokeAsync(this.onBeginRecordReportValidationDelegate, new object[] {
                        HeaderInfo,
                        woormDocHandle}, this.onEndRecordReportValidationDelegate, this.onRecordReportValidationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseReportOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.RecordCloseReport(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseReportIn request) {
            return base.Channel.RecordCloseReport(request);
        }
        
        public void RecordCloseReport(ref Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int woormDocHandle) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseReportIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseReportIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.woormDocHandle = woormDocHandle;
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseReportOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).RecordCloseReport(inValue);
            HeaderInfo = retVal.HeaderInfo;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.BeginRecordCloseReport(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseReportIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecordCloseReport(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRecordCloseReport(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int woormDocHandle, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseReportIn inValue = new Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseReportIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.woormDocHandle = woormDocHandle;
            return ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).BeginRecordCloseReport(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseReportOut Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder.EndRecordCloseReport(System.IAsyncResult result) {
            return base.Channel.EndRecordCloseReport(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo EndRecordCloseReport(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.RecordCloseReportOut retVal = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBMacroRecorderTBMacroRecorder)(this)).EndRecordCloseReport(result);
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginRecordCloseReport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo)(inValues[0]));
            int woormDocHandle = ((int)(inValues[1]));
            return this.BeginRecordCloseReport(HeaderInfo, woormDocHandle, callback, asyncState);
        }
        
        private object[] OnEndRecordCloseReport(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo retVal = this.EndRecordCloseReport(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecordCloseReportCompleted(object state) {
            if ((this.RecordCloseReportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecordCloseReportCompleted(this, new RecordCloseReportCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecordCloseReportAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int woormDocHandle) {
            this.RecordCloseReportAsync(HeaderInfo, woormDocHandle, null);
        }
        
        public void RecordCloseReportAsync(Microarea.TaskBuilderNet.Core.TbMacroRecorderInterface.TBHeaderInfo HeaderInfo, int woormDocHandle, object userState) {
            if ((this.onBeginRecordCloseReportDelegate == null)) {
                this.onBeginRecordCloseReportDelegate = new BeginOperationDelegate(this.OnBeginRecordCloseReport);
            }
            if ((this.onEndRecordCloseReportDelegate == null)) {
                this.onEndRecordCloseReportDelegate = new EndOperationDelegate(this.OnEndRecordCloseReport);
            }
            if ((this.onRecordCloseReportCompletedDelegate == null)) {
                this.onRecordCloseReportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecordCloseReportCompleted);
            }
            base.InvokeAsync(this.onBeginRecordCloseReportDelegate, new object[] {
                        HeaderInfo,
                        woormDocHandle}, this.onEndRecordCloseReportDelegate, this.onRecordCloseReportCompletedDelegate, userState);
        }
    }
}
