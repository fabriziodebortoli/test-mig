//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microarea.TaskBuilderNet.Core.TbXmlTransferInterface
{


	[System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TBHeaderInfo", Namespace="urn:Microarea.Web.Services")]
    [System.SerializableAttribute()]
    public partial class TBHeaderInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthTokenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthToken {
            get {
                return this.AuthTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthTokenField, value) != true)) {
                    this.AuthTokenField = value;
                    this.RaisePropertyChanged("AuthToken");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
    [System.SerializableAttribute()]
    public partial class TBSoapFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:Microarea.Web.Services", ConfigurationName="TbXmlTransferInterface.TBXmlTransfer")]
    public interface TBXmlTransfer {
        
        // CODEGEN: Generating message contract since the operation DeleteExportProfile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#DeleteExportProfile", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/DeleteExportProfileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/DeleteExportProfileTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.DeleteExportProfileOut DeleteExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.DeleteExportProfileIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#DeleteExportProfile", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/DeleteExportProfileResponse")]
        System.IAsyncResult BeginDeleteExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.DeleteExportProfileIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.DeleteExportProfileOut EndDeleteExportProfile(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation RenameExportProfile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#RenameExportProfile", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/RenameExportProfileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/RenameExportProfileTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RenameExportProfileOut RenameExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RenameExportProfileIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#RenameExportProfile", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/RenameExportProfileResponse")]
        System.IAsyncResult BeginRenameExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RenameExportProfileIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RenameExportProfileOut EndRenameExportProfile(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation ModifyExportProfile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#ModifyExportProfile", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/ModifyExportProfileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/ModifyExportProfileTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ModifyExportProfileOut ModifyExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ModifyExportProfileIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#ModifyExportProfile", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/ModifyExportProfileResponse")]
        System.IAsyncResult BeginModifyExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ModifyExportProfileIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ModifyExportProfileOut EndModifyExportProfile(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation ShowExportProfile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#ShowExportProfile", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/ShowExportProfileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/ShowExportProfileTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ShowExportProfileOut ShowExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ShowExportProfileIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#ShowExportProfile", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/ShowExportProfileResponse")]
        System.IAsyncResult BeginShowExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ShowExportProfileIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ShowExportProfileOut EndShowExportProfile(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation CopyExportProfile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#CopyExportProfile", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/CopyExportProfileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/CopyExportProfileTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CopyExportProfileOut CopyExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CopyExportProfileIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#CopyExportProfile", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/CopyExportProfileResponse")]
        System.IAsyncResult BeginCopyExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CopyExportProfileIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CopyExportProfileOut EndCopyExportProfile(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation MoveExportProfile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#MoveExportProfile", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/MoveExportProfileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/MoveExportProfileTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.MoveExportProfileOut MoveExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.MoveExportProfileIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#MoveExportProfile", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/MoveExportProfileResponse")]
        System.IAsyncResult BeginMoveExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.MoveExportProfileIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.MoveExportProfileOut EndMoveExportProfile(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation CreateSmartXSD is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#CreateSmartXSD", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/CreateSmartXSDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/CreateSmartXSDTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CreateSmartXSDOut CreateSmartXSD(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CreateSmartXSDIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#CreateSmartXSD", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/CreateSmartXSDResponse")]
        System.IAsyncResult BeginCreateSmartXSD(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CreateSmartXSDIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CreateSmartXSDOut EndCreateSmartXSD(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation GetDocumentSchema is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#GetDocumentSchema", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetDocumentSchemaResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/GetDocumentSchemaTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDocumentSchemaOut GetDocumentSchema(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDocumentSchemaIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#GetDocumentSchema", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetDocumentSchemaResponse")]
        System.IAsyncResult BeginGetDocumentSchema(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDocumentSchemaIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDocumentSchemaOut EndGetDocumentSchema(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation GetReportSchema is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#GetReportSchema", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetReportSchemaResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/GetReportSchemaTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetReportSchemaOut GetReportSchema(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetReportSchemaIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#GetReportSchema", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetReportSchemaResponse")]
        System.IAsyncResult BeginGetReportSchema(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetReportSchemaIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetReportSchemaOut EndGetReportSchema(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation CloseLatestDocument is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#CloseLatestDocument", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/CloseLatestDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/CloseLatestDocumentTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloseLatestDocumentOut CloseLatestDocument(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloseLatestDocumentIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#CloseLatestDocument", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/CloseLatestDocumentResponse")]
        System.IAsyncResult BeginCloseLatestDocument(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloseLatestDocumentIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloseLatestDocumentOut EndCloseLatestDocument(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation GetSiteCode is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#GetSiteCode", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetSiteCodeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/GetSiteCodeTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetSiteCodeOut GetSiteCode(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetSiteCodeIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#GetSiteCode", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetSiteCodeResponse")]
        System.IAsyncResult BeginGetSiteCode(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetSiteCodeIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetSiteCodeOut EndGetSiteCode(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation GetExportProfileList is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#GetExportProfileList", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetExportProfileListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/GetExportProfileListTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfileListOut GetExportProfileList(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfileListIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#GetExportProfileList", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetExportProfileListResponse")]
        System.IAsyncResult BeginGetExportProfileList(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfileListIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfileListOut EndGetExportProfileList(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation GetExportProfilesPath is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#GetExportProfilesPath", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetExportProfilesPathResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/GetExportProfilesPathTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfilesPathOut GetExportProfilesPath(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfilesPathIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#GetExportProfilesPath", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetExportProfilesPathResponse")]
        System.IAsyncResult BeginGetExportProfilesPath(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfilesPathIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfilesPathOut EndGetExportProfilesPath(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation OpenDocumentAndImport is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#OpenDocumentAndImport", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/OpenDocumentAndImportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/OpenDocumentAndImportTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.OpenDocumentAndImportOut OpenDocumentAndImport(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.OpenDocumentAndImportIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#OpenDocumentAndImport", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/OpenDocumentAndImportResponse")]
        System.IAsyncResult BeginOpenDocumentAndImport(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.OpenDocumentAndImportIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.OpenDocumentAndImportOut EndOpenDocumentAndImport(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation Import is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#Import", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/ImportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/ImportTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ImportOut Import(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ImportIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#Import", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/ImportResponse")]
        System.IAsyncResult BeginImport(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ImportIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ImportOut EndImport(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation GetXMLExportParameters is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#GetXMLExportParameters", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetXMLExportParametersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/GetXMLExportParametersTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLExportParametersOut GetXMLExportParameters(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLExportParametersIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#GetXMLExportParameters", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetXMLExportParametersResponse")]
        System.IAsyncResult BeginGetXMLExportParameters(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLExportParametersIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLExportParametersOut EndGetXMLExportParameters(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation GetXMLImportParameters is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#GetXMLImportParameters", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetXMLImportParametersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/GetXMLImportParametersTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLImportParametersOut GetXMLImportParameters(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLImportParametersIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#GetXMLImportParameters", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetXMLImportParametersResponse")]
        System.IAsyncResult BeginGetXMLImportParameters(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLImportParametersIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLImportParametersOut EndGetXMLImportParameters(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation RunXMLExportInUnattendedMode is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#RunXMLExportInUnattendedMode", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/RunXMLExportInUnattendedModeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/RunXMLExportInUnattendedModeTBSoapFaultF" +
            "ault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLExportInUnattendedModeOut RunXMLExportInUnattendedMode(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLExportInUnattendedModeIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#RunXMLExportInUnattendedMode", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/RunXMLExportInUnattendedModeResponse")]
        System.IAsyncResult BeginRunXMLExportInUnattendedMode(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLExportInUnattendedModeIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLExportInUnattendedModeOut EndRunXMLExportInUnattendedMode(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation RunXMLImportInUnattendedMode is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#RunXMLImportInUnattendedMode", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/RunXMLImportInUnattendedModeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/RunXMLImportInUnattendedModeTBSoapFaultF" +
            "ault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLImportInUnattendedModeOut RunXMLImportInUnattendedMode(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLImportInUnattendedModeIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#RunXMLImportInUnattendedMode", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/RunXMLImportInUnattendedModeResponse")]
        System.IAsyncResult BeginRunXMLImportInUnattendedMode(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLImportInUnattendedModeIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLImportInUnattendedModeOut EndRunXMLImportInUnattendedMode(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation GetData is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#GetData", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/GetDataTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDataOut GetData(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDataIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#GetData", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetDataResponse")]
        System.IAsyncResult BeginGetData(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDataIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDataOut EndGetData(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation SetData is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#SetData", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/SetDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/SetDataTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.SetDataOut SetData(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.SetDataIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#SetData", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/SetDataResponse")]
        System.IAsyncResult BeginSetData(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.SetDataIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.SetDataOut EndSetData(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation GetXMLParameters is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#GetXMLParameters", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetXMLParametersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/GetXMLParametersTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLParametersOut GetXMLParameters(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLParametersIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#GetXMLParameters", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetXMLParametersResponse")]
        System.IAsyncResult BeginGetXMLParameters(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLParametersIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLParametersOut EndGetXMLParameters(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation GetXMLHotLink is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#GetXMLHotLink", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetXMLHotLinkResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/GetXMLHotLinkTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLHotLinkOut GetXMLHotLink(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLHotLinkIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#GetXMLHotLink", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/GetXMLHotLinkResponse")]
        System.IAsyncResult BeginGetXMLHotLink(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLHotLinkIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLHotLinkOut EndGetXMLHotLink(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation NewExportProfile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#NewExportProfile", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/NewExportProfileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/NewExportProfileTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.NewExportProfileOut NewExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.NewExportProfileIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#NewExportProfile", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/NewExportProfileResponse")]
        System.IAsyncResult BeginNewExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.NewExportProfileIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.NewExportProfileOut EndNewExportProfile(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation CloneExportProfile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="#CloneExportProfile", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/CloneExportProfileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBSoapFault), Action="urn:Microarea.Web.Services/TBXmlTransfer/CloneExportProfileTBSoapFaultFault", Name="TBSoapFault", Namespace="http://schemas.datacontract.org/2004/07/Microarea.TaskBuilderNet.Core.SoapCall")]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloneExportProfileOut CloneExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloneExportProfileIn request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="#CloneExportProfile", ReplyAction="urn:Microarea.Web.Services/TBXmlTransfer/CloneExportProfileResponse")]
        System.IAsyncResult BeginCloneExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloneExportProfileIn request, System.AsyncCallback callback, object asyncState);
        
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloneExportProfileOut EndCloneExportProfile(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteExportProfileIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.DeleteExportProfile", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.DeleteExportProfile", Order=1)]
        public string profilePath;
        
        public DeleteExportProfileIn() {
        }
        
        public DeleteExportProfileIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.profilePath = profilePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteExportProfileOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.DeleteExportProfile", Order=0)]
        public bool @return;
        
        public DeleteExportProfileOut() {
        }
        
        public DeleteExportProfileOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RenameExportProfileIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RenameExportProfile", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RenameExportProfile", Order=1)]
        public string profilePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RenameExportProfile", Order=2)]
        public string newName;
        
        public RenameExportProfileIn() {
        }
        
        public RenameExportProfileIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, string newName) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.profilePath = profilePath;
            this.newName = newName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RenameExportProfileOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RenameExportProfile", Order=0)]
        public bool @return;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RenameExportProfile", Order=1)]
        public string profilePath;
        
        public RenameExportProfileOut() {
        }
        
        public RenameExportProfileOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return, string profilePath) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
            this.profilePath = profilePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ModifyExportProfileIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.ModifyExportProfile", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.ModifyExportProfile", Order=1)]
        public string profilePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.ModifyExportProfile", Order=2)]
        public int posType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.ModifyExportProfile", Order=3)]
        public string userName;
        
        public ModifyExportProfileIn() {
        }
        
        public ModifyExportProfileIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string userName) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.profilePath = profilePath;
            this.posType = posType;
            this.userName = userName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ModifyExportProfileOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.ModifyExportProfile", Order=0)]
        public bool @return;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.ModifyExportProfile", Order=1)]
        public string profilePath;
        
        public ModifyExportProfileOut() {
        }
        
        public ModifyExportProfileOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return, string profilePath) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
            this.profilePath = profilePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ShowExportProfileIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.ShowExportProfile", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.ShowExportProfile", Order=1)]
        public string profilePath;
        
        public ShowExportProfileIn() {
        }
        
        public ShowExportProfileIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.profilePath = profilePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ShowExportProfileOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.ShowExportProfile", Order=0)]
        public bool @return;
        
        public ShowExportProfileOut() {
        }
        
        public ShowExportProfileOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CopyExportProfileIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.CopyExportProfile", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.CopyExportProfile", Order=1)]
        public string profilePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.CopyExportProfile", Order=2)]
        public int posType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.CopyExportProfile", Order=3)]
        public string[] userArray;
        
        public CopyExportProfileIn() {
        }
        
        public CopyExportProfileIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string[] userArray) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.profilePath = profilePath;
            this.posType = posType;
            this.userArray = userArray;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CopyExportProfileOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.CopyExportProfile", Order=0)]
        public bool @return;
        
        public CopyExportProfileOut() {
        }
        
        public CopyExportProfileOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class MoveExportProfileIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.MoveExportProfile", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.MoveExportProfile", Order=1)]
        public string profilePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.MoveExportProfile", Order=2)]
        public int posType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.MoveExportProfile", Order=3)]
        public string[] userArray;
        
        public MoveExportProfileIn() {
        }
        
        public MoveExportProfileIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string[] userArray) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.profilePath = profilePath;
            this.posType = posType;
            this.userArray = userArray;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class MoveExportProfileOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.MoveExportProfile", Order=0)]
        public bool @return;
        
        public MoveExportProfileOut() {
        }
        
        public MoveExportProfileOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CreateSmartXSDIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.CreateSmartXSD", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.CreateSmartXSD", Order=1)]
        public string profilePath;
        
        public CreateSmartXSDIn() {
        }
        
        public CreateSmartXSDIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.profilePath = profilePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CreateSmartXSDOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.CreateSmartXSD", Order=0)]
        public bool @return;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.CreateSmartXSD", Order=1)]
        public string profilePath;
        
        public CreateSmartXSDOut() {
        }
        
        public CreateSmartXSDOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return, string profilePath) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
            this.profilePath = profilePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetDocumentSchemaIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetDocumentSchema", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetDocumentSchema", Order=1)]
        public string profileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetDocumentSchema", Order=2)]
        public string forUser;
        
        public GetDocumentSchemaIn() {
        }
        
        public GetDocumentSchemaIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profileName, string forUser) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.profileName = profileName;
            this.forUser = forUser;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetDocumentSchemaOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetDocumentSchema", Order=0)]
        public string @return;
        
        public GetDocumentSchemaOut() {
        }
        
        public GetDocumentSchemaOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string @return) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetReportSchemaIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetReportSchema", Order=0)]
        public string reportNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetReportSchema", Order=1)]
        public string forUser;
        
        public GetReportSchemaIn() {
        }
        
        public GetReportSchemaIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string reportNamespace, string forUser) {
            this.HeaderInfo = HeaderInfo;
            this.reportNamespace = reportNamespace;
            this.forUser = forUser;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetReportSchemaOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetReportSchema", Order=0)]
        public string @return;
        
        public GetReportSchemaOut() {
        }
        
        public GetReportSchemaOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string @return) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CloseLatestDocumentIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        public CloseLatestDocumentIn() {
        }
        
        public CloseLatestDocumentIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CloseLatestDocumentOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        public CloseLatestDocumentOut() {
        }
        
        public CloseLatestDocumentOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetSiteCodeIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        public GetSiteCodeIn() {
        }
        
        public GetSiteCodeIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo) {
            this.HeaderInfo = HeaderInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetSiteCodeOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetSiteCode", Order=0)]
        public string @return;
        
        public GetSiteCodeOut() {
        }
        
        public GetSiteCodeOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string @return) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetExportProfileListIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetExportProfileList", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetExportProfileList", Order=1)]
        public int posType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetExportProfileList", Order=2)]
        public string userName;
        
        public GetExportProfileListIn() {
        }
        
        public GetExportProfileListIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, int posType, string userName) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.posType = posType;
            this.userName = userName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetExportProfileListOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetExportProfileList", Order=0)]
        public string[] @return;
        
        public GetExportProfileListOut() {
        }
        
        public GetExportProfileListOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string[] @return) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetExportProfilesPathIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetExportProfilesPath", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetExportProfilesPath", Order=1)]
        public int posType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetExportProfilesPath", Order=2)]
        public string userName;
        
        public GetExportProfilesPathIn() {
        }
        
        public GetExportProfilesPathIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, int posType, string userName) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.posType = posType;
            this.userName = userName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetExportProfilesPathOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetExportProfilesPath", Order=0)]
        public string @return;
        
        public GetExportProfilesPathOut() {
        }
        
        public GetExportProfilesPathOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string @return) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class OpenDocumentAndImportIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.OpenDocumentAndImport", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.OpenDocumentAndImport", Order=1)]
        public string envelopeFolder;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.OpenDocumentAndImport", Order=2)]
        public string resultDescription;
        
        public OpenDocumentAndImportIn() {
        }
        
        public OpenDocumentAndImportIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string envelopeFolder, string resultDescription) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.envelopeFolder = envelopeFolder;
            this.resultDescription = resultDescription;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class OpenDocumentAndImportOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.OpenDocumentAndImport", Order=0)]
        public bool @return;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.OpenDocumentAndImport", Order=1)]
        public string resultDescription;
        
        public OpenDocumentAndImportOut() {
        }
        
        public OpenDocumentAndImportOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return, string resultDescription) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
            this.resultDescription = resultDescription;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ImportIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.Import", Order=0)]
        public int documentHandle;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.Import", Order=1)]
        public string envelopeFolder;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.Import", Order=2)]
        public string resultDescription;
        
        public ImportIn() {
        }
        
        public ImportIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, int documentHandle, string envelopeFolder, string resultDescription) {
            this.HeaderInfo = HeaderInfo;
            this.documentHandle = documentHandle;
            this.envelopeFolder = envelopeFolder;
            this.resultDescription = resultDescription;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ImportOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.Import", Order=0)]
        public bool @return;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.Import", Order=1)]
        public string resultDescription;
        
        public ImportOut() {
        }
        
        public ImportOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return, string resultDescription) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
            this.resultDescription = resultDescription;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetXMLExportParametersIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLExportParameters", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLExportParameters", Order=1)]
        public string xmlParams;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLExportParameters", Order=2)]
        public string[] messages;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "urn:Microarea.Web.Services.GetXMLExportParameters", Order = 3)]
        public string Code;

        public GetXMLExportParametersIn() {
        }
        
        public GetXMLExportParametersIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string xmlParams, string[] messages) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.xmlParams = xmlParams;
            this.messages = messages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetXMLExportParametersOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLExportParameters", Order=0)]
        public bool @return;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLExportParameters", Order=1)]
        public string xmlParams;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLExportParameters", Order=2)]
        public string[] messages;
        
        public GetXMLExportParametersOut() {
        }
        
        public GetXMLExportParametersOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return, string xmlParams, string[] messages) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
            this.xmlParams = xmlParams;
            this.messages = messages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetXMLImportParametersIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLImportParameters", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLImportParameters", Order=1)]
        public string xmlParams;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLImportParameters", Order=2)]
        public string[] messages;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "urn:Microarea.Web.Services.GetXMLImportParameters", Order = 3)]
        public string Code;
        public GetXMLImportParametersIn() {
        }
        
        public GetXMLImportParametersIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string xmlParams, string[] messages) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.xmlParams = xmlParams;
            this.messages = messages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetXMLImportParametersOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLImportParameters", Order=0)]
        public bool @return;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLImportParameters", Order=1)]
        public string xmlParams;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLImportParameters", Order=2)]
        public string[] messages;
        
        public GetXMLImportParametersOut() {
        }
        
        public GetXMLImportParametersOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return, string xmlParams, string[] messages) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
            this.xmlParams = xmlParams;
            this.messages = messages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RunXMLExportInUnattendedModeIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RunXMLExportInUnattendedMode", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RunXMLExportInUnattendedMode", Order=1)]
        public string xmlParams;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RunXMLExportInUnattendedMode", Order=2)]
        public int documentHandle;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RunXMLExportInUnattendedMode", Order=3)]
        public string[] messages;
        
        public RunXMLExportInUnattendedModeIn() {
        }
        
        public RunXMLExportInUnattendedModeIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string xmlParams, int documentHandle, string[] messages) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.xmlParams = xmlParams;
            this.documentHandle = documentHandle;
            this.messages = messages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RunXMLExportInUnattendedModeOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RunXMLExportInUnattendedMode", Order=0)]
        public bool @return;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RunXMLExportInUnattendedMode", Order=1)]
        public int documentHandle;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RunXMLExportInUnattendedMode", Order=2)]
        public string[] messages;
        
        public RunXMLExportInUnattendedModeOut() {
        }
        
        public RunXMLExportInUnattendedModeOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return, int documentHandle, string[] messages) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
            this.documentHandle = documentHandle;
            this.messages = messages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RunXMLImportInUnattendedModeIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RunXMLImportInUnattendedMode", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RunXMLImportInUnattendedMode", Order=1)]
        public bool downloadEnvelopes;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RunXMLImportInUnattendedMode", Order=2)]
        public bool validateData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RunXMLImportInUnattendedMode", Order=3)]
        public string xmlParams;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RunXMLImportInUnattendedMode", Order=4)]
        public int documentHandle;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RunXMLImportInUnattendedMode", Order=5)]
        public string[] messages;
        
        public RunXMLImportInUnattendedModeIn() {
        }
        
        public RunXMLImportInUnattendedModeIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, bool downloadEnvelopes, bool validateData, string xmlParams, int documentHandle, string[] messages) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.downloadEnvelopes = downloadEnvelopes;
            this.validateData = validateData;
            this.xmlParams = xmlParams;
            this.documentHandle = documentHandle;
            this.messages = messages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RunXMLImportInUnattendedModeOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RunXMLImportInUnattendedMode", Order=0)]
        public bool @return;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RunXMLImportInUnattendedMode", Order=1)]
        public int documentHandle;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.RunXMLImportInUnattendedMode", Order=2)]
        public string[] messages;
        
        public RunXMLImportInUnattendedModeOut() {
        }
        
        public RunXMLImportInUnattendedModeOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return, int documentHandle, string[] messages) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
            this.documentHandle = documentHandle;
            this.messages = messages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetDataIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetData", Order=0)]
        public string param;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetData", Order=1)]
        public bool useApproximation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetData", Order=2)]
        public string loginName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetData", Order=3)]
        public string[] result;
        
        public GetDataIn() {
        }
        
        public GetDataIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string param, bool useApproximation, string loginName, string[] result) {
            this.HeaderInfo = HeaderInfo;
            this.param = param;
            this.useApproximation = useApproximation;
            this.loginName = loginName;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetDataOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetData", Order=0)]
        public bool @return;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetData", Order=1)]
        public string[] result;
        
        public GetDataOut() {
        }
        
        public GetDataOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return, string[] result) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetDataIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.SetData", Order=0)]
        public string data;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.SetData", Order=1)]
        public int saveAction;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.SetData", Order=2)]
        public string loginName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.SetData", Order=3)]
        public string result;
        
        public SetDataIn() {
        }
        
        public SetDataIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string data, int saveAction, string loginName, string result) {
            this.HeaderInfo = HeaderInfo;
            this.data = data;
            this.saveAction = saveAction;
            this.loginName = loginName;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetDataOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.SetData", Order=0)]
        public bool @return;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.SetData", Order=1)]
        public string result;
        
        public SetDataOut() {
        }
        
        public SetDataOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return, string result) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetXMLParametersIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLParameters", Order=0)]
        public string param;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLParameters", Order=1)]
        public bool useApproximation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLParameters", Order=2)]
        public string loginName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLParameters", Order=3)]
        public string result;
        
        public GetXMLParametersIn() {
        }
        
        public GetXMLParametersIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string param, bool useApproximation, string loginName, string result) {
            this.HeaderInfo = HeaderInfo;
            this.param = param;
            this.useApproximation = useApproximation;
            this.loginName = loginName;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetXMLParametersOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLParameters", Order=0)]
        public bool @return;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLParameters", Order=1)]
        public string result;
        
        public GetXMLParametersOut() {
        }
        
        public GetXMLParametersOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return, string result) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetXMLHotLinkIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLHotLink", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLHotLink", Order=1)]
        public string nsUri;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLHotLink", Order=2)]
        public string fieldXPath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLHotLink", Order=3)]
        public string loginName;
        
        public GetXMLHotLinkIn() {
        }
        
        public GetXMLHotLinkIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string nsUri, string fieldXPath, string loginName) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.nsUri = nsUri;
            this.fieldXPath = fieldXPath;
            this.loginName = loginName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetXMLHotLinkOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.GetXMLHotLink", Order=0)]
        public string @return;
        
        public GetXMLHotLinkOut() {
        }
        
        public GetXMLHotLinkOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string @return) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class NewExportProfileIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.NewExportProfile", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.NewExportProfile", Order=1)]
        public string newProfileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.NewExportProfile", Order=2)]
        public int posType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.NewExportProfile", Order=3)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.NewExportProfile", Order=4)]
        public string profilePath;
        
        public NewExportProfileIn() {
        }
        
        public NewExportProfileIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string newProfileName, int posType, string userName, string profilePath) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.newProfileName = newProfileName;
            this.posType = posType;
            this.userName = userName;
            this.profilePath = profilePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class NewExportProfileOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.NewExportProfile", Order=0)]
        public bool @return;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.NewExportProfile", Order=1)]
        public string profilePath;
        
        public NewExportProfileOut() {
        }
        
        public NewExportProfileOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return, string profilePath) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
            this.profilePath = profilePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CloneExportProfileIn {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.CloneExportProfile", Order=0)]
        public string documentNamespace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.CloneExportProfile", Order=1)]
        public string profilePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.CloneExportProfile", Order=2)]
        public int posType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.CloneExportProfile", Order=3)]
        public string userName;
        
        public CloneExportProfileIn() {
        }
        
        public CloneExportProfileIn(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string userName) {
            this.HeaderInfo = HeaderInfo;
            this.documentNamespace = documentNamespace;
            this.profilePath = profilePath;
            this.posType = posType;
            this.userName = userName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CloneExportProfileOut {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Microarea.Web.Services")]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.CloneExportProfile", Order=0)]
        public bool @return;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Microarea.Web.Services.CloneExportProfile", Order=1)]
        public string profilePath;
        
        public CloneExportProfileOut() {
        }
        
        public CloneExportProfileOut(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, bool @return, string profilePath) {
            this.HeaderInfo = HeaderInfo;
            this.@return = @return;
            this.profilePath = profilePath;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TBXmlTransferChannel : Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteExportProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteExportProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RenameExportProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RenameExportProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string profilePath {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModifyExportProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ModifyExportProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string profilePath {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShowExportProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ShowExportProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CopyExportProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CopyExportProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MoveExportProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MoveExportProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateSmartXSDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateSmartXSDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string profilePath {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDocumentSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDocumentSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetReportSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetReportSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CloseLatestDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CloseLatestDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSiteCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSiteCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetExportProfileListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetExportProfileListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetExportProfilesPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetExportProfilesPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OpenDocumentAndImportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OpenDocumentAndImportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string resultDescription {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ImportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string resultDescription {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetXMLExportParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetXMLExportParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string xmlParams {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string[] messages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[2]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetXMLImportParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetXMLImportParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string xmlParams {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string[] messages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[2]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RunXMLExportInUnattendedModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RunXMLExportInUnattendedModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public int documentHandle {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        public string[] messages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[2]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RunXMLImportInUnattendedModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RunXMLImportInUnattendedModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public int documentHandle {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        public string[] messages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[2]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string[] result1 {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string result1 {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetXMLParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetXMLParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string result1 {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetXMLHotLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetXMLHotLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NewExportProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NewExportProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string profilePath {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CloneExportProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CloneExportProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool @return {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string profilePath {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TBXmlTransferClient : System.ServiceModel.ClientBase<Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer>, Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer {
        
        private BeginOperationDelegate onBeginDeleteExportProfileDelegate;
        
        private EndOperationDelegate onEndDeleteExportProfileDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteExportProfileCompletedDelegate;
        
        private BeginOperationDelegate onBeginRenameExportProfileDelegate;
        
        private EndOperationDelegate onEndRenameExportProfileDelegate;
        
        private System.Threading.SendOrPostCallback onRenameExportProfileCompletedDelegate;
        
        private BeginOperationDelegate onBeginModifyExportProfileDelegate;
        
        private EndOperationDelegate onEndModifyExportProfileDelegate;
        
        private System.Threading.SendOrPostCallback onModifyExportProfileCompletedDelegate;
        
        private BeginOperationDelegate onBeginShowExportProfileDelegate;
        
        private EndOperationDelegate onEndShowExportProfileDelegate;
        
        private System.Threading.SendOrPostCallback onShowExportProfileCompletedDelegate;
        
        private BeginOperationDelegate onBeginCopyExportProfileDelegate;
        
        private EndOperationDelegate onEndCopyExportProfileDelegate;
        
        private System.Threading.SendOrPostCallback onCopyExportProfileCompletedDelegate;
        
        private BeginOperationDelegate onBeginMoveExportProfileDelegate;
        
        private EndOperationDelegate onEndMoveExportProfileDelegate;
        
        private System.Threading.SendOrPostCallback onMoveExportProfileCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateSmartXSDDelegate;
        
        private EndOperationDelegate onEndCreateSmartXSDDelegate;
        
        private System.Threading.SendOrPostCallback onCreateSmartXSDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDocumentSchemaDelegate;
        
        private EndOperationDelegate onEndGetDocumentSchemaDelegate;
        
        private System.Threading.SendOrPostCallback onGetDocumentSchemaCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetReportSchemaDelegate;
        
        private EndOperationDelegate onEndGetReportSchemaDelegate;
        
        private System.Threading.SendOrPostCallback onGetReportSchemaCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseLatestDocumentDelegate;
        
        private EndOperationDelegate onEndCloseLatestDocumentDelegate;
        
        private System.Threading.SendOrPostCallback onCloseLatestDocumentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSiteCodeDelegate;
        
        private EndOperationDelegate onEndGetSiteCodeDelegate;
        
        private System.Threading.SendOrPostCallback onGetSiteCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetExportProfileListDelegate;
        
        private EndOperationDelegate onEndGetExportProfileListDelegate;
        
        private System.Threading.SendOrPostCallback onGetExportProfileListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetExportProfilesPathDelegate;
        
        private EndOperationDelegate onEndGetExportProfilesPathDelegate;
        
        private System.Threading.SendOrPostCallback onGetExportProfilesPathCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDocumentAndImportDelegate;
        
        private EndOperationDelegate onEndOpenDocumentAndImportDelegate;
        
        private System.Threading.SendOrPostCallback onOpenDocumentAndImportCompletedDelegate;
        
        private BeginOperationDelegate onBeginImportDelegate;
        
        private EndOperationDelegate onEndImportDelegate;
        
        private System.Threading.SendOrPostCallback onImportCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetXMLExportParametersDelegate;
        
        private EndOperationDelegate onEndGetXMLExportParametersDelegate;
        
        private System.Threading.SendOrPostCallback onGetXMLExportParametersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetXMLImportParametersDelegate;
        
        private EndOperationDelegate onEndGetXMLImportParametersDelegate;
        
        private System.Threading.SendOrPostCallback onGetXMLImportParametersCompletedDelegate;
        
        private BeginOperationDelegate onBeginRunXMLExportInUnattendedModeDelegate;
        
        private EndOperationDelegate onEndRunXMLExportInUnattendedModeDelegate;
        
        private System.Threading.SendOrPostCallback onRunXMLExportInUnattendedModeCompletedDelegate;
        
        private BeginOperationDelegate onBeginRunXMLImportInUnattendedModeDelegate;
        
        private EndOperationDelegate onEndRunXMLImportInUnattendedModeDelegate;
        
        private System.Threading.SendOrPostCallback onRunXMLImportInUnattendedModeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDataDelegate;
        
        private EndOperationDelegate onEndGetDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetDataDelegate;
        
        private EndOperationDelegate onEndSetDataDelegate;
        
        private System.Threading.SendOrPostCallback onSetDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetXMLParametersDelegate;
        
        private EndOperationDelegate onEndGetXMLParametersDelegate;
        
        private System.Threading.SendOrPostCallback onGetXMLParametersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetXMLHotLinkDelegate;
        
        private EndOperationDelegate onEndGetXMLHotLinkDelegate;
        
        private System.Threading.SendOrPostCallback onGetXMLHotLinkCompletedDelegate;
        
        private BeginOperationDelegate onBeginNewExportProfileDelegate;
        
        private EndOperationDelegate onEndNewExportProfileDelegate;
        
        private System.Threading.SendOrPostCallback onNewExportProfileCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloneExportProfileDelegate;
        
        private EndOperationDelegate onEndCloneExportProfileDelegate;
        
        private System.Threading.SendOrPostCallback onCloneExportProfileCompletedDelegate;
        
        public TBXmlTransferClient() {
        }
        
        public TBXmlTransferClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TBXmlTransferClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TBXmlTransferClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TBXmlTransferClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<DeleteExportProfileCompletedEventArgs> DeleteExportProfileCompleted;
        
        public event System.EventHandler<RenameExportProfileCompletedEventArgs> RenameExportProfileCompleted;
        
        public event System.EventHandler<ModifyExportProfileCompletedEventArgs> ModifyExportProfileCompleted;
        
        public event System.EventHandler<ShowExportProfileCompletedEventArgs> ShowExportProfileCompleted;
        
        public event System.EventHandler<CopyExportProfileCompletedEventArgs> CopyExportProfileCompleted;
        
        public event System.EventHandler<MoveExportProfileCompletedEventArgs> MoveExportProfileCompleted;
        
        public event System.EventHandler<CreateSmartXSDCompletedEventArgs> CreateSmartXSDCompleted;
        
        public event System.EventHandler<GetDocumentSchemaCompletedEventArgs> GetDocumentSchemaCompleted;
        
        public event System.EventHandler<GetReportSchemaCompletedEventArgs> GetReportSchemaCompleted;
        
        public event System.EventHandler<CloseLatestDocumentCompletedEventArgs> CloseLatestDocumentCompleted;
        
        public event System.EventHandler<GetSiteCodeCompletedEventArgs> GetSiteCodeCompleted;
        
        public event System.EventHandler<GetExportProfileListCompletedEventArgs> GetExportProfileListCompleted;
        
        public event System.EventHandler<GetExportProfilesPathCompletedEventArgs> GetExportProfilesPathCompleted;
        
        public event System.EventHandler<OpenDocumentAndImportCompletedEventArgs> OpenDocumentAndImportCompleted;
        
        public event System.EventHandler<ImportCompletedEventArgs> ImportCompleted;
        
        public event System.EventHandler<GetXMLExportParametersCompletedEventArgs> GetXMLExportParametersCompleted;
        
        public event System.EventHandler<GetXMLImportParametersCompletedEventArgs> GetXMLImportParametersCompleted;
        
        public event System.EventHandler<RunXMLExportInUnattendedModeCompletedEventArgs> RunXMLExportInUnattendedModeCompleted;
        
        public event System.EventHandler<RunXMLImportInUnattendedModeCompletedEventArgs> RunXMLImportInUnattendedModeCompleted;
        
        public event System.EventHandler<GetDataCompletedEventArgs> GetDataCompleted;
        
        public event System.EventHandler<SetDataCompletedEventArgs> SetDataCompleted;
        
        public event System.EventHandler<GetXMLParametersCompletedEventArgs> GetXMLParametersCompleted;
        
        public event System.EventHandler<GetXMLHotLinkCompletedEventArgs> GetXMLHotLinkCompleted;
        
        public event System.EventHandler<NewExportProfileCompletedEventArgs> NewExportProfileCompleted;
        
        public event System.EventHandler<CloneExportProfileCompletedEventArgs> CloneExportProfileCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.DeleteExportProfileOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.DeleteExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.DeleteExportProfileIn request) {
            return base.Channel.DeleteExportProfile(request);
        }
        
        public bool DeleteExportProfile(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.DeleteExportProfileIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.DeleteExportProfileIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profilePath = profilePath;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.DeleteExportProfileOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).DeleteExportProfile(inValue);
            HeaderInfo = retVal.HeaderInfo;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginDeleteExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.DeleteExportProfileIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteExportProfile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.DeleteExportProfileIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.DeleteExportProfileIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profilePath = profilePath;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginDeleteExportProfile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.DeleteExportProfileOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndDeleteExportProfile(System.IAsyncResult result) {
            return base.Channel.EndDeleteExportProfile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndDeleteExportProfile(System.IAsyncResult result, out bool @return) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.DeleteExportProfileOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndDeleteExportProfile(result);
            @return = retVal.@return;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginDeleteExportProfile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            string profilePath = ((string)(inValues[2]));
            return this.BeginDeleteExportProfile(HeaderInfo, documentNamespace, profilePath, callback, asyncState);
        }
        
        private object[] OnEndDeleteExportProfile(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndDeleteExportProfile(result, out @return);
            return new object[] {
                    @return,
                    retVal};
        }
        
        private void OnDeleteExportProfileCompleted(object state) {
            if ((this.DeleteExportProfileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteExportProfileCompleted(this, new DeleteExportProfileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteExportProfileAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath) {
            this.DeleteExportProfileAsync(HeaderInfo, documentNamespace, profilePath, null);
        }
        
        public void DeleteExportProfileAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, object userState) {
            if ((this.onBeginDeleteExportProfileDelegate == null)) {
                this.onBeginDeleteExportProfileDelegate = new BeginOperationDelegate(this.OnBeginDeleteExportProfile);
            }
            if ((this.onEndDeleteExportProfileDelegate == null)) {
                this.onEndDeleteExportProfileDelegate = new EndOperationDelegate(this.OnEndDeleteExportProfile);
            }
            if ((this.onDeleteExportProfileCompletedDelegate == null)) {
                this.onDeleteExportProfileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteExportProfileCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteExportProfileDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        profilePath}, this.onEndDeleteExportProfileDelegate, this.onDeleteExportProfileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RenameExportProfileOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.RenameExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RenameExportProfileIn request) {
            return base.Channel.RenameExportProfile(request);
        }
        
        public bool RenameExportProfile(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, ref string profilePath, string newName) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RenameExportProfileIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RenameExportProfileIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profilePath = profilePath;
            inValue.newName = newName;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RenameExportProfileOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).RenameExportProfile(inValue);
            HeaderInfo = retVal.HeaderInfo;
            profilePath = retVal.profilePath;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginRenameExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RenameExportProfileIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRenameExportProfile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRenameExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, string newName, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RenameExportProfileIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RenameExportProfileIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profilePath = profilePath;
            inValue.newName = newName;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginRenameExportProfile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RenameExportProfileOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndRenameExportProfile(System.IAsyncResult result) {
            return base.Channel.EndRenameExportProfile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndRenameExportProfile(System.IAsyncResult result, out bool @return, out string profilePath) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RenameExportProfileOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndRenameExportProfile(result);
            @return = retVal.@return;
            profilePath = retVal.profilePath;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginRenameExportProfile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            string profilePath = ((string)(inValues[2]));
            string newName = ((string)(inValues[3]));
            return this.BeginRenameExportProfile(HeaderInfo, documentNamespace, profilePath, newName, callback, asyncState);
        }
        
        private object[] OnEndRenameExportProfile(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            string profilePath = this.GetDefaultValueForInitialization<string>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndRenameExportProfile(result, out @return, out profilePath);
            return new object[] {
                    @return,
                    profilePath,
                    retVal};
        }
        
        private void OnRenameExportProfileCompleted(object state) {
            if ((this.RenameExportProfileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RenameExportProfileCompleted(this, new RenameExportProfileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RenameExportProfileAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, string newName) {
            this.RenameExportProfileAsync(HeaderInfo, documentNamespace, profilePath, newName, null);
        }
        
        public void RenameExportProfileAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, string newName, object userState) {
            if ((this.onBeginRenameExportProfileDelegate == null)) {
                this.onBeginRenameExportProfileDelegate = new BeginOperationDelegate(this.OnBeginRenameExportProfile);
            }
            if ((this.onEndRenameExportProfileDelegate == null)) {
                this.onEndRenameExportProfileDelegate = new EndOperationDelegate(this.OnEndRenameExportProfile);
            }
            if ((this.onRenameExportProfileCompletedDelegate == null)) {
                this.onRenameExportProfileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRenameExportProfileCompleted);
            }
            base.InvokeAsync(this.onBeginRenameExportProfileDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        profilePath,
                        newName}, this.onEndRenameExportProfileDelegate, this.onRenameExportProfileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ModifyExportProfileOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.ModifyExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ModifyExportProfileIn request) {
            return base.Channel.ModifyExportProfile(request);
        }
        
        public bool ModifyExportProfile(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, ref string profilePath, int posType, string userName) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ModifyExportProfileIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ModifyExportProfileIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profilePath = profilePath;
            inValue.posType = posType;
            inValue.userName = userName;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ModifyExportProfileOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).ModifyExportProfile(inValue);
            HeaderInfo = retVal.HeaderInfo;
            profilePath = retVal.profilePath;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginModifyExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ModifyExportProfileIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginModifyExportProfile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginModifyExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string userName, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ModifyExportProfileIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ModifyExportProfileIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profilePath = profilePath;
            inValue.posType = posType;
            inValue.userName = userName;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginModifyExportProfile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ModifyExportProfileOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndModifyExportProfile(System.IAsyncResult result) {
            return base.Channel.EndModifyExportProfile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndModifyExportProfile(System.IAsyncResult result, out bool @return, out string profilePath) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ModifyExportProfileOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndModifyExportProfile(result);
            @return = retVal.@return;
            profilePath = retVal.profilePath;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginModifyExportProfile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            string profilePath = ((string)(inValues[2]));
            int posType = ((int)(inValues[3]));
            string userName = ((string)(inValues[4]));
            return this.BeginModifyExportProfile(HeaderInfo, documentNamespace, profilePath, posType, userName, callback, asyncState);
        }
        
        private object[] OnEndModifyExportProfile(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            string profilePath = this.GetDefaultValueForInitialization<string>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndModifyExportProfile(result, out @return, out profilePath);
            return new object[] {
                    @return,
                    profilePath,
                    retVal};
        }
        
        private void OnModifyExportProfileCompleted(object state) {
            if ((this.ModifyExportProfileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ModifyExportProfileCompleted(this, new ModifyExportProfileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ModifyExportProfileAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string userName) {
            this.ModifyExportProfileAsync(HeaderInfo, documentNamespace, profilePath, posType, userName, null);
        }
        
        public void ModifyExportProfileAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string userName, object userState) {
            if ((this.onBeginModifyExportProfileDelegate == null)) {
                this.onBeginModifyExportProfileDelegate = new BeginOperationDelegate(this.OnBeginModifyExportProfile);
            }
            if ((this.onEndModifyExportProfileDelegate == null)) {
                this.onEndModifyExportProfileDelegate = new EndOperationDelegate(this.OnEndModifyExportProfile);
            }
            if ((this.onModifyExportProfileCompletedDelegate == null)) {
                this.onModifyExportProfileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnModifyExportProfileCompleted);
            }
            base.InvokeAsync(this.onBeginModifyExportProfileDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        profilePath,
                        posType,
                        userName}, this.onEndModifyExportProfileDelegate, this.onModifyExportProfileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ShowExportProfileOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.ShowExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ShowExportProfileIn request) {
            return base.Channel.ShowExportProfile(request);
        }
        
        public bool ShowExportProfile(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ShowExportProfileIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ShowExportProfileIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profilePath = profilePath;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ShowExportProfileOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).ShowExportProfile(inValue);
            HeaderInfo = retVal.HeaderInfo;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginShowExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ShowExportProfileIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginShowExportProfile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginShowExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ShowExportProfileIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ShowExportProfileIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profilePath = profilePath;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginShowExportProfile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ShowExportProfileOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndShowExportProfile(System.IAsyncResult result) {
            return base.Channel.EndShowExportProfile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndShowExportProfile(System.IAsyncResult result, out bool @return) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ShowExportProfileOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndShowExportProfile(result);
            @return = retVal.@return;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginShowExportProfile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            string profilePath = ((string)(inValues[2]));
            return this.BeginShowExportProfile(HeaderInfo, documentNamespace, profilePath, callback, asyncState);
        }
        
        private object[] OnEndShowExportProfile(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndShowExportProfile(result, out @return);
            return new object[] {
                    @return,
                    retVal};
        }
        
        private void OnShowExportProfileCompleted(object state) {
            if ((this.ShowExportProfileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ShowExportProfileCompleted(this, new ShowExportProfileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ShowExportProfileAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath) {
            this.ShowExportProfileAsync(HeaderInfo, documentNamespace, profilePath, null);
        }
        
        public void ShowExportProfileAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, object userState) {
            if ((this.onBeginShowExportProfileDelegate == null)) {
                this.onBeginShowExportProfileDelegate = new BeginOperationDelegate(this.OnBeginShowExportProfile);
            }
            if ((this.onEndShowExportProfileDelegate == null)) {
                this.onEndShowExportProfileDelegate = new EndOperationDelegate(this.OnEndShowExportProfile);
            }
            if ((this.onShowExportProfileCompletedDelegate == null)) {
                this.onShowExportProfileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnShowExportProfileCompleted);
            }
            base.InvokeAsync(this.onBeginShowExportProfileDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        profilePath}, this.onEndShowExportProfileDelegate, this.onShowExportProfileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CopyExportProfileOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.CopyExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CopyExportProfileIn request) {
            return base.Channel.CopyExportProfile(request);
        }
        
        public bool CopyExportProfile(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string[] userArray) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CopyExportProfileIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CopyExportProfileIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profilePath = profilePath;
            inValue.posType = posType;
            inValue.userArray = userArray;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CopyExportProfileOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).CopyExportProfile(inValue);
            HeaderInfo = retVal.HeaderInfo;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginCopyExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CopyExportProfileIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCopyExportProfile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCopyExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string[] userArray, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CopyExportProfileIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CopyExportProfileIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profilePath = profilePath;
            inValue.posType = posType;
            inValue.userArray = userArray;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginCopyExportProfile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CopyExportProfileOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndCopyExportProfile(System.IAsyncResult result) {
            return base.Channel.EndCopyExportProfile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndCopyExportProfile(System.IAsyncResult result, out bool @return) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CopyExportProfileOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndCopyExportProfile(result);
            @return = retVal.@return;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginCopyExportProfile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            string profilePath = ((string)(inValues[2]));
            int posType = ((int)(inValues[3]));
            string[] userArray = ((string[])(inValues[4]));
            return this.BeginCopyExportProfile(HeaderInfo, documentNamespace, profilePath, posType, userArray, callback, asyncState);
        }
        
        private object[] OnEndCopyExportProfile(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndCopyExportProfile(result, out @return);
            return new object[] {
                    @return,
                    retVal};
        }
        
        private void OnCopyExportProfileCompleted(object state) {
            if ((this.CopyExportProfileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CopyExportProfileCompleted(this, new CopyExportProfileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CopyExportProfileAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string[] userArray) {
            this.CopyExportProfileAsync(HeaderInfo, documentNamespace, profilePath, posType, userArray, null);
        }
        
        public void CopyExportProfileAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string[] userArray, object userState) {
            if ((this.onBeginCopyExportProfileDelegate == null)) {
                this.onBeginCopyExportProfileDelegate = new BeginOperationDelegate(this.OnBeginCopyExportProfile);
            }
            if ((this.onEndCopyExportProfileDelegate == null)) {
                this.onEndCopyExportProfileDelegate = new EndOperationDelegate(this.OnEndCopyExportProfile);
            }
            if ((this.onCopyExportProfileCompletedDelegate == null)) {
                this.onCopyExportProfileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCopyExportProfileCompleted);
            }
            base.InvokeAsync(this.onBeginCopyExportProfileDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        profilePath,
                        posType,
                        userArray}, this.onEndCopyExportProfileDelegate, this.onCopyExportProfileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.MoveExportProfileOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.MoveExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.MoveExportProfileIn request) {
            return base.Channel.MoveExportProfile(request);
        }
        
        public bool MoveExportProfile(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string[] userArray) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.MoveExportProfileIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.MoveExportProfileIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profilePath = profilePath;
            inValue.posType = posType;
            inValue.userArray = userArray;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.MoveExportProfileOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).MoveExportProfile(inValue);
            HeaderInfo = retVal.HeaderInfo;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginMoveExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.MoveExportProfileIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMoveExportProfile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMoveExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string[] userArray, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.MoveExportProfileIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.MoveExportProfileIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profilePath = profilePath;
            inValue.posType = posType;
            inValue.userArray = userArray;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginMoveExportProfile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.MoveExportProfileOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndMoveExportProfile(System.IAsyncResult result) {
            return base.Channel.EndMoveExportProfile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndMoveExportProfile(System.IAsyncResult result, out bool @return) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.MoveExportProfileOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndMoveExportProfile(result);
            @return = retVal.@return;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginMoveExportProfile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            string profilePath = ((string)(inValues[2]));
            int posType = ((int)(inValues[3]));
            string[] userArray = ((string[])(inValues[4]));
            return this.BeginMoveExportProfile(HeaderInfo, documentNamespace, profilePath, posType, userArray, callback, asyncState);
        }
        
        private object[] OnEndMoveExportProfile(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndMoveExportProfile(result, out @return);
            return new object[] {
                    @return,
                    retVal};
        }
        
        private void OnMoveExportProfileCompleted(object state) {
            if ((this.MoveExportProfileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MoveExportProfileCompleted(this, new MoveExportProfileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MoveExportProfileAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string[] userArray) {
            this.MoveExportProfileAsync(HeaderInfo, documentNamespace, profilePath, posType, userArray, null);
        }
        
        public void MoveExportProfileAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string[] userArray, object userState) {
            if ((this.onBeginMoveExportProfileDelegate == null)) {
                this.onBeginMoveExportProfileDelegate = new BeginOperationDelegate(this.OnBeginMoveExportProfile);
            }
            if ((this.onEndMoveExportProfileDelegate == null)) {
                this.onEndMoveExportProfileDelegate = new EndOperationDelegate(this.OnEndMoveExportProfile);
            }
            if ((this.onMoveExportProfileCompletedDelegate == null)) {
                this.onMoveExportProfileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMoveExportProfileCompleted);
            }
            base.InvokeAsync(this.onBeginMoveExportProfileDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        profilePath,
                        posType,
                        userArray}, this.onEndMoveExportProfileDelegate, this.onMoveExportProfileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CreateSmartXSDOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.CreateSmartXSD(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CreateSmartXSDIn request) {
            return base.Channel.CreateSmartXSD(request);
        }
        
        public bool CreateSmartXSD(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, ref string profilePath) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CreateSmartXSDIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CreateSmartXSDIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profilePath = profilePath;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CreateSmartXSDOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).CreateSmartXSD(inValue);
            HeaderInfo = retVal.HeaderInfo;
            profilePath = retVal.profilePath;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginCreateSmartXSD(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CreateSmartXSDIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateSmartXSD(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateSmartXSD(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CreateSmartXSDIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CreateSmartXSDIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profilePath = profilePath;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginCreateSmartXSD(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CreateSmartXSDOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndCreateSmartXSD(System.IAsyncResult result) {
            return base.Channel.EndCreateSmartXSD(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndCreateSmartXSD(System.IAsyncResult result, out bool @return, out string profilePath) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CreateSmartXSDOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndCreateSmartXSD(result);
            @return = retVal.@return;
            profilePath = retVal.profilePath;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginCreateSmartXSD(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            string profilePath = ((string)(inValues[2]));
            return this.BeginCreateSmartXSD(HeaderInfo, documentNamespace, profilePath, callback, asyncState);
        }
        
        private object[] OnEndCreateSmartXSD(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            string profilePath = this.GetDefaultValueForInitialization<string>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndCreateSmartXSD(result, out @return, out profilePath);
            return new object[] {
                    @return,
                    profilePath,
                    retVal};
        }
        
        private void OnCreateSmartXSDCompleted(object state) {
            if ((this.CreateSmartXSDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateSmartXSDCompleted(this, new CreateSmartXSDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateSmartXSDAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath) {
            this.CreateSmartXSDAsync(HeaderInfo, documentNamespace, profilePath, null);
        }
        
        public void CreateSmartXSDAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, object userState) {
            if ((this.onBeginCreateSmartXSDDelegate == null)) {
                this.onBeginCreateSmartXSDDelegate = new BeginOperationDelegate(this.OnBeginCreateSmartXSD);
            }
            if ((this.onEndCreateSmartXSDDelegate == null)) {
                this.onEndCreateSmartXSDDelegate = new EndOperationDelegate(this.OnEndCreateSmartXSD);
            }
            if ((this.onCreateSmartXSDCompletedDelegate == null)) {
                this.onCreateSmartXSDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateSmartXSDCompleted);
            }
            base.InvokeAsync(this.onBeginCreateSmartXSDDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        profilePath}, this.onEndCreateSmartXSDDelegate, this.onCreateSmartXSDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDocumentSchemaOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.GetDocumentSchema(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDocumentSchemaIn request) {
            return base.Channel.GetDocumentSchema(request);
        }
        
        public string GetDocumentSchema(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profileName, string forUser) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDocumentSchemaIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDocumentSchemaIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profileName = profileName;
            inValue.forUser = forUser;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDocumentSchemaOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).GetDocumentSchema(inValue);
            HeaderInfo = retVal.HeaderInfo;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginGetDocumentSchema(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDocumentSchemaIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDocumentSchema(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDocumentSchema(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profileName, string forUser, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDocumentSchemaIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDocumentSchemaIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profileName = profileName;
            inValue.forUser = forUser;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginGetDocumentSchema(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDocumentSchemaOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndGetDocumentSchema(System.IAsyncResult result) {
            return base.Channel.EndGetDocumentSchema(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndGetDocumentSchema(System.IAsyncResult result, out string @return) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDocumentSchemaOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndGetDocumentSchema(result);
            @return = retVal.@return;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginGetDocumentSchema(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            string profileName = ((string)(inValues[2]));
            string forUser = ((string)(inValues[3]));
            return this.BeginGetDocumentSchema(HeaderInfo, documentNamespace, profileName, forUser, callback, asyncState);
        }
        
        private object[] OnEndGetDocumentSchema(System.IAsyncResult result) {
            string @return = this.GetDefaultValueForInitialization<string>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndGetDocumentSchema(result, out @return);
            return new object[] {
                    @return,
                    retVal};
        }
        
        private void OnGetDocumentSchemaCompleted(object state) {
            if ((this.GetDocumentSchemaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDocumentSchemaCompleted(this, new GetDocumentSchemaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDocumentSchemaAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profileName, string forUser) {
            this.GetDocumentSchemaAsync(HeaderInfo, documentNamespace, profileName, forUser, null);
        }
        
        public void GetDocumentSchemaAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profileName, string forUser, object userState) {
            if ((this.onBeginGetDocumentSchemaDelegate == null)) {
                this.onBeginGetDocumentSchemaDelegate = new BeginOperationDelegate(this.OnBeginGetDocumentSchema);
            }
            if ((this.onEndGetDocumentSchemaDelegate == null)) {
                this.onEndGetDocumentSchemaDelegate = new EndOperationDelegate(this.OnEndGetDocumentSchema);
            }
            if ((this.onGetDocumentSchemaCompletedDelegate == null)) {
                this.onGetDocumentSchemaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDocumentSchemaCompleted);
            }
            base.InvokeAsync(this.onBeginGetDocumentSchemaDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        profileName,
                        forUser}, this.onEndGetDocumentSchemaDelegate, this.onGetDocumentSchemaCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetReportSchemaOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.GetReportSchema(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetReportSchemaIn request) {
            return base.Channel.GetReportSchema(request);
        }
        
        public string GetReportSchema(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string reportNamespace, string forUser) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetReportSchemaIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetReportSchemaIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.reportNamespace = reportNamespace;
            inValue.forUser = forUser;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetReportSchemaOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).GetReportSchema(inValue);
            HeaderInfo = retVal.HeaderInfo;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginGetReportSchema(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetReportSchemaIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetReportSchema(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetReportSchema(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string reportNamespace, string forUser, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetReportSchemaIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetReportSchemaIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.reportNamespace = reportNamespace;
            inValue.forUser = forUser;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginGetReportSchema(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetReportSchemaOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndGetReportSchema(System.IAsyncResult result) {
            return base.Channel.EndGetReportSchema(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndGetReportSchema(System.IAsyncResult result, out string @return) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetReportSchemaOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndGetReportSchema(result);
            @return = retVal.@return;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginGetReportSchema(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string reportNamespace = ((string)(inValues[1]));
            string forUser = ((string)(inValues[2]));
            return this.BeginGetReportSchema(HeaderInfo, reportNamespace, forUser, callback, asyncState);
        }
        
        private object[] OnEndGetReportSchema(System.IAsyncResult result) {
            string @return = this.GetDefaultValueForInitialization<string>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndGetReportSchema(result, out @return);
            return new object[] {
                    @return,
                    retVal};
        }
        
        private void OnGetReportSchemaCompleted(object state) {
            if ((this.GetReportSchemaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetReportSchemaCompleted(this, new GetReportSchemaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetReportSchemaAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string reportNamespace, string forUser) {
            this.GetReportSchemaAsync(HeaderInfo, reportNamespace, forUser, null);
        }
        
        public void GetReportSchemaAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string reportNamespace, string forUser, object userState) {
            if ((this.onBeginGetReportSchemaDelegate == null)) {
                this.onBeginGetReportSchemaDelegate = new BeginOperationDelegate(this.OnBeginGetReportSchema);
            }
            if ((this.onEndGetReportSchemaDelegate == null)) {
                this.onEndGetReportSchemaDelegate = new EndOperationDelegate(this.OnEndGetReportSchema);
            }
            if ((this.onGetReportSchemaCompletedDelegate == null)) {
                this.onGetReportSchemaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetReportSchemaCompleted);
            }
            base.InvokeAsync(this.onBeginGetReportSchemaDelegate, new object[] {
                        HeaderInfo,
                        reportNamespace,
                        forUser}, this.onEndGetReportSchemaDelegate, this.onGetReportSchemaCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloseLatestDocumentOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.CloseLatestDocument(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloseLatestDocumentIn request) {
            return base.Channel.CloseLatestDocument(request);
        }
        
        public void CloseLatestDocument(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloseLatestDocumentIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloseLatestDocumentIn();
            inValue.HeaderInfo = HeaderInfo;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloseLatestDocumentOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).CloseLatestDocument(inValue);
            HeaderInfo = retVal.HeaderInfo;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginCloseLatestDocument(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloseLatestDocumentIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCloseLatestDocument(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCloseLatestDocument(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloseLatestDocumentIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloseLatestDocumentIn();
            inValue.HeaderInfo = HeaderInfo;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginCloseLatestDocument(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloseLatestDocumentOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndCloseLatestDocument(System.IAsyncResult result) {
            return base.Channel.EndCloseLatestDocument(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndCloseLatestDocument(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloseLatestDocumentOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndCloseLatestDocument(result);
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginCloseLatestDocument(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            return this.BeginCloseLatestDocument(HeaderInfo, callback, asyncState);
        }
        
        private object[] OnEndCloseLatestDocument(System.IAsyncResult result) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndCloseLatestDocument(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCloseLatestDocumentCompleted(object state) {
            if ((this.CloseLatestDocumentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseLatestDocumentCompleted(this, new CloseLatestDocumentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseLatestDocumentAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo) {
            this.CloseLatestDocumentAsync(HeaderInfo, null);
        }
        
        public void CloseLatestDocumentAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, object userState) {
            if ((this.onBeginCloseLatestDocumentDelegate == null)) {
                this.onBeginCloseLatestDocumentDelegate = new BeginOperationDelegate(this.OnBeginCloseLatestDocument);
            }
            if ((this.onEndCloseLatestDocumentDelegate == null)) {
                this.onEndCloseLatestDocumentDelegate = new EndOperationDelegate(this.OnEndCloseLatestDocument);
            }
            if ((this.onCloseLatestDocumentCompletedDelegate == null)) {
                this.onCloseLatestDocumentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseLatestDocumentCompleted);
            }
            base.InvokeAsync(this.onBeginCloseLatestDocumentDelegate, new object[] {
                        HeaderInfo}, this.onEndCloseLatestDocumentDelegate, this.onCloseLatestDocumentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetSiteCodeOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.GetSiteCode(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetSiteCodeIn request) {
            return base.Channel.GetSiteCode(request);
        }
        
        public string GetSiteCode(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetSiteCodeIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetSiteCodeIn();
            inValue.HeaderInfo = HeaderInfo;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetSiteCodeOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).GetSiteCode(inValue);
            HeaderInfo = retVal.HeaderInfo;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginGetSiteCode(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetSiteCodeIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSiteCode(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSiteCode(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetSiteCodeIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetSiteCodeIn();
            inValue.HeaderInfo = HeaderInfo;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginGetSiteCode(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetSiteCodeOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndGetSiteCode(System.IAsyncResult result) {
            return base.Channel.EndGetSiteCode(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndGetSiteCode(System.IAsyncResult result, out string @return) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetSiteCodeOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndGetSiteCode(result);
            @return = retVal.@return;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginGetSiteCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            return this.BeginGetSiteCode(HeaderInfo, callback, asyncState);
        }
        
        private object[] OnEndGetSiteCode(System.IAsyncResult result) {
            string @return = this.GetDefaultValueForInitialization<string>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndGetSiteCode(result, out @return);
            return new object[] {
                    @return,
                    retVal};
        }
        
        private void OnGetSiteCodeCompleted(object state) {
            if ((this.GetSiteCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSiteCodeCompleted(this, new GetSiteCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSiteCodeAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo) {
            this.GetSiteCodeAsync(HeaderInfo, null);
        }
        
        public void GetSiteCodeAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, object userState) {
            if ((this.onBeginGetSiteCodeDelegate == null)) {
                this.onBeginGetSiteCodeDelegate = new BeginOperationDelegate(this.OnBeginGetSiteCode);
            }
            if ((this.onEndGetSiteCodeDelegate == null)) {
                this.onEndGetSiteCodeDelegate = new EndOperationDelegate(this.OnEndGetSiteCode);
            }
            if ((this.onGetSiteCodeCompletedDelegate == null)) {
                this.onGetSiteCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSiteCodeCompleted);
            }
            base.InvokeAsync(this.onBeginGetSiteCodeDelegate, new object[] {
                        HeaderInfo}, this.onEndGetSiteCodeDelegate, this.onGetSiteCodeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfileListOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.GetExportProfileList(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfileListIn request) {
            return base.Channel.GetExportProfileList(request);
        }
        
        public string[] GetExportProfileList(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, int posType, string userName) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfileListIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfileListIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.posType = posType;
            inValue.userName = userName;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfileListOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).GetExportProfileList(inValue);
            HeaderInfo = retVal.HeaderInfo;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginGetExportProfileList(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfileListIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetExportProfileList(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetExportProfileList(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, int posType, string userName, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfileListIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfileListIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.posType = posType;
            inValue.userName = userName;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginGetExportProfileList(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfileListOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndGetExportProfileList(System.IAsyncResult result) {
            return base.Channel.EndGetExportProfileList(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndGetExportProfileList(System.IAsyncResult result, out string[] @return) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfileListOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndGetExportProfileList(result);
            @return = retVal.@return;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginGetExportProfileList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            int posType = ((int)(inValues[2]));
            string userName = ((string)(inValues[3]));
            return this.BeginGetExportProfileList(HeaderInfo, documentNamespace, posType, userName, callback, asyncState);
        }
        
        private object[] OnEndGetExportProfileList(System.IAsyncResult result) {
            string[] @return = this.GetDefaultValueForInitialization<string[]>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndGetExportProfileList(result, out @return);
            return new object[] {
                    @return,
                    retVal};
        }
        
        private void OnGetExportProfileListCompleted(object state) {
            if ((this.GetExportProfileListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetExportProfileListCompleted(this, new GetExportProfileListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetExportProfileListAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, int posType, string userName) {
            this.GetExportProfileListAsync(HeaderInfo, documentNamespace, posType, userName, null);
        }
        
        public void GetExportProfileListAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, int posType, string userName, object userState) {
            if ((this.onBeginGetExportProfileListDelegate == null)) {
                this.onBeginGetExportProfileListDelegate = new BeginOperationDelegate(this.OnBeginGetExportProfileList);
            }
            if ((this.onEndGetExportProfileListDelegate == null)) {
                this.onEndGetExportProfileListDelegate = new EndOperationDelegate(this.OnEndGetExportProfileList);
            }
            if ((this.onGetExportProfileListCompletedDelegate == null)) {
                this.onGetExportProfileListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetExportProfileListCompleted);
            }
            base.InvokeAsync(this.onBeginGetExportProfileListDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        posType,
                        userName}, this.onEndGetExportProfileListDelegate, this.onGetExportProfileListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfilesPathOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.GetExportProfilesPath(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfilesPathIn request) {
            return base.Channel.GetExportProfilesPath(request);
        }
        
        public string GetExportProfilesPath(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, int posType, string userName) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfilesPathIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfilesPathIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.posType = posType;
            inValue.userName = userName;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfilesPathOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).GetExportProfilesPath(inValue);
            HeaderInfo = retVal.HeaderInfo;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginGetExportProfilesPath(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfilesPathIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetExportProfilesPath(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetExportProfilesPath(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, int posType, string userName, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfilesPathIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfilesPathIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.posType = posType;
            inValue.userName = userName;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginGetExportProfilesPath(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfilesPathOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndGetExportProfilesPath(System.IAsyncResult result) {
            return base.Channel.EndGetExportProfilesPath(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndGetExportProfilesPath(System.IAsyncResult result, out string @return) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetExportProfilesPathOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndGetExportProfilesPath(result);
            @return = retVal.@return;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginGetExportProfilesPath(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            int posType = ((int)(inValues[2]));
            string userName = ((string)(inValues[3]));
            return this.BeginGetExportProfilesPath(HeaderInfo, documentNamespace, posType, userName, callback, asyncState);
        }
        
        private object[] OnEndGetExportProfilesPath(System.IAsyncResult result) {
            string @return = this.GetDefaultValueForInitialization<string>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndGetExportProfilesPath(result, out @return);
            return new object[] {
                    @return,
                    retVal};
        }
        
        private void OnGetExportProfilesPathCompleted(object state) {
            if ((this.GetExportProfilesPathCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetExportProfilesPathCompleted(this, new GetExportProfilesPathCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetExportProfilesPathAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, int posType, string userName) {
            this.GetExportProfilesPathAsync(HeaderInfo, documentNamespace, posType, userName, null);
        }
        
        public void GetExportProfilesPathAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, int posType, string userName, object userState) {
            if ((this.onBeginGetExportProfilesPathDelegate == null)) {
                this.onBeginGetExportProfilesPathDelegate = new BeginOperationDelegate(this.OnBeginGetExportProfilesPath);
            }
            if ((this.onEndGetExportProfilesPathDelegate == null)) {
                this.onEndGetExportProfilesPathDelegate = new EndOperationDelegate(this.OnEndGetExportProfilesPath);
            }
            if ((this.onGetExportProfilesPathCompletedDelegate == null)) {
                this.onGetExportProfilesPathCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetExportProfilesPathCompleted);
            }
            base.InvokeAsync(this.onBeginGetExportProfilesPathDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        posType,
                        userName}, this.onEndGetExportProfilesPathDelegate, this.onGetExportProfilesPathCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.OpenDocumentAndImportOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.OpenDocumentAndImport(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.OpenDocumentAndImportIn request) {
            return base.Channel.OpenDocumentAndImport(request);
        }
        
        public bool OpenDocumentAndImport(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string envelopeFolder, ref string resultDescription) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.OpenDocumentAndImportIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.OpenDocumentAndImportIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.envelopeFolder = envelopeFolder;
            inValue.resultDescription = resultDescription;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.OpenDocumentAndImportOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).OpenDocumentAndImport(inValue);
            HeaderInfo = retVal.HeaderInfo;
            resultDescription = retVal.resultDescription;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginOpenDocumentAndImport(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.OpenDocumentAndImportIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOpenDocumentAndImport(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginOpenDocumentAndImport(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string envelopeFolder, string resultDescription, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.OpenDocumentAndImportIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.OpenDocumentAndImportIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.envelopeFolder = envelopeFolder;
            inValue.resultDescription = resultDescription;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginOpenDocumentAndImport(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.OpenDocumentAndImportOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndOpenDocumentAndImport(System.IAsyncResult result) {
            return base.Channel.EndOpenDocumentAndImport(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndOpenDocumentAndImport(System.IAsyncResult result, out bool @return, out string resultDescription) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.OpenDocumentAndImportOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndOpenDocumentAndImport(result);
            @return = retVal.@return;
            resultDescription = retVal.resultDescription;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginOpenDocumentAndImport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            string envelopeFolder = ((string)(inValues[2]));
            string resultDescription = ((string)(inValues[3]));
            return this.BeginOpenDocumentAndImport(HeaderInfo, documentNamespace, envelopeFolder, resultDescription, callback, asyncState);
        }
        
        private object[] OnEndOpenDocumentAndImport(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            string resultDescription = this.GetDefaultValueForInitialization<string>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndOpenDocumentAndImport(result, out @return, out resultDescription);
            return new object[] {
                    @return,
                    resultDescription,
                    retVal};
        }
        
        private void OnOpenDocumentAndImportCompleted(object state) {
            if ((this.OpenDocumentAndImportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenDocumentAndImportCompleted(this, new OpenDocumentAndImportCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenDocumentAndImportAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string envelopeFolder, string resultDescription) {
            this.OpenDocumentAndImportAsync(HeaderInfo, documentNamespace, envelopeFolder, resultDescription, null);
        }
        
        public void OpenDocumentAndImportAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string envelopeFolder, string resultDescription, object userState) {
            if ((this.onBeginOpenDocumentAndImportDelegate == null)) {
                this.onBeginOpenDocumentAndImportDelegate = new BeginOperationDelegate(this.OnBeginOpenDocumentAndImport);
            }
            if ((this.onEndOpenDocumentAndImportDelegate == null)) {
                this.onEndOpenDocumentAndImportDelegate = new EndOperationDelegate(this.OnEndOpenDocumentAndImport);
            }
            if ((this.onOpenDocumentAndImportCompletedDelegate == null)) {
                this.onOpenDocumentAndImportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenDocumentAndImportCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDocumentAndImportDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        envelopeFolder,
                        resultDescription}, this.onEndOpenDocumentAndImportDelegate, this.onOpenDocumentAndImportCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ImportOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.Import(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ImportIn request) {
            return base.Channel.Import(request);
        }
        
        public bool Import(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, int documentHandle, string envelopeFolder, ref string resultDescription) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ImportIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ImportIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentHandle = documentHandle;
            inValue.envelopeFolder = envelopeFolder;
            inValue.resultDescription = resultDescription;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ImportOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).Import(inValue);
            HeaderInfo = retVal.HeaderInfo;
            resultDescription = retVal.resultDescription;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginImport(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ImportIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginImport(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginImport(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, int documentHandle, string envelopeFolder, string resultDescription, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ImportIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ImportIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentHandle = documentHandle;
            inValue.envelopeFolder = envelopeFolder;
            inValue.resultDescription = resultDescription;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginImport(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ImportOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndImport(System.IAsyncResult result) {
            return base.Channel.EndImport(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndImport(System.IAsyncResult result, out bool @return, out string resultDescription) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.ImportOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndImport(result);
            @return = retVal.@return;
            resultDescription = retVal.resultDescription;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginImport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            int documentHandle = ((int)(inValues[1]));
            string envelopeFolder = ((string)(inValues[2]));
            string resultDescription = ((string)(inValues[3]));
            return this.BeginImport(HeaderInfo, documentHandle, envelopeFolder, resultDescription, callback, asyncState);
        }
        
        private object[] OnEndImport(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            string resultDescription = this.GetDefaultValueForInitialization<string>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndImport(result, out @return, out resultDescription);
            return new object[] {
                    @return,
                    resultDescription,
                    retVal};
        }
        
        private void OnImportCompleted(object state) {
            if ((this.ImportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ImportCompleted(this, new ImportCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ImportAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, int documentHandle, string envelopeFolder, string resultDescription) {
            this.ImportAsync(HeaderInfo, documentHandle, envelopeFolder, resultDescription, null);
        }
        
        public void ImportAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, int documentHandle, string envelopeFolder, string resultDescription, object userState) {
            if ((this.onBeginImportDelegate == null)) {
                this.onBeginImportDelegate = new BeginOperationDelegate(this.OnBeginImport);
            }
            if ((this.onEndImportDelegate == null)) {
                this.onEndImportDelegate = new EndOperationDelegate(this.OnEndImport);
            }
            if ((this.onImportCompletedDelegate == null)) {
                this.onImportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnImportCompleted);
            }
            base.InvokeAsync(this.onBeginImportDelegate, new object[] {
                        HeaderInfo,
                        documentHandle,
                        envelopeFolder,
                        resultDescription}, this.onEndImportDelegate, this.onImportCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLExportParametersOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.GetXMLExportParameters(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLExportParametersIn request) {
            return base.Channel.GetXMLExportParameters(request);
        }
        
        public bool GetXMLExportParameters(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, ref string xmlParams, ref string[] messages, string code) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLExportParametersIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLExportParametersIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.xmlParams = xmlParams;
            inValue.messages = messages;
            inValue.Code = code;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLExportParametersOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).GetXMLExportParameters(inValue);
            HeaderInfo = retVal.HeaderInfo;
            xmlParams = retVal.xmlParams;
            messages = retVal.messages;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginGetXMLExportParameters(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLExportParametersIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetXMLExportParameters(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetXMLExportParameters(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string xmlParams, string[] messages, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLExportParametersIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLExportParametersIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.xmlParams = xmlParams;
            inValue.messages = messages;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginGetXMLExportParameters(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLExportParametersOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndGetXMLExportParameters(System.IAsyncResult result) {
            return base.Channel.EndGetXMLExportParameters(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndGetXMLExportParameters(System.IAsyncResult result, out bool @return, out string xmlParams, out string[] messages) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLExportParametersOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndGetXMLExportParameters(result);
            @return = retVal.@return;
            xmlParams = retVal.xmlParams;
            messages = retVal.messages;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginGetXMLExportParameters(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            string xmlParams = ((string)(inValues[2]));
            string[] messages = ((string[])(inValues[3]));
            return this.BeginGetXMLExportParameters(HeaderInfo, documentNamespace, xmlParams, messages, callback, asyncState);
        }
        
        private object[] OnEndGetXMLExportParameters(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            string xmlParams = this.GetDefaultValueForInitialization<string>();
            string[] messages = this.GetDefaultValueForInitialization<string[]>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndGetXMLExportParameters(result, out @return, out xmlParams, out messages);
            return new object[] {
                    @return,
                    xmlParams,
                    messages,
                    retVal};
        }
        
        private void OnGetXMLExportParametersCompleted(object state) {
            if ((this.GetXMLExportParametersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetXMLExportParametersCompleted(this, new GetXMLExportParametersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetXMLExportParametersAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string xmlParams, string[] messages) {
            this.GetXMLExportParametersAsync(HeaderInfo, documentNamespace, xmlParams, messages, null);
        }
        
        public void GetXMLExportParametersAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string xmlParams, string[] messages, object userState) {
            if ((this.onBeginGetXMLExportParametersDelegate == null)) {
                this.onBeginGetXMLExportParametersDelegate = new BeginOperationDelegate(this.OnBeginGetXMLExportParameters);
            }
            if ((this.onEndGetXMLExportParametersDelegate == null)) {
                this.onEndGetXMLExportParametersDelegate = new EndOperationDelegate(this.OnEndGetXMLExportParameters);
            }
            if ((this.onGetXMLExportParametersCompletedDelegate == null)) {
                this.onGetXMLExportParametersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetXMLExportParametersCompleted);
            }
            base.InvokeAsync(this.onBeginGetXMLExportParametersDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        xmlParams,
                        messages}, this.onEndGetXMLExportParametersDelegate, this.onGetXMLExportParametersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLImportParametersOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.GetXMLImportParameters(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLImportParametersIn request) {
            return base.Channel.GetXMLImportParameters(request);
        }
        
        public bool GetXMLImportParameters(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, ref string xmlParams, ref string[] messages, string code) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLImportParametersIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLImportParametersIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.xmlParams = xmlParams;
            inValue.messages = messages;
            inValue.Code = code;

            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLImportParametersOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).GetXMLImportParameters(inValue);
            HeaderInfo = retVal.HeaderInfo;
            xmlParams = retVal.xmlParams;
            messages = retVal.messages;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginGetXMLImportParameters(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLImportParametersIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetXMLImportParameters(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetXMLImportParameters(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string xmlParams, string[] messages, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLImportParametersIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLImportParametersIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.xmlParams = xmlParams;
            inValue.messages = messages;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginGetXMLImportParameters(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLImportParametersOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndGetXMLImportParameters(System.IAsyncResult result) {
            return base.Channel.EndGetXMLImportParameters(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndGetXMLImportParameters(System.IAsyncResult result, out bool @return, out string xmlParams, out string[] messages) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLImportParametersOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndGetXMLImportParameters(result);
            @return = retVal.@return;
            xmlParams = retVal.xmlParams;
            messages = retVal.messages;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginGetXMLImportParameters(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            string xmlParams = ((string)(inValues[2]));
            string[] messages = ((string[])(inValues[3]));
            return this.BeginGetXMLImportParameters(HeaderInfo, documentNamespace, xmlParams, messages, callback, asyncState);
        }
        
        private object[] OnEndGetXMLImportParameters(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            string xmlParams = this.GetDefaultValueForInitialization<string>();
            string[] messages = this.GetDefaultValueForInitialization<string[]>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndGetXMLImportParameters(result, out @return, out xmlParams, out messages);
            return new object[] {
                    @return,
                    xmlParams,
                    messages,
                    retVal};
        }
        
        private void OnGetXMLImportParametersCompleted(object state) {
            if ((this.GetXMLImportParametersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetXMLImportParametersCompleted(this, new GetXMLImportParametersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetXMLImportParametersAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string xmlParams, string[] messages) {
            this.GetXMLImportParametersAsync(HeaderInfo, documentNamespace, xmlParams, messages, null);
        }
        
        public void GetXMLImportParametersAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string xmlParams, string[] messages, object userState) {
            if ((this.onBeginGetXMLImportParametersDelegate == null)) {
                this.onBeginGetXMLImportParametersDelegate = new BeginOperationDelegate(this.OnBeginGetXMLImportParameters);
            }
            if ((this.onEndGetXMLImportParametersDelegate == null)) {
                this.onEndGetXMLImportParametersDelegate = new EndOperationDelegate(this.OnEndGetXMLImportParameters);
            }
            if ((this.onGetXMLImportParametersCompletedDelegate == null)) {
                this.onGetXMLImportParametersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetXMLImportParametersCompleted);
            }
            base.InvokeAsync(this.onBeginGetXMLImportParametersDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        xmlParams,
                        messages}, this.onEndGetXMLImportParametersDelegate, this.onGetXMLImportParametersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLExportInUnattendedModeOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.RunXMLExportInUnattendedMode(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLExportInUnattendedModeIn request) {
            return base.Channel.RunXMLExportInUnattendedMode(request);
        }
        
        public bool RunXMLExportInUnattendedMode(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string xmlParams, ref int documentHandle, ref string[] messages) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLExportInUnattendedModeIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLExportInUnattendedModeIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.xmlParams = xmlParams;
            inValue.documentHandle = documentHandle;
            inValue.messages = messages;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLExportInUnattendedModeOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).RunXMLExportInUnattendedMode(inValue);
            HeaderInfo = retVal.HeaderInfo;
            documentHandle = retVal.documentHandle;
            messages = retVal.messages;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginRunXMLExportInUnattendedMode(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLExportInUnattendedModeIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRunXMLExportInUnattendedMode(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRunXMLExportInUnattendedMode(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string xmlParams, int documentHandle, string[] messages, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLExportInUnattendedModeIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLExportInUnattendedModeIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.xmlParams = xmlParams;
            inValue.documentHandle = documentHandle;
            inValue.messages = messages;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginRunXMLExportInUnattendedMode(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLExportInUnattendedModeOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndRunXMLExportInUnattendedMode(System.IAsyncResult result) {
            return base.Channel.EndRunXMLExportInUnattendedMode(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndRunXMLExportInUnattendedMode(System.IAsyncResult result, out bool @return, out int documentHandle, out string[] messages) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLExportInUnattendedModeOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndRunXMLExportInUnattendedMode(result);
            @return = retVal.@return;
            documentHandle = retVal.documentHandle;
            messages = retVal.messages;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginRunXMLExportInUnattendedMode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            string xmlParams = ((string)(inValues[2]));
            int documentHandle = ((int)(inValues[3]));
            string[] messages = ((string[])(inValues[4]));
            return this.BeginRunXMLExportInUnattendedMode(HeaderInfo, documentNamespace, xmlParams, documentHandle, messages, callback, asyncState);
        }
        
        private object[] OnEndRunXMLExportInUnattendedMode(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            int documentHandle = this.GetDefaultValueForInitialization<int>();
            string[] messages = this.GetDefaultValueForInitialization<string[]>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndRunXMLExportInUnattendedMode(result, out @return, out documentHandle, out messages);
            return new object[] {
                    @return,
                    documentHandle,
                    messages,
                    retVal};
        }
        
        private void OnRunXMLExportInUnattendedModeCompleted(object state) {
            if ((this.RunXMLExportInUnattendedModeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RunXMLExportInUnattendedModeCompleted(this, new RunXMLExportInUnattendedModeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RunXMLExportInUnattendedModeAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string xmlParams, int documentHandle, string[] messages) {
            this.RunXMLExportInUnattendedModeAsync(HeaderInfo, documentNamespace, xmlParams, documentHandle, messages, null);
        }
        
        public void RunXMLExportInUnattendedModeAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string xmlParams, int documentHandle, string[] messages, object userState) {
            if ((this.onBeginRunXMLExportInUnattendedModeDelegate == null)) {
                this.onBeginRunXMLExportInUnattendedModeDelegate = new BeginOperationDelegate(this.OnBeginRunXMLExportInUnattendedMode);
            }
            if ((this.onEndRunXMLExportInUnattendedModeDelegate == null)) {
                this.onEndRunXMLExportInUnattendedModeDelegate = new EndOperationDelegate(this.OnEndRunXMLExportInUnattendedMode);
            }
            if ((this.onRunXMLExportInUnattendedModeCompletedDelegate == null)) {
                this.onRunXMLExportInUnattendedModeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRunXMLExportInUnattendedModeCompleted);
            }
            base.InvokeAsync(this.onBeginRunXMLExportInUnattendedModeDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        xmlParams,
                        documentHandle,
                        messages}, this.onEndRunXMLExportInUnattendedModeDelegate, this.onRunXMLExportInUnattendedModeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLImportInUnattendedModeOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.RunXMLImportInUnattendedMode(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLImportInUnattendedModeIn request) {
            return base.Channel.RunXMLImportInUnattendedMode(request);
        }
        
        public bool RunXMLImportInUnattendedMode(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, bool downloadEnvelopes, bool validateData, string xmlParams, ref int documentHandle, ref string[] messages) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLImportInUnattendedModeIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLImportInUnattendedModeIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.downloadEnvelopes = downloadEnvelopes;
            inValue.validateData = validateData;
            inValue.xmlParams = xmlParams;
            inValue.documentHandle = documentHandle;
            inValue.messages = messages;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLImportInUnattendedModeOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).RunXMLImportInUnattendedMode(inValue);
            HeaderInfo = retVal.HeaderInfo;
            documentHandle = retVal.documentHandle;
            messages = retVal.messages;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginRunXMLImportInUnattendedMode(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLImportInUnattendedModeIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRunXMLImportInUnattendedMode(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRunXMLImportInUnattendedMode(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, bool downloadEnvelopes, bool validateData, string xmlParams, int documentHandle, string[] messages, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLImportInUnattendedModeIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLImportInUnattendedModeIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.downloadEnvelopes = downloadEnvelopes;
            inValue.validateData = validateData;
            inValue.xmlParams = xmlParams;
            inValue.documentHandle = documentHandle;
            inValue.messages = messages;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginRunXMLImportInUnattendedMode(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLImportInUnattendedModeOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndRunXMLImportInUnattendedMode(System.IAsyncResult result) {
            return base.Channel.EndRunXMLImportInUnattendedMode(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndRunXMLImportInUnattendedMode(System.IAsyncResult result, out bool @return, out int documentHandle, out string[] messages) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.RunXMLImportInUnattendedModeOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndRunXMLImportInUnattendedMode(result);
            @return = retVal.@return;
            documentHandle = retVal.documentHandle;
            messages = retVal.messages;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginRunXMLImportInUnattendedMode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            bool downloadEnvelopes = ((bool)(inValues[2]));
            bool validateData = ((bool)(inValues[3]));
            string xmlParams = ((string)(inValues[4]));
            int documentHandle = ((int)(inValues[5]));
            string[] messages = ((string[])(inValues[6]));
            return this.BeginRunXMLImportInUnattendedMode(HeaderInfo, documentNamespace, downloadEnvelopes, validateData, xmlParams, documentHandle, messages, callback, asyncState);
        }
        
        private object[] OnEndRunXMLImportInUnattendedMode(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            int documentHandle = this.GetDefaultValueForInitialization<int>();
            string[] messages = this.GetDefaultValueForInitialization<string[]>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndRunXMLImportInUnattendedMode(result, out @return, out documentHandle, out messages);
            return new object[] {
                    @return,
                    documentHandle,
                    messages,
                    retVal};
        }
        
        private void OnRunXMLImportInUnattendedModeCompleted(object state) {
            if ((this.RunXMLImportInUnattendedModeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RunXMLImportInUnattendedModeCompleted(this, new RunXMLImportInUnattendedModeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RunXMLImportInUnattendedModeAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, bool downloadEnvelopes, bool validateData, string xmlParams, int documentHandle, string[] messages) {
            this.RunXMLImportInUnattendedModeAsync(HeaderInfo, documentNamespace, downloadEnvelopes, validateData, xmlParams, documentHandle, messages, null);
        }
        
        public void RunXMLImportInUnattendedModeAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, bool downloadEnvelopes, bool validateData, string xmlParams, int documentHandle, string[] messages, object userState) {
            if ((this.onBeginRunXMLImportInUnattendedModeDelegate == null)) {
                this.onBeginRunXMLImportInUnattendedModeDelegate = new BeginOperationDelegate(this.OnBeginRunXMLImportInUnattendedMode);
            }
            if ((this.onEndRunXMLImportInUnattendedModeDelegate == null)) {
                this.onEndRunXMLImportInUnattendedModeDelegate = new EndOperationDelegate(this.OnEndRunXMLImportInUnattendedMode);
            }
            if ((this.onRunXMLImportInUnattendedModeCompletedDelegate == null)) {
                this.onRunXMLImportInUnattendedModeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRunXMLImportInUnattendedModeCompleted);
            }
            base.InvokeAsync(this.onBeginRunXMLImportInUnattendedModeDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        downloadEnvelopes,
                        validateData,
                        xmlParams,
                        documentHandle,
                        messages}, this.onEndRunXMLImportInUnattendedModeDelegate, this.onRunXMLImportInUnattendedModeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDataOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.GetData(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDataIn request) {
            return base.Channel.GetData(request);
        }
        
        public bool GetData(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string param, bool useApproximation, string loginName, ref string[] result) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDataIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDataIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.param = param;
            inValue.useApproximation = useApproximation;
            inValue.loginName = loginName;
            inValue.result = result;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDataOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).GetData(inValue);
            HeaderInfo = retVal.HeaderInfo;
            result = retVal.result;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginGetData(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDataIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetData(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetData(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string param, bool useApproximation, string loginName, string[] result, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDataIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDataIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.param = param;
            inValue.useApproximation = useApproximation;
            inValue.loginName = loginName;
            inValue.result = result;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginGetData(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDataOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndGetData(System.IAsyncResult result) {
            return base.Channel.EndGetData(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndGetData(System.IAsyncResult result, out bool @return, out string[] result1) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetDataOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndGetData(result);
            @return = retVal.@return;
            result1 = retVal.result;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginGetData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string param = ((string)(inValues[1]));
            bool useApproximation = ((bool)(inValues[2]));
            string loginName = ((string)(inValues[3]));
            string[] result = ((string[])(inValues[4]));
            return this.BeginGetData(HeaderInfo, param, useApproximation, loginName, result, callback, asyncState);
        }
        
        private object[] OnEndGetData(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            string[] result1 = this.GetDefaultValueForInitialization<string[]>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndGetData(result, out @return, out result1);
            return new object[] {
                    @return,
                    result1,
                    retVal};
        }
        
        private void OnGetDataCompleted(object state) {
            if ((this.GetDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string param, bool useApproximation, string loginName, string[] result) {
            this.GetDataAsync(HeaderInfo, param, useApproximation, loginName, result, null);
        }
        
        public void GetDataAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string param, bool useApproximation, string loginName, string[] result, object userState) {
            if ((this.onBeginGetDataDelegate == null)) {
                this.onBeginGetDataDelegate = new BeginOperationDelegate(this.OnBeginGetData);
            }
            if ((this.onEndGetDataDelegate == null)) {
                this.onEndGetDataDelegate = new EndOperationDelegate(this.OnEndGetData);
            }
            if ((this.onGetDataCompletedDelegate == null)) {
                this.onGetDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataDelegate, new object[] {
                        HeaderInfo,
                        param,
                        useApproximation,
                        loginName,
                        result}, this.onEndGetDataDelegate, this.onGetDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.SetDataOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.SetData(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.SetDataIn request) {
            return base.Channel.SetData(request);
        }
        
        public bool SetData(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string data, int saveAction, string loginName, ref string result) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.SetDataIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.SetDataIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.data = data;
            inValue.saveAction = saveAction;
            inValue.loginName = loginName;
            inValue.result = result;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.SetDataOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).SetData(inValue);
            HeaderInfo = retVal.HeaderInfo;
            result = retVal.result;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginSetData(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.SetDataIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetData(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetData(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string data, int saveAction, string loginName, string result, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.SetDataIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.SetDataIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.data = data;
            inValue.saveAction = saveAction;
            inValue.loginName = loginName;
            inValue.result = result;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginSetData(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.SetDataOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndSetData(System.IAsyncResult result) {
            return base.Channel.EndSetData(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndSetData(System.IAsyncResult result, out bool @return, out string result1) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.SetDataOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndSetData(result);
            @return = retVal.@return;
            result1 = retVal.result;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginSetData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string data = ((string)(inValues[1]));
            int saveAction = ((int)(inValues[2]));
            string loginName = ((string)(inValues[3]));
            string result = ((string)(inValues[4]));
            return this.BeginSetData(HeaderInfo, data, saveAction, loginName, result, callback, asyncState);
        }
        
        private object[] OnEndSetData(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            string result1 = this.GetDefaultValueForInitialization<string>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndSetData(result, out @return, out result1);
            return new object[] {
                    @return,
                    result1,
                    retVal};
        }
        
        private void OnSetDataCompleted(object state) {
            if ((this.SetDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetDataCompleted(this, new SetDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetDataAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string data, int saveAction, string loginName, string result) {
            this.SetDataAsync(HeaderInfo, data, saveAction, loginName, result, null);
        }
        
        public void SetDataAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string data, int saveAction, string loginName, string result, object userState) {
            if ((this.onBeginSetDataDelegate == null)) {
                this.onBeginSetDataDelegate = new BeginOperationDelegate(this.OnBeginSetData);
            }
            if ((this.onEndSetDataDelegate == null)) {
                this.onEndSetDataDelegate = new EndOperationDelegate(this.OnEndSetData);
            }
            if ((this.onSetDataCompletedDelegate == null)) {
                this.onSetDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetDataCompleted);
            }
            base.InvokeAsync(this.onBeginSetDataDelegate, new object[] {
                        HeaderInfo,
                        data,
                        saveAction,
                        loginName,
                        result}, this.onEndSetDataDelegate, this.onSetDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLParametersOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.GetXMLParameters(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLParametersIn request) {
            return base.Channel.GetXMLParameters(request);
        }
        
        public bool GetXMLParameters(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string param, bool useApproximation, string loginName, ref string result) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLParametersIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLParametersIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.param = param;
            inValue.useApproximation = useApproximation;
            inValue.loginName = loginName;
            inValue.result = result;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLParametersOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).GetXMLParameters(inValue);
            HeaderInfo = retVal.HeaderInfo;
            result = retVal.result;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginGetXMLParameters(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLParametersIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetXMLParameters(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetXMLParameters(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string param, bool useApproximation, string loginName, string result, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLParametersIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLParametersIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.param = param;
            inValue.useApproximation = useApproximation;
            inValue.loginName = loginName;
            inValue.result = result;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginGetXMLParameters(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLParametersOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndGetXMLParameters(System.IAsyncResult result) {
            return base.Channel.EndGetXMLParameters(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndGetXMLParameters(System.IAsyncResult result, out bool @return, out string result1) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLParametersOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndGetXMLParameters(result);
            @return = retVal.@return;
            result1 = retVal.result;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginGetXMLParameters(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string param = ((string)(inValues[1]));
            bool useApproximation = ((bool)(inValues[2]));
            string loginName = ((string)(inValues[3]));
            string result = ((string)(inValues[4]));
            return this.BeginGetXMLParameters(HeaderInfo, param, useApproximation, loginName, result, callback, asyncState);
        }
        
        private object[] OnEndGetXMLParameters(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            string result1 = this.GetDefaultValueForInitialization<string>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndGetXMLParameters(result, out @return, out result1);
            return new object[] {
                    @return,
                    result1,
                    retVal};
        }
        
        private void OnGetXMLParametersCompleted(object state) {
            if ((this.GetXMLParametersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetXMLParametersCompleted(this, new GetXMLParametersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetXMLParametersAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string param, bool useApproximation, string loginName, string result) {
            this.GetXMLParametersAsync(HeaderInfo, param, useApproximation, loginName, result, null);
        }
        
        public void GetXMLParametersAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string param, bool useApproximation, string loginName, string result, object userState) {
            if ((this.onBeginGetXMLParametersDelegate == null)) {
                this.onBeginGetXMLParametersDelegate = new BeginOperationDelegate(this.OnBeginGetXMLParameters);
            }
            if ((this.onEndGetXMLParametersDelegate == null)) {
                this.onEndGetXMLParametersDelegate = new EndOperationDelegate(this.OnEndGetXMLParameters);
            }
            if ((this.onGetXMLParametersCompletedDelegate == null)) {
                this.onGetXMLParametersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetXMLParametersCompleted);
            }
            base.InvokeAsync(this.onBeginGetXMLParametersDelegate, new object[] {
                        HeaderInfo,
                        param,
                        useApproximation,
                        loginName,
                        result}, this.onEndGetXMLParametersDelegate, this.onGetXMLParametersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLHotLinkOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.GetXMLHotLink(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLHotLinkIn request) {
            return base.Channel.GetXMLHotLink(request);
        }
        
        public string GetXMLHotLink(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string nsUri, string fieldXPath, string loginName) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLHotLinkIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLHotLinkIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.nsUri = nsUri;
            inValue.fieldXPath = fieldXPath;
            inValue.loginName = loginName;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLHotLinkOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).GetXMLHotLink(inValue);
            HeaderInfo = retVal.HeaderInfo;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginGetXMLHotLink(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLHotLinkIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetXMLHotLink(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetXMLHotLink(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string nsUri, string fieldXPath, string loginName, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLHotLinkIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLHotLinkIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.nsUri = nsUri;
            inValue.fieldXPath = fieldXPath;
            inValue.loginName = loginName;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginGetXMLHotLink(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLHotLinkOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndGetXMLHotLink(System.IAsyncResult result) {
            return base.Channel.EndGetXMLHotLink(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndGetXMLHotLink(System.IAsyncResult result, out string @return) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.GetXMLHotLinkOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndGetXMLHotLink(result);
            @return = retVal.@return;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginGetXMLHotLink(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            string nsUri = ((string)(inValues[2]));
            string fieldXPath = ((string)(inValues[3]));
            string loginName = ((string)(inValues[4]));
            return this.BeginGetXMLHotLink(HeaderInfo, documentNamespace, nsUri, fieldXPath, loginName, callback, asyncState);
        }
        
        private object[] OnEndGetXMLHotLink(System.IAsyncResult result) {
            string @return = this.GetDefaultValueForInitialization<string>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndGetXMLHotLink(result, out @return);
            return new object[] {
                    @return,
                    retVal};
        }
        
        private void OnGetXMLHotLinkCompleted(object state) {
            if ((this.GetXMLHotLinkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetXMLHotLinkCompleted(this, new GetXMLHotLinkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetXMLHotLinkAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string nsUri, string fieldXPath, string loginName) {
            this.GetXMLHotLinkAsync(HeaderInfo, documentNamespace, nsUri, fieldXPath, loginName, null);
        }
        
        public void GetXMLHotLinkAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string nsUri, string fieldXPath, string loginName, object userState) {
            if ((this.onBeginGetXMLHotLinkDelegate == null)) {
                this.onBeginGetXMLHotLinkDelegate = new BeginOperationDelegate(this.OnBeginGetXMLHotLink);
            }
            if ((this.onEndGetXMLHotLinkDelegate == null)) {
                this.onEndGetXMLHotLinkDelegate = new EndOperationDelegate(this.OnEndGetXMLHotLink);
            }
            if ((this.onGetXMLHotLinkCompletedDelegate == null)) {
                this.onGetXMLHotLinkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetXMLHotLinkCompleted);
            }
            base.InvokeAsync(this.onBeginGetXMLHotLinkDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        nsUri,
                        fieldXPath,
                        loginName}, this.onEndGetXMLHotLinkDelegate, this.onGetXMLHotLinkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.NewExportProfileOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.NewExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.NewExportProfileIn request) {
            return base.Channel.NewExportProfile(request);
        }
        
        public bool NewExportProfile(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string newProfileName, int posType, string userName, ref string profilePath) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.NewExportProfileIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.NewExportProfileIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.newProfileName = newProfileName;
            inValue.posType = posType;
            inValue.userName = userName;
            inValue.profilePath = profilePath;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.NewExportProfileOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).NewExportProfile(inValue);
            HeaderInfo = retVal.HeaderInfo;
            profilePath = retVal.profilePath;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginNewExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.NewExportProfileIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNewExportProfile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginNewExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string newProfileName, int posType, string userName, string profilePath, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.NewExportProfileIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.NewExportProfileIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.newProfileName = newProfileName;
            inValue.posType = posType;
            inValue.userName = userName;
            inValue.profilePath = profilePath;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginNewExportProfile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.NewExportProfileOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndNewExportProfile(System.IAsyncResult result) {
            return base.Channel.EndNewExportProfile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndNewExportProfile(System.IAsyncResult result, out bool @return, out string profilePath) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.NewExportProfileOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndNewExportProfile(result);
            @return = retVal.@return;
            profilePath = retVal.profilePath;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginNewExportProfile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            string newProfileName = ((string)(inValues[2]));
            int posType = ((int)(inValues[3]));
            string userName = ((string)(inValues[4]));
            string profilePath = ((string)(inValues[5]));
            return this.BeginNewExportProfile(HeaderInfo, documentNamespace, newProfileName, posType, userName, profilePath, callback, asyncState);
        }
        
        private object[] OnEndNewExportProfile(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            string profilePath = this.GetDefaultValueForInitialization<string>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndNewExportProfile(result, out @return, out profilePath);
            return new object[] {
                    @return,
                    profilePath,
                    retVal};
        }
        
        private void OnNewExportProfileCompleted(object state) {
            if ((this.NewExportProfileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NewExportProfileCompleted(this, new NewExportProfileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NewExportProfileAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string newProfileName, int posType, string userName, string profilePath) {
            this.NewExportProfileAsync(HeaderInfo, documentNamespace, newProfileName, posType, userName, profilePath, null);
        }
        
        public void NewExportProfileAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string newProfileName, int posType, string userName, string profilePath, object userState) {
            if ((this.onBeginNewExportProfileDelegate == null)) {
                this.onBeginNewExportProfileDelegate = new BeginOperationDelegate(this.OnBeginNewExportProfile);
            }
            if ((this.onEndNewExportProfileDelegate == null)) {
                this.onEndNewExportProfileDelegate = new EndOperationDelegate(this.OnEndNewExportProfile);
            }
            if ((this.onNewExportProfileCompletedDelegate == null)) {
                this.onNewExportProfileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNewExportProfileCompleted);
            }
            base.InvokeAsync(this.onBeginNewExportProfileDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        newProfileName,
                        posType,
                        userName,
                        profilePath}, this.onEndNewExportProfileDelegate, this.onNewExportProfileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloneExportProfileOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.CloneExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloneExportProfileIn request) {
            return base.Channel.CloneExportProfile(request);
        }
        
        public bool CloneExportProfile(ref Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, ref string profilePath, int posType, string userName) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloneExportProfileIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloneExportProfileIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profilePath = profilePath;
            inValue.posType = posType;
            inValue.userName = userName;
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloneExportProfileOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).CloneExportProfile(inValue);
            HeaderInfo = retVal.HeaderInfo;
            profilePath = retVal.profilePath;
            return retVal.@return;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.BeginCloneExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloneExportProfileIn request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCloneExportProfile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCloneExportProfile(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string userName, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloneExportProfileIn inValue = new Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloneExportProfileIn();
            inValue.HeaderInfo = HeaderInfo;
            inValue.documentNamespace = documentNamespace;
            inValue.profilePath = profilePath;
            inValue.posType = posType;
            inValue.userName = userName;
            return ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).BeginCloneExportProfile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloneExportProfileOut Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer.EndCloneExportProfile(System.IAsyncResult result) {
            return base.Channel.EndCloneExportProfile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo EndCloneExportProfile(System.IAsyncResult result, out bool @return, out string profilePath) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.CloneExportProfileOut retVal = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBXmlTransfer)(this)).EndCloneExportProfile(result);
            @return = retVal.@return;
            profilePath = retVal.profilePath;
            return retVal.HeaderInfo;
        }
        
        private System.IAsyncResult OnBeginCloneExportProfile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo = ((Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo)(inValues[0]));
            string documentNamespace = ((string)(inValues[1]));
            string profilePath = ((string)(inValues[2]));
            int posType = ((int)(inValues[3]));
            string userName = ((string)(inValues[4]));
            return this.BeginCloneExportProfile(HeaderInfo, documentNamespace, profilePath, posType, userName, callback, asyncState);
        }
        
        private object[] OnEndCloneExportProfile(System.IAsyncResult result) {
            bool @return = this.GetDefaultValueForInitialization<bool>();
            string profilePath = this.GetDefaultValueForInitialization<string>();
            Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo retVal = this.EndCloneExportProfile(result, out @return, out profilePath);
            return new object[] {
                    @return,
                    profilePath,
                    retVal};
        }
        
        private void OnCloneExportProfileCompleted(object state) {
            if ((this.CloneExportProfileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloneExportProfileCompleted(this, new CloneExportProfileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloneExportProfileAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string userName) {
            this.CloneExportProfileAsync(HeaderInfo, documentNamespace, profilePath, posType, userName, null);
        }
        
        public void CloneExportProfileAsync(Microarea.TaskBuilderNet.Core.TbXmlTransferInterface.TBHeaderInfo HeaderInfo, string documentNamespace, string profilePath, int posType, string userName, object userState) {
            if ((this.onBeginCloneExportProfileDelegate == null)) {
                this.onBeginCloneExportProfileDelegate = new BeginOperationDelegate(this.OnBeginCloneExportProfile);
            }
            if ((this.onEndCloneExportProfileDelegate == null)) {
                this.onEndCloneExportProfileDelegate = new EndOperationDelegate(this.OnEndCloneExportProfile);
            }
            if ((this.onCloneExportProfileCompletedDelegate == null)) {
                this.onCloneExportProfileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloneExportProfileCompleted);
            }
            base.InvokeAsync(this.onBeginCloneExportProfileDelegate, new object[] {
                        HeaderInfo,
                        documentNamespace,
                        profilePath,
                        posType,
                        userName}, this.onEndCloneExportProfileDelegate, this.onCloneExportProfileCompletedDelegate, userState);
        }
    }
}
