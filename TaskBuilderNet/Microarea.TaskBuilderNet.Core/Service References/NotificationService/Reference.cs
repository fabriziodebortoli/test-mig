//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microarea.TaskBuilderNet.Core.NotificationService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyBBFormSchema", Namespace="http://schemas.datacontract.org/2004/07/NotificationService")]
    [System.SerializableAttribute()]
    public partial class MyBBFormSchema : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Microarea.TaskBuilderNet.Core.NotificationService.MyBBFormInstance myBBFormInstanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string xmlSchemaField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Microarea.TaskBuilderNet.Core.NotificationService.MyBBFormInstance myBBFormInstance {
            get {
                return this.myBBFormInstanceField;
            }
            set {
                if ((object.ReferenceEquals(this.myBBFormInstanceField, value) != true)) {
                    this.myBBFormInstanceField = value;
                    this.RaisePropertyChanged("myBBFormInstance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string xmlSchema {
            get {
                return this.xmlSchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.xmlSchemaField, value) != true)) {
                    this.xmlSchemaField = value;
                    this.RaisePropertyChanged("xmlSchema");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyBBFormInstance", Namespace="http://schemas.datacontract.org/2004/07/NotificationService")]
    [System.SerializableAttribute()]
    public partial class MyBBFormInstance : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateProcessedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateSubmittedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FormInstanceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNotificationOnlyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ProcessedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid WorkFlowIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateProcessed {
            get {
                return this.DateProcessedField;
            }
            set {
                if ((this.DateProcessedField.Equals(value) != true)) {
                    this.DateProcessedField = value;
                    this.RaisePropertyChanged("DateProcessed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateSubmitted {
            get {
                return this.DateSubmittedField;
            }
            set {
                if ((this.DateSubmittedField.Equals(value) != true)) {
                    this.DateSubmittedField = value;
                    this.RaisePropertyChanged("DateSubmitted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FormInstanceId {
            get {
                return this.FormInstanceIdField;
            }
            set {
                if ((this.FormInstanceIdField.Equals(value) != true)) {
                    this.FormInstanceIdField = value;
                    this.RaisePropertyChanged("FormInstanceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNotificationOnly {
            get {
                return this.IsNotificationOnlyField;
            }
            set {
                if ((this.IsNotificationOnlyField.Equals(value) != true)) {
                    this.IsNotificationOnlyField = value;
                    this.RaisePropertyChanged("IsNotificationOnly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Processed {
            get {
                return this.ProcessedField;
            }
            set {
                if ((this.ProcessedField.Equals(value) != true)) {
                    this.ProcessedField = value;
                    this.RaisePropertyChanged("Processed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid WorkFlowId {
            get {
                return this.WorkFlowIdField;
            }
            set {
                if ((this.WorkFlowIdField.Equals(value) != true)) {
                    this.WorkFlowIdField = value;
                    this.RaisePropertyChanged("WorkFlowId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Event", Namespace="http://schemas.datacontract.org/2004/07/PAT.CRM.Portal.BrainIntegration")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microarea.TaskBuilderNet.Core.NotificationService.UserEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microarea.TaskBuilderNet.Core.NotificationService.NewWorkflowAssignedEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microarea.TaskBuilderNet.Core.NotificationService.UserWorkflowEvent))]
    public partial class Event : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserEvent", Namespace="http://schemas.datacontract.org/2004/07/PAT.CRM.Portal.BrainIntegration")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microarea.TaskBuilderNet.Core.NotificationService.NewWorkflowAssignedEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microarea.TaskBuilderNet.Core.NotificationService.UserWorkflowEvent))]
    public partial class UserEvent : Microarea.TaskBuilderNet.Core.NotificationService.Event {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NewWorkflowAssignedEvent", Namespace="http://schemas.datacontract.org/2004/07/PAT.CRM.Portal.BrainIntegration")]
    [System.SerializableAttribute()]
    public partial class NewWorkflowAssignedEvent : Microarea.TaskBuilderNet.Core.NotificationService.UserEvent {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AssignedWorkflowsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AssignedWorkflows {
            get {
                return this.AssignedWorkflowsField;
            }
            set {
                if ((this.AssignedWorkflowsField.Equals(value) != true)) {
                    this.AssignedWorkflowsField = value;
                    this.RaisePropertyChanged("AssignedWorkflows");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserWorkflowEvent", Namespace="http://schemas.datacontract.org/2004/07/PAT.CRM.Portal.BrainIntegration")]
    [System.SerializableAttribute()]
    public partial class UserWorkflowEvent : Microarea.TaskBuilderNet.Core.NotificationService.UserEvent {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid WorkflowIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid WorkflowID {
            get {
                return this.WorkflowIDField;
            }
            set {
                if ((this.WorkflowIDField.Equals(value) != true)) {
                    this.WorkflowIDField = value;
                    this.RaisePropertyChanged("WorkflowID");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NotificationService.INotificationService")]
    public interface INotificationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/IsAlive", ReplyAction="http://tempuri.org/INotificationService/IsAliveResponse")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/GetXSocketControllerUrl", ReplyAction="http://tempuri.org/INotificationService/GetXSocketControllerUrlResponse")]
        string GetXSocketControllerUrl();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/SendMessage", ReplyAction="http://tempuri.org/INotificationService/SendMessageResponse")]
        void SendMessage(string message, int workerId, int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/SendIGenericNotify", ReplyAction="http://tempuri.org/INotificationService/SendIGenericNotifyResponse")]
        void SendIGenericNotify(Microarea.TaskBuilderNet.Interfaces.GenericNotify notify, bool StoreOnDb);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/GetAllIGenericNotify", ReplyAction="http://tempuri.org/INotificationService/GetAllIGenericNotifyResponse")]
        Microarea.TaskBuilderNet.Interfaces.GenericNotify[] GetAllIGenericNotify(int workerId, int companyId, bool includeProcessed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/SetNotificationAsRead", ReplyAction="http://tempuri.org/INotificationService/SetNotificationAsReadResponse")]
        bool SetNotificationAsRead(int NotificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/TestInheritance", ReplyAction="http://tempuri.org/INotificationService/TestInheritanceResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microarea.TaskBuilderNet.Interfaces.Child))]
        Microarea.TaskBuilderNet.Interfaces.Father TestInheritance(Microarea.TaskBuilderNet.Interfaces.Father father);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/SendChatMessage", ReplyAction="http://tempuri.org/INotificationService/SendChatMessageResponse")]
        void SendChatMessage(Microarea.TaskBuilderNet.Interfaces.GenericNotify notify);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/GetBrainBusinessServiceUrl", ReplyAction="http://tempuri.org/INotificationService/GetBrainBusinessServiceUrlResponse")]
        string GetBrainBusinessServiceUrl();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/UpdateBrainBusinessServiceUrl", ReplyAction="http://tempuri.org/INotificationService/UpdateBrainBusinessServiceUrlResponse")]
        bool UpdateBrainBusinessServiceUrl(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/GetBBForm", ReplyAction="http://tempuri.org/INotificationService/GetBBFormResponse")]
        Microarea.TaskBuilderNet.Core.NotificationService.MyBBFormSchema GetBBForm(int formInstanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/SetBBForm", ReplyAction="http://tempuri.org/INotificationService/SetBBFormResponse")]
        bool SetBBForm(Microarea.TaskBuilderNet.Core.NotificationService.MyBBFormSchema myBBForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/GetAllBBFormInstances", ReplyAction="http://tempuri.org/INotificationService/GetAllBBFormInstancesResponse")]
        Microarea.TaskBuilderNet.Core.NotificationService.MyBBFormInstance[] GetAllBBFormInstances(int workerId, int companyId, bool includeProcessed);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationServiceChannel : Microarea.TaskBuilderNet.Core.NotificationService.INotificationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotificationServiceClient : System.ServiceModel.ClientBase<Microarea.TaskBuilderNet.Core.NotificationService.INotificationService>, Microarea.TaskBuilderNet.Core.NotificationService.INotificationService {
        
        public NotificationServiceClient() {
        }
        
        public NotificationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public string GetXSocketControllerUrl() {
            return base.Channel.GetXSocketControllerUrl();
        }
        
        public void SendMessage(string message, int workerId, int companyId) {
            base.Channel.SendMessage(message, workerId, companyId);
        }
        
        public void SendIGenericNotify(Microarea.TaskBuilderNet.Interfaces.GenericNotify notify, bool StoreOnDb) {
            base.Channel.SendIGenericNotify(notify, StoreOnDb);
        }
        
        public Microarea.TaskBuilderNet.Interfaces.GenericNotify[] GetAllIGenericNotify(int workerId, int companyId, bool includeProcessed) {
            return base.Channel.GetAllIGenericNotify(workerId, companyId, includeProcessed);
        }
        
        public bool SetNotificationAsRead(int NotificationId) {
            return base.Channel.SetNotificationAsRead(NotificationId);
        }
        
        public Microarea.TaskBuilderNet.Interfaces.Father TestInheritance(Microarea.TaskBuilderNet.Interfaces.Father father) {
            return base.Channel.TestInheritance(father);
        }
        
        public void SendChatMessage(Microarea.TaskBuilderNet.Interfaces.GenericNotify notify) {
            base.Channel.SendChatMessage(notify);
        }
        
        public string GetBrainBusinessServiceUrl() {
            return base.Channel.GetBrainBusinessServiceUrl();
        }
        
        public bool UpdateBrainBusinessServiceUrl(string url) {
            return base.Channel.UpdateBrainBusinessServiceUrl(url);
        }
        
        public Microarea.TaskBuilderNet.Core.NotificationService.MyBBFormSchema GetBBForm(int formInstanceId) {
            return base.Channel.GetBBForm(formInstanceId);
        }
        
        public bool SetBBForm(Microarea.TaskBuilderNet.Core.NotificationService.MyBBFormSchema myBBForm) {
            return base.Channel.SetBBForm(myBBForm);
        }
        
        public Microarea.TaskBuilderNet.Core.NotificationService.MyBBFormInstance[] GetAllBBFormInstances(int workerId, int companyId, bool includeProcessed) {
            return base.Channel.GetAllBBFormInstances(workerId, companyId, includeProcessed);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NotificationService.IBrainBusinessNotificationListener")]
    public interface IBrainBusinessNotificationListener {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrainBusinessNotificationListener/ReceiveEvent", ReplyAction="http://tempuri.org/IBrainBusinessNotificationListener/ReceiveEventResponse")]
        void ReceiveEvent(Microarea.TaskBuilderNet.Core.NotificationService.Event eventData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBrainBusinessNotificationListenerChannel : Microarea.TaskBuilderNet.Core.NotificationService.IBrainBusinessNotificationListener, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BrainBusinessNotificationListenerClient : System.ServiceModel.ClientBase<Microarea.TaskBuilderNet.Core.NotificationService.IBrainBusinessNotificationListener>, Microarea.TaskBuilderNet.Core.NotificationService.IBrainBusinessNotificationListener {
        
        public BrainBusinessNotificationListenerClient() {
        }
        
        public BrainBusinessNotificationListenerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BrainBusinessNotificationListenerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BrainBusinessNotificationListenerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BrainBusinessNotificationListenerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void ReceiveEvent(Microarea.TaskBuilderNet.Core.NotificationService.Event eventData) {
            base.Channel.ReceiveEvent(eventData);
        }
    }
}
