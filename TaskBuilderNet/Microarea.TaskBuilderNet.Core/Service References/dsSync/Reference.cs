//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microarea.TaskBuilderNet.Core.dsSync {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://microarea.it/DataSynchronizer/", ConfigurationName="dsSync.MicroareaDataSynchronizerSoap")]
    public interface MicroareaDataSynchronizerSoap {
        
        // CODEGEN: Generating message contract since element name username from namespace http://microarea.it/DataSynchronizer/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/Init", ReplyAction="*")]
        Microarea.TaskBuilderNet.Core.dsSync.InitResponse Init(Microarea.TaskBuilderNet.Core.dsSync.InitRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/Init", ReplyAction="*")]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.InitResponse> InitAsync(Microarea.TaskBuilderNet.Core.dsSync.InitRequest request);
        
        // CODEGEN: Generating message contract since element name rebootToken from namespace http://microarea.it/DataSynchronizer/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/Reboot", ReplyAction="*")]
        Microarea.TaskBuilderNet.Core.dsSync.RebootResponse Reboot(Microarea.TaskBuilderNet.Core.dsSync.RebootRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/Reboot", ReplyAction="*")]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.RebootResponse> RebootAsync(Microarea.TaskBuilderNet.Core.dsSync.RebootRequest request);
        
        // CODEGEN: Generating message contract since element name authenticationToken from namespace http://microarea.it/DataSynchronizer/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/Notify", ReplyAction="*")]
        Microarea.TaskBuilderNet.Core.dsSync.NotifyResponse Notify(Microarea.TaskBuilderNet.Core.dsSync.NotifyRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/Notify", ReplyAction="*")]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.NotifyResponse> NotifyAsync(Microarea.TaskBuilderNet.Core.dsSync.NotifyRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/IsAlive", ReplyAction="*")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/IsAlive", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/IsMassiveSynchronizing", ReplyAction="*")]
        bool IsMassiveSynchronizing(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/IsMassiveSynchronizing", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsMassiveSynchronizingAsync(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/IsMassiveValidating", ReplyAction="*")]
        bool IsMassiveValidating();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/IsMassiveValidating", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsMassiveValidatingAsync();
        
        // CODEGEN: Generating message contract since element name authenticationToken from namespace http://microarea.it/DataSynchronizer/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/SynchronizeOutbound", ReplyAction="*")]
        Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundResponse SynchronizeOutbound(Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/SynchronizeOutbound", ReplyAction="*")]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundResponse> SynchronizeOutboundAsync(Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundRequest request);
        
        // CODEGEN: Generating message contract since element name authenticationToken from namespace http://microarea.it/DataSynchronizer/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/SynchronizeErrorsRecovery", ReplyAction="*")]
        Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryResponse SynchronizeErrorsRecovery(Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/SynchronizeErrorsRecovery", ReplyAction="*")]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryResponse> SynchronizeErrorsRecoveryAsync(Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/SetProviderParameters", ReplyAction="*")]
        Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersResponse SetProviderParameters(Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/SetProviderParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersResponse> SetProviderParametersAsync(Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/TestProviderParameters", ReplyAction="*")]
        Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersResponse TestProviderParameters(Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/TestProviderParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersResponse> TestProviderParametersAsync(Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersRequest request);
        
        // CODEGEN: Generating message contract since element name providerName from namespace http://microarea.it/DataSynchronizer/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/GetActionsForDocument", ReplyAction="*")]
        Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentResponse GetActionsForDocument(Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/GetActionsForDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentResponse> GetActionsForDocumentAsync(Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/ValidateDocument", ReplyAction="*")]
        Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentResponse ValidateDocument(Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/ValidateDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentResponse> ValidateDocumentAsync(Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/ValidateOutbound", ReplyAction="*")]
        Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundResponse ValidateOutbound(Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/ValidateOutbound", ReplyAction="*")]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundResponse> ValidateOutboundAsync(Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/CreateExternalServer", ReplyAction="*")]
        Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerResponse CreateExternalServer(Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/CreateExternalServer", ReplyAction="*")]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerResponse> CreateExternalServerAsync(Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/CheckCompaniesToBeMapped", ReplyAction="*")]
        Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedResponse CheckCompaniesToBeMapped(Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/CheckCompaniesToBeMapped", ReplyAction="*")]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedResponse> CheckCompaniesToBeMappedAsync(Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/MapCompany", ReplyAction="*")]
        Microarea.TaskBuilderNet.Core.dsSync.MapCompanyResponse MapCompany(Microarea.TaskBuilderNet.Core.dsSync.MapCompanyRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/MapCompany", ReplyAction="*")]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.MapCompanyResponse> MapCompanyAsync(Microarea.TaskBuilderNet.Core.dsSync.MapCompanyRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/UploadActionPackage", ReplyAction="*")]
        Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageResponse UploadActionPackage(Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/UploadActionPackage", ReplyAction="*")]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageResponse> UploadActionPackageAsync(Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/SetConvergenceCriteria", ReplyAction="*")]
        Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaResponse SetConvergenceCriteria(Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/SetConvergenceCriteria", ReplyAction="*")]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaResponse> SetConvergenceCriteriaAsync(Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/GetConvergenceCriteria", ReplyAction="*")]
        Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaResponse GetConvergenceCriteria(Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/GetConvergenceCriteria", ReplyAction="*")]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaResponse> GetConvergenceCriteriaAsync(Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/SetGadgetPerm", ReplyAction="*")]
        Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermResponse SetGadgetPerm(Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/SetGadgetPerm", ReplyAction="*")]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermResponse> SetGadgetPermAsync(Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/PurgeSynchroConnectorLog", ReplyAction="*")]
        bool PurgeSynchroConnectorLog(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/DataSynchronizer/PurgeSynchroConnectorLog", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> PurgeSynchroConnectorLogAsync(int companyId);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class InitRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="Init", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.InitRequestBody Body;
        
        public InitRequest() {
        }
        
        public InitRequest(Microarea.TaskBuilderNet.Core.dsSync.InitRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class InitRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string username;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string password;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public bool windowsAuthentication;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string company;
        
        public InitRequestBody() {
        }
        
        public InitRequestBody(string username, string password, bool windowsAuthentication, string company) {
            this.username = username;
            this.password = password;
            this.windowsAuthentication = windowsAuthentication;
            this.company = company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class InitResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="InitResponse", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.InitResponseBody Body;
        
        public InitResponse() {
        }
        
        public InitResponse(Microarea.TaskBuilderNet.Core.dsSync.InitResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class InitResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool InitResult;
        
        public InitResponseBody() {
        }
        
        public InitResponseBody(bool InitResult) {
            this.InitResult = InitResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RebootRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="Reboot", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.RebootRequestBody Body;
        
        public RebootRequest() {
        }
        
        public RebootRequest(Microarea.TaskBuilderNet.Core.dsSync.RebootRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class RebootRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string rebootToken;
        
        public RebootRequestBody() {
        }
        
        public RebootRequestBody(string rebootToken) {
            this.rebootToken = rebootToken;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RebootResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="RebootResponse", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.RebootResponseBody Body;
        
        public RebootResponse() {
        }
        
        public RebootResponse(Microarea.TaskBuilderNet.Core.dsSync.RebootResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class RebootResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool RebootResult;
        
        public RebootResponseBody() {
        }
        
        public RebootResponseBody(bool RebootResult) {
            this.RebootResult = RebootResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class NotifyRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="Notify", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.NotifyRequestBody Body;
        
        public NotifyRequest() {
        }
        
        public NotifyRequest(Microarea.TaskBuilderNet.Core.dsSync.NotifyRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class NotifyRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string authenticationToken;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int logID;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string providerName;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string onlyForDMS;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public string iMagoConfigurations;
        
        public NotifyRequestBody() {
        }
        
        public NotifyRequestBody(string authenticationToken, int logID, string providerName, string onlyForDMS, string iMagoConfigurations) {
            this.authenticationToken = authenticationToken;
            this.logID = logID;
            this.providerName = providerName;
            this.onlyForDMS = onlyForDMS;
            this.iMagoConfigurations = iMagoConfigurations;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class NotifyResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="NotifyResponse", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.NotifyResponseBody Body;
        
        public NotifyResponse() {
        }
        
        public NotifyResponse(Microarea.TaskBuilderNet.Core.dsSync.NotifyResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class NotifyResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool NotifyResult;
        
        public NotifyResponseBody() {
        }
        
        public NotifyResponseBody(bool NotifyResult) {
            this.NotifyResult = NotifyResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SynchronizeOutboundRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SynchronizeOutbound", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundRequestBody Body;
        
        public SynchronizeOutboundRequest() {
        }
        
        public SynchronizeOutboundRequest(Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class SynchronizeOutboundRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string authenticationToken;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string providerName;
        
        public SynchronizeOutboundRequestBody() {
        }
        
        public SynchronizeOutboundRequestBody(string authenticationToken, string providerName) {
            this.authenticationToken = authenticationToken;
            this.providerName = providerName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SynchronizeOutboundResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SynchronizeOutboundResponse", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundResponseBody Body;
        
        public SynchronizeOutboundResponse() {
        }
        
        public SynchronizeOutboundResponse(Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class SynchronizeOutboundResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool SynchronizeOutboundResult;
        
        public SynchronizeOutboundResponseBody() {
        }
        
        public SynchronizeOutboundResponseBody(bool SynchronizeOutboundResult) {
            this.SynchronizeOutboundResult = SynchronizeOutboundResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SynchronizeErrorsRecoveryRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SynchronizeErrorsRecovery", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryRequestBody Body;
        
        public SynchronizeErrorsRecoveryRequest() {
        }
        
        public SynchronizeErrorsRecoveryRequest(Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class SynchronizeErrorsRecoveryRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string authenticationToken;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string providerName;
        
        public SynchronizeErrorsRecoveryRequestBody() {
        }
        
        public SynchronizeErrorsRecoveryRequestBody(string authenticationToken, string providerName) {
            this.authenticationToken = authenticationToken;
            this.providerName = providerName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SynchronizeErrorsRecoveryResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SynchronizeErrorsRecoveryResponse", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryResponseBody Body;
        
        public SynchronizeErrorsRecoveryResponse() {
        }
        
        public SynchronizeErrorsRecoveryResponse(Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class SynchronizeErrorsRecoveryResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool SynchronizeErrorsRecoveryResult;
        
        public SynchronizeErrorsRecoveryResponseBody() {
        }
        
        public SynchronizeErrorsRecoveryResponseBody(bool SynchronizeErrorsRecoveryResult) {
            this.SynchronizeErrorsRecoveryResult = SynchronizeErrorsRecoveryResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetProviderParametersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SetProviderParameters", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersRequestBody Body;
        
        public SetProviderParametersRequest() {
        }
        
        public SetProviderParametersRequest(Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class SetProviderParametersRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string authenticationToken;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string providerName;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string url;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string username;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public string password;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public string IAFModule;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public string parameters;
        
        public SetProviderParametersRequestBody() {
        }
        
        public SetProviderParametersRequestBody(string authenticationToken, string providerName, string url, string username, string password, string IAFModule, string parameters) {
            this.authenticationToken = authenticationToken;
            this.providerName = providerName;
            this.url = url;
            this.username = username;
            this.password = password;
            this.IAFModule = IAFModule;
            this.parameters = parameters;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetProviderParametersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SetProviderParametersResponse", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersResponseBody Body;
        
        public SetProviderParametersResponse() {
        }
        
        public SetProviderParametersResponse(Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class SetProviderParametersResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool SetProviderParametersResult;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string message;
        
        public SetProviderParametersResponseBody() {
        }
        
        public SetProviderParametersResponseBody(bool SetProviderParametersResult, string message) {
            this.SetProviderParametersResult = SetProviderParametersResult;
            this.message = message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class TestProviderParametersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="TestProviderParameters", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersRequestBody Body;
        
        public TestProviderParametersRequest() {
        }
        
        public TestProviderParametersRequest(Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class TestProviderParametersRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string authenticationToken;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string providerName;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string url;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string username;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public string password;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public string parameters;
        
        public TestProviderParametersRequestBody() {
        }
        
        public TestProviderParametersRequestBody(string authenticationToken, string providerName, string url, string username, string password, string parameters) {
            this.authenticationToken = authenticationToken;
            this.providerName = providerName;
            this.url = url;
            this.username = username;
            this.password = password;
            this.parameters = parameters;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class TestProviderParametersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="TestProviderParametersResponse", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersResponseBody Body;
        
        public TestProviderParametersResponse() {
        }
        
        public TestProviderParametersResponse(Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class TestProviderParametersResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool TestProviderParametersResult;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string message;
        
        public TestProviderParametersResponseBody() {
        }
        
        public TestProviderParametersResponseBody(bool TestProviderParametersResult, string message) {
            this.TestProviderParametersResult = TestProviderParametersResult;
            this.message = message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetActionsForDocumentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetActionsForDocument", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentRequestBody Body;
        
        public GetActionsForDocumentRequest() {
        }
        
        public GetActionsForDocumentRequest(Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class GetActionsForDocumentRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string providerName;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string docNamespace;
        
        public GetActionsForDocumentRequestBody() {
        }
        
        public GetActionsForDocumentRequestBody(string providerName, string docNamespace) {
            this.providerName = providerName;
            this.docNamespace = docNamespace;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetActionsForDocumentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetActionsForDocumentResponse", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentResponseBody Body;
        
        public GetActionsForDocumentResponse() {
        }
        
        public GetActionsForDocumentResponse(Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class GetActionsForDocumentResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string GetActionsForDocumentResult;
        
        public GetActionsForDocumentResponseBody() {
        }
        
        public GetActionsForDocumentResponseBody(string GetActionsForDocumentResult) {
            this.GetActionsForDocumentResult = GetActionsForDocumentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ValidateDocumentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ValidateDocument", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentRequestBody Body;
        
        public ValidateDocumentRequest() {
        }
        
        public ValidateDocumentRequest(Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class ValidateDocumentRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string authenticationToken;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string providerName;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string nameSpace;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string guidDoc;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public string serializedErrors;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int workerId;
        
        public ValidateDocumentRequestBody() {
        }
        
        public ValidateDocumentRequestBody(string authenticationToken, string providerName, string nameSpace, string guidDoc, string serializedErrors, int workerId) {
            this.authenticationToken = authenticationToken;
            this.providerName = providerName;
            this.nameSpace = nameSpace;
            this.guidDoc = guidDoc;
            this.serializedErrors = serializedErrors;
            this.workerId = workerId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ValidateDocumentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ValidateDocumentResponse", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentResponseBody Body;
        
        public ValidateDocumentResponse() {
        }
        
        public ValidateDocumentResponse(Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class ValidateDocumentResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool ValidateDocumentResult;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string message;
        
        public ValidateDocumentResponseBody() {
        }
        
        public ValidateDocumentResponseBody(bool ValidateDocumentResult, string message) {
            this.ValidateDocumentResult = ValidateDocumentResult;
            this.message = message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ValidateOutboundRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ValidateOutbound", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundRequestBody Body;
        
        public ValidateOutboundRequest() {
        }
        
        public ValidateOutboundRequest(Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class ValidateOutboundRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string authenticationToken;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string providerName;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public bool bCheckFK;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public bool bCheckXSD;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public string filters;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public string serializedTree;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public int workerId;
        
        public ValidateOutboundRequestBody() {
        }
        
        public ValidateOutboundRequestBody(string authenticationToken, string providerName, bool bCheckFK, bool bCheckXSD, string filters, string serializedTree, int workerId) {
            this.authenticationToken = authenticationToken;
            this.providerName = providerName;
            this.bCheckFK = bCheckFK;
            this.bCheckXSD = bCheckXSD;
            this.filters = filters;
            this.serializedTree = serializedTree;
            this.workerId = workerId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ValidateOutboundResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ValidateOutboundResponse", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundResponseBody Body;
        
        public ValidateOutboundResponse() {
        }
        
        public ValidateOutboundResponse(Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class ValidateOutboundResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool ValidateOutboundResult;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string message;
        
        public ValidateOutboundResponseBody() {
        }
        
        public ValidateOutboundResponseBody(bool ValidateOutboundResult, string message) {
            this.ValidateOutboundResult = ValidateOutboundResult;
            this.message = message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CreateExternalServerRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="CreateExternalServer", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerRequestBody Body;
        
        public CreateExternalServerRequest() {
        }
        
        public CreateExternalServerRequest(Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class CreateExternalServerRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string authenticationToken;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string providerName;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string extservername;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string connstr;
        
        public CreateExternalServerRequestBody() {
        }
        
        public CreateExternalServerRequestBody(string authenticationToken, string providerName, string extservername, string connstr) {
            this.authenticationToken = authenticationToken;
            this.providerName = providerName;
            this.extservername = extservername;
            this.connstr = connstr;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CreateExternalServerResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="CreateExternalServerResponse", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerResponseBody Body;
        
        public CreateExternalServerResponse() {
        }
        
        public CreateExternalServerResponse(Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class CreateExternalServerResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool CreateExternalServerResult;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string message;
        
        public CreateExternalServerResponseBody() {
        }
        
        public CreateExternalServerResponseBody(bool CreateExternalServerResult, string message) {
            this.CreateExternalServerResult = CreateExternalServerResult;
            this.message = message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CheckCompaniesToBeMappedRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="CheckCompaniesToBeMapped", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedRequestBody Body;
        
        public CheckCompaniesToBeMappedRequest() {
        }
        
        public CheckCompaniesToBeMappedRequest(Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class CheckCompaniesToBeMappedRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string authenticationToken;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string providerName;
        
        public CheckCompaniesToBeMappedRequestBody() {
        }
        
        public CheckCompaniesToBeMappedRequestBody(string authenticationToken, string providerName) {
            this.authenticationToken = authenticationToken;
            this.providerName = providerName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CheckCompaniesToBeMappedResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="CheckCompaniesToBeMappedResponse", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedResponseBody Body;
        
        public CheckCompaniesToBeMappedResponse() {
        }
        
        public CheckCompaniesToBeMappedResponse(Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class CheckCompaniesToBeMappedResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool CheckCompaniesToBeMappedResult;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string companylist;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string message;
        
        public CheckCompaniesToBeMappedResponseBody() {
        }
        
        public CheckCompaniesToBeMappedResponseBody(bool CheckCompaniesToBeMappedResult, string companylist, string message) {
            this.CheckCompaniesToBeMappedResult = CheckCompaniesToBeMappedResult;
            this.companylist = companylist;
            this.message = message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class MapCompanyRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="MapCompany", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.MapCompanyRequestBody Body;
        
        public MapCompanyRequest() {
        }
        
        public MapCompanyRequest(Microarea.TaskBuilderNet.Core.dsSync.MapCompanyRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class MapCompanyRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string authenticationToken;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string providerName;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string appreg;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public int magocompany;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public string infinitycompany;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public string taxid;
        
        public MapCompanyRequestBody() {
        }
        
        public MapCompanyRequestBody(string authenticationToken, string providerName, string appreg, int magocompany, string infinitycompany, string taxid) {
            this.authenticationToken = authenticationToken;
            this.providerName = providerName;
            this.appreg = appreg;
            this.magocompany = magocompany;
            this.infinitycompany = infinitycompany;
            this.taxid = taxid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class MapCompanyResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="MapCompanyResponse", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.MapCompanyResponseBody Body;
        
        public MapCompanyResponse() {
        }
        
        public MapCompanyResponse(Microarea.TaskBuilderNet.Core.dsSync.MapCompanyResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class MapCompanyResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool MapCompanyResult;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string message;
        
        public MapCompanyResponseBody() {
        }
        
        public MapCompanyResponseBody(bool MapCompanyResult, string message) {
            this.MapCompanyResult = MapCompanyResult;
            this.message = message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadActionPackageRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="UploadActionPackage", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageRequestBody Body;
        
        public UploadActionPackageRequest() {
        }
        
        public UploadActionPackageRequest(Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class UploadActionPackageRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string authenticationToken;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string providerName;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string actionpath;
        
        public UploadActionPackageRequestBody() {
        }
        
        public UploadActionPackageRequestBody(string authenticationToken, string providerName, string actionpath) {
            this.authenticationToken = authenticationToken;
            this.providerName = providerName;
            this.actionpath = actionpath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadActionPackageResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="UploadActionPackageResponse", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageResponseBody Body;
        
        public UploadActionPackageResponse() {
        }
        
        public UploadActionPackageResponse(Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class UploadActionPackageResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool UploadActionPackageResult;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string message;
        
        public UploadActionPackageResponseBody() {
        }
        
        public UploadActionPackageResponseBody(bool UploadActionPackageResult, string message) {
            this.UploadActionPackageResult = UploadActionPackageResult;
            this.message = message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetConvergenceCriteriaRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SetConvergenceCriteria", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaRequestBody Body;
        
        public SetConvergenceCriteriaRequest() {
        }
        
        public SetConvergenceCriteriaRequest(Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class SetConvergenceCriteriaRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string authenticationToken;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string providerName;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string xmlCriteria;
        
        public SetConvergenceCriteriaRequestBody() {
        }
        
        public SetConvergenceCriteriaRequestBody(string authenticationToken, string providerName, string xmlCriteria) {
            this.authenticationToken = authenticationToken;
            this.providerName = providerName;
            this.xmlCriteria = xmlCriteria;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetConvergenceCriteriaResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SetConvergenceCriteriaResponse", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaResponseBody Body;
        
        public SetConvergenceCriteriaResponse() {
        }
        
        public SetConvergenceCriteriaResponse(Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class SetConvergenceCriteriaResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool SetConvergenceCriteriaResult;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string message;
        
        public SetConvergenceCriteriaResponseBody() {
        }
        
        public SetConvergenceCriteriaResponseBody(bool SetConvergenceCriteriaResult, string message) {
            this.SetConvergenceCriteriaResult = SetConvergenceCriteriaResult;
            this.message = message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetConvergenceCriteriaRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetConvergenceCriteria", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaRequestBody Body;
        
        public GetConvergenceCriteriaRequest() {
        }
        
        public GetConvergenceCriteriaRequest(Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class GetConvergenceCriteriaRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string authenticationToken;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string providerName;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string actionName;
        
        public GetConvergenceCriteriaRequestBody() {
        }
        
        public GetConvergenceCriteriaRequestBody(string authenticationToken, string providerName, string actionName) {
            this.authenticationToken = authenticationToken;
            this.providerName = providerName;
            this.actionName = actionName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetConvergenceCriteriaResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetConvergenceCriteriaResponse", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaResponseBody Body;
        
        public GetConvergenceCriteriaResponse() {
        }
        
        public GetConvergenceCriteriaResponse(Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class GetConvergenceCriteriaResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool GetConvergenceCriteriaResult;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string xmlCriteria;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string message;
        
        public GetConvergenceCriteriaResponseBody() {
        }
        
        public GetConvergenceCriteriaResponseBody(bool GetConvergenceCriteriaResult, string xmlCriteria, string message) {
            this.GetConvergenceCriteriaResult = GetConvergenceCriteriaResult;
            this.xmlCriteria = xmlCriteria;
            this.message = message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetGadgetPermRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SetGadgetPerm", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermRequestBody Body;
        
        public SetGadgetPermRequest() {
        }
        
        public SetGadgetPermRequest(Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class SetGadgetPermRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string authenticationToken;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string providerName;
        
        public SetGadgetPermRequestBody() {
        }
        
        public SetGadgetPermRequestBody(string authenticationToken, string providerName) {
            this.authenticationToken = authenticationToken;
            this.providerName = providerName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetGadgetPermResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SetGadgetPermResponse", Namespace="http://microarea.it/DataSynchronizer/", Order=0)]
        public Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermResponseBody Body;
        
        public SetGadgetPermResponse() {
        }
        
        public SetGadgetPermResponse(Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://microarea.it/DataSynchronizer/")]
    public partial class SetGadgetPermResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool SetGadgetPermResult;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string message;
        
        public SetGadgetPermResponseBody() {
        }
        
        public SetGadgetPermResponseBody(bool SetGadgetPermResult, string message) {
            this.SetGadgetPermResult = SetGadgetPermResult;
            this.message = message;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MicroareaDataSynchronizerSoapChannel : Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MicroareaDataSynchronizerSoapClient : System.ServiceModel.ClientBase<Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap>, Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap {
        
        public MicroareaDataSynchronizerSoapClient() {
        }
        
        public MicroareaDataSynchronizerSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MicroareaDataSynchronizerSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MicroareaDataSynchronizerSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MicroareaDataSynchronizerSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.dsSync.InitResponse Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.Init(Microarea.TaskBuilderNet.Core.dsSync.InitRequest request) {
            return base.Channel.Init(request);
        }
        
        public bool Init(string username, string password, bool windowsAuthentication, string company) {
            Microarea.TaskBuilderNet.Core.dsSync.InitRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.InitRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.InitRequestBody();
            inValue.Body.username = username;
            inValue.Body.password = password;
            inValue.Body.windowsAuthentication = windowsAuthentication;
            inValue.Body.company = company;
            Microarea.TaskBuilderNet.Core.dsSync.InitResponse retVal = ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).Init(inValue);
            return retVal.Body.InitResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.InitResponse> Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.InitAsync(Microarea.TaskBuilderNet.Core.dsSync.InitRequest request) {
            return base.Channel.InitAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.InitResponse> InitAsync(string username, string password, bool windowsAuthentication, string company) {
            Microarea.TaskBuilderNet.Core.dsSync.InitRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.InitRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.InitRequestBody();
            inValue.Body.username = username;
            inValue.Body.password = password;
            inValue.Body.windowsAuthentication = windowsAuthentication;
            inValue.Body.company = company;
            return ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).InitAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.dsSync.RebootResponse Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.Reboot(Microarea.TaskBuilderNet.Core.dsSync.RebootRequest request) {
            return base.Channel.Reboot(request);
        }
        
        public bool Reboot(string rebootToken) {
            Microarea.TaskBuilderNet.Core.dsSync.RebootRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.RebootRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.RebootRequestBody();
            inValue.Body.rebootToken = rebootToken;
            Microarea.TaskBuilderNet.Core.dsSync.RebootResponse retVal = ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).Reboot(inValue);
            return retVal.Body.RebootResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.RebootResponse> Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.RebootAsync(Microarea.TaskBuilderNet.Core.dsSync.RebootRequest request) {
            return base.Channel.RebootAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.RebootResponse> RebootAsync(string rebootToken) {
            Microarea.TaskBuilderNet.Core.dsSync.RebootRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.RebootRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.RebootRequestBody();
            inValue.Body.rebootToken = rebootToken;
            return ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).RebootAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.dsSync.NotifyResponse Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.Notify(Microarea.TaskBuilderNet.Core.dsSync.NotifyRequest request) {
            return base.Channel.Notify(request);
        }
        
        public bool Notify(string authenticationToken, int logID, string providerName, string onlyForDMS, string iMagoConfigurations) {
            Microarea.TaskBuilderNet.Core.dsSync.NotifyRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.NotifyRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.NotifyRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.logID = logID;
            inValue.Body.providerName = providerName;
            inValue.Body.onlyForDMS = onlyForDMS;
            inValue.Body.iMagoConfigurations = iMagoConfigurations;
            Microarea.TaskBuilderNet.Core.dsSync.NotifyResponse retVal = ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).Notify(inValue);
            return retVal.Body.NotifyResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.NotifyResponse> Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.NotifyAsync(Microarea.TaskBuilderNet.Core.dsSync.NotifyRequest request) {
            return base.Channel.NotifyAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.NotifyResponse> NotifyAsync(string authenticationToken, int logID, string providerName, string onlyForDMS, string iMagoConfigurations) {
            Microarea.TaskBuilderNet.Core.dsSync.NotifyRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.NotifyRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.NotifyRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.logID = logID;
            inValue.Body.providerName = providerName;
            inValue.Body.onlyForDMS = onlyForDMS;
            inValue.Body.iMagoConfigurations = iMagoConfigurations;
            return ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).NotifyAsync(inValue);
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> IsAliveAsync() {
            return base.Channel.IsAliveAsync();
        }
        
        public bool IsMassiveSynchronizing(int companyId) {
            return base.Channel.IsMassiveSynchronizing(companyId);
        }
        
        public System.Threading.Tasks.Task<bool> IsMassiveSynchronizingAsync(int companyId) {
            return base.Channel.IsMassiveSynchronizingAsync(companyId);
        }
        
        public bool IsMassiveValidating() {
            return base.Channel.IsMassiveValidating();
        }
        
        public System.Threading.Tasks.Task<bool> IsMassiveValidatingAsync() {
            return base.Channel.IsMassiveValidatingAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundResponse Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.SynchronizeOutbound(Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundRequest request) {
            return base.Channel.SynchronizeOutbound(request);
        }
        
        public bool SynchronizeOutbound(string authenticationToken, string providerName) {
            Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundResponse retVal = ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).SynchronizeOutbound(inValue);
            return retVal.Body.SynchronizeOutboundResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundResponse> Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.SynchronizeOutboundAsync(Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundRequest request) {
            return base.Channel.SynchronizeOutboundAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundResponse> SynchronizeOutboundAsync(string authenticationToken, string providerName) {
            Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.SynchronizeOutboundRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            return ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).SynchronizeOutboundAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryResponse Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.SynchronizeErrorsRecovery(Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryRequest request) {
            return base.Channel.SynchronizeErrorsRecovery(request);
        }
        
        public bool SynchronizeErrorsRecovery(string authenticationToken, string providerName) {
            Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryResponse retVal = ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).SynchronizeErrorsRecovery(inValue);
            return retVal.Body.SynchronizeErrorsRecoveryResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryResponse> Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.SynchronizeErrorsRecoveryAsync(Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryRequest request) {
            return base.Channel.SynchronizeErrorsRecoveryAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryResponse> SynchronizeErrorsRecoveryAsync(string authenticationToken, string providerName) {
            Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.SynchronizeErrorsRecoveryRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            return ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).SynchronizeErrorsRecoveryAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersResponse Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.SetProviderParameters(Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersRequest request) {
            return base.Channel.SetProviderParameters(request);
        }
        
        public bool SetProviderParameters(string authenticationToken, string providerName, string url, string username, string password, string IAFModule, string parameters, out string message) {
            Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.url = url;
            inValue.Body.username = username;
            inValue.Body.password = password;
            inValue.Body.IAFModule = IAFModule;
            inValue.Body.parameters = parameters;
            Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersResponse retVal = ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).SetProviderParameters(inValue);
            message = retVal.Body.message;
            return retVal.Body.SetProviderParametersResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersResponse> Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.SetProviderParametersAsync(Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersRequest request) {
            return base.Channel.SetProviderParametersAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersResponse> SetProviderParametersAsync(string authenticationToken, string providerName, string url, string username, string password, string IAFModule, string parameters) {
            Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.SetProviderParametersRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.url = url;
            inValue.Body.username = username;
            inValue.Body.password = password;
            inValue.Body.IAFModule = IAFModule;
            inValue.Body.parameters = parameters;
            return ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).SetProviderParametersAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersResponse Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.TestProviderParameters(Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersRequest request) {
            return base.Channel.TestProviderParameters(request);
        }
        
        public bool TestProviderParameters(string authenticationToken, string providerName, string url, string username, string password, string parameters, out string message) {
            Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.url = url;
            inValue.Body.username = username;
            inValue.Body.password = password;
            inValue.Body.parameters = parameters;
            Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersResponse retVal = ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).TestProviderParameters(inValue);
            message = retVal.Body.message;
            return retVal.Body.TestProviderParametersResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersResponse> Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.TestProviderParametersAsync(Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersRequest request) {
            return base.Channel.TestProviderParametersAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersResponse> TestProviderParametersAsync(string authenticationToken, string providerName, string url, string username, string password, string parameters) {
            Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.TestProviderParametersRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.url = url;
            inValue.Body.username = username;
            inValue.Body.password = password;
            inValue.Body.parameters = parameters;
            return ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).TestProviderParametersAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentResponse Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.GetActionsForDocument(Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentRequest request) {
            return base.Channel.GetActionsForDocument(request);
        }
        
        public string GetActionsForDocument(string providerName, string docNamespace) {
            Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentRequestBody();
            inValue.Body.providerName = providerName;
            inValue.Body.docNamespace = docNamespace;
            Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentResponse retVal = ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).GetActionsForDocument(inValue);
            return retVal.Body.GetActionsForDocumentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentResponse> Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.GetActionsForDocumentAsync(Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentRequest request) {
            return base.Channel.GetActionsForDocumentAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentResponse> GetActionsForDocumentAsync(string providerName, string docNamespace) {
            Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.GetActionsForDocumentRequestBody();
            inValue.Body.providerName = providerName;
            inValue.Body.docNamespace = docNamespace;
            return ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).GetActionsForDocumentAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentResponse Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.ValidateDocument(Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentRequest request) {
            return base.Channel.ValidateDocument(request);
        }
        
        public bool ValidateDocument(string authenticationToken, string providerName, string nameSpace, string guidDoc, string serializedErrors, int workerId, out string message) {
            Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.nameSpace = nameSpace;
            inValue.Body.guidDoc = guidDoc;
            inValue.Body.serializedErrors = serializedErrors;
            inValue.Body.workerId = workerId;
            Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentResponse retVal = ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).ValidateDocument(inValue);
            message = retVal.Body.message;
            return retVal.Body.ValidateDocumentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentResponse> Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.ValidateDocumentAsync(Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentRequest request) {
            return base.Channel.ValidateDocumentAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentResponse> ValidateDocumentAsync(string authenticationToken, string providerName, string nameSpace, string guidDoc, string serializedErrors, int workerId) {
            Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.ValidateDocumentRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.nameSpace = nameSpace;
            inValue.Body.guidDoc = guidDoc;
            inValue.Body.serializedErrors = serializedErrors;
            inValue.Body.workerId = workerId;
            return ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).ValidateDocumentAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundResponse Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.ValidateOutbound(Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundRequest request) {
            return base.Channel.ValidateOutbound(request);
        }
        
        public bool ValidateOutbound(string authenticationToken, string providerName, bool bCheckFK, bool bCheckXSD, string filters, string serializedTree, int workerId, out string message) {
            Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.bCheckFK = bCheckFK;
            inValue.Body.bCheckXSD = bCheckXSD;
            inValue.Body.filters = filters;
            inValue.Body.serializedTree = serializedTree;
            inValue.Body.workerId = workerId;
            Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundResponse retVal = ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).ValidateOutbound(inValue);
            message = retVal.Body.message;
            return retVal.Body.ValidateOutboundResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundResponse> Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.ValidateOutboundAsync(Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundRequest request) {
            return base.Channel.ValidateOutboundAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundResponse> ValidateOutboundAsync(string authenticationToken, string providerName, bool bCheckFK, bool bCheckXSD, string filters, string serializedTree, int workerId) {
            Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.ValidateOutboundRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.bCheckFK = bCheckFK;
            inValue.Body.bCheckXSD = bCheckXSD;
            inValue.Body.filters = filters;
            inValue.Body.serializedTree = serializedTree;
            inValue.Body.workerId = workerId;
            return ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).ValidateOutboundAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerResponse Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.CreateExternalServer(Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerRequest request) {
            return base.Channel.CreateExternalServer(request);
        }
        
        public bool CreateExternalServer(string authenticationToken, string providerName, string extservername, string connstr, out string message) {
            Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.extservername = extservername;
            inValue.Body.connstr = connstr;
            Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerResponse retVal = ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).CreateExternalServer(inValue);
            message = retVal.Body.message;
            return retVal.Body.CreateExternalServerResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerResponse> Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.CreateExternalServerAsync(Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerRequest request) {
            return base.Channel.CreateExternalServerAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerResponse> CreateExternalServerAsync(string authenticationToken, string providerName, string extservername, string connstr) {
            Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.CreateExternalServerRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.extservername = extservername;
            inValue.Body.connstr = connstr;
            return ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).CreateExternalServerAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedResponse Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.CheckCompaniesToBeMapped(Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedRequest request) {
            return base.Channel.CheckCompaniesToBeMapped(request);
        }
        
        public bool CheckCompaniesToBeMapped(string authenticationToken, string providerName, out string companylist, out string message) {
            Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedResponse retVal = ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).CheckCompaniesToBeMapped(inValue);
            companylist = retVal.Body.companylist;
            message = retVal.Body.message;
            return retVal.Body.CheckCompaniesToBeMappedResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedResponse> Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.CheckCompaniesToBeMappedAsync(Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedRequest request) {
            return base.Channel.CheckCompaniesToBeMappedAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedResponse> CheckCompaniesToBeMappedAsync(string authenticationToken, string providerName) {
            Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.CheckCompaniesToBeMappedRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            return ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).CheckCompaniesToBeMappedAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.dsSync.MapCompanyResponse Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.MapCompany(Microarea.TaskBuilderNet.Core.dsSync.MapCompanyRequest request) {
            return base.Channel.MapCompany(request);
        }
        
        public bool MapCompany(string authenticationToken, string providerName, string appreg, int magocompany, string infinitycompany, string taxid, out string message) {
            Microarea.TaskBuilderNet.Core.dsSync.MapCompanyRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.MapCompanyRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.MapCompanyRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.appreg = appreg;
            inValue.Body.magocompany = magocompany;
            inValue.Body.infinitycompany = infinitycompany;
            inValue.Body.taxid = taxid;
            Microarea.TaskBuilderNet.Core.dsSync.MapCompanyResponse retVal = ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).MapCompany(inValue);
            message = retVal.Body.message;
            return retVal.Body.MapCompanyResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.MapCompanyResponse> Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.MapCompanyAsync(Microarea.TaskBuilderNet.Core.dsSync.MapCompanyRequest request) {
            return base.Channel.MapCompanyAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.MapCompanyResponse> MapCompanyAsync(string authenticationToken, string providerName, string appreg, int magocompany, string infinitycompany, string taxid) {
            Microarea.TaskBuilderNet.Core.dsSync.MapCompanyRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.MapCompanyRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.MapCompanyRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.appreg = appreg;
            inValue.Body.magocompany = magocompany;
            inValue.Body.infinitycompany = infinitycompany;
            inValue.Body.taxid = taxid;
            return ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).MapCompanyAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageResponse Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.UploadActionPackage(Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageRequest request) {
            return base.Channel.UploadActionPackage(request);
        }
        
        public bool UploadActionPackage(string authenticationToken, string providerName, string actionpath, out string message) {
            Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.actionpath = actionpath;
            Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageResponse retVal = ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).UploadActionPackage(inValue);
            message = retVal.Body.message;
            return retVal.Body.UploadActionPackageResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageResponse> Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.UploadActionPackageAsync(Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageRequest request) {
            return base.Channel.UploadActionPackageAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageResponse> UploadActionPackageAsync(string authenticationToken, string providerName, string actionpath) {
            Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.UploadActionPackageRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.actionpath = actionpath;
            return ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).UploadActionPackageAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaResponse Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.SetConvergenceCriteria(Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaRequest request) {
            return base.Channel.SetConvergenceCriteria(request);
        }
        
        public bool SetConvergenceCriteria(string authenticationToken, string providerName, string xmlCriteria, out string message) {
            Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.xmlCriteria = xmlCriteria;
            Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaResponse retVal = ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).SetConvergenceCriteria(inValue);
            message = retVal.Body.message;
            return retVal.Body.SetConvergenceCriteriaResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaResponse> Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.SetConvergenceCriteriaAsync(Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaRequest request) {
            return base.Channel.SetConvergenceCriteriaAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaResponse> SetConvergenceCriteriaAsync(string authenticationToken, string providerName, string xmlCriteria) {
            Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.SetConvergenceCriteriaRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.xmlCriteria = xmlCriteria;
            return ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).SetConvergenceCriteriaAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaResponse Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.GetConvergenceCriteria(Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaRequest request) {
            return base.Channel.GetConvergenceCriteria(request);
        }
        
        public bool GetConvergenceCriteria(string authenticationToken, string providerName, string actionName, out string xmlCriteria, out string message) {
            Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.actionName = actionName;
            Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaResponse retVal = ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).GetConvergenceCriteria(inValue);
            xmlCriteria = retVal.Body.xmlCriteria;
            message = retVal.Body.message;
            return retVal.Body.GetConvergenceCriteriaResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaResponse> Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.GetConvergenceCriteriaAsync(Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaRequest request) {
            return base.Channel.GetConvergenceCriteriaAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaResponse> GetConvergenceCriteriaAsync(string authenticationToken, string providerName, string actionName) {
            Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.GetConvergenceCriteriaRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            inValue.Body.actionName = actionName;
            return ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).GetConvergenceCriteriaAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermResponse Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.SetGadgetPerm(Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermRequest request) {
            return base.Channel.SetGadgetPerm(request);
        }
        
        public bool SetGadgetPerm(string authenticationToken, string providerName, out string message) {
            Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermResponse retVal = ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).SetGadgetPerm(inValue);
            message = retVal.Body.message;
            return retVal.Body.SetGadgetPermResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermResponse> Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap.SetGadgetPermAsync(Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermRequest request) {
            return base.Channel.SetGadgetPermAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermResponse> SetGadgetPermAsync(string authenticationToken, string providerName) {
            Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermRequest inValue = new Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermRequest();
            inValue.Body = new Microarea.TaskBuilderNet.Core.dsSync.SetGadgetPermRequestBody();
            inValue.Body.authenticationToken = authenticationToken;
            inValue.Body.providerName = providerName;
            return ((Microarea.TaskBuilderNet.Core.dsSync.MicroareaDataSynchronizerSoap)(this)).SetGadgetPermAsync(inValue);
        }
        
        public bool PurgeSynchroConnectorLog(int companyId) {
            return base.Channel.PurgeSynchroConnectorLog(companyId);
        }
        
        public System.Threading.Tasks.Task<bool> PurgeSynchroConnectorLogAsync(int companyId) {
            return base.Channel.PurgeSynchroConnectorLogAsync(companyId);
        }
    }
}
