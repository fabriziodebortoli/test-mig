using System.IO;
using System.Security.Cryptography;

namespace Microarea.TaskBuilderNet.Licence.Activation.Components
{
	// ======================================================================================================
	public class GenericComponents
	{
		private readonly byte[] byteGenericComponentsValue =
			new byte[]{176, 13, 68, 113, 23, 140, 185, 231, 112, 246, 125, 213, 186, 17, 144, 253, 25, 150, 113, 12, 235, 5, 200, 237, 25, 55, 19, 74, 12, 60, 88, 194, 169, 161, 201, 37, 172, 242, 163, 155, 201, 189, 147, 207, 205, 41, 117, 24, 12, 241, 255, 80, 9, 115, 157, 189, 233, 200, 64, 29, 228, 254, 212, 89, 34, 81, 134, 255, 29, 13, 91, 185, 13, 0, 169, 187, 246, 201, 185, 97, 207, 142, 115, 221, 94, 249, 228, 35, 11, 212, 86, 218, 161, 88, 119, 26, 129, 45, 175, 205, 231, 89, 44, 160, 70, 165, 187, 33, 83, 51, 110, 40, 63, 15, 221, 62, 169, 104, 212, 92, 154, 186, 159, 231, 55, 27, 198, 154, 73, 242, 240, 191, 20, 49, 164, 156, 52, 101, 202, 54, 132, 133, 68, 150, 205, 28, 174, 13, 81, 92, 197, 245, 223, 0, 137, 70, 45, 99, 62, 104, 84, 224, 124, 156, 40, 47, 1, 228, 103, 156, 6, 13, 125, 20, 208, 81, 216, 245, 18, 69, 141, 220, 63, 172, 36, 128, 109, 74, 48, 31, 95, 155, 148, 249, 80, 205, 171, 158, 245, 251, 177, 126, 133, 76, 190, 225, 218, 227, 44, 50, 150, 223, 133, 93, 41, 79, 251, 223, 92, 221, 206, 73, 53, 123, 174, 181, 32, 225, 16, 28, 196, 50, 76, 219, 112, 9, 220, 114, 244, 218, 107, 91, 86, 78, 160, 84, 14, 90, 61, 255, 249, 92, 96, 101, 244, 156, 240, 108, 107, 30, 129, 122, 84, 148, 112, 46, 97, 148, 143, 17, 249, 28, 95, 244, 125, 80, 231, 171, 222, 179, 142, 156, 6, 72, 89, 103, 10, 236, 89, 87, 18, 233, 103, 134, 207, 97, 223, 207, 29, 69, 60, 159, 55, 92, 211, 132, 141, 169, 195, 100, 30, 48, 128, 188, 219, 198, 186, 122, 162, 199, 45, 116, 189, 42, 58, 155, 183, 36, 155, 158, 92, 251, 191, 228, 140, 186, 122, 131, 170, 188, 205, 196, 20, 72, 29, 68, 42, 177, 26, 49, 24, 186, 63, 62, 138, 176, 83, 126, 120, 34, 180, 254, 202, 2, 184, 182, 53, 40, 37, 116, 122, 17, 166, 175, 176, 149, 113, 206, 116, 33, 26, 21, 192, 90, 166, 72, 71, 55, 71, 214, 201, 198, 96, 96, 69, 198, 84, 204, 102, 227, 14, 40, 178, 166, 55, 27, 119, 201, 233, 147, 238, 33, 203, 187, 123, 220, 24, 162, 2, 15, 4, 34, 189, 13, 192, 168, 166, 181, 133, 76, 202, 118, 142, 255, 64, 246, 62, 107, 232, 41, 38, 145, 28, 111,
					219, 69, 20, 50, 189, 120, 197, 10, 40, 13, 95, 114, 183, 178, 240, 124, 33, 55, 223, 72, 120, 139, 162, 197, 123, 141, 163, 222, 255, 38, 228, 164, 55, 189, 112, 181, 72, 191, 113, 231, 208, 13, 245, 135, 151, 194, 142, 30, 132, 221, 112, 1, 137, 31, 126, 254, 92, 84, 210, 220, 203, 36, 58, 207, 144, 92, 13, 175, 165, 72, 127, 172, 186, 33, 151, 88, 187, 94, 195, 123, 25, 134, 177, 152, 94, 13, 96, 140, 48, 134, 115, 152, 210, 109, 7, 55, 29, 166, 196, 251, 96, 165, 198, 181, 132, 213, 230, 158, 37, 25, 181, 101, 194, 41, 196, 23, 0, 133, 215, 189, 71, 119, 11, 207, 184, 192, 228, 45, 119, 55, 133, 111, 48, 19, 13, 9, 42, 192, 178, 200, 233, 93, 117, 180, 144, 76, 74, 250, 0, 22, 51, 200, 2, 250, 94, 168, 178, 201, 24, 181, 209, 97, 205, 1, 79, 174, 102, 131, 6, 251, 190, 14, 181, 243, 223, 15, 245, 184, 115, 114, 54, 121, 226, 83, 207, 214, 135, 124, 137, 61, 147, 97, 161, 231, 186, 133, 52, 194, 46, 167, 206, 233, 230, 218, 116, 21, 79, 141, 192, 138, 225, 39, 182, 68, 143, 92, 243, 42, 45, 92, 89, 209, 7, 177, 114, 6, 246, 128, 12, 249, 12, 51, 57, 108, 188, 46, 167, 196, 63, 199, 245, 4, 222, 86, 209, 17, 7, 27, 255, 80, 183, 243, 76, 61, 60, 151, 113, 51, 144, 101, 75, 89, 249, 116, 114, 147, 81, 215, 138, 143, 215, 90, 91, 164, 238, 218, 162, 188, 15, 83, 95, 113, 207, 60, 162, 108, 254, 173, 193, 21, 111, 16, 102, 180, 27, 82, 28, 226, 26, 53, 82, 204, 222, 45, 254, 194, 129, 36, 106, 65, 91, 27, 200, 195, 93, 145, 241, 168, 151, 172, 24, 161, 142, 204, 151, 143, 115, 168, 34, 23, 22, 157, 231, 227, 81, 156, 76, 162, 172, 43, 45, 177, 230, 198, 71, 178, 30, 104, 135, 93, 64, 101, 194, 33, 147, 204, 20, 152, 136, 206, 223, 204, 123, 212, 182, 247, 167, 209, 25, 93, 87, 203, 128, 97, 106, 1, 0, 5, 140, 93, 67, 213, 127, 182, 231, 179, 129, 6, 155, 227, 247, 54, 97, 88, 186, 97, 70, 210, 116, 220, 184, 137, 183, 111, 144, 24, 201, 178, 142, 196, 90, 211, 24, 198, 76, 178, 67, 39, 91, 47, 42, 130, 162, 55, 117, 133, 138, 28, 247, 158, 198, 22, 174, 39, 42, 172, 2, 224, 89, 65, 250, 88,
					223, 76, 216, 38, 33, 177, 222, 175, 77, 217, 246, 64, 165, 233, 118, 17, 110, 200, 201, 196, 135, 65, 175, 182, 164, 138, 35, 85, 95, 133, 91, 155, 31, 244};

		// --------------------------------------------------------------------------------------------------
		public string GetValue
		{
			get
			{
				System.Text.ASCIIEncoding byteConverter = new System.Text.ASCIIEncoding();
				TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();
				byte[] gen1 = new byte[]{	12, 25, 255, 15, 69, 125, 33, 201, 26, 95,
											167, 215, 25, 105, 29, 165, 38, 101, 200, 100,
											1, 55, 155, 19};
				byte[] gen2 =  new byte[]{	132, 235, 255, 15, 69, 125, 33, 201	};

				MemoryStream outputFrontEndStream = new MemoryStream();
				
				CryptoStream stream =
					new CryptoStream
						(outputFrontEndStream, tdes.CreateDecryptor(gen1, gen2),CryptoStreamMode.Write);

				stream.Write(byteGenericComponentsValue, 0, byteGenericComponentsValue.Length);
				stream.Close();

				return byteConverter.GetString(outputFrontEndStream.ToArray());
			}
		}
	}
}
