using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;
using ICSharpCode.NRefactory;
using System.Linq;

using Microarea.EasyBuilder;
using Microarea.EasyBuilder.Packager;
using Microarea.EasyBuilder.Properties;
using Microarea.TaskBuilderNet.Core.EasyBuilder;
using Microarea.TaskBuilderNet.Core.Generic;
using Microarea.TaskBuilderNet.Interfaces;
using Microsoft.CSharp;
using Microsoft.VisualBasic;
using Microarea.EasyBuilder.MVC;


//================================================================================
/// <summary>
/// Stores all information about the current customization.
/// </summary>
[Serializable]
public class CustomizationInfos
{
    private CodeNamespace usingCodeNamespace;
    private CodeNamespace codeNamespace;
    private CodeNamespace codeNamespaceMethods;

    private List<CodeNamespace> additionalNamespaces = new List<CodeNamespace>();

    //[NonSerialized]
    private NameSpace customizationNamespace;

    //--------------------------------------------------------------------------------
    /// <summary>
    /// Gets the instance of the namespace containing the usings
    /// </summary>
    /// <seealso cref="System.CodeDom.CodeNamespace"/>
    public CodeNamespace UsingCodeNamespace
    {
        get
        {
            if (usingCodeNamespace == null)
                usingCodeNamespace = new CodeNamespace();

            return usingCodeNamespace;
        }
        set { usingCodeNamespace = value; }
    }

    //--------------------------------------------------------------------------------
    /// <summary>
    /// Gets the instance of the current CodeNameSpace containing the code automatically generated by easybuilder
    /// </summary>
    /// <seealso cref="System.CodeDom.CodeNamespace"/>
    public CodeNamespace CodeNamespace { get { return codeNamespace; } set { codeNamespace = value; } }

    //--------------------------------------------------------------------------------
    /// <summary>
    /// Gets the instance of the current CodeNameSpace containing the code of all methods customized by the user
    /// </summary>
    /// <seealso cref="System.CodeDom.CodeNamespace"/>
    public CodeNamespace CodeNamespaceMethods { get { return codeNamespaceMethods; } set { codeNamespaceMethods = value; } }

    //--------------------------------------------------------------------------------
    internal List<CodeNamespace> AdditionalNamespaces
    {
        get
        {
            if (additionalNamespaces == null)
                additionalNamespaces = new List<CodeNamespace>();

            return additionalNamespaces;
        }
        set { additionalNamespaces = value; }
    }

    //-------------------------------------------------------------------------------
    /// <summary>
    /// Ritorna la dichiarazione di classe a partire dal suo nome
    /// </summary>
    /// <param name="name"></param>
    /// <returns></returns>
    internal CodeTypeDeclaration FindClassInAdditionalNamespaces(string name)
    {
        foreach (CodeNamespace codeNs in AdditionalNamespaces)
        {
            foreach (CodeTypeDeclaration type in codeNs.Types)
                if (type.Name == name)
                    return type;
        }
        return null;
    }

    //--------------------------------------------------------------------------------
    /// <summary>
    /// Gets or sets the TaskBuilder namespace for the current customization.
    /// </summary>
    /// <seealso cref="Microarea.TaskBuilderNet.Core.Generic.NameSpace"/>
    public NameSpace Namespace
    {
        get { return customizationNamespace; }
        set
        {
            customizationNamespace = value;
            codeNamespace.Name = ControllerSources.GetSafeSerializedNamespace(value.FullNameSpace);
        }
    }

    /// <summary>
    /// Initializes the current instance with the given namespace name.
    /// </summary>
    /// <param name="ns">The name of the namespace</param>
    //--------------------------------------------------------------------------------
    public void InitCodeNamespace(INameSpace ns)
    {
        customizationNamespace = ns as NameSpace;
        codeNamespace = new CodeNamespace(ControllerSources.GetSafeSerializedNamespace(ns.FullNameSpace));
    }

    //--------------------------------------------------------------------------------
    internal static string GetSourceExtension()
    {
        return NewCustomizationInfos.CSSourceFileExtension;
    }

    //--------------------------------------------------------------------------------
    /// <summary>
    /// Returns a value indicating if a customization for the given
    /// customization namespace exists.
    /// </summary>
    public static bool ExistCustomizationName(INameSpace customizationNamespace, IEasyBuilderApp app)
    {
        NameSpace realCustomizationNamespace = new NameSpace(customizationNamespace.FullNameSpace);
        realCustomizationNamespace.Application = BaseCustomizationContext.CustomizationContextInstance.CurrentApplication;
        realCustomizationNamespace.Module = BaseCustomizationContext.CustomizationContextInstance.CurrentModule;
        var dllPath = PathFinderWrapper.GetEasyStudioAssemblyFullName(realCustomizationNamespace.FullNameSpace, string.Empty);

        if (!PathFinderWrapper.ExistFile(dllPath))
        {
            dllPath = PathFinderWrapper.GetEasyStudioAssemblyFullName(realCustomizationNamespace.FullNameSpace, CUtility.GetUser());
            if (!PathFinderWrapper.ExistFile(dllPath))
            {
                return false;
            }
        }

        var asm = AssembliesLoader.Load(dllPath);

        foreach (Type t in asm.GetTypes())
        {
            if (t.IsSubclassOf(typeof(DocumentController)))
            {
                if (string.Compare(t.Namespace, EasyBuilderSerializer.Escape(customizationNamespace.FullNameSpace), StringComparison.InvariantCulture) == 0)
                {
                    return true;
                }
                else
                {
                    break;
                }
            }
        }

        return false;
    }
}
