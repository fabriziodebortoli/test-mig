using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.ComponentModel.Design.Serialization;
using Microarea.EasyBuilder.MVC;
using Microarea.TaskBuilderNet.Core.EasyBuilder;
using Microarea.TaskBuilderNet.Core.Generic;
using Microarea.TaskBuilderNet.Interfaces.EasyBuilder;
using Microarea.EasyBuilder.Properties;
using ICSharpCode.NRefactory.CSharp;

namespace Microarea.EasyBuilder
{
	//=============================================================================
	/// <remarks/>
	public partial class ControllerSources
	{
        private const string dummyString = "dummy";

		private const string EasyBuilderDllFileName = "Microarea.EasyBuilder.Enums.dll";
		/// <remarks/>
		public const string EnumsNamespace = "Microarea.EasyBuilder";
		/// <remarks/>
		public const string DocumentNamespace = "DocumentNamespace";
		/// <remarks/>
		public const string ControllerPropertyName = "Controller";
		/// <remarks/>
		public const string ModelPropertyName = "Model";
		/// <remarks/>
		public const string ModelVariableName = "documentModel";
		/// <remarks/>
		public const string ViewPropertyName = "View";
		/// <remarks/>
		public const string ViewVariableName = "view";
		/// <remarks/>
		public const string DBTPropertyName = "DBTs";
		/// <remarks/>
		public const string HotLinksPropertyName = "HotLinks";
		/// <remarks/>
		public const string DataManagersPropertyName = "DataManagers";
		/// <remarks/>
		public const string BusinessObjectsPropertyName = "Business Objects";
		/// <remarks/>
		public const string ParentPropertyName = "Parent";
		/// <remarks/>
		public const string MasterPropertyName = "Master";
		/// <remarks/>
		public const string AttachMasterMethodName = "AttachMaster";
		/// <remarks/>
		public const string AttachSlaveMethodName = "AttachSlave";
		/// <remarks/>
		public const string GetRecordPtrMethodName = "GetRecordPtr";
		/// <remarks/>
		public const string GetFieldPtrMethodName = "GetFieldPtr";
		/// <remarks/>
		public const string AutoGeneratedCode = "Microarea Form Manager Autogenerated Code";
		/// <remarks/>
		public const string PrivateMembers = "Private members";
		/// <remarks/>
		public const string ThisInstance = "this";
		/// <remarks/>
		public const string ResourceManagerFieldName = "ResourceManager";
		/// <remarks/>
		public const string LocalListVarName = "list";
		/// <remarks/>
		public const string LocalFieldsPropertyName = "Local Fields";
		/// <remarks/>
		public const string FireBehaviourMethodName = "FireBehaviours";
        /// <remarks/>
        public const string FrameHandlePropertyName = "FrameHandle";
        /// <remarks/>
        public const string ToolbarsVariableName = "_toolbars";

        //--------------------------------------------------------------------------------
        /// <remarks />
        protected override void DecorateMethod(
			MethodDeclaration eventHandlerMethod,
			IList<Statement> initialCode
			)
		{
			//try
			TryCatchStatement tryCatchStatement = new TryCatchStatement();
			tryCatchStatement.TryBlock = new BlockStatement();

            if (initialCode != null)
                tryCatchStatement.TryBlock.Statements.AddRange(initialCode);

            string commentLower = "Write your code between here\n//and here";
			tryCatchStatement.TryBlock.AddChild<Comment>(new Comment(commentLower), Roles.Comment);

			eventHandlerMethod.Body.Statements.Add(tryCatchStatement);

			//catch
			CatchClause catchClause = new CatchClause();
			catchClause.Body = new BlockStatement();
			catchClause.Body.Statements.Add(
			AstFacilities.GetInvocationStatement(
						new ThisReferenceExpression(),
						ReflectionUtils.GetMethodName((DocumentController controller) => controller.OnExceptionRaised(null)),
						new IdentifierExpression(EasyBuilderSerializer.ExceptionVariableName)
					));
			catchClause.Type = new SimpleType(typeof(System.Exception).FullName);
			catchClause.VariableName = EasyBuilderSerializer.ExceptionVariableName;

			tryCatchStatement.CatchClauses.Add(catchClause);
		}

		//-----------------------------------------------------------------------------
		/// <remarks/>
		public void GenerateFieldDeclarations(IContainer container)
		{
			IEasyBuilderContainer ebContainer = container as IEasyBuilderContainer;
			if (ebContainer == null)
				return;

			TypeDeclaration containerCode = EasyBuilderSerializer.FindClass(CustomizationInfos.EbDesignerCompilationUnit, ebContainer.SerializedType);
			if (containerCode == null)
				return;

			foreach (IComponent icmp in container.Components)
			{
				EasyBuilderComponent cmp = icmp as EasyBuilderComponent;
				if (cmp == null)
					continue;

				VariableInitializer field = EasyBuilderSerializer.FindMember<VariableInitializer>(containerCode, cmp.SerializedName);
				if (field == null)
				{
					if (cmp is IEasyBuilderContainer)
					{
						TypeDeclaration wrapperClass = EasyBuilderSerializer.FindClass(CustomizationInfos.EbDesignerCompilationUnit, cmp.SerializedType);

						if (wrapperClass == null)
							continue;
					}

					//il field in questione, potrebbe già essere stato creato dalla UpdateCustomizedMethods
					//se è già presente, non faccio niente altrimenti lo aggiungo
					field = EasyBuilderSerializer.FindMember<VariableInitializer>(containerCode, cmp.SerializedName);
					if (field == null)
						EasyBuilderSerializer.GenerateField(containerCode, cmp);
				}

				IContainer recursiveContainer = icmp as IContainer;
				GenerateFieldDeclarations(recursiveContainer);
			}
		}

        /// <summary>
        /// it removes a class from code namespace
        /// </summary>
        //-----------------------------------------------------------------------------
        public void RemoveClass(string className)
        {
            TypeDeclaration aClass = EasyBuilderSerializer.FindClass(CustomizationInfos.EbDesignerCompilationUnit, className);
            if (aClass != null)
            {
                NamespaceDeclaration nsDecl = EasyBuilderSerializer.GetNamespaceDeclaration(CustomizationInfos.EbDesignerCompilationUnit);
                nsDecl.Members.Remove(aClass);
            }
        }

        //-----------------------------------------------------------------------------
        internal void RemoveClass(AstType typeReference)
		{ 
			TypeDeclaration declaration = EasyBuilderSerializer.FindClass(
				CustomizationInfos.EbDesignerCompilationUnit,
				typeReference.AstTypeToString()
				);

			if (declaration == null)
				return;

			//Rimuovo eventuali classi custom figlie della classe corrente (ad esempio ho rimosso un tabber customizzato
			//e vado a rimuovere anche le tab customizzate figlie del tabber)
			RemoveAdditionalCustomClasses(declaration);

			//Rimuovo la classe dal codenamespace
			NamespaceDeclaration nsDecl = EasyBuilderSerializer.GetNamespaceDeclaration(CustomizationInfos.EbDesignerCompilationUnit);
			declaration.Remove();
		}
		/// <summary>
		/// Questo metodo, data la TypeDeclaration della classe corrente, fruga nella sua CreateComponents 
		/// alla ricerca di "new" di oggetti che potrebbero appoggiarsi a classi custom, se le trova le rimuove
		/// dal EbDesignerCompilationUnit
		/// (ad esempio, nella CreateComponents di un Tabber potrebbe esserci la new di una Tab customizzata, 
		/// va rimossa anche lei)
		/// </summary>
		/// <param name="declaration"></param>
		//-----------------------------------------------------------------------------
		private void RemoveAdditionalCustomClasses(TypeDeclaration declaration)
		{
			//Cerco il metodo CreateComponents della classe fornita
			MethodDeclaration createComponents = EasyBuilderSerializer.FindMember<MethodDeclaration>(
				declaration,
				EasyBuilderSerializer.CreateComponentsMethodName
				);

			if (createComponents == null)
				return;

			foreach (Statement currentStatement in createComponents.Body.Statements)
			{
				ExpressionStatement expressionStatement = currentStatement as ExpressionStatement;
				if (expressionStatement == null)
					continue;

				//tra gli statements della create controls cerco gli statements di assegnazione
				AssignmentExpression cas = expressionStatement.Expression as AssignmentExpression;
				if (cas == null)
					continue;

				//Degli statements di assegnazione mi interessa solamente il right side
				ObjectCreateExpression coce = (cas.Right as ObjectCreateExpression);
				if (coce == null)
					continue;

				//di quello prendo il base type (ad esempio new MTab25(.., .., ..)) ritorna MTab25
				string classCreated = coce.Type.AstTypeToString();

				//cerco la class nel namespace (infatti la new potrebbe essere di una classe non customizzata
				//(ad esempio new DataSource(.., ..) estrae datasource che non è una classe customizzata
				TypeDeclaration additionaClass = EasyBuilderSerializer.FindClass(
					CustomizationInfos.EbDesignerCompilationUnit,
					classCreated
					);

				if (additionaClass == null)
					continue;

				//Rimuovo la classe dal codenamespace

				NamespaceDeclaration nsDecl = EasyBuilderSerializer.GetNamespaceDeclaration(CustomizationInfos.EbDesignerCompilationUnit);
				additionaClass.Remove();
			}
		}

        //-------------------------------------------------------------------------------
        internal void CreateDelta(DocumentController controller)
        {
            DeltaCreator deltaCreator = new DeltaCreator(this);
            deltaCreator.EnableDelta = Settings.Default.EnableDeltaOnSources;
            deltaCreator.PreserveEntireRecord = Settings.Default.PreserveEntireRecordOnSources;
            deltaCreator.CreateDelta(controller);
        }
    }
}
