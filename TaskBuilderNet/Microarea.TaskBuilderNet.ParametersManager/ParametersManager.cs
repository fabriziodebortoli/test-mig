using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using Microarea.TaskBuilderNet.Core.Generic;

namespace Microarea.TaskBuilderNet.ParametersManager
{
	//=========================================================================
	public interface IParametersManager
	{
		int Version { get; }
		string GetParameter(bool isOn, params string[] values);
		string SetParameter(bool isOn, params string[] values);
	}

	//=========================================================================
	public interface IParametersManagerFactory
	{
		IParametersManager GetParametersManager(string message);
		IParametersManager GetParametersManager(int protocolVersion);
	}

	/// <summary>
	/// Header.
	/// </summary>
	//=========================================================================
	public class Header
	{
		public const int OldProtocol = -1;

		private const string headerPlaceHolder = "header";
		private const string protocolVersionPlaceHolder = "protocolVersion";
		private const string headerFormat = "<{0} {1}={2}/>";
		//{0}: header, {1}: protocolVersion, {2}: (?<protocolVersion>{1}) group for regexp or protocolVersion value.
		private static Regex headerRegex = new Regex(
			String.Format(
				headerFormat,
				headerPlaceHolder,
				protocolVersionPlaceHolder,
				String.Format("(?<{0}>[0-9]+)", protocolVersionPlaceHolder)
				)
			);

		private int protocolVersion = OldProtocol;

		//----------------------------------------------------------------------
		public int ProtocolVersion
		{
			get { return protocolVersion; }
			set { protocolVersion = value; }
		}

		//----------------------------------------------------------------------
		public Header()
		{ }

		//----------------------------------------------------------------------
		public Header(int protocolVersion)
		{
			this.protocolVersion = protocolVersion;
		}

		//----------------------------------------------------------------------
		public override string ToString()
		{
			return String.Format(
				headerFormat,
				headerPlaceHolder,
				protocolVersionPlaceHolder,
				protocolVersion.ToString()
				);
		}

		//----------------------------------------------------------------------
		public static Header FromString(string message)
		{
			if (message == null || message.Length == 0)
				return new Header();// returns default Header.

			Match aMatch = headerRegex.Match(message);

			if (!aMatch.Success)
				return new Header();// returns default Header.

			string headerString = aMatch.Value;
			string detectedVersion = aMatch.Groups[protocolVersionPlaceHolder].Value;

			int temp = -1;
			try
			{
				temp = Int32.Parse(detectedVersion);
			}
			catch
			{
				return new Header();// returns default Header.
			}

			return new Header(temp);
		}
	}

	//=========================================================================
	public class ParametersManagerFactory : IParametersManagerFactory
	{
		//----------------------------------------------------------------------
		public virtual IParametersManager GetParametersManager(string message)
		{
			Header h = Header.FromString(message);
			if (h == null)
				throw new InvalidOperationException("Wrong header");

			return new ParametersManagerV1(h);
		}

		//----------------------------------------------------------------------
		public virtual IParametersManager GetParametersManager(int protocolVersion)
		{
			Header h = new Header(protocolVersion);
			return new ParametersManagerV1(h);
		}
	}

	/// <summary>
	/// ParametersManager.
	/// </summary>
	//=========================================================================
	public class ParametersManagerV1 : IParametersManager
	{
		#region Const and private Data Members

		// Versione dell'algoritmo: da mantenere allineata con quella dell'header
		public const int ProtocolVersion = 6;
		// Indice del byte da cui calcolare l'offset per i conti del metodo GetIndexes
		private const int offsetByteNumber = 1;
		// Indice del byte da cui iniziare a calcolare l'indice per scoprire
		// l'algoritmo con cui criptare o decriptare un blocco, usato nel metodo GetIndexes.
		private const int startAlgNameByteNumber = 3;
		// Indice del byte da cui iniziare a calcolare l'indice per scoprire
		// la chiave con cui criptare o decriptare un blocco, usato nel metodo GetIndexes.
		private const int startAlgKeyByteNumber = 8;

		private const string zipPlaceHolder = "Zip";

		// Lunghezza del blocco che costituisce l'header per un blocco criptato
		// con determinati algoritmo e chiave.
		private const int blockHeaderLenght = 2;

		// La lunghezza massima e` calcolata cosi` perche` ogni blocco ha un header di 2 byte,
		// ciascun byte contiene al massimo il valore 255.
		// Il valore massimo espresso in base 256 e` percio` quello calcolato sotto.
		private const int maxLenOfZipMsgBlockToBeCrypted = byte.MaxValue * (byte.MaxValue + 1) + byte.MaxValue;
		// TODO Matteo: rivedere il conto qui sopra in modo da esprimerlo come funzione di 'blockHeaderLenght'
		// dichiarato poco sopra.
		// Inoltre la formula esatta dovrebbe essere: = 2^(2*8) [lunghezza dell'header in byte elevato al numero di bit dell'header (che è numero di byte dell'header * 8)]

		// Numero di blocchi in cui spezzare il pacchetto da criptare.
		//private int blocksNumber;

		private Hashtable rulesTable;
		private DataTable cacheTable;
		private DataTable cacheTableOut;

		#endregion

		private Header header;

		#region IParametersManager Members

		//----------------------------------------------------------------------
		public int Version
		{
			get { return header.ProtocolVersion; }
		}

		#endregion

		#region internal constructor

		//---------------------------------------------------------------------
		public ParametersManagerV1()
			: this(new Header(ProtocolVersion))
		{ }

		//---------------------------------------------------------------------
		internal ParametersManagerV1(int protocolVersion)
			: this(new Header(protocolVersion))
		{ }

		//---------------------------------------------------------------------
		internal ParametersManagerV1(Header header)
		{
			if (header == null)
				header = new Header();

			this.header = header;

			rulesTable = new Hashtable();
			// TipleDes
			rulesTable.Add(0, GetValueInternal(new byte[] { 254, 29, 58, 114, 92, 211, 61, 167, 171, 10, 192, 124, 47, 250, 220, 99 }));
			// Des
			rulesTable.Add(1, GetValueInternal(new byte[] { 9, 206, 156, 228, 246, 42, 172, 93 }));
			// RC2
			rulesTable.Add(2, GetValueInternal(new byte[] { 115, 228, 165, 148, 135, 168, 110, 210 }));
			// Rijndael
			rulesTable.Add(3, GetValueInternal(new byte[] { 144, 174, 31, 37, 236, 32, 241, 56, 245, 73, 214, 207, 242, 252, 23, 207 }));

			cacheTable = new DataTable();
			cacheTable.Columns.Add("RowNumber", typeof(Int32));
			cacheTable.Columns.Add("1A", typeof(byte[]));
			cacheTable.Columns.Add("1B", typeof(byte[]));
			cacheTable.Columns.Add("1C", typeof(byte[]));
			cacheTable.Columns.Add("1D", typeof(byte[]));
			cacheTable.Columns.Add("1E", typeof(byte[]));
			cacheTable.Columns.Add("1F", typeof(byte[]));

			cacheTableOut = new DataTable();
			cacheTableOut.Columns.Add("RowNumber", typeof(Int32));
			cacheTableOut.Columns.Add("1A", typeof(byte[]));
			cacheTableOut.Columns.Add("1B", typeof(byte[]));
			cacheTableOut.Columns.Add("1C", typeof(byte[]));
			cacheTableOut.Columns.Add("1D", typeof(byte[]));
			cacheTableOut.Columns.Add("1E", typeof(byte[]));
			cacheTableOut.Columns.Add("1F", typeof(byte[]));

			DataRow dr = cacheTable.NewRow();
			dr["RowNumber"] = 0;
			dr["1A"] = new byte[] { 111, 82, 104, 228, 141, 93, 55, 66, 178, 96, 66, 250, 108, 86, 36, 199, 241, 69, 242, 224, 62, 174, 6, 79, 141, 101, 179, 93, 28, 24, 105, 111 };
			dr["1B"] = new byte[] { 64, 69, 47, 157, 123, 98, 194, 73, 187, 115, 96, 86, 152, 50, 158, 63, 226, 95, 113, 240, 110, 110, 139, 67, 150, 8, 161, 206, 124, 60, 127, 223 };
			dr["1C"] = new byte[] { 250, 133, 44, 154, 51, 178, 123, 65, 165, 29, 169, 212, 119, 55, 231, 103, 83, 34, 70, 219, 35, 33, 39, 72, 135, 70, 145, 177, 147, 17, 60, 133 };
			dr["1D"] = new byte[] { 88, 78, 124, 31, 17, 59, 255, 78, 176, 26, 247, 222, 84, 166, 170, 113, 105, 201, 22, 255, 177, 75, 13, 69, 191, 182, 131, 213, 208, 59, 206, 173 };
			dr["1E"] = new byte[] { 22, 65, 97, 205, 217, 5, 208, 65, 140, 46, 62, 29, 143, 132, 120, 167, 77, 40, 58, 150, 228, 57, 163, 72, 179, 232, 150, 222, 200, 21, 49, 171 };
			dr["1F"] = new byte[] { 121, 27, 35, 239, 208, 126, 219, 76, 155, 175, 160, 187, 135, 248, 34, 131, 243, 224, 105, 9, 215, 85, 44, 74, 162, 41, 173, 215, 213, 161, 156, 88 };
			cacheTable.Rows.Add(dr);

			dr = cacheTable.NewRow();
			dr["RowNumber"] = 1;
			dr["1A"] = new byte[] { 142, 238, 9, 31, 156, 83, 115, 68, 131, 168, 88, 87, 219, 56, 2, 230, 98, 79, 105, 231, 71, 224, 161, 75, 131, 83, 185, 188, 45, 18, 12, 103 };
			dr["1B"] = new byte[] { 169, 97, 137, 89, 189, 73, 9, 78, 161, 225, 53, 147, 98, 150, 216, 140, 171, 50, 188, 230, 143, 75, 50, 69, 153, 228, 218, 86, 149, 124, 135, 128 };
			dr["1C"] = new byte[] { 29, 143, 103, 95, 47, 2, 227, 72, 142, 56, 192, 120, 185, 176, 61, 86, 178, 35, 111, 78, 115, 51, 139, 77, 173, 51, 197, 169, 104, 171, 15, 72 };
			dr["1D"] = new byte[] { 110, 89, 72, 210, 131, 22, 55, 72, 185, 251, 216, 203, 75, 53, 148, 195, 240, 198, 153, 113, 173, 43, 207, 74, 148, 85, 254, 117, 241, 88, 183, 178 };
			dr["1E"] = new byte[] { 238, 40, 247, 174, 90, 129, 185, 66, 169, 152, 129, 186, 173, 117, 206, 122, 26, 163, 186, 183, 15, 193, 158, 70, 129, 222, 71, 208, 79, 217, 218, 61 };
			dr["1F"] = new byte[] { 247, 17, 127, 251, 218, 241, 247, 72, 182, 122, 244, 172, 200, 117, 94, 15, 124, 217, 95, 233, 192, 11, 158, 66, 174, 199, 238, 174, 199, 66, 213, 87 };
			cacheTable.Rows.Add(dr);

			dr = cacheTable.NewRow();
			dr["RowNumber"] = 2;
			dr["1A"] = new byte[] { 201, 91, 16, 87, 188, 139, 218, 68, 173, 202, 189, 60, 15, 91, 135, 108, 5, 148, 93, 176, 14, 251, 39, 73, 155, 84, 250, 159, 119, 194, 252, 120 };
			dr["1B"] = new byte[] { 77, 66, 198, 41, 30, 63, 111, 79, 144, 220, 232, 53, 53, 179, 75, 56, 86, 173, 129, 67, 239, 110, 191, 73, 129, 4, 182, 99, 113, 143, 106, 22 };
			dr["1C"] = new byte[] { 24, 6, 88, 130, 76, 7, 238, 65, 161, 137, 76, 212, 195, 51, 152, 153, 218, 2, 223, 180, 175, 52, 242, 64, 129, 158, 75, 255, 118, 124, 34, 51 };
			dr["1D"] = new byte[] { 230, 187, 199, 107, 122, 17, 82, 77, 147, 116, 71, 229, 189, 8, 4, 51, 105, 63, 169, 126, 237, 147, 107, 76, 141, 9, 144, 165, 143, 216, 157, 16 };
			dr["1E"] = new byte[] { 50, 174, 203, 65, 214, 160, 32, 71, 189, 114, 44, 238, 20, 35, 60, 180, 67, 140, 33, 99, 124, 235, 130, 79, 172, 85, 69, 199, 118, 165, 54, 143 };
			dr["1F"] = new byte[] { 244, 104, 57, 191, 7, 245, 180, 79, 151, 146, 183, 63, 219, 60, 110, 70, 138, 169, 158, 62, 30, 231, 178, 72, 155, 66, 95, 204, 124, 131, 120, 118 };
			cacheTable.Rows.Add(dr);

			dr = cacheTable.NewRow();
			dr["RowNumber"] = 3;
			dr["1A"] = new byte[] { 243, 3, 29, 169, 30, 22, 20, 73, 188, 71, 50, 52, 110, 4, 20, 21, 214, 164, 37, 39, 100, 5, 6, 77, 133, 124, 183, 196, 3, 70, 136, 115 };
			dr["1B"] = new byte[] { 28, 220, 232, 30, 161, 44, 220, 75, 144, 39, 196, 90, 0, 67, 173, 58, 78, 141, 10, 175, 250, 232, 3, 67, 141, 218, 3, 172, 95, 140, 32, 29 };
			dr["1C"] = new byte[] { 98, 14, 99, 94, 14, 20, 36, 74, 170, 208, 235, 2, 10, 76, 150, 93, 52, 3, 46, 102, 55, 22, 187, 74, 190, 218, 175, 109, 194, 123, 91, 208 };
			dr["1D"] = new byte[] { 142, 65, 43, 190, 255, 7, 174, 72, 146, 85, 201, 238, 179, 62, 85, 165, 213, 84, 173, 228, 101, 15, 28, 79, 133, 169, 201, 69, 177, 57, 246, 164 };
			dr["1E"] = new byte[] { 75, 12, 206, 231, 28, 205, 4, 75, 129, 45, 204, 79, 62, 194, 188, 235, 216, 82, 215, 146, 133, 157, 119, 78, 169, 11, 15, 173, 56, 242, 126, 113 };
			dr["1F"] = new byte[] { 212, 32, 206, 152, 17, 74, 255, 76, 136, 76, 9, 243, 230, 109, 30, 68, 70, 239, 53, 3, 199, 191, 6, 68, 141, 247, 212, 93, 106, 255, 9, 152 };
			cacheTable.Rows.Add(dr);

			dr = cacheTable.NewRow();
			dr["RowNumber"] = 4;
			dr["1A"] = new byte[] { 206, 204, 113, 35, 227, 107, 203, 71, 151, 162, 164, 69, 188, 122, 131, 14, 81, 224, 113, 205, 148, 33, 103, 76, 178, 130, 63, 34, 183, 216, 59, 91 };
			dr["1B"] = new byte[] { 84, 49, 186, 244, 196, 38, 151, 68, 174, 115, 240, 252, 147, 91, 254, 41, 161, 121, 213, 106, 151, 119, 202, 73, 167, 117, 178, 163, 140, 77, 118, 141 };
			dr["1C"] = new byte[] { 193, 8, 55, 201, 243, 125, 167, 70, 131, 71, 159, 24, 30, 173, 7, 5, 238, 165, 208, 220, 44, 169, 17, 79, 130, 124, 113, 135, 31, 169, 118, 141 };
			dr["1D"] = new byte[] { 160, 136, 73, 79, 24, 41, 92, 65, 155, 225, 130, 117, 221, 172, 182, 93, 181, 84, 185, 225, 175, 49, 158, 72, 180, 50, 127, 28, 197, 78, 145, 253 };
			dr["1E"] = new byte[] { 165, 139, 249, 111, 225, 188, 235, 67, 188, 186, 73, 134, 12, 34, 120, 95, 186, 23, 219, 25, 77, 227, 77, 75, 160, 83, 24, 77, 1, 224, 138, 198 };
			dr["1F"] = new byte[] { 163, 31, 123, 99, 154, 11, 217, 79, 159, 249, 27, 101, 184, 139, 187, 253, 251, 231, 139, 181, 69, 197, 43, 69, 149, 196, 109, 68, 228, 217, 229, 138 };
			cacheTable.Rows.Add(dr);

			dr = cacheTable.NewRow();
			dr["RowNumber"] = 5;
			dr["1A"] = new byte[] { 108, 140, 176, 222, 84, 53, 150, 68, 166, 177, 6, 22, 128, 223, 46, 244, 248, 148, 49, 67, 91, 184, 91, 73, 178, 155, 13, 246, 220, 51, 59, 194 };
			dr["1B"] = new byte[] { 207, 116, 114, 229, 244, 30, 130, 66, 129, 225, 3, 169, 70, 93, 144, 35, 22, 58, 167, 33, 173, 104, 148, 70, 150, 199, 130, 209, 11, 70, 186, 47 };
			dr["1C"] = new byte[] { 28, 150, 221, 57, 63, 237, 193, 70, 143, 53, 15, 210, 78, 72, 52, 114, 117, 9, 173, 120, 201, 115, 198, 69, 190, 241, 198, 235, 139, 112, 89, 229 };
			dr["1D"] = new byte[] { 56, 219, 182, 49, 47, 68, 98, 75, 167, 101, 173, 165, 237, 193, 146, 201, 11, 149, 207, 1, 246, 161, 129, 67, 174, 251, 27, 241, 239, 50, 194, 43 };
			dr["1E"] = new byte[] { 115, 195, 104, 62, 195, 85, 57, 69, 155, 197, 130, 7, 194, 192, 94, 73, 114, 36, 39, 129, 24, 206, 237, 65, 129, 253, 52, 188, 21, 84, 228, 4 };
			dr["1F"] = new byte[] { 160, 182, 62, 0, 253, 218, 119, 68, 156, 207, 137, 151, 188, 130, 162, 34, 177, 182, 71, 16, 190, 234, 227, 67, 182, 202, 230, 239, 162, 228, 172, 13 };
			cacheTable.Rows.Add(dr);

			dr = cacheTable.NewRow();
			dr["RowNumber"] = 6;
			dr["1A"] = new byte[] { 33, 85, 202, 142, 225, 91, 126, 66, 174, 202, 237, 32, 92, 172, 58, 210, 252, 231, 17, 137, 142, 74, 201, 72, 176, 146, 232, 82, 190, 239, 95, 64 };
			dr["1B"] = new byte[] { 55, 23, 201, 221, 79, 65, 108, 64, 187, 130, 24, 121, 200, 144, 192, 155, 34, 226, 4, 76, 71, 39, 69, 73, 183, 188, 53, 151, 245, 177, 68, 72 };
			dr["1C"] = new byte[] { 156, 235, 77, 45, 221, 96, 20, 73, 133, 184, 225, 44, 101, 105, 144, 90, 41, 194, 209, 162, 1, 194, 48, 74, 188, 108, 173, 127, 240, 23, 225, 29 };
			dr["1D"] = new byte[] { 15, 103, 60, 14, 39, 70, 59, 74, 143, 254, 206, 143, 67, 41, 86, 6, 209, 69, 78, 84, 244, 33, 48, 70, 134, 145, 120, 155, 230, 224, 19, 111 };
			dr["1E"] = new byte[] { 147, 245, 236, 77, 134, 210, 243, 77, 128, 27, 67, 198, 221, 133, 189, 135, 193, 71, 34, 69, 72, 65, 209, 64, 183, 233, 195, 11, 215, 231, 199, 253 };
			dr["1F"] = new byte[] { 176, 199, 0, 112, 139, 38, 57, 72, 129, 101, 212, 88, 42, 86, 147, 49, 87, 75, 5, 250, 247, 26, 216, 77, 150, 32, 247, 22, 221, 174, 225, 177 };
			cacheTable.Rows.Add(dr);

			dr = cacheTable.NewRow();
			dr["RowNumber"] = 7;
			dr["1A"] = new byte[] { 6, 209, 229, 54, 216, 17, 94, 64, 166, 254, 255, 138, 177, 243, 191, 77, 179, 140, 113, 234, 86, 8, 69, 69, 169, 71, 74, 57, 53, 231, 149, 114 };
			dr["1B"] = new byte[] { 146, 55, 27, 241, 147, 129, 33, 71, 172, 39, 174, 82, 210, 207, 127, 234, 10, 221, 213, 53, 111, 244, 244, 76, 168, 145, 195, 23, 92, 124, 170, 201 };
			dr["1C"] = new byte[] { 251, 74, 127, 53, 139, 181, 188, 76, 133, 32, 80, 113, 3, 141, 187, 207, 214, 29, 179, 234, 151, 93, 98, 78, 148, 29, 194, 180, 216, 50, 109, 139 };
			dr["1D"] = new byte[] { 25, 16, 121, 92, 44, 95, 135, 72, 182, 187, 149, 61, 100, 225, 110, 146, 120, 233, 213, 130, 52, 180, 0, 78, 181, 176, 97, 122, 126, 107, 104, 206 };
			dr["1E"] = new byte[] { 225, 101, 78, 151, 60, 31, 149, 74, 150, 212, 64, 32, 221, 133, 97, 186, 170, 177, 127, 135, 111, 233, 182, 71, 136, 206, 88, 173, 13, 76, 13, 101 };
			dr["1F"] = new byte[] { 158, 128, 65, 168, 228, 28, 132, 76, 185, 151, 71, 39, 132, 29, 195, 64, 130, 22, 6, 246, 19, 100, 126, 67, 161, 176, 116, 202, 97, 47, 68, 70 };
			cacheTable.Rows.Add(dr);

			dr = cacheTable.NewRow();
			dr["RowNumber"] = 8;
			dr["1A"] = new byte[] { 206, 122, 106, 26, 29, 25, 171, 73, 178, 232, 152, 123, 236, 71, 206, 73, 96, 202, 162, 137, 60, 198, 245, 77, 140, 87, 229, 6, 148, 222, 243, 117 };
			dr["1B"] = new byte[] { 198, 98, 201, 140, 159, 112, 95, 64, 180, 231, 183, 105, 241, 25, 176, 182, 235, 101, 121, 27, 226, 120, 7, 71, 158, 168, 198, 4, 177, 65, 20, 7 };
			dr["1C"] = new byte[] { 133, 26, 58, 212, 105, 146, 215, 73, 135, 98, 203, 249, 92, 3, 116, 103, 74, 191, 85, 103, 135, 38, 194, 67, 168, 179, 179, 113, 157, 142, 199, 229 };
			dr["1D"] = new byte[] { 134, 91, 181, 11, 109, 40, 59, 74, 184, 165, 28, 4, 242, 1, 205, 216, 193, 243, 171, 92, 222, 10, 178, 72, 190, 83, 233, 148, 239, 205, 141, 48 };
			dr["1E"] = new byte[] { 220, 100, 250, 122, 133, 156, 47, 69, 186, 247, 90, 133, 23, 58, 29, 157, 170, 138, 135, 31, 186, 212, 191, 69, 157, 155, 67, 171, 204, 66, 65, 75 };
			dr["1F"] = new byte[] { 165, 34, 95, 133, 123, 132, 164, 69, 170, 47, 222, 134, 60, 174, 100, 176, 213, 181, 110, 252, 139, 32, 227, 67, 134, 78, 155, 143, 41, 51, 194, 137 };
			cacheTable.Rows.Add(dr);

			dr = cacheTable.NewRow();
			dr["RowNumber"] = 9;
			dr["1A"] = new byte[] { 44, 19, 243, 57, 107, 151, 154, 74, 148, 219, 175, 20, 164, 180, 113, 245, 109, 58, 36, 224, 170, 246, 200, 66, 164, 97, 206, 43, 79, 157, 130, 47 };
			dr["1B"] = new byte[] { 216, 117, 70, 0, 217, 146, 53, 70, 165, 57, 179, 88, 18, 132, 98, 161, 129, 85, 147, 156, 112, 169, 241, 71, 162, 98, 145, 249, 53, 198, 115, 4 };
			dr["1C"] = new byte[] { 27, 112, 195, 127, 191, 96, 79, 64, 151, 112, 54, 3, 158, 72, 233, 18, 68, 146, 232, 110, 31, 129, 2, 78, 186, 126, 164, 152, 32, 130, 41, 179 };
			dr["1D"] = new byte[] { 42, 254, 163, 231, 195, 208, 16, 75, 139, 141, 203, 203, 243, 177, 19, 101, 156, 174, 206, 105, 19, 216, 253, 72, 143, 54, 118, 20, 90, 52, 96, 174 };
			dr["1E"] = new byte[] { 85, 140, 127, 42, 52, 22, 98, 72, 141, 31, 243, 187, 106, 175, 72, 219, 165, 64, 129, 45, 204, 175, 157, 76, 164, 118, 165, 15, 78, 145, 65, 207 };
			dr["1F"] = new byte[] { 98, 112, 125, 93, 101, 86, 76, 76, 134, 46, 219, 129, 207, 242, 108, 241, 236, 197, 203, 69, 53, 164, 188, 72, 159, 234, 252, 117, 114, 106, 96, 227 };
			cacheTable.Rows.Add(dr);

			dr = cacheTable.NewRow();
			dr["RowNumber"] = 10;
			dr["1A"] = new byte[] { 100, 197, 64, 100, 41, 84, 9, 69, 157, 152, 126, 176, 93, 19, 72, 90, 142, 236, 134, 122, 73, 109, 69, 68, 140, 61, 221, 195, 139, 57, 84, 150 };
			dr["1B"] = new byte[] { 139, 93, 152, 20, 222, 205, 49, 76, 140, 213, 8, 126, 61, 125, 16, 201, 47, 71, 226, 30, 76, 101, 173, 67, 150, 20, 208, 152, 170, 226, 143, 118 };
			dr["1C"] = new byte[] { 93, 211, 194, 173, 63, 9, 136, 66, 166, 113, 139, 23, 125, 186, 207, 162, 181, 144, 47, 243, 74, 63, 170, 74, 144, 247, 215, 212, 209, 189, 225, 68 };
			dr["1D"] = new byte[] { 174, 146, 22, 8, 59, 152, 175, 65, 130, 158, 31, 172, 36, 152, 249, 112, 89, 80, 157, 81, 104, 15, 41, 73, 176, 27, 16, 114, 57, 73, 147, 34 };
			dr["1E"] = new byte[] { 72, 20, 169, 184, 142, 78, 44, 75, 155, 117, 74, 197, 171, 55, 163, 147, 217, 191, 105, 92, 209, 45, 1, 74, 174, 167, 116, 136, 141, 228, 10, 74 };
			dr["1F"] = new byte[] { 118, 122, 248, 56, 239, 178, 150, 69, 175, 58, 100, 98, 177, 155, 228, 174, 124, 136, 76, 180, 200, 65, 151, 77, 142, 142, 203, 141, 99, 68, 154, 125 };
			cacheTable.Rows.Add(dr);

			dr = cacheTable.NewRow();
			dr["RowNumber"] = 11;
			dr["1A"] = new byte[] { 104, 62, 168, 214, 115, 103, 74, 72, 150, 222, 204, 212, 227, 93, 155, 114, 219, 35, 8, 98, 24, 95, 177, 67, 147, 21, 187, 32, 87, 181, 161, 14 };
			dr["1B"] = new byte[] { 223, 240, 74, 94, 63, 43, 50, 76, 157, 202, 214, 144, 188, 121, 98, 250, 131, 212, 220, 254, 45, 76, 157, 70, 137, 24, 239, 124, 115, 106, 162, 202 };
			dr["1C"] = new byte[] { 206, 138, 11, 106, 7, 215, 192, 74, 157, 204, 119, 98, 204, 170, 217, 239, 7, 230, 152, 198, 229, 3, 1, 66, 166, 237, 153, 13, 114, 138, 45, 111 };
			dr["1D"] = new byte[] { 158, 82, 48, 187, 163, 209, 36, 65, 162, 228, 73, 64, 39, 60, 204, 153, 71, 24, 109, 225, 119, 158, 226, 64, 133, 59, 24, 144, 166, 87, 90, 246 };
			dr["1E"] = new byte[] { 218, 90, 230, 206, 1, 232, 24, 77, 141, 203, 42, 128, 92, 135, 85, 24, 95, 122, 106, 225, 61, 225, 30, 64, 160, 180, 95, 220, 235, 166, 221, 76 };
			dr["1F"] = new byte[] { 124, 227, 142, 119, 149, 88, 34, 75, 168, 117, 110, 166, 211, 119, 22, 160, 216, 118, 27, 136, 219, 255, 189, 69, 150, 82, 141, 83, 165, 24, 235, 57 };
			cacheTable.Rows.Add(dr);

			dr = cacheTable.NewRow();
			dr["RowNumber"] = 12;
			dr["1A"] = new byte[] { 53, 40, 56, 12, 27, 84, 96, 77, 179, 227, 174, 247, 245, 90, 88, 12, 148, 212, 234, 184, 189, 146, 148, 70, 181, 55, 80, 16, 126, 217, 152, 60 };
			dr["1B"] = new byte[] { 4, 243, 176, 174, 152, 134, 130, 65, 167, 199, 50, 100, 127, 30, 31, 2, 241, 227, 175, 102, 109, 188, 187, 64, 145, 14, 244, 233, 110, 84, 231, 105 };
			dr["1C"] = new byte[] { 201, 188, 133, 177, 38, 213, 166, 79, 161, 98, 117, 204, 122, 202, 46, 51, 224, 62, 131, 140, 53, 229, 197, 73, 169, 63, 251, 71, 13, 65, 181, 137 };
			dr["1D"] = new byte[] { 214, 197, 23, 46, 152, 157, 48, 70, 190, 222, 62, 204, 191, 2, 97, 249, 87, 102, 61, 116, 49, 200, 90, 69, 137, 72, 19, 243, 214, 44, 173, 201 };
			dr["1E"] = new byte[] { 143, 45, 7, 59, 234, 244, 25, 68, 162, 107, 71, 102, 2, 177, 118, 147, 176, 155, 47, 86, 127, 81, 177, 73, 153, 149, 243, 52, 43, 140, 71, 10 };
			dr["1F"] = new byte[] { 156, 246, 156, 75, 121, 192, 49, 75, 152, 168, 38, 201, 154, 103, 56, 170, 225, 160, 129, 170, 176, 50, 155, 70, 162, 42, 137, 36, 204, 4, 165, 79 };
			cacheTable.Rows.Add(dr);

			dr = cacheTable.NewRow();
			dr["RowNumber"] = 13;
			dr["1A"] = new byte[] { 241, 55, 112, 210, 202, 8, 223, 64, 176, 252, 113, 254, 187, 118, 51, 72, 35, 228, 50, 48, 181, 215, 240, 74, 179, 97, 229, 180, 83, 64, 101, 103 };
			dr["1B"] = new byte[] { 159, 116, 154, 196, 37, 82, 143, 75, 136, 81, 245, 22, 84, 60, 188, 189, 17, 134, 185, 158, 212, 175, 105, 74, 151, 27, 110, 72, 202, 223, 50, 8 };
			dr["1C"] = new byte[] { 181, 158, 49, 53, 27, 240, 200, 67, 145, 64, 136, 171, 80, 235, 73, 11, 91, 223, 169, 224, 3, 117, 234, 68, 150, 213, 72, 247, 44, 214, 151, 180 };
			dr["1D"] = new byte[] { 7, 208, 19, 187, 24, 251, 70, 71, 134, 205, 122, 41, 53, 122, 87, 157, 159, 68, 110, 214, 114, 227, 105, 71, 173, 4, 178, 57, 159, 159, 141, 96 };
			dr["1E"] = new byte[] { 71, 229, 163, 46, 139, 190, 113, 78, 175, 253, 135, 243, 62, 53, 212, 21, 102, 92, 25, 210, 214, 240, 108, 69, 171, 131, 11, 67, 46, 110, 154, 158 };
			dr["1F"] = new byte[] { 61, 71, 214, 230, 113, 226, 67, 75, 129, 203, 160, 196, 192, 16, 170, 112, 57, 6, 162, 118, 122, 20, 69, 65, 141, 30, 115, 79, 219, 82, 105, 202 };
			cacheTable.Rows.Add(dr);

			dr = cacheTable.NewRow();
			dr["RowNumber"] = 14;
			dr["1A"] = new byte[] { 67, 231, 28, 212, 129, 32, 119, 69, 129, 73, 65, 183, 17, 149, 97, 83, 36, 245, 5, 200, 152, 184, 173, 71, 129, 69, 114, 236, 54, 116, 151, 96 };
			dr["1B"] = new byte[] { 1, 198, 171, 174, 205, 123, 126, 68, 157, 236, 192, 172, 160, 123, 75, 209, 10, 21, 79, 14, 224, 146, 26, 74, 173, 203, 159, 54, 53, 98, 102, 12 };
			dr["1C"] = new byte[] { 42, 136, 126, 79, 76, 83, 220, 69, 190, 81, 246, 143, 112, 25, 193, 169, 242, 110, 60, 225, 101, 19, 19, 69, 133, 208, 81, 161, 208, 87, 91, 154 };
			dr["1D"] = new byte[] { 200, 8, 32, 245, 239, 22, 195, 66, 130, 114, 192, 223, 215, 186, 225, 233, 42, 176, 26, 247, 177, 123, 18, 79, 139, 98, 89, 0, 229, 143, 236, 0 };
			dr["1E"] = new byte[] { 92, 14, 33, 153, 133, 169, 248, 69, 176, 45, 198, 144, 4, 229, 96, 42, 177, 111, 249, 162, 6, 197, 93, 76, 183, 128, 32, 127, 22, 133, 98, 0 };
			dr["1F"] = new byte[] { 174, 53, 48, 60, 195, 184, 234, 67, 177, 29, 91, 114, 103, 6, 254, 77, 18, 154, 138, 147, 16, 0, 40, 65, 155, 167, 67, 101, 233, 141, 20, 161 };
			cacheTable.Rows.Add(dr);

			dr = cacheTable.NewRow();
			dr["RowNumber"] = 15;
			dr["1A"] = new byte[] { 136, 250, 90, 39, 55, 90, 176, 77, 161, 6, 225, 74, 179, 25, 82, 49, 89, 153, 98, 151, 225, 121, 135, 68, 145, 21, 74, 198, 125, 152, 101, 172 };
			dr["1B"] = new byte[] { 22, 165, 239, 6, 227, 31, 20, 70, 167, 175, 238, 195, 50, 222, 135, 48, 212, 19, 51, 225, 136, 168, 168, 72, 148, 42, 40, 65, 49, 75, 72, 216 };
			dr["1C"] = new byte[] { 162, 228, 123, 138, 144, 241, 193, 70, 184, 182, 19, 105, 193, 57, 142, 25, 205, 14, 253, 23, 32, 192, 142, 68, 177, 39, 150, 218, 116, 67, 206, 53 };
			dr["1D"] = new byte[] { 98, 67, 84, 130, 171, 61, 109, 67, 141, 193, 17, 116, 13, 132, 37, 117, 171, 217, 233, 4, 138, 41, 32, 68, 186, 242, 15, 73, 52, 112, 188, 42 };
			dr["1E"] = new byte[] { 211, 90, 7, 217, 191, 77, 178, 70, 136, 106, 126, 66, 233, 80, 24, 142, 176, 45, 88, 181, 68, 122, 210, 67, 172, 95, 0, 158, 19, 216, 195, 169 };
			dr["1F"] = new byte[] { 160, 234, 160, 223, 122, 5, 59, 72, 164, 190, 230, 70, 163, 148, 226, 217, 102, 125, 90, 227, 11, 23, 161, 75, 189, 230, 180, 125, 68, 58, 101, 188 };
			cacheTable.Rows.Add(dr);

			DataRow drOut = cacheTableOut.NewRow();
			drOut["RowNumber"] = 0;
			drOut["1A"] = new byte[] { 5, 165, 99, 78, 115, 213, 189, 69, 136, 11, 209, 63, 243, 185, 229, 10, 32, 44, 111, 89, 158, 178, 144, 67, 187, 10, 216, 25, 162, 217, 251, 96, };
			drOut["1B"] = new byte[] { 22, 164, 234, 179, 232, 200, 198, 72, 172, 124, 167, 249, 15, 31, 64, 209, 129, 21, 116, 186, 77, 239, 124, 74, 162, 242, 64, 132, 52, 218, 252, 249, };
			drOut["1C"] = new byte[] { 209, 127, 76, 95, 146, 9, 185, 72, 190, 200, 55, 248, 229, 79, 47, 139, 84, 156, 232, 182, 21, 208, 35, 76, 183, 151, 242, 149, 70, 103, 8, 56, };
			drOut["1D"] = new byte[] { 62, 178, 191, 179, 192, 77, 249, 69, 151, 226, 241, 41, 68, 70, 170, 184, 162, 60, 232, 186, 129, 231, 68, 75, 141, 73, 136, 157, 2, 28, 139, 156, };
			drOut["1E"] = new byte[] { 65, 163, 136, 175, 8, 232, 163, 74, 144, 71, 213, 173, 142, 68, 92, 133, 41, 163, 209, 232, 13, 151, 237, 76, 137, 81, 82, 182, 21, 155, 68, 151, };
			drOut["1F"] = new byte[] { 3, 134, 14, 81, 92, 208, 30, 76, 156, 245, 247, 7, 17, 79, 241, 190, 81, 103, 168, 192, 235, 39, 170, 65, 141, 240, 242, 231, 32, 185, 208, 181, };
			cacheTableOut.Rows.Add(drOut);

			drOut = cacheTableOut.NewRow();
			drOut["RowNumber"] = 1;
			drOut["1A"] = new byte[] { 51, 253, 218, 146, 89, 122, 70, 76, 181, 126, 149, 245, 151, 130, 187, 35, 149, 149, 174, 30, 124, 33, 171, 75, 159, 196, 22, 220, 149, 59, 56, 179, };
			drOut["1B"] = new byte[] { 136, 100, 229, 144, 242, 87, 134, 73, 185, 248, 114, 227, 116, 105, 80, 7, 203, 84, 61, 118, 123, 87, 1, 64, 160, 59, 45, 116, 34, 187, 146, 109, };
			drOut["1C"] = new byte[] { 66, 129, 87, 93, 224, 251, 184, 72, 143, 48, 82, 83, 196, 108, 239, 252, 65, 79, 162, 98, 73, 204, 183, 77, 137, 34, 69, 194, 68, 120, 24, 147, };
			drOut["1D"] = new byte[] { 211, 185, 121, 13, 169, 112, 249, 71, 152, 12, 151, 29, 87, 163, 54, 167, 147, 215, 234, 29, 72, 28, 12, 69, 139, 24, 194, 225, 75, 183, 142, 110, };
			drOut["1E"] = new byte[] { 245, 137, 70, 152, 167, 239, 29, 71, 189, 15, 129, 38, 79, 74, 134, 63, 76, 161, 168, 173, 65, 98, 71, 69, 191, 50, 141, 93, 74, 229, 9, 189, };
			drOut["1F"] = new byte[] { 54, 247, 134, 164, 46, 98, 11, 78, 181, 164, 236, 192, 110, 150, 71, 54, 216, 110, 121, 172, 245, 93, 253, 68, 156, 113, 236, 186, 253, 47, 104, 109, };
			cacheTableOut.Rows.Add(drOut);

			drOut = cacheTableOut.NewRow();
			drOut["RowNumber"] = 2;
			drOut["1A"] = new byte[] { 156, 2, 40, 98, 69, 137, 119, 67, 154, 194, 254, 198, 23, 39, 101, 234, 169, 97, 7, 235, 241, 170, 54, 72, 176, 188, 231, 76, 239, 230, 124, 4, };
			drOut["1B"] = new byte[] { 139, 207, 155, 228, 168, 139, 117, 75, 154, 64, 10, 165, 98, 36, 135, 208, 100, 65, 147, 64, 179, 197, 156, 70, 132, 126, 40, 179, 148, 107, 185, 49, };
			drOut["1C"] = new byte[] { 129, 205, 72, 92, 135, 128, 56, 65, 160, 177, 220, 202, 105, 93, 27, 146, 59, 22, 254, 118, 118, 86, 207, 78, 139, 124, 6, 159, 29, 23, 17, 138, };
			drOut["1D"] = new byte[] { 136, 159, 237, 162, 77, 189, 24, 64, 162, 170, 255, 133, 18, 158, 4, 17, 52, 218, 192, 159, 92, 206, 236, 64, 148, 40, 81, 188, 184, 203, 45, 182, };
			drOut["1E"] = new byte[] { 219, 83, 23, 221, 239, 224, 70, 79, 170, 50, 181, 130, 78, 72, 72, 140, 56, 225, 231, 244, 4, 151, 233, 71, 155, 206, 178, 39, 21, 39, 154, 254, };
			drOut["1F"] = new byte[] { 76, 183, 199, 172, 9, 230, 230, 72, 145, 120, 236, 125, 247, 125, 245, 178, 194, 1, 235, 231, 26, 250, 147, 71, 175, 31, 193, 60, 224, 165, 51, 41, };
			cacheTableOut.Rows.Add(drOut);

			drOut = cacheTableOut.NewRow();
			drOut["RowNumber"] = 3;
			drOut["1A"] = new byte[] { 8, 148, 104, 64, 208, 69, 120, 70, 176, 103, 152, 80, 127, 199, 28, 152, 101, 229, 134, 35, 148, 208, 56, 68, 181, 182, 187, 141, 67, 78, 145, 9, };
			drOut["1B"] = new byte[] { 146, 30, 154, 41, 147, 12, 20, 68, 147, 52, 19, 202, 35, 14, 212, 42, 75, 233, 230, 155, 71, 40, 64, 67, 190, 174, 89, 119, 183, 212, 201, 8, };
			drOut["1C"] = new byte[] { 73, 72, 241, 0, 155, 91, 209, 76, 154, 220, 2, 109, 20, 254, 165, 241, 187, 92, 61, 143, 195, 107, 3, 73, 150, 26, 255, 38, 24, 124, 65, 240, };
			drOut["1D"] = new byte[] { 211, 164, 16, 139, 35, 67, 203, 70, 141, 194, 140, 106, 72, 96, 148, 232, 25, 138, 23, 150, 218, 65, 180, 64, 165, 17, 175, 88, 239, 10, 9, 74, };
			drOut["1E"] = new byte[] { 195, 111, 224, 2, 202, 191, 231, 78, 152, 178, 107, 13, 227, 20, 179, 171, 16, 236, 142, 162, 175, 241, 57, 65, 184, 184, 234, 139, 5, 17, 40, 164, };
			drOut["1F"] = new byte[] { 154, 215, 142, 82, 132, 218, 154, 72, 188, 201, 222, 22, 163, 101, 203, 192, 212, 180, 117, 85, 239, 139, 187, 75, 170, 197, 207, 1, 103, 83, 42, 218, };
			cacheTableOut.Rows.Add(drOut);

			drOut = cacheTableOut.NewRow();
			drOut["RowNumber"] = 4;
			drOut["1A"] = new byte[] { 53, 102, 240, 168, 104, 166, 38, 78, 176, 31, 142, 255, 56, 241, 180, 46, 60, 213, 67, 112, 134, 88, 177, 65, 187, 163, 234, 118, 64, 19, 105, 20, };
			drOut["1B"] = new byte[] { 190, 22, 235, 38, 53, 154, 71, 77, 184, 144, 218, 101, 246, 168, 241, 174, 40, 145, 113, 4, 32, 237, 204, 77, 171, 23, 220, 146, 114, 83, 236, 74, };
			drOut["1C"] = new byte[] { 3, 85, 20, 151, 26, 159, 255, 71, 163, 63, 12, 139, 102, 103, 106, 1, 158, 62, 130, 53, 44, 9, 197, 74, 140, 56, 134, 246, 1, 8, 207, 42, };
			drOut["1D"] = new byte[] { 225, 28, 18, 67, 149, 88, 196, 79, 145, 83, 183, 15, 171, 16, 142, 238, 169, 11, 235, 81, 228, 113, 43, 72, 176, 40, 184, 87, 227, 14, 177, 78, };
			drOut["1E"] = new byte[] { 156, 74, 106, 21, 59, 122, 12, 78, 128, 148, 182, 91, 128, 182, 7, 107, 63, 44, 12, 115, 50, 126, 133, 74, 153, 236, 38, 74, 37, 91, 238, 32, };
			drOut["1F"] = new byte[] { 103, 25, 128, 230, 142, 93, 5, 78, 154, 35, 67, 58, 10, 219, 45, 105, 21, 95, 90, 234, 140, 226, 171, 79, 175, 16, 72, 64, 142, 108, 142, 23, };
			cacheTableOut.Rows.Add(drOut);

			drOut = cacheTableOut.NewRow();
			drOut["RowNumber"] = 5;
			drOut["1A"] = new byte[] { 177, 87, 37, 194, 160, 233, 71, 67, 160, 151, 233, 107, 190, 188, 189, 30, 34, 198, 186, 109, 133, 53, 11, 69, 147, 163, 240, 215, 245, 134, 208, 219, };
			drOut["1B"] = new byte[] { 117, 156, 212, 201, 51, 95, 226, 79, 139, 228, 200, 221, 156, 95, 61, 47, 75, 162, 25, 32, 237, 89, 209, 79, 186, 115, 183, 17, 141, 132, 187, 138, };
			drOut["1C"] = new byte[] { 17, 176, 123, 145, 235, 170, 71, 77, 134, 183, 31, 158, 143, 245, 138, 181, 117, 237, 248, 157, 22, 6, 185, 75, 161, 174, 83, 44, 77, 42, 84, 0, };
			drOut["1D"] = new byte[] { 221, 212, 21, 40, 234, 115, 43, 73, 163, 190, 10, 172, 194, 25, 78, 98, 18, 136, 56, 154, 200, 61, 13, 65, 128, 19, 235, 131, 143, 177, 131, 80, };
			drOut["1E"] = new byte[] { 39, 96, 117, 42, 193, 50, 87, 64, 189, 7, 190, 219, 24, 105, 134, 67, 166, 86, 155, 121, 134, 225, 80, 67, 172, 129, 118, 153, 80, 199, 169, 164, };
			drOut["1F"] = new byte[] { 102, 1, 28, 59, 166, 181, 14, 66, 172, 160, 21, 100, 20, 195, 220, 247, 72, 207, 189, 205, 34, 29, 39, 66, 190, 126, 204, 249, 172, 148, 128, 93, };
			cacheTableOut.Rows.Add(drOut);

			drOut = cacheTableOut.NewRow();
			drOut["RowNumber"] = 6;
			drOut["1A"] = new byte[] { 213, 19, 51, 2, 47, 197, 69, 75, 149, 73, 180, 170, 32, 49, 170, 174, 161, 120, 193, 23, 205, 155, 36, 77, 153, 82, 48, 11, 240, 141, 188, 224, };
			drOut["1B"] = new byte[] { 16, 111, 114, 203, 133, 122, 231, 66, 185, 86, 9, 73, 166, 228, 7, 198, 249, 139, 30, 151, 40, 39, 171, 78, 166, 113, 100, 163, 251, 82, 184, 146, };
			drOut["1C"] = new byte[] { 147, 255, 233, 90, 21, 48, 72, 65, 176, 121, 77, 162, 200, 185, 230, 174, 90, 104, 242, 216, 20, 210, 56, 64, 142, 156, 68, 63, 86, 245, 91, 113, };
			drOut["1D"] = new byte[] { 128, 219, 102, 158, 26, 38, 152, 73, 184, 118, 116, 114, 191, 33, 134, 38, 250, 13, 173, 21, 157, 155, 190, 70, 137, 108, 89, 64, 112, 184, 0, 233, };
			drOut["1E"] = new byte[] { 84, 220, 227, 122, 141, 74, 103, 72, 147, 63, 189, 52, 122, 97, 250, 4, 196, 110, 62, 27, 120, 233, 118, 70, 175, 159, 78, 107, 68, 81, 153, 242, };
			drOut["1F"] = new byte[] { 232, 194, 241, 181, 47, 59, 156, 77, 134, 180, 54, 204, 118, 204, 140, 88, 26, 187, 106, 21, 53, 235, 96, 79, 144, 208, 245, 137, 32, 210, 165, 229, };
			cacheTableOut.Rows.Add(drOut);

			drOut = cacheTableOut.NewRow();
			drOut["RowNumber"] = 7;
			drOut["1A"] = new byte[] { 134, 168, 220, 6, 11, 99, 24, 68, 150, 3, 124, 20, 90, 181, 159, 70, 89, 34, 208, 142, 102, 188, 235, 79, 176, 103, 114, 152, 110, 78, 47, 229, };
			drOut["1B"] = new byte[] { 72, 248, 247, 142, 120, 36, 32, 69, 174, 143, 31, 17, 77, 182, 47, 68, 214, 175, 149, 58, 201, 146, 73, 78, 132, 98, 116, 7, 86, 90, 72, 175, };
			drOut["1C"] = new byte[] { 9, 136, 31, 195, 174, 56, 83, 71, 169, 49, 217, 115, 100, 160, 214, 75, 216, 90, 195, 83, 23, 214, 160, 71, 152, 176, 212, 77, 76, 48, 234, 90, };
			drOut["1D"] = new byte[] { 144, 113, 252, 180, 131, 101, 121, 68, 180, 176, 42, 197, 94, 134, 154, 201, 208, 59, 175, 95, 142, 71, 144, 70, 182, 184, 209, 35, 98, 61, 123, 134, };
			drOut["1E"] = new byte[] { 218, 50, 224, 247, 9, 0, 147, 70, 162, 123, 211, 207, 70, 105, 104, 91, 56, 62, 162, 159, 167, 7, 235, 73, 128, 86, 156, 141, 67, 51, 248, 236, };
			drOut["1F"] = new byte[] { 11, 99, 181, 82, 73, 113, 15, 68, 169, 8, 72, 47, 33, 148, 244, 141, 76, 183, 84, 15, 63, 173, 108, 78, 165, 234, 85, 26, 25, 136, 41, 4, };
			cacheTableOut.Rows.Add(drOut);

			drOut = cacheTableOut.NewRow();
			drOut["RowNumber"] = 8;
			drOut["1A"] = new byte[] { 75, 89, 92, 151, 224, 160, 221, 76, 157, 71, 250, 178, 172, 91, 113, 254, 73, 19, 115, 92, 115, 40, 104, 75, 172, 20, 100, 126, 63, 2, 212, 80, };
			drOut["1B"] = new byte[] { 170, 133, 104, 27, 187, 192, 241, 79, 153, 184, 162, 72, 76, 248, 115, 253, 179, 94, 247, 29, 100, 76, 59, 74, 175, 76, 103, 218, 75, 200, 61, 137, };
			drOut["1C"] = new byte[] { 85, 105, 189, 23, 196, 63, 94, 79, 131, 98, 83, 193, 112, 207, 62, 9, 68, 208, 83, 222, 86, 200, 53, 65, 130, 24, 69, 64, 236, 171, 107, 230, };
			drOut["1D"] = new byte[] { 84, 172, 20, 75, 178, 73, 46, 69, 170, 150, 174, 180, 2, 77, 163, 152, 241, 16, 190, 129, 126, 207, 97, 64, 171, 234, 220, 98, 216, 22, 196, 8, };
			drOut["1E"] = new byte[] { 222, 38, 181, 23, 94, 227, 51, 79, 171, 92, 150, 203, 116, 132, 191, 166, 97, 29, 248, 113, 222, 127, 147, 68, 185, 213, 75, 131, 167, 74, 141, 136, };
			drOut["1F"] = new byte[] { 141, 3, 105, 36, 249, 146, 162, 78, 185, 216, 62, 23, 167, 76, 205, 114, 120, 216, 87, 222, 39, 158, 157, 79, 149, 195, 100, 81, 64, 7, 123, 92, };
			cacheTableOut.Rows.Add(drOut);

			drOut = cacheTableOut.NewRow();
			drOut["RowNumber"] = 9;
			drOut["1A"] = new byte[] { 87, 155, 94, 231, 100, 245, 161, 76, 159, 50, 202, 118, 135, 208, 196, 79, 157, 3, 84, 180, 187, 109, 86, 77, 155, 165, 76, 206, 98, 58, 186, 175, };
			drOut["1B"] = new byte[] { 223, 68, 67, 250, 149, 4, 156, 77, 130, 125, 168, 156, 171, 186, 41, 164, 202, 243, 246, 153, 191, 78, 199, 77, 188, 30, 124, 190, 88, 163, 248, 59, };
			drOut["1C"] = new byte[] { 207, 238, 149, 83, 119, 192, 145, 68, 139, 35, 152, 57, 114, 254, 137, 184, 112, 126, 132, 115, 93, 160, 74, 76, 181, 188, 208, 34, 247, 139, 198, 246, };
			drOut["1D"] = new byte[] { 34, 207, 140, 81, 218, 17, 244, 75, 175, 200, 213, 170, 43, 211, 54, 185, 254, 145, 19, 132, 14, 64, 22, 72, 186, 71, 41, 222, 135, 87, 164, 26, };
			drOut["1E"] = new byte[] { 248, 61, 191, 49, 33, 176, 204, 69, 172, 106, 19, 51, 98, 79, 79, 23, 72, 199, 19, 207, 100, 57, 13, 75, 180, 7, 197, 139, 252, 96, 101, 14, };
			drOut["1F"] = new byte[] { 78, 180, 153, 135, 227, 24, 231, 64, 138, 146, 98, 175, 120, 88, 138, 138, 223, 31, 209, 59, 158, 178, 21, 71, 165, 139, 168, 142, 15, 219, 156, 153, };
			cacheTableOut.Rows.Add(drOut);

			drOut = cacheTableOut.NewRow();
			drOut["RowNumber"] = 10;
			drOut["1A"] = new byte[] { 186, 137, 18, 161, 15, 245, 119, 78, 182, 235, 161, 66, 250, 164, 11, 92, 207, 116, 73, 190, 221, 41, 93, 73, 154, 147, 135, 198, 97, 135, 241, 247, };
			drOut["1B"] = new byte[] { 235, 204, 179, 79, 95, 9, 202, 66, 165, 110, 8, 78, 109, 104, 8, 245, 233, 226, 18, 248, 200, 61, 120, 72, 181, 247, 204, 2, 175, 11, 61, 180, };
			drOut["1C"] = new byte[] { 167, 241, 19, 232, 96, 115, 146, 79, 143, 0, 123, 191, 41, 203, 36, 161, 1, 84, 37, 88, 155, 246, 98, 77, 150, 148, 38, 104, 96, 105, 202, 31, };
			drOut["1D"] = new byte[] { 76, 170, 42, 198, 50, 159, 185, 75, 166, 185, 60, 148, 194, 91, 8, 7, 74, 104, 79, 91, 127, 165, 130, 64, 189, 68, 150, 216, 187, 43, 62, 176, };
			drOut["1E"] = new byte[] { 9, 203, 86, 65, 43, 215, 208, 68, 173, 180, 146, 58, 245, 33, 204, 15, 243, 40, 231, 50, 67, 118, 149, 64, 186, 55, 172, 166, 227, 170, 111, 66, };
			drOut["1F"] = new byte[] { 244, 81, 134, 45, 156, 116, 196, 73, 187, 70, 249, 23, 151, 181, 58, 171, 55, 232, 92, 64, 40, 83, 220, 75, 144, 56, 28, 45, 231, 195, 42, 123, };
			cacheTableOut.Rows.Add(drOut);

			drOut = cacheTableOut.NewRow();
			drOut["RowNumber"] = 11;
			drOut["1A"] = new byte[] { 100, 199, 255, 58, 174, 164, 77, 65, 163, 183, 29, 157, 18, 220, 40, 212, 127, 140, 154, 242, 80, 61, 115, 67, 175, 239, 199, 15, 127, 238, 163, 102, };
			drOut["1B"] = new byte[] { 118, 59, 124, 182, 124, 96, 181, 77, 170, 128, 66, 197, 106, 243, 50, 241, 118, 167, 10, 95, 109, 95, 12, 66, 159, 84, 8, 224, 175, 96, 83, 182, };
			drOut["1C"] = new byte[] { 55, 20, 184, 250, 125, 129, 155, 73, 128, 61, 234, 188, 236, 185, 253, 98, 121, 129, 244, 183, 59, 222, 21, 71, 130, 60, 151, 41, 46, 158, 91, 252, };
			drOut["1D"] = new byte[] { 5, 234, 134, 216, 211, 54, 116, 69, 157, 122, 111, 74, 36, 106, 78, 132, 87, 63, 238, 122, 114, 174, 164, 68, 153, 65, 33, 98, 100, 38, 78, 162, };
			drOut["1E"] = new byte[] { 203, 125, 109, 129, 197, 197, 33, 68, 172, 182, 118, 73, 134, 252, 249, 86, 247, 9, 37, 214, 62, 105, 253, 78, 164, 28, 133, 127, 21, 243, 94, 106, };
			drOut["1F"] = new byte[] { 175, 110, 185, 42, 94, 69, 142, 75, 140, 52, 191, 214, 247, 20, 157, 239, 44, 36, 154, 82, 177, 238, 211, 69, 171, 76, 97, 148, 64, 129, 125, 198, };
			cacheTableOut.Rows.Add(drOut);

			drOut = cacheTableOut.NewRow();
			drOut["RowNumber"] = 12;
			drOut["1A"] = new byte[] { 178, 71, 93, 42, 201, 160, 186, 68, 145, 161, 70, 38, 212, 53, 54, 82, 136, 155, 53, 104, 249, 50, 9, 76, 139, 221, 181, 78, 72, 162, 97, 247, };
			drOut["1B"] = new byte[] { 89, 40, 155, 61, 138, 245, 106, 76, 163, 205, 38, 58, 129, 209, 124, 209, 198, 97, 108, 80, 167, 187, 4, 71, 155, 46, 49, 193, 135, 121, 214, 203, };
			drOut["1C"] = new byte[] { 71, 154, 148, 10, 214, 74, 174, 75, 149, 51, 255, 153, 166, 137, 133, 58, 25, 44, 66, 123, 80, 106, 230, 68, 165, 85, 156, 88, 84, 8, 13, 23, };
			drOut["1D"] = new byte[] { 120, 239, 249, 41, 247, 52, 227, 76, 153, 174, 128, 230, 210, 142, 152, 201, 57, 83, 186, 180, 9, 120, 47, 76, 185, 144, 73, 70, 24, 103, 161, 12, };
			drOut["1E"] = new byte[] { 164, 99, 207, 13, 203, 196, 138, 74, 145, 65, 178, 255, 113, 99, 84, 239, 147, 165, 216, 173, 137, 99, 4, 65, 158, 214, 136, 127, 136, 90, 42, 177, };
			drOut["1F"] = new byte[] { 36, 136, 130, 229, 6, 145, 124, 67, 150, 253, 56, 238, 169, 130, 196, 46, 175, 56, 33, 116, 173, 18, 74, 76, 184, 245, 156, 246, 10, 38, 52, 126, };
			cacheTableOut.Rows.Add(drOut);

			drOut = cacheTableOut.NewRow();
			drOut["RowNumber"] = 13;
			drOut["1A"] = new byte[] { 15, 117, 117, 22, 212, 115, 231, 75, 172, 104, 144, 145, 15, 199, 98, 30, 185, 11, 1, 105, 237, 46, 7, 73, 143, 45, 163, 158, 14, 86, 211, 46, };
			drOut["1B"] = new byte[] { 0, 156, 76, 209, 6, 219, 147, 76, 152, 117, 185, 30, 236, 7, 123, 220, 86, 40, 22, 210, 131, 4, 185, 68, 157, 242, 63, 88, 204, 91, 210, 16, };
			drOut["1C"] = new byte[] { 162, 100, 6, 254, 222, 179, 244, 69, 178, 221, 92, 101, 138, 125, 42, 120, 60, 96, 184, 212, 239, 161, 182, 67, 158, 89, 33, 90, 223, 196, 125, 45, };
			drOut["1D"] = new byte[] { 238, 20, 108, 96, 42, 48, 81, 75, 185, 13, 89, 82, 58, 239, 171, 194, 158, 81, 208, 5, 174, 218, 243, 79, 160, 105, 112, 82, 67, 65, 53, 80, };
			drOut["1E"] = new byte[] { 106, 90, 26, 74, 211, 112, 137, 79, 158, 216, 12, 19, 4, 99, 195, 25, 65, 65, 207, 62, 5, 253, 246, 71, 137, 68, 127, 72, 183, 232, 229, 7, };
			drOut["1F"] = new byte[] { 128, 73, 27, 127, 46, 248, 141, 76, 167, 245, 117, 72, 69, 232, 15, 159, 74, 127, 79, 24, 67, 181, 122, 78, 173, 170, 28, 235, 181, 218, 174, 10, };
			cacheTableOut.Rows.Add(drOut);

			drOut = cacheTableOut.NewRow();
			drOut["RowNumber"] = 14;
			drOut["1A"] = new byte[] { 0, 9, 93, 130, 148, 20, 237, 65, 137, 72, 93, 223, 65, 220, 137, 97, 244, 82, 219, 105, 50, 254, 86, 76, 184, 11, 225, 216, 216, 97, 71, 149, };
			drOut["1B"] = new byte[] { 203, 209, 168, 254, 17, 61, 117, 77, 131, 106, 39, 182, 236, 253, 216, 208, 14, 222, 13, 192, 213, 101, 182, 66, 162, 180, 172, 186, 42, 239, 179, 83, };
			drOut["1C"] = new byte[] { 133, 38, 101, 217, 203, 6, 93, 73, 171, 216, 192, 126, 174, 27, 79, 224, 203, 37, 29, 1, 187, 192, 55, 67, 191, 220, 235, 135, 135, 230, 166, 109, };
			drOut["1D"] = new byte[] { 87, 216, 75, 34, 157, 165, 77, 70, 151, 227, 188, 238, 226, 226, 14, 13, 235, 114, 53, 46, 254, 213, 109, 68, 140, 193, 51, 20, 251, 30, 190, 13, };
			drOut["1E"] = new byte[] { 203, 183, 132, 163, 66, 2, 209, 66, 165, 129, 48, 10, 9, 183, 22, 182, 152, 88, 238, 4, 244, 112, 247, 70, 129, 77, 36, 152, 36, 152, 71, 80, };
			drOut["1F"] = new byte[] { 247, 151, 69, 151, 7, 33, 170, 79, 151, 152, 188, 228, 133, 183, 165, 94, 185, 166, 67, 191, 74, 204, 158, 68, 155, 141, 7, 34, 8, 14, 153, 167, };
			cacheTableOut.Rows.Add(drOut);

			drOut = cacheTableOut.NewRow();
			drOut["RowNumber"] = 15;
			drOut["1A"] = new byte[] { 54, 192, 250, 178, 52, 195, 109, 67, 174, 118, 193, 84, 180, 221, 136, 189, 77, 232, 184, 224, 239, 95, 60, 69, 130, 65, 41, 123, 28, 50, 228, 15, };
			drOut["1B"] = new byte[] { 247, 143, 198, 75, 132, 141, 178, 72, 165, 3, 118, 68, 146, 135, 21, 34, 119, 181, 68, 41, 76, 16, 40, 65, 180, 7, 119, 103, 233, 57, 121, 125, };
			drOut["1C"] = new byte[] { 34, 5, 185, 250, 6, 160, 22, 71, 182, 109, 193, 45, 35, 255, 84, 227, 165, 180, 230, 156, 247, 176, 200, 66, 141, 161, 155, 21, 37, 147, 216, 42, };
			drOut["1D"] = new byte[] { 240, 77, 90, 71, 189, 60, 205, 75, 190, 234, 88, 108, 201, 213, 230, 102, 155, 171, 45, 254, 44, 249, 85, 75, 150, 77, 46, 131, 53, 124, 137, 40, };
			drOut["1E"] = new byte[] { 176, 224, 50, 241, 205, 171, 77, 77, 172, 16, 224, 45, 42, 21, 34, 43, 66, 151, 0, 206, 73, 113, 90, 65, 131, 232, 3, 222, 4, 221, 181, 62, };
			drOut["1F"] = new byte[] { 152, 129, 93, 103, 89, 120, 48, 77, 183, 199, 248, 61, 73, 102, 17, 221, 97, 103, 151, 101, 50, 8, 158, 75, 145, 166, 110, 135, 28, 202, 137, 163, };
			cacheTableOut.Rows.Add(drOut);
		}

		#endregion

		//----------------------------------------------------------------------
		private static string GetValueInternal(byte[] param)
		{
			byte[] gen1 = new byte[]{12, 25, 255, 15, 69, 125, 33, 201, 26, 95,
										167, 215, 25, 105, 29, 165, 38, 101, 200, 100,
										1, 55, 155, 19};
			byte[] gen2 = new byte[] { 132, 235, 255, 15, 69, 125, 33, 201 };

			// Utilizza ASCIIEncoder perché serve solo a criptare e decriptare stringhe
			// interne all'applicazione quali nomi degli algoritmi ecc.
			System.Text.ASCIIEncoding byteConverter = new System.Text.ASCIIEncoding();
			TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();

			MemoryStream outputFrontEndStream = new MemoryStream();

			CryptoStream stream =
				new CryptoStream(
				outputFrontEndStream,
				tdes.CreateDecryptor(gen1, gen2),
				CryptoStreamMode.Write
				);

			stream.Write(param, 0, param.Length);
			stream.Flush();
			stream.Close();

			return byteConverter.GetString(outputFrontEndStream.ToArray());
		}

		// Decripta i parametri presi in ingresso.
		// Si aspetta due soli parametri string:
		// il primo e' il file xml criptato,
		// il secondo e' il GUID con cui decriptare.
		//---------------------------------------------------------------------
		public string GetParameter(bool isOn, params string[] values)
		{
			if (!ValidateParameters(values))
				throw new Exception("Error 24");// 24: file xml o GUID non validi.

			// Carica il file XML in base64.
			string oldParameter = values[0];

			System.Guid parameterId = new Guid(values[1]);
			byte[] parameterArray = parameterId.ToByteArray();

			string option = (values.Length >= 2) ? values[2] : string.Empty;

			// Remove the header form the string to be decrypted.
			oldParameter = oldParameter.Replace(header.ToString(), string.Empty);

			// Decode base 64
			byte[] crypted = DecodeFormBase64(oldParameter);

			// Decrypt
			byte[] decrypted = DecryptInternal(crypted, parameterArray, isOn, option);

			// Unzip
			string unzipped = UnzipInternal(decrypted);

			// ritorna l'xml
			return unzipped;
		}

		// Cripta i parametri presi in ingresso.
		// Si aspetta due soli parametri string:
		// il primo e' il file xml da criptare,
		// il secondo e' il GUID con cui criptare.
		//---------------------------------------------------------------------
		public string SetParameter(bool isOn, params string[] values)
		{
			if (!ValidateParameters(values))
				throw new Exception("Error 24");// 24: file xml o GUID non validi.

			// Carica il file XML in chiaro.
			string oldParameter = values[0];

			System.Guid parameterId = new Guid(values[1]);
			byte[] parameterArray = parameterId.ToByteArray();

			string option = (values.Length >= 2) ? values[2] : string.Empty;

			// zippare
			byte[] zipped = ZipInternal(oldParameter);

			// criptare
			byte[] crypted = CryptInternal(zipped, parameterArray, isOn, option);

			// convertire in base64 e inserire l'header
			return String.Concat(header.ToString(), EncodeToBase64(crypted));
		}

		//---------------------------------------------------------------------
		protected virtual byte[] DecodeFormBase64(string toBeDecoded)
		{
			if ((toBeDecoded == null) || (toBeDecoded.Length == 0))
				// 32: stringa da trasformare in array di byte
				// secondo la codifica in Base64 é null o stringa vuota.
				throw new ArgumentNullException("Error 32");

			try
			{
				// N.B.: Ogni metodo pubblico statico della classe Convert é thread-safe
				return Convert.FromBase64String(toBeDecoded);
			}
			catch
			{
				/*
				 * Il metodo 'Convert.FromBase64String' lancia due tipi di eccezioni:
				 * 
				 * 1) 'ArgumentNullException': se il parametro in ingresso e` null;
				 * 2) 'FormatException': stringa da trasformare in array di byte
				 *    secondo la codifica in Base64 ha lunghezza minore di
				 *    4 o ha lunghezza che non é multipla di 4 escludendo
				 *    gli spazi bianchi.
				 * 
				 * Siccome il parametro non puo` essere null
				 * (lo testo prima di invocare il metodo) l'unica eccezione possibile
				 * e` la seconda.
				 * 
				 * (Vedere: http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemconvertclassfrombase64stringtopic.asp)
				 * 
				 * */
				throw new FormatException("Error 38");
			}
		}

		//---------------------------------------------------------------------
		protected virtual string EncodeToBase64(byte[] toBeEncoded)
		{
			if ((toBeEncoded == null) || toBeEncoded.Length == 0)
				// 42: array di byte da trasformare in stringa
				// secondo la codifica in Base64 é null o ha lunghezza pari a zero.
				throw new ArgumentNullException("Error 32");

			// N.B.: Ogni metodo pubblico statico della classe Convert é thread-safe
			return Convert.ToBase64String(toBeEncoded);
		}

		//---------------------------------------------------------------------
		protected virtual byte[] DecryptInternal(
			byte[] toBeDecrypted,
			byte[] parameterArray,
			bool isOn,
			string option
			)
		{
			int algIndex = -1;
			int keyIndex = -1;

			GetIndexes(parameterArray, option, out algIndex, out keyIndex);

			string algName = rulesTable[algIndex] as string;

			if (algName == null || algName.Length == 0)
				// 48: non é stato trovato il nome dell'algoritmo dalla rulesTable.
				throw new Exception("Error 48");

			int blockLen = 0;
			int streamOffset = 0;
			MemoryStream outputBufferStream = new MemoryStream();
			byte[] buffer = null;
			byte[] currKey = null;
			byte[] currIV = null;

			for (int i = 0; streamOffset < toBeDecrypted.Length; i++)
			{
				SetKeys(i, algName, keyIndex, out currKey, out currIV, isOn);

				blockLen = GetBlockLenght(TrimByteArray(toBeDecrypted, streamOffset, blockHeaderLenght));


				buffer = Crypto.DecryptToByteArray(
					TrimByteArray(toBeDecrypted, streamOffset + blockHeaderLenght, blockLen),
					algName,
					currKey,
					currIV
					);

				outputBufferStream.Write(buffer, 0, buffer.Length);


				streamOffset += blockLen + blockHeaderLenght;
			}

			outputBufferStream.Close();

			return outputBufferStream.ToArray();
		}

		//---------------------------------------------------------------------
		protected virtual byte[] CryptInternal(
			byte[] toBeCrypted,
			byte[] parameterArray,
			bool isOn,
			string option
			)
		{
			int algIndex = -1;
			int keyIndex = -1;

			GetIndexes(parameterArray, option, out algIndex, out keyIndex);

			string algName = rulesTable[algIndex] as string;

			if (algName == null || algName.Length == 0)
				// 48: non é stato trovato il nome dell'algoritmo dalla rulesTable.
				throw new Exception("Error 48");

			int streamOffset = 0;
			int[] lenghts = GetBlocksLen(toBeCrypted.Length);
			byte[] buffer = null;
			byte[] currKey = null;
			byte[] currIV = null;
			MemoryStream outputBufferStream = new MemoryStream();

			for (int i = 0; i < lenghts.Length; i++)
			{
				if (lenghts[i] > maxLenOfZipMsgBlockToBeCrypted)
					// il blocco da criptare e` piu` lungo della lunghezza massima consentita per ogni blocco.
					throw new Exception("Error 50");

				SetKeys(i, algName, keyIndex, out currKey, out currIV, isOn);


				buffer = Crypto.EncryptToByteArray(
					TrimByteArray(toBeCrypted, streamOffset, lenghts[i]),
					algName,
					currKey,
					currIV
					);

				// I primi due byte del blocco rappresentano l'header,
				// nell'header e` scritta la lunghezza del blocco.
				outputBufferStream.WriteByte(Convert.ToByte(buffer.Length / (byte.MaxValue + 1)));
				outputBufferStream.WriteByte(Convert.ToByte(buffer.Length % (byte.MaxValue + 1)));
				outputBufferStream.Write(buffer, 0, buffer.Length);

				streamOffset += lenghts[i];
			}

			outputBufferStream.Close();

			return outputBufferStream.ToArray();
		}

		// Lancia un'eccezione nel caso non vada a buon fine la decodifica.
		//---------------------------------------------------------------------
		protected virtual string UnzipInternal(byte[] zipped)
		{
			MemoryStream frontEndStream = new MemoryStream(zipped);

			byte[] buffer = null;
			char[] inputCharBuffer = null;
			StringBuilder resultBuilder = new StringBuilder();

			try
			{
				CompressedFile compressedFile = new CompressedFile(frontEndStream, CompressedFile.OpenMode.Read);
				CompressedEntry[] entries = compressedFile.GetAllEntries();
				if (entries != null)
					foreach (CompressedEntry entry in entries)
					{
						buffer = new byte[entry.Size];
						entry.CurrentStream.Read(buffer, 0, buffer.Length);

						inputCharBuffer = new char[System.Text.Encoding.Unicode.GetCharCount(buffer)];

						System.Text.Encoding.Unicode.GetDecoder().GetChars(
								buffer, 0, buffer.Length,
								inputCharBuffer, 0
								);

						resultBuilder.Append(inputCharBuffer);
					}
				compressedFile.Close();
			}
			catch (CompressionException)
			{ }
			return resultBuilder.ToString();
		}

		// Lancia un'eccezione nel caso non vada a buon fine la decodifica.
		//---------------------------------------------------------------------
		protected virtual byte[] ZipInternal(string toBeZipped)
		{
			byte[] buffer = new byte[System.Text.Encoding.Unicode.GetByteCount(toBeZipped)];

			System.Text.Encoding.Unicode.GetEncoder().GetBytes(
				toBeZipped.ToCharArray(), 0, toBeZipped.Length,
				buffer, 0, true
				);

			MemoryStream frontEndStream = new MemoryStream();
			MemoryStream zipStream = new MemoryStream();

			try
			{
				CompressedFile compressedFile = new CompressedFile(zipStream, CompressedFile.OpenMode.CreateAlways);
				frontEndStream.Write(buffer, 0, buffer.Length);
				compressedFile.AddStream(zipPlaceHolder, frontEndStream);
				compressedFile.Close();
			}
			catch (CompressionException)
			{
				return null;
			}
			return zipStream.ToArray();
		}

		// Valorizza le chiavi a seconda dell'indice e dell'algoritmo.
		//---------------------------------------------------------------------
		private void SetKeys(
			int index,
			string algName,
			int keyIndex,
			out byte[] currKey,
			out byte[] currIV,
			bool isOn
			)
		{
			currKey = null;
			currIV = null;

			// Identifica la riga della tabella che ha le chiavi per ogni blocco.
			DataRow[] selectedRows = null;

			if (isOn)
				selectedRows = cacheTable.Select(String.Format("RowNumber = '{0}'", keyIndex.ToString()));
			else
				selectedRows = cacheTableOut.Select(String.Format("RowNumber = '{0}'", keyIndex.ToString()));

			if (selectedRows == null)
				// 64: riga non trovata nella cahceTable - indice cercato.
				throw new Exception(String.Format("64 - {0}", keyIndex.ToString()));

			string keyColName = string.Empty;
			string ivColName = string.Empty;

			switch (index % (cacheTable.Columns.Count / 2))
			{
				case 0:
					{
						keyColName = "1A";
						ivColName = "1B";
						break;
					}
				case 1:
					{
						keyColName = "1C";
						ivColName = "1D";
						break;
					}
				case 2:
					{
						keyColName = "1E";
						ivColName = "1F";
						break;
					}
			}
			currKey = selectedRows[0][keyColName] as byte[];
			currIV = selectedRows[0][ivColName] as byte[];

			// TODO switch

			// rulesTable[0] = "TripleDES", 128-192 bit.
			if (String.Compare(algName, rulesTable[0].ToString(), true) == 0)
				currKey = TrimByteArray(currKey, 0, 24);

			// rulesTable[1] = "DES", 64-64 bit.
			if (String.Compare(algName, rulesTable[1].ToString(), true) == 0)
				currKey = TrimByteArray(currKey, 0, 8);

			// rulesTable[2] = "RC2", 40-128 bit.
			if (String.Compare(algName, rulesTable[2].ToString(), true) == 0)
				currKey = TrimByteArray(currKey, 0, 16);


			// rulesTable[0] = "TripleDES", 64-64 bit.
			if (String.Compare(algName, rulesTable[0].ToString(), true) == 0)
				currIV = TrimByteArray(currIV, 0, 8);

			// rulesTable[1] = "DES", 64-64 bit.
			if (String.Compare(algName, rulesTable[1].ToString(), true) == 0)
				currIV = TrimByteArray(currIV, 0, 8);

			// rulesTable[2] = "RC2", 64-64 bit.
			if (String.Compare(algName, rulesTable[2].ToString(), true) == 0)
				currIV = TrimByteArray(currIV, 0, 8);
		}

		// 
		//---------------------------------------------------------------------
		private int GetBlockLenght(byte[] header)
		{
			if (header.Length != blockHeaderLenght)
				throw new Exception("Error 56"); // 56: lunghezza dell'header diversa da blockHeaderLenght

			return Convert.ToInt32(header[0]) * (byte.MaxValue + 1) +
					Convert.ToInt32(header[1]);
		}

		// Ritorna un array di interi con le lunghezze dei vari blocchi.
		// É gestito cosí per tenere conto dei resti delle divisioni.
		//---------------------------------------------------------------------
		private int[] GetBlocksLen(int len)
		{
			Random r = new Random(DateTime.Now.Millisecond);
			List<int> lengths = new List<int>();
			int blockLen = -1;
			int offset = 0;
			int max = 0;
			while (offset < len)
			{
				max = (((len - offset) > maxLenOfZipMsgBlockToBeCrypted) ? maxLenOfZipMsgBlockToBeCrypted : (len - offset));
				blockLen = r.Next(1, max);
				lengths.Add(blockLen);
				offset += blockLen;
			}

			return lengths.ToArray();
		}

		// parameterArray = GUID(byte[])
		// index1 = algIndex (int)
		// index2 = keyIndex (int)
		//---------------------------------------------------------------------
		private void GetIndexes(
			byte[] parameterArray,
			string option,
			out int index1,
			out int index2
			)
		{
			// Calcolo offset x con i primi 4(00001111 = 0xF) bit del offsetByteNumber byte.
			int offset = GetFormattedValue(parameterArray[offsetByteNumber], 0xF);

			// GetHashCode returns a 32-bit signed integer hash code.
			int optionOffset = GetNumericValue(option);

			int optionOffset1 = ((Int32.MaxValue - optionOffset) < (startAlgNameByteNumber + offset)) ?
				startAlgNameByteNumber + offset
				:
				optionOffset + startAlgNameByteNumber + offset;

			// Nel ((startAlgNameByteNumber+x+optionOffset)/GUID.length) byte i primi 2 bit
			// specificano quale algoritmo di crypt utilizzare.
			index1 = GetFormattedValue(
				parameterArray[(optionOffset1 % parameterArray.Length)],
				0x3// 00000011 = 0x3 (big endian)
				);

			int optionOffset2 = ((Int32.MaxValue - optionOffset) < (startAlgKeyByteNumber + offset)) ?
				startAlgKeyByteNumber + offset
				:
				optionOffset + startAlgKeyByteNumber + offset;

			// Nel ((startAlgKeyByteNumber+x-optionOffset)/GUID.length) byte i bit 3, 4, 5, 6
			// specificano quale chiave utilizzare.
			index2 = GetFormattedValue(
				parameterArray[(optionOffset2 % parameterArray.Length)],
				0x3C,//00000000000111100 = 0x3C (big endian)
				2// shifta di 2 posizioni a destra.
				);
		}

		//---------------------------------------------------------------------
		protected int GetNumericValue(string s)
		{
			if (s == null || s.Length == 0)
				return 0;

			int temp = 0;
			foreach (char c in s)
				temp += Convert.ToInt32(c);

			return temp;
		}

		//---------------------------------------------------------------------
		protected byte[] TrimByteArray(byte[] arr, int startIndex, int length)
		{
			if ((startIndex + length) > arr.Length)
				// 72: startIndex e length non validi.
				throw new ArgumentOutOfRangeException("Error 72");

			byte[] result = new byte[length];
			for (int i = 0; i < length; i++)
				result[i] = arr[startIndex + i];

			return result;
		}

		// Ritorna il valore intero del byte a cui ha applicato la maschera.
		//---------------------------------------------------------------------
		protected int GetFormattedValue(byte b, int mask)
		{
			return GetFormattedValue(b, mask, 0);
		}

		// Ritorna il valore intero del byte a cui ha applicato la maschera.
		// se shift > 0 shifta a destra di shift posizioni,
		// se shift < 0 shifta a sinistra di shift posizioni,
		// se shift == 0 non shifta.
		//---------------------------------------------------------------------
		protected int GetFormattedValue(byte b, int mask, int shift)
		{
			int val = Convert.ToInt32(b);

			return (
				(shift > 0) ?
				((val & mask) >> shift) :
				((val & mask) << shift)
				);
		}

		// Funzione che controlla la validita' dei parametri
		//---------------------------------------------------------------------
		protected virtual bool ValidateParameters(params string[] values)
		{
			if (values == null)
				return false;

			if (values[0] == null || values[0].Length == 0)
				return false;

			if (values[1] == null || values[1].Length == 0)
				return false;

			// Carica il GUID
			System.Guid parameterId = Guid.Empty;

			try
			{
				parameterId = new Guid(values[1]);
			}
			catch (Exception)
			{
				return false;
			}

			return true;
		}
	}
}