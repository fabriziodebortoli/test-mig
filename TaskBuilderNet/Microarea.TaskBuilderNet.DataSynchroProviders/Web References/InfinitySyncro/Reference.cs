//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Microarea.TaskBuilderNet.DataSynchroProviders.InfinitySyncro {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="InfinitySyncroSoapBinding", Namespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
    public partial class InfinitySyncroService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback connectOperationCompleted;
        
        private System.Threading.SendOrPostCallback disconnectOperationCompleted;
        
        private System.Threading.SendOrPostCallback pingOperationCompleted;
        
        private System.Threading.SendOrPostCallback getActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback iRevolutionCheckMatricolaOperationCompleted;
        
        private System.Threading.SendOrPostCallback getXsdByNameWithInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkUserPwdWithInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkDoProcessWithRandomOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkAppRegWithInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback revCompanyAlreadyMappedOperationCompleted;
        
        private System.Threading.SendOrPostCallback doProcessSyncroWithRandomOperationCompleted;
        
        private System.Threading.SendOrPostCallback getXmlLengthWithRandomOperationCompleted;
        
        private System.Threading.SendOrPostCallback iMagoCompanyAlreadyMappedOperationCompleted;
        
        private System.Threading.SendOrPostCallback iMagoCheckAziAssociationOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkRevInfinityAlreadyMappedOperationCompleted;
        
        private System.Threading.SendOrPostCallback iMagoCheckAziAlreadyMappedOperationCompleted;
        
        private System.Threading.SendOrPostCallback iMagoCheckUserAlreadyMappedOperationCompleted;
        
        private System.Threading.SendOrPostCallback revInfinityImportPackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback iMagoSetGadgetPermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback connectRevInfinityWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback iRevolutionConnectWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetConvergencyCriteriaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConvergencyCriteriaOperationCompleted;
        
        private System.Threading.SendOrPostCallback doProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback executeSyncroOperationCompleted;
        
        private System.Threading.SendOrPostCallback initXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback closeXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback putXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback setVrtOperationCompleted;
        
        private System.Threading.SendOrPostCallback getXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback getXmlLengthOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkUserPwdOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkAppRegOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllAppRegOperationCompleted;
        
        private System.Threading.SendOrPostCallback getXsdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getXsdByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback commitEntityOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback magoWizardOperationCompleted;
        
        private System.Threading.SendOrPostCallback iMagoWizardOperationCompleted;
        
        private System.Threading.SendOrPostCallback importPackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUrlAhrOperationCompleted;
        
        private System.Threading.SendOrPostCallback iRevolutionCheckAziAlreadyMappedOperationCompleted;
        
        private System.Threading.SendOrPostCallback iRevolutionCheckAziAssociationOperationCompleted;
        
        private System.Threading.SendOrPostCallback iRevolutionCompanyAlreadyMappedOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkRevInfinityUserAlreadyMappedOperationCompleted;
        
        private System.Threading.SendOrPostCallback iRevolutionCheckUserAlreadyMappedOperationCompleted;
        
        private System.Threading.SendOrPostCallback iRevolutionSetGadgetPermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback connectWithInstanceRevInfinityOperationCompleted;
        
        private System.Threading.SendOrPostCallback iRevolutionConnectWithInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback putXmlWithRandomOperationCompleted;
        
        private System.Threading.SendOrPostCallback getsGuidImportOperationCompleted;
        
        private System.Threading.SendOrPostCallback setsGuidImportOperationCompleted;
        
        private System.Threading.SendOrPostCallback initXmlWithRandomOperationCompleted;
        
        private System.Threading.SendOrPostCallback closeXmlWithRandomOperationCompleted;
        
        private System.Threading.SendOrPostCallback getXmlWithRandomOperationCompleted;
        
        private System.Threading.SendOrPostCallback connectWithInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback doProcessSyncroOperationCompleted;
        
        private System.Threading.SendOrPostCallback doProcessWithRandomOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkDoProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProcessInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProcessModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getActionWithInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback getXsdWithInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback uploadMailAttachmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback rollbackEntityOperationCompleted;
        
        private System.Threading.SendOrPostCallback rollbackActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkRevInfinityAssOperationCompleted;
        
        private System.Threading.SendOrPostCallback revInfinityAssOperationCompleted;
        
        private System.Threading.SendOrPostCallback iRevolutionWizardOperationCompleted;
        
        private System.Threading.SendOrPostCallback iMagoCheckVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback revInfSetGlobalOperationCompleted;
        
        private System.Threading.SendOrPostCallback iRevolutionSetGlobalOperationCompleted;
        
        private System.Threading.SendOrPostCallback magoInfSetGlobalOperationCompleted;
        
        private System.Threading.SendOrPostCallback iMagoSetGlobalOperationCompleted;
        
        private System.Threading.SendOrPostCallback revInfinityServerEstOperationCompleted;
        
        private System.Threading.SendOrPostCallback iRevolutionServerEstOperationCompleted;
        
        private System.Threading.SendOrPostCallback iMagoServerEstOperationCompleted;
        
        private System.Threading.SendOrPostCallback iRevolutionGetUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkConnectionDbAhrOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkJDBCConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback connectRevInfinityOperationCompleted;
        
        private System.Threading.SendOrPostCallback iRevolutionConnectOperationCompleted;
        
        private System.Threading.SendOrPostCallback iMagoConnectWithTokenOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public InfinitySyncroService() {
            this.Url = global::Microarea.TaskBuilderNet.DataSynchroProviders.Properties.Settings.Default.Microarea_TaskBuilderNet_DataSynchroProviders_InfinitySyncro_InfinitySyncroService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event connectCompletedEventHandler connectCompleted;
        
        /// <remarks/>
        public event disconnectCompletedEventHandler disconnectCompleted;
        
        /// <remarks/>
        public event pingCompletedEventHandler pingCompleted;
        
        /// <remarks/>
        public event getActionCompletedEventHandler getActionCompleted;
        
        /// <remarks/>
        public event iRevolutionCheckMatricolaCompletedEventHandler iRevolutionCheckMatricolaCompleted;
        
        /// <remarks/>
        public event getXsdByNameWithInstanceCompletedEventHandler getXsdByNameWithInstanceCompleted;
        
        /// <remarks/>
        public event checkUserPwdWithInstanceCompletedEventHandler checkUserPwdWithInstanceCompleted;
        
        /// <remarks/>
        public event checkDoProcessWithRandomCompletedEventHandler checkDoProcessWithRandomCompleted;
        
        /// <remarks/>
        public event checkAppRegWithInstanceCompletedEventHandler checkAppRegWithInstanceCompleted;
        
        /// <remarks/>
        public event revCompanyAlreadyMappedCompletedEventHandler revCompanyAlreadyMappedCompleted;
        
        /// <remarks/>
        public event doProcessSyncroWithRandomCompletedEventHandler doProcessSyncroWithRandomCompleted;
        
        /// <remarks/>
        public event getXmlLengthWithRandomCompletedEventHandler getXmlLengthWithRandomCompleted;
        
        /// <remarks/>
        public event iMagoCompanyAlreadyMappedCompletedEventHandler iMagoCompanyAlreadyMappedCompleted;
        
        /// <remarks/>
        public event iMagoCheckAziAssociationCompletedEventHandler iMagoCheckAziAssociationCompleted;
        
        /// <remarks/>
        public event checkRevInfinityAlreadyMappedCompletedEventHandler checkRevInfinityAlreadyMappedCompleted;
        
        /// <remarks/>
        public event iMagoCheckAziAlreadyMappedCompletedEventHandler iMagoCheckAziAlreadyMappedCompleted;
        
        /// <remarks/>
        public event iMagoCheckUserAlreadyMappedCompletedEventHandler iMagoCheckUserAlreadyMappedCompleted;
        
        /// <remarks/>
        public event revInfinityImportPackageCompletedEventHandler revInfinityImportPackageCompleted;
        
        /// <remarks/>
        public event iMagoSetGadgetPermissionCompletedEventHandler iMagoSetGadgetPermissionCompleted;
        
        /// <remarks/>
        public event connectRevInfinityWithTokenCompletedEventHandler connectRevInfinityWithTokenCompleted;
        
        /// <remarks/>
        public event iRevolutionConnectWithTokenCompletedEventHandler iRevolutionConnectWithTokenCompleted;
        
        /// <remarks/>
        public event SetConvergencyCriteriaCompletedEventHandler SetConvergencyCriteriaCompleted;
        
        /// <remarks/>
        public event GetConvergencyCriteriaCompletedEventHandler GetConvergencyCriteriaCompleted;
        
        /// <remarks/>
        public event doProcessCompletedEventHandler doProcessCompleted;
        
        /// <remarks/>
        public event executeSyncroCompletedEventHandler executeSyncroCompleted;
        
        /// <remarks/>
        public event initXmlCompletedEventHandler initXmlCompleted;
        
        /// <remarks/>
        public event closeXmlCompletedEventHandler closeXmlCompleted;
        
        /// <remarks/>
        public event putXmlCompletedEventHandler putXmlCompleted;
        
        /// <remarks/>
        public event setVrtCompletedEventHandler setVrtCompleted;
        
        /// <remarks/>
        public event getXmlCompletedEventHandler getXmlCompleted;
        
        /// <remarks/>
        public event getXmlLengthCompletedEventHandler getXmlLengthCompleted;
        
        /// <remarks/>
        public event checkUserPwdCompletedEventHandler checkUserPwdCompleted;
        
        /// <remarks/>
        public event checkAppRegCompletedEventHandler checkAppRegCompleted;
        
        /// <remarks/>
        public event getAllAppRegCompletedEventHandler getAllAppRegCompleted;
        
        /// <remarks/>
        public event getXsdCompletedEventHandler getXsdCompleted;
        
        /// <remarks/>
        public event getXsdByNameCompletedEventHandler getXsdByNameCompleted;
        
        /// <remarks/>
        public event sendMailCompletedEventHandler sendMailCompleted;
        
        /// <remarks/>
        public event commitEntityCompletedEventHandler commitEntityCompleted;
        
        /// <remarks/>
        public event getAllCompanyCompletedEventHandler getAllCompanyCompleted;
        
        /// <remarks/>
        public event getAllUsersCompletedEventHandler getAllUsersCompleted;
        
        /// <remarks/>
        public event magoWizardCompletedEventHandler magoWizardCompleted;
        
        /// <remarks/>
        public event iMagoWizardCompletedEventHandler iMagoWizardCompleted;
        
        /// <remarks/>
        public event importPackageCompletedEventHandler importPackageCompleted;
        
        /// <remarks/>
        public event getUrlAhrCompletedEventHandler getUrlAhrCompleted;
        
        /// <remarks/>
        public event iRevolutionCheckAziAlreadyMappedCompletedEventHandler iRevolutionCheckAziAlreadyMappedCompleted;
        
        /// <remarks/>
        public event iRevolutionCheckAziAssociationCompletedEventHandler iRevolutionCheckAziAssociationCompleted;
        
        /// <remarks/>
        public event iRevolutionCompanyAlreadyMappedCompletedEventHandler iRevolutionCompanyAlreadyMappedCompleted;
        
        /// <remarks/>
        public event checkRevInfinityUserAlreadyMappedCompletedEventHandler checkRevInfinityUserAlreadyMappedCompleted;
        
        /// <remarks/>
        public event iRevolutionCheckUserAlreadyMappedCompletedEventHandler iRevolutionCheckUserAlreadyMappedCompleted;
        
        /// <remarks/>
        public event iRevolutionSetGadgetPermissionCompletedEventHandler iRevolutionSetGadgetPermissionCompleted;
        
        /// <remarks/>
        public event connectWithInstanceRevInfinityCompletedEventHandler connectWithInstanceRevInfinityCompleted;
        
        /// <remarks/>
        public event iRevolutionConnectWithInstanceCompletedEventHandler iRevolutionConnectWithInstanceCompleted;
        
        /// <remarks/>
        public event putXmlWithRandomCompletedEventHandler putXmlWithRandomCompleted;
        
        /// <remarks/>
        public event getsGuidImportCompletedEventHandler getsGuidImportCompleted;
        
        /// <remarks/>
        public event setsGuidImportCompletedEventHandler setsGuidImportCompleted;
        
        /// <remarks/>
        public event initXmlWithRandomCompletedEventHandler initXmlWithRandomCompleted;
        
        /// <remarks/>
        public event closeXmlWithRandomCompletedEventHandler closeXmlWithRandomCompleted;
        
        /// <remarks/>
        public event getXmlWithRandomCompletedEventHandler getXmlWithRandomCompleted;
        
        /// <remarks/>
        public event connectWithInstanceCompletedEventHandler connectWithInstanceCompleted;
        
        /// <remarks/>
        public event doProcessSyncroCompletedEventHandler doProcessSyncroCompleted;
        
        /// <remarks/>
        public event doProcessWithRandomCompletedEventHandler doProcessWithRandomCompleted;
        
        /// <remarks/>
        public event checkDoProcessCompletedEventHandler checkDoProcessCompleted;
        
        /// <remarks/>
        public event getProcessInfoCompletedEventHandler getProcessInfoCompleted;
        
        /// <remarks/>
        public event getProcessModeCompletedEventHandler getProcessModeCompleted;
        
        /// <remarks/>
        public event getActionWithInstanceCompletedEventHandler getActionWithInstanceCompleted;
        
        /// <remarks/>
        public event getXsdWithInstanceCompletedEventHandler getXsdWithInstanceCompleted;
        
        /// <remarks/>
        public event uploadMailAttachmentsCompletedEventHandler uploadMailAttachmentsCompleted;
        
        /// <remarks/>
        public event rollbackEntityCompletedEventHandler rollbackEntityCompleted;
        
        /// <remarks/>
        public event rollbackActionCompletedEventHandler rollbackActionCompleted;
        
        /// <remarks/>
        public event checkRevInfinityAssCompletedEventHandler checkRevInfinityAssCompleted;
        
        /// <remarks/>
        public event revInfinityAssCompletedEventHandler revInfinityAssCompleted;
        
        /// <remarks/>
        public event iRevolutionWizardCompletedEventHandler iRevolutionWizardCompleted;
        
        /// <remarks/>
        public event iMagoCheckVersionCompletedEventHandler iMagoCheckVersionCompleted;
        
        /// <remarks/>
        public event revInfSetGlobalCompletedEventHandler revInfSetGlobalCompleted;
        
        /// <remarks/>
        public event iRevolutionSetGlobalCompletedEventHandler iRevolutionSetGlobalCompleted;
        
        /// <remarks/>
        public event magoInfSetGlobalCompletedEventHandler magoInfSetGlobalCompleted;
        
        /// <remarks/>
        public event iMagoSetGlobalCompletedEventHandler iMagoSetGlobalCompleted;
        
        /// <remarks/>
        public event revInfinityServerEstCompletedEventHandler revInfinityServerEstCompleted;
        
        /// <remarks/>
        public event iRevolutionServerEstCompletedEventHandler iRevolutionServerEstCompleted;
        
        /// <remarks/>
        public event iMagoServerEstCompletedEventHandler iMagoServerEstCompleted;
        
        /// <remarks/>
        public event iRevolutionGetUrlCompletedEventHandler iRevolutionGetUrlCompleted;
        
        /// <remarks/>
        public event checkConnectionDbAhrCompletedEventHandler checkConnectionDbAhrCompleted;
        
        /// <remarks/>
        public event checkJDBCConnectionCompletedEventHandler checkJDBCConnectionCompleted;
        
        /// <remarks/>
        public event connectRevInfinityCompletedEventHandler connectRevInfinityCompleted;
        
        /// <remarks/>
        public event iRevolutionConnectCompletedEventHandler iRevolutionConnectCompleted;
        
        /// <remarks/>
        public event iMagoConnectWithTokenCompletedEventHandler iMagoConnectWithTokenCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("connectReturn")]
        public string connect(string sUser, string sPwd, string sCompanyId) {
            object[] results = this.Invoke("connect", new object[] {
                        sUser,
                        sPwd,
                        sCompanyId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void connectAsync(string sUser, string sPwd, string sCompanyId) {
            this.connectAsync(sUser, sPwd, sCompanyId, null);
        }
        
        /// <remarks/>
        public void connectAsync(string sUser, string sPwd, string sCompanyId, object userState) {
            if ((this.connectOperationCompleted == null)) {
                this.connectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconnectOperationCompleted);
            }
            this.InvokeAsync("connect", new object[] {
                        sUser,
                        sPwd,
                        sCompanyId}, this.connectOperationCompleted, userState);
        }
        
        private void OnconnectOperationCompleted(object arg) {
            if ((this.connectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.connectCompleted(this, new connectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("disconnectReturn")]
        public string disconnect(string sContextId) {
            object[] results = this.Invoke("disconnect", new object[] {
                        sContextId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void disconnectAsync(string sContextId) {
            this.disconnectAsync(sContextId, null);
        }
        
        /// <remarks/>
        public void disconnectAsync(string sContextId, object userState) {
            if ((this.disconnectOperationCompleted == null)) {
                this.disconnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OndisconnectOperationCompleted);
            }
            this.InvokeAsync("disconnect", new object[] {
                        sContextId}, this.disconnectOperationCompleted, userState);
        }
        
        private void OndisconnectOperationCompleted(object arg) {
            if ((this.disconnectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.disconnectCompleted(this, new disconnectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("pingReturn")]
        public string ping(string sContextId) {
            object[] results = this.Invoke("ping", new object[] {
                        sContextId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void pingAsync(string sContextId) {
            this.pingAsync(sContextId, null);
        }
        
        /// <remarks/>
        public void pingAsync(string sContextId, object userState) {
            if ((this.pingOperationCompleted == null)) {
                this.pingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpingOperationCompleted);
            }
            this.InvokeAsync("ping", new object[] {
                        sContextId}, this.pingOperationCompleted, userState);
        }
        
        private void OnpingOperationCompleted(object arg) {
            if ((this.pingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.pingCompleted(this, new pingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("getActionReturn")]
        public string getAction(string sAppReg) {
            object[] results = this.Invoke("getAction", new object[] {
                        sAppReg});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getActionAsync(string sAppReg) {
            this.getActionAsync(sAppReg, null);
        }
        
        /// <remarks/>
        public void getActionAsync(string sAppReg, object userState) {
            if ((this.getActionOperationCompleted == null)) {
                this.getActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetActionOperationCompleted);
            }
            this.InvokeAsync("getAction", new object[] {
                        sAppReg}, this.getActionOperationCompleted, userState);
        }
        
        private void OngetActionOperationCompleted(object arg) {
            if ((this.getActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getActionCompleted(this, new getActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iRevolutionCheckMatricolaReturn")]
        public string iRevolutionCheckMatricola(string sMatricola) {
            object[] results = this.Invoke("iRevolutionCheckMatricola", new object[] {
                        sMatricola});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iRevolutionCheckMatricolaAsync(string sMatricola) {
            this.iRevolutionCheckMatricolaAsync(sMatricola, null);
        }
        
        /// <remarks/>
        public void iRevolutionCheckMatricolaAsync(string sMatricola, object userState) {
            if ((this.iRevolutionCheckMatricolaOperationCompleted == null)) {
                this.iRevolutionCheckMatricolaOperationCompleted = new System.Threading.SendOrPostCallback(this.OniRevolutionCheckMatricolaOperationCompleted);
            }
            this.InvokeAsync("iRevolutionCheckMatricola", new object[] {
                        sMatricola}, this.iRevolutionCheckMatricolaOperationCompleted, userState);
        }
        
        private void OniRevolutionCheckMatricolaOperationCompleted(object arg) {
            if ((this.iRevolutionCheckMatricolaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iRevolutionCheckMatricolaCompleted(this, new iRevolutionCheckMatricolaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("getXsdByNameWithInstanceReturn", DataType="base64Binary")]
        public byte[] getXsdByNameWithInstance(string sAppReg, string sName, string sInstance) {
            object[] results = this.Invoke("getXsdByNameWithInstance", new object[] {
                        sAppReg,
                        sName,
                        sInstance});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getXsdByNameWithInstanceAsync(string sAppReg, string sName, string sInstance) {
            this.getXsdByNameWithInstanceAsync(sAppReg, sName, sInstance, null);
        }
        
        /// <remarks/>
        public void getXsdByNameWithInstanceAsync(string sAppReg, string sName, string sInstance, object userState) {
            if ((this.getXsdByNameWithInstanceOperationCompleted == null)) {
                this.getXsdByNameWithInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetXsdByNameWithInstanceOperationCompleted);
            }
            this.InvokeAsync("getXsdByNameWithInstance", new object[] {
                        sAppReg,
                        sName,
                        sInstance}, this.getXsdByNameWithInstanceOperationCompleted, userState);
        }
        
        private void OngetXsdByNameWithInstanceOperationCompleted(object arg) {
            if ((this.getXsdByNameWithInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getXsdByNameWithInstanceCompleted(this, new getXsdByNameWithInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("checkUserPwdWithInstanceReturn")]
        public string checkUserPwdWithInstance(string sUser, string sPwd, string sInstance) {
            object[] results = this.Invoke("checkUserPwdWithInstance", new object[] {
                        sUser,
                        sPwd,
                        sInstance});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkUserPwdWithInstanceAsync(string sUser, string sPwd, string sInstance) {
            this.checkUserPwdWithInstanceAsync(sUser, sPwd, sInstance, null);
        }
        
        /// <remarks/>
        public void checkUserPwdWithInstanceAsync(string sUser, string sPwd, string sInstance, object userState) {
            if ((this.checkUserPwdWithInstanceOperationCompleted == null)) {
                this.checkUserPwdWithInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckUserPwdWithInstanceOperationCompleted);
            }
            this.InvokeAsync("checkUserPwdWithInstance", new object[] {
                        sUser,
                        sPwd,
                        sInstance}, this.checkUserPwdWithInstanceOperationCompleted, userState);
        }
        
        private void OncheckUserPwdWithInstanceOperationCompleted(object arg) {
            if ((this.checkUserPwdWithInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkUserPwdWithInstanceCompleted(this, new checkUserPwdWithInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("checkDoProcessWithRandomReturn")]
        public string checkDoProcessWithRandom(string sContextId, string sRandomId, string sProcessId) {
            object[] results = this.Invoke("checkDoProcessWithRandom", new object[] {
                        sContextId,
                        sRandomId,
                        sProcessId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkDoProcessWithRandomAsync(string sContextId, string sRandomId, string sProcessId) {
            this.checkDoProcessWithRandomAsync(sContextId, sRandomId, sProcessId, null);
        }
        
        /// <remarks/>
        public void checkDoProcessWithRandomAsync(string sContextId, string sRandomId, string sProcessId, object userState) {
            if ((this.checkDoProcessWithRandomOperationCompleted == null)) {
                this.checkDoProcessWithRandomOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckDoProcessWithRandomOperationCompleted);
            }
            this.InvokeAsync("checkDoProcessWithRandom", new object[] {
                        sContextId,
                        sRandomId,
                        sProcessId}, this.checkDoProcessWithRandomOperationCompleted, userState);
        }
        
        private void OncheckDoProcessWithRandomOperationCompleted(object arg) {
            if ((this.checkDoProcessWithRandomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkDoProcessWithRandomCompleted(this, new checkDoProcessWithRandomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("checkAppRegWithInstanceReturn")]
        public string checkAppRegWithInstance(string sAppReg, string sInstance) {
            object[] results = this.Invoke("checkAppRegWithInstance", new object[] {
                        sAppReg,
                        sInstance});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkAppRegWithInstanceAsync(string sAppReg, string sInstance) {
            this.checkAppRegWithInstanceAsync(sAppReg, sInstance, null);
        }
        
        /// <remarks/>
        public void checkAppRegWithInstanceAsync(string sAppReg, string sInstance, object userState) {
            if ((this.checkAppRegWithInstanceOperationCompleted == null)) {
                this.checkAppRegWithInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckAppRegWithInstanceOperationCompleted);
            }
            this.InvokeAsync("checkAppRegWithInstance", new object[] {
                        sAppReg,
                        sInstance}, this.checkAppRegWithInstanceOperationCompleted, userState);
        }
        
        private void OncheckAppRegWithInstanceOperationCompleted(object arg) {
            if ((this.checkAppRegWithInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkAppRegWithInstanceCompleted(this, new checkAppRegWithInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("revCompanyAlreadyMappedReturn")]
        public string revCompanyAlreadyMapped(string sDummy) {
            object[] results = this.Invoke("revCompanyAlreadyMapped", new object[] {
                        sDummy});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void revCompanyAlreadyMappedAsync(string sDummy) {
            this.revCompanyAlreadyMappedAsync(sDummy, null);
        }
        
        /// <remarks/>
        public void revCompanyAlreadyMappedAsync(string sDummy, object userState) {
            if ((this.revCompanyAlreadyMappedOperationCompleted == null)) {
                this.revCompanyAlreadyMappedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrevCompanyAlreadyMappedOperationCompleted);
            }
            this.InvokeAsync("revCompanyAlreadyMapped", new object[] {
                        sDummy}, this.revCompanyAlreadyMappedOperationCompleted, userState);
        }
        
        private void OnrevCompanyAlreadyMappedOperationCompleted(object arg) {
            if ((this.revCompanyAlreadyMappedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.revCompanyAlreadyMappedCompleted(this, new revCompanyAlreadyMappedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("doProcessSyncroWithRandomReturn")]
        public string doProcessSyncroWithRandom(string sContextId, string sRandomId, string sActionList, string sAtomicLevel, string sOwner) {
            object[] results = this.Invoke("doProcessSyncroWithRandom", new object[] {
                        sContextId,
                        sRandomId,
                        sActionList,
                        sAtomicLevel,
                        sOwner});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void doProcessSyncroWithRandomAsync(string sContextId, string sRandomId, string sActionList, string sAtomicLevel, string sOwner) {
            this.doProcessSyncroWithRandomAsync(sContextId, sRandomId, sActionList, sAtomicLevel, sOwner, null);
        }
        
        /// <remarks/>
        public void doProcessSyncroWithRandomAsync(string sContextId, string sRandomId, string sActionList, string sAtomicLevel, string sOwner, object userState) {
            if ((this.doProcessSyncroWithRandomOperationCompleted == null)) {
                this.doProcessSyncroWithRandomOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoProcessSyncroWithRandomOperationCompleted);
            }
            this.InvokeAsync("doProcessSyncroWithRandom", new object[] {
                        sContextId,
                        sRandomId,
                        sActionList,
                        sAtomicLevel,
                        sOwner}, this.doProcessSyncroWithRandomOperationCompleted, userState);
        }
        
        private void OndoProcessSyncroWithRandomOperationCompleted(object arg) {
            if ((this.doProcessSyncroWithRandomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doProcessSyncroWithRandomCompleted(this, new doProcessSyncroWithRandomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("getXmlLengthWithRandomReturn")]
        public string getXmlLengthWithRandom(string sContextId, string sRandomId, string sProcessId, string sAction) {
            object[] results = this.Invoke("getXmlLengthWithRandom", new object[] {
                        sContextId,
                        sRandomId,
                        sProcessId,
                        sAction});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getXmlLengthWithRandomAsync(string sContextId, string sRandomId, string sProcessId, string sAction) {
            this.getXmlLengthWithRandomAsync(sContextId, sRandomId, sProcessId, sAction, null);
        }
        
        /// <remarks/>
        public void getXmlLengthWithRandomAsync(string sContextId, string sRandomId, string sProcessId, string sAction, object userState) {
            if ((this.getXmlLengthWithRandomOperationCompleted == null)) {
                this.getXmlLengthWithRandomOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetXmlLengthWithRandomOperationCompleted);
            }
            this.InvokeAsync("getXmlLengthWithRandom", new object[] {
                        sContextId,
                        sRandomId,
                        sProcessId,
                        sAction}, this.getXmlLengthWithRandomOperationCompleted, userState);
        }
        
        private void OngetXmlLengthWithRandomOperationCompleted(object arg) {
            if ((this.getXmlLengthWithRandomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getXmlLengthWithRandomCompleted(this, new getXmlLengthWithRandomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iMagoCompanyAlreadyMappedReturn")]
        public string iMagoCompanyAlreadyMapped(string sDummy) {
            object[] results = this.Invoke("iMagoCompanyAlreadyMapped", new object[] {
                        sDummy});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iMagoCompanyAlreadyMappedAsync(string sDummy) {
            this.iMagoCompanyAlreadyMappedAsync(sDummy, null);
        }
        
        /// <remarks/>
        public void iMagoCompanyAlreadyMappedAsync(string sDummy, object userState) {
            if ((this.iMagoCompanyAlreadyMappedOperationCompleted == null)) {
                this.iMagoCompanyAlreadyMappedOperationCompleted = new System.Threading.SendOrPostCallback(this.OniMagoCompanyAlreadyMappedOperationCompleted);
            }
            this.InvokeAsync("iMagoCompanyAlreadyMapped", new object[] {
                        sDummy}, this.iMagoCompanyAlreadyMappedOperationCompleted, userState);
        }
        
        private void OniMagoCompanyAlreadyMappedOperationCompleted(object arg) {
            if ((this.iMagoCompanyAlreadyMappedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iMagoCompanyAlreadyMappedCompleted(this, new iMagoCompanyAlreadyMappedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iMagoCheckAziAssociationReturn")]
        public string iMagoCheckAziAssociation(string sAziRev, string sAziInf) {
            object[] results = this.Invoke("iMagoCheckAziAssociation", new object[] {
                        sAziRev,
                        sAziInf});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iMagoCheckAziAssociationAsync(string sAziRev, string sAziInf) {
            this.iMagoCheckAziAssociationAsync(sAziRev, sAziInf, null);
        }
        
        /// <remarks/>
        public void iMagoCheckAziAssociationAsync(string sAziRev, string sAziInf, object userState) {
            if ((this.iMagoCheckAziAssociationOperationCompleted == null)) {
                this.iMagoCheckAziAssociationOperationCompleted = new System.Threading.SendOrPostCallback(this.OniMagoCheckAziAssociationOperationCompleted);
            }
            this.InvokeAsync("iMagoCheckAziAssociation", new object[] {
                        sAziRev,
                        sAziInf}, this.iMagoCheckAziAssociationOperationCompleted, userState);
        }
        
        private void OniMagoCheckAziAssociationOperationCompleted(object arg) {
            if ((this.iMagoCheckAziAssociationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iMagoCheckAziAssociationCompleted(this, new iMagoCheckAziAssociationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("checkRevInfinityAlreadyMappedReturn")]
        public string checkRevInfinityAlreadyMapped(string sAziInf) {
            object[] results = this.Invoke("checkRevInfinityAlreadyMapped", new object[] {
                        sAziInf});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkRevInfinityAlreadyMappedAsync(string sAziInf) {
            this.checkRevInfinityAlreadyMappedAsync(sAziInf, null);
        }
        
        /// <remarks/>
        public void checkRevInfinityAlreadyMappedAsync(string sAziInf, object userState) {
            if ((this.checkRevInfinityAlreadyMappedOperationCompleted == null)) {
                this.checkRevInfinityAlreadyMappedOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckRevInfinityAlreadyMappedOperationCompleted);
            }
            this.InvokeAsync("checkRevInfinityAlreadyMapped", new object[] {
                        sAziInf}, this.checkRevInfinityAlreadyMappedOperationCompleted, userState);
        }
        
        private void OncheckRevInfinityAlreadyMappedOperationCompleted(object arg) {
            if ((this.checkRevInfinityAlreadyMappedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkRevInfinityAlreadyMappedCompleted(this, new checkRevInfinityAlreadyMappedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iMagoCheckAziAlreadyMappedReturn")]
        public string iMagoCheckAziAlreadyMapped(string sAziInf) {
            object[] results = this.Invoke("iMagoCheckAziAlreadyMapped", new object[] {
                        sAziInf});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iMagoCheckAziAlreadyMappedAsync(string sAziInf) {
            this.iMagoCheckAziAlreadyMappedAsync(sAziInf, null);
        }
        
        /// <remarks/>
        public void iMagoCheckAziAlreadyMappedAsync(string sAziInf, object userState) {
            if ((this.iMagoCheckAziAlreadyMappedOperationCompleted == null)) {
                this.iMagoCheckAziAlreadyMappedOperationCompleted = new System.Threading.SendOrPostCallback(this.OniMagoCheckAziAlreadyMappedOperationCompleted);
            }
            this.InvokeAsync("iMagoCheckAziAlreadyMapped", new object[] {
                        sAziInf}, this.iMagoCheckAziAlreadyMappedOperationCompleted, userState);
        }
        
        private void OniMagoCheckAziAlreadyMappedOperationCompleted(object arg) {
            if ((this.iMagoCheckAziAlreadyMappedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iMagoCheckAziAlreadyMappedCompleted(this, new iMagoCheckAziAlreadyMappedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iMagoCheckUserAlreadyMappedReturn")]
        public string iMagoCheckUserAlreadyMapped(string sUser, string sMode) {
            object[] results = this.Invoke("iMagoCheckUserAlreadyMapped", new object[] {
                        sUser,
                        sMode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iMagoCheckUserAlreadyMappedAsync(string sUser, string sMode) {
            this.iMagoCheckUserAlreadyMappedAsync(sUser, sMode, null);
        }
        
        /// <remarks/>
        public void iMagoCheckUserAlreadyMappedAsync(string sUser, string sMode, object userState) {
            if ((this.iMagoCheckUserAlreadyMappedOperationCompleted == null)) {
                this.iMagoCheckUserAlreadyMappedOperationCompleted = new System.Threading.SendOrPostCallback(this.OniMagoCheckUserAlreadyMappedOperationCompleted);
            }
            this.InvokeAsync("iMagoCheckUserAlreadyMapped", new object[] {
                        sUser,
                        sMode}, this.iMagoCheckUserAlreadyMappedOperationCompleted, userState);
        }
        
        private void OniMagoCheckUserAlreadyMappedOperationCompleted(object arg) {
            if ((this.iMagoCheckUserAlreadyMappedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iMagoCheckUserAlreadyMappedCompleted(this, new iMagoCheckUserAlreadyMappedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("revInfinityImportPackageReturn")]
        public string revInfinityImportPackage([System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] bPackage) {
            object[] results = this.Invoke("revInfinityImportPackage", new object[] {
                        bPackage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void revInfinityImportPackageAsync(byte[] bPackage) {
            this.revInfinityImportPackageAsync(bPackage, null);
        }
        
        /// <remarks/>
        public void revInfinityImportPackageAsync(byte[] bPackage, object userState) {
            if ((this.revInfinityImportPackageOperationCompleted == null)) {
                this.revInfinityImportPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrevInfinityImportPackageOperationCompleted);
            }
            this.InvokeAsync("revInfinityImportPackage", new object[] {
                        bPackage}, this.revInfinityImportPackageOperationCompleted, userState);
        }
        
        private void OnrevInfinityImportPackageOperationCompleted(object arg) {
            if ((this.revInfinityImportPackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.revInfinityImportPackageCompleted(this, new revInfinityImportPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iMagoSetGadgetPermissionReturn")]
        public string iMagoSetGadgetPermission(string sDummy) {
            object[] results = this.Invoke("iMagoSetGadgetPermission", new object[] {
                        sDummy});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iMagoSetGadgetPermissionAsync(string sDummy) {
            this.iMagoSetGadgetPermissionAsync(sDummy, null);
        }
        
        /// <remarks/>
        public void iMagoSetGadgetPermissionAsync(string sDummy, object userState) {
            if ((this.iMagoSetGadgetPermissionOperationCompleted == null)) {
                this.iMagoSetGadgetPermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OniMagoSetGadgetPermissionOperationCompleted);
            }
            this.InvokeAsync("iMagoSetGadgetPermission", new object[] {
                        sDummy}, this.iMagoSetGadgetPermissionOperationCompleted, userState);
        }
        
        private void OniMagoSetGadgetPermissionOperationCompleted(object arg) {
            if ((this.iMagoSetGadgetPermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iMagoSetGadgetPermissionCompleted(this, new iMagoSetGadgetPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("connectRevInfinityWithTokenReturn")]
        public string connectRevInfinityWithToken(string sToken) {
            object[] results = this.Invoke("connectRevInfinityWithToken", new object[] {
                        sToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void connectRevInfinityWithTokenAsync(string sToken) {
            this.connectRevInfinityWithTokenAsync(sToken, null);
        }
        
        /// <remarks/>
        public void connectRevInfinityWithTokenAsync(string sToken, object userState) {
            if ((this.connectRevInfinityWithTokenOperationCompleted == null)) {
                this.connectRevInfinityWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconnectRevInfinityWithTokenOperationCompleted);
            }
            this.InvokeAsync("connectRevInfinityWithToken", new object[] {
                        sToken}, this.connectRevInfinityWithTokenOperationCompleted, userState);
        }
        
        private void OnconnectRevInfinityWithTokenOperationCompleted(object arg) {
            if ((this.connectRevInfinityWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.connectRevInfinityWithTokenCompleted(this, new connectRevInfinityWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iRevolutionConnectWithTokenReturn")]
        public string iRevolutionConnectWithToken(string sToken) {
            object[] results = this.Invoke("iRevolutionConnectWithToken", new object[] {
                        sToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iRevolutionConnectWithTokenAsync(string sToken) {
            this.iRevolutionConnectWithTokenAsync(sToken, null);
        }
        
        /// <remarks/>
        public void iRevolutionConnectWithTokenAsync(string sToken, object userState) {
            if ((this.iRevolutionConnectWithTokenOperationCompleted == null)) {
                this.iRevolutionConnectWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OniRevolutionConnectWithTokenOperationCompleted);
            }
            this.InvokeAsync("iRevolutionConnectWithToken", new object[] {
                        sToken}, this.iRevolutionConnectWithTokenOperationCompleted, userState);
        }
        
        private void OniRevolutionConnectWithTokenOperationCompleted(object arg) {
            if ((this.iRevolutionConnectWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iRevolutionConnectWithTokenCompleted(this, new iRevolutionConnectWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("SetConvergencyCriteriaReturn")]
        public string SetConvergencyCriteria(string sXmlCriteria) {
            object[] results = this.Invoke("SetConvergencyCriteria", new object[] {
                        sXmlCriteria});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetConvergencyCriteriaAsync(string sXmlCriteria) {
            this.SetConvergencyCriteriaAsync(sXmlCriteria, null);
        }
        
        /// <remarks/>
        public void SetConvergencyCriteriaAsync(string sXmlCriteria, object userState) {
            if ((this.SetConvergencyCriteriaOperationCompleted == null)) {
                this.SetConvergencyCriteriaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetConvergencyCriteriaOperationCompleted);
            }
            this.InvokeAsync("SetConvergencyCriteria", new object[] {
                        sXmlCriteria}, this.SetConvergencyCriteriaOperationCompleted, userState);
        }
        
        private void OnSetConvergencyCriteriaOperationCompleted(object arg) {
            if ((this.SetConvergencyCriteriaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetConvergencyCriteriaCompleted(this, new SetConvergencyCriteriaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetConvergencyCriteriaReturn")]
        public string GetConvergencyCriteria(string sActionName) {
            object[] results = this.Invoke("GetConvergencyCriteria", new object[] {
                        sActionName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetConvergencyCriteriaAsync(string sActionName) {
            this.GetConvergencyCriteriaAsync(sActionName, null);
        }
        
        /// <remarks/>
        public void GetConvergencyCriteriaAsync(string sActionName, object userState) {
            if ((this.GetConvergencyCriteriaOperationCompleted == null)) {
                this.GetConvergencyCriteriaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConvergencyCriteriaOperationCompleted);
            }
            this.InvokeAsync("GetConvergencyCriteria", new object[] {
                        sActionName}, this.GetConvergencyCriteriaOperationCompleted, userState);
        }
        
        private void OnGetConvergencyCriteriaOperationCompleted(object arg) {
            if ((this.GetConvergencyCriteriaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConvergencyCriteriaCompleted(this, new GetConvergencyCriteriaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("doProcessReturn")]
        public string doProcess(string sContextId, string sActionList, string sAtomicLevel, string sOwner) {
            object[] results = this.Invoke("doProcess", new object[] {
                        sContextId,
                        sActionList,
                        sAtomicLevel,
                        sOwner});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void doProcessAsync(string sContextId, string sActionList, string sAtomicLevel, string sOwner) {
            this.doProcessAsync(sContextId, sActionList, sAtomicLevel, sOwner, null);
        }
        
        /// <remarks/>
        public void doProcessAsync(string sContextId, string sActionList, string sAtomicLevel, string sOwner, object userState) {
            if ((this.doProcessOperationCompleted == null)) {
                this.doProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoProcessOperationCompleted);
            }
            this.InvokeAsync("doProcess", new object[] {
                        sContextId,
                        sActionList,
                        sAtomicLevel,
                        sOwner}, this.doProcessOperationCompleted, userState);
        }
        
        private void OndoProcessOperationCompleted(object arg) {
            if ((this.doProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doProcessCompleted(this, new doProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("executeSyncroReturn")]
        public string executeSyncro(string sContextId, string sOwner, string sAction, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] bXml, string sAtomicLevel) {
            object[] results = this.Invoke("executeSyncro", new object[] {
                        sContextId,
                        sOwner,
                        sAction,
                        bXml,
                        sAtomicLevel});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void executeSyncroAsync(string sContextId, string sOwner, string sAction, byte[] bXml, string sAtomicLevel) {
            this.executeSyncroAsync(sContextId, sOwner, sAction, bXml, sAtomicLevel, null);
        }
        
        /// <remarks/>
        public void executeSyncroAsync(string sContextId, string sOwner, string sAction, byte[] bXml, string sAtomicLevel, object userState) {
            if ((this.executeSyncroOperationCompleted == null)) {
                this.executeSyncroOperationCompleted = new System.Threading.SendOrPostCallback(this.OnexecuteSyncroOperationCompleted);
            }
            this.InvokeAsync("executeSyncro", new object[] {
                        sContextId,
                        sOwner,
                        sAction,
                        bXml,
                        sAtomicLevel}, this.executeSyncroOperationCompleted, userState);
        }
        
        private void OnexecuteSyncroOperationCompleted(object arg) {
            if ((this.executeSyncroCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.executeSyncroCompleted(this, new executeSyncroCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("initXmlReturn")]
        public string initXml(string sContextId, string sAction) {
            object[] results = this.Invoke("initXml", new object[] {
                        sContextId,
                        sAction});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void initXmlAsync(string sContextId, string sAction) {
            this.initXmlAsync(sContextId, sAction, null);
        }
        
        /// <remarks/>
        public void initXmlAsync(string sContextId, string sAction, object userState) {
            if ((this.initXmlOperationCompleted == null)) {
                this.initXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OninitXmlOperationCompleted);
            }
            this.InvokeAsync("initXml", new object[] {
                        sContextId,
                        sAction}, this.initXmlOperationCompleted, userState);
        }
        
        private void OninitXmlOperationCompleted(object arg) {
            if ((this.initXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.initXmlCompleted(this, new initXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("closeXmlReturn")]
        public string closeXml(string sContextId, string sAction) {
            object[] results = this.Invoke("closeXml", new object[] {
                        sContextId,
                        sAction});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void closeXmlAsync(string sContextId, string sAction) {
            this.closeXmlAsync(sContextId, sAction, null);
        }
        
        /// <remarks/>
        public void closeXmlAsync(string sContextId, string sAction, object userState) {
            if ((this.closeXmlOperationCompleted == null)) {
                this.closeXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OncloseXmlOperationCompleted);
            }
            this.InvokeAsync("closeXml", new object[] {
                        sContextId,
                        sAction}, this.closeXmlOperationCompleted, userState);
        }
        
        private void OncloseXmlOperationCompleted(object arg) {
            if ((this.closeXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.closeXmlCompleted(this, new closeXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("putXmlReturn")]
        public string putXml(string sContextId, string sAction, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] bXml, string sFlags) {
            object[] results = this.Invoke("putXml", new object[] {
                        sContextId,
                        sAction,
                        bXml,
                        sFlags});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void putXmlAsync(string sContextId, string sAction, byte[] bXml, string sFlags) {
            this.putXmlAsync(sContextId, sAction, bXml, sFlags, null);
        }
        
        /// <remarks/>
        public void putXmlAsync(string sContextId, string sAction, byte[] bXml, string sFlags, object userState) {
            if ((this.putXmlOperationCompleted == null)) {
                this.putXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnputXmlOperationCompleted);
            }
            this.InvokeAsync("putXml", new object[] {
                        sContextId,
                        sAction,
                        bXml,
                        sFlags}, this.putXmlOperationCompleted, userState);
        }
        
        private void OnputXmlOperationCompleted(object arg) {
            if ((this.putXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.putXmlCompleted(this, new putXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("setVrtReturn")]
        public string setVrt(string sContextId, string sBo, string sFields) {
            object[] results = this.Invoke("setVrt", new object[] {
                        sContextId,
                        sBo,
                        sFields});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setVrtAsync(string sContextId, string sBo, string sFields) {
            this.setVrtAsync(sContextId, sBo, sFields, null);
        }
        
        /// <remarks/>
        public void setVrtAsync(string sContextId, string sBo, string sFields, object userState) {
            if ((this.setVrtOperationCompleted == null)) {
                this.setVrtOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetVrtOperationCompleted);
            }
            this.InvokeAsync("setVrt", new object[] {
                        sContextId,
                        sBo,
                        sFields}, this.setVrtOperationCompleted, userState);
        }
        
        private void OnsetVrtOperationCompleted(object arg) {
            if ((this.setVrtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setVrtCompleted(this, new setVrtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("getXmlReturn", DataType="base64Binary")]
        public byte[] getXml(string sContextId, string sProcessId, string sAction, int lFrom, int lTo, string sFlags) {
            object[] results = this.Invoke("getXml", new object[] {
                        sContextId,
                        sProcessId,
                        sAction,
                        lFrom,
                        lTo,
                        sFlags});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getXmlAsync(string sContextId, string sProcessId, string sAction, int lFrom, int lTo, string sFlags) {
            this.getXmlAsync(sContextId, sProcessId, sAction, lFrom, lTo, sFlags, null);
        }
        
        /// <remarks/>
        public void getXmlAsync(string sContextId, string sProcessId, string sAction, int lFrom, int lTo, string sFlags, object userState) {
            if ((this.getXmlOperationCompleted == null)) {
                this.getXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetXmlOperationCompleted);
            }
            this.InvokeAsync("getXml", new object[] {
                        sContextId,
                        sProcessId,
                        sAction,
                        lFrom,
                        lTo,
                        sFlags}, this.getXmlOperationCompleted, userState);
        }
        
        private void OngetXmlOperationCompleted(object arg) {
            if ((this.getXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getXmlCompleted(this, new getXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("getXmlLengthReturn")]
        public string getXmlLength(string sContextId, string sProcessId, string sAction) {
            object[] results = this.Invoke("getXmlLength", new object[] {
                        sContextId,
                        sProcessId,
                        sAction});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getXmlLengthAsync(string sContextId, string sProcessId, string sAction) {
            this.getXmlLengthAsync(sContextId, sProcessId, sAction, null);
        }
        
        /// <remarks/>
        public void getXmlLengthAsync(string sContextId, string sProcessId, string sAction, object userState) {
            if ((this.getXmlLengthOperationCompleted == null)) {
                this.getXmlLengthOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetXmlLengthOperationCompleted);
            }
            this.InvokeAsync("getXmlLength", new object[] {
                        sContextId,
                        sProcessId,
                        sAction}, this.getXmlLengthOperationCompleted, userState);
        }
        
        private void OngetXmlLengthOperationCompleted(object arg) {
            if ((this.getXmlLengthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getXmlLengthCompleted(this, new getXmlLengthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("checkUserPwdReturn")]
        public string checkUserPwd(string sUser, string sPwd) {
            object[] results = this.Invoke("checkUserPwd", new object[] {
                        sUser,
                        sPwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkUserPwdAsync(string sUser, string sPwd) {
            this.checkUserPwdAsync(sUser, sPwd, null);
        }
        
        /// <remarks/>
        public void checkUserPwdAsync(string sUser, string sPwd, object userState) {
            if ((this.checkUserPwdOperationCompleted == null)) {
                this.checkUserPwdOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckUserPwdOperationCompleted);
            }
            this.InvokeAsync("checkUserPwd", new object[] {
                        sUser,
                        sPwd}, this.checkUserPwdOperationCompleted, userState);
        }
        
        private void OncheckUserPwdOperationCompleted(object arg) {
            if ((this.checkUserPwdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkUserPwdCompleted(this, new checkUserPwdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("checkAppRegReturn")]
        public string checkAppReg(string sAppReg) {
            object[] results = this.Invoke("checkAppReg", new object[] {
                        sAppReg});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkAppRegAsync(string sAppReg) {
            this.checkAppRegAsync(sAppReg, null);
        }
        
        /// <remarks/>
        public void checkAppRegAsync(string sAppReg, object userState) {
            if ((this.checkAppRegOperationCompleted == null)) {
                this.checkAppRegOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckAppRegOperationCompleted);
            }
            this.InvokeAsync("checkAppReg", new object[] {
                        sAppReg}, this.checkAppRegOperationCompleted, userState);
        }
        
        private void OncheckAppRegOperationCompleted(object arg) {
            if ((this.checkAppRegCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkAppRegCompleted(this, new checkAppRegCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("getAllAppRegReturn")]
        public string getAllAppReg(string sDummy) {
            object[] results = this.Invoke("getAllAppReg", new object[] {
                        sDummy});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAllAppRegAsync(string sDummy) {
            this.getAllAppRegAsync(sDummy, null);
        }
        
        /// <remarks/>
        public void getAllAppRegAsync(string sDummy, object userState) {
            if ((this.getAllAppRegOperationCompleted == null)) {
                this.getAllAppRegOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllAppRegOperationCompleted);
            }
            this.InvokeAsync("getAllAppReg", new object[] {
                        sDummy}, this.getAllAppRegOperationCompleted, userState);
        }
        
        private void OngetAllAppRegOperationCompleted(object arg) {
            if ((this.getAllAppRegCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllAppRegCompleted(this, new getAllAppRegCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("getXsdReturn", DataType="base64Binary")]
        public byte[] getXsd(string sAppReg, string sAction) {
            object[] results = this.Invoke("getXsd", new object[] {
                        sAppReg,
                        sAction});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getXsdAsync(string sAppReg, string sAction) {
            this.getXsdAsync(sAppReg, sAction, null);
        }
        
        /// <remarks/>
        public void getXsdAsync(string sAppReg, string sAction, object userState) {
            if ((this.getXsdOperationCompleted == null)) {
                this.getXsdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetXsdOperationCompleted);
            }
            this.InvokeAsync("getXsd", new object[] {
                        sAppReg,
                        sAction}, this.getXsdOperationCompleted, userState);
        }
        
        private void OngetXsdOperationCompleted(object arg) {
            if ((this.getXsdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getXsdCompleted(this, new getXsdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("getXsdByNameReturn", DataType="base64Binary")]
        public byte[] getXsdByName(string sAppReg, string sName) {
            object[] results = this.Invoke("getXsdByName", new object[] {
                        sAppReg,
                        sName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getXsdByNameAsync(string sAppReg, string sName) {
            this.getXsdByNameAsync(sAppReg, sName, null);
        }
        
        /// <remarks/>
        public void getXsdByNameAsync(string sAppReg, string sName, object userState) {
            if ((this.getXsdByNameOperationCompleted == null)) {
                this.getXsdByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetXsdByNameOperationCompleted);
            }
            this.InvokeAsync("getXsdByName", new object[] {
                        sAppReg,
                        sName}, this.getXsdByNameOperationCompleted, userState);
        }
        
        private void OngetXsdByNameOperationCompleted(object arg) {
            if ((this.getXsdByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getXsdByNameCompleted(this, new getXsdByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("sendMailReturn")]
        public string sendMail(string sContextId, int iTypeSearch, string sMailSender, string sText, string sSubject, string sMailTo, string sMailCC, string sMailCCN, int iIsHtml, int iSaveMail, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] bAttachments) {
            object[] results = this.Invoke("sendMail", new object[] {
                        sContextId,
                        iTypeSearch,
                        sMailSender,
                        sText,
                        sSubject,
                        sMailTo,
                        sMailCC,
                        sMailCCN,
                        iIsHtml,
                        iSaveMail,
                        bAttachments});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendMailAsync(string sContextId, int iTypeSearch, string sMailSender, string sText, string sSubject, string sMailTo, string sMailCC, string sMailCCN, int iIsHtml, int iSaveMail, byte[] bAttachments) {
            this.sendMailAsync(sContextId, iTypeSearch, sMailSender, sText, sSubject, sMailTo, sMailCC, sMailCCN, iIsHtml, iSaveMail, bAttachments, null);
        }
        
        /// <remarks/>
        public void sendMailAsync(string sContextId, int iTypeSearch, string sMailSender, string sText, string sSubject, string sMailTo, string sMailCC, string sMailCCN, int iIsHtml, int iSaveMail, byte[] bAttachments, object userState) {
            if ((this.sendMailOperationCompleted == null)) {
                this.sendMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendMailOperationCompleted);
            }
            this.InvokeAsync("sendMail", new object[] {
                        sContextId,
                        iTypeSearch,
                        sMailSender,
                        sText,
                        sSubject,
                        sMailTo,
                        sMailCC,
                        sMailCCN,
                        iIsHtml,
                        iSaveMail,
                        bAttachments}, this.sendMailOperationCompleted, userState);
        }
        
        private void OnsendMailOperationCompleted(object arg) {
            if ((this.sendMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendMailCompleted(this, new sendMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("commitEntityReturn")]
        public string commitEntity(string sContextId, string sProcessId, string sAction, string sOwner, string sXmlCommit) {
            object[] results = this.Invoke("commitEntity", new object[] {
                        sContextId,
                        sProcessId,
                        sAction,
                        sOwner,
                        sXmlCommit});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void commitEntityAsync(string sContextId, string sProcessId, string sAction, string sOwner, string sXmlCommit) {
            this.commitEntityAsync(sContextId, sProcessId, sAction, sOwner, sXmlCommit, null);
        }
        
        /// <remarks/>
        public void commitEntityAsync(string sContextId, string sProcessId, string sAction, string sOwner, string sXmlCommit, object userState) {
            if ((this.commitEntityOperationCompleted == null)) {
                this.commitEntityOperationCompleted = new System.Threading.SendOrPostCallback(this.OncommitEntityOperationCompleted);
            }
            this.InvokeAsync("commitEntity", new object[] {
                        sContextId,
                        sProcessId,
                        sAction,
                        sOwner,
                        sXmlCommit}, this.commitEntityOperationCompleted, userState);
        }
        
        private void OncommitEntityOperationCompleted(object arg) {
            if ((this.commitEntityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.commitEntityCompleted(this, new commitEntityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("getAllCompanyReturn")]
        public string getAllCompany(string sDummy) {
            object[] results = this.Invoke("getAllCompany", new object[] {
                        sDummy});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAllCompanyAsync(string sDummy) {
            this.getAllCompanyAsync(sDummy, null);
        }
        
        /// <remarks/>
        public void getAllCompanyAsync(string sDummy, object userState) {
            if ((this.getAllCompanyOperationCompleted == null)) {
                this.getAllCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllCompanyOperationCompleted);
            }
            this.InvokeAsync("getAllCompany", new object[] {
                        sDummy}, this.getAllCompanyOperationCompleted, userState);
        }
        
        private void OngetAllCompanyOperationCompleted(object arg) {
            if ((this.getAllCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllCompanyCompleted(this, new getAllCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("getAllUsersReturn")]
        public string getAllUsers(string sDummy) {
            object[] results = this.Invoke("getAllUsers", new object[] {
                        sDummy});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAllUsersAsync(string sDummy) {
            this.getAllUsersAsync(sDummy, null);
        }
        
        /// <remarks/>
        public void getAllUsersAsync(string sDummy, object userState) {
            if ((this.getAllUsersOperationCompleted == null)) {
                this.getAllUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllUsersOperationCompleted);
            }
            this.InvokeAsync("getAllUsers", new object[] {
                        sDummy}, this.getAllUsersOperationCompleted, userState);
        }
        
        private void OngetAllUsersOperationCompleted(object arg) {
            if ((this.getAllUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllUsersCompleted(this, new getAllUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("magoWizardReturn")]
        public string magoWizard(string sAppReg, int iMagoAzi, string sAziInf) {
            object[] results = this.Invoke("magoWizard", new object[] {
                        sAppReg,
                        iMagoAzi,
                        sAziInf});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void magoWizardAsync(string sAppReg, int iMagoAzi, string sAziInf) {
            this.magoWizardAsync(sAppReg, iMagoAzi, sAziInf, null);
        }
        
        /// <remarks/>
        public void magoWizardAsync(string sAppReg, int iMagoAzi, string sAziInf, object userState) {
            if ((this.magoWizardOperationCompleted == null)) {
                this.magoWizardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmagoWizardOperationCompleted);
            }
            this.InvokeAsync("magoWizard", new object[] {
                        sAppReg,
                        iMagoAzi,
                        sAziInf}, this.magoWizardOperationCompleted, userState);
        }
        
        private void OnmagoWizardOperationCompleted(object arg) {
            if ((this.magoWizardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.magoWizardCompleted(this, new magoWizardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iMagoWizardReturn")]
        public string iMagoWizard(string sAppReg, int iMagoAzi, string sAziInf, string sAuthCode) {
            object[] results = this.Invoke("iMagoWizard", new object[] {
                        sAppReg,
                        iMagoAzi,
                        sAziInf,
                        sAuthCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iMagoWizardAsync(string sAppReg, int iMagoAzi, string sAziInf, string sAuthCode) {
            this.iMagoWizardAsync(sAppReg, iMagoAzi, sAziInf, sAuthCode, null);
        }
        
        /// <remarks/>
        public void iMagoWizardAsync(string sAppReg, int iMagoAzi, string sAziInf, string sAuthCode, object userState) {
            if ((this.iMagoWizardOperationCompleted == null)) {
                this.iMagoWizardOperationCompleted = new System.Threading.SendOrPostCallback(this.OniMagoWizardOperationCompleted);
            }
            this.InvokeAsync("iMagoWizard", new object[] {
                        sAppReg,
                        iMagoAzi,
                        sAziInf,
                        sAuthCode}, this.iMagoWizardOperationCompleted, userState);
        }
        
        private void OniMagoWizardOperationCompleted(object arg) {
            if ((this.iMagoWizardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iMagoWizardCompleted(this, new iMagoWizardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("importPackageReturn")]
        public string importPackage([System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] bPackage) {
            object[] results = this.Invoke("importPackage", new object[] {
                        bPackage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void importPackageAsync(byte[] bPackage) {
            this.importPackageAsync(bPackage, null);
        }
        
        /// <remarks/>
        public void importPackageAsync(byte[] bPackage, object userState) {
            if ((this.importPackageOperationCompleted == null)) {
                this.importPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnimportPackageOperationCompleted);
            }
            this.InvokeAsync("importPackage", new object[] {
                        bPackage}, this.importPackageOperationCompleted, userState);
        }
        
        private void OnimportPackageOperationCompleted(object arg) {
            if ((this.importPackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.importPackageCompleted(this, new importPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("getUrlAhrReturn")]
        public string getUrlAhr(string sKeyAccess) {
            object[] results = this.Invoke("getUrlAhr", new object[] {
                        sKeyAccess});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUrlAhrAsync(string sKeyAccess) {
            this.getUrlAhrAsync(sKeyAccess, null);
        }
        
        /// <remarks/>
        public void getUrlAhrAsync(string sKeyAccess, object userState) {
            if ((this.getUrlAhrOperationCompleted == null)) {
                this.getUrlAhrOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUrlAhrOperationCompleted);
            }
            this.InvokeAsync("getUrlAhr", new object[] {
                        sKeyAccess}, this.getUrlAhrOperationCompleted, userState);
        }
        
        private void OngetUrlAhrOperationCompleted(object arg) {
            if ((this.getUrlAhrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUrlAhrCompleted(this, new getUrlAhrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iRevolutionCheckAziAlreadyMappedReturn")]
        public string iRevolutionCheckAziAlreadyMapped(string sAziInf) {
            object[] results = this.Invoke("iRevolutionCheckAziAlreadyMapped", new object[] {
                        sAziInf});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iRevolutionCheckAziAlreadyMappedAsync(string sAziInf) {
            this.iRevolutionCheckAziAlreadyMappedAsync(sAziInf, null);
        }
        
        /// <remarks/>
        public void iRevolutionCheckAziAlreadyMappedAsync(string sAziInf, object userState) {
            if ((this.iRevolutionCheckAziAlreadyMappedOperationCompleted == null)) {
                this.iRevolutionCheckAziAlreadyMappedOperationCompleted = new System.Threading.SendOrPostCallback(this.OniRevolutionCheckAziAlreadyMappedOperationCompleted);
            }
            this.InvokeAsync("iRevolutionCheckAziAlreadyMapped", new object[] {
                        sAziInf}, this.iRevolutionCheckAziAlreadyMappedOperationCompleted, userState);
        }
        
        private void OniRevolutionCheckAziAlreadyMappedOperationCompleted(object arg) {
            if ((this.iRevolutionCheckAziAlreadyMappedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iRevolutionCheckAziAlreadyMappedCompleted(this, new iRevolutionCheckAziAlreadyMappedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iRevolutionCheckAziAssociationReturn")]
        public string iRevolutionCheckAziAssociation(string sAziRev, string sAziInf) {
            object[] results = this.Invoke("iRevolutionCheckAziAssociation", new object[] {
                        sAziRev,
                        sAziInf});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iRevolutionCheckAziAssociationAsync(string sAziRev, string sAziInf) {
            this.iRevolutionCheckAziAssociationAsync(sAziRev, sAziInf, null);
        }
        
        /// <remarks/>
        public void iRevolutionCheckAziAssociationAsync(string sAziRev, string sAziInf, object userState) {
            if ((this.iRevolutionCheckAziAssociationOperationCompleted == null)) {
                this.iRevolutionCheckAziAssociationOperationCompleted = new System.Threading.SendOrPostCallback(this.OniRevolutionCheckAziAssociationOperationCompleted);
            }
            this.InvokeAsync("iRevolutionCheckAziAssociation", new object[] {
                        sAziRev,
                        sAziInf}, this.iRevolutionCheckAziAssociationOperationCompleted, userState);
        }
        
        private void OniRevolutionCheckAziAssociationOperationCompleted(object arg) {
            if ((this.iRevolutionCheckAziAssociationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iRevolutionCheckAziAssociationCompleted(this, new iRevolutionCheckAziAssociationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iRevolutionCompanyAlreadyMappedReturn")]
        public string iRevolutionCompanyAlreadyMapped(string sDummy) {
            object[] results = this.Invoke("iRevolutionCompanyAlreadyMapped", new object[] {
                        sDummy});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iRevolutionCompanyAlreadyMappedAsync(string sDummy) {
            this.iRevolutionCompanyAlreadyMappedAsync(sDummy, null);
        }
        
        /// <remarks/>
        public void iRevolutionCompanyAlreadyMappedAsync(string sDummy, object userState) {
            if ((this.iRevolutionCompanyAlreadyMappedOperationCompleted == null)) {
                this.iRevolutionCompanyAlreadyMappedOperationCompleted = new System.Threading.SendOrPostCallback(this.OniRevolutionCompanyAlreadyMappedOperationCompleted);
            }
            this.InvokeAsync("iRevolutionCompanyAlreadyMapped", new object[] {
                        sDummy}, this.iRevolutionCompanyAlreadyMappedOperationCompleted, userState);
        }
        
        private void OniRevolutionCompanyAlreadyMappedOperationCompleted(object arg) {
            if ((this.iRevolutionCompanyAlreadyMappedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iRevolutionCompanyAlreadyMappedCompleted(this, new iRevolutionCompanyAlreadyMappedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("checkRevInfinityUserAlreadyMappedReturn")]
        public string checkRevInfinityUserAlreadyMapped(string sUser, string sMode) {
            object[] results = this.Invoke("checkRevInfinityUserAlreadyMapped", new object[] {
                        sUser,
                        sMode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkRevInfinityUserAlreadyMappedAsync(string sUser, string sMode) {
            this.checkRevInfinityUserAlreadyMappedAsync(sUser, sMode, null);
        }
        
        /// <remarks/>
        public void checkRevInfinityUserAlreadyMappedAsync(string sUser, string sMode, object userState) {
            if ((this.checkRevInfinityUserAlreadyMappedOperationCompleted == null)) {
                this.checkRevInfinityUserAlreadyMappedOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckRevInfinityUserAlreadyMappedOperationCompleted);
            }
            this.InvokeAsync("checkRevInfinityUserAlreadyMapped", new object[] {
                        sUser,
                        sMode}, this.checkRevInfinityUserAlreadyMappedOperationCompleted, userState);
        }
        
        private void OncheckRevInfinityUserAlreadyMappedOperationCompleted(object arg) {
            if ((this.checkRevInfinityUserAlreadyMappedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkRevInfinityUserAlreadyMappedCompleted(this, new checkRevInfinityUserAlreadyMappedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iRevolutionCheckUserAlreadyMappedReturn")]
        public string iRevolutionCheckUserAlreadyMapped(string sUser, string sMode) {
            object[] results = this.Invoke("iRevolutionCheckUserAlreadyMapped", new object[] {
                        sUser,
                        sMode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iRevolutionCheckUserAlreadyMappedAsync(string sUser, string sMode) {
            this.iRevolutionCheckUserAlreadyMappedAsync(sUser, sMode, null);
        }
        
        /// <remarks/>
        public void iRevolutionCheckUserAlreadyMappedAsync(string sUser, string sMode, object userState) {
            if ((this.iRevolutionCheckUserAlreadyMappedOperationCompleted == null)) {
                this.iRevolutionCheckUserAlreadyMappedOperationCompleted = new System.Threading.SendOrPostCallback(this.OniRevolutionCheckUserAlreadyMappedOperationCompleted);
            }
            this.InvokeAsync("iRevolutionCheckUserAlreadyMapped", new object[] {
                        sUser,
                        sMode}, this.iRevolutionCheckUserAlreadyMappedOperationCompleted, userState);
        }
        
        private void OniRevolutionCheckUserAlreadyMappedOperationCompleted(object arg) {
            if ((this.iRevolutionCheckUserAlreadyMappedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iRevolutionCheckUserAlreadyMappedCompleted(this, new iRevolutionCheckUserAlreadyMappedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iRevolutionSetGadgetPermissionReturn")]
        public string iRevolutionSetGadgetPermission(string sDummy) {
            object[] results = this.Invoke("iRevolutionSetGadgetPermission", new object[] {
                        sDummy});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iRevolutionSetGadgetPermissionAsync(string sDummy) {
            this.iRevolutionSetGadgetPermissionAsync(sDummy, null);
        }
        
        /// <remarks/>
        public void iRevolutionSetGadgetPermissionAsync(string sDummy, object userState) {
            if ((this.iRevolutionSetGadgetPermissionOperationCompleted == null)) {
                this.iRevolutionSetGadgetPermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OniRevolutionSetGadgetPermissionOperationCompleted);
            }
            this.InvokeAsync("iRevolutionSetGadgetPermission", new object[] {
                        sDummy}, this.iRevolutionSetGadgetPermissionOperationCompleted, userState);
        }
        
        private void OniRevolutionSetGadgetPermissionOperationCompleted(object arg) {
            if ((this.iRevolutionSetGadgetPermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iRevolutionSetGadgetPermissionCompleted(this, new iRevolutionSetGadgetPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("connectWithInstanceRevInfinityReturn")]
        public string connectWithInstanceRevInfinity(string sUser, string sPwd, string sAppreg, string sCompanyId, string sInstanceId) {
            object[] results = this.Invoke("connectWithInstanceRevInfinity", new object[] {
                        sUser,
                        sPwd,
                        sAppreg,
                        sCompanyId,
                        sInstanceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void connectWithInstanceRevInfinityAsync(string sUser, string sPwd, string sAppreg, string sCompanyId, string sInstanceId) {
            this.connectWithInstanceRevInfinityAsync(sUser, sPwd, sAppreg, sCompanyId, sInstanceId, null);
        }
        
        /// <remarks/>
        public void connectWithInstanceRevInfinityAsync(string sUser, string sPwd, string sAppreg, string sCompanyId, string sInstanceId, object userState) {
            if ((this.connectWithInstanceRevInfinityOperationCompleted == null)) {
                this.connectWithInstanceRevInfinityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconnectWithInstanceRevInfinityOperationCompleted);
            }
            this.InvokeAsync("connectWithInstanceRevInfinity", new object[] {
                        sUser,
                        sPwd,
                        sAppreg,
                        sCompanyId,
                        sInstanceId}, this.connectWithInstanceRevInfinityOperationCompleted, userState);
        }
        
        private void OnconnectWithInstanceRevInfinityOperationCompleted(object arg) {
            if ((this.connectWithInstanceRevInfinityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.connectWithInstanceRevInfinityCompleted(this, new connectWithInstanceRevInfinityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iRevolutionConnectWithInstanceReturn")]
        public string iRevolutionConnectWithInstance(string sUser, string sPwd, string sAppreg, string sCompanyId, string sInstanceId) {
            object[] results = this.Invoke("iRevolutionConnectWithInstance", new object[] {
                        sUser,
                        sPwd,
                        sAppreg,
                        sCompanyId,
                        sInstanceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iRevolutionConnectWithInstanceAsync(string sUser, string sPwd, string sAppreg, string sCompanyId, string sInstanceId) {
            this.iRevolutionConnectWithInstanceAsync(sUser, sPwd, sAppreg, sCompanyId, sInstanceId, null);
        }
        
        /// <remarks/>
        public void iRevolutionConnectWithInstanceAsync(string sUser, string sPwd, string sAppreg, string sCompanyId, string sInstanceId, object userState) {
            if ((this.iRevolutionConnectWithInstanceOperationCompleted == null)) {
                this.iRevolutionConnectWithInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OniRevolutionConnectWithInstanceOperationCompleted);
            }
            this.InvokeAsync("iRevolutionConnectWithInstance", new object[] {
                        sUser,
                        sPwd,
                        sAppreg,
                        sCompanyId,
                        sInstanceId}, this.iRevolutionConnectWithInstanceOperationCompleted, userState);
        }
        
        private void OniRevolutionConnectWithInstanceOperationCompleted(object arg) {
            if ((this.iRevolutionConnectWithInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iRevolutionConnectWithInstanceCompleted(this, new iRevolutionConnectWithInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("putXmlWithRandomReturn")]
        public string putXmlWithRandom(string sContextId, string sRandomId, string sAction, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] bXml, string sFlags) {
            object[] results = this.Invoke("putXmlWithRandom", new object[] {
                        sContextId,
                        sRandomId,
                        sAction,
                        bXml,
                        sFlags});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void putXmlWithRandomAsync(string sContextId, string sRandomId, string sAction, byte[] bXml, string sFlags) {
            this.putXmlWithRandomAsync(sContextId, sRandomId, sAction, bXml, sFlags, null);
        }
        
        /// <remarks/>
        public void putXmlWithRandomAsync(string sContextId, string sRandomId, string sAction, byte[] bXml, string sFlags, object userState) {
            if ((this.putXmlWithRandomOperationCompleted == null)) {
                this.putXmlWithRandomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnputXmlWithRandomOperationCompleted);
            }
            this.InvokeAsync("putXmlWithRandom", new object[] {
                        sContextId,
                        sRandomId,
                        sAction,
                        bXml,
                        sFlags}, this.putXmlWithRandomOperationCompleted, userState);
        }
        
        private void OnputXmlWithRandomOperationCompleted(object arg) {
            if ((this.putXmlWithRandomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.putXmlWithRandomCompleted(this, new putXmlWithRandomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("getsGuidImportReturn")]
        public string getsGuidImport() {
            object[] results = this.Invoke("getsGuidImport", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getsGuidImportAsync() {
            this.getsGuidImportAsync(null);
        }
        
        /// <remarks/>
        public void getsGuidImportAsync(object userState) {
            if ((this.getsGuidImportOperationCompleted == null)) {
                this.getsGuidImportOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetsGuidImportOperationCompleted);
            }
            this.InvokeAsync("getsGuidImport", new object[0], this.getsGuidImportOperationCompleted, userState);
        }
        
        private void OngetsGuidImportOperationCompleted(object arg) {
            if ((this.getsGuidImportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getsGuidImportCompleted(this, new getsGuidImportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        public void setsGuidImport(string sGuidImport) {
            this.Invoke("setsGuidImport", new object[] {
                        sGuidImport});
        }
        
        /// <remarks/>
        public void setsGuidImportAsync(string sGuidImport) {
            this.setsGuidImportAsync(sGuidImport, null);
        }
        
        /// <remarks/>
        public void setsGuidImportAsync(string sGuidImport, object userState) {
            if ((this.setsGuidImportOperationCompleted == null)) {
                this.setsGuidImportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetsGuidImportOperationCompleted);
            }
            this.InvokeAsync("setsGuidImport", new object[] {
                        sGuidImport}, this.setsGuidImportOperationCompleted, userState);
        }
        
        private void OnsetsGuidImportOperationCompleted(object arg) {
            if ((this.setsGuidImportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setsGuidImportCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("initXmlWithRandomReturn")]
        public string initXmlWithRandom(string sContextId, string sRandomId, string sAction) {
            object[] results = this.Invoke("initXmlWithRandom", new object[] {
                        sContextId,
                        sRandomId,
                        sAction});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void initXmlWithRandomAsync(string sContextId, string sRandomId, string sAction) {
            this.initXmlWithRandomAsync(sContextId, sRandomId, sAction, null);
        }
        
        /// <remarks/>
        public void initXmlWithRandomAsync(string sContextId, string sRandomId, string sAction, object userState) {
            if ((this.initXmlWithRandomOperationCompleted == null)) {
                this.initXmlWithRandomOperationCompleted = new System.Threading.SendOrPostCallback(this.OninitXmlWithRandomOperationCompleted);
            }
            this.InvokeAsync("initXmlWithRandom", new object[] {
                        sContextId,
                        sRandomId,
                        sAction}, this.initXmlWithRandomOperationCompleted, userState);
        }
        
        private void OninitXmlWithRandomOperationCompleted(object arg) {
            if ((this.initXmlWithRandomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.initXmlWithRandomCompleted(this, new initXmlWithRandomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("closeXmlWithRandomReturn")]
        public string closeXmlWithRandom(string sContextId, string sRandomId, string sAction) {
            object[] results = this.Invoke("closeXmlWithRandom", new object[] {
                        sContextId,
                        sRandomId,
                        sAction});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void closeXmlWithRandomAsync(string sContextId, string sRandomId, string sAction) {
            this.closeXmlWithRandomAsync(sContextId, sRandomId, sAction, null);
        }
        
        /// <remarks/>
        public void closeXmlWithRandomAsync(string sContextId, string sRandomId, string sAction, object userState) {
            if ((this.closeXmlWithRandomOperationCompleted == null)) {
                this.closeXmlWithRandomOperationCompleted = new System.Threading.SendOrPostCallback(this.OncloseXmlWithRandomOperationCompleted);
            }
            this.InvokeAsync("closeXmlWithRandom", new object[] {
                        sContextId,
                        sRandomId,
                        sAction}, this.closeXmlWithRandomOperationCompleted, userState);
        }
        
        private void OncloseXmlWithRandomOperationCompleted(object arg) {
            if ((this.closeXmlWithRandomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.closeXmlWithRandomCompleted(this, new closeXmlWithRandomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("getXmlWithRandomReturn", DataType="base64Binary")]
        public byte[] getXmlWithRandom(string sContextId, string sRandomId, string sProcessId, string sAction, int lFrom, int lTo, string sFlags) {
            object[] results = this.Invoke("getXmlWithRandom", new object[] {
                        sContextId,
                        sRandomId,
                        sProcessId,
                        sAction,
                        lFrom,
                        lTo,
                        sFlags});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getXmlWithRandomAsync(string sContextId, string sRandomId, string sProcessId, string sAction, int lFrom, int lTo, string sFlags) {
            this.getXmlWithRandomAsync(sContextId, sRandomId, sProcessId, sAction, lFrom, lTo, sFlags, null);
        }
        
        /// <remarks/>
        public void getXmlWithRandomAsync(string sContextId, string sRandomId, string sProcessId, string sAction, int lFrom, int lTo, string sFlags, object userState) {
            if ((this.getXmlWithRandomOperationCompleted == null)) {
                this.getXmlWithRandomOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetXmlWithRandomOperationCompleted);
            }
            this.InvokeAsync("getXmlWithRandom", new object[] {
                        sContextId,
                        sRandomId,
                        sProcessId,
                        sAction,
                        lFrom,
                        lTo,
                        sFlags}, this.getXmlWithRandomOperationCompleted, userState);
        }
        
        private void OngetXmlWithRandomOperationCompleted(object arg) {
            if ((this.getXmlWithRandomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getXmlWithRandomCompleted(this, new getXmlWithRandomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("connectWithInstanceReturn")]
        public string connectWithInstance(string sUser, string sPwd, string sCompanyId, string sInstanceId) {
            object[] results = this.Invoke("connectWithInstance", new object[] {
                        sUser,
                        sPwd,
                        sCompanyId,
                        sInstanceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void connectWithInstanceAsync(string sUser, string sPwd, string sCompanyId, string sInstanceId) {
            this.connectWithInstanceAsync(sUser, sPwd, sCompanyId, sInstanceId, null);
        }
        
        /// <remarks/>
        public void connectWithInstanceAsync(string sUser, string sPwd, string sCompanyId, string sInstanceId, object userState) {
            if ((this.connectWithInstanceOperationCompleted == null)) {
                this.connectWithInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconnectWithInstanceOperationCompleted);
            }
            this.InvokeAsync("connectWithInstance", new object[] {
                        sUser,
                        sPwd,
                        sCompanyId,
                        sInstanceId}, this.connectWithInstanceOperationCompleted, userState);
        }
        
        private void OnconnectWithInstanceOperationCompleted(object arg) {
            if ((this.connectWithInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.connectWithInstanceCompleted(this, new connectWithInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("doProcessSyncroReturn")]
        public string doProcessSyncro(string sContextId, string sActionList, string sAtomicLevel, string sOwner) {
            object[] results = this.Invoke("doProcessSyncro", new object[] {
                        sContextId,
                        sActionList,
                        sAtomicLevel,
                        sOwner});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void doProcessSyncroAsync(string sContextId, string sActionList, string sAtomicLevel, string sOwner) {
            this.doProcessSyncroAsync(sContextId, sActionList, sAtomicLevel, sOwner, null);
        }
        
        /// <remarks/>
        public void doProcessSyncroAsync(string sContextId, string sActionList, string sAtomicLevel, string sOwner, object userState) {
            if ((this.doProcessSyncroOperationCompleted == null)) {
                this.doProcessSyncroOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoProcessSyncroOperationCompleted);
            }
            this.InvokeAsync("doProcessSyncro", new object[] {
                        sContextId,
                        sActionList,
                        sAtomicLevel,
                        sOwner}, this.doProcessSyncroOperationCompleted, userState);
        }
        
        private void OndoProcessSyncroOperationCompleted(object arg) {
            if ((this.doProcessSyncroCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doProcessSyncroCompleted(this, new doProcessSyncroCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("doProcessWithRandomReturn")]
        public string doProcessWithRandom(string sContextId, string sRandomId, string sActionList, string sAtomicLevel, string sOwner) {
            object[] results = this.Invoke("doProcessWithRandom", new object[] {
                        sContextId,
                        sRandomId,
                        sActionList,
                        sAtomicLevel,
                        sOwner});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void doProcessWithRandomAsync(string sContextId, string sRandomId, string sActionList, string sAtomicLevel, string sOwner) {
            this.doProcessWithRandomAsync(sContextId, sRandomId, sActionList, sAtomicLevel, sOwner, null);
        }
        
        /// <remarks/>
        public void doProcessWithRandomAsync(string sContextId, string sRandomId, string sActionList, string sAtomicLevel, string sOwner, object userState) {
            if ((this.doProcessWithRandomOperationCompleted == null)) {
                this.doProcessWithRandomOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoProcessWithRandomOperationCompleted);
            }
            this.InvokeAsync("doProcessWithRandom", new object[] {
                        sContextId,
                        sRandomId,
                        sActionList,
                        sAtomicLevel,
                        sOwner}, this.doProcessWithRandomOperationCompleted, userState);
        }
        
        private void OndoProcessWithRandomOperationCompleted(object arg) {
            if ((this.doProcessWithRandomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doProcessWithRandomCompleted(this, new doProcessWithRandomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("checkDoProcessReturn")]
        public string checkDoProcess(string sContextId, string sProcessId) {
            object[] results = this.Invoke("checkDoProcess", new object[] {
                        sContextId,
                        sProcessId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkDoProcessAsync(string sContextId, string sProcessId) {
            this.checkDoProcessAsync(sContextId, sProcessId, null);
        }
        
        /// <remarks/>
        public void checkDoProcessAsync(string sContextId, string sProcessId, object userState) {
            if ((this.checkDoProcessOperationCompleted == null)) {
                this.checkDoProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckDoProcessOperationCompleted);
            }
            this.InvokeAsync("checkDoProcess", new object[] {
                        sContextId,
                        sProcessId}, this.checkDoProcessOperationCompleted, userState);
        }
        
        private void OncheckDoProcessOperationCompleted(object arg) {
            if ((this.checkDoProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkDoProcessCompleted(this, new checkDoProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("getProcessInfoReturn")]
        public string getProcessInfo(string sContextId, string sProcessId) {
            object[] results = this.Invoke("getProcessInfo", new object[] {
                        sContextId,
                        sProcessId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getProcessInfoAsync(string sContextId, string sProcessId) {
            this.getProcessInfoAsync(sContextId, sProcessId, null);
        }
        
        /// <remarks/>
        public void getProcessInfoAsync(string sContextId, string sProcessId, object userState) {
            if ((this.getProcessInfoOperationCompleted == null)) {
                this.getProcessInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProcessInfoOperationCompleted);
            }
            this.InvokeAsync("getProcessInfo", new object[] {
                        sContextId,
                        sProcessId}, this.getProcessInfoOperationCompleted, userState);
        }
        
        private void OngetProcessInfoOperationCompleted(object arg) {
            if ((this.getProcessInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProcessInfoCompleted(this, new getProcessInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("getProcessModeReturn")]
        public string getProcessMode(string sContextId) {
            object[] results = this.Invoke("getProcessMode", new object[] {
                        sContextId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getProcessModeAsync(string sContextId) {
            this.getProcessModeAsync(sContextId, null);
        }
        
        /// <remarks/>
        public void getProcessModeAsync(string sContextId, object userState) {
            if ((this.getProcessModeOperationCompleted == null)) {
                this.getProcessModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProcessModeOperationCompleted);
            }
            this.InvokeAsync("getProcessMode", new object[] {
                        sContextId}, this.getProcessModeOperationCompleted, userState);
        }
        
        private void OngetProcessModeOperationCompleted(object arg) {
            if ((this.getProcessModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProcessModeCompleted(this, new getProcessModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("getActionWithInstanceReturn")]
        public string getActionWithInstance(string sAppReg, string sInstance) {
            object[] results = this.Invoke("getActionWithInstance", new object[] {
                        sAppReg,
                        sInstance});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getActionWithInstanceAsync(string sAppReg, string sInstance) {
            this.getActionWithInstanceAsync(sAppReg, sInstance, null);
        }
        
        /// <remarks/>
        public void getActionWithInstanceAsync(string sAppReg, string sInstance, object userState) {
            if ((this.getActionWithInstanceOperationCompleted == null)) {
                this.getActionWithInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetActionWithInstanceOperationCompleted);
            }
            this.InvokeAsync("getActionWithInstance", new object[] {
                        sAppReg,
                        sInstance}, this.getActionWithInstanceOperationCompleted, userState);
        }
        
        private void OngetActionWithInstanceOperationCompleted(object arg) {
            if ((this.getActionWithInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getActionWithInstanceCompleted(this, new getActionWithInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("getXsdWithInstanceReturn", DataType="base64Binary")]
        public byte[] getXsdWithInstance(string sAppReg, string sAction, string sInstance) {
            object[] results = this.Invoke("getXsdWithInstance", new object[] {
                        sAppReg,
                        sAction,
                        sInstance});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getXsdWithInstanceAsync(string sAppReg, string sAction, string sInstance) {
            this.getXsdWithInstanceAsync(sAppReg, sAction, sInstance, null);
        }
        
        /// <remarks/>
        public void getXsdWithInstanceAsync(string sAppReg, string sAction, string sInstance, object userState) {
            if ((this.getXsdWithInstanceOperationCompleted == null)) {
                this.getXsdWithInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetXsdWithInstanceOperationCompleted);
            }
            this.InvokeAsync("getXsdWithInstance", new object[] {
                        sAppReg,
                        sAction,
                        sInstance}, this.getXsdWithInstanceOperationCompleted, userState);
        }
        
        private void OngetXsdWithInstanceOperationCompleted(object arg) {
            if ((this.getXsdWithInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getXsdWithInstanceCompleted(this, new getXsdWithInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("uploadMailAttachmentsReturn")]
        public string uploadMailAttachments(string sContextId, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] bAttachments) {
            object[] results = this.Invoke("uploadMailAttachments", new object[] {
                        sContextId,
                        bAttachments});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void uploadMailAttachmentsAsync(string sContextId, byte[] bAttachments) {
            this.uploadMailAttachmentsAsync(sContextId, bAttachments, null);
        }
        
        /// <remarks/>
        public void uploadMailAttachmentsAsync(string sContextId, byte[] bAttachments, object userState) {
            if ((this.uploadMailAttachmentsOperationCompleted == null)) {
                this.uploadMailAttachmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadMailAttachmentsOperationCompleted);
            }
            this.InvokeAsync("uploadMailAttachments", new object[] {
                        sContextId,
                        bAttachments}, this.uploadMailAttachmentsOperationCompleted, userState);
        }
        
        private void OnuploadMailAttachmentsOperationCompleted(object arg) {
            if ((this.uploadMailAttachmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadMailAttachmentsCompleted(this, new uploadMailAttachmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("rollbackEntityReturn")]
        public string rollbackEntity(string sContextId, string sProcessId, string sAction, string sEntityId, string sOwner) {
            object[] results = this.Invoke("rollbackEntity", new object[] {
                        sContextId,
                        sProcessId,
                        sAction,
                        sEntityId,
                        sOwner});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void rollbackEntityAsync(string sContextId, string sProcessId, string sAction, string sEntityId, string sOwner) {
            this.rollbackEntityAsync(sContextId, sProcessId, sAction, sEntityId, sOwner, null);
        }
        
        /// <remarks/>
        public void rollbackEntityAsync(string sContextId, string sProcessId, string sAction, string sEntityId, string sOwner, object userState) {
            if ((this.rollbackEntityOperationCompleted == null)) {
                this.rollbackEntityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrollbackEntityOperationCompleted);
            }
            this.InvokeAsync("rollbackEntity", new object[] {
                        sContextId,
                        sProcessId,
                        sAction,
                        sEntityId,
                        sOwner}, this.rollbackEntityOperationCompleted, userState);
        }
        
        private void OnrollbackEntityOperationCompleted(object arg) {
            if ((this.rollbackEntityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.rollbackEntityCompleted(this, new rollbackEntityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("rollbackActionReturn")]
        public string rollbackAction(string sContextId, string sProcessId, string sAction, string sOwner) {
            object[] results = this.Invoke("rollbackAction", new object[] {
                        sContextId,
                        sProcessId,
                        sAction,
                        sOwner});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void rollbackActionAsync(string sContextId, string sProcessId, string sAction, string sOwner) {
            this.rollbackActionAsync(sContextId, sProcessId, sAction, sOwner, null);
        }
        
        /// <remarks/>
        public void rollbackActionAsync(string sContextId, string sProcessId, string sAction, string sOwner, object userState) {
            if ((this.rollbackActionOperationCompleted == null)) {
                this.rollbackActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrollbackActionOperationCompleted);
            }
            this.InvokeAsync("rollbackAction", new object[] {
                        sContextId,
                        sProcessId,
                        sAction,
                        sOwner}, this.rollbackActionOperationCompleted, userState);
        }
        
        private void OnrollbackActionOperationCompleted(object arg) {
            if ((this.rollbackActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.rollbackActionCompleted(this, new rollbackActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("checkRevInfinityAssReturn")]
        public string checkRevInfinityAss(string sAziRev, string sAziInf) {
            object[] results = this.Invoke("checkRevInfinityAss", new object[] {
                        sAziRev,
                        sAziInf});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkRevInfinityAssAsync(string sAziRev, string sAziInf) {
            this.checkRevInfinityAssAsync(sAziRev, sAziInf, null);
        }
        
        /// <remarks/>
        public void checkRevInfinityAssAsync(string sAziRev, string sAziInf, object userState) {
            if ((this.checkRevInfinityAssOperationCompleted == null)) {
                this.checkRevInfinityAssOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckRevInfinityAssOperationCompleted);
            }
            this.InvokeAsync("checkRevInfinityAss", new object[] {
                        sAziRev,
                        sAziInf}, this.checkRevInfinityAssOperationCompleted, userState);
        }
        
        private void OncheckRevInfinityAssOperationCompleted(object arg) {
            if ((this.checkRevInfinityAssCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkRevInfinityAssCompleted(this, new checkRevInfinityAssCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("revInfinityAssReturn")]
        public string revInfinityAss(string sAziRev, string sAziInf, string sCodeAhr, string sConnDb) {
            object[] results = this.Invoke("revInfinityAss", new object[] {
                        sAziRev,
                        sAziInf,
                        sCodeAhr,
                        sConnDb});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void revInfinityAssAsync(string sAziRev, string sAziInf, string sCodeAhr, string sConnDb) {
            this.revInfinityAssAsync(sAziRev, sAziInf, sCodeAhr, sConnDb, null);
        }
        
        /// <remarks/>
        public void revInfinityAssAsync(string sAziRev, string sAziInf, string sCodeAhr, string sConnDb, object userState) {
            if ((this.revInfinityAssOperationCompleted == null)) {
                this.revInfinityAssOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrevInfinityAssOperationCompleted);
            }
            this.InvokeAsync("revInfinityAss", new object[] {
                        sAziRev,
                        sAziInf,
                        sCodeAhr,
                        sConnDb}, this.revInfinityAssOperationCompleted, userState);
        }
        
        private void OnrevInfinityAssOperationCompleted(object arg) {
            if ((this.revInfinityAssCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.revInfinityAssCompleted(this, new revInfinityAssCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iRevolutionWizardReturn")]
        public string iRevolutionWizard(string sAziRev, string sAziInf, string sCodeAhr, string sConnDb, string sMatricola) {
            object[] results = this.Invoke("iRevolutionWizard", new object[] {
                        sAziRev,
                        sAziInf,
                        sCodeAhr,
                        sConnDb,
                        sMatricola});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iRevolutionWizardAsync(string sAziRev, string sAziInf, string sCodeAhr, string sConnDb, string sMatricola) {
            this.iRevolutionWizardAsync(sAziRev, sAziInf, sCodeAhr, sConnDb, sMatricola, null);
        }
        
        /// <remarks/>
        public void iRevolutionWizardAsync(string sAziRev, string sAziInf, string sCodeAhr, string sConnDb, string sMatricola, object userState) {
            if ((this.iRevolutionWizardOperationCompleted == null)) {
                this.iRevolutionWizardOperationCompleted = new System.Threading.SendOrPostCallback(this.OniRevolutionWizardOperationCompleted);
            }
            this.InvokeAsync("iRevolutionWizard", new object[] {
                        sAziRev,
                        sAziInf,
                        sCodeAhr,
                        sConnDb,
                        sMatricola}, this.iRevolutionWizardOperationCompleted, userState);
        }
        
        private void OniRevolutionWizardOperationCompleted(object arg) {
            if ((this.iRevolutionWizardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iRevolutionWizardCompleted(this, new iRevolutionWizardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iMagoCheckVersionReturn")]
        public string iMagoCheckVersion(string sMagoVersion) {
            object[] results = this.Invoke("iMagoCheckVersion", new object[] {
                        sMagoVersion});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iMagoCheckVersionAsync(string sMagoVersion) {
            this.iMagoCheckVersionAsync(sMagoVersion, null);
        }
        
        /// <remarks/>
        public void iMagoCheckVersionAsync(string sMagoVersion, object userState) {
            if ((this.iMagoCheckVersionOperationCompleted == null)) {
                this.iMagoCheckVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OniMagoCheckVersionOperationCompleted);
            }
            this.InvokeAsync("iMagoCheckVersion", new object[] {
                        sMagoVersion}, this.iMagoCheckVersionOperationCompleted, userState);
        }
        
        private void OniMagoCheckVersionOperationCompleted(object arg) {
            if ((this.iMagoCheckVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iMagoCheckVersionCompleted(this, new iMagoCheckVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("revInfSetGlobalReturn")]
        public string revInfSetGlobal(string sContextId) {
            object[] results = this.Invoke("revInfSetGlobal", new object[] {
                        sContextId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void revInfSetGlobalAsync(string sContextId) {
            this.revInfSetGlobalAsync(sContextId, null);
        }
        
        /// <remarks/>
        public void revInfSetGlobalAsync(string sContextId, object userState) {
            if ((this.revInfSetGlobalOperationCompleted == null)) {
                this.revInfSetGlobalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrevInfSetGlobalOperationCompleted);
            }
            this.InvokeAsync("revInfSetGlobal", new object[] {
                        sContextId}, this.revInfSetGlobalOperationCompleted, userState);
        }
        
        private void OnrevInfSetGlobalOperationCompleted(object arg) {
            if ((this.revInfSetGlobalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.revInfSetGlobalCompleted(this, new revInfSetGlobalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iRevolutionSetGlobalReturn")]
        public string iRevolutionSetGlobal(string sContextId) {
            object[] results = this.Invoke("iRevolutionSetGlobal", new object[] {
                        sContextId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iRevolutionSetGlobalAsync(string sContextId) {
            this.iRevolutionSetGlobalAsync(sContextId, null);
        }
        
        /// <remarks/>
        public void iRevolutionSetGlobalAsync(string sContextId, object userState) {
            if ((this.iRevolutionSetGlobalOperationCompleted == null)) {
                this.iRevolutionSetGlobalOperationCompleted = new System.Threading.SendOrPostCallback(this.OniRevolutionSetGlobalOperationCompleted);
            }
            this.InvokeAsync("iRevolutionSetGlobal", new object[] {
                        sContextId}, this.iRevolutionSetGlobalOperationCompleted, userState);
        }
        
        private void OniRevolutionSetGlobalOperationCompleted(object arg) {
            if ((this.iRevolutionSetGlobalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iRevolutionSetGlobalCompleted(this, new iRevolutionSetGlobalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("magoInfSetGlobalReturn")]
        public string magoInfSetGlobal(string sContextId) {
            object[] results = this.Invoke("magoInfSetGlobal", new object[] {
                        sContextId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void magoInfSetGlobalAsync(string sContextId) {
            this.magoInfSetGlobalAsync(sContextId, null);
        }
        
        /// <remarks/>
        public void magoInfSetGlobalAsync(string sContextId, object userState) {
            if ((this.magoInfSetGlobalOperationCompleted == null)) {
                this.magoInfSetGlobalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmagoInfSetGlobalOperationCompleted);
            }
            this.InvokeAsync("magoInfSetGlobal", new object[] {
                        sContextId}, this.magoInfSetGlobalOperationCompleted, userState);
        }
        
        private void OnmagoInfSetGlobalOperationCompleted(object arg) {
            if ((this.magoInfSetGlobalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.magoInfSetGlobalCompleted(this, new magoInfSetGlobalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iMagoSetGlobalReturn")]
        public string iMagoSetGlobal(string sContextId) {
            object[] results = this.Invoke("iMagoSetGlobal", new object[] {
                        sContextId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iMagoSetGlobalAsync(string sContextId) {
            this.iMagoSetGlobalAsync(sContextId, null);
        }
        
        /// <remarks/>
        public void iMagoSetGlobalAsync(string sContextId, object userState) {
            if ((this.iMagoSetGlobalOperationCompleted == null)) {
                this.iMagoSetGlobalOperationCompleted = new System.Threading.SendOrPostCallback(this.OniMagoSetGlobalOperationCompleted);
            }
            this.InvokeAsync("iMagoSetGlobal", new object[] {
                        sContextId}, this.iMagoSetGlobalOperationCompleted, userState);
        }
        
        private void OniMagoSetGlobalOperationCompleted(object arg) {
            if ((this.iMagoSetGlobalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iMagoSetGlobalCompleted(this, new iMagoSetGlobalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("revInfinityServerEstReturn")]
        public string revInfinityServerEst(string sCodeAhr, string sConnDb) {
            object[] results = this.Invoke("revInfinityServerEst", new object[] {
                        sCodeAhr,
                        sConnDb});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void revInfinityServerEstAsync(string sCodeAhr, string sConnDb) {
            this.revInfinityServerEstAsync(sCodeAhr, sConnDb, null);
        }
        
        /// <remarks/>
        public void revInfinityServerEstAsync(string sCodeAhr, string sConnDb, object userState) {
            if ((this.revInfinityServerEstOperationCompleted == null)) {
                this.revInfinityServerEstOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrevInfinityServerEstOperationCompleted);
            }
            this.InvokeAsync("revInfinityServerEst", new object[] {
                        sCodeAhr,
                        sConnDb}, this.revInfinityServerEstOperationCompleted, userState);
        }
        
        private void OnrevInfinityServerEstOperationCompleted(object arg) {
            if ((this.revInfinityServerEstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.revInfinityServerEstCompleted(this, new revInfinityServerEstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iRevolutionServerEstReturn")]
        public string iRevolutionServerEst(string sCodeAhr, string sConnDb) {
            object[] results = this.Invoke("iRevolutionServerEst", new object[] {
                        sCodeAhr,
                        sConnDb});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iRevolutionServerEstAsync(string sCodeAhr, string sConnDb) {
            this.iRevolutionServerEstAsync(sCodeAhr, sConnDb, null);
        }
        
        /// <remarks/>
        public void iRevolutionServerEstAsync(string sCodeAhr, string sConnDb, object userState) {
            if ((this.iRevolutionServerEstOperationCompleted == null)) {
                this.iRevolutionServerEstOperationCompleted = new System.Threading.SendOrPostCallback(this.OniRevolutionServerEstOperationCompleted);
            }
            this.InvokeAsync("iRevolutionServerEst", new object[] {
                        sCodeAhr,
                        sConnDb}, this.iRevolutionServerEstOperationCompleted, userState);
        }
        
        private void OniRevolutionServerEstOperationCompleted(object arg) {
            if ((this.iRevolutionServerEstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iRevolutionServerEstCompleted(this, new iRevolutionServerEstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iMagoServerEstReturn")]
        public string iMagoServerEst(string sCodeAhr, string sConnDb) {
            object[] results = this.Invoke("iMagoServerEst", new object[] {
                        sCodeAhr,
                        sConnDb});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iMagoServerEstAsync(string sCodeAhr, string sConnDb) {
            this.iMagoServerEstAsync(sCodeAhr, sConnDb, null);
        }
        
        /// <remarks/>
        public void iMagoServerEstAsync(string sCodeAhr, string sConnDb, object userState) {
            if ((this.iMagoServerEstOperationCompleted == null)) {
                this.iMagoServerEstOperationCompleted = new System.Threading.SendOrPostCallback(this.OniMagoServerEstOperationCompleted);
            }
            this.InvokeAsync("iMagoServerEst", new object[] {
                        sCodeAhr,
                        sConnDb}, this.iMagoServerEstOperationCompleted, userState);
        }
        
        private void OniMagoServerEstOperationCompleted(object arg) {
            if ((this.iMagoServerEstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iMagoServerEstCompleted(this, new iMagoServerEstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iRevolutionGetUrlReturn")]
        public string iRevolutionGetUrl(string sKeyAccess) {
            object[] results = this.Invoke("iRevolutionGetUrl", new object[] {
                        sKeyAccess});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iRevolutionGetUrlAsync(string sKeyAccess) {
            this.iRevolutionGetUrlAsync(sKeyAccess, null);
        }
        
        /// <remarks/>
        public void iRevolutionGetUrlAsync(string sKeyAccess, object userState) {
            if ((this.iRevolutionGetUrlOperationCompleted == null)) {
                this.iRevolutionGetUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OniRevolutionGetUrlOperationCompleted);
            }
            this.InvokeAsync("iRevolutionGetUrl", new object[] {
                        sKeyAccess}, this.iRevolutionGetUrlOperationCompleted, userState);
        }
        
        private void OniRevolutionGetUrlOperationCompleted(object arg) {
            if ((this.iRevolutionGetUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iRevolutionGetUrlCompleted(this, new iRevolutionGetUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("checkConnectionDbAhrReturn")]
        public string checkConnectionDbAhr(string sJdbcConnection) {
            object[] results = this.Invoke("checkConnectionDbAhr", new object[] {
                        sJdbcConnection});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkConnectionDbAhrAsync(string sJdbcConnection) {
            this.checkConnectionDbAhrAsync(sJdbcConnection, null);
        }
        
        /// <remarks/>
        public void checkConnectionDbAhrAsync(string sJdbcConnection, object userState) {
            if ((this.checkConnectionDbAhrOperationCompleted == null)) {
                this.checkConnectionDbAhrOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckConnectionDbAhrOperationCompleted);
            }
            this.InvokeAsync("checkConnectionDbAhr", new object[] {
                        sJdbcConnection}, this.checkConnectionDbAhrOperationCompleted, userState);
        }
        
        private void OncheckConnectionDbAhrOperationCompleted(object arg) {
            if ((this.checkConnectionDbAhrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkConnectionDbAhrCompleted(this, new checkConnectionDbAhrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("checkJDBCConnectionReturn")]
        public string checkJDBCConnection(string sJdbcConnection) {
            object[] results = this.Invoke("checkJDBCConnection", new object[] {
                        sJdbcConnection});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkJDBCConnectionAsync(string sJdbcConnection) {
            this.checkJDBCConnectionAsync(sJdbcConnection, null);
        }
        
        /// <remarks/>
        public void checkJDBCConnectionAsync(string sJdbcConnection, object userState) {
            if ((this.checkJDBCConnectionOperationCompleted == null)) {
                this.checkJDBCConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckJDBCConnectionOperationCompleted);
            }
            this.InvokeAsync("checkJDBCConnection", new object[] {
                        sJdbcConnection}, this.checkJDBCConnectionOperationCompleted, userState);
        }
        
        private void OncheckJDBCConnectionOperationCompleted(object arg) {
            if ((this.checkJDBCConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkJDBCConnectionCompleted(this, new checkJDBCConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("connectRevInfinityReturn")]
        public string connectRevInfinity(string sUser, string sPwd, string sAppreg, string sCompanyId) {
            object[] results = this.Invoke("connectRevInfinity", new object[] {
                        sUser,
                        sPwd,
                        sAppreg,
                        sCompanyId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void connectRevInfinityAsync(string sUser, string sPwd, string sAppreg, string sCompanyId) {
            this.connectRevInfinityAsync(sUser, sPwd, sAppreg, sCompanyId, null);
        }
        
        /// <remarks/>
        public void connectRevInfinityAsync(string sUser, string sPwd, string sAppreg, string sCompanyId, object userState) {
            if ((this.connectRevInfinityOperationCompleted == null)) {
                this.connectRevInfinityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconnectRevInfinityOperationCompleted);
            }
            this.InvokeAsync("connectRevInfinity", new object[] {
                        sUser,
                        sPwd,
                        sAppreg,
                        sCompanyId}, this.connectRevInfinityOperationCompleted, userState);
        }
        
        private void OnconnectRevInfinityOperationCompleted(object arg) {
            if ((this.connectRevInfinityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.connectRevInfinityCompleted(this, new connectRevInfinityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iRevolutionConnectReturn")]
        public string iRevolutionConnect(string sUser, string sPwd, string sAppreg, string sCompanyId) {
            object[] results = this.Invoke("iRevolutionConnect", new object[] {
                        sUser,
                        sPwd,
                        sAppreg,
                        sCompanyId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iRevolutionConnectAsync(string sUser, string sPwd, string sAppreg, string sCompanyId) {
            this.iRevolutionConnectAsync(sUser, sPwd, sAppreg, sCompanyId, null);
        }
        
        /// <remarks/>
        public void iRevolutionConnectAsync(string sUser, string sPwd, string sAppreg, string sCompanyId, object userState) {
            if ((this.iRevolutionConnectOperationCompleted == null)) {
                this.iRevolutionConnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OniRevolutionConnectOperationCompleted);
            }
            this.InvokeAsync("iRevolutionConnect", new object[] {
                        sUser,
                        sPwd,
                        sAppreg,
                        sCompanyId}, this.iRevolutionConnectOperationCompleted, userState);
        }
        
        private void OniRevolutionConnectOperationCompleted(object arg) {
            if ((this.iRevolutionConnectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iRevolutionConnectCompleted(this, new iRevolutionConnectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.syncro.infinity.zucchetti.it", ResponseNamespace="http://localhost:8090/iMagoSviluppo/services/InfinitySyncro")]
        [return: System.Xml.Serialization.SoapElementAttribute("iMagoConnectWithTokenReturn")]
        public string iMagoConnectWithToken(string sToken) {
            object[] results = this.Invoke("iMagoConnectWithToken", new object[] {
                        sToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void iMagoConnectWithTokenAsync(string sToken) {
            this.iMagoConnectWithTokenAsync(sToken, null);
        }
        
        /// <remarks/>
        public void iMagoConnectWithTokenAsync(string sToken, object userState) {
            if ((this.iMagoConnectWithTokenOperationCompleted == null)) {
                this.iMagoConnectWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OniMagoConnectWithTokenOperationCompleted);
            }
            this.InvokeAsync("iMagoConnectWithToken", new object[] {
                        sToken}, this.iMagoConnectWithTokenOperationCompleted, userState);
        }
        
        private void OniMagoConnectWithTokenOperationCompleted(object arg) {
            if ((this.iMagoConnectWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.iMagoConnectWithTokenCompleted(this, new iMagoConnectWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void connectCompletedEventHandler(object sender, connectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class connectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal connectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void disconnectCompletedEventHandler(object sender, disconnectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class disconnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal disconnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void pingCompletedEventHandler(object sender, pingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class pingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal pingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void getActionCompletedEventHandler(object sender, getActionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iRevolutionCheckMatricolaCompletedEventHandler(object sender, iRevolutionCheckMatricolaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iRevolutionCheckMatricolaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iRevolutionCheckMatricolaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void getXsdByNameWithInstanceCompletedEventHandler(object sender, getXsdByNameWithInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getXsdByNameWithInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getXsdByNameWithInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void checkUserPwdWithInstanceCompletedEventHandler(object sender, checkUserPwdWithInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkUserPwdWithInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkUserPwdWithInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void checkDoProcessWithRandomCompletedEventHandler(object sender, checkDoProcessWithRandomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkDoProcessWithRandomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkDoProcessWithRandomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void checkAppRegWithInstanceCompletedEventHandler(object sender, checkAppRegWithInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkAppRegWithInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkAppRegWithInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void revCompanyAlreadyMappedCompletedEventHandler(object sender, revCompanyAlreadyMappedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class revCompanyAlreadyMappedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal revCompanyAlreadyMappedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void doProcessSyncroWithRandomCompletedEventHandler(object sender, doProcessSyncroWithRandomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doProcessSyncroWithRandomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doProcessSyncroWithRandomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void getXmlLengthWithRandomCompletedEventHandler(object sender, getXmlLengthWithRandomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getXmlLengthWithRandomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getXmlLengthWithRandomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iMagoCompanyAlreadyMappedCompletedEventHandler(object sender, iMagoCompanyAlreadyMappedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iMagoCompanyAlreadyMappedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iMagoCompanyAlreadyMappedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iMagoCheckAziAssociationCompletedEventHandler(object sender, iMagoCheckAziAssociationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iMagoCheckAziAssociationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iMagoCheckAziAssociationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void checkRevInfinityAlreadyMappedCompletedEventHandler(object sender, checkRevInfinityAlreadyMappedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkRevInfinityAlreadyMappedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkRevInfinityAlreadyMappedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iMagoCheckAziAlreadyMappedCompletedEventHandler(object sender, iMagoCheckAziAlreadyMappedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iMagoCheckAziAlreadyMappedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iMagoCheckAziAlreadyMappedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iMagoCheckUserAlreadyMappedCompletedEventHandler(object sender, iMagoCheckUserAlreadyMappedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iMagoCheckUserAlreadyMappedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iMagoCheckUserAlreadyMappedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void revInfinityImportPackageCompletedEventHandler(object sender, revInfinityImportPackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class revInfinityImportPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal revInfinityImportPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iMagoSetGadgetPermissionCompletedEventHandler(object sender, iMagoSetGadgetPermissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iMagoSetGadgetPermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iMagoSetGadgetPermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void connectRevInfinityWithTokenCompletedEventHandler(object sender, connectRevInfinityWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class connectRevInfinityWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal connectRevInfinityWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iRevolutionConnectWithTokenCompletedEventHandler(object sender, iRevolutionConnectWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iRevolutionConnectWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iRevolutionConnectWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SetConvergencyCriteriaCompletedEventHandler(object sender, SetConvergencyCriteriaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetConvergencyCriteriaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetConvergencyCriteriaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetConvergencyCriteriaCompletedEventHandler(object sender, GetConvergencyCriteriaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConvergencyCriteriaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConvergencyCriteriaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void doProcessCompletedEventHandler(object sender, doProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void executeSyncroCompletedEventHandler(object sender, executeSyncroCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class executeSyncroCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal executeSyncroCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void initXmlCompletedEventHandler(object sender, initXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class initXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal initXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void closeXmlCompletedEventHandler(object sender, closeXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class closeXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal closeXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void putXmlCompletedEventHandler(object sender, putXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class putXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal putXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void setVrtCompletedEventHandler(object sender, setVrtCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setVrtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setVrtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void getXmlCompletedEventHandler(object sender, getXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void getXmlLengthCompletedEventHandler(object sender, getXmlLengthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getXmlLengthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getXmlLengthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void checkUserPwdCompletedEventHandler(object sender, checkUserPwdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkUserPwdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkUserPwdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void checkAppRegCompletedEventHandler(object sender, checkAppRegCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkAppRegCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkAppRegCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void getAllAppRegCompletedEventHandler(object sender, getAllAppRegCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllAppRegCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllAppRegCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void getXsdCompletedEventHandler(object sender, getXsdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getXsdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getXsdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void getXsdByNameCompletedEventHandler(object sender, getXsdByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getXsdByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getXsdByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void sendMailCompletedEventHandler(object sender, sendMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void commitEntityCompletedEventHandler(object sender, commitEntityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class commitEntityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal commitEntityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void getAllCompanyCompletedEventHandler(object sender, getAllCompanyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void getAllUsersCompletedEventHandler(object sender, getAllUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void magoWizardCompletedEventHandler(object sender, magoWizardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class magoWizardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal magoWizardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iMagoWizardCompletedEventHandler(object sender, iMagoWizardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iMagoWizardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iMagoWizardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void importPackageCompletedEventHandler(object sender, importPackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class importPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal importPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void getUrlAhrCompletedEventHandler(object sender, getUrlAhrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUrlAhrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUrlAhrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iRevolutionCheckAziAlreadyMappedCompletedEventHandler(object sender, iRevolutionCheckAziAlreadyMappedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iRevolutionCheckAziAlreadyMappedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iRevolutionCheckAziAlreadyMappedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iRevolutionCheckAziAssociationCompletedEventHandler(object sender, iRevolutionCheckAziAssociationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iRevolutionCheckAziAssociationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iRevolutionCheckAziAssociationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iRevolutionCompanyAlreadyMappedCompletedEventHandler(object sender, iRevolutionCompanyAlreadyMappedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iRevolutionCompanyAlreadyMappedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iRevolutionCompanyAlreadyMappedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void checkRevInfinityUserAlreadyMappedCompletedEventHandler(object sender, checkRevInfinityUserAlreadyMappedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkRevInfinityUserAlreadyMappedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkRevInfinityUserAlreadyMappedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iRevolutionCheckUserAlreadyMappedCompletedEventHandler(object sender, iRevolutionCheckUserAlreadyMappedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iRevolutionCheckUserAlreadyMappedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iRevolutionCheckUserAlreadyMappedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iRevolutionSetGadgetPermissionCompletedEventHandler(object sender, iRevolutionSetGadgetPermissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iRevolutionSetGadgetPermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iRevolutionSetGadgetPermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void connectWithInstanceRevInfinityCompletedEventHandler(object sender, connectWithInstanceRevInfinityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class connectWithInstanceRevInfinityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal connectWithInstanceRevInfinityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iRevolutionConnectWithInstanceCompletedEventHandler(object sender, iRevolutionConnectWithInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iRevolutionConnectWithInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iRevolutionConnectWithInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void putXmlWithRandomCompletedEventHandler(object sender, putXmlWithRandomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class putXmlWithRandomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal putXmlWithRandomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void getsGuidImportCompletedEventHandler(object sender, getsGuidImportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getsGuidImportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getsGuidImportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void setsGuidImportCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void initXmlWithRandomCompletedEventHandler(object sender, initXmlWithRandomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class initXmlWithRandomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal initXmlWithRandomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void closeXmlWithRandomCompletedEventHandler(object sender, closeXmlWithRandomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class closeXmlWithRandomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal closeXmlWithRandomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void getXmlWithRandomCompletedEventHandler(object sender, getXmlWithRandomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getXmlWithRandomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getXmlWithRandomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void connectWithInstanceCompletedEventHandler(object sender, connectWithInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class connectWithInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal connectWithInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void doProcessSyncroCompletedEventHandler(object sender, doProcessSyncroCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doProcessSyncroCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doProcessSyncroCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void doProcessWithRandomCompletedEventHandler(object sender, doProcessWithRandomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doProcessWithRandomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doProcessWithRandomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void checkDoProcessCompletedEventHandler(object sender, checkDoProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkDoProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkDoProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void getProcessInfoCompletedEventHandler(object sender, getProcessInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProcessInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProcessInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void getProcessModeCompletedEventHandler(object sender, getProcessModeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProcessModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProcessModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void getActionWithInstanceCompletedEventHandler(object sender, getActionWithInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getActionWithInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getActionWithInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void getXsdWithInstanceCompletedEventHandler(object sender, getXsdWithInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getXsdWithInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getXsdWithInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void uploadMailAttachmentsCompletedEventHandler(object sender, uploadMailAttachmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadMailAttachmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal uploadMailAttachmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void rollbackEntityCompletedEventHandler(object sender, rollbackEntityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class rollbackEntityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal rollbackEntityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void rollbackActionCompletedEventHandler(object sender, rollbackActionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class rollbackActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal rollbackActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void checkRevInfinityAssCompletedEventHandler(object sender, checkRevInfinityAssCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkRevInfinityAssCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkRevInfinityAssCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void revInfinityAssCompletedEventHandler(object sender, revInfinityAssCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class revInfinityAssCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal revInfinityAssCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iRevolutionWizardCompletedEventHandler(object sender, iRevolutionWizardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iRevolutionWizardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iRevolutionWizardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iMagoCheckVersionCompletedEventHandler(object sender, iMagoCheckVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iMagoCheckVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iMagoCheckVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void revInfSetGlobalCompletedEventHandler(object sender, revInfSetGlobalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class revInfSetGlobalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal revInfSetGlobalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iRevolutionSetGlobalCompletedEventHandler(object sender, iRevolutionSetGlobalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iRevolutionSetGlobalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iRevolutionSetGlobalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void magoInfSetGlobalCompletedEventHandler(object sender, magoInfSetGlobalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class magoInfSetGlobalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal magoInfSetGlobalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iMagoSetGlobalCompletedEventHandler(object sender, iMagoSetGlobalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iMagoSetGlobalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iMagoSetGlobalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void revInfinityServerEstCompletedEventHandler(object sender, revInfinityServerEstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class revInfinityServerEstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal revInfinityServerEstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iRevolutionServerEstCompletedEventHandler(object sender, iRevolutionServerEstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iRevolutionServerEstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iRevolutionServerEstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iMagoServerEstCompletedEventHandler(object sender, iMagoServerEstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iMagoServerEstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iMagoServerEstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iRevolutionGetUrlCompletedEventHandler(object sender, iRevolutionGetUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iRevolutionGetUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iRevolutionGetUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void checkConnectionDbAhrCompletedEventHandler(object sender, checkConnectionDbAhrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkConnectionDbAhrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkConnectionDbAhrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void checkJDBCConnectionCompletedEventHandler(object sender, checkJDBCConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkJDBCConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkJDBCConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void connectRevInfinityCompletedEventHandler(object sender, connectRevInfinityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class connectRevInfinityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal connectRevInfinityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iRevolutionConnectCompletedEventHandler(object sender, iRevolutionConnectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iRevolutionConnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iRevolutionConnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void iMagoConnectWithTokenCompletedEventHandler(object sender, iMagoConnectWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class iMagoConnectWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal iMagoConnectWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591