//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Microarea.TaskBuilderNet.DataSynchroProviders.InfinityDms {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="InfinityDmsInterfaceSoapBinding", Namespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
    public partial class InfinityDmsInterfaceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback setPropertyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPropertyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback connectOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteDirOperationCompleted;
        
        private System.Threading.SendOrPostCallback disconnectOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback createDirOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback copyFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback pingOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFileVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFileReleaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllFileVersionIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllFileVerReleaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentReleaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllDocumentVersionIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllDocumentVerReleaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentVersionByExternalCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentReleaseByExternalCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllDocumentVersionIdByExternalCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllDocumentVerReleaseByExternalCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentByExternalCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFileCrcOperationCompleted;
        
        private System.Threading.SendOrPostCallback DmsEasy_SincroAttributeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DmsEasy_SincroClassOperationCompleted;
        
        private System.Threading.SendOrPostCallback DmsEasy_GetClassOperationCompleted;
        
        private System.Threading.SendOrPostCallback DmsEasy_GetAttribOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNumDocDmsEasyOperationCompleted;
        
        private System.Threading.SendOrPostCallback setFilePermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback setFilePermission1OperationCompleted;
        
        private System.Threading.SendOrPostCallback setFolderPermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFilePermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFolderPermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback createCompanyFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFolderCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRootCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkDmsModuleOperationCompleted;
        
        private System.Threading.SendOrPostCallback getListPersonOperationCompleted;
        
        private System.Threading.SendOrPostCallback assignSubjectToFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback uploadDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback uploadDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUploadResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback getListFileInFolderOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public InfinityDmsInterfaceService() {
            this.Url = global::Microarea.TaskBuilderNet.DataSynchroProviders.Properties.Settings.Default.Microarea_TaskBuilderNet_DataSynchroProviders_InfinityDms_InfinityDmsInterfaceService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event setPropertyCompletedEventHandler setPropertyCompleted;
        
        /// <remarks/>
        public event getPropertyCompletedEventHandler getPropertyCompleted;
        
        /// <remarks/>
        public event getFileCompletedEventHandler getFileCompleted;
        
        /// <remarks/>
        public event connectCompletedEventHandler connectCompleted;
        
        /// <remarks/>
        public event getDocumentCompletedEventHandler getDocumentCompleted;
        
        /// <remarks/>
        public event deleteDirCompletedEventHandler deleteDirCompleted;
        
        /// <remarks/>
        public event disconnectCompletedEventHandler disconnectCompleted;
        
        /// <remarks/>
        public event getDocumentVersionCompletedEventHandler getDocumentVersionCompleted;
        
        /// <remarks/>
        public event createDirCompletedEventHandler createDirCompleted;
        
        /// <remarks/>
        public event deleteFileCompletedEventHandler deleteFileCompleted;
        
        /// <remarks/>
        public event copyFileCompletedEventHandler copyFileCompleted;
        
        /// <remarks/>
        public event pingCompletedEventHandler pingCompleted;
        
        /// <remarks/>
        public event getFileVersionCompletedEventHandler getFileVersionCompleted;
        
        /// <remarks/>
        public event getDocumentoCompletedEventHandler getDocumentoCompleted;
        
        /// <remarks/>
        public event getFileReleaseCompletedEventHandler getFileReleaseCompleted;
        
        /// <remarks/>
        public event getAllFileVersionIdCompletedEventHandler getAllFileVersionIdCompleted;
        
        /// <remarks/>
        public event getAllFileVerReleaseCompletedEventHandler getAllFileVerReleaseCompleted;
        
        /// <remarks/>
        public event getDocumentReleaseCompletedEventHandler getDocumentReleaseCompleted;
        
        /// <remarks/>
        public event getAllDocumentVersionIdCompletedEventHandler getAllDocumentVersionIdCompleted;
        
        /// <remarks/>
        public event getAllDocumentVerReleaseCompletedEventHandler getAllDocumentVerReleaseCompleted;
        
        /// <remarks/>
        public event getDocumentVersionByExternalCodeCompletedEventHandler getDocumentVersionByExternalCodeCompleted;
        
        /// <remarks/>
        public event getDocumentReleaseByExternalCodeCompletedEventHandler getDocumentReleaseByExternalCodeCompleted;
        
        /// <remarks/>
        public event getAllDocumentVersionIdByExternalCodeCompletedEventHandler getAllDocumentVersionIdByExternalCodeCompleted;
        
        /// <remarks/>
        public event getAllDocumentVerReleaseByExternalCodeCompletedEventHandler getAllDocumentVerReleaseByExternalCodeCompleted;
        
        /// <remarks/>
        public event getDocumentByExternalCodeCompletedEventHandler getDocumentByExternalCodeCompleted;
        
        /// <remarks/>
        public event getFileCrcCompletedEventHandler getFileCrcCompleted;
        
        /// <remarks/>
        public event DmsEasy_SincroAttributeCompletedEventHandler DmsEasy_SincroAttributeCompleted;
        
        /// <remarks/>
        public event DmsEasy_SincroClassCompletedEventHandler DmsEasy_SincroClassCompleted;
        
        /// <remarks/>
        public event DmsEasy_GetClassCompletedEventHandler DmsEasy_GetClassCompleted;
        
        /// <remarks/>
        public event DmsEasy_GetAttribCompletedEventHandler DmsEasy_GetAttribCompleted;
        
        /// <remarks/>
        public event getNumDocDmsEasyCompletedEventHandler getNumDocDmsEasyCompleted;
        
        /// <remarks/>
        public event setFilePermissionCompletedEventHandler setFilePermissionCompleted;
        
        /// <remarks/>
        public event setFilePermission1CompletedEventHandler setFilePermission1Completed;
        
        /// <remarks/>
        public event setFolderPermissionCompletedEventHandler setFolderPermissionCompleted;
        
        /// <remarks/>
        public event getFilePermissionCompletedEventHandler getFilePermissionCompleted;
        
        /// <remarks/>
        public event getFolderPermissionCompletedEventHandler getFolderPermissionCompleted;
        
        /// <remarks/>
        public event createCompanyFolderCompletedEventHandler createCompanyFolderCompleted;
        
        /// <remarks/>
        public event getFolderCompanyCompletedEventHandler getFolderCompanyCompleted;
        
        /// <remarks/>
        public event getRootCompanyCompletedEventHandler getRootCompanyCompleted;
        
        /// <remarks/>
        public event checkDmsModuleCompletedEventHandler checkDmsModuleCompleted;
        
        /// <remarks/>
        public event getListPersonCompletedEventHandler getListPersonCompleted;
        
        /// <remarks/>
        public event assignSubjectToFileCompletedEventHandler assignSubjectToFileCompleted;
        
        /// <remarks/>
        public event uploadDocumentsCompletedEventHandler uploadDocumentsCompleted;
        
        /// <remarks/>
        public event uploadDocumentCompletedEventHandler uploadDocumentCompleted;
        
        /// <remarks/>
        public event getUploadResponseCompletedEventHandler getUploadResponseCompleted;
        
        /// <remarks/>
        public event getListFileInFolderCompletedEventHandler getListFileInFolderCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("setPropertyReturn")]
        public string setProperty(string sContextId, string sFolder, string sFile, string sPropertyName, string sPropertyValue) {
            object[] results = this.Invoke("setProperty", new object[] {
                        sContextId,
                        sFolder,
                        sFile,
                        sPropertyName,
                        sPropertyValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setPropertyAsync(string sContextId, string sFolder, string sFile, string sPropertyName, string sPropertyValue) {
            this.setPropertyAsync(sContextId, sFolder, sFile, sPropertyName, sPropertyValue, null);
        }
        
        /// <remarks/>
        public void setPropertyAsync(string sContextId, string sFolder, string sFile, string sPropertyName, string sPropertyValue, object userState) {
            if ((this.setPropertyOperationCompleted == null)) {
                this.setPropertyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetPropertyOperationCompleted);
            }
            this.InvokeAsync("setProperty", new object[] {
                        sContextId,
                        sFolder,
                        sFile,
                        sPropertyName,
                        sPropertyValue}, this.setPropertyOperationCompleted, userState);
        }
        
        private void OnsetPropertyOperationCompleted(object arg) {
            if ((this.setPropertyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setPropertyCompleted(this, new setPropertyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getPropertyReturn")]
        public string getProperty(string sContextId, string sFolder, string sFile, string sPropertyName) {
            object[] results = this.Invoke("getProperty", new object[] {
                        sContextId,
                        sFolder,
                        sFile,
                        sPropertyName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getPropertyAsync(string sContextId, string sFolder, string sFile, string sPropertyName) {
            this.getPropertyAsync(sContextId, sFolder, sFile, sPropertyName, null);
        }
        
        /// <remarks/>
        public void getPropertyAsync(string sContextId, string sFolder, string sFile, string sPropertyName, object userState) {
            if ((this.getPropertyOperationCompleted == null)) {
                this.getPropertyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPropertyOperationCompleted);
            }
            this.InvokeAsync("getProperty", new object[] {
                        sContextId,
                        sFolder,
                        sFile,
                        sPropertyName}, this.getPropertyOperationCompleted, userState);
        }
        
        private void OngetPropertyOperationCompleted(object arg) {
            if ((this.getPropertyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPropertyCompleted(this, new getPropertyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getFileReturn", DataType="base64Binary")]
        public byte[] getFile(string sContextId, string sLogicalDir, string sLogicalName, string sFlags) {
            object[] results = this.Invoke("getFile", new object[] {
                        sContextId,
                        sLogicalDir,
                        sLogicalName,
                        sFlags});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getFileAsync(string sContextId, string sLogicalDir, string sLogicalName, string sFlags) {
            this.getFileAsync(sContextId, sLogicalDir, sLogicalName, sFlags, null);
        }
        
        /// <remarks/>
        public void getFileAsync(string sContextId, string sLogicalDir, string sLogicalName, string sFlags, object userState) {
            if ((this.getFileOperationCompleted == null)) {
                this.getFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFileOperationCompleted);
            }
            this.InvokeAsync("getFile", new object[] {
                        sContextId,
                        sLogicalDir,
                        sLogicalName,
                        sFlags}, this.getFileOperationCompleted, userState);
        }
        
        private void OngetFileOperationCompleted(object arg) {
            if ((this.getFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFileCompleted(this, new getFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("connectReturn")]
        public string connect(string sUser, string sPwd, string sCompanyId) {
            object[] results = this.Invoke("connect", new object[] {
                        sUser,
                        sPwd,
                        sCompanyId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void connectAsync(string sUser, string sPwd, string sCompanyId) {
            this.connectAsync(sUser, sPwd, sCompanyId, null);
        }
        
        /// <remarks/>
        public void connectAsync(string sUser, string sPwd, string sCompanyId, object userState) {
            if ((this.connectOperationCompleted == null)) {
                this.connectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconnectOperationCompleted);
            }
            this.InvokeAsync("connect", new object[] {
                        sUser,
                        sPwd,
                        sCompanyId}, this.connectOperationCompleted, userState);
        }
        
        private void OnconnectOperationCompleted(object arg) {
            if ((this.connectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.connectCompleted(this, new connectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getDocumentReturn", DataType="base64Binary")]
        public byte[] getDocument(string sContextId, string sVfCodiceId, string sVfAuthCode) {
            object[] results = this.Invoke("getDocument", new object[] {
                        sContextId,
                        sVfCodiceId,
                        sVfAuthCode});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getDocumentAsync(string sContextId, string sVfCodiceId, string sVfAuthCode) {
            this.getDocumentAsync(sContextId, sVfCodiceId, sVfAuthCode, null);
        }
        
        /// <remarks/>
        public void getDocumentAsync(string sContextId, string sVfCodiceId, string sVfAuthCode, object userState) {
            if ((this.getDocumentOperationCompleted == null)) {
                this.getDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentOperationCompleted);
            }
            this.InvokeAsync("getDocument", new object[] {
                        sContextId,
                        sVfCodiceId,
                        sVfAuthCode}, this.getDocumentOperationCompleted, userState);
        }
        
        private void OngetDocumentOperationCompleted(object arg) {
            if ((this.getDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentCompleted(this, new getDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("deleteDirReturn")]
        public string deleteDir(string sContextId, string sLogicalName, string sRecourse) {
            object[] results = this.Invoke("deleteDir", new object[] {
                        sContextId,
                        sLogicalName,
                        sRecourse});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteDirAsync(string sContextId, string sLogicalName, string sRecourse) {
            this.deleteDirAsync(sContextId, sLogicalName, sRecourse, null);
        }
        
        /// <remarks/>
        public void deleteDirAsync(string sContextId, string sLogicalName, string sRecourse, object userState) {
            if ((this.deleteDirOperationCompleted == null)) {
                this.deleteDirOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteDirOperationCompleted);
            }
            this.InvokeAsync("deleteDir", new object[] {
                        sContextId,
                        sLogicalName,
                        sRecourse}, this.deleteDirOperationCompleted, userState);
        }
        
        private void OndeleteDirOperationCompleted(object arg) {
            if ((this.deleteDirCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteDirCompleted(this, new deleteDirCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("disconnectReturn")]
        public string disconnect(string sContextId) {
            object[] results = this.Invoke("disconnect", new object[] {
                        sContextId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void disconnectAsync(string sContextId) {
            this.disconnectAsync(sContextId, null);
        }
        
        /// <remarks/>
        public void disconnectAsync(string sContextId, object userState) {
            if ((this.disconnectOperationCompleted == null)) {
                this.disconnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OndisconnectOperationCompleted);
            }
            this.InvokeAsync("disconnect", new object[] {
                        sContextId}, this.disconnectOperationCompleted, userState);
        }
        
        private void OndisconnectOperationCompleted(object arg) {
            if ((this.disconnectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.disconnectCompleted(this, new disconnectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getDocumentVersionReturn", DataType="base64Binary")]
        public byte[] getDocumentVersion(string sContextId, string sVfCodiceId, string sVersionId) {
            object[] results = this.Invoke("getDocumentVersion", new object[] {
                        sContextId,
                        sVfCodiceId,
                        sVersionId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getDocumentVersionAsync(string sContextId, string sVfCodiceId, string sVersionId) {
            this.getDocumentVersionAsync(sContextId, sVfCodiceId, sVersionId, null);
        }
        
        /// <remarks/>
        public void getDocumentVersionAsync(string sContextId, string sVfCodiceId, string sVersionId, object userState) {
            if ((this.getDocumentVersionOperationCompleted == null)) {
                this.getDocumentVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentVersionOperationCompleted);
            }
            this.InvokeAsync("getDocumentVersion", new object[] {
                        sContextId,
                        sVfCodiceId,
                        sVersionId}, this.getDocumentVersionOperationCompleted, userState);
        }
        
        private void OngetDocumentVersionOperationCompleted(object arg) {
            if ((this.getDocumentVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentVersionCompleted(this, new getDocumentVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("createDirReturn")]
        public string createDir(string sContextId, string sLogicalName) {
            object[] results = this.Invoke("createDir", new object[] {
                        sContextId,
                        sLogicalName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void createDirAsync(string sContextId, string sLogicalName) {
            this.createDirAsync(sContextId, sLogicalName, null);
        }
        
        /// <remarks/>
        public void createDirAsync(string sContextId, string sLogicalName, object userState) {
            if ((this.createDirOperationCompleted == null)) {
                this.createDirOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateDirOperationCompleted);
            }
            this.InvokeAsync("createDir", new object[] {
                        sContextId,
                        sLogicalName}, this.createDirOperationCompleted, userState);
        }
        
        private void OncreateDirOperationCompleted(object arg) {
            if ((this.createDirCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createDirCompleted(this, new createDirCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("deleteFileReturn")]
        public string deleteFile(string sContextId, string sLogicalDir, string sLogicalName) {
            object[] results = this.Invoke("deleteFile", new object[] {
                        sContextId,
                        sLogicalDir,
                        sLogicalName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteFileAsync(string sContextId, string sLogicalDir, string sLogicalName) {
            this.deleteFileAsync(sContextId, sLogicalDir, sLogicalName, null);
        }
        
        /// <remarks/>
        public void deleteFileAsync(string sContextId, string sLogicalDir, string sLogicalName, object userState) {
            if ((this.deleteFileOperationCompleted == null)) {
                this.deleteFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteFileOperationCompleted);
            }
            this.InvokeAsync("deleteFile", new object[] {
                        sContextId,
                        sLogicalDir,
                        sLogicalName}, this.deleteFileOperationCompleted, userState);
        }
        
        private void OndeleteFileOperationCompleted(object arg) {
            if ((this.deleteFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteFileCompleted(this, new deleteFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("copyFileReturn")]
        public string copyFile(string sContextId, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] bFile, string sLogicalDir, string sLogicalName, string sFlags, int iAgain) {
            object[] results = this.Invoke("copyFile", new object[] {
                        sContextId,
                        bFile,
                        sLogicalDir,
                        sLogicalName,
                        sFlags,
                        iAgain});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void copyFileAsync(string sContextId, byte[] bFile, string sLogicalDir, string sLogicalName, string sFlags, int iAgain) {
            this.copyFileAsync(sContextId, bFile, sLogicalDir, sLogicalName, sFlags, iAgain, null);
        }
        
        /// <remarks/>
        public void copyFileAsync(string sContextId, byte[] bFile, string sLogicalDir, string sLogicalName, string sFlags, int iAgain, object userState) {
            if ((this.copyFileOperationCompleted == null)) {
                this.copyFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OncopyFileOperationCompleted);
            }
            this.InvokeAsync("copyFile", new object[] {
                        sContextId,
                        bFile,
                        sLogicalDir,
                        sLogicalName,
                        sFlags,
                        iAgain}, this.copyFileOperationCompleted, userState);
        }
        
        private void OncopyFileOperationCompleted(object arg) {
            if ((this.copyFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.copyFileCompleted(this, new copyFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pingReturn")]
        public string ping(string sContextId) {
            object[] results = this.Invoke("ping", new object[] {
                        sContextId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void pingAsync(string sContextId) {
            this.pingAsync(sContextId, null);
        }
        
        /// <remarks/>
        public void pingAsync(string sContextId, object userState) {
            if ((this.pingOperationCompleted == null)) {
                this.pingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpingOperationCompleted);
            }
            this.InvokeAsync("ping", new object[] {
                        sContextId}, this.pingOperationCompleted, userState);
        }
        
        private void OnpingOperationCompleted(object arg) {
            if ((this.pingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.pingCompleted(this, new pingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getFileVersionReturn", DataType="base64Binary")]
        public byte[] getFileVersion(string sContextId, string sLogicalDir, string sLogicalName, string sVersionId, string sFlags) {
            object[] results = this.Invoke("getFileVersion", new object[] {
                        sContextId,
                        sLogicalDir,
                        sLogicalName,
                        sVersionId,
                        sFlags});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getFileVersionAsync(string sContextId, string sLogicalDir, string sLogicalName, string sVersionId, string sFlags) {
            this.getFileVersionAsync(sContextId, sLogicalDir, sLogicalName, sVersionId, sFlags, null);
        }
        
        /// <remarks/>
        public void getFileVersionAsync(string sContextId, string sLogicalDir, string sLogicalName, string sVersionId, string sFlags, object userState) {
            if ((this.getFileVersionOperationCompleted == null)) {
                this.getFileVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFileVersionOperationCompleted);
            }
            this.InvokeAsync("getFileVersion", new object[] {
                        sContextId,
                        sLogicalDir,
                        sLogicalName,
                        sVersionId,
                        sFlags}, this.getFileVersionOperationCompleted, userState);
        }
        
        private void OngetFileVersionOperationCompleted(object arg) {
            if ((this.getFileVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFileVersionCompleted(this, new getFileVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getDocumentoReturn")]
        public string getDocumento(string sContextId, string sDocumentId, string sAuthCode) {
            object[] results = this.Invoke("getDocumento", new object[] {
                        sContextId,
                        sDocumentId,
                        sAuthCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDocumentoAsync(string sContextId, string sDocumentId, string sAuthCode) {
            this.getDocumentoAsync(sContextId, sDocumentId, sAuthCode, null);
        }
        
        /// <remarks/>
        public void getDocumentoAsync(string sContextId, string sDocumentId, string sAuthCode, object userState) {
            if ((this.getDocumentoOperationCompleted == null)) {
                this.getDocumentoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentoOperationCompleted);
            }
            this.InvokeAsync("getDocumento", new object[] {
                        sContextId,
                        sDocumentId,
                        sAuthCode}, this.getDocumentoOperationCompleted, userState);
        }
        
        private void OngetDocumentoOperationCompleted(object arg) {
            if ((this.getDocumentoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentoCompleted(this, new getDocumentoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getFileReleaseReturn", DataType="base64Binary")]
        public byte[] getFileRelease(string sContextId, string sLogicalDir, string sLogicalName, string sRelease, string sFlags) {
            object[] results = this.Invoke("getFileRelease", new object[] {
                        sContextId,
                        sLogicalDir,
                        sLogicalName,
                        sRelease,
                        sFlags});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getFileReleaseAsync(string sContextId, string sLogicalDir, string sLogicalName, string sRelease, string sFlags) {
            this.getFileReleaseAsync(sContextId, sLogicalDir, sLogicalName, sRelease, sFlags, null);
        }
        
        /// <remarks/>
        public void getFileReleaseAsync(string sContextId, string sLogicalDir, string sLogicalName, string sRelease, string sFlags, object userState) {
            if ((this.getFileReleaseOperationCompleted == null)) {
                this.getFileReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFileReleaseOperationCompleted);
            }
            this.InvokeAsync("getFileRelease", new object[] {
                        sContextId,
                        sLogicalDir,
                        sLogicalName,
                        sRelease,
                        sFlags}, this.getFileReleaseOperationCompleted, userState);
        }
        
        private void OngetFileReleaseOperationCompleted(object arg) {
            if ((this.getFileReleaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFileReleaseCompleted(this, new getFileReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getAllFileVersionIdReturn")]
        public string getAllFileVersionId(string sContextId, string sLogicalDir, string sLogicalName) {
            object[] results = this.Invoke("getAllFileVersionId", new object[] {
                        sContextId,
                        sLogicalDir,
                        sLogicalName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAllFileVersionIdAsync(string sContextId, string sLogicalDir, string sLogicalName) {
            this.getAllFileVersionIdAsync(sContextId, sLogicalDir, sLogicalName, null);
        }
        
        /// <remarks/>
        public void getAllFileVersionIdAsync(string sContextId, string sLogicalDir, string sLogicalName, object userState) {
            if ((this.getAllFileVersionIdOperationCompleted == null)) {
                this.getAllFileVersionIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllFileVersionIdOperationCompleted);
            }
            this.InvokeAsync("getAllFileVersionId", new object[] {
                        sContextId,
                        sLogicalDir,
                        sLogicalName}, this.getAllFileVersionIdOperationCompleted, userState);
        }
        
        private void OngetAllFileVersionIdOperationCompleted(object arg) {
            if ((this.getAllFileVersionIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllFileVersionIdCompleted(this, new getAllFileVersionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getAllFileVerReleaseReturn")]
        public string getAllFileVerRelease(string sContextId, string sLogicalDir, string sLogicalName) {
            object[] results = this.Invoke("getAllFileVerRelease", new object[] {
                        sContextId,
                        sLogicalDir,
                        sLogicalName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAllFileVerReleaseAsync(string sContextId, string sLogicalDir, string sLogicalName) {
            this.getAllFileVerReleaseAsync(sContextId, sLogicalDir, sLogicalName, null);
        }
        
        /// <remarks/>
        public void getAllFileVerReleaseAsync(string sContextId, string sLogicalDir, string sLogicalName, object userState) {
            if ((this.getAllFileVerReleaseOperationCompleted == null)) {
                this.getAllFileVerReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllFileVerReleaseOperationCompleted);
            }
            this.InvokeAsync("getAllFileVerRelease", new object[] {
                        sContextId,
                        sLogicalDir,
                        sLogicalName}, this.getAllFileVerReleaseOperationCompleted, userState);
        }
        
        private void OngetAllFileVerReleaseOperationCompleted(object arg) {
            if ((this.getAllFileVerReleaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllFileVerReleaseCompleted(this, new getAllFileVerReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getDocumentReleaseReturn", DataType="base64Binary")]
        public byte[] getDocumentRelease(string sContextId, string sVfCodiceId, string sRelease) {
            object[] results = this.Invoke("getDocumentRelease", new object[] {
                        sContextId,
                        sVfCodiceId,
                        sRelease});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getDocumentReleaseAsync(string sContextId, string sVfCodiceId, string sRelease) {
            this.getDocumentReleaseAsync(sContextId, sVfCodiceId, sRelease, null);
        }
        
        /// <remarks/>
        public void getDocumentReleaseAsync(string sContextId, string sVfCodiceId, string sRelease, object userState) {
            if ((this.getDocumentReleaseOperationCompleted == null)) {
                this.getDocumentReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentReleaseOperationCompleted);
            }
            this.InvokeAsync("getDocumentRelease", new object[] {
                        sContextId,
                        sVfCodiceId,
                        sRelease}, this.getDocumentReleaseOperationCompleted, userState);
        }
        
        private void OngetDocumentReleaseOperationCompleted(object arg) {
            if ((this.getDocumentReleaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentReleaseCompleted(this, new getDocumentReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getAllDocumentVersionIdReturn")]
        public string getAllDocumentVersionId(string sContextId, string sVfCodiceId) {
            object[] results = this.Invoke("getAllDocumentVersionId", new object[] {
                        sContextId,
                        sVfCodiceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAllDocumentVersionIdAsync(string sContextId, string sVfCodiceId) {
            this.getAllDocumentVersionIdAsync(sContextId, sVfCodiceId, null);
        }
        
        /// <remarks/>
        public void getAllDocumentVersionIdAsync(string sContextId, string sVfCodiceId, object userState) {
            if ((this.getAllDocumentVersionIdOperationCompleted == null)) {
                this.getAllDocumentVersionIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllDocumentVersionIdOperationCompleted);
            }
            this.InvokeAsync("getAllDocumentVersionId", new object[] {
                        sContextId,
                        sVfCodiceId}, this.getAllDocumentVersionIdOperationCompleted, userState);
        }
        
        private void OngetAllDocumentVersionIdOperationCompleted(object arg) {
            if ((this.getAllDocumentVersionIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllDocumentVersionIdCompleted(this, new getAllDocumentVersionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getAllDocumentVerReleaseReturn")]
        public string getAllDocumentVerRelease(string sContextId, string sVfCodiceId) {
            object[] results = this.Invoke("getAllDocumentVerRelease", new object[] {
                        sContextId,
                        sVfCodiceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAllDocumentVerReleaseAsync(string sContextId, string sVfCodiceId) {
            this.getAllDocumentVerReleaseAsync(sContextId, sVfCodiceId, null);
        }
        
        /// <remarks/>
        public void getAllDocumentVerReleaseAsync(string sContextId, string sVfCodiceId, object userState) {
            if ((this.getAllDocumentVerReleaseOperationCompleted == null)) {
                this.getAllDocumentVerReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllDocumentVerReleaseOperationCompleted);
            }
            this.InvokeAsync("getAllDocumentVerRelease", new object[] {
                        sContextId,
                        sVfCodiceId}, this.getAllDocumentVerReleaseOperationCompleted, userState);
        }
        
        private void OngetAllDocumentVerReleaseOperationCompleted(object arg) {
            if ((this.getAllDocumentVerReleaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllDocumentVerReleaseCompleted(this, new getAllDocumentVerReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getDocumentVersionByExternalCodeReturn", DataType="base64Binary")]
        public byte[] getDocumentVersionByExternalCode(string sContextId, string sVfExternalCode, string sVfOwner, string sVersionId) {
            object[] results = this.Invoke("getDocumentVersionByExternalCode", new object[] {
                        sContextId,
                        sVfExternalCode,
                        sVfOwner,
                        sVersionId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getDocumentVersionByExternalCodeAsync(string sContextId, string sVfExternalCode, string sVfOwner, string sVersionId) {
            this.getDocumentVersionByExternalCodeAsync(sContextId, sVfExternalCode, sVfOwner, sVersionId, null);
        }
        
        /// <remarks/>
        public void getDocumentVersionByExternalCodeAsync(string sContextId, string sVfExternalCode, string sVfOwner, string sVersionId, object userState) {
            if ((this.getDocumentVersionByExternalCodeOperationCompleted == null)) {
                this.getDocumentVersionByExternalCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentVersionByExternalCodeOperationCompleted);
            }
            this.InvokeAsync("getDocumentVersionByExternalCode", new object[] {
                        sContextId,
                        sVfExternalCode,
                        sVfOwner,
                        sVersionId}, this.getDocumentVersionByExternalCodeOperationCompleted, userState);
        }
        
        private void OngetDocumentVersionByExternalCodeOperationCompleted(object arg) {
            if ((this.getDocumentVersionByExternalCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentVersionByExternalCodeCompleted(this, new getDocumentVersionByExternalCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getDocumentReleaseByExternalCodeReturn", DataType="base64Binary")]
        public byte[] getDocumentReleaseByExternalCode(string sContextId, string sVfExternalCode, string sVfOwner, string sRelease) {
            object[] results = this.Invoke("getDocumentReleaseByExternalCode", new object[] {
                        sContextId,
                        sVfExternalCode,
                        sVfOwner,
                        sRelease});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getDocumentReleaseByExternalCodeAsync(string sContextId, string sVfExternalCode, string sVfOwner, string sRelease) {
            this.getDocumentReleaseByExternalCodeAsync(sContextId, sVfExternalCode, sVfOwner, sRelease, null);
        }
        
        /// <remarks/>
        public void getDocumentReleaseByExternalCodeAsync(string sContextId, string sVfExternalCode, string sVfOwner, string sRelease, object userState) {
            if ((this.getDocumentReleaseByExternalCodeOperationCompleted == null)) {
                this.getDocumentReleaseByExternalCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentReleaseByExternalCodeOperationCompleted);
            }
            this.InvokeAsync("getDocumentReleaseByExternalCode", new object[] {
                        sContextId,
                        sVfExternalCode,
                        sVfOwner,
                        sRelease}, this.getDocumentReleaseByExternalCodeOperationCompleted, userState);
        }
        
        private void OngetDocumentReleaseByExternalCodeOperationCompleted(object arg) {
            if ((this.getDocumentReleaseByExternalCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentReleaseByExternalCodeCompleted(this, new getDocumentReleaseByExternalCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getAllDocumentVersionIdByExternalCodeReturn")]
        public string getAllDocumentVersionIdByExternalCode(string sContextId, string sVfExternalCode, string sVfOwner) {
            object[] results = this.Invoke("getAllDocumentVersionIdByExternalCode", new object[] {
                        sContextId,
                        sVfExternalCode,
                        sVfOwner});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAllDocumentVersionIdByExternalCodeAsync(string sContextId, string sVfExternalCode, string sVfOwner) {
            this.getAllDocumentVersionIdByExternalCodeAsync(sContextId, sVfExternalCode, sVfOwner, null);
        }
        
        /// <remarks/>
        public void getAllDocumentVersionIdByExternalCodeAsync(string sContextId, string sVfExternalCode, string sVfOwner, object userState) {
            if ((this.getAllDocumentVersionIdByExternalCodeOperationCompleted == null)) {
                this.getAllDocumentVersionIdByExternalCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllDocumentVersionIdByExternalCodeOperationCompleted);
            }
            this.InvokeAsync("getAllDocumentVersionIdByExternalCode", new object[] {
                        sContextId,
                        sVfExternalCode,
                        sVfOwner}, this.getAllDocumentVersionIdByExternalCodeOperationCompleted, userState);
        }
        
        private void OngetAllDocumentVersionIdByExternalCodeOperationCompleted(object arg) {
            if ((this.getAllDocumentVersionIdByExternalCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllDocumentVersionIdByExternalCodeCompleted(this, new getAllDocumentVersionIdByExternalCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getAllDocumentVerReleaseByExternalCodeReturn")]
        public string getAllDocumentVerReleaseByExternalCode(string sContextId, string sVfExternalCode, string sVfOwner) {
            object[] results = this.Invoke("getAllDocumentVerReleaseByExternalCode", new object[] {
                        sContextId,
                        sVfExternalCode,
                        sVfOwner});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAllDocumentVerReleaseByExternalCodeAsync(string sContextId, string sVfExternalCode, string sVfOwner) {
            this.getAllDocumentVerReleaseByExternalCodeAsync(sContextId, sVfExternalCode, sVfOwner, null);
        }
        
        /// <remarks/>
        public void getAllDocumentVerReleaseByExternalCodeAsync(string sContextId, string sVfExternalCode, string sVfOwner, object userState) {
            if ((this.getAllDocumentVerReleaseByExternalCodeOperationCompleted == null)) {
                this.getAllDocumentVerReleaseByExternalCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllDocumentVerReleaseByExternalCodeOperationCompleted);
            }
            this.InvokeAsync("getAllDocumentVerReleaseByExternalCode", new object[] {
                        sContextId,
                        sVfExternalCode,
                        sVfOwner}, this.getAllDocumentVerReleaseByExternalCodeOperationCompleted, userState);
        }
        
        private void OngetAllDocumentVerReleaseByExternalCodeOperationCompleted(object arg) {
            if ((this.getAllDocumentVerReleaseByExternalCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllDocumentVerReleaseByExternalCodeCompleted(this, new getAllDocumentVerReleaseByExternalCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getDocumentByExternalCodeReturn", DataType="base64Binary")]
        public byte[] getDocumentByExternalCode(string sContextId, string sVfExternalCode, string sVfOwner) {
            object[] results = this.Invoke("getDocumentByExternalCode", new object[] {
                        sContextId,
                        sVfExternalCode,
                        sVfOwner});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getDocumentByExternalCodeAsync(string sContextId, string sVfExternalCode, string sVfOwner) {
            this.getDocumentByExternalCodeAsync(sContextId, sVfExternalCode, sVfOwner, null);
        }
        
        /// <remarks/>
        public void getDocumentByExternalCodeAsync(string sContextId, string sVfExternalCode, string sVfOwner, object userState) {
            if ((this.getDocumentByExternalCodeOperationCompleted == null)) {
                this.getDocumentByExternalCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentByExternalCodeOperationCompleted);
            }
            this.InvokeAsync("getDocumentByExternalCode", new object[] {
                        sContextId,
                        sVfExternalCode,
                        sVfOwner}, this.getDocumentByExternalCodeOperationCompleted, userState);
        }
        
        private void OngetDocumentByExternalCodeOperationCompleted(object arg) {
            if ((this.getDocumentByExternalCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentByExternalCodeCompleted(this, new getDocumentByExternalCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getFileCrcReturn")]
        public string getFileCrc(string sContextId, string sLogicalDir, string sLogicalName) {
            object[] results = this.Invoke("getFileCrc", new object[] {
                        sContextId,
                        sLogicalDir,
                        sLogicalName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getFileCrcAsync(string sContextId, string sLogicalDir, string sLogicalName) {
            this.getFileCrcAsync(sContextId, sLogicalDir, sLogicalName, null);
        }
        
        /// <remarks/>
        public void getFileCrcAsync(string sContextId, string sLogicalDir, string sLogicalName, object userState) {
            if ((this.getFileCrcOperationCompleted == null)) {
                this.getFileCrcOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFileCrcOperationCompleted);
            }
            this.InvokeAsync("getFileCrc", new object[] {
                        sContextId,
                        sLogicalDir,
                        sLogicalName}, this.getFileCrcOperationCompleted, userState);
        }
        
        private void OngetFileCrcOperationCompleted(object arg) {
            if ((this.getFileCrcCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFileCrcCompleted(this, new getFileCrcCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("DmsEasy_SincroAttributeReturn")]
        public string DmsEasy_SincroAttribute(string sContextId, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] bXml, string sFlags, int iAgain) {
            object[] results = this.Invoke("DmsEasy_SincroAttribute", new object[] {
                        sContextId,
                        bXml,
                        sFlags,
                        iAgain});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DmsEasy_SincroAttributeAsync(string sContextId, byte[] bXml, string sFlags, int iAgain) {
            this.DmsEasy_SincroAttributeAsync(sContextId, bXml, sFlags, iAgain, null);
        }
        
        /// <remarks/>
        public void DmsEasy_SincroAttributeAsync(string sContextId, byte[] bXml, string sFlags, int iAgain, object userState) {
            if ((this.DmsEasy_SincroAttributeOperationCompleted == null)) {
                this.DmsEasy_SincroAttributeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDmsEasy_SincroAttributeOperationCompleted);
            }
            this.InvokeAsync("DmsEasy_SincroAttribute", new object[] {
                        sContextId,
                        bXml,
                        sFlags,
                        iAgain}, this.DmsEasy_SincroAttributeOperationCompleted, userState);
        }
        
        private void OnDmsEasy_SincroAttributeOperationCompleted(object arg) {
            if ((this.DmsEasy_SincroAttributeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DmsEasy_SincroAttributeCompleted(this, new DmsEasy_SincroAttributeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("DmsEasy_SincroClassReturn")]
        public string DmsEasy_SincroClass(string sContextId, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] bXml, string sFlags, int iAgain) {
            object[] results = this.Invoke("DmsEasy_SincroClass", new object[] {
                        sContextId,
                        bXml,
                        sFlags,
                        iAgain});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DmsEasy_SincroClassAsync(string sContextId, byte[] bXml, string sFlags, int iAgain) {
            this.DmsEasy_SincroClassAsync(sContextId, bXml, sFlags, iAgain, null);
        }
        
        /// <remarks/>
        public void DmsEasy_SincroClassAsync(string sContextId, byte[] bXml, string sFlags, int iAgain, object userState) {
            if ((this.DmsEasy_SincroClassOperationCompleted == null)) {
                this.DmsEasy_SincroClassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDmsEasy_SincroClassOperationCompleted);
            }
            this.InvokeAsync("DmsEasy_SincroClass", new object[] {
                        sContextId,
                        bXml,
                        sFlags,
                        iAgain}, this.DmsEasy_SincroClassOperationCompleted, userState);
        }
        
        private void OnDmsEasy_SincroClassOperationCompleted(object arg) {
            if ((this.DmsEasy_SincroClassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DmsEasy_SincroClassCompleted(this, new DmsEasy_SincroClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("DmsEasy_GetClassReturn", DataType="base64Binary")]
        public byte[] DmsEasy_GetClass(string sContextId) {
            object[] results = this.Invoke("DmsEasy_GetClass", new object[] {
                        sContextId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DmsEasy_GetClassAsync(string sContextId) {
            this.DmsEasy_GetClassAsync(sContextId, null);
        }
        
        /// <remarks/>
        public void DmsEasy_GetClassAsync(string sContextId, object userState) {
            if ((this.DmsEasy_GetClassOperationCompleted == null)) {
                this.DmsEasy_GetClassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDmsEasy_GetClassOperationCompleted);
            }
            this.InvokeAsync("DmsEasy_GetClass", new object[] {
                        sContextId}, this.DmsEasy_GetClassOperationCompleted, userState);
        }
        
        private void OnDmsEasy_GetClassOperationCompleted(object arg) {
            if ((this.DmsEasy_GetClassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DmsEasy_GetClassCompleted(this, new DmsEasy_GetClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("DmsEasy_GetAttribReturn", DataType="base64Binary")]
        public byte[] DmsEasy_GetAttrib(string sContextId) {
            object[] results = this.Invoke("DmsEasy_GetAttrib", new object[] {
                        sContextId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DmsEasy_GetAttribAsync(string sContextId) {
            this.DmsEasy_GetAttribAsync(sContextId, null);
        }
        
        /// <remarks/>
        public void DmsEasy_GetAttribAsync(string sContextId, object userState) {
            if ((this.DmsEasy_GetAttribOperationCompleted == null)) {
                this.DmsEasy_GetAttribOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDmsEasy_GetAttribOperationCompleted);
            }
            this.InvokeAsync("DmsEasy_GetAttrib", new object[] {
                        sContextId}, this.DmsEasy_GetAttribOperationCompleted, userState);
        }
        
        private void OnDmsEasy_GetAttribOperationCompleted(object arg) {
            if ((this.DmsEasy_GetAttribCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DmsEasy_GetAttribCompleted(this, new DmsEasy_GetAttribCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getNumDocDmsEasyReturn")]
        public string getNumDocDmsEasy(string sContextId, string sAttributes, string sValues) {
            object[] results = this.Invoke("getNumDocDmsEasy", new object[] {
                        sContextId,
                        sAttributes,
                        sValues});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getNumDocDmsEasyAsync(string sContextId, string sAttributes, string sValues) {
            this.getNumDocDmsEasyAsync(sContextId, sAttributes, sValues, null);
        }
        
        /// <remarks/>
        public void getNumDocDmsEasyAsync(string sContextId, string sAttributes, string sValues, object userState) {
            if ((this.getNumDocDmsEasyOperationCompleted == null)) {
                this.getNumDocDmsEasyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNumDocDmsEasyOperationCompleted);
            }
            this.InvokeAsync("getNumDocDmsEasy", new object[] {
                        sContextId,
                        sAttributes,
                        sValues}, this.getNumDocDmsEasyOperationCompleted, userState);
        }
        
        private void OngetNumDocDmsEasyOperationCompleted(object arg) {
            if ((this.getNumDocDmsEasyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNumDocDmsEasyCompleted(this, new getNumDocDmsEasyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("setFilePermissionReturn")]
        public string setFilePermission(string sContextId, string sFolder, string sFile, string sLogin, string sPermission, string sValue) {
            object[] results = this.Invoke("setFilePermission", new object[] {
                        sContextId,
                        sFolder,
                        sFile,
                        sLogin,
                        sPermission,
                        sValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setFilePermissionAsync(string sContextId, string sFolder, string sFile, string sLogin, string sPermission, string sValue) {
            this.setFilePermissionAsync(sContextId, sFolder, sFile, sLogin, sPermission, sValue, null);
        }
        
        /// <remarks/>
        public void setFilePermissionAsync(string sContextId, string sFolder, string sFile, string sLogin, string sPermission, string sValue, object userState) {
            if ((this.setFilePermissionOperationCompleted == null)) {
                this.setFilePermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetFilePermissionOperationCompleted);
            }
            this.InvokeAsync("setFilePermission", new object[] {
                        sContextId,
                        sFolder,
                        sFile,
                        sLogin,
                        sPermission,
                        sValue}, this.setFilePermissionOperationCompleted, userState);
        }
        
        private void OnsetFilePermissionOperationCompleted(object arg) {
            if ((this.setFilePermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setFilePermissionCompleted(this, new setFilePermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="setFilePermission1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("setFilePermissionReturn")]
        public string setFilePermission(string sContextId, string sFolder, string sFile, int iGroupId, int iUserId, string sPermission, string sValue) {
            object[] results = this.Invoke("setFilePermission1", new object[] {
                        sContextId,
                        sFolder,
                        sFile,
                        iGroupId,
                        iUserId,
                        sPermission,
                        sValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setFilePermission1Async(string sContextId, string sFolder, string sFile, int iGroupId, int iUserId, string sPermission, string sValue) {
            this.setFilePermission1Async(sContextId, sFolder, sFile, iGroupId, iUserId, sPermission, sValue, null);
        }
        
        /// <remarks/>
        public void setFilePermission1Async(string sContextId, string sFolder, string sFile, int iGroupId, int iUserId, string sPermission, string sValue, object userState) {
            if ((this.setFilePermission1OperationCompleted == null)) {
                this.setFilePermission1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetFilePermission1OperationCompleted);
            }
            this.InvokeAsync("setFilePermission1", new object[] {
                        sContextId,
                        sFolder,
                        sFile,
                        iGroupId,
                        iUserId,
                        sPermission,
                        sValue}, this.setFilePermission1OperationCompleted, userState);
        }
        
        private void OnsetFilePermission1OperationCompleted(object arg) {
            if ((this.setFilePermission1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setFilePermission1Completed(this, new setFilePermission1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("setFolderPermissionReturn")]
        public string setFolderPermission(string sContextId, string sFolder, int iGroupId, int iUserId, string sPermission, string sValue) {
            object[] results = this.Invoke("setFolderPermission", new object[] {
                        sContextId,
                        sFolder,
                        iGroupId,
                        iUserId,
                        sPermission,
                        sValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setFolderPermissionAsync(string sContextId, string sFolder, int iGroupId, int iUserId, string sPermission, string sValue) {
            this.setFolderPermissionAsync(sContextId, sFolder, iGroupId, iUserId, sPermission, sValue, null);
        }
        
        /// <remarks/>
        public void setFolderPermissionAsync(string sContextId, string sFolder, int iGroupId, int iUserId, string sPermission, string sValue, object userState) {
            if ((this.setFolderPermissionOperationCompleted == null)) {
                this.setFolderPermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetFolderPermissionOperationCompleted);
            }
            this.InvokeAsync("setFolderPermission", new object[] {
                        sContextId,
                        sFolder,
                        iGroupId,
                        iUserId,
                        sPermission,
                        sValue}, this.setFolderPermissionOperationCompleted, userState);
        }
        
        private void OnsetFolderPermissionOperationCompleted(object arg) {
            if ((this.setFolderPermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setFolderPermissionCompleted(this, new setFolderPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getFilePermissionReturn")]
        public string getFilePermission(string sContextId, string sFolder, string sFile, int iGroupId, int iUserId, string sPermission) {
            object[] results = this.Invoke("getFilePermission", new object[] {
                        sContextId,
                        sFolder,
                        sFile,
                        iGroupId,
                        iUserId,
                        sPermission});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getFilePermissionAsync(string sContextId, string sFolder, string sFile, int iGroupId, int iUserId, string sPermission) {
            this.getFilePermissionAsync(sContextId, sFolder, sFile, iGroupId, iUserId, sPermission, null);
        }
        
        /// <remarks/>
        public void getFilePermissionAsync(string sContextId, string sFolder, string sFile, int iGroupId, int iUserId, string sPermission, object userState) {
            if ((this.getFilePermissionOperationCompleted == null)) {
                this.getFilePermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFilePermissionOperationCompleted);
            }
            this.InvokeAsync("getFilePermission", new object[] {
                        sContextId,
                        sFolder,
                        sFile,
                        iGroupId,
                        iUserId,
                        sPermission}, this.getFilePermissionOperationCompleted, userState);
        }
        
        private void OngetFilePermissionOperationCompleted(object arg) {
            if ((this.getFilePermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFilePermissionCompleted(this, new getFilePermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getFolderPermissionReturn")]
        public string getFolderPermission(string sContextId, string sFolder, int iGroupId, int iUserId, string sPermission) {
            object[] results = this.Invoke("getFolderPermission", new object[] {
                        sContextId,
                        sFolder,
                        iGroupId,
                        iUserId,
                        sPermission});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getFolderPermissionAsync(string sContextId, string sFolder, int iGroupId, int iUserId, string sPermission) {
            this.getFolderPermissionAsync(sContextId, sFolder, iGroupId, iUserId, sPermission, null);
        }
        
        /// <remarks/>
        public void getFolderPermissionAsync(string sContextId, string sFolder, int iGroupId, int iUserId, string sPermission, object userState) {
            if ((this.getFolderPermissionOperationCompleted == null)) {
                this.getFolderPermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFolderPermissionOperationCompleted);
            }
            this.InvokeAsync("getFolderPermission", new object[] {
                        sContextId,
                        sFolder,
                        iGroupId,
                        iUserId,
                        sPermission}, this.getFolderPermissionOperationCompleted, userState);
        }
        
        private void OngetFolderPermissionOperationCompleted(object arg) {
            if ((this.getFolderPermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFolderPermissionCompleted(this, new getFolderPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("createCompanyFolderReturn")]
        public string createCompanyFolder(string sContextId, string sApplicationId, string sCompanyOwner) {
            object[] results = this.Invoke("createCompanyFolder", new object[] {
                        sContextId,
                        sApplicationId,
                        sCompanyOwner});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void createCompanyFolderAsync(string sContextId, string sApplicationId, string sCompanyOwner) {
            this.createCompanyFolderAsync(sContextId, sApplicationId, sCompanyOwner, null);
        }
        
        /// <remarks/>
        public void createCompanyFolderAsync(string sContextId, string sApplicationId, string sCompanyOwner, object userState) {
            if ((this.createCompanyFolderOperationCompleted == null)) {
                this.createCompanyFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateCompanyFolderOperationCompleted);
            }
            this.InvokeAsync("createCompanyFolder", new object[] {
                        sContextId,
                        sApplicationId,
                        sCompanyOwner}, this.createCompanyFolderOperationCompleted, userState);
        }
        
        private void OncreateCompanyFolderOperationCompleted(object arg) {
            if ((this.createCompanyFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createCompanyFolderCompleted(this, new createCompanyFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getFolderCompanyReturn")]
        public string getFolderCompany(string sContextId, string sApplicationId, string sCompanyOwnerCode) {
            object[] results = this.Invoke("getFolderCompany", new object[] {
                        sContextId,
                        sApplicationId,
                        sCompanyOwnerCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getFolderCompanyAsync(string sContextId, string sApplicationId, string sCompanyOwnerCode) {
            this.getFolderCompanyAsync(sContextId, sApplicationId, sCompanyOwnerCode, null);
        }
        
        /// <remarks/>
        public void getFolderCompanyAsync(string sContextId, string sApplicationId, string sCompanyOwnerCode, object userState) {
            if ((this.getFolderCompanyOperationCompleted == null)) {
                this.getFolderCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFolderCompanyOperationCompleted);
            }
            this.InvokeAsync("getFolderCompany", new object[] {
                        sContextId,
                        sApplicationId,
                        sCompanyOwnerCode}, this.getFolderCompanyOperationCompleted, userState);
        }
        
        private void OngetFolderCompanyOperationCompleted(object arg) {
            if ((this.getFolderCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFolderCompanyCompleted(this, new getFolderCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getRootCompanyReturn")]
        public string getRootCompany(string sContextId) {
            object[] results = this.Invoke("getRootCompany", new object[] {
                        sContextId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getRootCompanyAsync(string sContextId) {
            this.getRootCompanyAsync(sContextId, null);
        }
        
        /// <remarks/>
        public void getRootCompanyAsync(string sContextId, object userState) {
            if ((this.getRootCompanyOperationCompleted == null)) {
                this.getRootCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRootCompanyOperationCompleted);
            }
            this.InvokeAsync("getRootCompany", new object[] {
                        sContextId}, this.getRootCompanyOperationCompleted, userState);
        }
        
        private void OngetRootCompanyOperationCompleted(object arg) {
            if ((this.getRootCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRootCompanyCompleted(this, new getRootCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("checkDmsModuleReturn")]
        public string checkDmsModule(string sContextId) {
            object[] results = this.Invoke("checkDmsModule", new object[] {
                        sContextId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkDmsModuleAsync(string sContextId) {
            this.checkDmsModuleAsync(sContextId, null);
        }
        
        /// <remarks/>
        public void checkDmsModuleAsync(string sContextId, object userState) {
            if ((this.checkDmsModuleOperationCompleted == null)) {
                this.checkDmsModuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckDmsModuleOperationCompleted);
            }
            this.InvokeAsync("checkDmsModule", new object[] {
                        sContextId}, this.checkDmsModuleOperationCompleted, userState);
        }
        
        private void OncheckDmsModuleOperationCompleted(object arg) {
            if ((this.checkDmsModuleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkDmsModuleCompleted(this, new checkDmsModuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getListPersonReturn")]
        public string getListPerson(string sContextId, string sOwnerCode, string sRole, string sApplicationId) {
            object[] results = this.Invoke("getListPerson", new object[] {
                        sContextId,
                        sOwnerCode,
                        sRole,
                        sApplicationId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getListPersonAsync(string sContextId, string sOwnerCode, string sRole, string sApplicationId) {
            this.getListPersonAsync(sContextId, sOwnerCode, sRole, sApplicationId, null);
        }
        
        /// <remarks/>
        public void getListPersonAsync(string sContextId, string sOwnerCode, string sRole, string sApplicationId, object userState) {
            if ((this.getListPersonOperationCompleted == null)) {
                this.getListPersonOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetListPersonOperationCompleted);
            }
            this.InvokeAsync("getListPerson", new object[] {
                        sContextId,
                        sOwnerCode,
                        sRole,
                        sApplicationId}, this.getListPersonOperationCompleted, userState);
        }
        
        private void OngetListPersonOperationCompleted(object arg) {
            if ((this.getListPersonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getListPersonCompleted(this, new getListPersonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("assignSubjectToFileReturn")]
        public string assignSubjectToFile(string sContextId, string sLogicalDir, string sLogicalName, string sSubject, string sOwner, string sOwnerCode) {
            object[] results = this.Invoke("assignSubjectToFile", new object[] {
                        sContextId,
                        sLogicalDir,
                        sLogicalName,
                        sSubject,
                        sOwner,
                        sOwnerCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void assignSubjectToFileAsync(string sContextId, string sLogicalDir, string sLogicalName, string sSubject, string sOwner, string sOwnerCode) {
            this.assignSubjectToFileAsync(sContextId, sLogicalDir, sLogicalName, sSubject, sOwner, sOwnerCode, null);
        }
        
        /// <remarks/>
        public void assignSubjectToFileAsync(string sContextId, string sLogicalDir, string sLogicalName, string sSubject, string sOwner, string sOwnerCode, object userState) {
            if ((this.assignSubjectToFileOperationCompleted == null)) {
                this.assignSubjectToFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnassignSubjectToFileOperationCompleted);
            }
            this.InvokeAsync("assignSubjectToFile", new object[] {
                        sContextId,
                        sLogicalDir,
                        sLogicalName,
                        sSubject,
                        sOwner,
                        sOwnerCode}, this.assignSubjectToFileOperationCompleted, userState);
        }
        
        private void OnassignSubjectToFileOperationCompleted(object arg) {
            if ((this.assignSubjectToFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.assignSubjectToFileCompleted(this, new assignSubjectToFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("uploadDocumentsReturn")]
        public string uploadDocuments(string sContextId, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] bDocuments, string sFlags, int iAgain) {
            object[] results = this.Invoke("uploadDocuments", new object[] {
                        sContextId,
                        bDocuments,
                        sFlags,
                        iAgain});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void uploadDocumentsAsync(string sContextId, byte[] bDocuments, string sFlags, int iAgain) {
            this.uploadDocumentsAsync(sContextId, bDocuments, sFlags, iAgain, null);
        }
        
        /// <remarks/>
        public void uploadDocumentsAsync(string sContextId, byte[] bDocuments, string sFlags, int iAgain, object userState) {
            if ((this.uploadDocumentsOperationCompleted == null)) {
                this.uploadDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadDocumentsOperationCompleted);
            }
            this.InvokeAsync("uploadDocuments", new object[] {
                        sContextId,
                        bDocuments,
                        sFlags,
                        iAgain}, this.uploadDocumentsOperationCompleted, userState);
        }
        
        private void OnuploadDocumentsOperationCompleted(object arg) {
            if ((this.uploadDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadDocumentsCompleted(this, new uploadDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("uploadDocumentReturn")]
        public string uploadDocument(string sContextId, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] bDocument, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] bDescriptor, string sFlags, int iAgain) {
            object[] results = this.Invoke("uploadDocument", new object[] {
                        sContextId,
                        bDocument,
                        bDescriptor,
                        sFlags,
                        iAgain});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void uploadDocumentAsync(string sContextId, byte[] bDocument, byte[] bDescriptor, string sFlags, int iAgain) {
            this.uploadDocumentAsync(sContextId, bDocument, bDescriptor, sFlags, iAgain, null);
        }
        
        /// <remarks/>
        public void uploadDocumentAsync(string sContextId, byte[] bDocument, byte[] bDescriptor, string sFlags, int iAgain, object userState) {
            if ((this.uploadDocumentOperationCompleted == null)) {
                this.uploadDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadDocumentOperationCompleted);
            }
            this.InvokeAsync("uploadDocument", new object[] {
                        sContextId,
                        bDocument,
                        bDescriptor,
                        sFlags,
                        iAgain}, this.uploadDocumentOperationCompleted, userState);
        }
        
        private void OnuploadDocumentOperationCompleted(object arg) {
            if ((this.uploadDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadDocumentCompleted(this, new uploadDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getUploadResponseReturn", DataType="base64Binary")]
        public byte[] getUploadResponse(string sContextId, string sType) {
            object[] results = this.Invoke("getUploadResponse", new object[] {
                        sContextId,
                        sType});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getUploadResponseAsync(string sContextId, string sType) {
            this.getUploadResponseAsync(sContextId, sType, null);
        }
        
        /// <remarks/>
        public void getUploadResponseAsync(string sContextId, string sType, object userState) {
            if ((this.getUploadResponseOperationCompleted == null)) {
                this.getUploadResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUploadResponseOperationCompleted);
            }
            this.InvokeAsync("getUploadResponse", new object[] {
                        sContextId,
                        sType}, this.getUploadResponseOperationCompleted, userState);
        }
        
        private void OngetUploadResponseOperationCompleted(object arg) {
            if ((this.getUploadResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUploadResponseCompleted(this, new getUploadResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.dmsinterface.infinity.zucchetti.it", ResponseNamespace="http://srv-infinity:8080/Infinity24/services/InfinityDmsInterface")]
        [return: System.Xml.Serialization.SoapElementAttribute("getListFileInFolderReturn", DataType="base64Binary")]
        public byte[] getListFileInFolder(string sContextId, string sLogicalDir, string sWithSubfolder) {
            object[] results = this.Invoke("getListFileInFolder", new object[] {
                        sContextId,
                        sLogicalDir,
                        sWithSubfolder});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getListFileInFolderAsync(string sContextId, string sLogicalDir, string sWithSubfolder) {
            this.getListFileInFolderAsync(sContextId, sLogicalDir, sWithSubfolder, null);
        }
        
        /// <remarks/>
        public void getListFileInFolderAsync(string sContextId, string sLogicalDir, string sWithSubfolder, object userState) {
            if ((this.getListFileInFolderOperationCompleted == null)) {
                this.getListFileInFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetListFileInFolderOperationCompleted);
            }
            this.InvokeAsync("getListFileInFolder", new object[] {
                        sContextId,
                        sLogicalDir,
                        sWithSubfolder}, this.getListFileInFolderOperationCompleted, userState);
        }
        
        private void OngetListFileInFolderOperationCompleted(object arg) {
            if ((this.getListFileInFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getListFileInFolderCompleted(this, new getListFileInFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void setPropertyCompletedEventHandler(object sender, setPropertyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setPropertyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setPropertyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getPropertyCompletedEventHandler(object sender, getPropertyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPropertyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPropertyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getFileCompletedEventHandler(object sender, getFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void connectCompletedEventHandler(object sender, connectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class connectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal connectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getDocumentCompletedEventHandler(object sender, getDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void deleteDirCompletedEventHandler(object sender, deleteDirCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteDirCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteDirCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void disconnectCompletedEventHandler(object sender, disconnectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class disconnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal disconnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getDocumentVersionCompletedEventHandler(object sender, getDocumentVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void createDirCompletedEventHandler(object sender, createDirCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createDirCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createDirCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void deleteFileCompletedEventHandler(object sender, deleteFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void copyFileCompletedEventHandler(object sender, copyFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class copyFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal copyFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void pingCompletedEventHandler(object sender, pingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class pingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal pingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getFileVersionCompletedEventHandler(object sender, getFileVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFileVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFileVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getDocumentoCompletedEventHandler(object sender, getDocumentoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getFileReleaseCompletedEventHandler(object sender, getFileReleaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFileReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFileReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getAllFileVersionIdCompletedEventHandler(object sender, getAllFileVersionIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllFileVersionIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllFileVersionIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getAllFileVerReleaseCompletedEventHandler(object sender, getAllFileVerReleaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllFileVerReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllFileVerReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getDocumentReleaseCompletedEventHandler(object sender, getDocumentReleaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getAllDocumentVersionIdCompletedEventHandler(object sender, getAllDocumentVersionIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllDocumentVersionIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllDocumentVersionIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getAllDocumentVerReleaseCompletedEventHandler(object sender, getAllDocumentVerReleaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllDocumentVerReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllDocumentVerReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getDocumentVersionByExternalCodeCompletedEventHandler(object sender, getDocumentVersionByExternalCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentVersionByExternalCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentVersionByExternalCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getDocumentReleaseByExternalCodeCompletedEventHandler(object sender, getDocumentReleaseByExternalCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentReleaseByExternalCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentReleaseByExternalCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getAllDocumentVersionIdByExternalCodeCompletedEventHandler(object sender, getAllDocumentVersionIdByExternalCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllDocumentVersionIdByExternalCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllDocumentVersionIdByExternalCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getAllDocumentVerReleaseByExternalCodeCompletedEventHandler(object sender, getAllDocumentVerReleaseByExternalCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllDocumentVerReleaseByExternalCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllDocumentVerReleaseByExternalCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getDocumentByExternalCodeCompletedEventHandler(object sender, getDocumentByExternalCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentByExternalCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentByExternalCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getFileCrcCompletedEventHandler(object sender, getFileCrcCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFileCrcCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFileCrcCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DmsEasy_SincroAttributeCompletedEventHandler(object sender, DmsEasy_SincroAttributeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DmsEasy_SincroAttributeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DmsEasy_SincroAttributeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DmsEasy_SincroClassCompletedEventHandler(object sender, DmsEasy_SincroClassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DmsEasy_SincroClassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DmsEasy_SincroClassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DmsEasy_GetClassCompletedEventHandler(object sender, DmsEasy_GetClassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DmsEasy_GetClassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DmsEasy_GetClassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DmsEasy_GetAttribCompletedEventHandler(object sender, DmsEasy_GetAttribCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DmsEasy_GetAttribCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DmsEasy_GetAttribCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getNumDocDmsEasyCompletedEventHandler(object sender, getNumDocDmsEasyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNumDocDmsEasyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNumDocDmsEasyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void setFilePermissionCompletedEventHandler(object sender, setFilePermissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setFilePermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setFilePermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void setFilePermission1CompletedEventHandler(object sender, setFilePermission1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setFilePermission1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setFilePermission1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void setFolderPermissionCompletedEventHandler(object sender, setFolderPermissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setFolderPermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setFolderPermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getFilePermissionCompletedEventHandler(object sender, getFilePermissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFilePermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFilePermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getFolderPermissionCompletedEventHandler(object sender, getFolderPermissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFolderPermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFolderPermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void createCompanyFolderCompletedEventHandler(object sender, createCompanyFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createCompanyFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createCompanyFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getFolderCompanyCompletedEventHandler(object sender, getFolderCompanyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFolderCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFolderCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getRootCompanyCompletedEventHandler(object sender, getRootCompanyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRootCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRootCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void checkDmsModuleCompletedEventHandler(object sender, checkDmsModuleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkDmsModuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkDmsModuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getListPersonCompletedEventHandler(object sender, getListPersonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getListPersonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getListPersonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void assignSubjectToFileCompletedEventHandler(object sender, assignSubjectToFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class assignSubjectToFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal assignSubjectToFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void uploadDocumentsCompletedEventHandler(object sender, uploadDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal uploadDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void uploadDocumentCompletedEventHandler(object sender, uploadDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal uploadDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getUploadResponseCompletedEventHandler(object sender, getUploadResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUploadResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUploadResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getListFileInFolderCompletedEventHandler(object sender, getListFileInFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getListFileInFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getListFileInFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591